/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t,e,i,n,r={2170:(t,e,i)=>{"use strict";i.d(e,{Z:()=>f});var n=i(7537),r=i.n(n),o=i(3645),s=i.n(o),a=i(1667),h=i.n(a),c=new URL(i(7976),i.b),l=s()(r()),u=h()(c);l.push([t.id,".mapboxgl-export-list\n{\n    display: none;\n}\n\n.mapboxgl-ctrl-group .mapboxgl-export-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    font-size: 14px;\n    padding: 8px 8px 6px;\n    text-align: right;\n    width: 100%;\n    height: auto;\n    text-align: center;\n}\n\n.mapboxgl-export-list button.active\n{\n    font-weight: bold;\n}\n\n.mapboxgl-export-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.mapboxgl-export-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.mapboxgl-export-control\n{ \n    background: url("+u+");\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\n/*\n * Hide high-res map rendering\n*/\n.hidden-map {\n    overflow: hidden;\n    height: 0;\n    width: 0;\n    position: fixed;\n}\n","",{version:3,sources:["webpack://./css/styles.css"],names:[],mappings:"AAAA;;IAEI,aAAa;AACjB;;AAEA;;IAEI,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,cAAc;IACd,eAAe;IACf,oBAAoB;IACpB,iBAAiB;IACjB,WAAW;IACX,YAAY;IACZ,kBAAkB;AACtB;;AAEA;;IAEI,iBAAiB;AACrB;;AAEA;;IAEI,qCAAqC;AACzC;;AAEA;;IAEI,0BAA0B;AAC9B;;AAEA;;IAEI,mDAA24B;IAC34B,2BAA2B;IAC3B,4BAA4B;IAC5B,oBAAoB;AACxB;;AAEA;;CAEC;AACD;IACI,gBAAgB;IAChB,SAAS;IACT,QAAQ;IACR,eAAe;AACnB",sourcesContent:['.mapboxgl-export-list\n{\n    display: none;\n}\n\n.mapboxgl-ctrl-group .mapboxgl-export-list button\n{\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: block;\n    font-size: 14px;\n    padding: 8px 8px 6px;\n    text-align: right;\n    width: 100%;\n    height: auto;\n    text-align: center;\n}\n\n.mapboxgl-export-list button.active\n{\n    font-weight: bold;\n}\n\n.mapboxgl-export-list button:hover\n{\n    background-color: rgba(0, 0, 0, 0.05);\n}\n\n.mapboxgl-export-list button + button\n{\n    border-top: 1px solid #ddd;\n}\n\n.mapboxgl-export-control\n{ \n    background: url(\'data:image/svg+xml;charset=UTF-8,<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="m422.5 99v-24c0-41.355-33.645-75-75-75h-184c-41.355 0-75 33.645-75 75v24z"/><path d="m118.5 319v122 26 15c0 16.568 13.431 30 30 30h214c16.569 0 30-13.432 30-30v-15-26-122zm177 128h-80c-8.284 0-15-6.716-15-15s6.716-15 15-15h80c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-64h-80c-8.284 0-15-6.716-15-15s6.716-15 15-15h80c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/><path d="m436.5 129h-361c-41.355 0-75 33.645-75 75v120c0 41.355 33.645 75 75 75h13v-80h-9c-8.284 0-15-6.716-15-15s6.716-15 15-15h24 304 24c8.284 0 15 6.716 15 15s-6.716 15-15 15h-9v80h14c41.355 0 75-33.645 75-75v-120c0-41.355-33.645-75-75-75zm-309 94h-48c-8.284 0-15-6.716-15-15s6.716-15 15-15h48c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/></g></svg>\');\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: 70%;\n}\n\n/*\n * Hide high-res map rendering\n*/\n.hidden-map {\n    overflow: hidden;\n    height: 0;\n    width: 0;\n    position: fixed;\n}\n'],sourceRoot:""}]);const f=l},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,r,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(s[h]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);n&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),i&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=i):l[2]=i),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(r," */"),s=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},2702:function(t,e,i){t.exports=function(){"use strict";function t(t){return"function"==typeof t}var e=Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},n=0,r=void 0,o=void 0,s=function(t,e){d[n]=t,d[n+1]=e,2===(n+=2)&&(o?o(p):y())};var a="undefined"!=typeof window?window:void 0,h=a||{},c=h.MutationObserver||h.WebKitMutationObserver,l="undefined"==typeof self&&"undefined"!=typeof process&&"[object process]"==={}.toString.call(process),u="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel;function f(){var t=setTimeout;return function(){return t(p,1)}}var d=new Array(1e3);function p(){for(var t=0;t<n;t+=2)(0,d[t])(d[t+1]),d[t]=void 0,d[t+1]=void 0;n=0}var g,m,v,b,y=void 0;function w(t,e){var i=this,n=new this.constructor(S);void 0===n[_]&&E(n);var r=i._state;if(r){var o=arguments[r-1];s((function(){return j(r,n,o,i._result)}))}else k(i,n,t,e);return n}function x(t){if(t&&"object"==typeof t&&t.constructor===this)return t;var e=new this(S);return L(e,t),e}y=l?function(){return process.nextTick(p)}:c?(m=0,v=new c(p),b=document.createTextNode(""),v.observe(b,{characterData:!0}),function(){b.data=m=++m%2}):u?((g=new MessageChannel).port1.onmessage=p,function(){return g.port2.postMessage(0)}):void 0===a?function(){try{var t=Function("return this")().require("vertx");return void 0!==(r=t.runOnLoop||t.runOnContext)?function(){r(p)}:f()}catch(t){return f()}}():f();var _=Math.random().toString(36).substring(2);function S(){}var C=void 0;function A(e,i,n){i.constructor===e.constructor&&n===w&&i.constructor.resolve===x?function(t,e){1===e._state?T(t,e._result):2===e._state?O(t,e._result):k(e,void 0,(function(e){return L(t,e)}),(function(e){return O(t,e)}))}(e,i):void 0===n?T(e,i):t(n)?function(t,e,i){s((function(t){var n=!1,r=function(t,e,i,n){try{t.call(e,i,n)}catch(t){return t}}(i,e,(function(i){n||(n=!0,e!==i?L(t,i):T(t,i))}),(function(e){n||(n=!0,O(t,e))}),t._label);!n&&r&&(n=!0,O(t,r))}),t)}(e,i,n):T(e,i)}function L(t,e){if(t===e)O(t,new TypeError("You cannot resolve a promise with itself"));else if(r=typeof(n=e),null===n||"object"!==r&&"function"!==r)T(t,e);else{var i=void 0;try{i=e.then}catch(e){return void O(t,e)}A(t,e,i)}var n,r}function P(t){t._onerror&&t._onerror(t._result),N(t)}function T(t,e){t._state===C&&(t._result=e,t._state=1,0!==t._subscribers.length&&s(N,t))}function O(t,e){t._state===C&&(t._state=2,t._result=e,s(P,t))}function k(t,e,i,n){var r=t._subscribers,o=r.length;t._onerror=null,r[o]=e,r[o+1]=i,r[o+2]=n,0===o&&t._state&&s(N,t)}function N(t){var e=t._subscribers,i=t._state;if(0!==e.length){for(var n=void 0,r=void 0,o=t._result,s=0;s<e.length;s+=3)n=e[s],r=e[s+i],n?j(i,n,r,o):r(o);t._subscribers.length=0}}function j(e,i,n,r){var o=t(n),s=void 0,a=void 0,h=!0;if(o){try{s=n(r)}catch(t){h=!1,a=t}if(i===s)return void O(i,new TypeError("A promises callback cannot return that same promise."))}else s=r;i._state!==C||(o&&h?L(i,s):!1===h?O(i,a):1===e?T(i,s):2===e&&O(i,s))}var F=0;function E(t){t[_]=F++,t._state=void 0,t._result=void 0,t._subscribers=[]}var I=function(){function t(t,i){this._instanceConstructor=t,this.promise=new t(S),this.promise[_]||E(this.promise),e(i)?(this.length=i.length,this._remaining=i.length,this._result=new Array(this.length),0===this.length?T(this.promise,this._result):(this.length=this.length||0,this._enumerate(i),0===this._remaining&&T(this.promise,this._result))):O(this.promise,new Error("Array Methods must be provided an Array"))}return t.prototype._enumerate=function(t){for(var e=0;this._state===C&&e<t.length;e++)this._eachEntry(t[e],e)},t.prototype._eachEntry=function(t,e){var i=this._instanceConstructor,n=i.resolve;if(n===x){var r=void 0,o=void 0,s=!1;try{r=t.then}catch(t){s=!0,o=t}if(r===w&&t._state!==C)this._settledAt(t._state,e,t._result);else if("function"!=typeof r)this._remaining--,this._result[e]=t;else if(i===M){var a=new i(S);s?O(a,o):A(a,t,r),this._willSettleAt(a,e)}else this._willSettleAt(new i((function(e){return e(t)})),e)}else this._willSettleAt(n(t),e)},t.prototype._settledAt=function(t,e,i){var n=this.promise;n._state===C&&(this._remaining--,2===t?O(n,i):this._result[e]=i),0===this._remaining&&T(n,this._result)},t.prototype._willSettleAt=function(t,e){var i=this;k(t,void 0,(function(t){return i._settledAt(1,e,t)}),(function(t){return i._settledAt(2,e,t)}))},t}();var M=function(){function e(t){this[_]=F++,this._result=this._state=void 0,this._subscribers=[],S!==t&&("function"!=typeof t&&function(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}(),this instanceof e?function(t,e){try{e((function(e){L(t,e)}),(function(e){O(t,e)}))}catch(e){O(t,e)}}(this,t):function(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}())}return e.prototype.catch=function(t){return this.then(null,t)},e.prototype.finally=function(e){var i=this,n=i.constructor;return t(e)?i.then((function(t){return n.resolve(e()).then((function(){return t}))}),(function(t){return n.resolve(e()).then((function(){throw t}))})):i.then(e,e)},e}();return M.prototype.then=w,M.all=function(t){return new I(this,t).promise},M.race=function(t){var i=this;return e(t)?new i((function(e,n){for(var r=t.length,o=0;o<r;o++)i.resolve(t[o]).then(e,n)})):new i((function(t,e){return e(new TypeError("You must pass an array to race."))}))},M.resolve=x,M.reject=function(t){var e=new this(S);return O(e,t),e},M._setScheduler=function(t){o=t},M._setAsap=function(t){s=t},M._asap=s,M.polyfill=function(){var t=void 0;if(void 0!==i.g)t=i.g;else if("undefined"!=typeof self)t=self;else try{t=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var e=t.Promise;if(e){var n=null;try{n=Object.prototype.toString.call(e.resolve())}catch(t){}if("[object Promise]"===n&&!e.cast)return}t.Promise=M},M.Promise=M,M}()},2777:(t,e,i)=>{var n,r,o,s,a,h,c,l,u,f,d,p,g,m,v,b,y,w,x,_,S,C,A=A||{version:"5.2.1"};if(e.fabric=A,"undefined"!=typeof document&&"undefined"!=typeof window)document instanceof("undefined"!=typeof HTMLDocument?HTMLDocument:Document)?A.document=document:A.document=document.implementation.createHTMLDocument(""),A.window=window;else{var L=new(i(4960).JSDOM)(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"),{features:{FetchExternalResources:["img"]},resources:"usable"}).window;A.document=L.document,A.jsdomImplForWrapper=i(6759).implForWrapper,A.nodeCanvas=i(6272).Canvas,A.window=L,DOMParser=A.window.DOMParser}function P(t,e){var i=t.canvas,n=e.targetCanvas,r=n.getContext("2d");r.translate(0,n.height),r.scale(1,-1);var o=i.height-n.height;r.drawImage(i,0,o,n.width,n.height,0,0,n.width,n.height)}function T(t,e){var i=e.targetCanvas.getContext("2d"),n=e.destinationWidth,r=e.destinationHeight,o=n*r*4,s=new Uint8Array(this.imageBuffer,0,o),a=new Uint8ClampedArray(this.imageBuffer,0,o);t.readPixels(0,0,n,r,t.RGBA,t.UNSIGNED_BYTE,s);var h=new ImageData(a,n,r);i.putImageData(h,0,0)}A.isTouchSupported="ontouchstart"in A.window||"ontouchstart"in A.document||A.window&&A.window.navigator&&A.window.navigator.maxTouchPoints>0,A.isLikelyNode="undefined"!=typeof Buffer&&"undefined"==typeof window,A.SHARED_ATTRIBUTES=["display","transform","fill","fill-opacity","fill-rule","opacity","stroke","stroke-dasharray","stroke-linecap","stroke-dashoffset","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","id","paint-order","vector-effect","instantiated_by_use","clip-path"],A.DPI=96,A.reNum="(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)",A.commaWsp="(?:\\s+,?\\s*|,\\s*)",A.rePathCommand=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/gi,A.reNonWord=/[ \n\.,;!\?\-]/,A.fontPaths={},A.iMatrix=[1,0,0,1,0,0],A.svgNS="http://www.w3.org/2000/svg",A.perfLimitSizeTotal=2097152,A.maxCacheSideLimit=4096,A.minCacheSideLimit=256,A.charWidthsCache={},A.textureSize=2048,A.disableStyleCopyPaste=!1,A.enableGLFiltering=!0,A.devicePixelRatio=A.window.devicePixelRatio||A.window.webkitDevicePixelRatio||A.window.mozDevicePixelRatio||1,A.browserShadowBlurConstant=1,A.arcToSegmentsCache={},A.boundsOfCurveCache={},A.cachesBoundsOfCurve=!0,A.forceGLPutImageData=!1,A.initFilterBackend=function(){return A.enableGLFiltering&&A.isWebglSupported&&A.isWebglSupported(A.textureSize)?(console.log("max texture size: "+A.maxTextureSize),new A.WebglFilterBackend({tileSize:A.textureSize})):A.Canvas2dFilterBackend?new A.Canvas2dFilterBackend:void 0},"undefined"!=typeof document&&"undefined"!=typeof window&&(window.fabric=A),function(){function t(t,e){if(this.__eventListeners[t]){var i=this.__eventListeners[t];e?i[i.indexOf(e)]=!1:A.util.array.fill(i,!1)}}function e(t,e){var i=function(){e.apply(this,arguments),this.off(t,i)}.bind(this);this.on(t,i)}A.Observable={fire:function(t,e){if(!this.__eventListeners)return this;var i=this.__eventListeners[t];if(!i)return this;for(var n=0,r=i.length;n<r;n++)i[n]&&i[n].call(this,e||{});return this.__eventListeners[t]=i.filter((function(t){return!1!==t})),this},on:function(t,e){if(this.__eventListeners||(this.__eventListeners={}),1===arguments.length)for(var i in t)this.on(i,t[i]);else this.__eventListeners[t]||(this.__eventListeners[t]=[]),this.__eventListeners[t].push(e);return this},once:function(t,i){if(1===arguments.length)for(var n in t)e.call(this,n,t[n]);else e.call(this,t,i);return this},off:function(e,i){if(!this.__eventListeners)return this;if(0===arguments.length)for(e in this.__eventListeners)t.call(this,e);else if(1===arguments.length&&"object"==typeof arguments[0])for(var n in e)t.call(this,n,e[n]);else t.call(this,e,i);return this}}}(),A.Collection={_objects:[],add:function(){if(this._objects.push.apply(this._objects,arguments),this._onObjectAdded)for(var t=0,e=arguments.length;t<e;t++)this._onObjectAdded(arguments[t]);return this.renderOnAddRemove&&this.requestRenderAll(),this},insertAt:function(t,e,i){var n=this._objects;return i?n[e]=t:n.splice(e,0,t),this._onObjectAdded&&this._onObjectAdded(t),this.renderOnAddRemove&&this.requestRenderAll(),this},remove:function(){for(var t,e=this._objects,i=!1,n=0,r=arguments.length;n<r;n++)-1!==(t=e.indexOf(arguments[n]))&&(i=!0,e.splice(t,1),this._onObjectRemoved&&this._onObjectRemoved(arguments[n]));return this.renderOnAddRemove&&i&&this.requestRenderAll(),this},forEachObject:function(t,e){for(var i=this.getObjects(),n=0,r=i.length;n<r;n++)t.call(e,i[n],n,i);return this},getObjects:function(t){return void 0===t?this._objects.concat():this._objects.filter((function(e){return e.type===t}))},item:function(t){return this._objects[t]},isEmpty:function(){return 0===this._objects.length},size:function(){return this._objects.length},contains:function(t,e){return this._objects.indexOf(t)>-1||!!e&&this._objects.some((function(e){return"function"==typeof e.contains&&e.contains(t,!0)}))},complexity:function(){return this._objects.reduce((function(t,e){return t+(e.complexity?e.complexity():0)}),0)}},A.CommonMethods={_setOptions:function(t){for(var e in t)this.set(e,t[e])},_initGradient:function(t,e){!t||!t.colorStops||t instanceof A.Gradient||this.set(e,new A.Gradient(t))},_initPattern:function(t,e,i){!t||!t.source||t instanceof A.Pattern?i&&i():this.set(e,new A.Pattern(t,i))},_setObject:function(t){for(var e in t)this._set(e,t[e])},set:function(t,e){return"object"==typeof t?this._setObject(t):this._set(t,e),this},_set:function(t,e){this[t]=e},toggle:function(t){var e=this.get(t);return"boolean"==typeof e&&this.set(t,!e),this},get:function(t){return this[t]}},n=e,r=Math.sqrt,o=Math.atan2,s=Math.pow,a=Math.PI/180,h=Math.PI/2,A.util={cos:function(t){if(0===t)return 1;switch(t<0&&(t=-t),t/h){case 1:case 3:return 0;case 2:return-1}return Math.cos(t)},sin:function(t){if(0===t)return 0;var e=1;switch(t<0&&(e=-1),t/h){case 1:return e;case 2:return 0;case 3:return-e}return Math.sin(t)},removeFromArray:function(t,e){var i=t.indexOf(e);return-1!==i&&t.splice(i,1),t},getRandomInt:function(t,e){return Math.floor(Math.random()*(e-t+1))+t},degreesToRadians:function(t){return t*a},radiansToDegrees:function(t){return t/a},rotatePoint:function(t,e,i){var n=new A.Point(t.x-e.x,t.y-e.y),r=A.util.rotateVector(n,i);return new A.Point(r.x,r.y).addEquals(e)},rotateVector:function(t,e){var i=A.util.sin(e),n=A.util.cos(e);return{x:t.x*n-t.y*i,y:t.x*i+t.y*n}},createVector:function(t,e){return new A.Point(e.x-t.x,e.y-t.y)},calcAngleBetweenVectors:function(t,e){return Math.acos((t.x*e.x+t.y*e.y)/(Math.hypot(t.x,t.y)*Math.hypot(e.x,e.y)))},getHatVector:function(t){return new A.Point(t.x,t.y).multiply(1/Math.hypot(t.x,t.y))},getBisector:function(t,e,i){var n=A.util.createVector(t,e),r=A.util.createVector(t,i),o=A.util.calcAngleBetweenVectors(n,r),s=o*(0===A.util.calcAngleBetweenVectors(A.util.rotateVector(n,o),r)?1:-1)/2;return{vector:A.util.getHatVector(A.util.rotateVector(n,s)),angle:o}},projectStrokeOnPoints:function(t,e,i){var n=[],r=e.strokeWidth/2,o=e.strokeUniform?new A.Point(1/e.scaleX,1/e.scaleY):new A.Point(1,1),s=function(t){var e=r/Math.hypot(t.x,t.y);return new A.Point(t.x*e*o.x,t.y*e*o.y)};return t.length<=1||t.forEach((function(a,h){var c,l,u=new A.Point(a.x,a.y);0===h?(l=t[h+1],c=i?s(A.util.createVector(l,u)).addEquals(u):t[t.length-1]):h===t.length-1?(c=t[h-1],l=i?s(A.util.createVector(c,u)).addEquals(u):t[0]):(c=t[h-1],l=t[h+1]);var f,d,p=A.util.getBisector(u,c,l),g=p.vector,m=p.angle;if("miter"===e.strokeLineJoin&&(f=-r/Math.sin(m/2),d=new A.Point(g.x*f*o.x,g.y*f*o.y),Math.hypot(d.x,d.y)/r<=e.strokeMiterLimit))return n.push(u.add(d)),void n.push(u.subtract(d));f=-r*Math.SQRT2,d=new A.Point(g.x*f*o.x,g.y*f*o.y),n.push(u.add(d)),n.push(u.subtract(d))})),n},transformPoint:function(t,e,i){return i?new A.Point(e[0]*t.x+e[2]*t.y,e[1]*t.x+e[3]*t.y):new A.Point(e[0]*t.x+e[2]*t.y+e[4],e[1]*t.x+e[3]*t.y+e[5])},makeBoundingBoxFromPoints:function(t,e){if(e)for(var i=0;i<t.length;i++)t[i]=A.util.transformPoint(t[i],e);var n=[t[0].x,t[1].x,t[2].x,t[3].x],r=A.util.array.min(n),o=A.util.array.max(n)-r,s=[t[0].y,t[1].y,t[2].y,t[3].y],a=A.util.array.min(s);return{left:r,top:a,width:o,height:A.util.array.max(s)-a}},invertTransform:function(t){var e=1/(t[0]*t[3]-t[1]*t[2]),i=[e*t[3],-e*t[1],-e*t[2],e*t[0]],n=A.util.transformPoint({x:t[4],y:t[5]},i,!0);return i[4]=-n.x,i[5]=-n.y,i},toFixed:function(t,e){return parseFloat(Number(t).toFixed(e))},parseUnit:function(t,e){var i=/\D{0,2}$/.exec(t),n=parseFloat(t);switch(e||(e=A.Text.DEFAULT_SVG_FONT_SIZE),i[0]){case"mm":return n*A.DPI/25.4;case"cm":return n*A.DPI/2.54;case"in":return n*A.DPI;case"pt":return n*A.DPI/72;case"pc":return n*A.DPI/72*12;case"em":return n*e;default:return n}},falseFunction:function(){return!1},getKlass:function(t,e){return t=A.util.string.camelize(t.charAt(0).toUpperCase()+t.slice(1)),A.util.resolveNamespace(e)[t]},getSvgAttributes:function(t){var e=["instantiated_by_use","style","id","class"];switch(t){case"linearGradient":e=e.concat(["x1","y1","x2","y2","gradientUnits","gradientTransform"]);break;case"radialGradient":e=e.concat(["gradientUnits","gradientTransform","cx","cy","r","fx","fy","fr"]);break;case"stop":e=e.concat(["offset","stop-color","stop-opacity"])}return e},resolveNamespace:function(t){if(!t)return A;var e,i=t.split("."),r=i.length,o=n||A.window;for(e=0;e<r;++e)o=o[i[e]];return o},loadImage:function(t,e,i,n){if(t){var r=A.util.createImage(),o=function(){e&&e.call(i,r,!1),r=r.onload=r.onerror=null};r.onload=o,r.onerror=function(){A.log("Error loading "+r.src),e&&e.call(i,null,!0),r=r.onload=r.onerror=null},0!==t.indexOf("data")&&null!=n&&(r.crossOrigin=n),"data:image/svg"===t.substring(0,14)&&(r.onload=null,A.util.loadImageInDom(r,o)),r.src=t}else e&&e.call(i,t)},loadImageInDom:function(t,e){var i=A.document.createElement("div");i.style.width=i.style.height="1px",i.style.left=i.style.top="-100%",i.style.position="absolute",i.appendChild(t),A.document.querySelector("body").appendChild(i),t.onload=function(){e(),i.parentNode.removeChild(i),i=null}},enlivenObjects:function(t,e,i,n){var r=[],o=0,s=(t=t||[]).length;function a(){++o===s&&e&&e(r.filter((function(t){return t})))}s?t.forEach((function(t,e){t&&t.type?A.util.getKlass(t.type,i).fromObject(t,(function(i,o){o||(r[e]=i),n&&n(t,i,o),a()})):a()})):e&&e(r)},enlivenObjectEnlivables:function(t,e,i){var n=A.Object.ENLIVEN_PROPS.filter((function(e){return!!t[e]}));A.util.enlivenObjects(n.map((function(e){return t[e]})),(function(t){var r={};n.forEach((function(i,n){r[i]=t[n],e&&(e[i]=t[n])})),i&&i(r)}))},enlivenPatterns:function(t,e){function i(){++r===o&&e&&e(n)}var n=[],r=0,o=(t=t||[]).length;o?t.forEach((function(t,e){t&&t.source?new A.Pattern(t,(function(t){n[e]=t,i()})):(n[e]=t,i())})):e&&e(n)},groupSVGElements:function(t,e,i){var n;return t&&1===t.length?t[0]:(e&&(e.width&&e.height?e.centerPoint={x:e.width/2,y:e.height/2}:(delete e.width,delete e.height)),n=new A.Group(t,e),void 0!==i&&(n.sourcePath=i),n)},populateWithProperties:function(t,e,i){if(i&&Array.isArray(i))for(var n=0,r=i.length;n<r;n++)i[n]in t&&(e[i[n]]=t[i[n]])},createCanvasElement:function(){return A.document.createElement("canvas")},copyCanvasElement:function(t){var e=A.util.createCanvasElement();return e.width=t.width,e.height=t.height,e.getContext("2d").drawImage(t,0,0),e},toDataURL:function(t,e,i){return t.toDataURL("image/"+e,i)},createImage:function(){return A.document.createElement("img")},multiplyTransformMatrices:function(t,e,i){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],i?0:t[0]*e[4]+t[2]*e[5]+t[4],i?0:t[1]*e[4]+t[3]*e[5]+t[5]]},qrDecompose:function(t){var e=o(t[1],t[0]),i=s(t[0],2)+s(t[1],2),n=r(i),h=(t[0]*t[3]-t[2]*t[1])/n,c=o(t[0]*t[2]+t[1]*t[3],i);return{angle:e/a,scaleX:n,scaleY:h,skewX:c/a,skewY:0,translateX:t[4],translateY:t[5]}},calcRotateMatrix:function(t){if(!t.angle)return A.iMatrix.concat();var e=A.util.degreesToRadians(t.angle),i=A.util.cos(e),n=A.util.sin(e);return[i,n,-n,i,0,0]},calcDimensionsMatrix:function(t){var e=void 0===t.scaleX?1:t.scaleX,i=void 0===t.scaleY?1:t.scaleY,n=[t.flipX?-e:e,0,0,t.flipY?-i:i,0,0],r=A.util.multiplyTransformMatrices,o=A.util.degreesToRadians;return t.skewX&&(n=r(n,[1,0,Math.tan(o(t.skewX)),1],!0)),t.skewY&&(n=r(n,[1,Math.tan(o(t.skewY)),0,1],!0)),n},composeMatrix:function(t){var e=[1,0,0,1,t.translateX||0,t.translateY||0],i=A.util.multiplyTransformMatrices;return t.angle&&(e=i(e,A.util.calcRotateMatrix(t))),(1!==t.scaleX||1!==t.scaleY||t.skewX||t.skewY||t.flipX||t.flipY)&&(e=i(e,A.util.calcDimensionsMatrix(t))),e},resetObjectTransform:function(t){t.scaleX=1,t.scaleY=1,t.skewX=0,t.skewY=0,t.flipX=!1,t.flipY=!1,t.rotate(0)},saveObjectTransform:function(t){return{scaleX:t.scaleX,scaleY:t.scaleY,skewX:t.skewX,skewY:t.skewY,angle:t.angle,left:t.left,flipX:t.flipX,flipY:t.flipY,top:t.top}},isTransparent:function(t,e,i,n){n>0&&(e>n?e-=n:e=0,i>n?i-=n:i=0);var r,o=!0,s=t.getImageData(e,i,2*n||1,2*n||1),a=s.data.length;for(r=3;r<a&&0!=(o=s.data[r]<=0);r+=4);return s=null,o},parsePreserveAspectRatioAttribute:function(t){var e,i="meet",n=t.split(" ");return n&&n.length&&("meet"!==(i=n.pop())&&"slice"!==i?(e=i,i="meet"):n.length&&(e=n.pop())),{meetOrSlice:i,alignX:"none"!==e?e.slice(1,4):"none",alignY:"none"!==e?e.slice(5,8):"none"}},clearFabricFontCache:function(t){(t=(t||"").toLowerCase())?A.charWidthsCache[t]&&delete A.charWidthsCache[t]:A.charWidthsCache={}},limitDimsByArea:function(t,e){var i=Math.sqrt(e*t),n=Math.floor(e/i);return{x:Math.floor(i),y:n}},capValue:function(t,e,i){return Math.max(t,Math.min(e,i))},findScaleToFit:function(t,e){return Math.min(e.width/t.width,e.height/t.height)},findScaleToCover:function(t,e){return Math.max(e.width/t.width,e.height/t.height)},matrixToSVG:function(t){return"matrix("+t.map((function(t){return A.util.toFixed(t,A.Object.NUM_FRACTION_DIGITS)})).join(" ")+")"},removeTransformFromObject:function(t,e){var i=A.util.invertTransform(e),n=A.util.multiplyTransformMatrices(i,t.calcOwnMatrix());A.util.applyTransformToObject(t,n)},addTransformToObject:function(t,e){A.util.applyTransformToObject(t,A.util.multiplyTransformMatrices(e,t.calcOwnMatrix()))},applyTransformToObject:function(t,e){var i=A.util.qrDecompose(e),n=new A.Point(i.translateX,i.translateY);t.flipX=!1,t.flipY=!1,t.set("scaleX",i.scaleX),t.set("scaleY",i.scaleY),t.skewX=i.skewX,t.skewY=i.skewY,t.angle=i.angle,t.setPositionByOrigin(n,"center","center")},sizeAfterTransform:function(t,e,i){var n=t/2,r=e/2,o=[{x:-n,y:-r},{x:n,y:-r},{x:-n,y:r},{x:n,y:r}],s=A.util.calcDimensionsMatrix(i),a=A.util.makeBoundingBoxFromPoints(o,s);return{x:a.width,y:a.height}},mergeClipPaths:function(t,e){var i=t,n=e;i.inverted&&!n.inverted&&(i=e,n=t),A.util.applyTransformToObject(n,A.util.multiplyTransformMatrices(A.util.invertTransform(i.calcTransformMatrix()),n.calcTransformMatrix()));var r=i.inverted&&n.inverted;return r&&(i.inverted=n.inverted=!1),new A.Group([i],{clipPath:n,inverted:r})}},function(){var t=Array.prototype.join,e={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},i={m:"l",M:"L"};function n(t,e,i,n,r,o,s,a,h,c,l){var u=A.util.cos(t),f=A.util.sin(t),d=A.util.cos(e),p=A.util.sin(e),g=i*r*d-n*o*p+s,m=n*r*d+i*o*p+a;return["C",c+h*(-i*r*f-n*o*u),l+h*(-n*r*f+i*o*u),g+h*(i*r*p+n*o*d),m+h*(n*r*p-i*o*d),g,m]}function r(t,e,i,n){var r=Math.atan2(e,t),o=Math.atan2(n,i);return o>=r?o-r:2*Math.PI-(r-o)}function o(t,e,i){for(var o=i[1],s=i[2],a=i[3],h=i[4],c=i[5],l=function(t,e,i,o,s,a,h){var c=Math.PI,l=h*c/180,u=A.util.sin(l),f=A.util.cos(l),d=0,p=0,g=-f*t*.5-u*e*.5,m=-f*e*.5+u*t*.5,v=(i=Math.abs(i))*i,b=(o=Math.abs(o))*o,y=m*m,w=g*g,x=v*b-v*y-b*w,_=0;if(x<0){var S=Math.sqrt(1-x/(v*b));i*=S,o*=S}else _=(s===a?-1:1)*Math.sqrt(x/(v*y+b*w));var C=_*i*m/o,L=-_*o*g/i,P=f*C-u*L+.5*t,T=u*C+f*L+.5*e,O=r(1,0,(g-C)/i,(m-L)/o),k=r((g-C)/i,(m-L)/o,(-g-C)/i,(-m-L)/o);0===a&&k>0?k-=2*c:1===a&&k<0&&(k+=2*c);for(var N=Math.ceil(Math.abs(k/c*2)),j=[],F=k/N,E=8/3*Math.sin(F/4)*Math.sin(F/4)/Math.sin(F/2),I=O+F,M=0;M<N;M++)j[M]=n(O,I,f,u,i,o,P,T,E,d,p),d=j[M][5],p=j[M][6],O=I,I+=F;return j}(i[6]-t,i[7]-e,o,s,h,c,a),u=0,f=l.length;u<f;u++)l[u][1]+=t,l[u][2]+=e,l[u][3]+=t,l[u][4]+=e,l[u][5]+=t,l[u][6]+=e;return l}function s(t,e,i,n){return Math.sqrt((i-t)*(i-t)+(n-e)*(n-e))}function a(t,e,i,n,r,o,s,a){return function(h){var c,l=(c=h)*c*c,u=function(t){return 3*t*t*(1-t)}(h),f=function(t){return 3*t*(1-t)*(1-t)}(h),d=function(t){return(1-t)*(1-t)*(1-t)}(h);return{x:s*l+r*u+i*f+t*d,y:a*l+o*u+n*f+e*d}}}function h(t,e,i,n,r,o,s,a){return function(h){var c=1-h,l=3*c*c*(i-t)+6*c*h*(r-i)+3*h*h*(s-r),u=3*c*c*(n-e)+6*c*h*(o-n)+3*h*h*(a-o);return Math.atan2(u,l)}}function c(t,e,i,n,r,o){return function(s){var a,h=(a=s)*a,c=function(t){return 2*t*(1-t)}(s),l=function(t){return(1-t)*(1-t)}(s);return{x:r*h+i*c+t*l,y:o*h+n*c+e*l}}}function l(t,e,i,n,r,o){return function(s){var a=1-s,h=2*a*(i-t)+2*s*(r-i),c=2*a*(n-e)+2*s*(o-n);return Math.atan2(c,h)}}function u(t,e,i){var n,r,o={x:e,y:i},a=0;for(r=1;r<=100;r+=1)n=t(r/100),a+=s(o.x,o.y,n.x,n.y),o=n;return a}function f(t){for(var e,i,n,r,o=0,f=t.length,d=0,p=0,g=0,m=0,v=[],b=0;b<f;b++){switch(n={x:d,y:p,command:(e=t[b])[0]},e[0]){case"M":n.length=0,g=d=e[1],m=p=e[2];break;case"L":n.length=s(d,p,e[1],e[2]),d=e[1],p=e[2];break;case"C":i=a(d,p,e[1],e[2],e[3],e[4],e[5],e[6]),r=h(d,p,e[1],e[2],e[3],e[4],e[5],e[6]),n.iterator=i,n.angleFinder=r,n.length=u(i,d,p),d=e[5],p=e[6];break;case"Q":i=c(d,p,e[1],e[2],e[3],e[4]),r=l(d,p,e[1],e[2],e[3],e[4]),n.iterator=i,n.angleFinder=r,n.length=u(i,d,p),d=e[3],p=e[4];break;case"Z":case"z":n.destX=g,n.destY=m,n.length=s(d,p,g,m),d=g,p=m}o+=n.length,v.push(n)}return v.push({length:o,x:d,y:p}),v}A.util.joinPath=function(t){return t.map((function(t){return t.join(" ")})).join(" ")},A.util.parsePath=function(t){var n,r,o,s,a,h=[],c=[],l=A.rePathCommand,u="[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*",f="("+u+")"+A.commaWsp,d="([01])"+A.commaWsp+"?",p=new RegExp(f+"?"+f+"?"+f+d+d+f+"?("+u+")","g");if(!t||!t.match)return h;for(var g,m=0,v=(a=t.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi)).length;m<v;m++){s=(n=a[m]).slice(1).trim(),c.length=0;var b=n.charAt(0);if(g=[b],"a"===b.toLowerCase())for(var y;y=p.exec(s);)for(var w=1;w<y.length;w++)c.push(y[w]);else for(;o=l.exec(s);)c.push(o[0]);w=0;for(var x=c.length;w<x;w++)r=parseFloat(c[w]),isNaN(r)||g.push(r);var _=e[b.toLowerCase()],S=i[b]||b;if(g.length-1>_)for(var C=1,L=g.length;C<L;C+=_)h.push([b].concat(g.slice(C,C+_))),b=S;else h.push(g)}return h},A.util.makePathSimpler=function(t){var e,i,n,r,s,a,h=0,c=0,l=t.length,u=0,f=0,d=[];for(i=0;i<l;++i){switch(n=!1,(e=t[i].slice(0))[0]){case"l":e[0]="L",e[1]+=h,e[2]+=c;case"L":h=e[1],c=e[2];break;case"h":e[1]+=h;case"H":e[0]="L",e[2]=c,h=e[1];break;case"v":e[1]+=c;case"V":e[0]="L",c=e[1],e[1]=h,e[2]=c;break;case"m":e[0]="M",e[1]+=h,e[2]+=c;case"M":h=e[1],c=e[2],u=e[1],f=e[2];break;case"c":e[0]="C",e[1]+=h,e[2]+=c,e[3]+=h,e[4]+=c,e[5]+=h,e[6]+=c;case"C":s=e[3],a=e[4],h=e[5],c=e[6];break;case"s":e[0]="S",e[1]+=h,e[2]+=c,e[3]+=h,e[4]+=c;case"S":"C"===r?(s=2*h-s,a=2*c-a):(s=h,a=c),h=e[3],c=e[4],e[0]="C",e[5]=e[3],e[6]=e[4],e[3]=e[1],e[4]=e[2],e[1]=s,e[2]=a,s=e[3],a=e[4];break;case"q":e[0]="Q",e[1]+=h,e[2]+=c,e[3]+=h,e[4]+=c;case"Q":s=e[1],a=e[2],h=e[3],c=e[4];break;case"t":e[0]="T",e[1]+=h,e[2]+=c;case"T":"Q"===r?(s=2*h-s,a=2*c-a):(s=h,a=c),e[0]="Q",h=e[1],c=e[2],e[1]=s,e[2]=a,e[3]=h,e[4]=c;break;case"a":e[0]="A",e[6]+=h,e[7]+=c;case"A":n=!0,d=d.concat(o(h,c,e)),h=e[6],c=e[7];break;case"z":case"Z":h=u,c=f}n||d.push(e),r=e[0]}return d},A.util.getSmoothPathFromPoints=function(t,e){var i,n=[],r=new A.Point(t[0].x,t[0].y),o=new A.Point(t[1].x,t[1].y),s=t.length,a=1,h=0,c=s>2;for(e=e||0,c&&(a=t[2].x<o.x?-1:t[2].x===o.x?0:1,h=t[2].y<o.y?-1:t[2].y===o.y?0:1),n.push(["M",r.x-a*e,r.y-h*e]),i=1;i<s;i++){if(!r.eq(o)){var l=r.midPointFrom(o);n.push(["Q",r.x,r.y,l.x,l.y])}r=t[i],i+1<t.length&&(o=t[i+1])}return c&&(a=r.x>t[i-2].x?1:r.x===t[i-2].x?0:-1,h=r.y>t[i-2].y?1:r.y===t[i-2].y?0:-1),n.push(["L",r.x+a*e,r.y+h*e]),n},A.util.getPathSegmentsInfo=f,A.util.getBoundsOfCurve=function(e,i,n,r,o,s,a,h){var c;if(A.cachesBoundsOfCurve&&(c=t.call(arguments),A.boundsOfCurveCache[c]))return A.boundsOfCurveCache[c];var l,u,f,d,p,g,m,v,b=Math.sqrt,y=Math.min,w=Math.max,x=Math.abs,_=[],S=[[],[]];u=6*e-12*n+6*o,l=-3*e+9*n-9*o+3*a,f=3*n-3*e;for(var C=0;C<2;++C)if(C>0&&(u=6*i-12*r+6*s,l=-3*i+9*r-9*s+3*h,f=3*r-3*i),x(l)<1e-12){if(x(u)<1e-12)continue;0<(d=-f/u)&&d<1&&_.push(d)}else(m=u*u-4*f*l)<0||(0<(p=(-u+(v=b(m)))/(2*l))&&p<1&&_.push(p),0<(g=(-u-v)/(2*l))&&g<1&&_.push(g));for(var L,P,T,O=_.length,k=O;O--;)L=(T=1-(d=_[O]))*T*T*e+3*T*T*d*n+3*T*d*d*o+d*d*d*a,S[0][O]=L,P=T*T*T*i+3*T*T*d*r+3*T*d*d*s+d*d*d*h,S[1][O]=P;S[0][k]=e,S[1][k]=i,S[0][k+1]=a,S[1][k+1]=h;var N=[{x:y.apply(null,S[0]),y:y.apply(null,S[1])},{x:w.apply(null,S[0]),y:w.apply(null,S[1])}];return A.cachesBoundsOfCurve&&(A.boundsOfCurveCache[c]=N),N},A.util.getPointOnPath=function(t,e,i){i||(i=f(t));for(var n=0;e-i[n].length>0&&n<i.length-2;)e-=i[n].length,n++;var r,o=i[n],a=e/o.length,h=o.command,c=t[n];switch(h){case"M":return{x:o.x,y:o.y,angle:0};case"Z":case"z":return(r=new A.Point(o.x,o.y).lerp(new A.Point(o.destX,o.destY),a)).angle=Math.atan2(o.destY-o.y,o.destX-o.x),r;case"L":return(r=new A.Point(o.x,o.y).lerp(new A.Point(c[1],c[2]),a)).angle=Math.atan2(c[2]-o.y,c[1]-o.x),r;case"C":case"Q":return function(t,e){for(var i,n,r,o=0,a=0,h=t.iterator,c={x:t.x,y:t.y},l=.01,u=t.angleFinder;a<e&&l>1e-4;)i=h(o),r=o,(n=s(c.x,c.y,i.x,i.y))+a>e?(o-=l,l/=2):(c=i,o+=l,a+=n);return i.angle=u(r),i}(o,e)}},A.util.transformPath=function(t,e,i){return i&&(e=A.util.multiplyTransformMatrices(e,[1,0,0,1,-i.x,-i.y])),t.map((function(t){for(var i=t.slice(0),n={},r=1;r<t.length-1;r+=2)n.x=t[r],n.y=t[r+1],n=A.util.transformPoint(n,e),i[r]=n.x,i[r+1]=n.y;return i}))}}(),function(){var t=Array.prototype.slice;function e(t,e,i){if(t&&0!==t.length){var n=t.length-1,r=e?t[n][e]:t[n];if(e)for(;n--;)i(t[n][e],r)&&(r=t[n][e]);else for(;n--;)i(t[n],r)&&(r=t[n]);return r}}A.util.array={fill:function(t,e){for(var i=t.length;i--;)t[i]=e;return t},invoke:function(e,i){for(var n=t.call(arguments,2),r=[],o=0,s=e.length;o<s;o++)r[o]=n.length?e[o][i].apply(e[o],n):e[o][i].call(e[o]);return r},min:function(t,i){return e(t,i,(function(t,e){return t<e}))},max:function(t,i){return e(t,i,(function(t,e){return t>=e}))}}}(),function(){function t(e,i,n){if(n)if(!A.isLikelyNode&&i instanceof Element)e=i;else if(i instanceof Array){e=[];for(var r=0,o=i.length;r<o;r++)e[r]=t({},i[r],n)}else if(i&&"object"==typeof i)for(var s in i)"canvas"===s||"group"===s?e[s]=null:i.hasOwnProperty(s)&&(e[s]=t({},i[s],n));else e=i;else for(var s in i)e[s]=i[s];return e}A.util.object={extend:t,clone:function(e,i){return t({},e,i)}},A.util.object.extend(A.util,A.Observable)}(),function(){function t(t,e){var i=t.charCodeAt(e);if(isNaN(i))return"";if(i<55296||i>57343)return t.charAt(e);if(55296<=i&&i<=56319){if(t.length<=e+1)throw"High surrogate without following low surrogate";var n=t.charCodeAt(e+1);if(56320>n||n>57343)throw"High surrogate without following low surrogate";return t.charAt(e)+t.charAt(e+1)}if(0===e)throw"Low surrogate without preceding high surrogate";var r=t.charCodeAt(e-1);if(55296>r||r>56319)throw"Low surrogate without preceding high surrogate";return!1}A.util.string={camelize:function(t){return t.replace(/-+(.)?/g,(function(t,e){return e?e.toUpperCase():""}))},capitalize:function(t,e){return t.charAt(0).toUpperCase()+(e?t.slice(1):t.slice(1).toLowerCase())},escapeXml:function(t){return t.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&apos;").replace(/</g,"&lt;").replace(/>/g,"&gt;")},graphemeSplit:function(e){var i,n=0,r=[];for(n=0;n<e.length;n++)!1!==(i=t(e,n))&&r.push(i);return r}}}(),function(){var t=Array.prototype.slice,e=function(){},i=function(){for(var t in{toString:1})if("toString"===t)return!1;return!0}(),n=function(t,e,n){for(var r in e)r in t.prototype&&"function"==typeof t.prototype[r]&&(e[r]+"").indexOf("callSuper")>-1?t.prototype[r]=function(t){return function(){var i=this.constructor.superclass;this.constructor.superclass=n;var r=e[t].apply(this,arguments);if(this.constructor.superclass=i,"initialize"!==t)return r}}(r):t.prototype[r]=e[r],i&&(e.toString!==Object.prototype.toString&&(t.prototype.toString=e.toString),e.valueOf!==Object.prototype.valueOf&&(t.prototype.valueOf=e.valueOf))};function r(){}function o(e){for(var i=null,n=this;n.constructor.superclass;){var r=n.constructor.superclass.prototype[e];if(n[e]!==r){i=r;break}n=n.constructor.superclass.prototype}return i?arguments.length>1?i.apply(this,t.call(arguments,1)):i.call(this):console.log("tried to callSuper "+e+", method not found in prototype chain",this)}A.util.createClass=function(){var i=null,s=t.call(arguments,0);function a(){this.initialize.apply(this,arguments)}"function"==typeof s[0]&&(i=s.shift()),a.superclass=i,a.subclasses=[],i&&(r.prototype=i.prototype,a.prototype=new r,i.subclasses.push(a));for(var h=0,c=s.length;h<c;h++)n(a,s[h],i);return a.prototype.initialize||(a.prototype.initialize=e),a.prototype.constructor=a,a.prototype.callSuper=o,a}}(),c=!!A.document.createElement("div").attachEvent,l=["touchstart","touchmove","touchend"],A.util.addListener=function(t,e,i,n){t&&t.addEventListener(e,i,!c&&n)},A.util.removeListener=function(t,e,i,n){t&&t.removeEventListener(e,i,!c&&n)},A.util.getPointer=function(t){var e=t.target,i=A.util.getScrollLeftTop(e),n=function(t){var e=t.changedTouches;return e&&e[0]?e[0]:t}(t);return{x:n.clientX+i.left,y:n.clientY+i.top}},A.util.isTouchEvent=function(t){return l.indexOf(t.type)>-1||"touch"===t.pointerType},f="string"==typeof(u=A.document.createElement("div")).style.opacity,d="string"==typeof u.style.filter,p=/alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,g=function(t){return t},f?g=function(t,e){return t.style.opacity=e,t}:d&&(g=function(t,e){var i=t.style;return t.currentStyle&&!t.currentStyle.hasLayout&&(i.zoom=1),p.test(i.filter)?(e=e>=.9999?"":"alpha(opacity="+100*e+")",i.filter=i.filter.replace(p,e)):i.filter+=" alpha(opacity="+100*e+")",t}),A.util.setStyle=function(t,e){var i=t.style;if(!i)return t;if("string"==typeof e)return t.style.cssText+=";"+e,e.indexOf("opacity")>-1?g(t,e.match(/opacity:\s*(\d?\.?\d*)/)[1]):t;for(var n in e)"opacity"===n?g(t,e[n]):i["float"===n||"cssFloat"===n?void 0===i.styleFloat?"cssFloat":"styleFloat":n]=e[n];return t},function(){var t,e,i,n,r=Array.prototype.slice,o=function(t){return r.call(t,0)};try{t=o(A.document.childNodes)instanceof Array}catch(t){}function s(t,e){var i=A.document.createElement(t);for(var n in e)"class"===n?i.className=e[n]:"for"===n?i.htmlFor=e[n]:i.setAttribute(n,e[n]);return i}function a(t){for(var e=0,i=0,n=A.document.documentElement,r=A.document.body||{scrollLeft:0,scrollTop:0};t&&(t.parentNode||t.host)&&((t=t.parentNode||t.host)===A.document?(e=r.scrollLeft||n.scrollLeft||0,i=r.scrollTop||n.scrollTop||0):(e+=t.scrollLeft||0,i+=t.scrollTop||0),1!==t.nodeType||"fixed"!==t.style.position););return{left:e,top:i}}t||(o=function(t){for(var e=new Array(t.length),i=t.length;i--;)e[i]=t[i];return e}),e=A.document.defaultView&&A.document.defaultView.getComputedStyle?function(t,e){var i=A.document.defaultView.getComputedStyle(t,null);return i?i[e]:void 0}:function(t,e){var i=t.style[e];return!i&&t.currentStyle&&(i=t.currentStyle[e]),i},i=A.document.documentElement.style,n="userSelect"in i?"userSelect":"MozUserSelect"in i?"MozUserSelect":"WebkitUserSelect"in i?"WebkitUserSelect":"KhtmlUserSelect"in i?"KhtmlUserSelect":"",A.util.makeElementUnselectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=A.util.falseFunction),n?t.style[n]="none":"string"==typeof t.unselectable&&(t.unselectable="on"),t},A.util.makeElementSelectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=null),n?t.style[n]="":"string"==typeof t.unselectable&&(t.unselectable=""),t},A.util.setImageSmoothing=function(t,e){t.imageSmoothingEnabled=t.imageSmoothingEnabled||t.webkitImageSmoothingEnabled||t.mozImageSmoothingEnabled||t.msImageSmoothingEnabled||t.oImageSmoothingEnabled,t.imageSmoothingEnabled=e},A.util.getById=function(t){return"string"==typeof t?A.document.getElementById(t):t},A.util.toArray=o,A.util.addClass=function(t,e){t&&-1===(" "+t.className+" ").indexOf(" "+e+" ")&&(t.className+=(t.className?" ":"")+e)},A.util.makeElement=s,A.util.wrapElement=function(t,e,i){return"string"==typeof e&&(e=s(e,i)),t.parentNode&&t.parentNode.replaceChild(e,t),e.appendChild(t),e},A.util.getScrollLeftTop=a,A.util.getElementOffset=function(t){var i,n,r=t&&t.ownerDocument,o={left:0,top:0},s={left:0,top:0},h={borderLeftWidth:"left",borderTopWidth:"top",paddingLeft:"left",paddingTop:"top"};if(!r)return s;for(var c in h)s[h[c]]+=parseInt(e(t,c),10)||0;return i=r.documentElement,void 0!==t.getBoundingClientRect&&(o=t.getBoundingClientRect()),n=a(t),{left:o.left+n.left-(i.clientLeft||0)+s.left,top:o.top+n.top-(i.clientTop||0)+s.top}},A.util.getNodeCanvas=function(t){var e=A.jsdomImplForWrapper(t);return e._canvas||e._image},A.util.cleanUpJsdomNode=function(t){if(A.isLikelyNode){var e=A.jsdomImplForWrapper(t);e&&(e._image=null,e._canvas=null,e._currentSrc=null,e._attributes=null,e._classList=null)}}}(),function(){function t(){}A.util.request=function(e,i){i||(i={});var n=i.method?i.method.toUpperCase():"GET",r=i.onComplete||function(){},o=new A.window.XMLHttpRequest,s=i.body||i.parameters;return o.onreadystatechange=function(){4===o.readyState&&(r(o),o.onreadystatechange=t)},"GET"===n&&(s=null,"string"==typeof i.parameters&&(e=function(t,e){return t+(/\?/.test(t)?"&":"?")+e}(e,i.parameters))),o.open(n,e,!0),"POST"!==n&&"PUT"!==n||o.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),o.send(s),o}}(),A.log=console.log,A.warn=console.warn,function(){var t=A.util.object.extend,e=A.util.object.clone,i=[];function n(){return!1}function r(t,e,i,n){return-i*Math.cos(t/n*(Math.PI/2))+i+e}A.util.object.extend(i,{cancelAll:function(){var t=this.splice(0);return t.forEach((function(t){t.cancel()})),t},cancelByCanvas:function(t){if(!t)return[];var e=this.filter((function(e){return"object"==typeof e.target&&e.target.canvas===t}));return e.forEach((function(t){t.cancel()})),e},cancelByTarget:function(t){var e=this.findAnimationsByTarget(t);return e.forEach((function(t){t.cancel()})),e},findAnimationIndex:function(t){return this.indexOf(this.findAnimation(t))},findAnimation:function(t){return this.find((function(e){return e.cancel===t}))},findAnimationsByTarget:function(t){return t?this.filter((function(e){return e.target===t})):[]}});var o=A.window.requestAnimationFrame||A.window.webkitRequestAnimationFrame||A.window.mozRequestAnimationFrame||A.window.oRequestAnimationFrame||A.window.msRequestAnimationFrame||function(t){return A.window.setTimeout(t,1e3/60)},s=A.window.cancelAnimationFrame||A.window.clearTimeout;function a(){return o.apply(A.window,arguments)}A.util.animate=function(i){i||(i={});var o,s=!1,h=function(){var t=A.runningAnimations.indexOf(o);return t>-1&&A.runningAnimations.splice(t,1)[0]};return o=t(e(i),{cancel:function(){return s=!0,h()},currentValue:"startValue"in i?i.startValue:0,completionRate:0,durationRate:0}),A.runningAnimations.push(o),a((function(t){var e,c=t||+new Date,l=i.duration||500,u=c+l,f=i.onChange||n,d=i.abort||n,p=i.onComplete||n,g=i.easing||r,m="startValue"in i&&i.startValue.length>0,v="startValue"in i?i.startValue:0,b="endValue"in i?i.endValue:100,y=i.byValue||(m?v.map((function(t,e){return b[e]-v[e]})):b-v);i.onStart&&i.onStart(),function t(i){var n=(e=i||+new Date)>u?l:e-c,r=n/l,w=m?v.map((function(t,e){return g(n,v[e],y[e],l)})):g(n,v,y,l),x=m?Math.abs((w[0]-v[0])/y[0]):Math.abs((w-v)/y);if(o.currentValue=m?w.slice():w,o.completionRate=x,o.durationRate=r,!s){if(!d(w,x,r))return e>u?(o.currentValue=m?b.slice():b,o.completionRate=1,o.durationRate=1,f(m?b.slice():b,1,1),p(b,1,1),void h()):(f(w,x,r),void a(t));h()}}(c)})),o.cancel},A.util.requestAnimFrame=a,A.util.cancelAnimFrame=function(){return s.apply(A.window,arguments)},A.runningAnimations=i}(),function(){function t(t,e,i){var n="rgba("+parseInt(t[0]+i*(e[0]-t[0]),10)+","+parseInt(t[1]+i*(e[1]-t[1]),10)+","+parseInt(t[2]+i*(e[2]-t[2]),10);return(n+=","+(t&&e?parseFloat(t[3]+i*(e[3]-t[3])):1))+")"}A.util.animateColor=function(e,i,n,r){var o=new A.Color(e).getSource(),s=new A.Color(i).getSource(),a=r.onComplete,h=r.onChange;return r=r||{},A.util.animate(A.util.object.extend(r,{duration:n||500,startValue:o,endValue:s,byValue:s,easing:function(e,i,n,o){return t(i,n,r.colorEasing?r.colorEasing(e,o):1-Math.cos(e/o*(Math.PI/2)))},onComplete:function(e,i,n){if(a)return a(t(s,s,0),i,n)},onChange:function(e,i,n){if(h){if(Array.isArray(e))return h(t(e,e,0),i,n);h(e,i,n)}}}))}}(),function(){function t(t,e,i,n){return t<Math.abs(e)?(t=e,n=i/4):n=0===e&&0===t?i/(2*Math.PI)*Math.asin(1):i/(2*Math.PI)*Math.asin(e/t),{a:t,c:e,p:i,s:n}}function e(t,e,i){return t.a*Math.pow(2,10*(e-=1))*Math.sin((e*i-t.s)*(2*Math.PI)/t.p)}function i(t,e,i,r){return i-n(r-t,0,i,r)+e}function n(t,e,i,n){return(t/=n)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e}A.util.ease={easeInQuad:function(t,e,i,n){return i*(t/=n)*t+e},easeOutQuad:function(t,e,i,n){return-i*(t/=n)*(t-2)+e},easeInOutQuad:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},easeInCubic:function(t,e,i,n){return i*(t/=n)*t*t+e},easeOutCubic:function(t,e,i,n){return i*((t=t/n-1)*t*t+1)+e},easeInOutCubic:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e},easeInQuart:function(t,e,i,n){return i*(t/=n)*t*t*t+e},easeOutQuart:function(t,e,i,n){return-i*((t=t/n-1)*t*t*t-1)+e},easeInOutQuart:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t+e:-i/2*((t-=2)*t*t*t-2)+e},easeInQuint:function(t,e,i,n){return i*(t/=n)*t*t*t*t+e},easeOutQuint:function(t,e,i,n){return i*((t=t/n-1)*t*t*t*t+1)+e},easeInOutQuint:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},easeInSine:function(t,e,i,n){return-i*Math.cos(t/n*(Math.PI/2))+i+e},easeOutSine:function(t,e,i,n){return i*Math.sin(t/n*(Math.PI/2))+e},easeInOutSine:function(t,e,i,n){return-i/2*(Math.cos(Math.PI*t/n)-1)+e},easeInExpo:function(t,e,i,n){return 0===t?e:i*Math.pow(2,10*(t/n-1))+e},easeOutExpo:function(t,e,i,n){return t===n?e+i:i*(1-Math.pow(2,-10*t/n))+e},easeInOutExpo:function(t,e,i,n){return 0===t?e:t===n?e+i:(t/=n/2)<1?i/2*Math.pow(2,10*(t-1))+e:i/2*(2-Math.pow(2,-10*--t))+e},easeInCirc:function(t,e,i,n){return-i*(Math.sqrt(1-(t/=n)*t)-1)+e},easeOutCirc:function(t,e,i,n){return i*Math.sqrt(1-(t=t/n-1)*t)+e},easeInOutCirc:function(t,e,i,n){return(t/=n/2)<1?-i/2*(Math.sqrt(1-t*t)-1)+e:i/2*(Math.sqrt(1-(t-=2)*t)+1)+e},easeInElastic:function(i,n,r,o){var s=0;return 0===i?n:1==(i/=o)?n+r:(s||(s=.3*o),-e(t(r,r,s,1.70158),i,o)+n)},easeOutElastic:function(e,i,n,r){var o=0;if(0===e)return i;if(1==(e/=r))return i+n;o||(o=.3*r);var s=t(n,n,o,1.70158);return s.a*Math.pow(2,-10*e)*Math.sin((e*r-s.s)*(2*Math.PI)/s.p)+s.c+i},easeInOutElastic:function(i,n,r,o){var s=0;if(0===i)return n;if(2==(i/=o/2))return n+r;s||(s=o*(.3*1.5));var a=t(r,r,s,1.70158);return i<1?-.5*e(a,i,o)+n:a.a*Math.pow(2,-10*(i-=1))*Math.sin((i*o-a.s)*(2*Math.PI)/a.p)*.5+a.c+n},easeInBack:function(t,e,i,n,r){return void 0===r&&(r=1.70158),i*(t/=n)*t*((r+1)*t-r)+e},easeOutBack:function(t,e,i,n,r){return void 0===r&&(r=1.70158),i*((t=t/n-1)*t*((r+1)*t+r)+1)+e},easeInOutBack:function(t,e,i,n,r){return void 0===r&&(r=1.70158),(t/=n/2)<1?i/2*(t*t*((1+(r*=1.525))*t-r))+e:i/2*((t-=2)*t*((1+(r*=1.525))*t+r)+2)+e},easeInBounce:i,easeOutBounce:n,easeInOutBounce:function(t,e,r,o){return t<o/2?.5*i(2*t,0,r,o)+e:.5*n(2*t-o,0,r,o)+.5*r+e}}}(),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.object.clone,r=e.util.toFixed,o=e.util.parseUnit,s=e.util.multiplyTransformMatrices,a={cx:"left",x:"left",r:"radius",cy:"top",y:"top",display:"visible",visibility:"visible",transform:"transformMatrix","fill-opacity":"fillOpacity","fill-rule":"fillRule","font-family":"fontFamily","font-size":"fontSize","font-style":"fontStyle","font-weight":"fontWeight","letter-spacing":"charSpacing","paint-order":"paintFirst","stroke-dasharray":"strokeDashArray","stroke-dashoffset":"strokeDashOffset","stroke-linecap":"strokeLineCap","stroke-linejoin":"strokeLineJoin","stroke-miterlimit":"strokeMiterLimit","stroke-opacity":"strokeOpacity","stroke-width":"strokeWidth","text-decoration":"textDecoration","text-anchor":"textAnchor",opacity:"opacity","clip-path":"clipPath","clip-rule":"clipRule","vector-effect":"strokeUniform","image-rendering":"imageSmoothing"},h={stroke:"strokeOpacity",fill:"fillOpacity"},c="font-size",l="clip-path";function u(t){return t in a?a[t]:t}function f(t,i,n,r){var a,h=Array.isArray(i);if("fill"!==t&&"stroke"!==t||"none"!==i){if("strokeUniform"===t)return"non-scaling-stroke"===i;if("strokeDashArray"===t)i="none"===i?null:i.replace(/,/g," ").split(/\s+/).map(parseFloat);else if("transformMatrix"===t)i=n&&n.transformMatrix?s(n.transformMatrix,e.parseTransformAttribute(i)):e.parseTransformAttribute(i);else if("visible"===t)i="none"!==i&&"hidden"!==i,n&&!1===n.visible&&(i=!1);else if("opacity"===t)i=parseFloat(i),n&&void 0!==n.opacity&&(i*=n.opacity);else if("textAnchor"===t)i="start"===i?"left":"end"===i?"right":"center";else if("charSpacing"===t)a=o(i,r)/r*1e3;else if("paintFirst"===t){var c=i.indexOf("fill"),l=i.indexOf("stroke");i="fill",(c>-1&&l>-1&&l<c||-1===c&&l>-1)&&(i="stroke")}else{if("href"===t||"xlink:href"===t||"font"===t)return i;if("imageSmoothing"===t)return"optimizeQuality"===i;a=h?i.map(o):o(i,r)}}else i="";return!h&&isNaN(a)?i:a}function d(t){return new RegExp("^("+t.join("|")+")\\b","i")}function p(t,e){var i,n,r,o,s=[];for(r=0,o=e.length;r<o;r++)i=e[r],n=t.getElementsByTagName(i),s=s.concat(Array.prototype.slice.call(n));return s}function g(t,e){var i,n=!0;return(i=m(t,e.pop()))&&e.length&&(n=function(t,e){for(var i,n=!0;t.parentNode&&1===t.parentNode.nodeType&&e.length;)n&&(i=e.pop()),n=m(t=t.parentNode,i);return 0===e.length}(t,e)),i&&n&&0===e.length}function m(t,e){var i,n,r=t.nodeName,o=t.getAttribute("class"),s=t.getAttribute("id");if(i=new RegExp("^"+r,"i"),e=e.replace(i,""),s&&e.length&&(i=new RegExp("#"+s+"(?![a-zA-Z\\-]+)","i"),e=e.replace(i,"")),o&&e.length)for(n=(o=o.split(" ")).length;n--;)i=new RegExp("\\."+o[n]+"(?![a-zA-Z\\-]+)","i"),e=e.replace(i,"");return 0===e.length}function v(t,e){var i;if(t.getElementById&&(i=t.getElementById(e)),i)return i;var n,r,o,s=t.getElementsByTagName("*");for(r=0,o=s.length;r<o;r++)if(e===(n=s[r]).getAttribute("id"))return n}e.svgValidTagNamesRegEx=d(["path","circle","polygon","polyline","ellipse","rect","line","image","text"]),e.svgViewBoxElementsRegEx=d(["symbol","image","marker","pattern","view","svg"]),e.svgInvalidAncestorsRegEx=d(["pattern","defs","symbol","metadata","clipPath","mask","desc"]),e.svgValidParentsRegEx=d(["symbol","g","a","svg","clipPath","defs"]),e.cssRules={},e.gradientDefs={},e.clipPaths={},e.parseTransformAttribute=function(){function t(t,i,n){t[n]=Math.tan(e.util.degreesToRadians(i[0]))}var i=e.iMatrix,n=e.reNum,r=e.commaWsp,o="(?:(?:(matrix)\\s*\\(\\s*("+n+")"+r+"("+n+")"+r+"("+n+")"+r+"("+n+")"+r+"("+n+")"+r+"("+n+")\\s*\\))|(?:(translate)\\s*\\(\\s*("+n+")(?:"+r+"("+n+"))?\\s*\\))|(?:(scale)\\s*\\(\\s*("+n+")(?:"+r+"("+n+"))?\\s*\\))|(?:(rotate)\\s*\\(\\s*("+n+")(?:"+r+"("+n+")"+r+"("+n+"))?\\s*\\))|(?:(skewX)\\s*\\(\\s*("+n+")\\s*\\))|(?:(skewY)\\s*\\(\\s*("+n+")\\s*\\)))",s=new RegExp("^\\s*(?:(?:"+o+"(?:"+r+"*"+o+")*)?)\\s*$"),a=new RegExp(o,"g");return function(n){var r=i.concat(),h=[];if(!n||n&&!s.test(n))return r;n.replace(a,(function(n){var s=new RegExp(o).exec(n).filter((function(t){return!!t})),a=s[1],c=s.slice(2).map(parseFloat);switch(a){case"translate":!function(t,e){t[4]=e[0],2===e.length&&(t[5]=e[1])}(r,c);break;case"rotate":c[0]=e.util.degreesToRadians(c[0]),function(t,i){var n=e.util.cos(i[0]),r=e.util.sin(i[0]),o=0,s=0;3===i.length&&(o=i[1],s=i[2]),t[0]=n,t[1]=r,t[2]=-r,t[3]=n,t[4]=o-(n*o-r*s),t[5]=s-(r*o+n*s)}(r,c);break;case"scale":!function(t,e){var i=e[0],n=2===e.length?e[1]:e[0];t[0]=i,t[3]=n}(r,c);break;case"skewX":t(r,c,2);break;case"skewY":t(r,c,1);break;case"matrix":r=c}h.push(r.concat()),r=i.concat()}));for(var c=h[0];h.length>1;)h.shift(),c=e.util.multiplyTransformMatrices(c,h[0]);return c}}();var b=new RegExp("^\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*,?\\s*("+e.reNum+"+)\\s*$");function y(t){if(!e.svgViewBoxElementsRegEx.test(t.nodeName))return{};var i,n,r,s,a,h,c=t.getAttribute("viewBox"),l=1,u=1,f=t.getAttribute("width"),d=t.getAttribute("height"),p=t.getAttribute("x")||0,g=t.getAttribute("y")||0,m=t.getAttribute("preserveAspectRatio")||"",v=!c||!(c=c.match(b)),y=!f||!d||"100%"===f||"100%"===d,w=v&&y,x={},_="",S=0,C=0;if(x.width=0,x.height=0,x.toBeParsed=w,v&&(p||g)&&t.parentNode&&"#document"!==t.parentNode.nodeName&&(_=" translate("+o(p)+" "+o(g)+") ",a=(t.getAttribute("transform")||"")+_,t.setAttribute("transform",a),t.removeAttribute("x"),t.removeAttribute("y")),w)return x;if(v)return x.width=o(f),x.height=o(d),x;if(i=-parseFloat(c[1]),n=-parseFloat(c[2]),r=parseFloat(c[3]),s=parseFloat(c[4]),x.minX=i,x.minY=n,x.viewBoxWidth=r,x.viewBoxHeight=s,y?(x.width=r,x.height=s):(x.width=o(f),x.height=o(d),l=x.width/r,u=x.height/s),"none"!==(m=e.util.parsePreserveAspectRatioAttribute(m)).alignX&&("meet"===m.meetOrSlice&&(u=l=l>u?u:l),"slice"===m.meetOrSlice&&(u=l=l>u?l:u),S=x.width-r*l,C=x.height-s*l,"Mid"===m.alignX&&(S/=2),"Mid"===m.alignY&&(C/=2),"Min"===m.alignX&&(S=0),"Min"===m.alignY&&(C=0)),1===l&&1===u&&0===i&&0===n&&0===p&&0===g)return x;if((p||g)&&"#document"!==t.parentNode.nodeName&&(_=" translate("+o(p)+" "+o(g)+") "),a=_+" matrix("+l+" 0 0 "+u+" "+(i*l+S)+" "+(n*u+C)+") ","svg"===t.nodeName){for(h=t.ownerDocument.createElementNS(e.svgNS,"g");t.firstChild;)h.appendChild(t.firstChild);t.appendChild(h)}else(h=t).removeAttribute("x"),h.removeAttribute("y"),a=h.getAttribute("transform")+a;return h.setAttribute("transform",a),x}function w(t,e){var i="xlink:href",n=v(t,e.getAttribute(i).slice(1));if(n&&n.getAttribute(i)&&w(t,n),["gradientTransform","x1","x2","y1","y2","gradientUnits","cx","cy","r","fx","fy"].forEach((function(t){n&&!e.hasAttribute(t)&&n.hasAttribute(t)&&e.setAttribute(t,n.getAttribute(t))})),!e.children.length)for(var r=n.cloneNode(!0);r.firstChild;)e.appendChild(r.firstChild);e.removeAttribute(i)}e.parseSVGDocument=function(t,i,r,o){if(t){!function(t){for(var i=p(t,["use","svg:use"]),n=0;i.length&&n<i.length;){var r=i[n],o=r.getAttribute("xlink:href")||r.getAttribute("href");if(null===o)return;var s,a,h,c,l=o.slice(1),u=r.getAttribute("x")||0,f=r.getAttribute("y")||0,d=v(t,l).cloneNode(!0),g=(d.getAttribute("transform")||"")+" translate("+u+", "+f+")",m=i.length,b=e.svgNS;if(y(d),/^svg$/i.test(d.nodeName)){var w=d.ownerDocument.createElementNS(b,"g");for(a=0,c=(h=d.attributes).length;a<c;a++)s=h.item(a),w.setAttributeNS(b,s.nodeName,s.nodeValue);for(;d.firstChild;)w.appendChild(d.firstChild);d=w}for(a=0,c=(h=r.attributes).length;a<c;a++)"x"!==(s=h.item(a)).nodeName&&"y"!==s.nodeName&&"xlink:href"!==s.nodeName&&"href"!==s.nodeName&&("transform"===s.nodeName?g=s.nodeValue+" "+g:d.setAttribute(s.nodeName,s.nodeValue));d.setAttribute("transform",g),d.setAttribute("instantiated_by_use","1"),d.removeAttribute("id"),r.parentNode.replaceChild(d,r),i.length===m&&n++}}(t);var s,a,h=e.Object.__uid++,c=y(t),l=e.util.toArray(t.getElementsByTagName("*"));if(c.crossOrigin=o&&o.crossOrigin,c.svgUid=h,0===l.length&&e.isLikelyNode){var u=[];for(s=0,a=(l=t.selectNodes('//*[name(.)!="svg"]')).length;s<a;s++)u[s]=l[s];l=u}var f=l.filter((function(t){return y(t),e.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))&&!function(t,e){for(;t&&(t=t.parentNode);)if(t.nodeName&&e.test(t.nodeName.replace("svg:",""))&&!t.getAttribute("instantiated_by_use"))return!0;return!1}(t,e.svgInvalidAncestorsRegEx)}));if(!f||f&&!f.length)i&&i([],{});else{var d={};l.filter((function(t){return"clipPath"===t.nodeName.replace("svg:","")})).forEach((function(t){var i=t.getAttribute("id");d[i]=e.util.toArray(t.getElementsByTagName("*")).filter((function(t){return e.svgValidTagNamesRegEx.test(t.nodeName.replace("svg:",""))}))})),e.gradientDefs[h]=e.getGradientDefs(t),e.cssRules[h]=e.getCSSRules(t),e.clipPaths[h]=d,e.parseElements(f,(function(t,n){i&&(i(t,c,n,l),delete e.gradientDefs[h],delete e.cssRules[h],delete e.clipPaths[h])}),n(c),r,o)}}};var x=new RegExp("(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*("+e.reNum+"(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|"+e.reNum+"))?\\s+(.*)");i(e,{parseFontDeclaration:function(t,e){var i=t.match(x);if(i){var n=i[1],r=i[3],s=i[4],a=i[5],h=i[6];n&&(e.fontStyle=n),r&&(e.fontWeight=isNaN(parseFloat(r))?r:parseFloat(r)),s&&(e.fontSize=o(s)),h&&(e.fontFamily=h),a&&(e.lineHeight="normal"===a?1:a)}},getGradientDefs:function(t){var e,i=p(t,["linearGradient","radialGradient","svg:linearGradient","svg:radialGradient"]),n=0,r={};for(n=i.length;n--;)(e=i[n]).getAttribute("xlink:href")&&w(t,e),r[e.getAttribute("id")]=e;return r},parseAttributes:function(t,n,s){if(t){var a,d,p,m={};void 0===s&&(s=t.getAttribute("svgUid")),t.parentNode&&e.svgValidParentsRegEx.test(t.parentNode.nodeName)&&(m=e.parseAttributes(t.parentNode,n,s));var v=n.reduce((function(e,i){return(a=t.getAttribute(i))&&(e[i]=a),e}),{}),b=i(function(t,i){var n={};for(var r in e.cssRules[i])if(g(t,r.split(" ")))for(var o in e.cssRules[i][r])n[o]=e.cssRules[i][r][o];return n}(t,s),e.parseStyleAttribute(t));v=i(v,b),b[l]&&t.setAttribute(l,b[l]),d=p=m.fontSize||e.Text.DEFAULT_SVG_FONT_SIZE,v[c]&&(v[c]=d=o(v[c],p));var y,w,x={};for(var _ in v)w=f(y=u(_),v[_],m,d),x[y]=w;x&&x.font&&e.parseFontDeclaration(x.font,x);var S=i(m,x);return e.svgValidParentsRegEx.test(t.nodeName)?S:function(t){for(var i in h)if(void 0!==t[h[i]]&&""!==t[i]){if(void 0===t[i]){if(!e.Object.prototype[i])continue;t[i]=e.Object.prototype[i]}if(0!==t[i].indexOf("url(")){var n=new e.Color(t[i]);t[i]=n.setAlpha(r(n.getAlpha()*t[h[i]],2)).toRgba()}}return t}(S)}},parseElements:function(t,i,n,r,o){new e.ElementsParser(t,i,n,r,o).parse()},parseStyleAttribute:function(t){var e={},i=t.getAttribute("style");return i?("string"==typeof i?function(t,e){var i,n;t.replace(/;\s*$/,"").split(";").forEach((function(t){var r=t.split(":");i=r[0].trim().toLowerCase(),n=r[1].trim(),e[i]=n}))}(i,e):function(t,e){var i,n;for(var r in t)void 0!==t[r]&&(i=r.toLowerCase(),n=t[r],e[i]=n)}(i,e),e):e},parsePointsAttribute:function(t){if(!t)return null;var e,i,n=[];for(e=0,i=(t=(t=t.replace(/,/g," ").trim()).split(/\s+/)).length;e<i;e+=2)n.push({x:parseFloat(t[e]),y:parseFloat(t[e+1])});return n},getCSSRules:function(t){var i,n,r=t.getElementsByTagName("style"),o={};for(i=0,n=r.length;i<n;i++){var s=r[i].textContent;""!==(s=s.replace(/\/\*[\s\S]*?\*\//g,"")).trim()&&s.split("}").filter((function(t){return t.trim()})).forEach((function(t){var r=t.split("{"),s={},a=r[1].trim().split(";").filter((function(t){return t.trim()}));for(i=0,n=a.length;i<n;i++){var h=a[i].split(":"),c=h[0].trim(),l=h[1].trim();s[c]=l}(t=r[0].trim()).split(",").forEach((function(t){""!==(t=t.replace(/^svg/i,"").trim())&&(o[t]?e.util.object.extend(o[t],s):o[t]=e.util.object.clone(s))}))}))}return o},loadSVGFromURL:function(t,i,n,r){t=t.replace(/^\n\s*/,"").trim(),new e.util.request(t,{method:"get",onComplete:function(t){var o=t.responseXML;if(!o||!o.documentElement)return i&&i(null),!1;e.parseSVGDocument(o.documentElement,(function(t,e,n,r){i&&i(t,e,n,r)}),n,r)}})},loadSVGFromString:function(t,i,n,r){var o=(new e.window.DOMParser).parseFromString(t.trim(),"text/xml");e.parseSVGDocument(o.documentElement,(function(t,e,n,r){i(t,e,n,r)}),n,r)}})}(e),A.ElementsParser=function(t,e,i,n,r,o){this.elements=t,this.callback=e,this.options=i,this.reviver=n,this.svgUid=i&&i.svgUid||0,this.parsingOptions=r,this.regexUrl=/^url\(['"]?#([^'"]+)['"]?\)/g,this.doc=o},(m=A.ElementsParser.prototype).parse=function(){this.instances=new Array(this.elements.length),this.numElements=this.elements.length,this.createObjects()},m.createObjects=function(){var t=this;this.elements.forEach((function(e,i){e.setAttribute("svgUid",t.svgUid),t.createObject(e,i)}))},m.findTag=function(t){return A[A.util.string.capitalize(t.tagName.replace("svg:",""))]},m.createObject=function(t,e){var i=this.findTag(t);if(i&&i.fromElement)try{i.fromElement(t,this.createCallback(e,t),this.options)}catch(t){A.log(t)}else this.checkIfDone()},m.createCallback=function(t,e){var i=this;return function(n){var r;i.resolveGradient(n,e,"fill"),i.resolveGradient(n,e,"stroke"),n instanceof A.Image&&n._originalElement&&(r=n.parsePreserveAspectRatioAttribute(e)),n._removeTransformMatrix(r),i.resolveClipPath(n,e),i.reviver&&i.reviver(e,n),i.instances[t]=n,i.checkIfDone()}},m.extractPropertyDefinition=function(t,e,i){var n=t[e],r=this.regexUrl;if(r.test(n)){r.lastIndex=0;var o=r.exec(n)[1];return r.lastIndex=0,A[i][this.svgUid][o]}},m.resolveGradient=function(t,e,i){var n=this.extractPropertyDefinition(t,i,"gradientDefs");if(n){var r=e.getAttribute(i+"-opacity"),o=A.Gradient.fromElement(n,t,r,this.options);t.set(i,o)}},m.createClipPathCallback=function(t,e){return function(t){t._removeTransformMatrix(),t.fillRule=t.clipRule,e.push(t)}},m.resolveClipPath=function(t,e){var i,n,r,o,s=this.extractPropertyDefinition(t,"clipPath","clipPaths");if(s){r=[],n=A.util.invertTransform(t.calcTransformMatrix());for(var a=s[0].parentNode,h=e;h.parentNode&&h.getAttribute("clip-path")!==t.clipPath;)h=h.parentNode;h.parentNode.appendChild(a);for(var c=0;c<s.length;c++)i=s[c],this.findTag(i).fromElement(i,this.createClipPathCallback(t,r),this.options);s=1===r.length?r[0]:new A.Group(r),o=A.util.multiplyTransformMatrices(n,s.calcTransformMatrix()),s.clipPath&&this.resolveClipPath(s,h);var l=A.util.qrDecompose(o);s.flipX=!1,s.flipY=!1,s.set("scaleX",l.scaleX),s.set("scaleY",l.scaleY),s.angle=l.angle,s.skewX=l.skewX,s.skewY=0,s.setPositionByOrigin({x:l.translateX,y:l.translateY},"center","center"),t.clipPath=s}else delete t.clipPath},m.checkIfDone=function(){0==--this.numElements&&(this.instances=this.instances.filter((function(t){return null!=t})),this.callback(this.instances,this.elements))},function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t,e){this.x=t,this.y=e}e.Point?e.warn("fabric.Point is already defined"):(e.Point=i,i.prototype={type:"point",constructor:i,add:function(t){return new i(this.x+t.x,this.y+t.y)},addEquals:function(t){return this.x+=t.x,this.y+=t.y,this},scalarAdd:function(t){return new i(this.x+t,this.y+t)},scalarAddEquals:function(t){return this.x+=t,this.y+=t,this},subtract:function(t){return new i(this.x-t.x,this.y-t.y)},subtractEquals:function(t){return this.x-=t.x,this.y-=t.y,this},scalarSubtract:function(t){return new i(this.x-t,this.y-t)},scalarSubtractEquals:function(t){return this.x-=t,this.y-=t,this},multiply:function(t){return new i(this.x*t,this.y*t)},multiplyEquals:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return new i(this.x/t,this.y/t)},divideEquals:function(t){return this.x/=t,this.y/=t,this},eq:function(t){return this.x===t.x&&this.y===t.y},lt:function(t){return this.x<t.x&&this.y<t.y},lte:function(t){return this.x<=t.x&&this.y<=t.y},gt:function(t){return this.x>t.x&&this.y>t.y},gte:function(t){return this.x>=t.x&&this.y>=t.y},lerp:function(t,e){return void 0===e&&(e=.5),e=Math.max(Math.min(1,e),0),new i(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e)},distanceFrom:function(t){var e=this.x-t.x,i=this.y-t.y;return Math.sqrt(e*e+i*i)},midPointFrom:function(t){return this.lerp(t)},min:function(t){return new i(Math.min(this.x,t.x),Math.min(this.y,t.y))},max:function(t){return new i(Math.max(this.x,t.x),Math.max(this.y,t.y))},toString:function(){return this.x+","+this.y},setXY:function(t,e){return this.x=t,this.y=e,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setFromPoint:function(t){return this.x=t.x,this.y=t.y,this},swap:function(t){var e=this.x,i=this.y;this.x=t.x,this.y=t.y,t.x=e,t.y=i},clone:function(){return new i(this.x,this.y)}})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t){this.status=t,this.points=[]}e.Intersection?e.warn("fabric.Intersection is already defined"):(e.Intersection=i,e.Intersection.prototype={constructor:i,appendPoint:function(t){return this.points.push(t),this},appendPoints:function(t){return this.points=this.points.concat(t),this}},e.Intersection.intersectLineLine=function(t,n,r,o){var s,a=(o.x-r.x)*(t.y-r.y)-(o.y-r.y)*(t.x-r.x),h=(n.x-t.x)*(t.y-r.y)-(n.y-t.y)*(t.x-r.x),c=(o.y-r.y)*(n.x-t.x)-(o.x-r.x)*(n.y-t.y);if(0!==c){var l=a/c,u=h/c;0<=l&&l<=1&&0<=u&&u<=1?(s=new i("Intersection")).appendPoint(new e.Point(t.x+l*(n.x-t.x),t.y+l*(n.y-t.y))):s=new i}else s=new i(0===a||0===h?"Coincident":"Parallel");return s},e.Intersection.intersectLinePolygon=function(t,e,n){var r,o,s,a,h=new i,c=n.length;for(a=0;a<c;a++)r=n[a],o=n[(a+1)%c],s=i.intersectLineLine(t,e,r,o),h.appendPoints(s.points);return h.points.length>0&&(h.status="Intersection"),h},e.Intersection.intersectPolygonPolygon=function(t,e){var n,r=new i,o=t.length;for(n=0;n<o;n++){var s=t[n],a=t[(n+1)%o],h=i.intersectLinePolygon(s,a,e);r.appendPoints(h.points)}return r.points.length>0&&(r.status="Intersection"),r},e.Intersection.intersectPolygonRectangle=function(t,n,r){var o=n.min(r),s=n.max(r),a=new e.Point(s.x,o.y),h=new e.Point(o.x,s.y),c=i.intersectLinePolygon(o,a,t),l=i.intersectLinePolygon(a,s,t),u=i.intersectLinePolygon(s,h,t),f=i.intersectLinePolygon(h,o,t),d=new i;return d.appendPoints(c.points),d.appendPoints(l.points),d.appendPoints(u.points),d.appendPoints(f.points),d.points.length>0&&(d.status="Intersection"),d})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});function i(t){t?this._tryParsingColor(t):this.setSource([0,0,0,1])}function n(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}e.Color?e.warn("fabric.Color is already defined."):(e.Color=i,e.Color.prototype={_tryParsingColor:function(t){var e;t in i.colorNameMap&&(t=i.colorNameMap[t]),"transparent"===t&&(e=[255,255,255,0]),e||(e=i.sourceFromHex(t)),e||(e=i.sourceFromRgb(t)),e||(e=i.sourceFromHsl(t)),e||(e=[0,0,0,1]),e&&this.setSource(e)},_rgbToHsl:function(t,i,n){t/=255,i/=255,n/=255;var r,o,s,a=e.util.array.max([t,i,n]),h=e.util.array.min([t,i,n]);if(s=(a+h)/2,a===h)r=o=0;else{var c=a-h;switch(o=s>.5?c/(2-a-h):c/(a+h),a){case t:r=(i-n)/c+(i<n?6:0);break;case i:r=(n-t)/c+2;break;case n:r=(t-i)/c+4}r/=6}return[Math.round(360*r),Math.round(100*o),Math.round(100*s)]},getSource:function(){return this._source},setSource:function(t){this._source=t},toRgb:function(){var t=this.getSource();return"rgb("+t[0]+","+t[1]+","+t[2]+")"},toRgba:function(){var t=this.getSource();return"rgba("+t[0]+","+t[1]+","+t[2]+","+t[3]+")"},toHsl:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return"hsl("+e[0]+","+e[1]+"%,"+e[2]+"%)"},toHsla:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return"hsla("+e[0]+","+e[1]+"%,"+e[2]+"%,"+t[3]+")"},toHex:function(){var t,e,i,n=this.getSource();return t=1===(t=n[0].toString(16)).length?"0"+t:t,e=1===(e=n[1].toString(16)).length?"0"+e:e,i=1===(i=n[2].toString(16)).length?"0"+i:i,t.toUpperCase()+e.toUpperCase()+i.toUpperCase()},toHexa:function(){var t,e=this.getSource();return t=1===(t=(t=Math.round(255*e[3])).toString(16)).length?"0"+t:t,this.toHex()+t.toUpperCase()},getAlpha:function(){return this.getSource()[3]},setAlpha:function(t){var e=this.getSource();return e[3]=t,this.setSource(e),this},toGrayscale:function(){var t=this.getSource(),e=parseInt((.3*t[0]+.59*t[1]+.11*t[2]).toFixed(0),10),i=t[3];return this.setSource([e,e,e,i]),this},toBlackWhite:function(t){var e=this.getSource(),i=(.3*e[0]+.59*e[1]+.11*e[2]).toFixed(0),n=e[3];return t=t||127,i=Number(i)<Number(t)?0:255,this.setSource([i,i,i,n]),this},overlayWith:function(t){t instanceof i||(t=new i(t));var e,n=[],r=this.getAlpha(),o=this.getSource(),s=t.getSource();for(e=0;e<3;e++)n.push(Math.round(.5*o[e]+.5*s[e]));return n[3]=r,this.setSource(n),this}},e.Color.reRGBa=/^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i,e.Color.reHSLa=/^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i,e.Color.reHex=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i,e.Color.colorNameMap={aliceblue:"#F0F8FF",antiquewhite:"#FAEBD7",aqua:"#00FFFF",aquamarine:"#7FFFD4",azure:"#F0FFFF",beige:"#F5F5DC",bisque:"#FFE4C4",black:"#000000",blanchedalmond:"#FFEBCD",blue:"#0000FF",blueviolet:"#8A2BE2",brown:"#A52A2A",burlywood:"#DEB887",cadetblue:"#5F9EA0",chartreuse:"#7FFF00",chocolate:"#D2691E",coral:"#FF7F50",cornflowerblue:"#6495ED",cornsilk:"#FFF8DC",crimson:"#DC143C",cyan:"#00FFFF",darkblue:"#00008B",darkcyan:"#008B8B",darkgoldenrod:"#B8860B",darkgray:"#A9A9A9",darkgrey:"#A9A9A9",darkgreen:"#006400",darkkhaki:"#BDB76B",darkmagenta:"#8B008B",darkolivegreen:"#556B2F",darkorange:"#FF8C00",darkorchid:"#9932CC",darkred:"#8B0000",darksalmon:"#E9967A",darkseagreen:"#8FBC8F",darkslateblue:"#483D8B",darkslategray:"#2F4F4F",darkslategrey:"#2F4F4F",darkturquoise:"#00CED1",darkviolet:"#9400D3",deeppink:"#FF1493",deepskyblue:"#00BFFF",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1E90FF",firebrick:"#B22222",floralwhite:"#FFFAF0",forestgreen:"#228B22",fuchsia:"#FF00FF",gainsboro:"#DCDCDC",ghostwhite:"#F8F8FF",gold:"#FFD700",goldenrod:"#DAA520",gray:"#808080",grey:"#808080",green:"#008000",greenyellow:"#ADFF2F",honeydew:"#F0FFF0",hotpink:"#FF69B4",indianred:"#CD5C5C",indigo:"#4B0082",ivory:"#FFFFF0",khaki:"#F0E68C",lavender:"#E6E6FA",lavenderblush:"#FFF0F5",lawngreen:"#7CFC00",lemonchiffon:"#FFFACD",lightblue:"#ADD8E6",lightcoral:"#F08080",lightcyan:"#E0FFFF",lightgoldenrodyellow:"#FAFAD2",lightgray:"#D3D3D3",lightgrey:"#D3D3D3",lightgreen:"#90EE90",lightpink:"#FFB6C1",lightsalmon:"#FFA07A",lightseagreen:"#20B2AA",lightskyblue:"#87CEFA",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#B0C4DE",lightyellow:"#FFFFE0",lime:"#00FF00",limegreen:"#32CD32",linen:"#FAF0E6",magenta:"#FF00FF",maroon:"#800000",mediumaquamarine:"#66CDAA",mediumblue:"#0000CD",mediumorchid:"#BA55D3",mediumpurple:"#9370DB",mediumseagreen:"#3CB371",mediumslateblue:"#7B68EE",mediumspringgreen:"#00FA9A",mediumturquoise:"#48D1CC",mediumvioletred:"#C71585",midnightblue:"#191970",mintcream:"#F5FFFA",mistyrose:"#FFE4E1",moccasin:"#FFE4B5",navajowhite:"#FFDEAD",navy:"#000080",oldlace:"#FDF5E6",olive:"#808000",olivedrab:"#6B8E23",orange:"#FFA500",orangered:"#FF4500",orchid:"#DA70D6",palegoldenrod:"#EEE8AA",palegreen:"#98FB98",paleturquoise:"#AFEEEE",palevioletred:"#DB7093",papayawhip:"#FFEFD5",peachpuff:"#FFDAB9",peru:"#CD853F",pink:"#FFC0CB",plum:"#DDA0DD",powderblue:"#B0E0E6",purple:"#800080",rebeccapurple:"#663399",red:"#FF0000",rosybrown:"#BC8F8F",royalblue:"#4169E1",saddlebrown:"#8B4513",salmon:"#FA8072",sandybrown:"#F4A460",seagreen:"#2E8B57",seashell:"#FFF5EE",sienna:"#A0522D",silver:"#C0C0C0",skyblue:"#87CEEB",slateblue:"#6A5ACD",slategray:"#708090",slategrey:"#708090",snow:"#FFFAFA",springgreen:"#00FF7F",steelblue:"#4682B4",tan:"#D2B48C",teal:"#008080",thistle:"#D8BFD8",tomato:"#FF6347",turquoise:"#40E0D0",violet:"#EE82EE",wheat:"#F5DEB3",white:"#FFFFFF",whitesmoke:"#F5F5F5",yellow:"#FFFF00",yellowgreen:"#9ACD32"},e.Color.fromRgb=function(t){return i.fromSource(i.sourceFromRgb(t))},e.Color.sourceFromRgb=function(t){var e=t.match(i.reRGBa);if(e){var n=parseInt(e[1],10)/(/%$/.test(e[1])?100:1)*(/%$/.test(e[1])?255:1),r=parseInt(e[2],10)/(/%$/.test(e[2])?100:1)*(/%$/.test(e[2])?255:1),o=parseInt(e[3],10)/(/%$/.test(e[3])?100:1)*(/%$/.test(e[3])?255:1);return[parseInt(n,10),parseInt(r,10),parseInt(o,10),e[4]?parseFloat(e[4]):1]}},e.Color.fromRgba=i.fromRgb,e.Color.fromHsl=function(t){return i.fromSource(i.sourceFromHsl(t))},e.Color.sourceFromHsl=function(t){var e=t.match(i.reHSLa);if(e){var r,o,s,a=(parseFloat(e[1])%360+360)%360/360,h=parseFloat(e[2])/(/%$/.test(e[2])?100:1),c=parseFloat(e[3])/(/%$/.test(e[3])?100:1);if(0===h)r=o=s=c;else{var l=c<=.5?c*(h+1):c+h-c*h,u=2*c-l;r=n(u,l,a+1/3),o=n(u,l,a),s=n(u,l,a-1/3)}return[Math.round(255*r),Math.round(255*o),Math.round(255*s),e[4]?parseFloat(e[4]):1]}},e.Color.fromHsla=i.fromHsl,e.Color.fromHex=function(t){return i.fromSource(i.sourceFromHex(t))},e.Color.sourceFromHex=function(t){if(t.match(i.reHex)){var e=t.slice(t.indexOf("#")+1),n=3===e.length||4===e.length,r=8===e.length||4===e.length,o=n?e.charAt(0)+e.charAt(0):e.substring(0,2),s=n?e.charAt(1)+e.charAt(1):e.substring(2,4),a=n?e.charAt(2)+e.charAt(2):e.substring(4,6),h=r?n?e.charAt(3)+e.charAt(3):e.substring(6,8):"FF";return[parseInt(o,16),parseInt(s,16),parseInt(a,16),parseFloat((parseInt(h,16)/255).toFixed(2))]}},e.Color.fromSource=function(t){var e=new i;return e.setSource(t),e})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=["e","se","s","sw","w","nw","n","ne","e"],n=["ns","nesw","ew","nwse"],r={},o="left",s="top",a="right",h="bottom",c="center",l={top:h,bottom:s,left:a,right:o,center:c},u=e.util.radiansToDegrees,f=Math.sign||function(t){return(t>0)-(t<0)||+t};function d(t,e){var i=t.angle+u(Math.atan2(e.y,e.x))+360;return Math.round(i%360/45)}function p(t,i){var n=i.transform.target,r=n.canvas,o=e.util.object.clone(i);o.target=n,r&&r.fire("object:"+t,o),n.fire(t,i)}function g(t,e){var i=e.canvas,n=t[i.uniScaleKey];return i.uniformScaling&&!n||!i.uniformScaling&&n}function m(t){return t.originX===c&&t.originY===c}function v(t,e,i){var n=t.lockScalingX,r=t.lockScalingY;return!((!n||!r)&&(e||!n&&!r||!i)&&(!n||"x"!==e)&&(!r||"y"!==e))}function b(t,e,i,n){return{e:t,transform:e,pointer:{x:i,y:n}}}function y(t){return function(e,i,n,r){var o=i.target,s=o.getCenterPoint(),a=o.translateToOriginPoint(s,i.originX,i.originY),h=t(e,i,n,r);return o.setPositionByOrigin(a,i.originX,i.originY),h}}function w(t,e){return function(i,n,r,o){var s=e(i,n,r,o);return s&&p(t,b(i,n,r,o)),s}}function x(t,i,n,r,o){var s=t.target,a=s.controls[t.corner],h=s.canvas.getZoom(),c=s.padding/h,l=s.toLocalPoint(new e.Point(r,o),i,n);return l.x>=c&&(l.x-=c),l.x<=-c&&(l.x+=c),l.y>=c&&(l.y-=c),l.y<=c&&(l.y+=c),l.x-=a.offsetX,l.y-=a.offsetY,l}function _(t){return t.flipX!==t.flipY}function S(t,e,i,n,r){if(0!==t[e]){var o=r/t._getTransformedDimensions()[n]*t[i];t.set(i,o)}}function C(t,e,i,n){var r,c=e.target,l=c._getTransformedDimensions(0,c.skewY),f=x(e,e.originX,e.originY,i,n),d=Math.abs(2*f.x)-l.x,p=c.skewX;d<2?r=0:(r=u(Math.atan2(d/c.scaleX,l.y/c.scaleY)),e.originX===o&&e.originY===h&&(r=-r),e.originX===a&&e.originY===s&&(r=-r),_(c)&&(r=-r));var g=p!==r;if(g){var m=c._getTransformedDimensions().y;c.set("skewX",r),S(c,"skewY","scaleY","y",m)}return g}function A(t,e,i,n){var r,c=e.target,l=c._getTransformedDimensions(c.skewX,0),f=x(e,e.originX,e.originY,i,n),d=Math.abs(2*f.y)-l.y,p=c.skewY;d<2?r=0:(r=u(Math.atan2(d/c.scaleY,l.x/c.scaleX)),e.originX===o&&e.originY===h&&(r=-r),e.originX===a&&e.originY===s&&(r=-r),_(c)&&(r=-r));var g=p!==r;if(g){var m=c._getTransformedDimensions().x;c.set("skewY",r),S(c,"skewX","scaleX","x",m)}return g}function L(t,e,i,n,r){r=r||{};var o,s,a,h,c,u,d=e.target,p=d.lockScalingX,b=d.lockScalingY,y=r.by,w=g(t,d),_=v(d,y,w),S=e.gestureScale;if(_)return!1;if(S)s=e.scaleX*S,a=e.scaleY*S;else{if(o=x(e,e.originX,e.originY,i,n),c="y"!==y?f(o.x):1,u="x"!==y?f(o.y):1,e.signX||(e.signX=c),e.signY||(e.signY=u),d.lockScalingFlip&&(e.signX!==c||e.signY!==u))return!1;if(h=d._getTransformedDimensions(),w&&!y){var C=Math.abs(o.x)+Math.abs(o.y),A=e.original,L=C/(Math.abs(h.x*A.scaleX/d.scaleX)+Math.abs(h.y*A.scaleY/d.scaleY));s=A.scaleX*L,a=A.scaleY*L}else s=Math.abs(o.x*d.scaleX/h.x),a=Math.abs(o.y*d.scaleY/h.y);m(e)&&(s*=2,a*=2),e.signX!==c&&"y"!==y&&(e.originX=l[e.originX],s*=-1,e.signX=c),e.signY!==u&&"x"!==y&&(e.originY=l[e.originY],a*=-1,e.signY=u)}var P=d.scaleX,T=d.scaleY;return y?("x"===y&&d.set("scaleX",s),"y"===y&&d.set("scaleY",a)):(!p&&d.set("scaleX",s),!b&&d.set("scaleY",a)),P!==d.scaleX||T!==d.scaleY}r.scaleCursorStyleHandler=function(t,e,n){var r=g(t,n),o="";if(0!==e.x&&0===e.y?o="x":0===e.x&&0!==e.y&&(o="y"),v(n,o,r))return"not-allowed";var s=d(n,e);return i[s]+"-resize"},r.skewCursorStyleHandler=function(t,e,i){var r="not-allowed";if(0!==e.x&&i.lockSkewingY)return r;if(0!==e.y&&i.lockSkewingX)return r;var o=d(i,e)%4;return n[o]+"-resize"},r.scaleSkewCursorStyleHandler=function(t,e,i){return t[i.canvas.altActionKey]?r.skewCursorStyleHandler(t,e,i):r.scaleCursorStyleHandler(t,e,i)},r.rotationWithSnapping=w("rotating",y((function(t,e,i,n){var r=e,o=r.target,s=o.translateToOriginPoint(o.getCenterPoint(),r.originX,r.originY);if(o.lockRotation)return!1;var a,h=Math.atan2(r.ey-s.y,r.ex-s.x),c=Math.atan2(n-s.y,i-s.x),l=u(c-h+r.theta);if(o.snapAngle>0){var f=o.snapAngle,d=o.snapThreshold||f,p=Math.ceil(l/f)*f,g=Math.floor(l/f)*f;Math.abs(l-g)<d?l=g:Math.abs(l-p)<d&&(l=p)}return l<0&&(l=360+l),l%=360,a=o.angle!==l,o.angle=l,a}))),r.scalingEqually=w("scaling",y((function(t,e,i,n){return L(t,e,i,n)}))),r.scalingX=w("scaling",y((function(t,e,i,n){return L(t,e,i,n,{by:"x"})}))),r.scalingY=w("scaling",y((function(t,e,i,n){return L(t,e,i,n,{by:"y"})}))),r.scalingYOrSkewingX=function(t,e,i,n){return t[e.target.canvas.altActionKey]?r.skewHandlerX(t,e,i,n):r.scalingY(t,e,i,n)},r.scalingXOrSkewingY=function(t,e,i,n){return t[e.target.canvas.altActionKey]?r.skewHandlerY(t,e,i,n):r.scalingX(t,e,i,n)},r.changeWidth=w("resizing",y((function(t,e,i,n){var r=e.target,o=x(e,e.originX,e.originY,i,n),s=r.strokeWidth/(r.strokeUniform?r.scaleX:1),a=m(e)?2:1,h=r.width,c=Math.abs(o.x*a/r.scaleX)-s;return r.set("width",Math.max(c,0)),h!==c}))),r.skewHandlerX=function(t,e,i,n){var r,h=e.target,l=h.skewX,u=e.originY;return!h.lockSkewingX&&(0===l?r=x(e,c,c,i,n).x>0?o:a:(l>0&&(r=u===s?o:a),l<0&&(r=u===s?a:o),_(h)&&(r=r===o?a:o)),e.originX=r,w("skewing",y(C))(t,e,i,n))},r.skewHandlerY=function(t,e,i,n){var r,a=e.target,l=a.skewY,u=e.originX;return!a.lockSkewingY&&(0===l?r=x(e,c,c,i,n).y>0?s:h:(l>0&&(r=u===o?s:h),l<0&&(r=u===o?h:s),_(a)&&(r=r===s?h:s)),e.originY=r,w("skewing",y(A))(t,e,i,n))},r.dragHandler=function(t,e,i,n){var r=e.target,o=i-e.offsetX,s=n-e.offsetY,a=!r.get("lockMovementX")&&r.left!==o,h=!r.get("lockMovementY")&&r.top!==s;return a&&r.set("left",o),h&&r.set("top",s),(a||h)&&p("moving",b(t,e,i,n)),a||h},r.scaleOrSkewActionName=function(t,e,i){var n=t[i.canvas.altActionKey];return 0===e.x?n?"skewX":"scaleY":0===e.y?n?"skewY":"scaleX":void 0},r.rotationStyleHandler=function(t,e,i){return i.lockRotation?"not-allowed":e.cursorStyle},r.fireEvent=p,r.wrapWithFixedAnchor=y,r.wrapWithFireEvent=w,r.getLocalPoint=x,e.controlsUtils=r}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.degreesToRadians,n=e.controlsUtils;n.renderCircleControl=function(t,e,i,n,r){n=n||{};var o,s=this.sizeX||n.cornerSize||r.cornerSize,a=this.sizeY||n.cornerSize||r.cornerSize,h=void 0!==n.transparentCorners?n.transparentCorners:r.transparentCorners,c=h?"stroke":"fill",l=!h&&(n.cornerStrokeColor||r.cornerStrokeColor),u=e,f=i;t.save(),t.fillStyle=n.cornerColor||r.cornerColor,t.strokeStyle=n.cornerStrokeColor||r.cornerStrokeColor,s>a?(o=s,t.scale(1,a/s),f=i*s/a):a>s?(o=a,t.scale(s/a,1),u=e*a/s):o=s,t.lineWidth=1,t.beginPath(),t.arc(u,f,o/2,0,2*Math.PI,!1),t[c](),l&&t.stroke(),t.restore()},n.renderSquareControl=function(t,e,n,r,o){r=r||{};var s=this.sizeX||r.cornerSize||o.cornerSize,a=this.sizeY||r.cornerSize||o.cornerSize,h=void 0!==r.transparentCorners?r.transparentCorners:o.transparentCorners,c=h?"stroke":"fill",l=!h&&(r.cornerStrokeColor||o.cornerStrokeColor),u=s/2,f=a/2;t.save(),t.fillStyle=r.cornerColor||o.cornerColor,t.strokeStyle=r.cornerStrokeColor||o.cornerStrokeColor,t.lineWidth=1,t.translate(e,n),t.rotate(i(o.angle)),t[c+"Rect"](-u,-f,s,a),l&&t.strokeRect(-u,-f,s,a),t.restore()}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Control=function(t){for(var e in t)this[e]=t[e]},e.Control.prototype={visible:!0,actionName:"scale",angle:0,x:0,y:0,offsetX:0,offsetY:0,sizeX:null,sizeY:null,touchSizeX:null,touchSizeY:null,cursorStyle:"crosshair",withConnection:!1,actionHandler:function(){},mouseDownHandler:function(){},mouseUpHandler:function(){},getActionHandler:function(){return this.actionHandler},getMouseDownHandler:function(){return this.mouseDownHandler},getMouseUpHandler:function(){return this.mouseUpHandler},cursorStyleHandler:function(t,e){return e.cursorStyle},getActionName:function(t,e){return e.actionName},getVisibility:function(t,e){var i=t._controlsVisibility;return i&&void 0!==i[e]?i[e]:this.visible},setVisibility:function(t){this.visible=t},positionHandler:function(t,i){return e.util.transformPoint({x:this.x*t.x+this.offsetX,y:this.y*t.y+this.offsetY},i)},calcCornerCoords:function(t,i,n,r,o){var s,a,h,c,l=o?this.touchSizeX:this.sizeX,u=o?this.touchSizeY:this.sizeY;if(l&&u&&l!==u){var f=Math.atan2(u,l),d=Math.sqrt(l*l+u*u)/2,p=f-e.util.degreesToRadians(t),g=Math.PI/2-f-e.util.degreesToRadians(t);s=d*e.util.cos(p),a=d*e.util.sin(p),h=d*e.util.cos(g),c=d*e.util.sin(g)}else d=.7071067812*(l&&u?l:i),p=e.util.degreesToRadians(45-t),s=h=d*e.util.cos(p),a=c=d*e.util.sin(p);return{tl:{x:n-c,y:r-h},tr:{x:n+s,y:r-a},bl:{x:n-s,y:r+a},br:{x:n+c,y:r+h}}},render:function(t,i,n,r,o){"circle"===((r=r||{}).cornerStyle||o.cornerStyle)?e.controlsUtils.renderCircleControl.call(this,t,i,n,r,o):e.controlsUtils.renderSquareControl.call(this,t,i,n,r,o)}}}(e),function(){function t(t,e){var i,n,r,o,s=t.getAttribute("style"),a=t.getAttribute("offset")||0;if(a=(a=parseFloat(a)/(/%$/.test(a)?100:1))<0?0:a>1?1:a,s){var h=s.split(/\s*;\s*/);for(""===h[h.length-1]&&h.pop(),o=h.length;o--;){var c=h[o].split(/\s*:\s*/),l=c[0].trim(),u=c[1].trim();"stop-color"===l?i=u:"stop-opacity"===l&&(r=u)}}return i||(i=t.getAttribute("stop-color")||"rgb(0,0,0)"),r||(r=t.getAttribute("stop-opacity")),n=(i=new A.Color(i)).getAlpha(),r=isNaN(parseFloat(r))?1:parseFloat(r),r*=n*e,{offset:a,color:i.toRgb(),opacity:r}}var e=A.util.object.clone;A.Gradient=A.util.createClass({offsetX:0,offsetY:0,gradientTransform:null,gradientUnits:"pixels",type:"linear",initialize:function(t){t||(t={}),t.coords||(t.coords={});var e,i=this;Object.keys(t).forEach((function(e){i[e]=t[e]})),this.id?this.id+="_"+A.Object.__uid++:this.id=A.Object.__uid++,e={x1:t.coords.x1||0,y1:t.coords.y1||0,x2:t.coords.x2||0,y2:t.coords.y2||0},"radial"===this.type&&(e.r1=t.coords.r1||0,e.r2=t.coords.r2||0),this.coords=e,this.colorStops=t.colorStops.slice()},addColorStop:function(t){for(var e in t){var i=new A.Color(t[e]);this.colorStops.push({offset:parseFloat(e),color:i.toRgb(),opacity:i.getAlpha()})}return this},toObject:function(t){var e={type:this.type,coords:this.coords,colorStops:this.colorStops,offsetX:this.offsetX,offsetY:this.offsetY,gradientUnits:this.gradientUnits,gradientTransform:this.gradientTransform?this.gradientTransform.concat():this.gradientTransform};return A.util.populateWithProperties(this,e,t),e},toSVG:function(t,i){var n,r,o,s,a=e(this.coords,!0),h=(i=i||{},e(this.colorStops,!0)),c=a.r1>a.r2,l=this.gradientTransform?this.gradientTransform.concat():A.iMatrix.concat(),u=-this.offsetX,f=-this.offsetY,d=!!i.additionalTransform,p="pixels"===this.gradientUnits?"userSpaceOnUse":"objectBoundingBox";if(h.sort((function(t,e){return t.offset-e.offset})),"objectBoundingBox"===p?(u/=t.width,f/=t.height):(u+=t.width/2,f+=t.height/2),"path"===t.type&&"percentage"!==this.gradientUnits&&(u-=t.pathOffset.x,f-=t.pathOffset.y),l[4]-=u,l[5]-=f,s='id="SVGID_'+this.id+'" gradientUnits="'+p+'"',s+=' gradientTransform="'+(d?i.additionalTransform+" ":"")+A.util.matrixToSVG(l)+'" ',"linear"===this.type?o=["<linearGradient ",s,' x1="',a.x1,'" y1="',a.y1,'" x2="',a.x2,'" y2="',a.y2,'">\n']:"radial"===this.type&&(o=["<radialGradient ",s,' cx="',c?a.x1:a.x2,'" cy="',c?a.y1:a.y2,'" r="',c?a.r1:a.r2,'" fx="',c?a.x2:a.x1,'" fy="',c?a.y2:a.y1,'">\n']),"radial"===this.type){if(c)for((h=h.concat()).reverse(),n=0,r=h.length;n<r;n++)h[n].offset=1-h[n].offset;var g=Math.min(a.r1,a.r2);if(g>0){var m=g/Math.max(a.r1,a.r2);for(n=0,r=h.length;n<r;n++)h[n].offset+=m*(1-h[n].offset)}}for(n=0,r=h.length;n<r;n++){var v=h[n];o.push("<stop ",'offset="',100*v.offset+"%",'" style="stop-color:',v.color,void 0!==v.opacity?";stop-opacity: "+v.opacity:";",'"/>\n')}return o.push("linear"===this.type?"</linearGradient>\n":"</radialGradient>\n"),o.join("")},toLive:function(t){var e,i,n,r=A.util.object.clone(this.coords);if(this.type){for("linear"===this.type?e=t.createLinearGradient(r.x1,r.y1,r.x2,r.y2):"radial"===this.type&&(e=t.createRadialGradient(r.x1,r.y1,r.r1,r.x2,r.y2,r.r2)),i=0,n=this.colorStops.length;i<n;i++){var o=this.colorStops[i].color,s=this.colorStops[i].opacity,a=this.colorStops[i].offset;void 0!==s&&(o=new A.Color(o).setAlpha(s).toRgba()),e.addColorStop(a,o)}return e}}}),A.util.object.extend(A.Gradient,{fromElement:function(e,i,n,r){var o=parseFloat(n)/(/%$/.test(n)?100:1);o=o<0?0:o>1?1:o,isNaN(o)&&(o=1);var s,a,h,c,l=e.getElementsByTagName("stop"),u="userSpaceOnUse"===e.getAttribute("gradientUnits")?"pixels":"percentage",f=e.getAttribute("gradientTransform")||"",d=[],p=0,g=0;for("linearGradient"===e.nodeName||"LINEARGRADIENT"===e.nodeName?(s="linear",a=function(t){return{x1:t.getAttribute("x1")||0,y1:t.getAttribute("y1")||0,x2:t.getAttribute("x2")||"100%",y2:t.getAttribute("y2")||0}}(e)):(s="radial",a=function(t){return{x1:t.getAttribute("fx")||t.getAttribute("cx")||"50%",y1:t.getAttribute("fy")||t.getAttribute("cy")||"50%",r1:0,x2:t.getAttribute("cx")||"50%",y2:t.getAttribute("cy")||"50%",r2:t.getAttribute("r")||"50%"}}(e)),h=l.length;h--;)d.push(t(l[h],o));return c=A.parseTransformAttribute(f),function(t,e,i,n){var r,o;Object.keys(e).forEach((function(t){"Infinity"===(r=e[t])?o=1:"-Infinity"===r?o=0:(o=parseFloat(e[t],10),"string"==typeof r&&/^(\d+\.\d+)%|(\d+)%$/.test(r)&&(o*=.01,"pixels"===n&&("x1"!==t&&"x2"!==t&&"r2"!==t||(o*=i.viewBoxWidth||i.width),"y1"!==t&&"y2"!==t||(o*=i.viewBoxHeight||i.height)))),e[t]=o}))}(0,a,r,u),"pixels"===u&&(p=-i.left,g=-i.top),new A.Gradient({id:e.getAttribute("id"),type:s,coords:a,colorStops:d,gradientUnits:u,gradientTransform:c,offsetX:p,offsetY:g})}})}(),function(){"use strict";var t=A.util.toFixed;A.Pattern=A.util.createClass({repeat:"repeat",offsetX:0,offsetY:0,crossOrigin:"",patternTransform:null,initialize:function(t,e){if(t||(t={}),this.id=A.Object.__uid++,this.setOptions(t),!t.source||t.source&&"string"!=typeof t.source)e&&e(this);else{var i=this;this.source=A.util.createImage(),A.util.loadImage(t.source,(function(t,n){i.source=t,e&&e(i,n)}),null,this.crossOrigin)}},toObject:function(e){var i,n,r=A.Object.NUM_FRACTION_DIGITS;return"string"==typeof this.source.src?i=this.source.src:"object"==typeof this.source&&this.source.toDataURL&&(i=this.source.toDataURL()),n={type:"pattern",source:i,repeat:this.repeat,crossOrigin:this.crossOrigin,offsetX:t(this.offsetX,r),offsetY:t(this.offsetY,r),patternTransform:this.patternTransform?this.patternTransform.concat():null},A.util.populateWithProperties(this,n,e),n},toSVG:function(t){var e="function"==typeof this.source?this.source():this.source,i=e.width/t.width,n=e.height/t.height,r=this.offsetX/t.width,o=this.offsetY/t.height,s="";return"repeat-x"!==this.repeat&&"no-repeat"!==this.repeat||(n=1,o&&(n+=Math.abs(o))),"repeat-y"!==this.repeat&&"no-repeat"!==this.repeat||(i=1,r&&(i+=Math.abs(r))),e.src?s=e.src:e.toDataURL&&(s=e.toDataURL()),'<pattern id="SVGID_'+this.id+'" x="'+r+'" y="'+o+'" width="'+i+'" height="'+n+'">\n<image x="0" y="0" width="'+e.width+'" height="'+e.height+'" xlink:href="'+s+'"></image>\n</pattern>\n'},setOptions:function(t){for(var e in t)this[e]=t[e]},toLive:function(t){var e=this.source;if(!e)return"";if(void 0!==e.src){if(!e.complete)return"";if(0===e.naturalWidth||0===e.naturalHeight)return""}return t.createPattern(e,this.repeat)}})}(),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.toFixed;e.Shadow?e.warn("fabric.Shadow is already defined."):(e.Shadow=e.util.createClass({color:"rgb(0,0,0)",blur:0,offsetX:0,offsetY:0,affectStroke:!1,includeDefaultValues:!0,nonScaling:!1,initialize:function(t){for(var i in"string"==typeof t&&(t=this._parseShadow(t)),t)this[i]=t[i];this.id=e.Object.__uid++},_parseShadow:function(t){var i=t.trim(),n=e.Shadow.reOffsetsAndBlur.exec(i)||[];return{color:(i.replace(e.Shadow.reOffsetsAndBlur,"")||"rgb(0,0,0)").trim(),offsetX:parseFloat(n[1],10)||0,offsetY:parseFloat(n[2],10)||0,blur:parseFloat(n[3],10)||0}},toString:function(){return[this.offsetX,this.offsetY,this.blur,this.color].join("px ")},toSVG:function(t){var n=40,r=40,o=e.Object.NUM_FRACTION_DIGITS,s=e.util.rotateVector({x:this.offsetX,y:this.offsetY},e.util.degreesToRadians(-t.angle)),a=new e.Color(this.color);return t.width&&t.height&&(n=100*i((Math.abs(s.x)+this.blur)/t.width,o)+20,r=100*i((Math.abs(s.y)+this.blur)/t.height,o)+20),t.flipX&&(s.x*=-1),t.flipY&&(s.y*=-1),'<filter id="SVGID_'+this.id+'" y="-'+r+'%" height="'+(100+2*r)+'%" x="-'+n+'%" width="'+(100+2*n)+'%" >\n\t<feGaussianBlur in="SourceAlpha" stdDeviation="'+i(this.blur?this.blur/2:0,o)+'"></feGaussianBlur>\n\t<feOffset dx="'+i(s.x,o)+'" dy="'+i(s.y,o)+'" result="oBlur" ></feOffset>\n\t<feFlood flood-color="'+a.toRgb()+'" flood-opacity="'+a.getAlpha()+'"/>\n\t<feComposite in2="oBlur" operator="in" />\n\t<feMerge>\n\t\t<feMergeNode></feMergeNode>\n\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n\t</feMerge>\n</filter>\n'},toObject:function(){if(this.includeDefaultValues)return{color:this.color,blur:this.blur,offsetX:this.offsetX,offsetY:this.offsetY,affectStroke:this.affectStroke,nonScaling:this.nonScaling};var t={},i=e.Shadow.prototype;return["color","blur","offsetX","offsetY","affectStroke","nonScaling"].forEach((function(e){this[e]!==i[e]&&(t[e]=this[e])}),this),t}}),e.Shadow.reOffsetsAndBlur=/(?:\s|^)(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(\d+(?:\.\d*)?(?:px)?)?(?:\s?|$)(?:$|\s)/)}(e),function(){"use strict";if(A.StaticCanvas)A.warn("fabric.StaticCanvas is already defined.");else{var t=A.util.object.extend,e=A.util.getElementOffset,i=A.util.removeFromArray,n=A.util.toFixed,r=A.util.transformPoint,o=A.util.invertTransform,s=A.util.getNodeCanvas,a=A.util.createCanvasElement,h=new Error("Could not initialize `canvas` element");A.StaticCanvas=A.util.createClass(A.CommonMethods,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e)},backgroundColor:"",backgroundImage:null,overlayColor:"",overlayImage:null,includeDefaultValues:!0,stateful:!1,renderOnAddRemove:!0,controlsAboveOverlay:!1,allowTouchScrolling:!1,imageSmoothingEnabled:!0,viewportTransform:A.iMatrix.concat(),backgroundVpt:!0,overlayVpt:!0,enableRetinaScaling:!0,vptCoords:{},skipOffscreen:!0,clipPath:void 0,_initStatic:function(t,e){var i=this.requestRenderAllBound;this._objects=[],this._createLowerCanvas(t),this._initOptions(e),this.interactive||this._initRetinaScaling(),e.overlayImage&&this.setOverlayImage(e.overlayImage,i),e.backgroundImage&&this.setBackgroundImage(e.backgroundImage,i),e.backgroundColor&&this.setBackgroundColor(e.backgroundColor,i),e.overlayColor&&this.setOverlayColor(e.overlayColor,i),this.calcOffset()},_isRetinaScaling:function(){return A.devicePixelRatio>1&&this.enableRetinaScaling},getRetinaScaling:function(){return this._isRetinaScaling()?Math.max(1,A.devicePixelRatio):1},_initRetinaScaling:function(){if(this._isRetinaScaling()){var t=A.devicePixelRatio;this.__initRetinaScaling(t,this.lowerCanvasEl,this.contextContainer),this.upperCanvasEl&&this.__initRetinaScaling(t,this.upperCanvasEl,this.contextTop)}},__initRetinaScaling:function(t,e,i){e.setAttribute("width",this.width*t),e.setAttribute("height",this.height*t),i.scale(t,t)},calcOffset:function(){return this._offset=e(this.lowerCanvasEl),this},setOverlayImage:function(t,e,i){return this.__setBgOverlayImage("overlayImage",t,e,i)},setBackgroundImage:function(t,e,i){return this.__setBgOverlayImage("backgroundImage",t,e,i)},setOverlayColor:function(t,e){return this.__setBgOverlayColor("overlayColor",t,e)},setBackgroundColor:function(t,e){return this.__setBgOverlayColor("backgroundColor",t,e)},__setBgOverlayImage:function(t,e,i,n){return"string"==typeof e?A.util.loadImage(e,(function(e,r){if(e){var o=new A.Image(e,n);this[t]=o,o.canvas=this}i&&i(e,r)}),this,n&&n.crossOrigin):(n&&e.setOptions(n),this[t]=e,e&&(e.canvas=this),i&&i(e,!1)),this},__setBgOverlayColor:function(t,e,i){return this[t]=e,this._initGradient(e,t),this._initPattern(e,t,i),this},_createCanvasElement:function(){var t=a();if(!t)throw h;if(t.style||(t.style={}),void 0===t.getContext)throw h;return t},_initOptions:function(t){var e=this.lowerCanvasEl;this._setOptions(t),this.width=this.width||parseInt(e.width,10)||0,this.height=this.height||parseInt(e.height,10)||0,this.lowerCanvasEl.style&&(e.width=this.width,e.height=this.height,e.style.width=this.width+"px",e.style.height=this.height+"px",this.viewportTransform=this.viewportTransform.slice())},_createLowerCanvas:function(t){t&&t.getContext?this.lowerCanvasEl=t:this.lowerCanvasEl=A.util.getById(t)||this._createCanvasElement(),A.util.addClass(this.lowerCanvasEl,"lower-canvas"),this._originalCanvasStyle=this.lowerCanvasEl.style,this.interactive&&this._applyCanvasStyle(this.lowerCanvasEl),this.contextContainer=this.lowerCanvasEl.getContext("2d")},getWidth:function(){return this.width},getHeight:function(){return this.height},setWidth:function(t,e){return this.setDimensions({width:t},e)},setHeight:function(t,e){return this.setDimensions({height:t},e)},setDimensions:function(t,e){var i;for(var n in e=e||{},t)i=t[n],e.cssOnly||(this._setBackstoreDimension(n,t[n]),i+="px",this.hasLostContext=!0),e.backstoreOnly||this._setCssDimension(n,i);return this._isCurrentlyDrawing&&this.freeDrawingBrush&&this.freeDrawingBrush._setBrushStyles(this.contextTop),this._initRetinaScaling(),this.calcOffset(),e.cssOnly||this.requestRenderAll(),this},_setBackstoreDimension:function(t,e){return this.lowerCanvasEl[t]=e,this.upperCanvasEl&&(this.upperCanvasEl[t]=e),this.cacheCanvasEl&&(this.cacheCanvasEl[t]=e),this[t]=e,this},_setCssDimension:function(t,e){return this.lowerCanvasEl.style[t]=e,this.upperCanvasEl&&(this.upperCanvasEl.style[t]=e),this.wrapperEl&&(this.wrapperEl.style[t]=e),this},getZoom:function(){return this.viewportTransform[0]},setViewportTransform:function(t){var e,i,n,r=this._activeObject,o=this.backgroundImage,s=this.overlayImage;for(this.viewportTransform=t,i=0,n=this._objects.length;i<n;i++)(e=this._objects[i]).group||e.setCoords(!0);return r&&r.setCoords(),o&&o.setCoords(!0),s&&s.setCoords(!0),this.calcViewportBoundaries(),this.renderOnAddRemove&&this.requestRenderAll(),this},zoomToPoint:function(t,e){var i=t,n=this.viewportTransform.slice(0);t=r(t,o(this.viewportTransform)),n[0]=e,n[3]=e;var s=r(t,n);return n[4]+=i.x-s.x,n[5]+=i.y-s.y,this.setViewportTransform(n)},setZoom:function(t){return this.zoomToPoint(new A.Point(0,0),t),this},absolutePan:function(t){var e=this.viewportTransform.slice(0);return e[4]=-t.x,e[5]=-t.y,this.setViewportTransform(e)},relativePan:function(t){return this.absolutePan(new A.Point(-t.x-this.viewportTransform[4],-t.y-this.viewportTransform[5]))},getElement:function(){return this.lowerCanvasEl},_onObjectAdded:function(t){this.stateful&&t.setupState(),t._set("canvas",this),t.setCoords(),this.fire("object:added",{target:t}),t.fire("added")},_onObjectRemoved:function(t){this.fire("object:removed",{target:t}),t.fire("removed"),delete t.canvas},clearContext:function(t){return t.clearRect(0,0,this.width,this.height),this},getContext:function(){return this.contextContainer},clear:function(){return this.remove.apply(this,this.getObjects()),this.backgroundImage=null,this.overlayImage=null,this.backgroundColor="",this.overlayColor="",this._hasITextHandlers&&(this.off("mouse:up",this._mouseUpITextHandler),this._iTextInstances=null,this._hasITextHandlers=!1),this.clearContext(this.contextContainer),this.fire("canvas:cleared"),this.renderOnAddRemove&&this.requestRenderAll(),this},renderAll:function(){var t=this.contextContainer;return this.renderCanvas(t,this._objects),this},renderAndReset:function(){this.isRendering=0,this.renderAll()},requestRenderAll:function(){return this.isRendering||(this.isRendering=A.util.requestAnimFrame(this.renderAndResetBound)),this},calcViewportBoundaries:function(){var t={},e=this.width,i=this.height,n=o(this.viewportTransform);return t.tl=r({x:0,y:0},n),t.br=r({x:e,y:i},n),t.tr=new A.Point(t.br.x,t.tl.y),t.bl=new A.Point(t.tl.x,t.br.y),this.vptCoords=t,t},cancelRequestedRender:function(){this.isRendering&&(A.util.cancelAnimFrame(this.isRendering),this.isRendering=0)},renderCanvas:function(t,e){var i=this.viewportTransform,n=this.clipPath;this.cancelRequestedRender(),this.calcViewportBoundaries(),this.clearContext(t),A.util.setImageSmoothing(t,this.imageSmoothingEnabled),this.fire("before:render",{ctx:t}),this._renderBackground(t),t.save(),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this._renderObjects(t,e),t.restore(),!this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),n&&(n.canvas=this,n.shouldCache(),n._transformDone=!0,n.renderCache({forClipping:!0}),this.drawClipPathOnCanvas(t)),this._renderOverlay(t),this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),this.fire("after:render",{ctx:t})},drawClipPathOnCanvas:function(t){var e=this.viewportTransform,i=this.clipPath;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5]),t.globalCompositeOperation="destination-in",i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},_renderObjects:function(t,e){var i,n;for(i=0,n=e.length;i<n;++i)e[i]&&e[i].render(t)},_renderBackgroundOrOverlay:function(t,e){var i=this[e+"Color"],n=this[e+"Image"],r=this.viewportTransform,o=this[e+"Vpt"];if(i||n){if(i){t.save(),t.beginPath(),t.moveTo(0,0),t.lineTo(this.width,0),t.lineTo(this.width,this.height),t.lineTo(0,this.height),t.closePath(),t.fillStyle=i.toLive?i.toLive(t,this):i,o&&t.transform(r[0],r[1],r[2],r[3],r[4],r[5]),t.transform(1,0,0,1,i.offsetX||0,i.offsetY||0);var s=i.gradientTransform||i.patternTransform;s&&t.transform(s[0],s[1],s[2],s[3],s[4],s[5]),t.fill(),t.restore()}n&&(t.save(),o&&t.transform(r[0],r[1],r[2],r[3],r[4],r[5]),n.render(t),t.restore())}},_renderBackground:function(t){this._renderBackgroundOrOverlay(t,"background")},_renderOverlay:function(t){this._renderBackgroundOrOverlay(t,"overlay")},getCenter:function(){return{top:this.height/2,left:this.width/2}},getCenterPoint:function(){return new A.Point(this.width/2,this.height/2)},centerObjectH:function(t){return this._centerObject(t,new A.Point(this.getCenterPoint().x,t.getCenterPoint().y))},centerObjectV:function(t){return this._centerObject(t,new A.Point(t.getCenterPoint().x,this.getCenterPoint().y))},centerObject:function(t){var e=this.getCenterPoint();return this._centerObject(t,e)},viewportCenterObject:function(t){var e=this.getVpCenter();return this._centerObject(t,e)},viewportCenterObjectH:function(t){var e=this.getVpCenter();return this._centerObject(t,new A.Point(e.x,t.getCenterPoint().y)),this},viewportCenterObjectV:function(t){var e=this.getVpCenter();return this._centerObject(t,new A.Point(t.getCenterPoint().x,e.y))},getVpCenter:function(){var t=this.getCenterPoint(),e=o(this.viewportTransform);return r(t,e)},_centerObject:function(t,e){return t.setPositionByOrigin(e,"center","center"),t.setCoords(),this.renderOnAddRemove&&this.requestRenderAll(),this},toDatalessJSON:function(t){return this.toDatalessObject(t)},toObject:function(t){return this._toObjectMethod("toObject",t)},toDatalessObject:function(t){return this._toObjectMethod("toDatalessObject",t)},_toObjectMethod:function(e,i){var n=this.clipPath,r={version:A.version,objects:this._toObjects(e,i)};return n&&!n.excludeFromExport&&(r.clipPath=this._toObject(this.clipPath,e,i)),t(r,this.__serializeBgOverlay(e,i)),A.util.populateWithProperties(this,r,i),r},_toObjects:function(t,e){return this._objects.filter((function(t){return!t.excludeFromExport})).map((function(i){return this._toObject(i,t,e)}),this)},_toObject:function(t,e,i){var n;this.includeDefaultValues||(n=t.includeDefaultValues,t.includeDefaultValues=!1);var r=t[e](i);return this.includeDefaultValues||(t.includeDefaultValues=n),r},__serializeBgOverlay:function(t,e){var i={},n=this.backgroundImage,r=this.overlayImage,o=this.backgroundColor,s=this.overlayColor;return o&&o.toObject?o.excludeFromExport||(i.background=o.toObject(e)):o&&(i.background=o),s&&s.toObject?s.excludeFromExport||(i.overlay=s.toObject(e)):s&&(i.overlay=s),n&&!n.excludeFromExport&&(i.backgroundImage=this._toObject(n,t,e)),r&&!r.excludeFromExport&&(i.overlayImage=this._toObject(r,t,e)),i},svgViewportTransformation:!0,toSVG:function(t,e){t||(t={}),t.reviver=e;var i=[];return this._setSVGPreamble(i,t),this._setSVGHeader(i,t),this.clipPath&&i.push('<g clip-path="url(#'+this.clipPath.clipPathId+')" >\n'),this._setSVGBgOverlayColor(i,"background"),this._setSVGBgOverlayImage(i,"backgroundImage",e),this._setSVGObjects(i,e),this.clipPath&&i.push("</g>\n"),this._setSVGBgOverlayColor(i,"overlay"),this._setSVGBgOverlayImage(i,"overlayImage",e),i.push("</svg>"),i.join("")},_setSVGPreamble:function(t,e){e.suppressPreamble||t.push('<?xml version="1.0" encoding="',e.encoding||"UTF-8",'" standalone="no" ?>\n','<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ','"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n')},_setSVGHeader:function(t,e){var i,r=e.width||this.width,o=e.height||this.height,s='viewBox="0 0 '+this.width+" "+this.height+'" ',a=A.Object.NUM_FRACTION_DIGITS;e.viewBox?s='viewBox="'+e.viewBox.x+" "+e.viewBox.y+" "+e.viewBox.width+" "+e.viewBox.height+'" ':this.svgViewportTransformation&&(i=this.viewportTransform,s='viewBox="'+n(-i[4]/i[0],a)+" "+n(-i[5]/i[3],a)+" "+n(this.width/i[0],a)+" "+n(this.height/i[3],a)+'" '),t.push("<svg ",'xmlns="http://www.w3.org/2000/svg" ','xmlns:xlink="http://www.w3.org/1999/xlink" ','version="1.1" ','width="',r,'" ','height="',o,'" ',s,'xml:space="preserve">\n',"<desc>Created with Fabric.js ",A.version,"</desc>\n","<defs>\n",this.createSVGFontFacesMarkup(),this.createSVGRefElementsMarkup(),this.createSVGClipPathMarkup(e),"</defs>\n")},createSVGClipPathMarkup:function(t){var e=this.clipPath;return e?(e.clipPathId="CLIPPATH_"+A.Object.__uid++,'<clipPath id="'+e.clipPathId+'" >\n'+this.clipPath.toClipPathSVG(t.reviver)+"</clipPath>\n"):""},createSVGRefElementsMarkup:function(){var t=this;return["background","overlay"].map((function(e){var i=t[e+"Color"];if(i&&i.toLive){var n=t[e+"Vpt"],r=t.viewportTransform,o={width:t.width/(n?r[0]:1),height:t.height/(n?r[3]:1)};return i.toSVG(o,{additionalTransform:n?A.util.matrixToSVG(r):""})}})).join("")},createSVGFontFacesMarkup:function(){var t,e,i,n,r,o,s,a,h="",c={},l=A.fontPaths,u=[];for(this._objects.forEach((function t(e){u.push(e),e._objects&&e._objects.forEach(t)})),s=0,a=u.length;s<a;s++)if(e=(t=u[s]).fontFamily,-1!==t.type.indexOf("text")&&!c[e]&&l[e]&&(c[e]=!0,t.styles))for(r in i=t.styles)for(o in n=i[r])!c[e=n[o].fontFamily]&&l[e]&&(c[e]=!0);for(var f in c)h+=["\t\t@font-face {\n","\t\t\tfont-family: '",f,"';\n","\t\t\tsrc: url('",l[f],"');\n","\t\t}\n"].join("");return h&&(h=['\t<style type="text/css">',"<![CDATA[\n",h,"]]>","</style>\n"].join("")),h},_setSVGObjects:function(t,e){var i,n,r,o=this._objects;for(n=0,r=o.length;n<r;n++)(i=o[n]).excludeFromExport||this._setSVGObject(t,i,e)},_setSVGObject:function(t,e,i){t.push(e.toSVG(i))},_setSVGBgOverlayImage:function(t,e,i){this[e]&&!this[e].excludeFromExport&&this[e].toSVG&&t.push(this[e].toSVG(i))},_setSVGBgOverlayColor:function(t,e){var i=this[e+"Color"],n=this.viewportTransform,r=this.width,o=this.height;if(i)if(i.toLive){var s=i.repeat,a=A.util.invertTransform(n),h=this[e+"Vpt"]?A.util.matrixToSVG(a):"";t.push('<rect transform="'+h+" translate(",r/2,",",o/2,')"',' x="',i.offsetX-r/2,'" y="',i.offsetY-o/2,'" ','width="',"repeat-y"===s||"no-repeat"===s?i.source.width:r,'" height="',"repeat-x"===s||"no-repeat"===s?i.source.height:o,'" fill="url(#SVGID_'+i.id+')"',"></rect>\n")}else t.push('<rect x="0" y="0" width="100%" height="100%" ','fill="',i,'"',"></rect>\n")},sendToBack:function(t){if(!t)return this;var e,n,r,o=this._activeObject;if(t===o&&"activeSelection"===t.type)for(e=(r=o._objects).length;e--;)n=r[e],i(this._objects,n),this._objects.unshift(n);else i(this._objects,t),this._objects.unshift(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},bringToFront:function(t){if(!t)return this;var e,n,r,o=this._activeObject;if(t===o&&"activeSelection"===t.type)for(r=o._objects,e=0;e<r.length;e++)n=r[e],i(this._objects,n),this._objects.push(n);else i(this._objects,t),this._objects.push(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},sendBackwards:function(t,e){if(!t)return this;var n,r,o,s,a,h=this._activeObject,c=0;if(t===h&&"activeSelection"===t.type)for(a=h._objects,n=0;n<a.length;n++)r=a[n],(o=this._objects.indexOf(r))>0+c&&(s=o-1,i(this._objects,r),this._objects.splice(s,0,r)),c++;else 0!==(o=this._objects.indexOf(t))&&(s=this._findNewLowerIndex(t,o,e),i(this._objects,t),this._objects.splice(s,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewLowerIndex:function(t,e,i){var n,r;if(i){for(n=e,r=e-1;r>=0;--r)if(t.intersectsWithObject(this._objects[r])||t.isContainedWithinObject(this._objects[r])||this._objects[r].isContainedWithinObject(t)){n=r;break}}else n=e-1;return n},bringForward:function(t,e){if(!t)return this;var n,r,o,s,a,h=this._activeObject,c=0;if(t===h&&"activeSelection"===t.type)for(n=(a=h._objects).length;n--;)r=a[n],(o=this._objects.indexOf(r))<this._objects.length-1-c&&(s=o+1,i(this._objects,r),this._objects.splice(s,0,r)),c++;else(o=this._objects.indexOf(t))!==this._objects.length-1&&(s=this._findNewUpperIndex(t,o,e),i(this._objects,t),this._objects.splice(s,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewUpperIndex:function(t,e,i){var n,r,o;if(i){for(n=e,r=e+1,o=this._objects.length;r<o;++r)if(t.intersectsWithObject(this._objects[r])||t.isContainedWithinObject(this._objects[r])||this._objects[r].isContainedWithinObject(t)){n=r;break}}else n=e+1;return n},moveTo:function(t,e){return i(this._objects,t),this._objects.splice(e,0,t),this.renderOnAddRemove&&this.requestRenderAll()},dispose:function(){return this.isRendering&&(A.util.cancelAnimFrame(this.isRendering),this.isRendering=0),this.forEachObject((function(t){t.dispose&&t.dispose()})),this._objects=[],this.backgroundImage&&this.backgroundImage.dispose&&this.backgroundImage.dispose(),this.backgroundImage=null,this.overlayImage&&this.overlayImage.dispose&&this.overlayImage.dispose(),this.overlayImage=null,this._iTextInstances=null,this.contextContainer=null,this.lowerCanvasEl.classList.remove("lower-canvas"),A.util.setStyle(this.lowerCanvasEl,this._originalCanvasStyle),delete this._originalCanvasStyle,this.lowerCanvasEl.setAttribute("width",this.width),this.lowerCanvasEl.setAttribute("height",this.height),A.util.cleanUpJsdomNode(this.lowerCanvasEl),this.lowerCanvasEl=void 0,this},toString:function(){return"#<fabric.Canvas ("+this.complexity()+"): { objects: "+this._objects.length+" }>"}}),t(A.StaticCanvas.prototype,A.Observable),t(A.StaticCanvas.prototype,A.Collection),t(A.StaticCanvas.prototype,A.DataURLExporter),t(A.StaticCanvas,{EMPTY_JSON:'{"objects": [], "background": "white"}',supports:function(t){var e=a();if(!e||!e.getContext)return null;var i=e.getContext("2d");return i&&"setLineDash"===t?void 0!==i.setLineDash:null}}),A.StaticCanvas.prototype.toJSON=A.StaticCanvas.prototype.toObject,A.isLikelyNode&&(A.StaticCanvas.prototype.createPNGStream=function(){var t=s(this.lowerCanvasEl);return t&&t.createPNGStream()},A.StaticCanvas.prototype.createJPEGStream=function(t){var e=s(this.lowerCanvasEl);return e&&e.createJPEGStream(t)})}}(),A.BaseBrush=A.util.createClass({color:"rgb(0, 0, 0)",width:1,shadow:null,strokeLineCap:"round",strokeLineJoin:"round",strokeMiterLimit:10,strokeDashArray:null,limitedToCanvasSize:!1,_setBrushStyles:function(t){t.strokeStyle=this.color,t.lineWidth=this.width,t.lineCap=this.strokeLineCap,t.miterLimit=this.strokeMiterLimit,t.lineJoin=this.strokeLineJoin,t.setLineDash(this.strokeDashArray||[])},_saveAndTransform:function(t){var e=this.canvas.viewportTransform;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5])},_setShadow:function(){if(this.shadow){var t=this.canvas,e=this.shadow,i=t.contextTop,n=t.getZoom();t&&t._isRetinaScaling()&&(n*=A.devicePixelRatio),i.shadowColor=e.color,i.shadowBlur=e.blur*n,i.shadowOffsetX=e.offsetX*n,i.shadowOffsetY=e.offsetY*n}},needsFullRender:function(){return new A.Color(this.color).getAlpha()<1||!!this.shadow},_resetShadow:function(){var t=this.canvas.contextTop;t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0},_isOutSideCanvas:function(t){return t.x<0||t.x>this.canvas.getWidth()||t.y<0||t.y>this.canvas.getHeight()}}),A.PencilBrush=A.util.createClass(A.BaseBrush,{decimate:.4,drawStraightLine:!1,straightLineKey:"shiftKey",initialize:function(t){this.canvas=t,this._points=[]},needsFullRender:function(){return this.callSuper("needsFullRender")||this._hasStraightLine},_drawSegment:function(t,e,i){var n=e.midPointFrom(i);return t.quadraticCurveTo(e.x,e.y,n.x,n.y),n},onMouseDown:function(t,e){this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],this._prepareForDrawing(t),this._captureDrawingPath(t),this._render())},onMouseMove:function(t,e){if(this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],(!0!==this.limitedToCanvasSize||!this._isOutSideCanvas(t))&&this._captureDrawingPath(t)&&this._points.length>1))if(this.needsFullRender())this.canvas.clearContext(this.canvas.contextTop),this._render();else{var i=this._points,n=i.length,r=this.canvas.contextTop;this._saveAndTransform(r),this.oldEnd&&(r.beginPath(),r.moveTo(this.oldEnd.x,this.oldEnd.y)),this.oldEnd=this._drawSegment(r,i[n-2],i[n-1],!0),r.stroke(),r.restore()}},onMouseUp:function(t){return!this.canvas._isMainEvent(t.e)||(this.drawStraightLine=!1,this.oldEnd=void 0,this._finalizeAndAddPath(),!1)},_prepareForDrawing:function(t){var e=new A.Point(t.x,t.y);this._reset(),this._addPoint(e),this.canvas.contextTop.moveTo(e.x,e.y)},_addPoint:function(t){return!(this._points.length>1&&t.eq(this._points[this._points.length-1])||(this.drawStraightLine&&this._points.length>1&&(this._hasStraightLine=!0,this._points.pop()),this._points.push(t),0))},_reset:function(){this._points=[],this._setBrushStyles(this.canvas.contextTop),this._setShadow(),this._hasStraightLine=!1},_captureDrawingPath:function(t){var e=new A.Point(t.x,t.y);return this._addPoint(e)},_render:function(t){var e,i,n=this._points[0],r=this._points[1];if(t=t||this.canvas.contextTop,this._saveAndTransform(t),t.beginPath(),2===this._points.length&&n.x===r.x&&n.y===r.y){var o=this.width/1e3;n=new A.Point(n.x,n.y),r=new A.Point(r.x,r.y),n.x-=o,r.x+=o}for(t.moveTo(n.x,n.y),e=1,i=this._points.length;e<i;e++)this._drawSegment(t,n,r),n=this._points[e],r=this._points[e+1];t.lineTo(n.x,n.y),t.stroke(),t.restore()},convertPointsToSVGPath:function(t){var e=this.width/1e3;return A.util.getSmoothPathFromPoints(t,e)},_isEmptySVGPath:function(t){return"M 0 0 Q 0 0 0 0 L 0 0"===A.util.joinPath(t)},createPath:function(t){var e=new A.Path(t,{fill:null,stroke:this.color,strokeWidth:this.width,strokeLineCap:this.strokeLineCap,strokeMiterLimit:this.strokeMiterLimit,strokeLineJoin:this.strokeLineJoin,strokeDashArray:this.strokeDashArray});return this.shadow&&(this.shadow.affectStroke=!0,e.shadow=new A.Shadow(this.shadow)),e},decimatePoints:function(t,e){if(t.length<=2)return t;var i,n=this.canvas.getZoom(),r=Math.pow(e/n,2),o=t.length-1,s=t[0],a=[s];for(i=1;i<o-1;i++)Math.pow(s.x-t[i].x,2)+Math.pow(s.y-t[i].y,2)>=r&&(s=t[i],a.push(s));return a.push(t[o]),a},_finalizeAndAddPath:function(){this.canvas.contextTop.closePath(),this.decimate&&(this._points=this.decimatePoints(this._points,this.decimate));var t=this.convertPointsToSVGPath(this._points);if(this._isEmptySVGPath(t))this.canvas.requestRenderAll();else{var e=this.createPath(t);this.canvas.clearContext(this.canvas.contextTop),this.canvas.fire("before:path:created",{path:e}),this.canvas.add(e),this.canvas.requestRenderAll(),e.setCoords(),this._resetShadow(),this.canvas.fire("path:created",{path:e})}}}),A.CircleBrush=A.util.createClass(A.BaseBrush,{width:10,initialize:function(t){this.canvas=t,this.points=[]},drawDot:function(t){var e=this.addPoint(t),i=this.canvas.contextTop;this._saveAndTransform(i),this.dot(i,e),i.restore()},dot:function(t,e){t.fillStyle=e.fill,t.beginPath(),t.arc(e.x,e.y,e.radius,0,2*Math.PI,!1),t.closePath(),t.fill()},onMouseDown:function(t){this.points.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.drawDot(t)},_render:function(){var t,e,i=this.canvas.contextTop,n=this.points;for(this._saveAndTransform(i),t=0,e=n.length;t<e;t++)this.dot(i,n[t]);i.restore()},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.needsFullRender()?(this.canvas.clearContext(this.canvas.contextTop),this.addPoint(t),this._render()):this.drawDot(t))},onMouseUp:function(){var t,e,i=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;var n=[];for(t=0,e=this.points.length;t<e;t++){var r=this.points[t],o=new A.Circle({radius:r.radius,left:r.x,top:r.y,originX:"center",originY:"center",fill:r.fill});this.shadow&&(o.shadow=new A.Shadow(this.shadow)),n.push(o)}var s=new A.Group(n);s.canvas=this.canvas,this.canvas.fire("before:path:created",{path:s}),this.canvas.add(s),this.canvas.fire("path:created",{path:s}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=i,this.canvas.requestRenderAll()},addPoint:function(t){var e=new A.Point(t.x,t.y),i=A.util.getRandomInt(Math.max(0,this.width-20),this.width+20)/2,n=new A.Color(this.color).setAlpha(A.util.getRandomInt(0,100)/100).toRgba();return e.radius=i,e.fill=n,this.points.push(e),e}}),A.SprayBrush=A.util.createClass(A.BaseBrush,{width:10,density:20,dotWidth:1,dotWidthVariance:1,randomOpacity:!1,optimizeOverlapping:!0,initialize:function(t){this.canvas=t,this.sprayChunks=[]},onMouseDown:function(t){this.sprayChunks.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.addSprayChunk(t),this.render(this.sprayChunkPoints)},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.addSprayChunk(t),this.render(this.sprayChunkPoints))},onMouseUp:function(){var t=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;for(var e=[],i=0,n=this.sprayChunks.length;i<n;i++)for(var r=this.sprayChunks[i],o=0,s=r.length;o<s;o++){var a=new A.Rect({width:r[o].width,height:r[o].width,left:r[o].x+1,top:r[o].y+1,originX:"center",originY:"center",fill:this.color});e.push(a)}this.optimizeOverlapping&&(e=this._getOptimizedRects(e));var h=new A.Group(e);this.shadow&&h.set("shadow",new A.Shadow(this.shadow)),this.canvas.fire("before:path:created",{path:h}),this.canvas.add(h),this.canvas.fire("path:created",{path:h}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=t,this.canvas.requestRenderAll()},_getOptimizedRects:function(t){var e,i,n,r={};for(i=0,n=t.length;i<n;i++)r[e=t[i].left+""+t[i].top]||(r[e]=t[i]);var o=[];for(e in r)o.push(r[e]);return o},render:function(t){var e,i,n=this.canvas.contextTop;for(n.fillStyle=this.color,this._saveAndTransform(n),e=0,i=t.length;e<i;e++){var r=t[e];void 0!==r.opacity&&(n.globalAlpha=r.opacity),n.fillRect(r.x,r.y,r.width,r.width)}n.restore()},_render:function(){var t,e,i=this.canvas.contextTop;for(i.fillStyle=this.color,this._saveAndTransform(i),t=0,e=this.sprayChunks.length;t<e;t++)this.render(this.sprayChunks[t]);i.restore()},addSprayChunk:function(t){this.sprayChunkPoints=[];var e,i,n,r,o=this.width/2;for(r=0;r<this.density;r++){e=A.util.getRandomInt(t.x-o,t.x+o),i=A.util.getRandomInt(t.y-o,t.y+o),n=this.dotWidthVariance?A.util.getRandomInt(Math.max(1,this.dotWidth-this.dotWidthVariance),this.dotWidth+this.dotWidthVariance):this.dotWidth;var s=new A.Point(e,i);s.width=n,this.randomOpacity&&(s.opacity=A.util.getRandomInt(0,100)/100),this.sprayChunkPoints.push(s)}this.sprayChunks.push(this.sprayChunkPoints)}}),A.PatternBrush=A.util.createClass(A.PencilBrush,{getPatternSrc:function(){var t=A.util.createCanvasElement(),e=t.getContext("2d");return t.width=t.height=25,e.fillStyle=this.color,e.beginPath(),e.arc(10,10,10,0,2*Math.PI,!1),e.closePath(),e.fill(),t},getPatternSrcFunction:function(){return String(this.getPatternSrc).replace("this.color",'"'+this.color+'"')},getPattern:function(t){return t.createPattern(this.source||this.getPatternSrc(),"repeat")},_setBrushStyles:function(t){this.callSuper("_setBrushStyles",t),t.strokeStyle=this.getPattern(t)},createPath:function(t){var e=this.callSuper("createPath",t),i=e._getLeftTopCoords().scalarAdd(e.strokeWidth/2);return e.stroke=new A.Pattern({source:this.source||this.getPatternSrcFunction(),offsetX:-i.x,offsetY:-i.y}),e}}),function(){var t=A.util.getPointer,e=A.util.degreesToRadians,i=A.util.isTouchEvent;for(var n in A.Canvas=A.util.createClass(A.StaticCanvas,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e),this._initInteractive(),this._createCacheCanvas()},uniformScaling:!0,uniScaleKey:"shiftKey",centeredScaling:!1,centeredRotation:!1,centeredKey:"altKey",altActionKey:"shiftKey",interactive:!0,selection:!0,selectionKey:"shiftKey",altSelectionKey:null,selectionColor:"rgba(100, 100, 255, 0.3)",selectionDashArray:[],selectionBorderColor:"rgba(255, 255, 255, 0.3)",selectionLineWidth:1,selectionFullyContained:!1,hoverCursor:"move",moveCursor:"move",defaultCursor:"default",freeDrawingCursor:"crosshair",notAllowedCursor:"not-allowed",containerClass:"canvas-container",perPixelTargetFind:!1,targetFindTolerance:0,skipTargetFind:!1,isDrawingMode:!1,preserveObjectStacking:!1,snapAngle:0,snapThreshold:null,stopContextMenu:!1,fireRightClick:!1,fireMiddleClick:!1,targets:[],enablePointerEvents:!1,_hoveredTarget:null,_hoveredTargets:[],_initInteractive:function(){this._currentTransform=null,this._groupSelector=null,this._initWrapperElement(),this._createUpperCanvas(),this._initEventListeners(),this._initRetinaScaling(),this.freeDrawingBrush=A.PencilBrush&&new A.PencilBrush(this),this.calcOffset()},_chooseObjectsToRender:function(){var t,e,i,n=this.getActiveObjects();if(n.length>0&&!this.preserveObjectStacking){e=[],i=[];for(var r=0,o=this._objects.length;r<o;r++)t=this._objects[r],-1===n.indexOf(t)?e.push(t):i.push(t);n.length>1&&(this._activeObject._objects=i),e.push.apply(e,i)}else e=this._objects;return e},renderAll:function(){!this.contextTopDirty||this._groupSelector||this.isDrawingMode||(this.clearContext(this.contextTop),this.contextTopDirty=!1),this.hasLostContext&&(this.renderTopLayer(this.contextTop),this.hasLostContext=!1);var t=this.contextContainer;return this.renderCanvas(t,this._chooseObjectsToRender()),this},renderTopLayer:function(t){t.save(),this.isDrawingMode&&this._isCurrentlyDrawing&&(this.freeDrawingBrush&&this.freeDrawingBrush._render(),this.contextTopDirty=!0),this.selection&&this._groupSelector&&(this._drawSelection(t),this.contextTopDirty=!0),t.restore()},renderTop:function(){var t=this.contextTop;return this.clearContext(t),this.renderTopLayer(t),this.fire("after:render"),this},_normalizePointer:function(t,e){var i=t.calcTransformMatrix(),n=A.util.invertTransform(i),r=this.restorePointerVpt(e);return A.util.transformPoint(r,n)},isTargetTransparent:function(t,e,i){if(t.shouldCache()&&t._cacheCanvas&&t!==this._activeObject){var n=this._normalizePointer(t,{x:e,y:i}),r=Math.max(t.cacheTranslationX+n.x*t.zoomX,0),o=Math.max(t.cacheTranslationY+n.y*t.zoomY,0);return A.util.isTransparent(t._cacheContext,Math.round(r),Math.round(o),this.targetFindTolerance)}var s=this.contextCache,a=t.selectionBackgroundColor,h=this.viewportTransform;return t.selectionBackgroundColor="",this.clearContext(s),s.save(),s.transform(h[0],h[1],h[2],h[3],h[4],h[5]),t.render(s),s.restore(),t.selectionBackgroundColor=a,A.util.isTransparent(s,e,i,this.targetFindTolerance)},_isSelectionKeyPressed:function(t){return Array.isArray(this.selectionKey)?!!this.selectionKey.find((function(e){return!0===t[e]})):t[this.selectionKey]},_shouldClearSelection:function(t,e){var i=this.getActiveObjects(),n=this._activeObject;return!e||e&&n&&i.length>1&&-1===i.indexOf(e)&&n!==e&&!this._isSelectionKeyPressed(t)||e&&!e.evented||e&&!e.selectable&&n&&n!==e},_shouldCenterTransform:function(t,e,i){var n;if(t)return"scale"===e||"scaleX"===e||"scaleY"===e||"resizing"===e?n=this.centeredScaling||t.centeredScaling:"rotate"===e&&(n=this.centeredRotation||t.centeredRotation),n?!i:i},_getOriginFromCorner:function(t,e){var i={x:t.originX,y:t.originY};return"ml"===e||"tl"===e||"bl"===e?i.x="right":"mr"!==e&&"tr"!==e&&"br"!==e||(i.x="left"),"tl"===e||"mt"===e||"tr"===e?i.y="bottom":"bl"!==e&&"mb"!==e&&"br"!==e||(i.y="top"),i},_getActionFromCorner:function(t,e,i,n){if(!e||!t)return"drag";var r=n.controls[e];return r.getActionName(i,r,n)},_setupCurrentTransform:function(t,i,n){if(i){var r=this.getPointer(t),o=i.__corner,s=i.controls[o],a=n&&o?s.getActionHandler(t,i,s):A.controlsUtils.dragHandler,h=this._getActionFromCorner(n,o,t,i),c=this._getOriginFromCorner(i,o),l=t[this.centeredKey],u={target:i,action:h,actionHandler:a,corner:o,scaleX:i.scaleX,scaleY:i.scaleY,skewX:i.skewX,skewY:i.skewY,offsetX:r.x-i.left,offsetY:r.y-i.top,originX:c.x,originY:c.y,ex:r.x,ey:r.y,lastX:r.x,lastY:r.y,theta:e(i.angle),width:i.width*i.scaleX,shiftKey:t.shiftKey,altKey:l,original:A.util.saveObjectTransform(i)};this._shouldCenterTransform(i,h,l)&&(u.originX="center",u.originY="center"),u.original.originX=c.x,u.original.originY=c.y,this._currentTransform=u,this._beforeTransform(t)}},setCursor:function(t){this.upperCanvasEl.style.cursor=t},_drawSelection:function(t){var e=this._groupSelector,i=new A.Point(e.ex,e.ey),n=A.util.transformPoint(i,this.viewportTransform),r=new A.Point(e.ex+e.left,e.ey+e.top),o=A.util.transformPoint(r,this.viewportTransform),s=Math.min(n.x,o.x),a=Math.min(n.y,o.y),h=Math.max(n.x,o.x),c=Math.max(n.y,o.y),l=this.selectionLineWidth/2;this.selectionColor&&(t.fillStyle=this.selectionColor,t.fillRect(s,a,h-s,c-a)),this.selectionLineWidth&&this.selectionBorderColor&&(t.lineWidth=this.selectionLineWidth,t.strokeStyle=this.selectionBorderColor,s+=l,a+=l,h-=l,c-=l,A.Object.prototype._setLineDash.call(this,t,this.selectionDashArray),t.strokeRect(s,a,h-s,c-a))},findTarget:function(t,e){if(!this.skipTargetFind){var n,r,o=this.getPointer(t,!0),s=this._activeObject,a=this.getActiveObjects(),h=i(t),c=a.length>1&&!e||1===a.length;if(this.targets=[],c&&s._findTargetCorner(o,h))return s;if(a.length>1&&!e&&s===this._searchPossibleTargets([s],o))return s;if(1===a.length&&s===this._searchPossibleTargets([s],o)){if(!this.preserveObjectStacking)return s;n=s,r=this.targets,this.targets=[]}var l=this._searchPossibleTargets(this._objects,o);return t[this.altSelectionKey]&&l&&n&&l!==n&&(l=n,this.targets=r),l}},_checkTarget:function(t,e,i){if(e&&e.visible&&e.evented&&e.containsPoint(t)){if(!this.perPixelTargetFind&&!e.perPixelTargetFind||e.isEditing)return!0;if(!this.isTargetTransparent(e,i.x,i.y))return!0}},_searchPossibleTargets:function(t,e){for(var i,n,r=t.length;r--;){var o=t[r],s=o.group?this._normalizePointer(o.group,e):e;if(this._checkTarget(s,o,e)){(i=t[r]).subTargetCheck&&i instanceof A.Group&&(n=this._searchPossibleTargets(i._objects,e))&&this.targets.push(n);break}}return i},restorePointerVpt:function(t){return A.util.transformPoint(t,A.util.invertTransform(this.viewportTransform))},getPointer:function(e,i){if(this._absolutePointer&&!i)return this._absolutePointer;if(this._pointer&&i)return this._pointer;var n,r=t(e),o=this.upperCanvasEl,s=o.getBoundingClientRect(),a=s.width||0,h=s.height||0;a&&h||("top"in s&&"bottom"in s&&(h=Math.abs(s.top-s.bottom)),"right"in s&&"left"in s&&(a=Math.abs(s.right-s.left))),this.calcOffset(),r.x=r.x-this._offset.left,r.y=r.y-this._offset.top,i||(r=this.restorePointerVpt(r));var c=this.getRetinaScaling();return 1!==c&&(r.x/=c,r.y/=c),n=0===a||0===h?{width:1,height:1}:{width:o.width/a,height:o.height/h},{x:r.x*n.width,y:r.y*n.height}},_createUpperCanvas:function(){var t=this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/,""),e=this.lowerCanvasEl,i=this.upperCanvasEl;i?i.className="":(i=this._createCanvasElement(),this.upperCanvasEl=i),A.util.addClass(i,"upper-canvas "+t),this.wrapperEl.appendChild(i),this._copyCanvasStyle(e,i),this._applyCanvasStyle(i),this.contextTop=i.getContext("2d")},getTopContext:function(){return this.contextTop},_createCacheCanvas:function(){this.cacheCanvasEl=this._createCanvasElement(),this.cacheCanvasEl.setAttribute("width",this.width),this.cacheCanvasEl.setAttribute("height",this.height),this.contextCache=this.cacheCanvasEl.getContext("2d")},_initWrapperElement:function(){this.wrapperEl=A.util.wrapElement(this.lowerCanvasEl,"div",{class:this.containerClass}),A.util.setStyle(this.wrapperEl,{width:this.width+"px",height:this.height+"px",position:"relative"}),A.util.makeElementUnselectable(this.wrapperEl)},_applyCanvasStyle:function(t){var e=this.width||t.width,i=this.height||t.height;A.util.setStyle(t,{position:"absolute",width:e+"px",height:i+"px",left:0,top:0,"touch-action":this.allowTouchScrolling?"manipulation":"none","-ms-touch-action":this.allowTouchScrolling?"manipulation":"none"}),t.width=e,t.height=i,A.util.makeElementUnselectable(t)},_copyCanvasStyle:function(t,e){e.style.cssText=t.style.cssText},getSelectionContext:function(){return this.contextTop},getSelectionElement:function(){return this.upperCanvasEl},getActiveObject:function(){return this._activeObject},getActiveObjects:function(){var t=this._activeObject;return t?"activeSelection"===t.type&&t._objects?t._objects.slice(0):[t]:[]},_onObjectRemoved:function(t){t===this._activeObject&&(this.fire("before:selection:cleared",{target:t}),this._discardActiveObject(),this.fire("selection:cleared",{target:t}),t.fire("deselected")),t===this._hoveredTarget&&(this._hoveredTarget=null,this._hoveredTargets=[]),this.callSuper("_onObjectRemoved",t)},_fireSelectionEvents:function(t,e){var i=!1,n=this.getActiveObjects(),r=[],o=[];t.forEach((function(t){-1===n.indexOf(t)&&(i=!0,t.fire("deselected",{e,target:t}),o.push(t))})),n.forEach((function(n){-1===t.indexOf(n)&&(i=!0,n.fire("selected",{e,target:n}),r.push(n))})),t.length>0&&n.length>0?i&&this.fire("selection:updated",{e,selected:r,deselected:o}):n.length>0?this.fire("selection:created",{e,selected:r}):t.length>0&&this.fire("selection:cleared",{e,deselected:o})},setActiveObject:function(t,e){var i=this.getActiveObjects();return this._setActiveObject(t,e),this._fireSelectionEvents(i,e),this},_setActiveObject:function(t,e){return this._activeObject!==t&&!!this._discardActiveObject(e,t)&&!t.onSelect({e})&&(this._activeObject=t,!0)},_discardActiveObject:function(t,e){var i=this._activeObject;if(i){if(i.onDeselect({e:t,object:e}))return!1;this._activeObject=null}return!0},discardActiveObject:function(t){var e=this.getActiveObjects(),i=this.getActiveObject();return e.length&&this.fire("before:selection:cleared",{target:i,e:t}),this._discardActiveObject(t),this._fireSelectionEvents(e,t),this},dispose:function(){var t=this.wrapperEl;return this.removeListeners(),t.removeChild(this.upperCanvasEl),t.removeChild(this.lowerCanvasEl),this.contextCache=null,this.contextTop=null,["upperCanvasEl","cacheCanvasEl"].forEach(function(t){A.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this)),t.parentNode&&t.parentNode.replaceChild(this.lowerCanvasEl,this.wrapperEl),delete this.wrapperEl,A.StaticCanvas.prototype.dispose.call(this),this},clear:function(){return this.discardActiveObject(),this.clearContext(this.contextTop),this.callSuper("clear")},drawControls:function(t){var e=this._activeObject;e&&e._renderControls(t)},_toObject:function(t,e,i){var n=this._realizeGroupTransformOnObject(t),r=this.callSuper("_toObject",t,e,i);return this._unwindGroupTransformOnObject(t,n),r},_realizeGroupTransformOnObject:function(t){if(t.group&&"activeSelection"===t.group.type&&this._activeObject===t.group){var e={};return["angle","flipX","flipY","left","scaleX","scaleY","skewX","skewY","top"].forEach((function(i){e[i]=t[i]})),A.util.addTransformToObject(t,this._activeObject.calcOwnMatrix()),e}return null},_unwindGroupTransformOnObject:function(t,e){e&&t.set(e)},_setSVGObject:function(t,e,i){var n=this._realizeGroupTransformOnObject(e);this.callSuper("_setSVGObject",t,e,i),this._unwindGroupTransformOnObject(e,n)},setViewportTransform:function(t){this.renderOnAddRemove&&this._activeObject&&this._activeObject.isEditing&&this._activeObject.clearContextTop(),A.StaticCanvas.prototype.setViewportTransform.call(this,t)}}),A.StaticCanvas)"prototype"!==n&&(A.Canvas[n]=A.StaticCanvas[n])}(),function(){var t=A.util.addListener,e=A.util.removeListener,i={passive:!1};function n(t,e){return t.button&&t.button===e-1}A.util.object.extend(A.Canvas.prototype,{mainTouchId:null,_initEventListeners:function(){this.removeListeners(),this._bindEvents(),this.addOrRemove(t,"add")},_getEventPrefix:function(){return this.enablePointerEvents?"pointer":"mouse"},addOrRemove:function(t,e){var n=this.upperCanvasEl,r=this._getEventPrefix();t(A.window,"resize",this._onResize),t(n,r+"down",this._onMouseDown),t(n,r+"move",this._onMouseMove,i),t(n,r+"out",this._onMouseOut),t(n,r+"enter",this._onMouseEnter),t(n,"wheel",this._onMouseWheel),t(n,"contextmenu",this._onContextMenu),t(n,"dblclick",this._onDoubleClick),t(n,"dragover",this._onDragOver),t(n,"dragenter",this._onDragEnter),t(n,"dragleave",this._onDragLeave),t(n,"drop",this._onDrop),this.enablePointerEvents||t(n,"touchstart",this._onTouchStart,i),"undefined"!=typeof eventjs&&e in eventjs&&(eventjs[e](n,"gesture",this._onGesture),eventjs[e](n,"drag",this._onDrag),eventjs[e](n,"orientation",this._onOrientationChange),eventjs[e](n,"shake",this._onShake),eventjs[e](n,"longpress",this._onLongPress))},removeListeners:function(){this.addOrRemove(e,"remove");var t=this._getEventPrefix();e(A.document,t+"up",this._onMouseUp),e(A.document,"touchend",this._onTouchEnd,i),e(A.document,t+"move",this._onMouseMove,i),e(A.document,"touchmove",this._onMouseMove,i)},_bindEvents:function(){this.eventsBound||(this._onMouseDown=this._onMouseDown.bind(this),this._onTouchStart=this._onTouchStart.bind(this),this._onMouseMove=this._onMouseMove.bind(this),this._onMouseUp=this._onMouseUp.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onResize=this._onResize.bind(this),this._onGesture=this._onGesture.bind(this),this._onDrag=this._onDrag.bind(this),this._onShake=this._onShake.bind(this),this._onLongPress=this._onLongPress.bind(this),this._onOrientationChange=this._onOrientationChange.bind(this),this._onMouseWheel=this._onMouseWheel.bind(this),this._onMouseOut=this._onMouseOut.bind(this),this._onMouseEnter=this._onMouseEnter.bind(this),this._onContextMenu=this._onContextMenu.bind(this),this._onDoubleClick=this._onDoubleClick.bind(this),this._onDragOver=this._onDragOver.bind(this),this._onDragEnter=this._simpleEventHandler.bind(this,"dragenter"),this._onDragLeave=this._simpleEventHandler.bind(this,"dragleave"),this._onDrop=this._onDrop.bind(this),this.eventsBound=!0)},_onGesture:function(t,e){this.__onTransformGesture&&this.__onTransformGesture(t,e)},_onDrag:function(t,e){this.__onDrag&&this.__onDrag(t,e)},_onMouseWheel:function(t){this.__onMouseWheel(t)},_onMouseOut:function(t){var e=this._hoveredTarget;this.fire("mouse:out",{target:e,e:t}),this._hoveredTarget=null,e&&e.fire("mouseout",{e:t});var i=this;this._hoveredTargets.forEach((function(n){i.fire("mouse:out",{target:e,e:t}),n&&e.fire("mouseout",{e:t})})),this._hoveredTargets=[],this._iTextInstances&&this._iTextInstances.forEach((function(t){t.isEditing&&t.hiddenTextarea.focus()}))},_onMouseEnter:function(t){this._currentTransform||this.findTarget(t)||(this.fire("mouse:over",{target:null,e:t}),this._hoveredTarget=null,this._hoveredTargets=[])},_onOrientationChange:function(t,e){this.__onOrientationChange&&this.__onOrientationChange(t,e)},_onShake:function(t,e){this.__onShake&&this.__onShake(t,e)},_onLongPress:function(t,e){this.__onLongPress&&this.__onLongPress(t,e)},_onDragOver:function(t){t.preventDefault();var e=this._simpleEventHandler("dragover",t);this._fireEnterLeaveEvents(e,t)},_onDrop:function(t){return this._simpleEventHandler("drop:before",t),this._simpleEventHandler("drop",t)},_onContextMenu:function(t){return this.stopContextMenu&&(t.stopPropagation(),t.preventDefault()),!1},_onDoubleClick:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"dblclick"),this._resetTransformEventData(t)},getPointerId:function(t){var e=t.changedTouches;return e?e[0]&&e[0].identifier:this.enablePointerEvents?t.pointerId:-1},_isMainEvent:function(t){return!0===t.isPrimary||!1!==t.isPrimary&&("touchend"===t.type&&0===t.touches.length||!t.changedTouches||t.changedTouches[0].identifier===this.mainTouchId)},_onTouchStart:function(n){n.preventDefault(),null===this.mainTouchId&&(this.mainTouchId=this.getPointerId(n)),this.__onMouseDown(n),this._resetTransformEventData();var r=this.upperCanvasEl,o=this._getEventPrefix();t(A.document,"touchend",this._onTouchEnd,i),t(A.document,"touchmove",this._onMouseMove,i),e(r,o+"down",this._onMouseDown)},_onMouseDown:function(n){this.__onMouseDown(n),this._resetTransformEventData();var r=this.upperCanvasEl,o=this._getEventPrefix();e(r,o+"move",this._onMouseMove,i),t(A.document,o+"up",this._onMouseUp),t(A.document,o+"move",this._onMouseMove,i)},_onTouchEnd:function(n){if(!(n.touches.length>0)){this.__onMouseUp(n),this._resetTransformEventData(),this.mainTouchId=null;var r=this._getEventPrefix();e(A.document,"touchend",this._onTouchEnd,i),e(A.document,"touchmove",this._onMouseMove,i);var o=this;this._willAddMouseDown&&clearTimeout(this._willAddMouseDown),this._willAddMouseDown=setTimeout((function(){t(o.upperCanvasEl,r+"down",o._onMouseDown),o._willAddMouseDown=0}),400)}},_onMouseUp:function(n){this.__onMouseUp(n),this._resetTransformEventData();var r=this.upperCanvasEl,o=this._getEventPrefix();this._isMainEvent(n)&&(e(A.document,o+"up",this._onMouseUp),e(A.document,o+"move",this._onMouseMove,i),t(r,o+"move",this._onMouseMove,i))},_onMouseMove:function(t){!this.allowTouchScrolling&&t.preventDefault&&t.preventDefault(),this.__onMouseMove(t)},_onResize:function(){this.calcOffset()},_shouldRender:function(t){var e=this._activeObject;return!!(!!e!=!!t||e&&t&&e!==t)||(e&&e.isEditing,!1)},__onMouseUp:function(t){var e,i=this._currentTransform,r=this._groupSelector,o=!1,s=!r||0===r.left&&0===r.top;if(this._cacheTransformEventData(t),e=this._target,this._handleEvent(t,"up:before"),n(t,3))this.fireRightClick&&this._handleEvent(t,"up",3,s);else{if(n(t,2))return this.fireMiddleClick&&this._handleEvent(t,"up",2,s),void this._resetTransformEventData();if(this.isDrawingMode&&this._isCurrentlyDrawing)this._onMouseUpInDrawingMode(t);else if(this._isMainEvent(t)){if(i&&(this._finalizeCurrentTransform(t),o=i.actionPerformed),!s){var a=e===this._activeObject;this._maybeGroupObjects(t),o||(o=this._shouldRender(e)||!a&&e===this._activeObject)}var h,c;if(e){if(h=e._findTargetCorner(this.getPointer(t,!0),A.util.isTouchEvent(t)),e.selectable&&e!==this._activeObject&&"up"===e.activeOn)this.setActiveObject(e,t),o=!0;else{var l=e.controls[h],u=l&&l.getMouseUpHandler(t,e,l);u&&u(t,i,(c=this.getPointer(t)).x,c.y)}e.isMoving=!1}if(i&&(i.target!==e||i.corner!==h)){var f=i.target&&i.target.controls[i.corner],d=f&&f.getMouseUpHandler(t,e,l);c=c||this.getPointer(t),d&&d(t,i,c.x,c.y)}this._setCursorFromEvent(t,e),this._handleEvent(t,"up",1,s),this._groupSelector=null,this._currentTransform=null,e&&(e.__corner=0),o?this.requestRenderAll():s||this.renderTop()}}},_simpleEventHandler:function(t,e){var i=this.findTarget(e),n=this.targets,r={e,target:i,subTargets:n};if(this.fire(t,r),i&&i.fire(t,r),!n)return i;for(var o=0;o<n.length;o++)n[o].fire(t,r);return i},_handleEvent:function(t,e,i,n){var r=this._target,o=this.targets||[],s={e:t,target:r,subTargets:o,button:i||1,isClick:n||!1,pointer:this._pointer,absolutePointer:this._absolutePointer,transform:this._currentTransform};"up"===e&&(s.currentTarget=this.findTarget(t),s.currentSubTargets=this.targets),this.fire("mouse:"+e,s),r&&r.fire("mouse"+e,s);for(var a=0;a<o.length;a++)o[a].fire("mouse"+e,s)},_finalizeCurrentTransform:function(t){var e=this._currentTransform,i=e.target,n={e:t,target:i,transform:e,action:e.action};i._scaling&&(i._scaling=!1),i.setCoords(),(e.actionPerformed||this.stateful&&i.hasStateChanged())&&this._fire("modified",n)},_onMouseDownInDrawingMode:function(t){this._isCurrentlyDrawing=!0,this.getActiveObject()&&this.discardActiveObject(t).requestRenderAll();var e=this.getPointer(t);this.freeDrawingBrush.onMouseDown(e,{e:t,pointer:e}),this._handleEvent(t,"down")},_onMouseMoveInDrawingMode:function(t){if(this._isCurrentlyDrawing){var e=this.getPointer(t);this.freeDrawingBrush.onMouseMove(e,{e:t,pointer:e})}this.setCursor(this.freeDrawingCursor),this._handleEvent(t,"move")},_onMouseUpInDrawingMode:function(t){var e=this.getPointer(t);this._isCurrentlyDrawing=this.freeDrawingBrush.onMouseUp({e:t,pointer:e}),this._handleEvent(t,"up")},__onMouseDown:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"down:before");var e=this._target;if(n(t,3))this.fireRightClick&&this._handleEvent(t,"down",3);else if(n(t,2))this.fireMiddleClick&&this._handleEvent(t,"down",2);else if(this.isDrawingMode)this._onMouseDownInDrawingMode(t);else if(this._isMainEvent(t)&&!this._currentTransform){var i=this._pointer;this._previousPointer=i;var r=this._shouldRender(e),o=this._shouldGroup(t,e);if(this._shouldClearSelection(t,e)?this.discardActiveObject(t):o&&(this._handleGrouping(t,e),e=this._activeObject),!this.selection||e&&(e.selectable||e.isEditing||e===this._activeObject)||(this._groupSelector={ex:this._absolutePointer.x,ey:this._absolutePointer.y,top:0,left:0}),e){var s=e===this._activeObject;e.selectable&&"down"===e.activeOn&&this.setActiveObject(e,t);var a=e._findTargetCorner(this.getPointer(t,!0),A.util.isTouchEvent(t));if(e.__corner=a,e===this._activeObject&&(a||!o)){this._setupCurrentTransform(t,e,s);var h=e.controls[a],c=(i=this.getPointer(t),h&&h.getMouseDownHandler(t,e,h));c&&c(t,this._currentTransform,i.x,i.y)}}this._handleEvent(t,"down"),(r||o)&&this.requestRenderAll()}},_resetTransformEventData:function(){this._target=null,this._pointer=null,this._absolutePointer=null},_cacheTransformEventData:function(t){this._resetTransformEventData(),this._pointer=this.getPointer(t,!0),this._absolutePointer=this.restorePointerVpt(this._pointer),this._target=this._currentTransform?this._currentTransform.target:this.findTarget(t)||null},_beforeTransform:function(t){var e=this._currentTransform;this.stateful&&e.target.saveState(),this.fire("before:transform",{e:t,transform:e})},__onMouseMove:function(t){var e,i;if(this._handleEvent(t,"move:before"),this._cacheTransformEventData(t),this.isDrawingMode)this._onMouseMoveInDrawingMode(t);else if(this._isMainEvent(t)){var n=this._groupSelector;n?(i=this._absolutePointer,n.left=i.x-n.ex,n.top=i.y-n.ey,this.renderTop()):this._currentTransform?this._transformObject(t):(e=this.findTarget(t)||null,this._setCursorFromEvent(t,e),this._fireOverOutEvents(e,t)),this._handleEvent(t,"move"),this._resetTransformEventData()}},_fireOverOutEvents:function(t,e){var i=this._hoveredTarget,n=this._hoveredTargets,r=this.targets,o=Math.max(n.length,r.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"mouseout",canvasEvtOut:"mouse:out",evtIn:"mouseover",canvasEvtIn:"mouse:over"});for(var s=0;s<o;s++)this.fireSyntheticInOutEvents(r[s],e,{oldTarget:n[s],evtOut:"mouseout",evtIn:"mouseover"});this._hoveredTarget=t,this._hoveredTargets=this.targets.concat()},_fireEnterLeaveEvents:function(t,e){var i=this._draggedoverTarget,n=this._hoveredTargets,r=this.targets,o=Math.max(n.length,r.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:"dragleave",evtIn:"dragenter"});for(var s=0;s<o;s++)this.fireSyntheticInOutEvents(r[s],e,{oldTarget:n[s],evtOut:"dragleave",evtIn:"dragenter"});this._draggedoverTarget=t},fireSyntheticInOutEvents:function(t,e,i){var n,r,o,s=i.oldTarget,a=s!==t,h=i.canvasEvtIn,c=i.canvasEvtOut;a&&(n={e,target:t,previousTarget:s},r={e,target:s,nextTarget:t}),o=t&&a,s&&a&&(c&&this.fire(c,r),s.fire(i.evtOut,r)),o&&(h&&this.fire(h,n),t.fire(i.evtIn,n))},__onMouseWheel:function(t){this._cacheTransformEventData(t),this._handleEvent(t,"wheel"),this._resetTransformEventData()},_transformObject:function(t){var e=this.getPointer(t),i=this._currentTransform;i.reset=!1,i.shiftKey=t.shiftKey,i.altKey=t[this.centeredKey],this._performTransformAction(t,i,e),i.actionPerformed&&this.requestRenderAll()},_performTransformAction:function(t,e,i){var n=i.x,r=i.y,o=e.action,s=!1,a=e.actionHandler;a&&(s=a(t,e,n,r)),"drag"===o&&s&&(e.target.isMoving=!0,this.setCursor(e.target.moveCursor||this.moveCursor)),e.actionPerformed=e.actionPerformed||s},_fire:A.controlsUtils.fireEvent,_setCursorFromEvent:function(t,e){if(!e)return this.setCursor(this.defaultCursor),!1;var i=e.hoverCursor||this.hoverCursor,n=this._activeObject&&"activeSelection"===this._activeObject.type?this._activeObject:null,r=(!n||!n.contains(e))&&e._findTargetCorner(this.getPointer(t,!0));r?this.setCursor(this.getCornerCursor(r,e,t)):(e.subTargetCheck&&this.targets.concat().reverse().map((function(t){i=t.hoverCursor||i})),this.setCursor(i))},getCornerCursor:function(t,e,i){var n=e.controls[t];return n.cursorStyleHandler(i,n,e)}})}(),v=Math.min,b=Math.max,A.util.object.extend(A.Canvas.prototype,{_shouldGroup:function(t,e){var i=this._activeObject;return i&&this._isSelectionKeyPressed(t)&&e&&e.selectable&&this.selection&&(i!==e||"activeSelection"===i.type)&&!e.onSelect({e:t})},_handleGrouping:function(t,e){var i=this._activeObject;i.__corner||(e!==i||(e=this.findTarget(t,!0))&&e.selectable)&&(i&&"activeSelection"===i.type?this._updateActiveSelection(e,t):this._createActiveSelection(e,t))},_updateActiveSelection:function(t,e){var i=this._activeObject,n=i._objects.slice(0);i.contains(t)?(i.removeWithUpdate(t),this._hoveredTarget=t,this._hoveredTargets=this.targets.concat(),1===i.size()&&this._setActiveObject(i.item(0),e)):(i.addWithUpdate(t),this._hoveredTarget=i,this._hoveredTargets=this.targets.concat()),this._fireSelectionEvents(n,e)},_createActiveSelection:function(t,e){var i=this.getActiveObjects(),n=this._createGroup(t);this._hoveredTarget=n,this._setActiveObject(n,e),this._fireSelectionEvents(i,e)},_createGroup:function(t){var e=this._objects,i=e.indexOf(this._activeObject)<e.indexOf(t)?[this._activeObject,t]:[t,this._activeObject];return this._activeObject.isEditing&&this._activeObject.exitEditing(),new A.ActiveSelection(i,{canvas:this})},_groupSelectedObjects:function(t){var e,i=this._collectObjects(t);1===i.length?this.setActiveObject(i[0],t):i.length>1&&(e=new A.ActiveSelection(i.reverse(),{canvas:this}),this.setActiveObject(e,t))},_collectObjects:function(t){for(var e,i=[],n=this._groupSelector.ex,r=this._groupSelector.ey,o=n+this._groupSelector.left,s=r+this._groupSelector.top,a=new A.Point(v(n,o),v(r,s)),h=new A.Point(b(n,o),b(r,s)),c=!this.selectionFullyContained,l=n===o&&r===s,u=this._objects.length;u--&&!((e=this._objects[u])&&e.selectable&&e.visible&&(c&&e.intersectsWithRect(a,h,!0)||e.isContainedWithinRect(a,h,!0)||c&&e.containsPoint(a,null,!0)||c&&e.containsPoint(h,null,!0))&&(i.push(e),l)););return i.length>1&&(i=i.filter((function(e){return!e.onSelect({e:t})}))),i},_maybeGroupObjects:function(t){this.selection&&this._groupSelector&&this._groupSelectedObjects(t),this.setCursor(this.defaultCursor),this._groupSelector=null}}),A.util.object.extend(A.StaticCanvas.prototype,{toDataURL:function(t){t||(t={});var e=t.format||"png",i=t.quality||1,n=(t.multiplier||1)*(t.enableRetinaScaling?this.getRetinaScaling():1),r=this.toCanvasElement(n,t);return A.util.toDataURL(r,e,i)},toCanvasElement:function(t,e){t=t||1;var i=((e=e||{}).width||this.width)*t,n=(e.height||this.height)*t,r=this.getZoom(),o=this.width,s=this.height,a=r*t,h=this.viewportTransform,c=(h[4]-(e.left||0))*t,l=(h[5]-(e.top||0))*t,u=this.interactive,f=[a,0,0,a,c,l],d=this.enableRetinaScaling,p=A.util.createCanvasElement(),g=this.contextTop;return p.width=i,p.height=n,this.contextTop=null,this.enableRetinaScaling=!1,this.interactive=!1,this.viewportTransform=f,this.width=i,this.height=n,this.calcViewportBoundaries(),this.renderCanvas(p.getContext("2d"),this._objects),this.viewportTransform=h,this.width=o,this.height=s,this.calcViewportBoundaries(),this.interactive=u,this.enableRetinaScaling=d,this.contextTop=g,p}}),A.util.object.extend(A.StaticCanvas.prototype,{loadFromJSON:function(t,e,i){if(t){var n="string"==typeof t?JSON.parse(t):A.util.object.clone(t),r=this,o=n.clipPath,s=this.renderOnAddRemove;return this.renderOnAddRemove=!1,delete n.clipPath,this._enlivenObjects(n.objects,(function(t){r.clear(),r._setBgOverlay(n,(function(){o?r._enlivenObjects([o],(function(i){r.clipPath=i[0],r.__setupCanvas.call(r,n,t,s,e)})):r.__setupCanvas.call(r,n,t,s,e)}))}),i),this}},__setupCanvas:function(t,e,i,n){var r=this;e.forEach((function(t,e){r.insertAt(t,e)})),this.renderOnAddRemove=i,delete t.objects,delete t.backgroundImage,delete t.overlayImage,delete t.background,delete t.overlay,this._setOptions(t),this.renderAll(),n&&n()},_setBgOverlay:function(t,e){var i={backgroundColor:!1,overlayColor:!1,backgroundImage:!1,overlayImage:!1};if(t.backgroundImage||t.overlayImage||t.background||t.overlay){var n=function(){i.backgroundImage&&i.overlayImage&&i.backgroundColor&&i.overlayColor&&e&&e()};this.__setBgOverlay("backgroundImage",t.backgroundImage,i,n),this.__setBgOverlay("overlayImage",t.overlayImage,i,n),this.__setBgOverlay("backgroundColor",t.background,i,n),this.__setBgOverlay("overlayColor",t.overlay,i,n)}else e&&e()},__setBgOverlay:function(t,e,i,n){var r=this;if(!e)return i[t]=!0,void(n&&n());"backgroundImage"===t||"overlayImage"===t?A.util.enlivenObjects([e],(function(e){r[t]=e[0],i[t]=!0,n&&n()})):this["set"+A.util.string.capitalize(t,!0)](e,(function(){i[t]=!0,n&&n()}))},_enlivenObjects:function(t,e,i){t&&0!==t.length?A.util.enlivenObjects(t,(function(t){e&&e(t)}),null,i):e&&e([])},_toDataURL:function(t,e){this.clone((function(i){e(i.toDataURL(t))}))},_toDataURLWithMultiplier:function(t,e,i){this.clone((function(n){i(n.toDataURLWithMultiplier(t,e))}))},clone:function(t,e){var i=JSON.stringify(this.toJSON(e));this.cloneWithoutData((function(e){e.loadFromJSON(i,(function(){t&&t(e)}))}))},cloneWithoutData:function(t){var e=A.util.createCanvasElement();e.width=this.width,e.height=this.height;var i=new A.Canvas(e);this.backgroundImage?(i.setBackgroundImage(this.backgroundImage.src,(function(){i.renderAll(),t&&t(i)})),i.backgroundImageOpacity=this.backgroundImageOpacity,i.backgroundImageStretch=this.backgroundImageStretch):t&&t(i)}}),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.object.clone,r=e.util.toFixed,o=e.util.string.capitalize,s=e.util.degreesToRadians,a=!e.isLikelyNode;e.Object||(e.Object=e.util.createClass(e.CommonMethods,{type:"object",originX:"left",originY:"top",top:0,left:0,width:0,height:0,scaleX:1,scaleY:1,flipX:!1,flipY:!1,opacity:1,angle:0,skewX:0,skewY:0,cornerSize:13,touchCornerSize:24,transparentCorners:!0,hoverCursor:null,moveCursor:null,padding:0,borderColor:"rgb(178,204,255)",borderDashArray:null,cornerColor:"rgb(178,204,255)",cornerStrokeColor:null,cornerStyle:"rect",cornerDashArray:null,centeredScaling:!1,centeredRotation:!0,fill:"rgb(0,0,0)",fillRule:"nonzero",globalCompositeOperation:"source-over",backgroundColor:"",selectionBackgroundColor:"",stroke:null,strokeWidth:1,strokeDashArray:null,strokeDashOffset:0,strokeLineCap:"butt",strokeLineJoin:"miter",strokeMiterLimit:4,shadow:null,borderOpacityWhenMoving:.4,borderScaleFactor:1,minScaleLimit:0,selectable:!0,evented:!0,visible:!0,hasControls:!0,hasBorders:!0,perPixelTargetFind:!1,includeDefaultValues:!0,lockMovementX:!1,lockMovementY:!1,lockRotation:!1,lockScalingX:!1,lockScalingY:!1,lockSkewingX:!1,lockSkewingY:!1,lockScalingFlip:!1,excludeFromExport:!1,objectCaching:a,statefullCache:!1,noScaleCache:!0,strokeUniform:!1,dirty:!0,__corner:0,paintFirst:"fill",activeOn:"down",stateProperties:"top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),cacheProperties:"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),colorProperties:"fill stroke backgroundColor".split(" "),clipPath:void 0,inverted:!1,absolutePositioned:!1,initialize:function(t){t&&this.setOptions(t)},_createCacheCanvas:function(){this._cacheProperties={},this._cacheCanvas=e.util.createCanvasElement(),this._cacheContext=this._cacheCanvas.getContext("2d"),this._updateCacheCanvas(),this.dirty=!0},_limitCacheSize:function(t){var i=e.perfLimitSizeTotal,n=t.width,r=t.height,o=e.maxCacheSideLimit,s=e.minCacheSideLimit;if(n<=o&&r<=o&&n*r<=i)return n<s&&(t.width=s),r<s&&(t.height=s),t;var a=n/r,h=e.util.limitDimsByArea(a,i),c=e.util.capValue,l=c(s,h.x,o),u=c(s,h.y,o);return n>l&&(t.zoomX/=n/l,t.width=l,t.capped=!0),r>u&&(t.zoomY/=r/u,t.height=u,t.capped=!0),t},_getCacheCanvasDimensions:function(){var t=this.getTotalObjectScaling(),e=this._getTransformedDimensions(0,0),i=e.x*t.scaleX/this.scaleX,n=e.y*t.scaleY/this.scaleY;return{width:i+2,height:n+2,zoomX:t.scaleX,zoomY:t.scaleY,x:i,y:n}},_updateCacheCanvas:function(){var t=this.canvas;if(this.noScaleCache&&t&&t._currentTransform){var i=t._currentTransform.target,n=t._currentTransform.action;if(this===i&&n.slice&&"scale"===n.slice(0,5))return!1}var r,o,s=this._cacheCanvas,a=this._limitCacheSize(this._getCacheCanvasDimensions()),h=e.minCacheSideLimit,c=a.width,l=a.height,u=a.zoomX,f=a.zoomY,d=c!==this.cacheWidth||l!==this.cacheHeight,p=this.zoomX!==u||this.zoomY!==f,g=d||p,m=0,v=0,b=!1;if(d){var y=this._cacheCanvas.width,w=this._cacheCanvas.height,x=c>y||l>w;b=x||(c<.9*y||l<.9*w)&&y>h&&w>h,x&&!a.capped&&(c>h||l>h)&&(m=.1*c,v=.1*l)}return this instanceof e.Text&&this.path&&(g=!0,b=!0,m+=this.getHeightOfLine(0)*this.zoomX,v+=this.getHeightOfLine(0)*this.zoomY),!!g&&(b?(s.width=Math.ceil(c+m),s.height=Math.ceil(l+v)):(this._cacheContext.setTransform(1,0,0,1,0,0),this._cacheContext.clearRect(0,0,s.width,s.height)),r=a.x/2,o=a.y/2,this.cacheTranslationX=Math.round(s.width/2-r)+r,this.cacheTranslationY=Math.round(s.height/2-o)+o,this.cacheWidth=c,this.cacheHeight=l,this._cacheContext.translate(this.cacheTranslationX,this.cacheTranslationY),this._cacheContext.scale(u,f),this.zoomX=u,this.zoomY=f,!0)},setOptions:function(t){this._setOptions(t),this._initGradient(t.fill,"fill"),this._initGradient(t.stroke,"stroke"),this._initPattern(t.fill,"fill"),this._initPattern(t.stroke,"stroke")},transform:function(t){var e=this.group&&!this.group._transformDone||this.group&&this.canvas&&t===this.canvas.contextTop,i=this.calcTransformMatrix(!e);t.transform(i[0],i[1],i[2],i[3],i[4],i[5])},toObject:function(t){var i=e.Object.NUM_FRACTION_DIGITS,n={type:this.type,version:e.version,originX:this.originX,originY:this.originY,left:r(this.left,i),top:r(this.top,i),width:r(this.width,i),height:r(this.height,i),fill:this.fill&&this.fill.toObject?this.fill.toObject():this.fill,stroke:this.stroke&&this.stroke.toObject?this.stroke.toObject():this.stroke,strokeWidth:r(this.strokeWidth,i),strokeDashArray:this.strokeDashArray?this.strokeDashArray.concat():this.strokeDashArray,strokeLineCap:this.strokeLineCap,strokeDashOffset:this.strokeDashOffset,strokeLineJoin:this.strokeLineJoin,strokeUniform:this.strokeUniform,strokeMiterLimit:r(this.strokeMiterLimit,i),scaleX:r(this.scaleX,i),scaleY:r(this.scaleY,i),angle:r(this.angle,i),flipX:this.flipX,flipY:this.flipY,opacity:r(this.opacity,i),shadow:this.shadow&&this.shadow.toObject?this.shadow.toObject():this.shadow,visible:this.visible,backgroundColor:this.backgroundColor,fillRule:this.fillRule,paintFirst:this.paintFirst,globalCompositeOperation:this.globalCompositeOperation,skewX:r(this.skewX,i),skewY:r(this.skewY,i)};return this.clipPath&&!this.clipPath.excludeFromExport&&(n.clipPath=this.clipPath.toObject(t),n.clipPath.inverted=this.clipPath.inverted,n.clipPath.absolutePositioned=this.clipPath.absolutePositioned),e.util.populateWithProperties(this,n,t),this.includeDefaultValues||(n=this._removeDefaultValues(n)),n},toDatalessObject:function(t){return this.toObject(t)},_removeDefaultValues:function(t){var i=e.util.getKlass(t.type).prototype;return i.stateProperties.forEach((function(e){"left"!==e&&"top"!==e&&(t[e]===i[e]&&delete t[e],Array.isArray(t[e])&&Array.isArray(i[e])&&0===t[e].length&&0===i[e].length&&delete t[e])})),t},toString:function(){return"#<fabric."+o(this.type)+">"},getObjectScaling:function(){if(!this.group)return{scaleX:this.scaleX,scaleY:this.scaleY};var t=e.util.qrDecompose(this.calcTransformMatrix());return{scaleX:Math.abs(t.scaleX),scaleY:Math.abs(t.scaleY)}},getTotalObjectScaling:function(){var t=this.getObjectScaling(),e=t.scaleX,i=t.scaleY;if(this.canvas){var n=this.canvas.getZoom(),r=this.canvas.getRetinaScaling();e*=n*r,i*=n*r}return{scaleX:e,scaleY:i}},getObjectOpacity:function(){var t=this.opacity;return this.group&&(t*=this.group.getObjectOpacity()),t},_set:function(t,i){var n="scaleX"===t||"scaleY"===t,r=this[t]!==i,o=!1;return n&&(i=this._constrainScale(i)),"scaleX"===t&&i<0?(this.flipX=!this.flipX,i*=-1):"scaleY"===t&&i<0?(this.flipY=!this.flipY,i*=-1):"shadow"!==t||!i||i instanceof e.Shadow?"dirty"===t&&this.group&&this.group.set("dirty",i):i=new e.Shadow(i),this[t]=i,r&&(o=this.group&&this.group.isOnACache(),this.cacheProperties.indexOf(t)>-1?(this.dirty=!0,o&&this.group.set("dirty",!0)):o&&this.stateProperties.indexOf(t)>-1&&this.group.set("dirty",!0)),this},setOnGroup:function(){},getViewportTransform:function(){return this.canvas&&this.canvas.viewportTransform?this.canvas.viewportTransform:e.iMatrix.concat()},isNotVisible:function(){return 0===this.opacity||!this.width&&!this.height&&0===this.strokeWidth||!this.visible},render:function(t){this.isNotVisible()||this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(t.save(),this._setupCompositeOperation(t),this.drawSelectionBackground(t),this.transform(t),this._setOpacity(t),this._setShadow(t,this),this.shouldCache()?(this.renderCache(),this.drawCacheOnCanvas(t)):(this._removeCacheCanvas(),this.dirty=!1,this.drawObject(t),this.objectCaching&&this.statefullCache&&this.saveState({propertySet:"cacheProperties"})),t.restore())},renderCache:function(t){t=t||{},this._cacheCanvas&&this._cacheContext||this._createCacheCanvas(),this.isCacheDirty()&&(this.statefullCache&&this.saveState({propertySet:"cacheProperties"}),this.drawObject(this._cacheContext,t.forClipping),this.dirty=!1)},_removeCacheCanvas:function(){this._cacheCanvas=null,this._cacheContext=null,this.cacheWidth=0,this.cacheHeight=0},hasStroke:function(){return this.stroke&&"transparent"!==this.stroke&&0!==this.strokeWidth},hasFill:function(){return this.fill&&"transparent"!==this.fill},needsItsOwnCache:function(){return!("stroke"!==this.paintFirst||!this.hasFill()||!this.hasStroke()||"object"!=typeof this.shadow)||!!this.clipPath},shouldCache:function(){return this.ownCaching=this.needsItsOwnCache()||this.objectCaching&&(!this.group||!this.group.isOnACache()),this.ownCaching},willDrawShadow:function(){return!!this.shadow&&(0!==this.shadow.offsetX||0!==this.shadow.offsetY)},drawClipPathOnCache:function(t,i){if(t.save(),i.inverted?t.globalCompositeOperation="destination-out":t.globalCompositeOperation="destination-in",i.absolutePositioned){var n=e.util.invertTransform(this.calcTransformMatrix());t.transform(n[0],n[1],n[2],n[3],n[4],n[5])}i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},drawObject:function(t,e){var i=this.fill,n=this.stroke;e?(this.fill="black",this.stroke="",this._setClippingProperties(t)):this._renderBackground(t),this._render(t),this._drawClipPath(t,this.clipPath),this.fill=i,this.stroke=n},_drawClipPath:function(t,e){e&&(e.canvas=this.canvas,e.shouldCache(),e._transformDone=!0,e.renderCache({forClipping:!0}),this.drawClipPathOnCache(t,e))},drawCacheOnCanvas:function(t){t.scale(1/this.zoomX,1/this.zoomY),t.drawImage(this._cacheCanvas,-this.cacheTranslationX,-this.cacheTranslationY)},isCacheDirty:function(t){if(this.isNotVisible())return!1;if(this._cacheCanvas&&this._cacheContext&&!t&&this._updateCacheCanvas())return!0;if(this.dirty||this.clipPath&&this.clipPath.absolutePositioned||this.statefullCache&&this.hasStateChanged("cacheProperties")){if(this._cacheCanvas&&this._cacheContext&&!t){var e=this.cacheWidth/this.zoomX,i=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-e/2,-i/2,e,i)}return!0}return!1},_renderBackground:function(t){if(this.backgroundColor){var e=this._getNonTransformedDimensions();t.fillStyle=this.backgroundColor,t.fillRect(-e.x/2,-e.y/2,e.x,e.y),this._removeShadow(t)}},_setOpacity:function(t){this.group&&!this.group._transformDone?t.globalAlpha=this.getObjectOpacity():t.globalAlpha*=this.opacity},_setStrokeStyles:function(t,e){var i=e.stroke;i&&(t.lineWidth=e.strokeWidth,t.lineCap=e.strokeLineCap,t.lineDashOffset=e.strokeDashOffset,t.lineJoin=e.strokeLineJoin,t.miterLimit=e.strokeMiterLimit,i.toLive?"percentage"===i.gradientUnits||i.gradientTransform||i.patternTransform?this._applyPatternForTransformedGradient(t,i):(t.strokeStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):t.strokeStyle=e.stroke)},_setFillStyles:function(t,e){var i=e.fill;i&&(i.toLive?(t.fillStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,e.fill)):t.fillStyle=i)},_setClippingProperties:function(t){t.globalAlpha=1,t.strokeStyle="transparent",t.fillStyle="#000000"},_setLineDash:function(t,e){e&&0!==e.length&&(1&e.length&&e.push.apply(e,e),t.setLineDash(e))},_renderControls:function(t,i){var n,r,o,a=this.getViewportTransform(),h=this.calcTransformMatrix();r=void 0!==(i=i||{}).hasBorders?i.hasBorders:this.hasBorders,o=void 0!==i.hasControls?i.hasControls:this.hasControls,h=e.util.multiplyTransformMatrices(a,h),n=e.util.qrDecompose(h),t.save(),t.translate(n.translateX,n.translateY),t.lineWidth=1*this.borderScaleFactor,this.group||(t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1),this.flipX&&(n.angle-=180),t.rotate(s(this.group?n.angle:this.angle)),i.forActiveSelection||this.group?r&&this.drawBordersInGroup(t,n,i):r&&this.drawBorders(t,i),o&&this.drawControls(t,i),t.restore()},_setShadow:function(t){if(this.shadow){var i,n=this.shadow,r=this.canvas,o=r&&r.viewportTransform[0]||1,s=r&&r.viewportTransform[3]||1;i=n.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),r&&r._isRetinaScaling()&&(o*=e.devicePixelRatio,s*=e.devicePixelRatio),t.shadowColor=n.color,t.shadowBlur=n.blur*e.browserShadowBlurConstant*(o+s)*(i.scaleX+i.scaleY)/4,t.shadowOffsetX=n.offsetX*o*i.scaleX,t.shadowOffsetY=n.offsetY*s*i.scaleY}},_removeShadow:function(t){this.shadow&&(t.shadowColor="",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0)},_applyPatternGradientTransform:function(t,e){if(!e||!e.toLive)return{offsetX:0,offsetY:0};var i=e.gradientTransform||e.patternTransform,n=-this.width/2+e.offsetX||0,r=-this.height/2+e.offsetY||0;return"percentage"===e.gradientUnits?t.transform(this.width,0,0,this.height,n,r):t.transform(1,0,0,1,n,r),i&&t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),{offsetX:n,offsetY:r}},_renderPaintInOrder:function(t){"stroke"===this.paintFirst?(this._renderStroke(t),this._renderFill(t)):(this._renderFill(t),this._renderStroke(t))},_render:function(){},_renderFill:function(t){this.fill&&(t.save(),this._setFillStyles(t,this),"evenodd"===this.fillRule?t.fill("evenodd"):t.fill(),t.restore())},_renderStroke:function(t){if(this.stroke&&0!==this.strokeWidth){if(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this.strokeUniform&&this.group){var e=this.getObjectScaling();t.scale(1/e.scaleX,1/e.scaleY)}else this.strokeUniform&&t.scale(1/this.scaleX,1/this.scaleY);this._setLineDash(t,this.strokeDashArray),this._setStrokeStyles(t,this),t.stroke(),t.restore()}},_applyPatternForTransformedGradient:function(t,i){var n,r=this._limitCacheSize(this._getCacheCanvasDimensions()),o=e.util.createCanvasElement(),s=this.canvas.getRetinaScaling(),a=r.x/this.scaleX/s,h=r.y/this.scaleY/s;o.width=a,o.height=h,(n=o.getContext("2d")).beginPath(),n.moveTo(0,0),n.lineTo(a,0),n.lineTo(a,h),n.lineTo(0,h),n.closePath(),n.translate(a/2,h/2),n.scale(r.zoomX/this.scaleX/s,r.zoomY/this.scaleY/s),this._applyPatternGradientTransform(n,i),n.fillStyle=i.toLive(t),n.fill(),t.translate(-this.width/2-this.strokeWidth/2,-this.height/2-this.strokeWidth/2),t.scale(s*this.scaleX/r.zoomX,s*this.scaleY/r.zoomY),t.strokeStyle=n.createPattern(o,"no-repeat")},_findCenterFromElement:function(){return{x:this.left+this.width/2,y:this.top+this.height/2}},_assignTransformMatrixProps:function(){if(this.transformMatrix){var t=e.util.qrDecompose(this.transformMatrix);this.flipX=!1,this.flipY=!1,this.set("scaleX",t.scaleX),this.set("scaleY",t.scaleY),this.angle=t.angle,this.skewX=t.skewX,this.skewY=0}},_removeTransformMatrix:function(t){var i=this._findCenterFromElement();this.transformMatrix&&(this._assignTransformMatrixProps(),i=e.util.transformPoint(i,this.transformMatrix)),this.transformMatrix=null,t&&(this.scaleX*=t.scaleX,this.scaleY*=t.scaleY,this.cropX=t.cropX,this.cropY=t.cropY,i.x+=t.offsetLeft,i.y+=t.offsetTop,this.width=t.width,this.height=t.height),this.setPositionByOrigin(i,"center","center")},clone:function(t,i){var n=this.toObject(i);this.constructor.fromObject?this.constructor.fromObject(n,t):e.Object._fromObject("Object",n,t)},cloneAsImage:function(t,i){var n=this.toCanvasElement(i);return t&&t(new e.Image(n)),this},toCanvasElement:function(t){t||(t={});var i=e.util,n=i.saveObjectTransform(this),r=this.group,o=this.shadow,s=Math.abs,a=(t.multiplier||1)*(t.enableRetinaScaling?e.devicePixelRatio:1);delete this.group,t.withoutTransform&&i.resetObjectTransform(this),t.withoutShadow&&(this.shadow=null);var h,c,l,u,f=e.util.createCanvasElement(),d=this.getBoundingRect(!0,!0),p=this.shadow,g={x:0,y:0};p&&(c=p.blur,h=p.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),g.x=2*Math.round(s(p.offsetX)+c)*s(h.scaleX),g.y=2*Math.round(s(p.offsetY)+c)*s(h.scaleY)),l=d.width+g.x,u=d.height+g.y,f.width=Math.ceil(l),f.height=Math.ceil(u);var m=new e.StaticCanvas(f,{enableRetinaScaling:!1,renderOnAddRemove:!1,skipOffscreen:!1});"jpeg"===t.format&&(m.backgroundColor="#fff"),this.setPositionByOrigin(new e.Point(m.width/2,m.height/2),"center","center");var v=this.canvas;m.add(this);var b=m.toCanvasElement(a||1,t);return this.shadow=o,this.set("canvas",v),r&&(this.group=r),this.set(n).setCoords(),m._objects=[],m.dispose(),m=null,b},toDataURL:function(t){return t||(t={}),e.util.toDataURL(this.toCanvasElement(t),t.format||"png",t.quality||1)},isType:function(t){return arguments.length>1?Array.from(arguments).includes(this.type):this.type===t},complexity:function(){return 1},toJSON:function(t){return this.toObject(t)},rotate:function(t){var e=("center"!==this.originX||"center"!==this.originY)&&this.centeredRotation;return e&&this._setOriginToCenter(),this.set("angle",t),e&&this._resetOrigin(),this},centerH:function(){return this.canvas&&this.canvas.centerObjectH(this),this},viewportCenterH:function(){return this.canvas&&this.canvas.viewportCenterObjectH(this),this},centerV:function(){return this.canvas&&this.canvas.centerObjectV(this),this},viewportCenterV:function(){return this.canvas&&this.canvas.viewportCenterObjectV(this),this},center:function(){return this.canvas&&this.canvas.centerObject(this),this},viewportCenter:function(){return this.canvas&&this.canvas.viewportCenterObject(this),this},getLocalPointer:function(t,i){i=i||this.canvas.getPointer(t);var n=new e.Point(i.x,i.y),r=this._getLeftTopCoords();return this.angle&&(n=e.util.rotatePoint(n,r,s(-this.angle))),{x:n.x-r.x,y:n.y-r.y}},_setupCompositeOperation:function(t){this.globalCompositeOperation&&(t.globalCompositeOperation=this.globalCompositeOperation)},dispose:function(){e.runningAnimations&&e.runningAnimations.cancelByTarget(this)}}),e.util.createAccessors&&e.util.createAccessors(e.Object),i(e.Object.prototype,e.Observable),e.Object.NUM_FRACTION_DIGITS=2,e.Object.ENLIVEN_PROPS=["clipPath"],e.Object._fromObject=function(t,i,r,o){var s=e[t];i=n(i,!0),e.util.enlivenPatterns([i.fill,i.stroke],(function(t){void 0!==t[0]&&(i.fill=t[0]),void 0!==t[1]&&(i.stroke=t[1]),e.util.enlivenObjectEnlivables(i,i,(function(){var t=o?new s(i[o],i):new s(i);r&&r(t)}))}))},e.Object.__uid=0)}(e),y=A.util.degreesToRadians,w={left:-.5,center:0,right:.5},x={top:-.5,center:0,bottom:.5},A.util.object.extend(A.Object.prototype,{translateToGivenOrigin:function(t,e,i,n,r){var o,s,a,h=t.x,c=t.y;return"string"==typeof e?e=w[e]:e-=.5,"string"==typeof n?n=w[n]:n-=.5,"string"==typeof i?i=x[i]:i-=.5,"string"==typeof r?r=x[r]:r-=.5,s=r-i,((o=n-e)||s)&&(a=this._getTransformedDimensions(),h=t.x+o*a.x,c=t.y+s*a.y),new A.Point(h,c)},translateToCenterPoint:function(t,e,i){var n=this.translateToGivenOrigin(t,e,i,"center","center");return this.angle?A.util.rotatePoint(n,t,y(this.angle)):n},translateToOriginPoint:function(t,e,i){var n=this.translateToGivenOrigin(t,"center","center",e,i);return this.angle?A.util.rotatePoint(n,t,y(this.angle)):n},getCenterPoint:function(){var t=new A.Point(this.left,this.top);return this.translateToCenterPoint(t,this.originX,this.originY)},getPointByOrigin:function(t,e){var i=this.getCenterPoint();return this.translateToOriginPoint(i,t,e)},toLocalPoint:function(t,e,i){var n,r,o=this.getCenterPoint();return n=void 0!==e&&void 0!==i?this.translateToGivenOrigin(o,"center","center",e,i):new A.Point(this.left,this.top),r=new A.Point(t.x,t.y),this.angle&&(r=A.util.rotatePoint(r,o,-y(this.angle))),r.subtractEquals(n)},setPositionByOrigin:function(t,e,i){var n=this.translateToCenterPoint(t,e,i),r=this.translateToOriginPoint(n,this.originX,this.originY);this.set("left",r.x),this.set("top",r.y)},adjustPosition:function(t){var e,i,n=y(this.angle),r=this.getScaledWidth(),o=A.util.cos(n)*r,s=A.util.sin(n)*r;e="string"==typeof this.originX?w[this.originX]:this.originX-.5,i="string"==typeof t?w[t]:t-.5,this.left+=o*(i-e),this.top+=s*(i-e),this.setCoords(),this.originX=t},_setOriginToCenter:function(){this._originalOriginX=this.originX,this._originalOriginY=this.originY;var t=this.getCenterPoint();this.originX="center",this.originY="center",this.left=t.x,this.top=t.y},_resetOrigin:function(){var t=this.translateToOriginPoint(this.getCenterPoint(),this._originalOriginX,this._originalOriginY);this.originX=this._originalOriginX,this.originY=this._originalOriginY,this.left=t.x,this.top=t.y,this._originalOriginX=null,this._originalOriginY=null},_getLeftTopCoords:function(){return this.translateToOriginPoint(this.getCenterPoint(),"left","top")}}),function(){var t=A.util,e=t.degreesToRadians,i=t.multiplyTransformMatrices,n=t.transformPoint;t.object.extend(A.Object.prototype,{oCoords:null,aCoords:null,lineCoords:null,ownMatrixCache:null,matrixCache:null,controls:{},_getCoords:function(t,e){return e?t?this.calcACoords():this.calcLineCoords():(this.aCoords&&this.lineCoords||this.setCoords(!0),t?this.aCoords:this.lineCoords)},getCoords:function(t,e){return i=this._getCoords(t,e),[new A.Point(i.tl.x,i.tl.y),new A.Point(i.tr.x,i.tr.y),new A.Point(i.br.x,i.br.y),new A.Point(i.bl.x,i.bl.y)];var i},intersectsWithRect:function(t,e,i,n){var r=this.getCoords(i,n);return"Intersection"===A.Intersection.intersectPolygonRectangle(r,t,e).status},intersectsWithObject:function(t,e,i){return"Intersection"===A.Intersection.intersectPolygonPolygon(this.getCoords(e,i),t.getCoords(e,i)).status||t.isContainedWithinObject(this,e,i)||this.isContainedWithinObject(t,e,i)},isContainedWithinObject:function(t,e,i){for(var n=this.getCoords(e,i),r=e?t.aCoords:t.lineCoords,o=0,s=t._getImageLines(r);o<4;o++)if(!t.containsPoint(n[o],s))return!1;return!0},isContainedWithinRect:function(t,e,i,n){var r=this.getBoundingRect(i,n);return r.left>=t.x&&r.left+r.width<=e.x&&r.top>=t.y&&r.top+r.height<=e.y},containsPoint:function(t,e,i,n){var r=this._getCoords(i,n),o=(e=e||this._getImageLines(r),this._findCrossPoints(t,e));return 0!==o&&o%2==1},isOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.getCoords(!0,t).some((function(t){return t.x<=i.x&&t.x>=e.x&&t.y<=i.y&&t.y>=e.y}))||!!this.intersectsWithRect(e,i,!0,t)||this._containsCenterOfCanvas(e,i,t)},_containsCenterOfCanvas:function(t,e,i){var n={x:(t.x+e.x)/2,y:(t.y+e.y)/2};return!!this.containsPoint(n,null,!0,i)},isPartiallyOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.intersectsWithRect(e,i,!0,t)||this.getCoords(!0,t).every((function(t){return(t.x>=i.x||t.x<=e.x)&&(t.y>=i.y||t.y<=e.y)}))&&this._containsCenterOfCanvas(e,i,t)},_getImageLines:function(t){return{topline:{o:t.tl,d:t.tr},rightline:{o:t.tr,d:t.br},bottomline:{o:t.br,d:t.bl},leftline:{o:t.bl,d:t.tl}}},_findCrossPoints:function(t,e){var i,n,r,o=0;for(var s in e)if(!((r=e[s]).o.y<t.y&&r.d.y<t.y||r.o.y>=t.y&&r.d.y>=t.y||(r.o.x===r.d.x&&r.o.x>=t.x?n=r.o.x:(i=(r.d.y-r.o.y)/(r.d.x-r.o.x),n=-(t.y-0*t.x-(r.o.y-i*r.o.x))/(0-i)),n>=t.x&&(o+=1),2!==o)))break;return o},getBoundingRect:function(e,i){var n=this.getCoords(e,i);return t.makeBoundingBoxFromPoints(n)},getScaledWidth:function(){return this._getTransformedDimensions().x},getScaledHeight:function(){return this._getTransformedDimensions().y},_constrainScale:function(t){return Math.abs(t)<this.minScaleLimit?t<0?-this.minScaleLimit:this.minScaleLimit:0===t?1e-4:t},scale:function(t){return this._set("scaleX",t),this._set("scaleY",t),this.setCoords()},scaleToWidth:function(t,e){var i=this.getBoundingRect(e).width/this.getScaledWidth();return this.scale(t/this.width/i)},scaleToHeight:function(t,e){var i=this.getBoundingRect(e).height/this.getScaledHeight();return this.scale(t/this.height/i)},calcLineCoords:function(){var i=this.getViewportTransform(),r=this.padding,o=e(this.angle),s=t.cos(o)*r,a=t.sin(o)*r,h=s+a,c=s-a,l=this.calcACoords(),u={tl:n(l.tl,i),tr:n(l.tr,i),bl:n(l.bl,i),br:n(l.br,i)};return r&&(u.tl.x-=c,u.tl.y-=h,u.tr.x+=h,u.tr.y-=c,u.bl.x-=h,u.bl.y+=c,u.br.x+=c,u.br.y+=h),u},calcOCoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),n=this.getViewportTransform(),r=i(n,e),o=i(r,t),s=(o=i(o,[1/n[0],0,0,1/n[3],0,0]),this._calculateCurrentDimensions()),a={};return this.forEachControl((function(t,e,i){a[e]=t.positionHandler(s,o,i)})),a},calcACoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),r=i(e,t),o=this._getTransformedDimensions(),s=o.x/2,a=o.y/2;return{tl:n({x:-s,y:-a},r),tr:n({x:s,y:-a},r),bl:n({x:-s,y:a},r),br:n({x:s,y:a},r)}},setCoords:function(t){return this.aCoords=this.calcACoords(),this.lineCoords=this.group?this.aCoords:this.calcLineCoords(),t||(this.oCoords=this.calcOCoords(),this._setCornerCoords&&this._setCornerCoords()),this},_calcRotateMatrix:function(){return t.calcRotateMatrix(this)},_calcTranslateMatrix:function(){var t=this.getCenterPoint();return[1,0,0,1,t.x,t.y]},transformMatrixKey:function(t){var e="_",i="";return!t&&this.group&&(i=this.group.transformMatrixKey(t)+e),i+this.top+e+this.left+e+this.scaleX+e+this.scaleY+e+this.skewX+e+this.skewY+e+this.angle+e+this.originX+e+this.originY+e+this.width+e+this.height+e+this.strokeWidth+this.flipX+this.flipY},calcTransformMatrix:function(t){var e=this.calcOwnMatrix();if(t||!this.group)return e;var n=this.transformMatrixKey(t),r=this.matrixCache||(this.matrixCache={});return r.key===n?r.value:(this.group&&(e=i(this.group.calcTransformMatrix(!1),e)),r.key=n,r.value=e,e)},calcOwnMatrix:function(){var e=this.transformMatrixKey(!0),i=this.ownMatrixCache||(this.ownMatrixCache={});if(i.key===e)return i.value;var n=this._calcTranslateMatrix(),r={angle:this.angle,translateX:n[4],translateY:n[5],scaleX:this.scaleX,scaleY:this.scaleY,skewX:this.skewX,skewY:this.skewY,flipX:this.flipX,flipY:this.flipY};return i.key=e,i.value=t.composeMatrix(r),i.value},_getNonTransformedDimensions:function(){var t=this.strokeWidth;return{x:this.width+t,y:this.height+t}},_getTransformedDimensions:function(e,i){void 0===e&&(e=this.skewX),void 0===i&&(i=this.skewY);var n,r,o,s=0===e&&0===i;if(this.strokeUniform?(r=this.width,o=this.height):(r=(n=this._getNonTransformedDimensions()).x,o=n.y),s)return this._finalizeDimensions(r*this.scaleX,o*this.scaleY);var a=t.sizeAfterTransform(r,o,{scaleX:this.scaleX,scaleY:this.scaleY,skewX:e,skewY:i});return this._finalizeDimensions(a.x,a.y)},_finalizeDimensions:function(t,e){return this.strokeUniform?{x:t+this.strokeWidth,y:e+this.strokeWidth}:{x:t,y:e}},_calculateCurrentDimensions:function(){var t=this.getViewportTransform(),e=this._getTransformedDimensions();return n(e,t,!0).scalarAdd(2*this.padding)}})}(),A.util.object.extend(A.Object.prototype,{sendToBack:function(){return this.group?A.StaticCanvas.prototype.sendToBack.call(this.group,this):this.canvas&&this.canvas.sendToBack(this),this},bringToFront:function(){return this.group?A.StaticCanvas.prototype.bringToFront.call(this.group,this):this.canvas&&this.canvas.bringToFront(this),this},sendBackwards:function(t){return this.group?A.StaticCanvas.prototype.sendBackwards.call(this.group,this,t):this.canvas&&this.canvas.sendBackwards(this,t),this},bringForward:function(t){return this.group?A.StaticCanvas.prototype.bringForward.call(this.group,this,t):this.canvas&&this.canvas.bringForward(this,t),this},moveTo:function(t){return this.group&&"activeSelection"!==this.group.type?A.StaticCanvas.prototype.moveTo.call(this.group,this,t):this.canvas&&this.canvas.moveTo(this,t),this}}),function(){function t(t,e){if(e){if(e.toLive)return t+": url(#SVGID_"+e.id+"); ";var i=new A.Color(e),n=t+": "+i.toRgb()+"; ",r=i.getAlpha();return 1!==r&&(n+=t+"-opacity: "+r.toString()+"; "),n}return t+": none; "}var e=A.util.toFixed;A.util.object.extend(A.Object.prototype,{getSvgStyles:function(e){var i=this.fillRule?this.fillRule:"nonzero",n=this.strokeWidth?this.strokeWidth:"0",r=this.strokeDashArray?this.strokeDashArray.join(" "):"none",o=this.strokeDashOffset?this.strokeDashOffset:"0",s=this.strokeLineCap?this.strokeLineCap:"butt",a=this.strokeLineJoin?this.strokeLineJoin:"miter",h=this.strokeMiterLimit?this.strokeMiterLimit:"4",c=void 0!==this.opacity?this.opacity:"1",l=this.visible?"":" visibility: hidden;",u=e?"":this.getSvgFilter(),f=t("fill",this.fill);return[t("stroke",this.stroke),"stroke-width: ",n,"; ","stroke-dasharray: ",r,"; ","stroke-linecap: ",s,"; ","stroke-dashoffset: ",o,"; ","stroke-linejoin: ",a,"; ","stroke-miterlimit: ",h,"; ",f,"fill-rule: ",i,"; ","opacity: ",c,";",u,l].join("")},getSvgSpanStyles:function(e,i){var n="; ",r=e.fontFamily?"font-family: "+(-1===e.fontFamily.indexOf("'")&&-1===e.fontFamily.indexOf('"')?"'"+e.fontFamily+"'":e.fontFamily)+n:"",o=e.strokeWidth?"stroke-width: "+e.strokeWidth+n:"",s=e.fontSize?"font-size: "+e.fontSize+"px"+n:"",a=e.fontStyle?"font-style: "+e.fontStyle+n:"",h=e.fontWeight?"font-weight: "+e.fontWeight+n:"",c=e.fill?t("fill",e.fill):"",l=e.stroke?t("stroke",e.stroke):"",u=this.getSvgTextDecoration(e);return u&&(u="text-decoration: "+u+n),[l,o,r,s,a,h,u,c,e.deltaY?"baseline-shift: "+-e.deltaY+"; ":"",i?"white-space: pre; ":""].join("")},getSvgTextDecoration:function(t){return["overline","underline","line-through"].filter((function(e){return t[e.replace("-","")]})).join(" ")},getSvgFilter:function(){return this.shadow?"filter: url(#SVGID_"+this.shadow.id+");":""},getSvgCommons:function(){return[this.id?'id="'+this.id+'" ':"",this.clipPath?'clip-path="url(#'+this.clipPath.clipPathId+')" ':""].join("")},getSvgTransform:function(t,e){var i=t?this.calcTransformMatrix():this.calcOwnMatrix();return'transform="'+A.util.matrixToSVG(i)+(e||"")+'" '},_setSVGBg:function(t){if(this.backgroundColor){var i=A.Object.NUM_FRACTION_DIGITS;t.push("\t\t<rect ",this._getFillAttributes(this.backgroundColor),' x="',e(-this.width/2,i),'" y="',e(-this.height/2,i),'" width="',e(this.width,i),'" height="',e(this.height,i),'"></rect>\n')}},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(t),{reviver:t})},toClipPathSVG:function(t){return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(t),{reviver:t})},_createBaseClipPathSVGMarkup:function(t,e){var i=(e=e||{}).reviver,n=e.additionalTransform||"",r=[this.getSvgTransform(!0,n),this.getSvgCommons()].join(""),o=t.indexOf("COMMON_PARTS");return t[o]=r,i?i(t.join("")):t.join("")},_createBaseSVGMarkup:function(t,e){var i,n,r=(e=e||{}).noStyle,o=e.reviver,s=r?"":'style="'+this.getSvgStyles()+'" ',a=e.withShadow?'style="'+this.getSvgFilter()+'" ':"",h=this.clipPath,c=this.strokeUniform?'vector-effect="non-scaling-stroke" ':"",l=h&&h.absolutePositioned,u=this.stroke,f=this.fill,d=this.shadow,p=[],g=t.indexOf("COMMON_PARTS"),m=e.additionalTransform;return h&&(h.clipPathId="CLIPPATH_"+A.Object.__uid++,n='<clipPath id="'+h.clipPathId+'" >\n'+h.toClipPathSVG(o)+"</clipPath>\n"),l&&p.push("<g ",a,this.getSvgCommons()," >\n"),p.push("<g ",this.getSvgTransform(!1),l?"":a+this.getSvgCommons()," >\n"),i=[s,c,r?"":this.addPaintOrder()," ",m?'transform="'+m+'" ':""].join(""),t[g]=i,f&&f.toLive&&p.push(f.toSVG(this)),u&&u.toLive&&p.push(u.toSVG(this)),d&&p.push(d.toSVG(this)),h&&p.push(n),p.push(t.join("")),p.push("</g>\n"),l&&p.push("</g>\n"),o?o(p.join("")):p.join("")},addPaintOrder:function(){return"fill"!==this.paintFirst?' paint-order="'+this.paintFirst+'" ':""}})}(),function(){var t=A.util.object.extend,e="stateProperties";function i(e,i,n){var r={};n.forEach((function(t){r[t]=e[t]})),t(e[i],r,!0)}function n(t,e,i){if(t===e)return!0;if(Array.isArray(t)){if(!Array.isArray(e)||t.length!==e.length)return!1;for(var r=0,o=t.length;r<o;r++)if(!n(t[r],e[r]))return!1;return!0}if(t&&"object"==typeof t){var s,a=Object.keys(t);if(!e||"object"!=typeof e||!i&&a.length!==Object.keys(e).length)return!1;for(r=0,o=a.length;r<o;r++)if("canvas"!==(s=a[r])&&"group"!==s&&!n(t[s],e[s]))return!1;return!0}}A.util.object.extend(A.Object.prototype,{hasStateChanged:function(t){var i="_"+(t=t||e);return Object.keys(this[i]).length<this[t].length||!n(this[i],this,!0)},saveState:function(t){var n=t&&t.propertySet||e,r="_"+n;return this[r]?(i(this,r,this[n]),t&&t.stateProperties&&i(this,r,t.stateProperties),this):this.setupState(t)},setupState:function(t){var i=(t=t||{}).propertySet||e;return t.propertySet=i,this["_"+i]={},this.saveState(t),this}})}(),function(){var t=A.util.degreesToRadians;A.util.object.extend(A.Object.prototype,{_findTargetCorner:function(t,e){if(!this.hasControls||this.group||!this.canvas||this.canvas._activeObject!==this)return!1;var i,n,r,o=t.x,s=t.y,a=Object.keys(this.oCoords),h=a.length-1;for(this.__corner=0;h>=0;h--)if(r=a[h],this.isControlVisible(r)&&(n=this._getImageLines(e?this.oCoords[r].touchCorner:this.oCoords[r].corner),0!==(i=this._findCrossPoints({x:o,y:s},n))&&i%2==1))return this.__corner=r,r;return!1},forEachControl:function(t){for(var e in this.controls)t(this.controls[e],e,this)},_setCornerCoords:function(){var t=this.oCoords;for(var e in t){var i=this.controls[e];t[e].corner=i.calcCornerCoords(this.angle,this.cornerSize,t[e].x,t[e].y,!1),t[e].touchCorner=i.calcCornerCoords(this.angle,this.touchCornerSize,t[e].x,t[e].y,!0)}},drawSelectionBackground:function(e){if(!this.selectionBackgroundColor||this.canvas&&!this.canvas.interactive||this.canvas&&this.canvas._activeObject!==this)return this;e.save();var i=this.getCenterPoint(),n=this._calculateCurrentDimensions(),r=this.canvas.viewportTransform;return e.translate(i.x,i.y),e.scale(1/r[0],1/r[3]),e.rotate(t(this.angle)),e.fillStyle=this.selectionBackgroundColor,e.fillRect(-n.x/2,-n.y/2,n.x,n.y),e.restore(),this},drawBorders:function(t,e){e=e||{};var i=this._calculateCurrentDimensions(),n=this.borderScaleFactor,r=i.x+n,o=i.y+n,s=void 0!==e.hasControls?e.hasControls:this.hasControls,a=!1;return t.save(),t.strokeStyle=e.borderColor||this.borderColor,this._setLineDash(t,e.borderDashArray||this.borderDashArray),t.strokeRect(-r/2,-o/2,r,o),s&&(t.beginPath(),this.forEachControl((function(e,i,n){e.withConnection&&e.getVisibility(n,i)&&(a=!0,t.moveTo(e.x*r,e.y*o),t.lineTo(e.x*r+e.offsetX,e.y*o+e.offsetY))})),a&&t.stroke()),t.restore(),this},drawBordersInGroup:function(t,e,i){i=i||{};var n=A.util.sizeAfterTransform(this.width,this.height,e),r=this.strokeWidth,o=this.strokeUniform,s=this.borderScaleFactor,a=n.x+r*(o?this.canvas.getZoom():e.scaleX)+s,h=n.y+r*(o?this.canvas.getZoom():e.scaleY)+s;return t.save(),this._setLineDash(t,i.borderDashArray||this.borderDashArray),t.strokeStyle=i.borderColor||this.borderColor,t.strokeRect(-a/2,-h/2,a,h),t.restore(),this},drawControls:function(t,e){e=e||{},t.save();var i,n,r=this.canvas.getRetinaScaling();return t.setTransform(r,0,0,r,0,0),t.strokeStyle=t.fillStyle=e.cornerColor||this.cornerColor,this.transparentCorners||(t.strokeStyle=e.cornerStrokeColor||this.cornerStrokeColor),this._setLineDash(t,e.cornerDashArray||this.cornerDashArray),this.setCoords(),this.group&&(i=this.group.calcTransformMatrix()),this.forEachControl((function(r,o,s){n=s.oCoords[o],r.getVisibility(s,o)&&(i&&(n=A.util.transformPoint(n,i)),r.render(t,n.x,n.y,e,s))})),t.restore(),this},isControlVisible:function(t){return this.controls[t]&&this.controls[t].getVisibility(this,t)},setControlVisible:function(t,e){return this._controlsVisibility||(this._controlsVisibility={}),this._controlsVisibility[t]=e,this},setControlsVisibility:function(t){for(var e in t||(t={}),t)this.setControlVisible(e,t[e]);return this},onDeselect:function(){},onSelect:function(){}})}(),A.util.object.extend(A.StaticCanvas.prototype,{FX_DURATION:500,fxCenterObjectH:function(t,e){var i=function(){},n=(e=e||{}).onComplete||i,r=e.onChange||i,o=this;return A.util.animate({target:this,startValue:t.left,endValue:this.getCenterPoint().x,duration:this.FX_DURATION,onChange:function(e){t.set("left",e),o.requestRenderAll(),r()},onComplete:function(){t.setCoords(),n()}})},fxCenterObjectV:function(t,e){var i=function(){},n=(e=e||{}).onComplete||i,r=e.onChange||i,o=this;return A.util.animate({target:this,startValue:t.top,endValue:this.getCenterPoint().y,duration:this.FX_DURATION,onChange:function(e){t.set("top",e),o.requestRenderAll(),r()},onComplete:function(){t.setCoords(),n()}})},fxRemove:function(t,e){var i=function(){},n=(e=e||{}).onComplete||i,r=e.onChange||i,o=this;return A.util.animate({target:this,startValue:t.opacity,endValue:0,duration:this.FX_DURATION,onChange:function(e){t.set("opacity",e),o.requestRenderAll(),r()},onComplete:function(){o.remove(t),n()}})}}),A.util.object.extend(A.Object.prototype,{animate:function(){if(arguments[0]&&"object"==typeof arguments[0]){var t,e,i=[],n=[];for(t in arguments[0])i.push(t);for(var r=0,o=i.length;r<o;r++)t=i[r],e=r!==o-1,n.push(this._animate(t,arguments[0][t],arguments[1],e));return n}return this._animate.apply(this,arguments)},_animate:function(t,e,i,n){var r,o=this;e=e.toString(),i=i?A.util.object.clone(i):{},~t.indexOf(".")&&(r=t.split("."));var s=o.colorProperties.indexOf(t)>-1||r&&o.colorProperties.indexOf(r[1])>-1,a=r?this.get(r[0])[r[1]]:this.get(t);"from"in i||(i.from=a),s||(e=~e.indexOf("=")?a+parseFloat(e.replace("=","")):parseFloat(e));var h={target:this,startValue:i.from,endValue:e,byValue:i.by,easing:i.easing,duration:i.duration,abort:i.abort&&function(t,e,n){return i.abort.call(o,t,e,n)},onChange:function(e,s,a){r?o[r[0]][r[1]]=e:o.set(t,e),n||i.onChange&&i.onChange(e,s,a)},onComplete:function(t,e,r){n||(o.setCoords(),i.onComplete&&i.onComplete(t,e,r))}};return s?A.util.animateColor(h.startValue,h.endValue,h.duration,h):A.util.animate(h)}}),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.object.clone,r={x1:1,x2:1,y1:1,y2:1};function o(t,e){var i=t.origin,n=t.axis1,r=t.axis2,o=t.dimension,s=e.nearest,a=e.center,h=e.farthest;return function(){switch(this.get(i)){case s:return Math.min(this.get(n),this.get(r));case a:return Math.min(this.get(n),this.get(r))+.5*this.get(o);case h:return Math.max(this.get(n),this.get(r))}}}e.Line?e.warn("fabric.Line is already defined"):(e.Line=e.util.createClass(e.Object,{type:"line",x1:0,y1:0,x2:0,y2:0,cacheProperties:e.Object.prototype.cacheProperties.concat("x1","x2","y1","y2"),initialize:function(t,e){t||(t=[0,0,0,0]),this.callSuper("initialize",e),this.set("x1",t[0]),this.set("y1",t[1]),this.set("x2",t[2]),this.set("y2",t[3]),this._setWidthHeight(e)},_setWidthHeight:function(t){t||(t={}),this.width=Math.abs(this.x2-this.x1),this.height=Math.abs(this.y2-this.y1),this.left="left"in t?t.left:this._getLeftToOriginX(),this.top="top"in t?t.top:this._getTopToOriginY()},_set:function(t,e){return this.callSuper("_set",t,e),void 0!==r[t]&&this._setWidthHeight(),this},_getLeftToOriginX:o({origin:"originX",axis1:"x1",axis2:"x2",dimension:"width"},{nearest:"left",center:"center",farthest:"right"}),_getTopToOriginY:o({origin:"originY",axis1:"y1",axis2:"y2",dimension:"height"},{nearest:"top",center:"center",farthest:"bottom"}),_render:function(t){t.beginPath();var e=this.calcLinePoints();t.moveTo(e.x1,e.y1),t.lineTo(e.x2,e.y2),t.lineWidth=this.strokeWidth;var i=t.strokeStyle;t.strokeStyle=this.stroke||t.fillStyle,this.stroke&&this._renderStroke(t),t.strokeStyle=i},_findCenterFromElement:function(){return{x:(this.x1+this.x2)/2,y:(this.y1+this.y2)/2}},toObject:function(t){return i(this.callSuper("toObject",t),this.calcLinePoints())},_getNonTransformedDimensions:function(){var t=this.callSuper("_getNonTransformedDimensions");return"butt"===this.strokeLineCap&&(0===this.width&&(t.y-=this.strokeWidth),0===this.height&&(t.x-=this.strokeWidth)),t},calcLinePoints:function(){var t=this.x1<=this.x2?-1:1,e=this.y1<=this.y2?-1:1,i=t*this.width*.5,n=e*this.height*.5;return{x1:i,x2:t*this.width*-.5,y1:n,y2:e*this.height*-.5}},_toSVG:function(){var t=this.calcLinePoints();return["<line ","COMMON_PARTS",'x1="',t.x1,'" y1="',t.y1,'" x2="',t.x2,'" y2="',t.y2,'" />\n']}}),e.Line.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" ")),e.Line.fromElement=function(t,n,r){r=r||{};var o=e.parseAttributes(t,e.Line.ATTRIBUTE_NAMES),s=[o.x1||0,o.y1||0,o.x2||0,o.y2||0];n(new e.Line(s,i(o,r)))},e.Line.fromObject=function(t,i){var r=n(t,!0);r.points=[t.x1,t.y1,t.x2,t.y2],e.Object._fromObject("Line",r,(function(t){delete t.points,i&&i(t)}),"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.degreesToRadians;e.Circle?e.warn("fabric.Circle is already defined."):(e.Circle=e.util.createClass(e.Object,{type:"circle",radius:0,startAngle:0,endAngle:360,cacheProperties:e.Object.prototype.cacheProperties.concat("radius","startAngle","endAngle"),_set:function(t,e){return this.callSuper("_set",t,e),"radius"===t&&this.setRadius(e),this},toObject:function(t){return this.callSuper("toObject",["radius","startAngle","endAngle"].concat(t))},_toSVG:function(){var t,n=(this.endAngle-this.startAngle)%360;if(0===n)t=["<circle ","COMMON_PARTS",'cx="0" cy="0" ','r="',this.radius,'" />\n'];else{var r=i(this.startAngle),o=i(this.endAngle),s=this.radius;t=['<path d="M '+e.util.cos(r)*s+" "+e.util.sin(r)*s," A "+s+" "+s," 0 ",+(n>180?"1":"0")+" 1"," "+e.util.cos(o)*s+" "+e.util.sin(o)*s,'" ',"COMMON_PARTS"," />\n"]}return t},_render:function(t){t.beginPath(),t.arc(0,0,this.radius,i(this.startAngle),i(this.endAngle),!1),this._renderPaintInOrder(t)},getRadiusX:function(){return this.get("radius")*this.get("scaleX")},getRadiusY:function(){return this.get("radius")*this.get("scaleY")},setRadius:function(t){return this.radius=t,this.set("width",2*t).set("height",2*t)}}),e.Circle.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("cx cy r".split(" ")),e.Circle.fromElement=function(t,i){var n,r=e.parseAttributes(t,e.Circle.ATTRIBUTE_NAMES);if(!("radius"in(n=r)&&n.radius>=0))throw new Error("value of `r` attribute is required and can not be negative");r.left=(r.left||0)-r.radius,r.top=(r.top||0)-r.radius,i(new e.Circle(r))},e.Circle.fromObject=function(t,i){e.Object._fromObject("Circle",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Triangle?e.warn("fabric.Triangle is already defined"):(e.Triangle=e.util.createClass(e.Object,{type:"triangle",width:100,height:100,_render:function(t){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,i),t.lineTo(0,-i),t.lineTo(e,i),t.closePath(),this._renderPaintInOrder(t)},_toSVG:function(){var t=this.width/2,e=this.height/2;return["<polygon ","COMMON_PARTS",'points="',[-t+" "+e,"0 "+-e,t+" "+e].join(","),'" />']}}),e.Triangle.fromObject=function(t,i){return e.Object._fromObject("Triangle",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=2*Math.PI;e.Ellipse?e.warn("fabric.Ellipse is already defined."):(e.Ellipse=e.util.createClass(e.Object,{type:"ellipse",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this.set("rx",t&&t.rx||0),this.set("ry",t&&t.ry||0)},_set:function(t,e){switch(this.callSuper("_set",t,e),t){case"rx":this.rx=e,this.set("width",2*e);break;case"ry":this.ry=e,this.set("height",2*e)}return this},getRx:function(){return this.get("rx")*this.get("scaleX")},getRy:function(){return this.get("ry")*this.get("scaleY")},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<ellipse ","COMMON_PARTS",'cx="0" cy="0" ','rx="',this.rx,'" ry="',this.ry,'" />\n']},_render:function(t){t.beginPath(),t.save(),t.transform(1,0,0,this.ry/this.rx,0,0),t.arc(0,0,this.rx,0,i,!1),t.restore(),this._renderPaintInOrder(t)}}),e.Ellipse.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" ")),e.Ellipse.fromElement=function(t,i){var n=e.parseAttributes(t,e.Ellipse.ATTRIBUTE_NAMES);n.left=(n.left||0)-n.rx,n.top=(n.top||0)-n.ry,i(new e.Ellipse(n))},e.Ellipse.fromObject=function(t,i){e.Object._fromObject("Ellipse",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend;e.Rect?e.warn("fabric.Rect is already defined"):(e.Rect=e.util.createClass(e.Object,{stateProperties:e.Object.prototype.stateProperties.concat("rx","ry"),type:"rect",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat("rx","ry"),initialize:function(t){this.callSuper("initialize",t),this._initRxRy()},_initRxRy:function(){this.rx&&!this.ry?this.ry=this.rx:this.ry&&!this.rx&&(this.rx=this.ry)},_render:function(t){var e=this.rx?Math.min(this.rx,this.width/2):0,i=this.ry?Math.min(this.ry,this.height/2):0,n=this.width,r=this.height,o=-this.width/2,s=-this.height/2,a=0!==e||0!==i,h=.4477152502;t.beginPath(),t.moveTo(o+e,s),t.lineTo(o+n-e,s),a&&t.bezierCurveTo(o+n-h*e,s,o+n,s+h*i,o+n,s+i),t.lineTo(o+n,s+r-i),a&&t.bezierCurveTo(o+n,s+r-h*i,o+n-h*e,s+r,o+n-e,s+r),t.lineTo(o+e,s+r),a&&t.bezierCurveTo(o+h*e,s+r,o,s+r-h*i,o,s+r-i),t.lineTo(o,s+i),a&&t.bezierCurveTo(o,s+h*i,o+h*e,s,o+e,s),t.closePath(),this._renderPaintInOrder(t)},toObject:function(t){return this.callSuper("toObject",["rx","ry"].concat(t))},_toSVG:function(){return["<rect ","COMMON_PARTS",'x="',-this.width/2,'" y="',-this.height/2,'" rx="',this.rx,'" ry="',this.ry,'" width="',this.width,'" height="',this.height,'" />\n']}}),e.Rect.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" ")),e.Rect.fromElement=function(t,n,r){if(!t)return n(null);r=r||{};var o=e.parseAttributes(t,e.Rect.ATTRIBUTE_NAMES);o.left=o.left||0,o.top=o.top||0,o.height=o.height||0,o.width=o.width||0;var s=new e.Rect(i(r?e.util.object.clone(r):{},o));s.visible=s.visible&&s.width>0&&s.height>0,n(s)},e.Rect.fromObject=function(t,i){return e.Object._fromObject("Rect",t,i)})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.util.array.min,r=e.util.array.max,o=e.util.toFixed,s=e.util.projectStrokeOnPoints;e.Polyline?e.warn("fabric.Polyline is already defined"):(e.Polyline=e.util.createClass(e.Object,{type:"polyline",points:null,exactBoundingBox:!1,cacheProperties:e.Object.prototype.cacheProperties.concat("points"),initialize:function(t,e){e=e||{},this.points=t||[],this.callSuper("initialize",e),this._setPositionDimensions(e)},_projectStrokeOnPoints:function(){return s(this.points,this,!0)},_setPositionDimensions:function(t){var e,i=this._calcDimensions(t),n=this.exactBoundingBox?this.strokeWidth:0;this.width=i.width-n,this.height=i.height-n,t.fromSVG||(e=this.translateToGivenOrigin({x:i.left-this.strokeWidth/2+n/2,y:i.top-this.strokeWidth/2+n/2},"left","top",this.originX,this.originY)),void 0===t.left&&(this.left=t.fromSVG?i.left:e.x),void 0===t.top&&(this.top=t.fromSVG?i.top:e.y),this.pathOffset={x:i.left+this.width/2+n/2,y:i.top+this.height/2+n/2}},_calcDimensions:function(){var t=this.exactBoundingBox?this._projectStrokeOnPoints():this.points,e=n(t,"x")||0,i=n(t,"y")||0;return{left:e,top:i,width:(r(t,"x")||0)-e,height:(r(t,"y")||0)-i}},toObject:function(t){return i(this.callSuper("toObject",t),{points:this.points.concat()})},_toSVG:function(){for(var t=[],i=this.pathOffset.x,n=this.pathOffset.y,r=e.Object.NUM_FRACTION_DIGITS,s=0,a=this.points.length;s<a;s++)t.push(o(this.points[s].x-i,r),",",o(this.points[s].y-n,r)," ");return["<"+this.type+" ","COMMON_PARTS",'points="',t.join(""),'" />\n']},commonRender:function(t){var e,i=this.points.length,n=this.pathOffset.x,r=this.pathOffset.y;if(!i||isNaN(this.points[i-1].y))return!1;t.beginPath(),t.moveTo(this.points[0].x-n,this.points[0].y-r);for(var o=0;o<i;o++)e=this.points[o],t.lineTo(e.x-n,e.y-r);return!0},_render:function(t){this.commonRender(t)&&this._renderPaintInOrder(t)},complexity:function(){return this.get("points").length}}),e.Polyline.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polyline.fromElementGenerator=function(t){return function(n,r,o){if(!n)return r(null);o||(o={});var s=e.parsePointsAttribute(n.getAttribute("points")),a=e.parseAttributes(n,e[t].ATTRIBUTE_NAMES);a.fromSVG=!0,r(new e[t](s,i(a,o)))}},e.Polyline.fromElement=e.Polyline.fromElementGenerator("Polyline"),e.Polyline.fromObject=function(t,i){return e.Object._fromObject("Polyline",t,i,"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.projectStrokeOnPoints;e.Polygon?e.warn("fabric.Polygon is already defined"):(e.Polygon=e.util.createClass(e.Polyline,{type:"polygon",_projectStrokeOnPoints:function(){return i(this.points,this)},_render:function(t){this.commonRender(t)&&(t.closePath(),this._renderPaintInOrder(t))}}),e.Polygon.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polygon.fromElement=e.Polyline.fromElementGenerator("Polygon"),e.Polygon.fromObject=function(t,i){e.Object._fromObject("Polygon",t,i,"points")})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.array.min,n=e.util.array.max,r=e.util.object.extend,o=e.util.object.clone,s=e.util.toFixed;e.Path?e.warn("fabric.Path is already defined"):(e.Path=e.util.createClass(e.Object,{type:"path",path:null,cacheProperties:e.Object.prototype.cacheProperties.concat("path","fillRule"),stateProperties:e.Object.prototype.stateProperties.concat("path"),initialize:function(t,e){delete(e=o(e||{})).path,this.callSuper("initialize",e),this._setPath(t||[],e)},_setPath:function(t,i){this.path=e.util.makePathSimpler(Array.isArray(t)?t:e.util.parsePath(t)),e.Polyline.prototype._setPositionDimensions.call(this,i||{})},_renderPathCommands:function(t){var e,i=0,n=0,r=0,o=0,s=0,a=0,h=-this.pathOffset.x,c=-this.pathOffset.y;t.beginPath();for(var l=0,u=this.path.length;l<u;++l)switch((e=this.path[l])[0]){case"L":r=e[1],o=e[2],t.lineTo(r+h,o+c);break;case"M":i=r=e[1],n=o=e[2],t.moveTo(r+h,o+c);break;case"C":r=e[5],o=e[6],s=e[3],a=e[4],t.bezierCurveTo(e[1]+h,e[2]+c,s+h,a+c,r+h,o+c);break;case"Q":t.quadraticCurveTo(e[1]+h,e[2]+c,e[3]+h,e[4]+c),r=e[3],o=e[4],s=e[1],a=e[2];break;case"z":case"Z":r=i,o=n,t.closePath()}},_render:function(t){this._renderPathCommands(t),this._renderPaintInOrder(t)},toString:function(){return"#<fabric.Path ("+this.complexity()+'): { "top": '+this.top+', "left": '+this.left+" }>"},toObject:function(t){return r(this.callSuper("toObject",t),{path:this.path.map((function(t){return t.slice()}))})},toDatalessObject:function(t){var e=this.toObject(["sourcePath"].concat(t));return e.sourcePath&&delete e.path,e},_toSVG:function(){return["<path ","COMMON_PARTS",'d="',e.util.joinPath(this.path),'" stroke-linecap="round" ',"/>\n"]},_getOffsetTransform:function(){var t=e.Object.NUM_FRACTION_DIGITS;return" translate("+s(-this.pathOffset.x,t)+", "+s(-this.pathOffset.y,t)+")"},toClipPathSVG:function(t){var e=this._getOffsetTransform();return"\t"+this._createBaseClipPathSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},toSVG:function(t){var e=this._getOffsetTransform();return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},complexity:function(){return this.path.length},_calcDimensions:function(){for(var t,r,o=[],s=[],a=0,h=0,c=0,l=0,u=0,f=this.path.length;u<f;++u){switch((t=this.path[u])[0]){case"L":c=t[1],l=t[2],r=[];break;case"M":a=c=t[1],h=l=t[2],r=[];break;case"C":r=e.util.getBoundsOfCurve(c,l,t[1],t[2],t[3],t[4],t[5],t[6]),c=t[5],l=t[6];break;case"Q":r=e.util.getBoundsOfCurve(c,l,t[1],t[2],t[1],t[2],t[3],t[4]),c=t[3],l=t[4];break;case"z":case"Z":c=a,l=h}r.forEach((function(t){o.push(t.x),s.push(t.y)})),o.push(c),s.push(l)}var d=i(o)||0,p=i(s)||0;return{left:d,top:p,width:(n(o)||0)-d,height:(n(s)||0)-p}}}),e.Path.fromObject=function(t,i){if("string"==typeof t.sourcePath){var n=t.sourcePath;e.loadSVGFromURL(n,(function(e){var n=e[0];n.setOptions(t),i&&i(n)}))}else e.Object._fromObject("Path",t,i,"path")},e.Path.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(["d"]),e.Path.fromElement=function(t,i,n){var o=e.parseAttributes(t,e.Path.ATTRIBUTE_NAMES);o.fromSVG=!0,i(new e.Path(o.d,r(o,n)))})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.array.min,n=e.util.array.max;e.Group||(e.Group=e.util.createClass(e.Object,e.Collection,{type:"group",strokeWidth:0,subTargetCheck:!1,cacheProperties:[],useSetOnGroup:!1,initialize:function(t,e,i){e=e||{},this._objects=[],i&&this.callSuper("initialize",e),this._objects=t||[];for(var n=this._objects.length;n--;)this._objects[n].group=this;if(i)this._updateObjectsACoords();else{var r=e&&e.centerPoint;void 0!==e.originX&&(this.originX=e.originX),void 0!==e.originY&&(this.originY=e.originY),r||this._calcBounds(),this._updateObjectsCoords(r),delete e.centerPoint,this.callSuper("initialize",e)}this.setCoords()},_updateObjectsACoords:function(){for(var t=this._objects.length;t--;)this._objects[t].setCoords(!0)},_updateObjectsCoords:function(t){t=t||this.getCenterPoint();for(var e=this._objects.length;e--;)this._updateObjectCoords(this._objects[e],t)},_updateObjectCoords:function(t,e){var i=t.left,n=t.top;t.set({left:i-e.x,top:n-e.y}),t.group=this,t.setCoords(!0)},toString:function(){return"#<fabric.Group: ("+this.complexity()+")>"},addWithUpdate:function(t){var i=!!this.group;return this._restoreObjectsState(),e.util.resetObjectTransform(this),t&&(i&&e.util.removeTransformFromObject(t,this.group.calcTransformMatrix()),this._objects.push(t),t.group=this,t._set("canvas",this.canvas)),this._calcBounds(),this._updateObjectsCoords(),this.dirty=!0,i?this.group.addWithUpdate():this.setCoords(),this},removeWithUpdate:function(t){return this._restoreObjectsState(),e.util.resetObjectTransform(this),this.remove(t),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},_onObjectAdded:function(t){this.dirty=!0,t.group=this,t._set("canvas",this.canvas)},_onObjectRemoved:function(t){this.dirty=!0,delete t.group},_set:function(t,i){var n=this._objects.length;if(this.useSetOnGroup)for(;n--;)this._objects[n].setOnGroup(t,i);if("canvas"===t)for(;n--;)this._objects[n]._set(t,i);e.Object.prototype._set.call(this,t,i)},toObject:function(t){var i=this.includeDefaultValues,n=this._objects.filter((function(t){return!t.excludeFromExport})).map((function(e){var n=e.includeDefaultValues;e.includeDefaultValues=i;var r=e.toObject(t);return e.includeDefaultValues=n,r})),r=e.Object.prototype.toObject.call(this,t);return r.objects=n,r},toDatalessObject:function(t){var i,n=this.sourcePath;if(n)i=n;else{var r=this.includeDefaultValues;i=this._objects.map((function(e){var i=e.includeDefaultValues;e.includeDefaultValues=r;var n=e.toDatalessObject(t);return e.includeDefaultValues=i,n}))}var o=e.Object.prototype.toDatalessObject.call(this,t);return o.objects=i,o},render:function(t){this._transformDone=!0,this.callSuper("render",t),this._transformDone=!1},shouldCache:function(){var t=e.Object.prototype.shouldCache.call(this);if(t)for(var i=0,n=this._objects.length;i<n;i++)if(this._objects[i].willDrawShadow())return this.ownCaching=!1,!1;return t},willDrawShadow:function(){if(e.Object.prototype.willDrawShadow.call(this))return!0;for(var t=0,i=this._objects.length;t<i;t++)if(this._objects[t].willDrawShadow())return!0;return!1},isOnACache:function(){return this.ownCaching||this.group&&this.group.isOnACache()},drawObject:function(t){for(var e=0,i=this._objects.length;e<i;e++)this._objects[e].render(t);this._drawClipPath(t,this.clipPath)},isCacheDirty:function(t){if(this.callSuper("isCacheDirty",t))return!0;if(!this.statefullCache)return!1;for(var e=0,i=this._objects.length;e<i;e++)if(this._objects[e].isCacheDirty(!0)){if(this._cacheCanvas){var n=this.cacheWidth/this.zoomX,r=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-n/2,-r/2,n,r)}return!0}return!1},_restoreObjectsState:function(){var t=this.calcOwnMatrix();return this._objects.forEach((function(i){e.util.addTransformToObject(i,t),delete i.group,i.setCoords()})),this},destroy:function(){return this._objects.forEach((function(t){t.set("dirty",!0)})),this._restoreObjectsState()},dispose:function(){this.callSuper("dispose"),this.forEachObject((function(t){t.dispose&&t.dispose()})),this._objects=[]},toActiveSelection:function(){if(this.canvas){var t=this._objects,i=this.canvas;this._objects=[];var n=this.toObject();delete n.objects;var r=new e.ActiveSelection([]);return r.set(n),r.type="activeSelection",i.remove(this),t.forEach((function(t){t.group=r,t.dirty=!0,i.add(t)})),r.canvas=i,r._objects=t,i._activeObject=r,r.setCoords(),r}},ungroupOnCanvas:function(){return this._restoreObjectsState()},setObjectsCoords:function(){return this.forEachObject((function(t){t.setCoords(!0)})),this},_calcBounds:function(t){for(var e,i,n,r,o=[],s=[],a=["tr","br","bl","tl"],h=0,c=this._objects.length,l=a.length;h<c;++h){for(n=(e=this._objects[h]).calcACoords(),r=0;r<l;r++)i=a[r],o.push(n[i].x),s.push(n[i].y);e.aCoords=n}this._getBounds(o,s,t)},_getBounds:function(t,r,o){var s=new e.Point(i(t),i(r)),a=new e.Point(n(t),n(r)),h=s.y||0,c=s.x||0,l=a.x-s.x||0,u=a.y-s.y||0;this.width=l,this.height=u,o||this.setPositionByOrigin({x:c,y:h},"left","top")},_toSVG:function(t){for(var e=["<g ","COMMON_PARTS"," >\n"],i=0,n=this._objects.length;i<n;i++)e.push("\t\t",this._objects[i].toSVG(t));return e.push("</g>\n"),e},getSvgStyles:function(){var t=void 0!==this.opacity&&1!==this.opacity?"opacity: "+this.opacity+";":"",e=this.visible?"":" visibility: hidden;";return[t,this.getSvgFilter(),e].join("")},toClipPathSVG:function(t){for(var e=[],i=0,n=this._objects.length;i<n;i++)e.push("\t",this._objects[i].toClipPathSVG(t));return this._createBaseClipPathSVGMarkup(e,{reviver:t})}}),e.Group.fromObject=function(t,i){var n=t.objects,r=e.util.object.clone(t,!0);delete r.objects,"string"!=typeof n?e.util.enlivenObjects(n,(function(n){var r=e.util.object.clone(t,!0);delete r.objects,e.util.enlivenObjectEnlivables(t,r,(function(){i&&i(new e.Group(n,r,!0))}))})):e.loadSVGFromURL(n,(function(o){var s=e.util.groupSVGElements(o,t,n);s.set(r),i&&i(s)}))})}(e),function(t){"use strict";var e=t.fabric||(t.fabric={});e.ActiveSelection||(e.ActiveSelection=e.util.createClass(e.Group,{type:"activeSelection",initialize:function(t,i){i=i||{},this._objects=t||[];for(var n=this._objects.length;n--;)this._objects[n].group=this;i.originX&&(this.originX=i.originX),i.originY&&(this.originY=i.originY),this._calcBounds(),this._updateObjectsCoords(),e.Object.prototype.initialize.call(this,i),this.setCoords()},toGroup:function(){var t=this._objects.concat();this._objects=[];var i=e.Object.prototype.toObject.call(this),n=new e.Group([]);if(delete i.type,n.set(i),t.forEach((function(t){t.canvas.remove(t),t.group=n})),n._objects=t,!this.canvas)return n;var r=this.canvas;return r.add(n),r._activeObject=n,n.setCoords(),n},onDeselect:function(){return this.destroy(),!1},toString:function(){return"#<fabric.ActiveSelection: ("+this.complexity()+")>"},shouldCache:function(){return!1},isOnACache:function(){return!1},_renderControls:function(t,e,i){t.save(),t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1,this.callSuper("_renderControls",t,e),void 0===(i=i||{}).hasControls&&(i.hasControls=!1),i.forActiveSelection=!0;for(var n=0,r=this._objects.length;n<r;n++)this._objects[n]._renderControls(t,i);t.restore()}}),e.ActiveSelection.fromObject=function(t,i){e.util.enlivenObjects(t.objects,(function(n){delete t.objects,i&&i(new e.ActiveSelection(n,t,!0))}))})}(e),function(t){"use strict";var e=A.util.object.extend;t.fabric||(t.fabric={}),t.fabric.Image?A.warn("fabric.Image is already defined."):(A.Image=A.util.createClass(A.Object,{type:"image",strokeWidth:0,srcFromAttribute:!1,_lastScaleX:1,_lastScaleY:1,_filterScalingX:1,_filterScalingY:1,minimumScaleTrigger:.5,stateProperties:A.Object.prototype.stateProperties.concat("cropX","cropY"),cacheProperties:A.Object.prototype.cacheProperties.concat("cropX","cropY"),cacheKey:"",cropX:0,cropY:0,imageSmoothing:!0,initialize:function(t,e){e||(e={}),this.filters=[],this.cacheKey="texture"+A.Object.__uid++,this.callSuper("initialize",e),this._initElement(t,e)},getElement:function(){return this._element||{}},setElement:function(t,e){return this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._element=t,this._originalElement=t,this._initConfig(e),0!==this.filters.length&&this.applyFilters(),this.resizeFilter&&this.applyResizeFilters(),this},removeTexture:function(t){var e=A.filterBackend;e&&e.evictCachesForKey&&e.evictCachesForKey(t)},dispose:function(){this.callSuper("dispose"),this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+"_filtered"),this._cacheContext=void 0,["_originalElement","_element","_filteredEl","_cacheCanvas"].forEach(function(t){A.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this))},getCrossOrigin:function(){return this._originalElement&&(this._originalElement.crossOrigin||null)},getOriginalSize:function(){var t=this.getElement();return{width:t.naturalWidth||t.width,height:t.naturalHeight||t.height}},_stroke:function(t){if(this.stroke&&0!==this.strokeWidth){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,-i),t.lineTo(e,-i),t.lineTo(e,i),t.lineTo(-e,i),t.lineTo(-e,-i),t.closePath()}},toObject:function(t){var i=[];this.filters.forEach((function(t){t&&i.push(t.toObject())}));var n=e(this.callSuper("toObject",["cropX","cropY"].concat(t)),{src:this.getSrc(),crossOrigin:this.getCrossOrigin(),filters:i});return this.resizeFilter&&(n.resizeFilter=this.resizeFilter.toObject()),n},hasCrop:function(){return this.cropX||this.cropY||this.width<this._element.width||this.height<this._element.height},_toSVG:function(){var t,e=[],i=[],n=this._element,r=-this.width/2,o=-this.height/2,s="",a="";if(!n)return[];if(this.hasCrop()){var h=A.Object.__uid++;e.push('<clipPath id="imageCrop_'+h+'">\n','\t<rect x="'+r+'" y="'+o+'" width="'+this.width+'" height="'+this.height+'" />\n',"</clipPath>\n"),s=' clip-path="url(#imageCrop_'+h+')" '}if(this.imageSmoothing||(a='" image-rendering="optimizeSpeed'),i.push("\t<image ","COMMON_PARTS",'xlink:href="',this.getSvgSrc(!0),'" x="',r-this.cropX,'" y="',o-this.cropY,'" width="',n.width||n.naturalWidth,'" height="',n.height||n.height,a,'"',s,"></image>\n"),this.stroke||this.strokeDashArray){var c=this.fill;this.fill=null,t=["\t<rect ",'x="',r,'" y="',o,'" width="',this.width,'" height="',this.height,'" style="',this.getSvgStyles(),'"/>\n'],this.fill=c}return"fill"!==this.paintFirst?e.concat(t,i):e.concat(i,t)},getSrc:function(t){var e=t?this._element:this._originalElement;return e?e.toDataURL?e.toDataURL():this.srcFromAttribute?e.getAttribute("src"):e.src:this.src||""},setSrc:function(t,e,i){return A.util.loadImage(t,(function(t,n){this.setElement(t,i),this._setWidthHeight(),e&&e(this,n)}),this,i&&i.crossOrigin),this},toString:function(){return'#<fabric.Image: { src: "'+this.getSrc()+'" }>'},applyResizeFilters:function(){var t=this.resizeFilter,e=this.minimumScaleTrigger,i=this.getTotalObjectScaling(),n=i.scaleX,r=i.scaleY,o=this._filteredEl||this._originalElement;if(this.group&&this.set("dirty",!0),!t||n>e&&r>e)return this._element=o,this._filterScalingX=1,this._filterScalingY=1,this._lastScaleX=n,void(this._lastScaleY=r);A.filterBackend||(A.filterBackend=A.initFilterBackend());var s=A.util.createCanvasElement(),a=this._filteredEl?this.cacheKey+"_filtered":this.cacheKey,h=o.width,c=o.height;s.width=h,s.height=c,this._element=s,this._lastScaleX=t.scaleX=n,this._lastScaleY=t.scaleY=r,A.filterBackend.applyFilters([t],o,h,c,this._element,a),this._filterScalingX=s.width/this._originalElement.width,this._filterScalingY=s.height/this._originalElement.height},applyFilters:function(t){if(t=(t=t||this.filters||[]).filter((function(t){return t&&!t.isNeutralState()})),this.set("dirty",!0),this.removeTexture(this.cacheKey+"_filtered"),0===t.length)return this._element=this._originalElement,this._filteredEl=null,this._filterScalingX=1,this._filterScalingY=1,this;var e=this._originalElement,i=e.naturalWidth||e.width,n=e.naturalHeight||e.height;if(this._element===this._originalElement){var r=A.util.createCanvasElement();r.width=i,r.height=n,this._element=r,this._filteredEl=r}else this._element=this._filteredEl,this._filteredEl.getContext("2d").clearRect(0,0,i,n),this._lastScaleX=1,this._lastScaleY=1;return A.filterBackend||(A.filterBackend=A.initFilterBackend()),A.filterBackend.applyFilters(t,this._originalElement,i,n,this._element,this.cacheKey),this._originalElement.width===this._element.width&&this._originalElement.height===this._element.height||(this._filterScalingX=this._element.width/this._originalElement.width,this._filterScalingY=this._element.height/this._originalElement.height),this},_render:function(t){A.util.setImageSmoothing(t,this.imageSmoothing),!0!==this.isMoving&&this.resizeFilter&&this._needsResize()&&this.applyResizeFilters(),this._stroke(t),this._renderPaintInOrder(t)},drawCacheOnCanvas:function(t){A.util.setImageSmoothing(t,this.imageSmoothing),A.Object.prototype.drawCacheOnCanvas.call(this,t)},shouldCache:function(){return this.needsItsOwnCache()},_renderFill:function(t){var e=this._element;if(e){var i=this._filterScalingX,n=this._filterScalingY,r=this.width,o=this.height,s=Math.min,a=Math.max,h=a(this.cropX,0),c=a(this.cropY,0),l=e.naturalWidth||e.width,u=e.naturalHeight||e.height,f=h*i,d=c*n,p=s(r*i,l-f),g=s(o*n,u-d),m=-r/2,v=-o/2,b=s(r,l/i-h),y=s(o,u/n-c);e&&t.drawImage(e,f,d,p,g,m,v,b,y)}},_needsResize:function(){var t=this.getTotalObjectScaling();return t.scaleX!==this._lastScaleX||t.scaleY!==this._lastScaleY},_resetWidthHeight:function(){this.set(this.getOriginalSize())},_initElement:function(t,e){this.setElement(A.util.getById(t),e),A.util.addClass(this.getElement(),A.Image.CSS_CANVAS)},_initConfig:function(t){t||(t={}),this.setOptions(t),this._setWidthHeight(t)},_initFilters:function(t,e){t&&t.length?A.util.enlivenObjects(t,(function(t){e&&e(t)}),"fabric.Image.filters"):e&&e()},_setWidthHeight:function(t){t||(t={});var e=this.getElement();this.width=t.width||e.naturalWidth||e.width||0,this.height=t.height||e.naturalHeight||e.height||0},parsePreserveAspectRatioAttribute:function(){var t,e=A.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio||""),i=this._element.width,n=this._element.height,r=1,o=1,s=0,a=0,h=0,c=0,l=this.width,u=this.height,f={width:l,height:u};return!e||"none"===e.alignX&&"none"===e.alignY?(r=l/i,o=u/n):("meet"===e.meetOrSlice&&(t=(l-i*(r=o=A.util.findScaleToFit(this._element,f)))/2,"Min"===e.alignX&&(s=-t),"Max"===e.alignX&&(s=t),t=(u-n*o)/2,"Min"===e.alignY&&(a=-t),"Max"===e.alignY&&(a=t)),"slice"===e.meetOrSlice&&(t=i-l/(r=o=A.util.findScaleToCover(this._element,f)),"Mid"===e.alignX&&(h=t/2),"Max"===e.alignX&&(h=t),t=n-u/o,"Mid"===e.alignY&&(c=t/2),"Max"===e.alignY&&(c=t),i=l/r,n=u/o)),{width:i,height:n,scaleX:r,scaleY:o,offsetLeft:s,offsetTop:a,cropX:h,cropY:c}}}),A.Image.CSS_CANVAS="canvas-img",A.Image.prototype.getSvgSrc=A.Image.prototype.getSrc,A.Image.fromObject=function(t,e){var i=A.util.object.clone(t);A.util.loadImage(i.src,(function(t,n){n?e&&e(null,!0):A.Image.prototype._initFilters.call(i,i.filters,(function(n){i.filters=n||[],A.Image.prototype._initFilters.call(i,[i.resizeFilter],(function(n){i.resizeFilter=n[0],A.util.enlivenObjectEnlivables(i,i,(function(){var n=new A.Image(t,i);e(n,!1)}))}))}))}),null,i.crossOrigin)},A.Image.fromURL=function(t,e,i){A.util.loadImage(t,(function(t,n){e&&e(new A.Image(t,i),n)}),null,i&&i.crossOrigin)},A.Image.ATTRIBUTE_NAMES=A.SHARED_ATTRIBUTES.concat("x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" ")),A.Image.fromElement=function(t,i,n){var r=A.parseAttributes(t,A.Image.ATTRIBUTE_NAMES);A.Image.fromURL(r["xlink:href"],i,e(n?A.util.object.clone(n):{},r))})}(e),A.util.object.extend(A.Object.prototype,{_getAngleValueForStraighten:function(){var t=this.angle%360;return t>0?90*Math.round((t-1)/90):90*Math.round(t/90)},straighten:function(){return this.rotate(this._getAngleValueForStraighten())},fxStraighten:function(t){var e=function(){},i=(t=t||{}).onComplete||e,n=t.onChange||e,r=this;return A.util.animate({target:this,startValue:this.get("angle"),endValue:this._getAngleValueForStraighten(),duration:this.FX_DURATION,onChange:function(t){r.rotate(t),n()},onComplete:function(){r.setCoords(),i()}})}}),A.util.object.extend(A.StaticCanvas.prototype,{straightenObject:function(t){return t.straighten(),this.requestRenderAll(),this},fxStraightenObject:function(t){return t.fxStraighten({onChange:this.requestRenderAllBound})}}),function(){"use strict";function t(t,e){var i="precision "+e+" float;\nvoid main(){}",n=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(n,i),t.compileShader(n),!!t.getShaderParameter(n,t.COMPILE_STATUS)}function e(t){t&&t.tileSize&&(this.tileSize=t.tileSize),this.setupGLContext(this.tileSize,this.tileSize),this.captureGPUInfo()}A.isWebglSupported=function(e){if(A.isLikelyNode)return!1;e=e||A.WebglFilterBackend.prototype.tileSize;var i=document.createElement("canvas"),n=i.getContext("webgl")||i.getContext("experimental-webgl"),r=!1;if(n){A.maxTextureSize=n.getParameter(n.MAX_TEXTURE_SIZE),r=A.maxTextureSize>=e;for(var o=["highp","mediump","lowp"],s=0;s<3;s++)if(t(n,o[s])){A.webGlPrecision=o[s];break}}return this.isSupported=r,r},A.WebglFilterBackend=e,e.prototype={tileSize:2048,resources:{},setupGLContext:function(t,e){this.dispose(),this.createWebGLCanvas(t,e),this.aPosition=new Float32Array([0,0,0,1,1,0,1,1]),this.chooseFastestCopyGLTo2DMethod(t,e)},chooseFastestCopyGLTo2DMethod:function(t,e){var i,n=void 0!==window.performance;try{new ImageData(1,1),i=!0}catch(t){i=!1}var r="undefined"!=typeof ArrayBuffer,o="undefined"!=typeof Uint8ClampedArray;if(n&&i&&r&&o){var s=A.util.createCanvasElement(),a=new ArrayBuffer(t*e*4);if(A.forceGLPutImageData)return this.imageBuffer=a,void(this.copyGLTo2D=T);var h,c,l={imageBuffer:a,destinationWidth:t,destinationHeight:e,targetCanvas:s};s.width=t,s.height=e,h=window.performance.now(),P.call(l,this.gl,l),c=window.performance.now()-h,h=window.performance.now(),T.call(l,this.gl,l),c>window.performance.now()-h?(this.imageBuffer=a,this.copyGLTo2D=T):this.copyGLTo2D=P}},createWebGLCanvas:function(t,e){var i=A.util.createCanvasElement();i.width=t,i.height=e;var n={alpha:!0,premultipliedAlpha:!1,depth:!1,stencil:!1,antialias:!1},r=i.getContext("webgl",n);r||(r=i.getContext("experimental-webgl",n)),r&&(r.clearColor(0,0,0,0),this.canvas=i,this.gl=r)},applyFilters:function(t,e,i,n,r,o){var s,a=this.gl;o&&(s=this.getCachedTexture(o,e));var h={originalWidth:e.width||e.originalWidth,originalHeight:e.height||e.originalHeight,sourceWidth:i,sourceHeight:n,destinationWidth:i,destinationHeight:n,context:a,sourceTexture:this.createTexture(a,i,n,!s&&e),targetTexture:this.createTexture(a,i,n),originalTexture:s||this.createTexture(a,i,n,!s&&e),passes:t.length,webgl:!0,aPosition:this.aPosition,programCache:this.programCache,pass:0,filterBackend:this,targetCanvas:r},c=a.createFramebuffer();return a.bindFramebuffer(a.FRAMEBUFFER,c),t.forEach((function(t){t&&t.applyTo(h)})),function(t){var e=t.targetCanvas,i=e.width,n=e.height,r=t.destinationWidth,o=t.destinationHeight;i===r&&n===o||(e.width=r,e.height=o)}(h),this.copyGLTo2D(a,h),a.bindTexture(a.TEXTURE_2D,null),a.deleteTexture(h.sourceTexture),a.deleteTexture(h.targetTexture),a.deleteFramebuffer(c),r.getContext("2d").setTransform(1,0,0,1,0,0),h},dispose:function(){this.canvas&&(this.canvas=null,this.gl=null),this.clearWebGLCaches()},clearWebGLCaches:function(){this.programCache={},this.textureCache={}},createTexture:function(t,e,i,n){var r=t.createTexture();return t.bindTexture(t.TEXTURE_2D,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),n?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e,i,0,t.RGBA,t.UNSIGNED_BYTE,null),r},getCachedTexture:function(t,e){if(this.textureCache[t])return this.textureCache[t];var i=this.createTexture(this.gl,e.width,e.height,e);return this.textureCache[t]=i,i},evictCachesForKey:function(t){this.textureCache[t]&&(this.gl.deleteTexture(this.textureCache[t]),delete this.textureCache[t])},copyGLTo2D:P,captureGPUInfo:function(){if(this.gpuInfo)return this.gpuInfo;var t=this.gl,e={renderer:"",vendor:""};if(!t)return e;var i=t.getExtension("WEBGL_debug_renderer_info");if(i){var n=t.getParameter(i.UNMASKED_RENDERER_WEBGL),r=t.getParameter(i.UNMASKED_VENDOR_WEBGL);n&&(e.renderer=n.toLowerCase()),r&&(e.vendor=r.toLowerCase())}return this.gpuInfo=e,e}}}(),function(){"use strict";var t=function(){};function e(){}A.Canvas2dFilterBackend=e,e.prototype={evictCachesForKey:t,dispose:t,clearWebGLCaches:t,resources:{},applyFilters:function(t,e,i,n,r){var o=r.getContext("2d");o.drawImage(e,0,0,i,n);var s={sourceWidth:i,sourceHeight:n,imageData:o.getImageData(0,0,i,n),originalEl:e,originalImageData:o.getImageData(0,0,i,n),canvasEl:r,ctx:o,filterBackend:this};return t.forEach((function(t){t.applyTo(s)})),s.imageData.width===i&&s.imageData.height===n||(r.width=s.imageData.width,r.height=s.imageData.height),o.putImageData(s.imageData,0,0),s}}}(),A.Image=A.Image||{},A.Image.filters=A.Image.filters||{},A.Image.filters.BaseFilter=A.util.createClass({type:"BaseFilter",vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:"precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",initialize:function(t){t&&this.setOptions(t)},setOptions:function(t){for(var e in t)this[e]=t[e]},createProgram:function(t,e,i){e=e||this.fragmentSource,i=i||this.vertexSource,"highp"!==A.webGlPrecision&&(e=e.replace(/precision highp float/g,"precision "+A.webGlPrecision+" float"));var n=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(n,i),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error("Vertex shader compile error for "+this.type+": "+t.getShaderInfoLog(n));var r=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error("Fragment shader compile error for "+this.type+": "+t.getShaderInfoLog(r));var o=t.createProgram();if(t.attachShader(o,n),t.attachShader(o,r),t.linkProgram(o),!t.getProgramParameter(o,t.LINK_STATUS))throw new Error('Shader link error for "${this.type}" '+t.getProgramInfoLog(o));var s=this.getAttributeLocations(t,o),a=this.getUniformLocations(t,o)||{};return a.uStepW=t.getUniformLocation(o,"uStepW"),a.uStepH=t.getUniformLocation(o,"uStepH"),{program:o,attributeLocations:s,uniformLocations:a}},getAttributeLocations:function(t,e){return{aPosition:t.getAttribLocation(e,"aPosition")}},getUniformLocations:function(){return{}},sendAttributeData:function(t,e,i){var n=e.aPosition,r=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,r),t.enableVertexAttribArray(n),t.vertexAttribPointer(n,2,t.FLOAT,!1,0,0),t.bufferData(t.ARRAY_BUFFER,i,t.STATIC_DRAW)},_setupFrameBuffer:function(t){var e,i,n=t.context;t.passes>1?(e=t.destinationWidth,i=t.destinationHeight,t.sourceWidth===e&&t.sourceHeight===i||(n.deleteTexture(t.targetTexture),t.targetTexture=t.filterBackend.createTexture(n,e,i)),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t.targetTexture,0)):(n.bindFramebuffer(n.FRAMEBUFFER,null),n.finish())},_swapTextures:function(t){t.passes--,t.pass++;var e=t.targetTexture;t.targetTexture=t.sourceTexture,t.sourceTexture=e},isNeutralState:function(){var t=this.mainParameter,e=A.Image.filters[this.type].prototype;if(t){if(Array.isArray(e[t])){for(var i=e[t].length;i--;)if(this[t][i]!==e[t][i])return!1;return!0}return e[t]===this[t]}return!1},applyTo:function(t){t.webgl?(this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},retrieveShader:function(t){return t.programCache.hasOwnProperty(this.type)||(t.programCache[this.type]=this.createProgram(t.context)),t.programCache[this.type]},applyToWebGL:function(t){var e=t.context,i=this.retrieveShader(t);0===t.pass&&t.originalTexture?e.bindTexture(e.TEXTURE_2D,t.originalTexture):e.bindTexture(e.TEXTURE_2D,t.sourceTexture),e.useProgram(i.program),this.sendAttributeData(e,i.attributeLocations,t.aPosition),e.uniform1f(i.uniformLocations.uStepW,1/t.sourceWidth),e.uniform1f(i.uniformLocations.uStepH,1/t.sourceHeight),this.sendUniformData(e,i.uniformLocations),e.viewport(0,0,t.destinationWidth,t.destinationHeight),e.drawArrays(e.TRIANGLE_STRIP,0,4)},bindAdditionalTexture:function(t,e,i){t.activeTexture(i),t.bindTexture(t.TEXTURE_2D,e),t.activeTexture(t.TEXTURE0)},unbindAdditionalTexture:function(t,e){t.activeTexture(e),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE0)},getMainParameter:function(){return this[this.mainParameter]},setMainParameter:function(t){this[this.mainParameter]=t},sendUniformData:function(){},createHelpLayer:function(t){if(!t.helpLayer){var e=document.createElement("canvas");e.width=t.sourceWidth,e.height=t.sourceHeight,t.helpLayer=e}},toObject:function(){var t={type:this.type},e=this.mainParameter;return e&&(t[e]=this[e]),t},toJSON:function(){return this.toObject()}}),A.Image.filters.BaseFilter.fromObject=function(t,e){var i=new A.Image.filters[t.type](t);return e&&e(i),i},function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.ColorMatrix=n(i.BaseFilter,{type:"ColorMatrix",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",matrix:[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],mainParameter:"matrix",colorsOnly:!0,initialize:function(t){this.callSuper("initialize",t),this.matrix=this.matrix.slice(0)},applyTo2d:function(t){var e,i,n,r,o,s=t.imageData.data,a=s.length,h=this.matrix,c=this.colorsOnly;for(o=0;o<a;o+=4)e=s[o],i=s[o+1],n=s[o+2],c?(s[o]=e*h[0]+i*h[1]+n*h[2]+255*h[4],s[o+1]=e*h[5]+i*h[6]+n*h[7]+255*h[9],s[o+2]=e*h[10]+i*h[11]+n*h[12]+255*h[14]):(r=s[o+3],s[o]=e*h[0]+i*h[1]+n*h[2]+r*h[3]+255*h[4],s[o+1]=e*h[5]+i*h[6]+n*h[7]+r*h[8]+255*h[9],s[o+2]=e*h[10]+i*h[11]+n*h[12]+r*h[13]+255*h[14],s[o+3]=e*h[15]+i*h[16]+n*h[17]+r*h[18]+255*h[19])},getUniformLocations:function(t,e){return{uColorMatrix:t.getUniformLocation(e,"uColorMatrix"),uConstants:t.getUniformLocation(e,"uConstants")}},sendUniformData:function(t,e){var i=this.matrix,n=[i[0],i[1],i[2],i[3],i[5],i[6],i[7],i[8],i[10],i[11],i[12],i[13],i[15],i[16],i[17],i[18]],r=[i[4],i[9],i[14],i[19]];t.uniformMatrix4fv(e.uColorMatrix,!1,n),t.uniform4fv(e.uConstants,r)}}),e.Image.filters.ColorMatrix.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Brightness=n(i.BaseFilter,{type:"Brightness",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",brightness:0,mainParameter:"brightness",applyTo2d:function(t){if(0!==this.brightness){var e,i=t.imageData.data,n=i.length,r=Math.round(255*this.brightness);for(e=0;e<n;e+=4)i[e]=i[e]+r,i[e+1]=i[e+1]+r,i[e+2]=i[e+2]+r}},getUniformLocations:function(t,e){return{uBrightness:t.getUniformLocation(e,"uBrightness")}},sendUniformData:function(t,e){t.uniform1f(e.uBrightness,this.brightness)}}),e.Image.filters.Brightness.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.Image.filters,r=e.util.createClass;n.Convolute=r(n.BaseFilter,{type:"Convolute",opaque:!1,matrix:[0,0,0,0,1,0,0,0,0],fragmentSource:{Convolute_3_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_3_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_5_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_5_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_7_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_7_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",Convolute_9_1:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",Convolute_9_0:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"},retrieveShader:function(t){var e=Math.sqrt(this.matrix.length),i=this.type+"_"+e+"_"+(this.opaque?1:0),n=this.fragmentSource[i];return t.programCache.hasOwnProperty(i)||(t.programCache[i]=this.createProgram(t.context,n)),t.programCache[i]},applyTo2d:function(t){var e,i,n,r,o,s,a,h,c,l,u,f,d,p=t.imageData,g=p.data,m=this.matrix,v=Math.round(Math.sqrt(m.length)),b=Math.floor(v/2),y=p.width,w=p.height,x=t.ctx.createImageData(y,w),_=x.data,S=this.opaque?1:0;for(u=0;u<w;u++)for(l=0;l<y;l++){for(o=4*(u*y+l),e=0,i=0,n=0,r=0,d=0;d<v;d++)for(f=0;f<v;f++)s=l+f-b,(a=u+d-b)<0||a>=w||s<0||s>=y||(h=4*(a*y+s),c=m[d*v+f],e+=g[h]*c,i+=g[h+1]*c,n+=g[h+2]*c,S||(r+=g[h+3]*c));_[o]=e,_[o+1]=i,_[o+2]=n,_[o+3]=S?g[o+3]:r}t.imageData=x},getUniformLocations:function(t,e){return{uMatrix:t.getUniformLocation(e,"uMatrix"),uOpaque:t.getUniformLocation(e,"uOpaque"),uHalfSize:t.getUniformLocation(e,"uHalfSize"),uSize:t.getUniformLocation(e,"uSize")}},sendUniformData:function(t,e){t.uniform1fv(e.uMatrix,this.matrix)},toObject:function(){return i(this.callSuper("toObject"),{opaque:this.opaque,matrix:this.matrix})}}),e.Image.filters.Convolute.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Grayscale=n(i.BaseFilter,{type:"Grayscale",fragmentSource:{average:"precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",lightness:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",luminosity:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"},mode:"average",mainParameter:"mode",applyTo2d:function(t){var e,i,n=t.imageData.data,r=n.length,o=this.mode;for(e=0;e<r;e+=4)"average"===o?i=(n[e]+n[e+1]+n[e+2])/3:"lightness"===o?i=(Math.min(n[e],n[e+1],n[e+2])+Math.max(n[e],n[e+1],n[e+2]))/2:"luminosity"===o&&(i=.21*n[e]+.72*n[e+1]+.07*n[e+2]),n[e]=i,n[e+1]=i,n[e+2]=i},retrieveShader:function(t){var e=this.type+"_"+this.mode;if(!t.programCache.hasOwnProperty(e)){var i=this.fragmentSource[this.mode];t.programCache[e]=this.createProgram(t.context,i)}return t.programCache[e]},getUniformLocations:function(t,e){return{uMode:t.getUniformLocation(e,"uMode")}},sendUniformData:function(t,e){t.uniform1i(e.uMode,1)},isNeutralState:function(){return!1}}),e.Image.filters.Grayscale.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Invert=n(i.BaseFilter,{type:"Invert",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",invert:!0,mainParameter:"invert",applyTo2d:function(t){var e,i=t.imageData.data,n=i.length;for(e=0;e<n;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},isNeutralState:function(){return!this.invert},getUniformLocations:function(t,e){return{uInvert:t.getUniformLocation(e,"uInvert")}},sendUniformData:function(t,e){t.uniform1i(e.uInvert,this.invert)}}),e.Image.filters.Invert.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.Image.filters,r=e.util.createClass;n.Noise=r(n.BaseFilter,{type:"Noise",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",mainParameter:"noise",noise:0,applyTo2d:function(t){if(0!==this.noise){var e,i,n=t.imageData.data,r=n.length,o=this.noise;for(e=0,r=n.length;e<r;e+=4)i=(.5-Math.random())*o,n[e]+=i,n[e+1]+=i,n[e+2]+=i}},getUniformLocations:function(t,e){return{uNoise:t.getUniformLocation(e,"uNoise"),uSeed:t.getUniformLocation(e,"uSeed")}},sendUniformData:function(t,e){t.uniform1f(e.uNoise,this.noise/255),t.uniform1f(e.uSeed,Math.random())},toObject:function(){return i(this.callSuper("toObject"),{noise:this.noise})}}),e.Image.filters.Noise.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Pixelate=n(i.BaseFilter,{type:"Pixelate",blocksize:4,mainParameter:"blocksize",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",applyTo2d:function(t){var e,i,n,r,o,s,a,h,c,l,u,f=t.imageData,d=f.data,p=f.height,g=f.width;for(i=0;i<p;i+=this.blocksize)for(n=0;n<g;n+=this.blocksize)for(r=d[e=4*i*g+4*n],o=d[e+1],s=d[e+2],a=d[e+3],l=Math.min(i+this.blocksize,p),u=Math.min(n+this.blocksize,g),h=i;h<l;h++)for(c=n;c<u;c++)d[e=4*h*g+4*c]=r,d[e+1]=o,d[e+2]=s,d[e+3]=a},isNeutralState:function(){return 1===this.blocksize},getUniformLocations:function(t,e){return{uBlocksize:t.getUniformLocation(e,"uBlocksize"),uStepW:t.getUniformLocation(e,"uStepW"),uStepH:t.getUniformLocation(e,"uStepH")}},sendUniformData:function(t,e){t.uniform1f(e.uBlocksize,this.blocksize)}}),e.Image.filters.Pixelate.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,n=e.Image.filters,r=e.util.createClass;n.RemoveColor=r(n.BaseFilter,{type:"RemoveColor",color:"#FFFFFF",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",distance:.02,useAlpha:!1,applyTo2d:function(t){var i,n,r,o,s=t.imageData.data,a=255*this.distance,h=new e.Color(this.color).getSource(),c=[h[0]-a,h[1]-a,h[2]-a],l=[h[0]+a,h[1]+a,h[2]+a];for(i=0;i<s.length;i+=4)n=s[i],r=s[i+1],o=s[i+2],n>c[0]&&r>c[1]&&o>c[2]&&n<l[0]&&r<l[1]&&o<l[2]&&(s[i+3]=0)},getUniformLocations:function(t,e){return{uLow:t.getUniformLocation(e,"uLow"),uHigh:t.getUniformLocation(e,"uHigh")}},sendUniformData:function(t,i){var n=new e.Color(this.color).getSource(),r=parseFloat(this.distance),o=[0+n[0]/255-r,0+n[1]/255-r,0+n[2]/255-r,1],s=[n[0]/255+r,n[1]/255+r,n[2]/255+r,1];t.uniform4fv(i.uLow,o),t.uniform4fv(i.uHigh,s)},toObject:function(){return i(this.callSuper("toObject"),{color:this.color,distance:this.distance})}}),e.Image.filters.RemoveColor.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass,r={Brownie:[.5997,.34553,-.27082,0,.186,-.0377,.86095,.15059,0,-.1449,.24113,-.07441,.44972,0,-.02965,0,0,0,1,0],Vintage:[.62793,.32021,-.03965,0,.03784,.02578,.64411,.03259,0,.02926,.0466,-.08512,.52416,0,.02023,0,0,0,1,0],Kodachrome:[1.12855,-.39673,-.03992,0,.24991,-.16404,1.08352,-.05498,0,.09698,-.16786,-.56034,1.60148,0,.13972,0,0,0,1,0],Technicolor:[1.91252,-.85453,-.09155,0,.04624,-.30878,1.76589,-.10601,0,-.27589,-.2311,-.75018,1.84759,0,.12137,0,0,0,1,0],Polaroid:[1.438,-.062,-.062,0,0,-.122,1.378,-.122,0,0,-.016,-.016,1.483,0,0,0,0,0,1,0],Sepia:[.393,.769,.189,0,0,.349,.686,.168,0,0,.272,.534,.131,0,0,0,0,0,1,0],BlackWhite:[1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,0,0,0,1,0]};for(var o in r)i[o]=n(i.ColorMatrix,{type:o,matrix:r[o],mainParameter:!1,colorsOnly:!0}),e.Image.filters[o].fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric,i=e.Image.filters,n=e.util.createClass;i.BlendColor=n(i.BaseFilter,{type:"BlendColor",color:"#F95C63",mode:"multiply",alpha:1,fragmentSource:{multiply:"gl_FragColor.rgb *= uColor.rgb;\n",screen:"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",add:"gl_FragColor.rgb += uColor.rgb;\n",diff:"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",subtract:"gl_FragColor.rgb -= uColor.rgb;\n",lighten:"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",darken:"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",exclusion:"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",overlay:"if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",tint:"gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"},buildSource:function(t){return"precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n"+this.fragmentSource[t]+"}\n}"},retrieveShader:function(t){var e,i=this.type+"_"+this.mode;return t.programCache.hasOwnProperty(i)||(e=this.buildSource(this.mode),t.programCache[i]=this.createProgram(t.context,e)),t.programCache[i]},applyTo2d:function(t){var i,n,r,o,s,a,h,c=t.imageData.data,l=c.length,u=1-this.alpha;i=(h=new e.Color(this.color).getSource())[0]*this.alpha,n=h[1]*this.alpha,r=h[2]*this.alpha;for(var f=0;f<l;f+=4)switch(o=c[f],s=c[f+1],a=c[f+2],this.mode){case"multiply":c[f]=o*i/255,c[f+1]=s*n/255,c[f+2]=a*r/255;break;case"screen":c[f]=255-(255-o)*(255-i)/255,c[f+1]=255-(255-s)*(255-n)/255,c[f+2]=255-(255-a)*(255-r)/255;break;case"add":c[f]=o+i,c[f+1]=s+n,c[f+2]=a+r;break;case"diff":case"difference":c[f]=Math.abs(o-i),c[f+1]=Math.abs(s-n),c[f+2]=Math.abs(a-r);break;case"subtract":c[f]=o-i,c[f+1]=s-n,c[f+2]=a-r;break;case"darken":c[f]=Math.min(o,i),c[f+1]=Math.min(s,n),c[f+2]=Math.min(a,r);break;case"lighten":c[f]=Math.max(o,i),c[f+1]=Math.max(s,n),c[f+2]=Math.max(a,r);break;case"overlay":c[f]=i<128?2*o*i/255:255-2*(255-o)*(255-i)/255,c[f+1]=n<128?2*s*n/255:255-2*(255-s)*(255-n)/255,c[f+2]=r<128?2*a*r/255:255-2*(255-a)*(255-r)/255;break;case"exclusion":c[f]=i+o-2*i*o/255,c[f+1]=n+s-2*n*s/255,c[f+2]=r+a-2*r*a/255;break;case"tint":c[f]=i+o*u,c[f+1]=n+s*u,c[f+2]=r+a*u}},getUniformLocations:function(t,e){return{uColor:t.getUniformLocation(e,"uColor")}},sendUniformData:function(t,i){var n=new e.Color(this.color).getSource();n[0]=this.alpha*n[0]/255,n[1]=this.alpha*n[1]/255,n[2]=this.alpha*n[2]/255,n[3]=this.alpha,t.uniform4fv(i.uColor,n)},toObject:function(){return{type:this.type,color:this.color,mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendColor.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric,i=e.Image.filters,n=e.util.createClass;i.BlendImage=n(i.BaseFilter,{type:"BlendImage",image:null,mode:"multiply",alpha:1,vertexSource:"attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",fragmentSource:{multiply:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",mask:"precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"},retrieveShader:function(t){var e=this.type+"_"+this.mode,i=this.fragmentSource[this.mode];return t.programCache.hasOwnProperty(e)||(t.programCache[e]=this.createProgram(t.context,i)),t.programCache[e]},applyToWebGL:function(t){var e=t.context,i=this.createTexture(t.filterBackend,this.image);this.bindAdditionalTexture(e,i,e.TEXTURE1),this.callSuper("applyToWebGL",t),this.unbindAdditionalTexture(e,e.TEXTURE1)},createTexture:function(t,e){return t.getCachedTexture(e.cacheKey,e._element)},calculateMatrix:function(){var t=this.image,e=t._element.width,i=t._element.height;return[1/t.scaleX,0,0,0,1/t.scaleY,0,-t.left/e,-t.top/i,1]},applyTo2d:function(t){var i,n,r,o,s,a,h,c,l,u,f,d=t.imageData,p=t.filterBackend.resources,g=d.data,m=g.length,v=d.width,b=d.height,y=this.image;p.blendImage||(p.blendImage=e.util.createCanvasElement()),u=(l=p.blendImage).getContext("2d"),l.width!==v||l.height!==b?(l.width=v,l.height=b):u.clearRect(0,0,v,b),u.setTransform(y.scaleX,0,0,y.scaleY,y.left,y.top),u.drawImage(y._element,0,0,v,b),f=u.getImageData(0,0,v,b).data;for(var w=0;w<m;w+=4)switch(s=g[w],a=g[w+1],h=g[w+2],c=g[w+3],i=f[w],n=f[w+1],r=f[w+2],o=f[w+3],this.mode){case"multiply":g[w]=s*i/255,g[w+1]=a*n/255,g[w+2]=h*r/255,g[w+3]=c*o/255;break;case"mask":g[w+3]=o}},getUniformLocations:function(t,e){return{uTransformMatrix:t.getUniformLocation(e,"uTransformMatrix"),uImage:t.getUniformLocation(e,"uImage")}},sendUniformData:function(t,e){var i=this.calculateMatrix();t.uniform1i(e.uImage,1),t.uniformMatrix3fv(e.uTransformMatrix,!1,i)},toObject:function(){return{type:this.type,image:this.image&&this.image.toObject(),mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendImage.fromObject=function(t,i){e.Image.fromObject(t.image,(function(n){var r=e.util.object.clone(t);r.image=n,i(new e.Image.filters.BlendImage(r))}))}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=Math.pow,n=Math.floor,r=Math.sqrt,o=Math.abs,s=Math.round,a=Math.sin,h=Math.ceil,c=e.Image.filters,l=e.util.createClass;c.Resize=l(c.BaseFilter,{type:"Resize",resizeType:"hermite",scaleX:1,scaleY:1,lanczosLobes:3,getUniformLocations:function(t,e){return{uDelta:t.getUniformLocation(e,"uDelta"),uTaps:t.getUniformLocation(e,"uTaps")}},sendUniformData:function(t,e){t.uniform2fv(e.uDelta,this.horizontal?[1/this.width,0]:[0,1/this.height]),t.uniform1fv(e.uTaps,this.taps)},retrieveShader:function(t){var e=this.getFilterWindow(),i=this.type+"_"+e;if(!t.programCache.hasOwnProperty(i)){var n=this.generateShader(e);t.programCache[i]=this.createProgram(t.context,n)}return t.programCache[i]},getFilterWindow:function(){var t=this.tempScale;return Math.ceil(this.lanczosLobes/t)},getTaps:function(){for(var t=this.lanczosCreate(this.lanczosLobes),e=this.tempScale,i=this.getFilterWindow(),n=new Array(i),r=1;r<=i;r++)n[r-1]=t(r*e);return n},generateShader:function(t){for(var e=new Array(t),i=this.fragmentSourceTOP,n=1;n<=t;n++)e[n-1]=n+".0 * uDelta";return i+="uniform float uTaps["+t+"];\n",i+="void main() {\n",i+="  vec4 color = texture2D(uTexture, vTexCoord);\n",i+="  float sum = 1.0;\n",e.forEach((function(t,e){i+="  color += texture2D(uTexture, vTexCoord + "+t+") * uTaps["+e+"];\n",i+="  color += texture2D(uTexture, vTexCoord - "+t+") * uTaps["+e+"];\n",i+="  sum += 2.0 * uTaps["+e+"];\n"})),i+="  gl_FragColor = color / sum;\n",i+="}"},fragmentSourceTOP:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",applyTo:function(t){t.webgl?(t.passes++,this.width=t.sourceWidth,this.horizontal=!0,this.dW=Math.round(this.width*this.scaleX),this.dH=t.sourceHeight,this.tempScale=this.dW/this.width,this.taps=this.getTaps(),t.destinationWidth=this.dW,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceWidth=t.destinationWidth,this.height=t.sourceHeight,this.horizontal=!1,this.dH=Math.round(this.height*this.scaleY),this.tempScale=this.dH/this.height,this.taps=this.getTaps(),t.destinationHeight=this.dH,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceHeight=t.destinationHeight):this.applyTo2d(t)},isNeutralState:function(){return 1===this.scaleX&&1===this.scaleY},lanczosCreate:function(t){return function(e){if(e>=t||e<=-t)return 0;if(e<1.1920929e-7&&e>-1.1920929e-7)return 1;var i=(e*=Math.PI)/t;return a(e)/e*a(i)/i}},applyTo2d:function(t){var e=t.imageData,i=this.scaleX,n=this.scaleY;this.rcpScaleX=1/i,this.rcpScaleY=1/n;var r,o=e.width,a=e.height,h=s(o*i),c=s(a*n);"sliceHack"===this.resizeType?r=this.sliceByTwo(t,o,a,h,c):"hermite"===this.resizeType?r=this.hermiteFastResize(t,o,a,h,c):"bilinear"===this.resizeType?r=this.bilinearFiltering(t,o,a,h,c):"lanczos"===this.resizeType&&(r=this.lanczosResize(t,o,a,h,c)),t.imageData=r},sliceByTwo:function(t,i,r,o,s){var a,h,c=t.imageData,l=.5,u=!1,f=!1,d=i*l,p=r*l,g=e.filterBackend.resources,m=0,v=0,b=i,y=0;for(g.sliceByTwo||(g.sliceByTwo=document.createElement("canvas")),((a=g.sliceByTwo).width<1.5*i||a.height<r)&&(a.width=1.5*i,a.height=r),(h=a.getContext("2d")).clearRect(0,0,1.5*i,r),h.putImageData(c,0,0),o=n(o),s=n(s);!u||!f;)i=d,r=p,o<n(d*l)?d=n(d*l):(d=o,u=!0),s<n(p*l)?p=n(p*l):(p=s,f=!0),h.drawImage(a,m,v,i,r,b,y,d,p),m=b,v=y,y+=p;return h.getImageData(m,v,o,s)},lanczosResize:function(t,e,s,a,c){var l=t.imageData.data,u=t.ctx.createImageData(a,c),f=u.data,d=this.lanczosCreate(this.lanczosLobes),p=this.rcpScaleX,g=this.rcpScaleY,m=2/this.rcpScaleX,v=2/this.rcpScaleY,b=h(p*this.lanczosLobes/2),y=h(g*this.lanczosLobes/2),w={},x={},_={};return function t(h){var S,C,A,L,P,T,O,k,N,j,F;for(x.x=(h+.5)*p,_.x=n(x.x),S=0;S<c;S++){for(x.y=(S+.5)*g,_.y=n(x.y),P=0,T=0,O=0,k=0,N=0,C=_.x-b;C<=_.x+b;C++)if(!(C<0||C>=e)){j=n(1e3*o(C-x.x)),w[j]||(w[j]={});for(var E=_.y-y;E<=_.y+y;E++)E<0||E>=s||(F=n(1e3*o(E-x.y)),w[j][F]||(w[j][F]=d(r(i(j*m,2)+i(F*v,2))/1e3)),(A=w[j][F])>0&&(P+=A,T+=A*l[L=4*(E*e+C)],O+=A*l[L+1],k+=A*l[L+2],N+=A*l[L+3]))}f[L=4*(S*a+h)]=T/P,f[L+1]=O/P,f[L+2]=k/P,f[L+3]=N/P}return++h<a?t(h):u}(0)},bilinearFiltering:function(t,e,i,r,o){var s,a,h,c,l,u,f,d,p,g=0,m=this.rcpScaleX,v=this.rcpScaleY,b=4*(e-1),y=t.imageData.data,w=t.ctx.createImageData(r,o),x=w.data;for(h=0;h<o;h++)for(c=0;c<r;c++)for(l=m*c-(s=n(m*c)),u=v*h-(a=n(v*h)),p=4*(a*e+s),f=0;f<4;f++)d=y[p+f]*(1-l)*(1-u)+y[p+4+f]*l*(1-u)+y[p+b+f]*u*(1-l)+y[p+b+4+f]*l*u,x[g++]=d;return w},hermiteFastResize:function(t,e,i,s,a){for(var c=this.rcpScaleX,l=this.rcpScaleY,u=h(c/2),f=h(l/2),d=t.imageData.data,p=t.ctx.createImageData(s,a),g=p.data,m=0;m<a;m++)for(var v=0;v<s;v++){for(var b=4*(v+m*s),y=0,w=0,x=0,_=0,S=0,C=0,A=0,L=(m+.5)*l,P=n(m*l);P<(m+1)*l;P++)for(var T=o(L-(P+.5))/f,O=(v+.5)*c,k=T*T,N=n(v*c);N<(v+1)*c;N++){var j=o(O-(N+.5))/u,F=r(k+j*j);F>1&&F<-1||(y=2*F*F*F-3*F*F+1)>0&&(A+=y*d[3+(j=4*(N+P*e))],x+=y,d[j+3]<255&&(y=y*d[j+3]/250),_+=y*d[j],S+=y*d[j+1],C+=y*d[j+2],w+=y)}g[b]=_/w,g[b+1]=S/w,g[b+2]=C/w,g[b+3]=A/x}return p},toObject:function(){return{type:this.type,scaleX:this.scaleX,scaleY:this.scaleY,resizeType:this.resizeType,lanczosLobes:this.lanczosLobes}}}),e.Image.filters.Resize.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Contrast=n(i.BaseFilter,{type:"Contrast",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",contrast:0,mainParameter:"contrast",applyTo2d:function(t){if(0!==this.contrast){var e,i=t.imageData.data,n=i.length,r=Math.floor(255*this.contrast),o=259*(r+255)/(255*(259-r));for(e=0;e<n;e+=4)i[e]=o*(i[e]-128)+128,i[e+1]=o*(i[e+1]-128)+128,i[e+2]=o*(i[e+2]-128)+128}},getUniformLocations:function(t,e){return{uContrast:t.getUniformLocation(e,"uContrast")}},sendUniformData:function(t,e){t.uniform1f(e.uContrast,this.contrast)}}),e.Image.filters.Contrast.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Saturation=n(i.BaseFilter,{type:"Saturation",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",saturation:0,mainParameter:"saturation",applyTo2d:function(t){if(0!==this.saturation){var e,i,n=t.imageData.data,r=n.length,o=-this.saturation;for(e=0;e<r;e+=4)i=Math.max(n[e],n[e+1],n[e+2]),n[e]+=i!==n[e]?(i-n[e])*o:0,n[e+1]+=i!==n[e+1]?(i-n[e+1])*o:0,n[e+2]+=i!==n[e+2]?(i-n[e+2])*o:0}},getUniformLocations:function(t,e){return{uSaturation:t.getUniformLocation(e,"uSaturation")}},sendUniformData:function(t,e){t.uniform1f(e.uSaturation,-this.saturation)}}),e.Image.filters.Saturation.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Vibrance=n(i.BaseFilter,{type:"Vibrance",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform float uVibrance;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat max = max(color.r, max(color.g, color.b));\nfloat avg = (color.r + color.g + color.b) / 3.0;\nfloat amt = (abs(max - avg) * 2.0) * uVibrance;\ncolor.r += max != color.r ? (max - color.r) * amt : 0.00;\ncolor.g += max != color.g ? (max - color.g) * amt : 0.00;\ncolor.b += max != color.b ? (max - color.b) * amt : 0.00;\ngl_FragColor = color;\n}",vibrance:0,mainParameter:"vibrance",applyTo2d:function(t){if(0!==this.vibrance){var e,i,n,r,o=t.imageData.data,s=o.length,a=-this.vibrance;for(e=0;e<s;e+=4)i=Math.max(o[e],o[e+1],o[e+2]),n=(o[e]+o[e+1]+o[e+2])/3,r=2*Math.abs(i-n)/255*a,o[e]+=i!==o[e]?(i-o[e])*r:0,o[e+1]+=i!==o[e+1]?(i-o[e+1])*r:0,o[e+2]+=i!==o[e+2]?(i-o[e+2])*r:0}},getUniformLocations:function(t,e){return{uVibrance:t.getUniformLocation(e,"uVibrance")}},sendUniformData:function(t,e){t.uniform1f(e.uVibrance,-this.vibrance)}}),e.Image.filters.Vibrance.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Blur=n(i.BaseFilter,{type:"Blur",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",blur:0,mainParameter:"blur",applyTo:function(t){t.webgl?(this.aspectRatio=t.sourceWidth/t.sourceHeight,t.passes++,this._setupFrameBuffer(t),this.horizontal=!0,this.applyToWebGL(t),this._swapTextures(t),this._setupFrameBuffer(t),this.horizontal=!1,this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},applyTo2d:function(t){t.imageData=this.simpleBlur(t)},simpleBlur:function(t){var i,n,r=t.filterBackend.resources,o=t.imageData.width,s=t.imageData.height;r.blurLayer1||(r.blurLayer1=e.util.createCanvasElement(),r.blurLayer2=e.util.createCanvasElement()),i=r.blurLayer1,n=r.blurLayer2,i.width===o&&i.height===s||(n.width=i.width=o,n.height=i.height=s);var a,h,c,l,u=i.getContext("2d"),f=n.getContext("2d"),d=.06*this.blur*.5;for(u.putImageData(t.imageData,0,0),f.clearRect(0,0,o,s),l=-15;l<=15;l++)c=d*(h=l/15)*o+(a=(Math.random()-.5)/4),f.globalAlpha=1-Math.abs(h),f.drawImage(i,c,a),u.drawImage(n,0,0),f.globalAlpha=1,f.clearRect(0,0,n.width,n.height);for(l=-15;l<=15;l++)c=d*(h=l/15)*s+(a=(Math.random()-.5)/4),f.globalAlpha=1-Math.abs(h),f.drawImage(i,a,c),u.drawImage(n,0,0),f.globalAlpha=1,f.clearRect(0,0,n.width,n.height);t.ctx.drawImage(i,0,0);var p=t.ctx.getImageData(0,0,i.width,i.height);return u.globalAlpha=1,u.clearRect(0,0,i.width,i.height),p},getUniformLocations:function(t,e){return{delta:t.getUniformLocation(e,"uDelta")}},sendUniformData:function(t,e){var i=this.chooseRightDelta();t.uniform2fv(e.delta,i)},chooseRightDelta:function(){var t,e=1,i=[0,0];return this.horizontal?this.aspectRatio>1&&(e=1/this.aspectRatio):this.aspectRatio<1&&(e=this.aspectRatio),t=e*this.blur*.12,this.horizontal?i[0]=t:i[1]=t,i}}),i.Blur.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Gamma=n(i.BaseFilter,{type:"Gamma",fragmentSource:"precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",gamma:[1,1,1],mainParameter:"gamma",initialize:function(t){this.gamma=[1,1,1],i.BaseFilter.prototype.initialize.call(this,t)},applyTo2d:function(t){var e,i=t.imageData.data,n=this.gamma,r=i.length,o=1/n[0],s=1/n[1],a=1/n[2];for(this.rVals||(this.rVals=new Uint8Array(256),this.gVals=new Uint8Array(256),this.bVals=new Uint8Array(256)),e=0,r=256;e<r;e++)this.rVals[e]=255*Math.pow(e/255,o),this.gVals[e]=255*Math.pow(e/255,s),this.bVals[e]=255*Math.pow(e/255,a);for(e=0,r=i.length;e<r;e+=4)i[e]=this.rVals[i[e]],i[e+1]=this.gVals[i[e+1]],i[e+2]=this.bVals[i[e+2]]},getUniformLocations:function(t,e){return{uGamma:t.getUniformLocation(e,"uGamma")}},sendUniformData:function(t,e){t.uniform3fv(e.uGamma,this.gamma)}}),e.Image.filters.Gamma.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.Composed=n(i.BaseFilter,{type:"Composed",subFilters:[],initialize:function(t){this.callSuper("initialize",t),this.subFilters=this.subFilters.slice(0)},applyTo:function(t){t.passes+=this.subFilters.length-1,this.subFilters.forEach((function(e){e.applyTo(t)}))},toObject:function(){return e.util.object.extend(this.callSuper("toObject"),{subFilters:this.subFilters.map((function(t){return t.toObject()}))})},isNeutralState:function(){return!this.subFilters.some((function(t){return!t.isNeutralState()}))}}),e.Image.filters.Composed.fromObject=function(t,i){var n=(t.subFilters||[]).map((function(t){return new e.Image.filters[t.type](t)})),r=new e.Image.filters.Composed({subFilters:n});return i&&i(r),r}}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.Image.filters,n=e.util.createClass;i.HueRotation=n(i.ColorMatrix,{type:"HueRotation",rotation:0,mainParameter:"rotation",calculateMatrix:function(){var t=this.rotation*Math.PI,i=e.util.cos(t),n=e.util.sin(t),r=1/3,o=Math.sqrt(r)*n,s=1-i;this.matrix=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],this.matrix[0]=i+s/3,this.matrix[1]=r*s-o,this.matrix[2]=r*s+o,this.matrix[5]=r*s+o,this.matrix[6]=i+r*s,this.matrix[7]=r*s-o,this.matrix[10]=r*s-o,this.matrix[11]=r*s+o,this.matrix[12]=i+r*s},isNeutralState:function(t){return this.calculateMatrix(),i.BaseFilter.prototype.isNeutralState.call(this,t)},applyTo:function(t){this.calculateMatrix(),i.BaseFilter.prototype.applyTo.call(this,t)}}),e.Image.filters.HueRotation.fromObject=e.Image.filters.BaseFilter.fromObject}(e),function(t){"use strict";var e=t.fabric||(t.fabric={}),i=e.util.object.clone;if(e.Text)e.warn("fabric.Text is already defined");else{var n="fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles direction path pathStartOffset pathSide pathAlign".split(" ");e.Text=e.util.createClass(e.Object,{_dimensionAffectingProps:["fontSize","fontWeight","fontFamily","fontStyle","lineHeight","text","charSpacing","textAlign","styles","path","pathStartOffset","pathSide","pathAlign"],_reNewline:/\r?\n/,_reSpacesAndTabs:/[ \t\r]/g,_reSpaceAndTab:/[ \t\r]/,_reWords:/\S+/g,type:"text",fontSize:40,fontWeight:"normal",fontFamily:"Times New Roman",underline:!1,overline:!1,linethrough:!1,textAlign:"left",fontStyle:"normal",lineHeight:1.16,superscript:{size:.6,baseline:-.35},subscript:{size:.6,baseline:.11},textBackgroundColor:"",stateProperties:e.Object.prototype.stateProperties.concat(n),cacheProperties:e.Object.prototype.cacheProperties.concat(n),stroke:null,shadow:null,path:null,pathStartOffset:0,pathSide:"left",pathAlign:"baseline",_fontSizeFraction:.222,offsets:{underline:.1,linethrough:-.315,overline:-.88},_fontSizeMult:1.13,charSpacing:0,styles:null,_measuringContext:null,deltaY:0,direction:"ltr",_styleProperties:["stroke","strokeWidth","fill","fontFamily","fontSize","fontWeight","fontStyle","underline","overline","linethrough","deltaY","textBackgroundColor"],__charBounds:[],CACHE_FONT_SIZE:400,MIN_TEXT_WIDTH:2,initialize:function(t,e){this.styles=e&&e.styles||{},this.text=t,this.__skipDimension=!0,this.callSuper("initialize",e),this.path&&this.setPathInfo(),this.__skipDimension=!1,this.initDimensions(),this.setCoords(),this.setupState({propertySet:"_dimensionAffectingProps"})},setPathInfo:function(){var t=this.path;t&&(t.segmentsInfo=e.util.getPathSegmentsInfo(t.path))},getMeasuringContext:function(){return e._measuringContext||(e._measuringContext=this.canvas&&this.canvas.contextCache||e.util.createCanvasElement().getContext("2d")),e._measuringContext},_splitText:function(){var t=this._splitTextIntoLines(this.text);return this.textLines=t.lines,this._textLines=t.graphemeLines,this._unwrappedTextLines=t._unwrappedLines,this._text=t.graphemeText,t},initDimensions:function(){this.__skipDimension||(this._splitText(),this._clearCache(),this.path?(this.width=this.path.width,this.height=this.path.height):(this.width=this.calcTextWidth()||this.cursorWidth||this.MIN_TEXT_WIDTH,this.height=this.calcTextHeight()),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.saveState({propertySet:"_dimensionAffectingProps"}))},enlargeSpaces:function(){for(var t,e,i,n,r,o,s,a=0,h=this._textLines.length;a<h;a++)if(("justify"===this.textAlign||a!==h-1&&!this.isEndOfWrapping(a))&&(n=0,r=this._textLines[a],(e=this.getLineWidth(a))<this.width&&(s=this.textLines[a].match(this._reSpacesAndTabs)))){i=s.length,t=(this.width-e)/i;for(var c=0,l=r.length;c<=l;c++)o=this.__charBounds[a][c],this._reSpaceAndTab.test(r[c])?(o.width+=t,o.kernedWidth+=t,o.left+=n,n+=t):o.left+=n}},isEndOfWrapping:function(t){return t===this._textLines.length-1},missingNewlineOffset:function(){return 1},toString:function(){return"#<fabric.Text ("+this.complexity()+'): { "text": "'+this.text+'", "fontFamily": "'+this.fontFamily+'" }>'},_getCacheCanvasDimensions:function(){var t=this.callSuper("_getCacheCanvasDimensions"),e=this.fontSize;return t.width+=e*t.zoomX,t.height+=e*t.zoomY,t},_render:function(t){var e=this.path;e&&!e.isNotVisible()&&e._render(t),this._setTextStyles(t),this._renderTextLinesBackground(t),this._renderTextDecoration(t,"underline"),this._renderText(t),this._renderTextDecoration(t,"overline"),this._renderTextDecoration(t,"linethrough")},_renderText:function(t){"stroke"===this.paintFirst?(this._renderTextStroke(t),this._renderTextFill(t)):(this._renderTextFill(t),this._renderTextStroke(t))},_setTextStyles:function(t,e,i){if(t.textBaseline="alphabetical",this.path)switch(this.pathAlign){case"center":t.textBaseline="middle";break;case"ascender":t.textBaseline="top";break;case"descender":t.textBaseline="bottom"}t.font=this._getFontDeclaration(e,i)},calcTextWidth:function(){for(var t=this.getLineWidth(0),e=1,i=this._textLines.length;e<i;e++){var n=this.getLineWidth(e);n>t&&(t=n)}return t},_renderTextLine:function(t,e,i,n,r,o){this._renderChars(t,e,i,n,r,o)},_renderTextLinesBackground:function(t){if(this.textBackgroundColor||this.styleHas("textBackgroundColor")){for(var e,i,n,r,o,s,a,h=t.fillStyle,c=this._getLeftOffset(),l=this._getTopOffset(),u=0,f=0,d=this.path,p=0,g=this._textLines.length;p<g;p++)if(e=this.getHeightOfLine(p),this.textBackgroundColor||this.styleHas("textBackgroundColor",p)){n=this._textLines[p],i=this._getLineLeftOffset(p),f=0,u=0,r=this.getValueOfPropertyAt(p,0,"textBackgroundColor");for(var m=0,v=n.length;m<v;m++)o=this.__charBounds[p][m],s=this.getValueOfPropertyAt(p,m,"textBackgroundColor"),d?(t.save(),t.translate(o.renderLeft,o.renderTop),t.rotate(o.angle),t.fillStyle=s,s&&t.fillRect(-o.width/2,-e/this.lineHeight*(1-this._fontSizeFraction),o.width,e/this.lineHeight),t.restore()):s!==r?(a=c+i+u,"rtl"===this.direction&&(a=this.width-a-f),t.fillStyle=r,r&&t.fillRect(a,l,f,e/this.lineHeight),u=o.left,f=o.width,r=s):f+=o.kernedWidth;s&&!d&&(a=c+i+u,"rtl"===this.direction&&(a=this.width-a-f),t.fillStyle=s,t.fillRect(a,l,f,e/this.lineHeight)),l+=e}else l+=e;t.fillStyle=h,this._removeShadow(t)}},getFontCache:function(t){var i=t.fontFamily.toLowerCase();e.charWidthsCache[i]||(e.charWidthsCache[i]={});var n=e.charWidthsCache[i],r=t.fontStyle.toLowerCase()+"_"+(t.fontWeight+"").toLowerCase();return n[r]||(n[r]={}),n[r]},_measureChar:function(t,e,i,n){var r,o,s,a,h=this.getFontCache(e),c=i+t,l=this._getFontDeclaration(e)===this._getFontDeclaration(n),u=e.fontSize/this.CACHE_FONT_SIZE;if(i&&void 0!==h[i]&&(s=h[i]),void 0!==h[t]&&(a=r=h[t]),l&&void 0!==h[c]&&(a=(o=h[c])-s),void 0===r||void 0===s||void 0===o){var f=this.getMeasuringContext();this._setTextStyles(f,e,!0)}return void 0===r&&(a=r=f.measureText(t).width,h[t]=r),void 0===s&&l&&i&&(s=f.measureText(i).width,h[i]=s),l&&void 0===o&&(o=f.measureText(c).width,h[c]=o,a=o-s),{width:r*u,kernedWidth:a*u}},getHeightOfChar:function(t,e){return this.getValueOfPropertyAt(t,e,"fontSize")},measureLine:function(t){var e=this._measureLine(t);return 0!==this.charSpacing&&(e.width-=this._getWidthOfCharSpacing()),e.width<0&&(e.width=0),e},_measureLine:function(t){var i,n,r,o,s,a,h=0,c=this._textLines[t],l=new Array(c.length),u=0,f=this.path,d="right"===this.pathSide;for(this.__charBounds[t]=l,i=0;i<c.length;i++)n=c[i],o=this._getGraphemeBox(n,t,i,r),l[i]=o,h+=o.kernedWidth,r=n;if(l[i]={left:o?o.left+o.width:0,width:0,kernedWidth:0,height:this.fontSize},f){switch(a=f.segmentsInfo[f.segmentsInfo.length-1].length,(s=e.util.getPointOnPath(f.path,0,f.segmentsInfo)).x+=f.pathOffset.x,s.y+=f.pathOffset.y,this.textAlign){case"left":u=d?a-h:0;break;case"center":u=(a-h)/2;break;case"right":u=d?0:a-h}for(u+=this.pathStartOffset*(d?-1:1),i=d?c.length-1:0;d?i>=0:i<c.length;d?i--:i++)o=l[i],u>a?u%=a:u<0&&(u+=a),this._setGraphemeOnPath(u,o,s),u+=o.kernedWidth}return{width:h,numOfSpaces:0}},_setGraphemeOnPath:function(t,i,n){var r=t+i.kernedWidth/2,o=this.path,s=e.util.getPointOnPath(o.path,r,o.segmentsInfo);i.renderLeft=s.x-n.x,i.renderTop=s.y-n.y,i.angle=s.angle+("right"===this.pathSide?Math.PI:0)},_getGraphemeBox:function(t,e,i,n,r){var o,s=this.getCompleteStyleDeclaration(e,i),a=n?this.getCompleteStyleDeclaration(e,i-1):{},h=this._measureChar(t,s,n,a),c=h.kernedWidth,l=h.width;0!==this.charSpacing&&(l+=o=this._getWidthOfCharSpacing(),c+=o);var u={width:l,left:0,height:s.fontSize,kernedWidth:c,deltaY:s.deltaY};if(i>0&&!r){var f=this.__charBounds[e][i-1];u.left=f.left+f.width+h.kernedWidth-h.width}return u},getHeightOfLine:function(t){if(this.__lineHeights[t])return this.__lineHeights[t];for(var e=this._textLines[t],i=this.getHeightOfChar(t,0),n=1,r=e.length;n<r;n++)i=Math.max(this.getHeightOfChar(t,n),i);return this.__lineHeights[t]=i*this.lineHeight*this._fontSizeMult},calcTextHeight:function(){for(var t,e=0,i=0,n=this._textLines.length;i<n;i++)t=this.getHeightOfLine(i),e+=i===n-1?t/this.lineHeight:t;return e},_getLeftOffset:function(){return"ltr"===this.direction?-this.width/2:this.width/2},_getTopOffset:function(){return-this.height/2},_renderTextCommon:function(t,e){t.save();for(var i=0,n=this._getLeftOffset(),r=this._getTopOffset(),o=0,s=this._textLines.length;o<s;o++){var a=this.getHeightOfLine(o),h=a/this.lineHeight,c=this._getLineLeftOffset(o);this._renderTextLine(e,t,this._textLines[o],n+c,r+i+h,o),i+=a}t.restore()},_renderTextFill:function(t){(this.fill||this.styleHas("fill"))&&this._renderTextCommon(t,"fillText")},_renderTextStroke:function(t){(this.stroke&&0!==this.strokeWidth||!this.isEmptyStyles())&&(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this._setLineDash(t,this.strokeDashArray),t.beginPath(),this._renderTextCommon(t,"strokeText"),t.closePath(),t.restore())},_renderChars:function(t,e,i,n,r,o){var s,a,h,c,l,u=this.getHeightOfLine(o),f=-1!==this.textAlign.indexOf("justify"),d="",p=0,g=this.path,m=!f&&0===this.charSpacing&&this.isEmptyStyles(o)&&!g,v="ltr"===this.direction,b="ltr"===this.direction?1:-1,y=e.canvas.getAttribute("dir");if(e.save(),y!==this.direction&&(e.canvas.setAttribute("dir",v?"ltr":"rtl"),e.direction=v?"ltr":"rtl",e.textAlign=v?"left":"right"),r-=u*this._fontSizeFraction/this.lineHeight,m)return this._renderChar(t,e,o,0,i.join(""),n,r,u),void e.restore();for(var w=0,x=i.length-1;w<=x;w++)c=w===x||this.charSpacing||g,d+=i[w],h=this.__charBounds[o][w],0===p?(n+=b*(h.kernedWidth-h.width),p+=h.width):p+=h.kernedWidth,f&&!c&&this._reSpaceAndTab.test(i[w])&&(c=!0),c||(s=s||this.getCompleteStyleDeclaration(o,w),a=this.getCompleteStyleDeclaration(o,w+1),c=this._hasStyleChanged(s,a)),c&&(g?(e.save(),e.translate(h.renderLeft,h.renderTop),e.rotate(h.angle),this._renderChar(t,e,o,w,d,-p/2,0,u),e.restore()):(l=n,this._renderChar(t,e,o,w,d,l,r,u)),d="",s=a,n+=b*p,p=0);e.restore()},_applyPatternGradientTransformText:function(t){var i,n=e.util.createCanvasElement(),r=this.width+this.strokeWidth,o=this.height+this.strokeWidth;return n.width=r,n.height=o,(i=n.getContext("2d")).beginPath(),i.moveTo(0,0),i.lineTo(r,0),i.lineTo(r,o),i.lineTo(0,o),i.closePath(),i.translate(r/2,o/2),i.fillStyle=t.toLive(i),this._applyPatternGradientTransform(i,t),i.fill(),i.createPattern(n,"no-repeat")},handleFiller:function(t,e,i){var n,r;return i.toLive?"percentage"===i.gradientUnits||i.gradientTransform||i.patternTransform?(n=-this.width/2,r=-this.height/2,t.translate(n,r),t[e]=this._applyPatternGradientTransformText(i),{offsetX:n,offsetY:r}):(t[e]=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):(t[e]=i,{offsetX:0,offsetY:0})},_setStrokeStyles:function(t,e){return t.lineWidth=e.strokeWidth,t.lineCap=this.strokeLineCap,t.lineDashOffset=this.strokeDashOffset,t.lineJoin=this.strokeLineJoin,t.miterLimit=this.strokeMiterLimit,this.handleFiller(t,"strokeStyle",e.stroke)},_setFillStyles:function(t,e){return this.handleFiller(t,"fillStyle",e.fill)},_renderChar:function(t,e,i,n,r,o,s){var a,h,c=this._getStyleDeclaration(i,n),l=this.getCompleteStyleDeclaration(i,n),u="fillText"===t&&l.fill,f="strokeText"===t&&l.stroke&&l.strokeWidth;(f||u)&&(e.save(),u&&(a=this._setFillStyles(e,l)),f&&(h=this._setStrokeStyles(e,l)),e.font=this._getFontDeclaration(l),c&&c.textBackgroundColor&&this._removeShadow(e),c&&c.deltaY&&(s+=c.deltaY),u&&e.fillText(r,o-a.offsetX,s-a.offsetY),f&&e.strokeText(r,o-h.offsetX,s-h.offsetY),e.restore())},setSuperscript:function(t,e){return this._setScript(t,e,this.superscript)},setSubscript:function(t,e){return this._setScript(t,e,this.subscript)},_setScript:function(t,e,i){var n=this.get2DCursorLocation(t,!0),r=this.getValueOfPropertyAt(n.lineIndex,n.charIndex,"fontSize"),o=this.getValueOfPropertyAt(n.lineIndex,n.charIndex,"deltaY"),s={fontSize:r*i.size,deltaY:o+r*i.baseline};return this.setSelectionStyles(s,t,e),this},_hasStyleChanged:function(t,e){return t.fill!==e.fill||t.stroke!==e.stroke||t.strokeWidth!==e.strokeWidth||t.fontSize!==e.fontSize||t.fontFamily!==e.fontFamily||t.fontWeight!==e.fontWeight||t.fontStyle!==e.fontStyle||t.deltaY!==e.deltaY},_hasStyleChangedForSvg:function(t,e){return this._hasStyleChanged(t,e)||t.overline!==e.overline||t.underline!==e.underline||t.linethrough!==e.linethrough},_getLineLeftOffset:function(t){var e=this.getLineWidth(t),i=this.width-e,n=this.textAlign,r=this.direction,o=0,s=this.isEndOfWrapping(t);return"justify"===n||"justify-center"===n&&!s||"justify-right"===n&&!s||"justify-left"===n&&!s?0:("center"===n&&(o=i/2),"right"===n&&(o=i),"justify-center"===n&&(o=i/2),"justify-right"===n&&(o=i),"rtl"===r&&(o-=i),o)},_clearCache:function(){this.__lineWidths=[],this.__lineHeights=[],this.__charBounds=[]},_shouldClearDimensionCache:function(){var t=this._forceClearCache;return t||(t=this.hasStateChanged("_dimensionAffectingProps")),t&&(this.dirty=!0,this._forceClearCache=!1),t},getLineWidth:function(t){if(void 0!==this.__lineWidths[t])return this.__lineWidths[t];var e=this.measureLine(t).width;return this.__lineWidths[t]=e,e},_getWidthOfCharSpacing:function(){return 0!==this.charSpacing?this.fontSize*this.charSpacing/1e3:0},getValueOfPropertyAt:function(t,e,i){var n=this._getStyleDeclaration(t,e);return n&&void 0!==n[i]?n[i]:this[i]},_renderTextDecoration:function(t,e){if(this[e]||this.styleHas(e)){for(var i,n,r,o,s,a,h,c,l,u,f,d,p,g,m,v,b=this._getLeftOffset(),y=this._getTopOffset(),w=this.path,x=this._getWidthOfCharSpacing(),_=this.offsets[e],S=0,C=this._textLines.length;S<C;S++)if(i=this.getHeightOfLine(S),this[e]||this.styleHas(e,S)){h=this._textLines[S],g=i/this.lineHeight,o=this._getLineLeftOffset(S),u=0,f=0,c=this.getValueOfPropertyAt(S,0,e),v=this.getValueOfPropertyAt(S,0,"fill"),l=y+g*(1-this._fontSizeFraction),n=this.getHeightOfChar(S,0),s=this.getValueOfPropertyAt(S,0,"deltaY");for(var A=0,L=h.length;A<L;A++)if(d=this.__charBounds[S][A],p=this.getValueOfPropertyAt(S,A,e),m=this.getValueOfPropertyAt(S,A,"fill"),r=this.getHeightOfChar(S,A),a=this.getValueOfPropertyAt(S,A,"deltaY"),w&&p&&m)t.save(),t.fillStyle=v,t.translate(d.renderLeft,d.renderTop),t.rotate(d.angle),t.fillRect(-d.kernedWidth/2,_*r+a,d.kernedWidth,this.fontSize/15),t.restore();else if((p!==c||m!==v||r!==n||a!==s)&&f>0){var P=b+o+u;"rtl"===this.direction&&(P=this.width-P-f),c&&v&&(t.fillStyle=v,t.fillRect(P,l+_*n+s,f,this.fontSize/15)),u=d.left,f=d.width,c=p,v=m,n=r,s=a}else f+=d.kernedWidth;P=b+o+u,"rtl"===this.direction&&(P=this.width-P-f),t.fillStyle=m,p&&m&&t.fillRect(P,l+_*n+s,f-x,this.fontSize/15),y+=i}else y+=i;this._removeShadow(t)}},_getFontDeclaration:function(t,i){var n=t||this,r=this.fontFamily,o=e.Text.genericFonts.indexOf(r.toLowerCase())>-1,s=void 0===r||r.indexOf("'")>-1||r.indexOf(",")>-1||r.indexOf('"')>-1||o?n.fontFamily:'"'+n.fontFamily+'"';return[e.isLikelyNode?n.fontWeight:n.fontStyle,e.isLikelyNode?n.fontStyle:n.fontWeight,i?this.CACHE_FONT_SIZE+"px":n.fontSize+"px",s].join(" ")},render:function(t){this.visible&&(this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(this._shouldClearDimensionCache()&&this.initDimensions(),this.callSuper("render",t)))},_splitTextIntoLines:function(t){for(var i=t.split(this._reNewline),n=new Array(i.length),r=["\n"],o=[],s=0;s<i.length;s++)n[s]=e.util.string.graphemeSplit(i[s]),o=o.concat(n[s],r);return o.pop(),{_unwrappedLines:n,lines:i,graphemeText:o,graphemeLines:n}},toObject:function(t){var e=n.concat(t),r=this.callSuper("toObject",e);return r.styles=i(this.styles,!0),r.path&&(r.path=this.path.toObject()),r},set:function(t,e){this.callSuper("set",t,e);var i=!1,n=!1;if("object"==typeof t)for(var r in t)"path"===r&&this.setPathInfo(),i=i||-1!==this._dimensionAffectingProps.indexOf(r),n=n||"path"===r;else i=-1!==this._dimensionAffectingProps.indexOf(t),n="path"===t;return n&&this.setPathInfo(),i&&(this.initDimensions(),this.setCoords()),this},complexity:function(){return 1}}),e.Text.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat("x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" ")),e.Text.DEFAULT_SVG_FONT_SIZE=16,e.Text.fromElement=function(t,n,r){if(!t)return n(null);var o=e.parseAttributes(t,e.Text.ATTRIBUTE_NAMES),s=o.textAnchor||"left";if((r=e.util.object.extend(r?i(r):{},o)).top=r.top||0,r.left=r.left||0,o.textDecoration){var a=o.textDecoration;-1!==a.indexOf("underline")&&(r.underline=!0),-1!==a.indexOf("overline")&&(r.overline=!0),-1!==a.indexOf("line-through")&&(r.linethrough=!0),delete r.textDecoration}"dx"in o&&(r.left+=o.dx),"dy"in o&&(r.top+=o.dy),"fontSize"in r||(r.fontSize=e.Text.DEFAULT_SVG_FONT_SIZE);var h="";"textContent"in t?h=t.textContent:"firstChild"in t&&null!==t.firstChild&&"data"in t.firstChild&&null!==t.firstChild.data&&(h=t.firstChild.data),h=h.replace(/^\s+|\s+$|\n+/g,"").replace(/\s+/g," ");var c=r.strokeWidth;r.strokeWidth=0;var l=new e.Text(h,r),u=l.getScaledHeight()/l.height,f=((l.height+l.strokeWidth)*l.lineHeight-l.height)*u,d=l.getScaledHeight()+f,p=0;"center"===s&&(p=l.getScaledWidth()/2),"right"===s&&(p=l.getScaledWidth()),l.set({left:l.left-p,top:l.top-(d-l.fontSize*(.07+l._fontSizeFraction))/l.lineHeight,strokeWidth:void 0!==c?c:1}),n(l)},e.Text.fromObject=function(t,n){var r=i(t),o=t.path;return delete r.path,e.Object._fromObject("Text",r,(function(t){o?e.Object._fromObject("Path",o,(function(e){t.set("path",e),n(t)}),"path"):n(t)}),"text")},e.Text.genericFonts=["sans-serif","serif","cursive","fantasy","monospace"],e.util.createAccessors&&e.util.createAccessors(e.Text)}}(e),A.util.object.extend(A.Text.prototype,{isEmptyStyles:function(t){if(!this.styles)return!0;if(void 0!==t&&!this.styles[t])return!0;var e=void 0===t?this.styles:{line:this.styles[t]};for(var i in e)for(var n in e[i])for(var r in e[i][n])return!1;return!0},styleHas:function(t,e){if(!this.styles||!t||""===t)return!1;if(void 0!==e&&!this.styles[e])return!1;var i=void 0===e?this.styles:{0:this.styles[e]};for(var n in i)for(var r in i[n])if(void 0!==i[n][r][t])return!0;return!1},cleanStyle:function(t){if(!this.styles||!t||""===t)return!1;var e,i,n=this.styles,r=0,o=!0,s=0;for(var a in n){for(var h in e=0,n[a]){var c;r++,(c=n[a][h]).hasOwnProperty(t)?(i?c[t]!==i&&(o=!1):i=c[t],c[t]===this[t]&&delete c[t]):o=!1,0!==Object.keys(c).length?e++:delete n[a][h]}0===e&&delete n[a]}for(var l=0;l<this._textLines.length;l++)s+=this._textLines[l].length;o&&r===s&&(this[t]=i,this.removeStyle(t))},removeStyle:function(t){if(this.styles&&t&&""!==t){var e,i,n,r=this.styles;for(i in r){for(n in e=r[i])delete e[n][t],0===Object.keys(e[n]).length&&delete e[n];0===Object.keys(e).length&&delete r[i]}}},_extendStyles:function(t,e){var i=this.get2DCursorLocation(t);this._getLineStyle(i.lineIndex)||this._setLineStyle(i.lineIndex),this._getStyleDeclaration(i.lineIndex,i.charIndex)||this._setStyleDeclaration(i.lineIndex,i.charIndex,{}),A.util.object.extend(this._getStyleDeclaration(i.lineIndex,i.charIndex),e)},get2DCursorLocation:function(t,e){void 0===t&&(t=this.selectionStart);for(var i=e?this._unwrappedTextLines:this._textLines,n=i.length,r=0;r<n;r++){if(t<=i[r].length)return{lineIndex:r,charIndex:t};t-=i[r].length+this.missingNewlineOffset(r)}return{lineIndex:r-1,charIndex:i[r-1].length<t?i[r-1].length:t}},getSelectionStyles:function(t,e,i){void 0===t&&(t=this.selectionStart||0),void 0===e&&(e=this.selectionEnd||t);for(var n=[],r=t;r<e;r++)n.push(this.getStyleAtPosition(r,i));return n},getStyleAtPosition:function(t,e){var i=this.get2DCursorLocation(t);return(e?this.getCompleteStyleDeclaration(i.lineIndex,i.charIndex):this._getStyleDeclaration(i.lineIndex,i.charIndex))||{}},setSelectionStyles:function(t,e,i){void 0===e&&(e=this.selectionStart||0),void 0===i&&(i=this.selectionEnd||e);for(var n=e;n<i;n++)this._extendStyles(n,t);return this._forceClearCache=!0,this},_getStyleDeclaration:function(t,e){var i=this.styles&&this.styles[t];return i?i[e]:null},getCompleteStyleDeclaration:function(t,e){for(var i,n=this._getStyleDeclaration(t,e)||{},r={},o=0;o<this._styleProperties.length;o++)r[i=this._styleProperties[o]]=void 0===n[i]?this[i]:n[i];return r},_setStyleDeclaration:function(t,e,i){this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){delete this.styles[t][e]},_getLineStyle:function(t){return!!this.styles[t]},_setLineStyle:function(t){this.styles[t]={}},_deleteLineStyle:function(t){delete this.styles[t]}}),function(){function t(t){t.textDecoration&&(t.textDecoration.indexOf("underline")>-1&&(t.underline=!0),t.textDecoration.indexOf("line-through")>-1&&(t.linethrough=!0),t.textDecoration.indexOf("overline")>-1&&(t.overline=!0),delete t.textDecoration)}A.IText=A.util.createClass(A.Text,A.Observable,{type:"i-text",selectionStart:0,selectionEnd:0,selectionColor:"rgba(17,119,255,0.3)",isEditing:!1,editable:!0,editingBorderColor:"rgba(102,153,255,0.25)",cursorWidth:2,cursorColor:"",cursorDelay:1e3,cursorDuration:600,caching:!0,hiddenTextareaContainer:null,_reSpace:/\s|\n/,_currentCursorOpacity:0,_selectionDirection:null,_abortCursorAnimation:!1,__widthOfSpace:[],inCompositionMode:!1,initialize:function(t,e){this.callSuper("initialize",t,e),this.initBehavior()},setSelectionStart:function(t){t=Math.max(t,0),this._updateAndFire("selectionStart",t)},setSelectionEnd:function(t){t=Math.min(t,this.text.length),this._updateAndFire("selectionEnd",t)},_updateAndFire:function(t,e){this[t]!==e&&(this._fireSelectionChanged(),this[t]=e),this._updateTextarea()},_fireSelectionChanged:function(){this.fire("selection:changed"),this.canvas&&this.canvas.fire("text:selection:changed",{target:this})},initDimensions:function(){this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this.callSuper("initDimensions")},render:function(t){this.clearContextTop(),this.callSuper("render",t),this.cursorOffsetCache={},this.renderCursorOrSelection()},_render:function(t){this.callSuper("_render",t)},clearContextTop:function(t){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var e=this.canvas.contextTop,i=this.canvas.viewportTransform;e.save(),e.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this.transform(e),this._clearTextArea(e),t||e.restore()}},renderCursorOrSelection:function(){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var t=this._getCursorBoundaries(),e=this.canvas.contextTop;this.clearContextTop(!0),this.selectionStart===this.selectionEnd?this.renderCursor(t,e):this.renderSelection(t,e),e.restore()}},_clearTextArea:function(t){var e=this.width+4,i=this.height+4;t.clearRect(-e/2,-i/2,e,i)},_getCursorBoundaries:function(t){void 0===t&&(t=this.selectionStart);var e=this._getLeftOffset(),i=this._getTopOffset(),n=this._getCursorBoundariesOffsets(t);return{left:e,top:i,leftOffset:n.left,topOffset:n.top}},_getCursorBoundariesOffsets:function(t){if(this.cursorOffsetCache&&"top"in this.cursorOffsetCache)return this.cursorOffsetCache;var e,i,n,r,o=0,s=0,a=this.get2DCursorLocation(t);n=a.charIndex,i=a.lineIndex;for(var h=0;h<i;h++)o+=this.getHeightOfLine(h);e=this._getLineLeftOffset(i);var c=this.__charBounds[i][n];return c&&(s=c.left),0!==this.charSpacing&&n===this._textLines[i].length&&(s-=this._getWidthOfCharSpacing()),r={top:o,left:e+(s>0?s:0)},"rtl"===this.direction&&(r.left*=-1),this.cursorOffsetCache=r,this.cursorOffsetCache},renderCursor:function(t,e){var i=this.get2DCursorLocation(),n=i.lineIndex,r=i.charIndex>0?i.charIndex-1:0,o=this.getValueOfPropertyAt(n,r,"fontSize"),s=this.scaleX*this.canvas.getZoom(),a=this.cursorWidth/s,h=t.topOffset,c=this.getValueOfPropertyAt(n,r,"deltaY");h+=(1-this._fontSizeFraction)*this.getHeightOfLine(n)/this.lineHeight-o*(1-this._fontSizeFraction),this.inCompositionMode&&this.renderSelection(t,e),e.fillStyle=this.cursorColor||this.getValueOfPropertyAt(n,r,"fill"),e.globalAlpha=this.__isMousedown?1:this._currentCursorOpacity,e.fillRect(t.left+t.leftOffset-a/2,h+t.top+c,a,o)},renderSelection:function(t,e){for(var i=this.inCompositionMode?this.hiddenTextarea.selectionStart:this.selectionStart,n=this.inCompositionMode?this.hiddenTextarea.selectionEnd:this.selectionEnd,r=-1!==this.textAlign.indexOf("justify"),o=this.get2DCursorLocation(i),s=this.get2DCursorLocation(n),a=o.lineIndex,h=s.lineIndex,c=o.charIndex<0?0:o.charIndex,l=s.charIndex<0?0:s.charIndex,u=a;u<=h;u++){var f,d=this._getLineLeftOffset(u)||0,p=this.getHeightOfLine(u),g=0,m=0;if(u===a&&(g=this.__charBounds[a][c].left),u>=a&&u<h)m=r&&!this.isEndOfWrapping(u)?this.width:this.getLineWidth(u)||5;else if(u===h)if(0===l)m=this.__charBounds[h][l].left;else{var v=this._getWidthOfCharSpacing();m=this.__charBounds[h][l-1].left+this.__charBounds[h][l-1].width-v}f=p,(this.lineHeight<1||u===h&&this.lineHeight>1)&&(p/=this.lineHeight);var b=t.left+d+g,y=m-g,w=p,x=0;this.inCompositionMode?(e.fillStyle=this.compositionColor||"black",w=1,x=p):e.fillStyle=this.selectionColor,"rtl"===this.direction&&(b=this.width-b-y),e.fillRect(b,t.top+t.topOffset+x,y,w),t.topOffset+=f}},getCurrentCharFontSize:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fontSize")},getCurrentCharColor:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,"fill")},_getCurrentCharIndex:function(){var t=this.get2DCursorLocation(this.selectionStart,!0),e=t.charIndex>0?t.charIndex-1:0;return{l:t.lineIndex,c:e}}}),A.IText.fromObject=function(e,i){if(t(e),e.styles)for(var n in e.styles)for(var r in e.styles[n])t(e.styles[n][r]);A.Object._fromObject("IText",e,i,"text")}}(),_=A.util.object.clone,A.util.object.extend(A.IText.prototype,{initBehavior:function(){this.initAddedHandler(),this.initRemovedHandler(),this.initCursorSelectionHandlers(),this.initDoubleClickSimulation(),this.mouseMoveHandler=this.mouseMoveHandler.bind(this)},onDeselect:function(){this.isEditing&&this.exitEditing(),this.selected=!1},initAddedHandler:function(){var t=this;this.on("added",(function(){var e=t.canvas;e&&(e._hasITextHandlers||(e._hasITextHandlers=!0,t._initCanvasHandlers(e)),e._iTextInstances=e._iTextInstances||[],e._iTextInstances.push(t))}))},initRemovedHandler:function(){var t=this;this.on("removed",(function(){var e=t.canvas;e&&(e._iTextInstances=e._iTextInstances||[],A.util.removeFromArray(e._iTextInstances,t),0===e._iTextInstances.length&&(e._hasITextHandlers=!1,t._removeCanvasHandlers(e)))}))},_initCanvasHandlers:function(t){t._mouseUpITextHandler=function(){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.__isMousedown=!1}))},t.on("mouse:up",t._mouseUpITextHandler)},_removeCanvasHandlers:function(t){t.off("mouse:up",t._mouseUpITextHandler)},_tick:function(){this._currentTickState=this._animateCursor(this,1,this.cursorDuration,"_onTickComplete")},_animateCursor:function(t,e,i,n){var r;return r={isAborted:!1,abort:function(){this.isAborted=!0}},t.animate("_currentCursorOpacity",e,{duration:i,onComplete:function(){r.isAborted||t[n]()},onChange:function(){t.canvas&&t.selectionStart===t.selectionEnd&&t.renderCursorOrSelection()},abort:function(){return r.isAborted}}),r},_onTickComplete:function(){var t=this;this._cursorTimeout1&&clearTimeout(this._cursorTimeout1),this._cursorTimeout1=setTimeout((function(){t._currentTickCompleteState=t._animateCursor(t,0,this.cursorDuration/2,"_tick")}),100)},initDelayedCursor:function(t){var e=this,i=t?0:this.cursorDelay;this.abortCursorAnimation(),this._currentCursorOpacity=1,this._cursorTimeout2=setTimeout((function(){e._tick()}),i)},abortCursorAnimation:function(){var t=this._currentTickState||this._currentTickCompleteState,e=this.canvas;this._currentTickState&&this._currentTickState.abort(),this._currentTickCompleteState&&this._currentTickCompleteState.abort(),clearTimeout(this._cursorTimeout1),clearTimeout(this._cursorTimeout2),this._currentCursorOpacity=0,t&&e&&e.clearContext(e.contextTop||e.contextContainer)},selectAll:function(){return this.selectionStart=0,this.selectionEnd=this._text.length,this._fireSelectionChanged(),this._updateTextarea(),this},getSelectedText:function(){return this._text.slice(this.selectionStart,this.selectionEnd).join("")},findWordBoundaryLeft:function(t){var e=0,i=t-1;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i--;for(;/\S/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findWordBoundaryRight:function(t){var e=0,i=t;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i++;for(;/\S/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},findLineBoundaryLeft:function(t){for(var e=0,i=t-1;!/\n/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findLineBoundaryRight:function(t){for(var e=0,i=t;!/\n/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},searchWordBoundary:function(t,e){for(var i=this._text,n=this._reSpace.test(i[t])?t-1:t,r=i[n],o=A.reNonWord;!o.test(r)&&n>0&&n<i.length;)r=i[n+=e];return o.test(r)&&(n+=1===e?0:1),n},selectWord:function(t){t=t||this.selectionStart;var e=this.searchWordBoundary(t,-1),i=this.searchWordBoundary(t,1);this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()},selectLine:function(t){t=t||this.selectionStart;var e=this.findLineBoundaryLeft(t),i=this.findLineBoundaryRight(t);return this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this},enterEditing:function(t){if(!this.isEditing&&this.editable)return this.canvas&&(this.canvas.calcOffset(),this.exitEditingOnOthers(this.canvas)),this.isEditing=!0,this.initHiddenTextarea(t),this.hiddenTextarea.focus(),this.hiddenTextarea.value=this.text,this._updateTextarea(),this._saveEditingProps(),this._setEditingProps(),this._textBeforeEdit=this.text,this._tick(),this.fire("editing:entered"),this._fireSelectionChanged(),this.canvas?(this.canvas.fire("text:editing:entered",{target:this}),this.initMouseMoveHandler(),this.canvas.requestRenderAll(),this):this},exitEditingOnOthers:function(t){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.selected=!1,t.isEditing&&t.exitEditing()}))},initMouseMoveHandler:function(){this.canvas.on("mouse:move",this.mouseMoveHandler)},mouseMoveHandler:function(t){if(this.__isMousedown&&this.isEditing){var e=this.getSelectionStartFromPointer(t.e),i=this.selectionStart,n=this.selectionEnd;(e===this.__selectionStartOnMouseDown&&i!==n||i!==e&&n!==e)&&(e>this.__selectionStartOnMouseDown?(this.selectionStart=this.__selectionStartOnMouseDown,this.selectionEnd=e):(this.selectionStart=e,this.selectionEnd=this.__selectionStartOnMouseDown),this.selectionStart===i&&this.selectionEnd===n||(this.restartCursorIfNeeded(),this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()))}},_setEditingProps:function(){this.hoverCursor="text",this.canvas&&(this.canvas.defaultCursor=this.canvas.moveCursor="text"),this.borderColor=this.editingBorderColor,this.hasControls=this.selectable=!1,this.lockMovementX=this.lockMovementY=!0},fromStringToGraphemeSelection:function(t,e,i){var n=i.slice(0,t),r=A.util.string.graphemeSplit(n).length;if(t===e)return{selectionStart:r,selectionEnd:r};var o=i.slice(t,e);return{selectionStart:r,selectionEnd:r+A.util.string.graphemeSplit(o).length}},fromGraphemeToStringSelection:function(t,e,i){var n=i.slice(0,t).join("").length;return t===e?{selectionStart:n,selectionEnd:n}:{selectionStart:n,selectionEnd:n+i.slice(t,e).join("").length}},_updateTextarea:function(){if(this.cursorOffsetCache={},this.hiddenTextarea){if(!this.inCompositionMode){var t=this.fromGraphemeToStringSelection(this.selectionStart,this.selectionEnd,this._text);this.hiddenTextarea.selectionStart=t.selectionStart,this.hiddenTextarea.selectionEnd=t.selectionEnd}this.updateTextareaPosition()}},updateFromTextArea:function(){if(this.hiddenTextarea){this.cursorOffsetCache={},this.text=this.hiddenTextarea.value,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords());var t=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value);this.selectionEnd=this.selectionStart=t.selectionEnd,this.inCompositionMode||(this.selectionStart=t.selectionStart),this.updateTextareaPosition()}},updateTextareaPosition:function(){if(this.selectionStart===this.selectionEnd){var t=this._calcTextareaPosition();this.hiddenTextarea.style.left=t.left,this.hiddenTextarea.style.top=t.top}},_calcTextareaPosition:function(){if(!this.canvas)return{x:1,y:1};var t=this.inCompositionMode?this.compositionStart:this.selectionStart,e=this._getCursorBoundaries(t),i=this.get2DCursorLocation(t),n=i.lineIndex,r=i.charIndex,o=this.getValueOfPropertyAt(n,r,"fontSize")*this.lineHeight,s=e.leftOffset,a=this.calcTransformMatrix(),h={x:e.left+s,y:e.top+e.topOffset+o},c=this.canvas.getRetinaScaling(),l=this.canvas.upperCanvasEl,u=l.width/c,f=l.height/c,d=u-o,p=f-o,g=l.clientWidth/u,m=l.clientHeight/f;return h=A.util.transformPoint(h,a),(h=A.util.transformPoint(h,this.canvas.viewportTransform)).x*=g,h.y*=m,h.x<0&&(h.x=0),h.x>d&&(h.x=d),h.y<0&&(h.y=0),h.y>p&&(h.y=p),h.x+=this.canvas._offset.left,h.y+=this.canvas._offset.top,{left:h.x+"px",top:h.y+"px",fontSize:o+"px",charHeight:o}},_saveEditingProps:function(){this._savedProps={hasControls:this.hasControls,borderColor:this.borderColor,lockMovementX:this.lockMovementX,lockMovementY:this.lockMovementY,hoverCursor:this.hoverCursor,selectable:this.selectable,defaultCursor:this.canvas&&this.canvas.defaultCursor,moveCursor:this.canvas&&this.canvas.moveCursor}},_restoreEditingProps:function(){this._savedProps&&(this.hoverCursor=this._savedProps.hoverCursor,this.hasControls=this._savedProps.hasControls,this.borderColor=this._savedProps.borderColor,this.selectable=this._savedProps.selectable,this.lockMovementX=this._savedProps.lockMovementX,this.lockMovementY=this._savedProps.lockMovementY,this.canvas&&(this.canvas.defaultCursor=this._savedProps.defaultCursor,this.canvas.moveCursor=this._savedProps.moveCursor))},exitEditing:function(){var t=this._textBeforeEdit!==this.text,e=this.hiddenTextarea;return this.selected=!1,this.isEditing=!1,this.selectionEnd=this.selectionStart,e&&(e.blur&&e.blur(),e.parentNode&&e.parentNode.removeChild(e)),this.hiddenTextarea=null,this.abortCursorAnimation(),this._restoreEditingProps(),this._currentCursorOpacity=0,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this.fire("editing:exited"),t&&this.fire("modified"),this.canvas&&(this.canvas.off("mouse:move",this.mouseMoveHandler),this.canvas.fire("text:editing:exited",{target:this}),t&&this.canvas.fire("object:modified",{target:this})),this},_removeExtraneousStyles:function(){for(var t in this.styles)this._textLines[t]||delete this.styles[t]},removeStyleFromTo:function(t,e){var i,n,r=this.get2DCursorLocation(t,!0),o=this.get2DCursorLocation(e,!0),s=r.lineIndex,a=r.charIndex,h=o.lineIndex,c=o.charIndex;if(s!==h){if(this.styles[s])for(i=a;i<this._unwrappedTextLines[s].length;i++)delete this.styles[s][i];if(this.styles[h])for(i=c;i<this._unwrappedTextLines[h].length;i++)(n=this.styles[h][i])&&(this.styles[s]||(this.styles[s]={}),this.styles[s][a+i-c]=n);for(i=s+1;i<=h;i++)delete this.styles[i];this.shiftLineStyles(h,s-h)}else if(this.styles[s]){n=this.styles[s];var l,u,f=c-a;for(i=a;i<c;i++)delete n[i];for(u in this.styles[s])(l=parseInt(u,10))>=c&&(n[l-f]=n[u],delete n[u])}},shiftLineStyles:function(t,e){var i=_(this.styles);for(var n in this.styles){var r=parseInt(n,10);r>t&&(this.styles[r+e]=i[r],i[r-e]||delete this.styles[r])}},restartCursorIfNeeded:function(){this._currentTickState&&!this._currentTickState.isAborted&&this._currentTickCompleteState&&!this._currentTickCompleteState.isAborted||this.initDelayedCursor()},insertNewlineStyleObject:function(t,e,i,n){var r,o={},s=!1,a=this._unwrappedTextLines[t].length===e;for(var h in i||(i=1),this.shiftLineStyles(t,i),this.styles[t]&&(r=this.styles[t][0===e?e:e-1]),this.styles[t]){var c=parseInt(h,10);c>=e&&(s=!0,o[c-e]=this.styles[t][h],a&&0===e||delete this.styles[t][h])}var l=!1;for(s&&!a&&(this.styles[t+i]=o,l=!0),l&&i--;i>0;)n&&n[i-1]?this.styles[t+i]={0:_(n[i-1])}:r?this.styles[t+i]={0:_(r)}:delete this.styles[t+i],i--;this._forceClearCache=!0},insertCharStyleObject:function(t,e,i,n){this.styles||(this.styles={});var r=this.styles[t],o=r?_(r):{};for(var s in i||(i=1),o){var a=parseInt(s,10);a>=e&&(r[a+i]=o[a],o[a-i]||delete r[a])}if(this._forceClearCache=!0,n)for(;i--;)Object.keys(n[i]).length&&(this.styles[t]||(this.styles[t]={}),this.styles[t][e+i]=_(n[i]));else if(r)for(var h=r[e?e-1:1];h&&i--;)this.styles[t][e+i]=_(h)},insertNewStyleBlock:function(t,e,i){for(var n=this.get2DCursorLocation(e,!0),r=[0],o=0,s=0;s<t.length;s++)"\n"===t[s]?r[++o]=0:r[o]++;for(r[0]>0&&(this.insertCharStyleObject(n.lineIndex,n.charIndex,r[0],i),i=i&&i.slice(r[0]+1)),o&&this.insertNewlineStyleObject(n.lineIndex,n.charIndex+r[0],o),s=1;s<o;s++)r[s]>0?this.insertCharStyleObject(n.lineIndex+s,0,r[s],i):i&&this.styles[n.lineIndex+s]&&i[0]&&(this.styles[n.lineIndex+s][0]=i[0]),i=i&&i.slice(r[s]+1);r[s]>0&&this.insertCharStyleObject(n.lineIndex+s,0,r[s],i)},setSelectionStartEndWithShift:function(t,e,i){i<=t?(e===t?this._selectionDirection="left":"right"===this._selectionDirection&&(this._selectionDirection="left",this.selectionEnd=t),this.selectionStart=i):i>t&&i<e?"right"===this._selectionDirection?this.selectionEnd=i:this.selectionStart=i:(e===t?this._selectionDirection="right":"left"===this._selectionDirection&&(this._selectionDirection="right",this.selectionStart=e),this.selectionEnd=i)},setSelectionInBoundaries:function(){var t=this.text.length;this.selectionStart>t?this.selectionStart=t:this.selectionStart<0&&(this.selectionStart=0),this.selectionEnd>t?this.selectionEnd=t:this.selectionEnd<0&&(this.selectionEnd=0)}}),A.util.object.extend(A.IText.prototype,{initDoubleClickSimulation:function(){this.__lastClickTime=+new Date,this.__lastLastClickTime=+new Date,this.__lastPointer={},this.on("mousedown",this.onMouseDown)},onMouseDown:function(t){if(this.canvas){this.__newClickTime=+new Date;var e=t.pointer;this.isTripleClick(e)&&(this.fire("tripleclick",t),this._stopEvent(t.e)),this.__lastLastClickTime=this.__lastClickTime,this.__lastClickTime=this.__newClickTime,this.__lastPointer=e,this.__lastIsEditing=this.isEditing,this.__lastSelected=this.selected}},isTripleClick:function(t){return this.__newClickTime-this.__lastClickTime<500&&this.__lastClickTime-this.__lastLastClickTime<500&&this.__lastPointer.x===t.x&&this.__lastPointer.y===t.y},_stopEvent:function(t){t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation()},initCursorSelectionHandlers:function(){this.initMousedownHandler(),this.initMouseupHandler(),this.initClicks()},doubleClickHandler:function(t){this.isEditing&&this.selectWord(this.getSelectionStartFromPointer(t.e))},tripleClickHandler:function(t){this.isEditing&&this.selectLine(this.getSelectionStartFromPointer(t.e))},initClicks:function(){this.on("mousedblclick",this.doubleClickHandler),this.on("tripleclick",this.tripleClickHandler)},_mouseDownHandler:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.__isMousedown=!0,this.selected&&(this.inCompositionMode=!1,this.setCursorByClick(t.e)),this.isEditing&&(this.__selectionStartOnMouseDown=this.selectionStart,this.selectionStart===this.selectionEnd&&this.abortCursorAnimation(),this.renderCursorOrSelection()))},_mouseDownHandlerBefore:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.selected=this===this.canvas._activeObject)},initMousedownHandler:function(){this.on("mousedown",this._mouseDownHandler),this.on("mousedown:before",this._mouseDownHandlerBefore)},initMouseupHandler:function(){this.on("mouseup",this.mouseUpHandler)},mouseUpHandler:function(t){if(this.__isMousedown=!1,!(!this.editable||this.group||t.transform&&t.transform.actionPerformed||t.e.button&&1!==t.e.button)){if(this.canvas){var e=this.canvas._activeObject;if(e&&e!==this)return}this.__lastSelected&&!this.__corner?(this.selected=!1,this.__lastSelected=!1,this.enterEditing(t.e),this.selectionStart===this.selectionEnd?this.initDelayedCursor(!0):this.renderCursorOrSelection()):this.selected=!0}},setCursorByClick:function(t){var e=this.getSelectionStartFromPointer(t),i=this.selectionStart,n=this.selectionEnd;t.shiftKey?this.setSelectionStartEndWithShift(i,n,e):(this.selectionStart=e,this.selectionEnd=e),this.isEditing&&(this._fireSelectionChanged(),this._updateTextarea())},getSelectionStartFromPointer:function(t){for(var e,i=this.getLocalPointer(t),n=0,r=0,o=0,s=0,a=0,h=0,c=this._textLines.length;h<c&&o<=i.y;h++)o+=this.getHeightOfLine(h)*this.scaleY,a=h,h>0&&(s+=this._textLines[h-1].length+this.missingNewlineOffset(h-1));r=this._getLineLeftOffset(a)*this.scaleX,e=this._textLines[a],"rtl"===this.direction&&(i.x=this.width*this.scaleX-i.x+r);for(var l=0,u=e.length;l<u&&(n=r,(r+=this.__charBounds[a][l].kernedWidth*this.scaleX)<=i.x);l++)s++;return this._getNewSelectionStartFromOffset(i,n,r,s,u)},_getNewSelectionStartFromOffset:function(t,e,i,n,r){var o=t.x-e,s=i-t.x,a=n+(s>o||s<0?0:1);return this.flipX&&(a=r-a),a>this._text.length&&(a=this._text.length),a}}),A.util.object.extend(A.IText.prototype,{initHiddenTextarea:function(){this.hiddenTextarea=A.document.createElement("textarea"),this.hiddenTextarea.setAttribute("autocapitalize","off"),this.hiddenTextarea.setAttribute("autocorrect","off"),this.hiddenTextarea.setAttribute("autocomplete","off"),this.hiddenTextarea.setAttribute("spellcheck","false"),this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea",""),this.hiddenTextarea.setAttribute("wrap","off");var t=this._calcTextareaPosition();this.hiddenTextarea.style.cssText="position: absolute; top: "+t.top+"; left: "+t.left+"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; paddingｰtop: "+t.fontSize+";",this.hiddenTextareaContainer?this.hiddenTextareaContainer.appendChild(this.hiddenTextarea):A.document.body.appendChild(this.hiddenTextarea),A.util.addListener(this.hiddenTextarea,"keydown",this.onKeyDown.bind(this)),A.util.addListener(this.hiddenTextarea,"keyup",this.onKeyUp.bind(this)),A.util.addListener(this.hiddenTextarea,"input",this.onInput.bind(this)),A.util.addListener(this.hiddenTextarea,"copy",this.copy.bind(this)),A.util.addListener(this.hiddenTextarea,"cut",this.copy.bind(this)),A.util.addListener(this.hiddenTextarea,"paste",this.paste.bind(this)),A.util.addListener(this.hiddenTextarea,"compositionstart",this.onCompositionStart.bind(this)),A.util.addListener(this.hiddenTextarea,"compositionupdate",this.onCompositionUpdate.bind(this)),A.util.addListener(this.hiddenTextarea,"compositionend",this.onCompositionEnd.bind(this)),!this._clickHandlerInitialized&&this.canvas&&(A.util.addListener(this.canvas.upperCanvasEl,"click",this.onClick.bind(this)),this._clickHandlerInitialized=!0)},keysMap:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorRight",36:"moveCursorLeft",37:"moveCursorLeft",38:"moveCursorUp",39:"moveCursorRight",40:"moveCursorDown"},keysMapRtl:{9:"exitEditing",27:"exitEditing",33:"moveCursorUp",34:"moveCursorDown",35:"moveCursorLeft",36:"moveCursorRight",37:"moveCursorRight",38:"moveCursorUp",39:"moveCursorLeft",40:"moveCursorDown"},ctrlKeysMapUp:{67:"copy",88:"cut"},ctrlKeysMapDown:{65:"selectAll"},onClick:function(){this.hiddenTextarea&&this.hiddenTextarea.focus()},onKeyDown:function(t){if(this.isEditing){var e="rtl"===this.direction?this.keysMapRtl:this.keysMap;if(t.keyCode in e)this[e[t.keyCode]](t);else{if(!(t.keyCode in this.ctrlKeysMapDown)||!t.ctrlKey&&!t.metaKey)return;this[this.ctrlKeysMapDown[t.keyCode]](t)}t.stopImmediatePropagation(),t.preventDefault(),t.keyCode>=33&&t.keyCode<=40?(this.inCompositionMode=!1,this.clearContextTop(),this.renderCursorOrSelection()):this.canvas&&this.canvas.requestRenderAll()}},onKeyUp:function(t){!this.isEditing||this._copyDone||this.inCompositionMode?this._copyDone=!1:t.keyCode in this.ctrlKeysMapUp&&(t.ctrlKey||t.metaKey)&&(this[this.ctrlKeysMapUp[t.keyCode]](t),t.stopImmediatePropagation(),t.preventDefault(),this.canvas&&this.canvas.requestRenderAll())},onInput:function(t){var e=this.fromPaste;if(this.fromPaste=!1,t&&t.stopPropagation(),this.isEditing){var i,n,r,o,s,a=this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,h=this._text.length,c=a.length,l=c-h,u=this.selectionStart,f=this.selectionEnd,d=u!==f;if(""===this.hiddenTextarea.value)return this.styles={},this.updateFromTextArea(),this.fire("changed"),void(this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll()));var p=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value),g=u>p.selectionStart;d?(i=this._text.slice(u,f),l+=f-u):c<h&&(i=g?this._text.slice(f+l,f):this._text.slice(u,u-l)),n=a.slice(p.selectionEnd-l,p.selectionEnd),i&&i.length&&(n.length&&(r=this.getSelectionStyles(u,u+1,!1),r=n.map((function(){return r[0]}))),d?(o=u,s=f):g?(o=f-i.length,s=f):(o=f,s=f+i.length),this.removeStyleFromTo(o,s)),n.length&&(e&&n.join("")===A.copiedText&&!A.disableStyleCopyPaste&&(r=A.copiedTextStyle),this.insertNewStyleBlock(n,u,r)),this.updateFromTextArea(),this.fire("changed"),this.canvas&&(this.canvas.fire("text:changed",{target:this}),this.canvas.requestRenderAll())}},onCompositionStart:function(){this.inCompositionMode=!0},onCompositionEnd:function(){this.inCompositionMode=!1},onCompositionUpdate:function(t){this.compositionStart=t.target.selectionStart,this.compositionEnd=t.target.selectionEnd,this.updateTextareaPosition()},copy:function(){this.selectionStart!==this.selectionEnd&&(A.copiedText=this.getSelectedText(),A.disableStyleCopyPaste?A.copiedTextStyle=null:A.copiedTextStyle=this.getSelectionStyles(this.selectionStart,this.selectionEnd,!0),this._copyDone=!0)},paste:function(){this.fromPaste=!0},_getClipboardData:function(t){return t&&t.clipboardData||A.window.clipboardData},_getWidthBeforeCursor:function(t,e){var i,n=this._getLineLeftOffset(t);return e>0&&(n+=(i=this.__charBounds[t][e-1]).left+i.width),n},getDownCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),n=this.get2DCursorLocation(i),r=n.lineIndex;if(r===this._textLines.length-1||t.metaKey||34===t.keyCode)return this._text.length-i;var o=n.charIndex,s=this._getWidthBeforeCursor(r,o),a=this._getIndexOnLine(r+1,s);return this._textLines[r].slice(o).length+a+1+this.missingNewlineOffset(r)},_getSelectionForOffset:function(t,e){return t.shiftKey&&this.selectionStart!==this.selectionEnd&&e?this.selectionEnd:this.selectionStart},getUpCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),n=this.get2DCursorLocation(i),r=n.lineIndex;if(0===r||t.metaKey||33===t.keyCode)return-i;var o=n.charIndex,s=this._getWidthBeforeCursor(r,o),a=this._getIndexOnLine(r-1,s),h=this._textLines[r].slice(0,o),c=this.missingNewlineOffset(r-1);return-this._textLines[r-1].length+a-h.length+(1-c)},_getIndexOnLine:function(t,e){for(var i,n,r=this._textLines[t],o=this._getLineLeftOffset(t),s=0,a=0,h=r.length;a<h;a++)if((o+=i=this.__charBounds[t][a].width)>e){n=!0;var c=o-i,l=o,u=Math.abs(c-e);s=Math.abs(l-e)<u?a:a-1;break}return n||(s=r.length-1),s},moveCursorDown:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorUpOrDown("Down",t)},moveCursorUp:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorUpOrDown("Up",t)},_moveCursorUpOrDown:function(t,e){var i=this["get"+t+"CursorOffset"](e,"right"===this._selectionDirection);e.shiftKey?this.moveCursorWithShift(i):this.moveCursorWithoutShift(i),0!==i&&(this.setSelectionInBoundaries(),this.abortCursorAnimation(),this._currentCursorOpacity=1,this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorWithShift:function(t){var e="left"===this._selectionDirection?this.selectionStart+t:this.selectionEnd+t;return this.setSelectionStartEndWithShift(this.selectionStart,this.selectionEnd,e),0!==t},moveCursorWithoutShift:function(t){return t<0?(this.selectionStart+=t,this.selectionEnd=this.selectionStart):(this.selectionEnd+=t,this.selectionStart=this.selectionEnd),0!==t},moveCursorLeft:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorLeftOrRight("Left",t)},_move:function(t,e,i){var n;if(t.altKey)n=this["findWordBoundary"+i](this[e]);else{if(!t.metaKey&&35!==t.keyCode&&36!==t.keyCode)return this[e]+="Left"===i?-1:1,!0;n=this["findLineBoundary"+i](this[e])}if(void 0!==typeof n&&this[e]!==n)return this[e]=n,!0},_moveLeft:function(t,e){return this._move(t,e,"Left")},_moveRight:function(t,e){return this._move(t,e,"Right")},moveCursorLeftWithoutShift:function(t){var e=!0;return this._selectionDirection="left",this.selectionEnd===this.selectionStart&&0!==this.selectionStart&&(e=this._moveLeft(t,"selectionStart")),this.selectionEnd=this.selectionStart,e},moveCursorLeftWithShift:function(t){return"right"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveLeft(t,"selectionEnd"):0!==this.selectionStart?(this._selectionDirection="left",this._moveLeft(t,"selectionStart")):void 0},moveCursorRight:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorLeftOrRight("Right",t)},_moveCursorLeftOrRight:function(t,e){var i="moveCursor"+t+"With";this._currentCursorOpacity=1,e.shiftKey?i+="Shift":i+="outShift",this[i](e)&&(this.abortCursorAnimation(),this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorRightWithShift:function(t){return"left"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveRight(t,"selectionStart"):this.selectionEnd!==this._text.length?(this._selectionDirection="right",this._moveRight(t,"selectionEnd")):void 0},moveCursorRightWithoutShift:function(t){var e=!0;return this._selectionDirection="right",this.selectionStart===this.selectionEnd?(e=this._moveRight(t,"selectionStart"),this.selectionEnd=this.selectionStart):this.selectionStart=this.selectionEnd,e},removeChars:function(t,e){void 0===e&&(e=t+1),this.removeStyleFromTo(t,e),this._text.splice(t,e-t),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()},insertChars:function(t,e,i,n){void 0===n&&(n=i),n>i&&this.removeStyleFromTo(i,n);var r=A.util.string.graphemeSplit(t);this.insertNewStyleBlock(r,i,e),this._text=[].concat(this._text.slice(0,i),r,this._text.slice(n)),this.text=this._text.join(""),this.set("dirty",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()}}),S=A.util.toFixed,C=/  +/g,A.util.object.extend(A.Text.prototype,{_toSVG:function(){var t=this._getSVGLeftTopOffsets(),e=this._getSVGTextAndBg(t.textTop,t.textLeft);return this._wrapSVGTextAndBg(e)},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,noStyle:!0,withShadow:!0})},_getSVGLeftTopOffsets:function(){return{textLeft:-this.width/2,textTop:-this.height/2,lineTop:this.getHeightOfLine(0)}},_wrapSVGTextAndBg:function(t){var e=this.getSvgTextDecoration(this);return[t.textBgRects.join(""),'\t\t<text xml:space="preserve" ',this.fontFamily?'font-family="'+this.fontFamily.replace(/"/g,"'")+'" ':"",this.fontSize?'font-size="'+this.fontSize+'" ':"",this.fontStyle?'font-style="'+this.fontStyle+'" ':"",this.fontWeight?'font-weight="'+this.fontWeight+'" ':"",e?'text-decoration="'+e+'" ':"",'style="',this.getSvgStyles(!0),'"',this.addPaintOrder()," >",t.textSpans.join(""),"</text>\n"]},_getSVGTextAndBg:function(t,e){var i,n=[],r=[],o=t;this._setSVGBg(r);for(var s=0,a=this._textLines.length;s<a;s++)i=this._getLineLeftOffset(s),(this.textBackgroundColor||this.styleHas("textBackgroundColor",s))&&this._setSVGTextLineBg(r,s,e+i,o),this._setSVGTextLineText(n,s,e+i,o),o+=this.getHeightOfLine(s);return{textSpans:n,textBgRects:r}},_createTextCharSpan:function(t,e,i,n){var r=t!==t.trim()||t.match(C),o=this.getSvgSpanStyles(e,r),s=o?'style="'+o+'"':"",a=e.deltaY,h="",c=A.Object.NUM_FRACTION_DIGITS;return a&&(h=' dy="'+S(a,c)+'" '),['<tspan x="',S(i,c),'" y="',S(n,c),'" ',h,s,">",A.util.string.escapeXml(t),"</tspan>"].join("")},_setSVGTextLineText:function(t,e,i,n){var r,o,s,a,h,c=this.getHeightOfLine(e),l=-1!==this.textAlign.indexOf("justify"),u="",f=0,d=this._textLines[e];n+=c*(1-this._fontSizeFraction)/this.lineHeight;for(var p=0,g=d.length-1;p<=g;p++)h=p===g||this.charSpacing,u+=d[p],s=this.__charBounds[e][p],0===f?(i+=s.kernedWidth-s.width,f+=s.width):f+=s.kernedWidth,l&&!h&&this._reSpaceAndTab.test(d[p])&&(h=!0),h||(r=r||this.getCompleteStyleDeclaration(e,p),o=this.getCompleteStyleDeclaration(e,p+1),h=this._hasStyleChangedForSvg(r,o)),h&&(a=this._getStyleDeclaration(e,p)||{},t.push(this._createTextCharSpan(u,a,i,n)),u="",r=o,i+=f,f=0)},_pushTextBgRect:function(t,e,i,n,r,o){var s=A.Object.NUM_FRACTION_DIGITS;t.push("\t\t<rect ",this._getFillAttributes(e),' x="',S(i,s),'" y="',S(n,s),'" width="',S(r,s),'" height="',S(o,s),'"></rect>\n')},_setSVGTextLineBg:function(t,e,i,n){for(var r,o,s=this._textLines[e],a=this.getHeightOfLine(e)/this.lineHeight,h=0,c=0,l=this.getValueOfPropertyAt(e,0,"textBackgroundColor"),u=0,f=s.length;u<f;u++)r=this.__charBounds[e][u],(o=this.getValueOfPropertyAt(e,u,"textBackgroundColor"))!==l?(l&&this._pushTextBgRect(t,l,i+c,n,h,a),c=r.left,h=r.width,l=o):h+=r.kernedWidth;o&&this._pushTextBgRect(t,o,i+c,n,h,a)},_getFillAttributes:function(t){var e=t&&"string"==typeof t?new A.Color(t):"";return e&&e.getSource()&&1!==e.getAlpha()?'opacity="'+e.getAlpha()+'" fill="'+e.setAlpha(1).toRgb()+'"':'fill="'+t+'"'},_getSVGLineTopOffset:function(t){for(var e,i=0,n=0;n<t;n++)i+=this.getHeightOfLine(n);return e=this.getHeightOfLine(n),{lineTop:i,offset:(this._fontSizeMult-this._fontSizeFraction)*e/(this.lineHeight*this._fontSizeMult)}},getSvgStyles:function(t){return A.Object.prototype.getSvgStyles.call(this,t)+" white-space: pre;"}}),function(t){"use strict";var e=t.fabric||(t.fabric={});e.Textbox=e.util.createClass(e.IText,e.Observable,{type:"textbox",minWidth:20,dynamicMinWidth:2,__cachedLines:null,lockScalingFlip:!0,noScaleCache:!1,_dimensionAffectingProps:e.Text.prototype._dimensionAffectingProps.concat("width"),_wordJoiners:/[ \t\r]/,splitByGrapheme:!1,initDimensions:function(){this.__skipDimension||(this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this._clearCache(),this.dynamicMinWidth=0,this._styleMap=this._generateStyleMap(this._splitText()),this.dynamicMinWidth>this.width&&this._set("width",this.dynamicMinWidth),-1!==this.textAlign.indexOf("justify")&&this.enlargeSpaces(),this.height=this.calcTextHeight(),this.saveState({propertySet:"_dimensionAffectingProps"}))},_generateStyleMap:function(t){for(var e=0,i=0,n=0,r={},o=0;o<t.graphemeLines.length;o++)"\n"===t.graphemeText[n]&&o>0?(i=0,n++,e++):!this.splitByGrapheme&&this._reSpaceAndTab.test(t.graphemeText[n])&&o>0&&(i++,n++),r[o]={line:e,offset:i},n+=t.graphemeLines[o].length,i+=t.graphemeLines[o].length;return r},styleHas:function(t,i){if(this._styleMap&&!this.isWrapping){var n=this._styleMap[i];n&&(i=n.line)}return e.Text.prototype.styleHas.call(this,t,i)},isEmptyStyles:function(t){if(!this.styles)return!0;var e,i,n=0,r=!1,o=this._styleMap[t],s=this._styleMap[t+1];for(var a in o&&(t=o.line,n=o.offset),s&&(r=s.line===t,e=s.offset),i=void 0===t?this.styles:{line:this.styles[t]})for(var h in i[a])if(h>=n&&(!r||h<e))for(var c in i[a][h])return!1;return!0},_getStyleDeclaration:function(t,e){if(this._styleMap&&!this.isWrapping){var i=this._styleMap[t];if(!i)return null;t=i.line,e=i.offset+e}return this.callSuper("_getStyleDeclaration",t,e)},_setStyleDeclaration:function(t,e,i){var n=this._styleMap[t];t=n.line,e=n.offset+e,this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){var i=this._styleMap[t];t=i.line,e=i.offset+e,delete this.styles[t][e]},_getLineStyle:function(t){var e=this._styleMap[t];return!!this.styles[e.line]},_setLineStyle:function(t){var e=this._styleMap[t];this.styles[e.line]={}},_wrapText:function(t,e){var i,n=[];for(this.isWrapping=!0,i=0;i<t.length;i++)n=n.concat(this._wrapLine(t[i],i,e));return this.isWrapping=!1,n},_measureWord:function(t,e,i){var n,r=0;i=i||0;for(var o=0,s=t.length;o<s;o++)r+=this._getGraphemeBox(t[o],e,o+i,n,!0).kernedWidth,n=t[o];return r},_wrapLine:function(t,i,n,r){var o=0,s=this.splitByGrapheme,a=[],h=[],c=s?e.util.string.graphemeSplit(t):t.split(this._wordJoiners),l="",u=0,f=s?"":" ",d=0,p=0,g=0,m=!0,v=this._getWidthOfCharSpacing();r=r||0,0===c.length&&c.push([]),n-=r;for(var b=0;b<c.length;b++)l=s?c[b]:e.util.string.graphemeSplit(c[b]),d=this._measureWord(l,i,u),u+=l.length,(o+=p+d-v)>n&&!m?(a.push(h),h=[],o=d,m=!0):o+=v,m||s||h.push(f),h=h.concat(l),p=s?0:this._measureWord([f],i,u),u++,m=!1,d>g&&(g=d);return b&&a.push(h),g+r>this.dynamicMinWidth&&(this.dynamicMinWidth=g-v+r),a},isEndOfWrapping:function(t){return!this._styleMap[t+1]||this._styleMap[t+1].line!==this._styleMap[t].line},missingNewlineOffset:function(t){return this.splitByGrapheme?this.isEndOfWrapping(t)?1:0:1},_splitTextIntoLines:function(t){for(var i=e.Text.prototype._splitTextIntoLines.call(this,t),n=this._wrapText(i.lines,this.width),r=new Array(n.length),o=0;o<n.length;o++)r[o]=n[o].join("");return i.lines=r,i.graphemeLines=n,i},getMinWidth:function(){return Math.max(this.minWidth,this.dynamicMinWidth)},_removeExtraneousStyles:function(){var t={};for(var e in this._styleMap)this._textLines[e]&&(t[this._styleMap[e].line]=1);for(var e in this.styles)t[e]||delete this.styles[e]},toObject:function(t){return this.callSuper("toObject",["minWidth","splitByGrapheme"].concat(t))}}),e.Textbox.fromObject=function(t,i){return e.Object._fromObject("Textbox",t,i,"text")}}(e),function(){var t=A.controlsUtils,e=t.scaleSkewCursorStyleHandler,i=t.scaleCursorStyleHandler,n=t.scalingEqually,r=t.scalingYOrSkewingX,o=t.scalingXOrSkewingY,s=t.scaleOrSkewActionName,a=A.Object.prototype.controls;if(a.ml=new A.Control({x:-.5,y:0,cursorStyleHandler:e,actionHandler:o,getActionName:s}),a.mr=new A.Control({x:.5,y:0,cursorStyleHandler:e,actionHandler:o,getActionName:s}),a.mb=new A.Control({x:0,y:.5,cursorStyleHandler:e,actionHandler:r,getActionName:s}),a.mt=new A.Control({x:0,y:-.5,cursorStyleHandler:e,actionHandler:r,getActionName:s}),a.tl=new A.Control({x:-.5,y:-.5,cursorStyleHandler:i,actionHandler:n}),a.tr=new A.Control({x:.5,y:-.5,cursorStyleHandler:i,actionHandler:n}),a.bl=new A.Control({x:-.5,y:.5,cursorStyleHandler:i,actionHandler:n}),a.br=new A.Control({x:.5,y:.5,cursorStyleHandler:i,actionHandler:n}),a.mtr=new A.Control({x:0,y:-.5,actionHandler:t.rotationWithSnapping,cursorStyleHandler:t.rotationStyleHandler,offsetY:-40,withConnection:!0,actionName:"rotate"}),A.Textbox){var h=A.Textbox.prototype.controls={};h.mtr=a.mtr,h.tr=a.tr,h.br=a.br,h.tl=a.tl,h.bl=a.bl,h.mt=a.mt,h.mb=a.mb,h.mr=new A.Control({x:.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:"resizing"}),h.ml=new A.Control({x:-.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:"resizing"})}}()},3162:function(t,e,i){var n;void 0===(n=function(){"use strict";function e(t,e,i){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){a(n.response,e,i)},n.onerror=function(){console.error("could not download file")},n.send()}function n(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return 200<=e.status&&299>=e.status}function r(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(i){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var o="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof i.g&&i.g.global===i.g?i.g:void 0,s=o.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),a=o.saveAs||("object"!=typeof window||window!==o?function(){}:"download"in HTMLAnchorElement.prototype&&!s?function(t,i,s){var a=o.URL||o.webkitURL,h=document.createElement("a");i=i||t.name||"download",h.download=i,h.rel="noopener","string"==typeof t?(h.href=t,h.origin===location.origin?r(h):n(h.href)?e(t,i,s):r(h,h.target="_blank")):(h.href=a.createObjectURL(t),setTimeout((function(){a.revokeObjectURL(h.href)}),4e4),setTimeout((function(){r(h)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,i,o){if(i=i||t.name||"download","string"!=typeof t)navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!=typeof e&&(console.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob(["\ufeff",t],{type:t.type}):t}(t,o),i);else if(n(t))e(t,i,o);else{var s=document.createElement("a");s.href=t,s.target="_blank",setTimeout((function(){r(s)}))}}:function(t,i,n,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof t)return e(t,i,n);var a="application/octet-stream"===t.type,h=/constructor/i.test(o.HTMLElement)||o.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||a&&h||s)&&"undefined"!=typeof FileReader){var l=new FileReader;l.onloadend=function(){var t=l.result;t=c?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},l.readAsDataURL(t)}else{var u=o.URL||o.webkitURL,f=u.createObjectURL(t);r?r.location=f:location.href=f,r=null,setTimeout((function(){u.revokeObjectURL(f)}),4e4)}});o.saveAs=a.saveAs=a,t.exports=a}.apply(e,[]))||(t.exports=n)},4245:()=>{!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e){var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options={overlayBackgroundColor:"#666666",overlayOpacity:.6,spinnerIcon:"ball-circus",spinnerColor:"#000",spinnerSize:"3x",overlayIDName:"overlay",spinnerIDName:"spinner",offsetY:0,offsetX:0,lockScroll:!1,containerID:null,spinnerZIndex:99999,overlayZIndex:99998},this.stylesheetBaseURL="https://cdn.jsdelivr.net/npm/load-awesome@1.1.0/css/",this.spinner=null,this.spinnerStylesheetURL=null,this.numberOfEmptyDivForSpinner={"ball-8bits":16,"ball-atom":4,"ball-beat":3,"ball-circus":5,"ball-climbing-dot":1,"ball-clip-rotate":1,"ball-clip-rotate-multiple":2,"ball-clip-rotate-pulse":2,"ball-elastic-dots":5,"ball-fall":3,"ball-fussion":4,"ball-grid-beat":9,"ball-grid-pulse":9,"ball-newton-cradle":4,"ball-pulse":3,"ball-pulse-rise":5,"ball-pulse-sync":3,"ball-rotate":1,"ball-running-dots":5,"ball-scale":1,"ball-scale-multiple":3,"ball-scale-pulse":2,"ball-scale-ripple":1,"ball-scale-ripple-multiple":3,"ball-spin":8,"ball-spin-clockwise":8,"ball-spin-clockwise-fade":8,"ball-spin-clockwise-fade-rotating":8,"ball-spin-fade":8,"ball-spin-fade-rotating":8,"ball-spin-rotate":2,"ball-square-clockwise-spin":8,"ball-square-spin":8,"ball-triangle-path":3,"ball-zig-zag":2,"ball-zig-zag-deflect":2,cog:1,"cube-transition":2,fire:3,"line-scale":5,"line-scale-party":5,"line-scale-pulse-out":5,"line-scale-pulse-out-rapid":5,"line-spin-clockwise-fade":8,"line-spin-clockwise-fade-rotating":8,"line-spin-fade":8,"line-spin-fade-rotating":8,pacman:6,"square-jelly-box":2,"square-loader":1,"square-spin":1,timer:1,"triangle-skew-spin":1}}var e;return(e=[{key:"show",value:function(t){this.setOptions(t),this.addSpinnerStylesheet(),this.generateSpinnerElement(),this.options.lockScroll&&(document.body.style.overflow="hidden",document.documentElement.style.overflow="hidden"),this.generateAndAddOverlayElement()}},{key:"hide",value:function(){this.options.lockScroll&&(document.body.style.overflow="",document.documentElement.style.overflow="");var t=document.getElementById("loading-overlay-stylesheet");t&&(t.disabled=!0,t.parentNode.removeChild(t),document.getElementById(this.options.overlayIDName).remove(),document.getElementById(this.options.spinnerIDName).remove())}},{key:"setOptions",value:function(t){if(void 0!==t)for(var e in t)this.options[e]=t[e]}},{key:"generateAndAddOverlayElement",value:function(){var t="50%";0!==this.options.offsetX&&(t="calc(50% + "+this.options.offsetX+")");var e="50%";if(0!==this.options.offsetY&&(e="calc(50% + "+this.options.offsetY+")"),this.options.containerID&&document.body.contains(document.getElementById(this.options.containerID))){var i='<div id="'.concat(this.options.overlayIDName,'" style="display: block !important; position: absolute; top: 0; left: 0; overflow: auto; opacity: ').concat(this.options.overlayOpacity,"; background: ").concat(this.options.overlayBackgroundColor,'; z-index: 50; width: 100%; height: 100%;"></div><div id="').concat(this.options.spinnerIDName,'" style="display: block !important; position: absolute; top: ').concat(e,"; left: ").concat(t,'; -webkit-transform: translate(-50%); -ms-transform: translate(-50%); transform: translate(-50%); z-index: 9999;">').concat(this.spinner,"</div>"),n=document.getElementById(this.options.containerID);return n.style.position="relative",void n.insertAdjacentHTML("beforeend",i)}var r='<div id="'.concat(this.options.overlayIDName,'" style="display: block !important; position: fixed; top: 0; left: 0; overflow: auto; opacity: ').concat(this.options.overlayOpacity,"; background: ").concat(this.options.overlayBackgroundColor,"; z-index: ").concat(this.options.overlayZIndex,'; width: 100%; height: 100%;"></div><div id="').concat(this.options.spinnerIDName,'" style="display: block !important; position: fixed; top: ').concat(e,"; left: ").concat(t,"; -webkit-transform: translate(-50%); -ms-transform: translate(-50%); transform: translate(-50%); z-index: ").concat(this.options.spinnerZIndex,';">').concat(this.spinner,"</div>");document.body.insertAdjacentHTML("beforeend",r)}},{key:"generateSpinnerElement",value:function(){var t=this,e=Object.keys(this.numberOfEmptyDivForSpinner).find((function(e){return e===t.options.spinnerIcon})),i=this.generateEmptyDivElement(this.numberOfEmptyDivForSpinner[e]);this.spinner='<div style="color: '.concat(this.options.spinnerColor,'" class="la-').concat(this.options.spinnerIcon," la-").concat(this.options.spinnerSize,'">').concat(i,"</div>")}},{key:"addSpinnerStylesheet",value:function(){this.setSpinnerStylesheetURL();var t=document.createElement("link");t.setAttribute("id","loading-overlay-stylesheet"),t.setAttribute("rel","stylesheet"),t.setAttribute("type","text/css"),t.setAttribute("href",this.spinnerStylesheetURL),document.getElementsByTagName("head")[0].appendChild(t)}},{key:"setSpinnerStylesheetURL",value:function(){this.spinnerStylesheetURL=this.stylesheetBaseURL+this.options.spinnerIcon+".min.css"}},{key:"generateEmptyDivElement",value:function(t){for(var e="",i=1;i<=t;i++)e+="<div></div>";return e}}])&&function(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}(t.prototype,e),t}();window.JsLoadingOverlay=new i,t.exports=JsLoadingOverlay}])},7851:(t,e,i)=>{"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}i.r(e),i.d(e,{AcroForm:()=>pe,AcroFormAppearance:()=>le,AcroFormButton:()=>ne,AcroFormCheckBox:()=>ae,AcroFormChoiceField:()=>Qt,AcroFormComboBox:()=>ee,AcroFormEditBox:()=>ie,AcroFormListBox:()=>te,AcroFormPasswordField:()=>ce,AcroFormPushButton:()=>re,AcroFormRadioButton:()=>oe,AcroFormTextField:()=>he,GState:()=>xt,ShadingPattern:()=>St,TilingPattern:()=>Ct,default:()=>ui,jsPDF:()=>At});var r=Uint8Array,o=Uint16Array,s=Uint32Array,a=new r([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),h=new r([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),c=new r([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),l=function(t,e){for(var i=new o(31),n=0;n<31;++n)i[n]=e+=1<<t[n-1];var r=new s(i[30]);for(n=1;n<30;++n)for(var a=i[n];a<i[n+1];++a)r[a]=a-i[n]<<5|n;return[i,r]},u=l(a,2),f=u[0],d=u[1];f[28]=258,d[258]=28;for(var p=l(h,0),g=p[0],m=p[1],v=new o(32768),b=0;b<32768;++b){var y=(43690&b)>>>1|(21845&b)<<1;y=(61680&(y=(52428&y)>>>2|(13107&y)<<2))>>>4|(3855&y)<<4,v[b]=((65280&y)>>>8|(255&y)<<8)>>>1}var w=function(t,e,i){for(var n=t.length,r=0,s=new o(e);r<n;++r)++s[t[r]-1];var a,h=new o(e);for(r=0;r<e;++r)h[r]=h[r-1]+s[r-1]<<1;if(i){a=new o(1<<e);var c=15-e;for(r=0;r<n;++r)if(t[r])for(var l=r<<4|t[r],u=e-t[r],f=h[t[r]-1]++<<u,d=f|(1<<u)-1;f<=d;++f)a[v[f]>>>c]=l}else for(a=new o(n),r=0;r<n;++r)a[r]=v[h[t[r]-1]++]>>>15-t[r];return a},x=new r(288);for(b=0;b<144;++b)x[b]=8;for(b=144;b<256;++b)x[b]=9;for(b=256;b<280;++b)x[b]=7;for(b=280;b<288;++b)x[b]=8;var _=new r(32);for(b=0;b<32;++b)_[b]=5;var S=w(x,9,0),C=w(x,9,1),A=w(_,5,0),L=w(_,5,1),P=function(t){for(var e=t[0],i=1;i<t.length;++i)t[i]>e&&(e=t[i]);return e},T=function(t,e,i){var n=e/8>>0;return(t[n]|t[n+1]<<8)>>>(7&e)&i},O=function(t,e){var i=e/8>>0;return(t[i]|t[i+1]<<8|t[i+2]<<16)>>>(7&e)},k=function(t){return(t/8>>0)+(7&t&&1)},N=function(t,e,i){(null==e||e<0)&&(e=0),(null==i||i>t.length)&&(i=t.length);var n=new(t instanceof o?o:t instanceof s?s:r)(i-e);return n.set(t.subarray(e,i)),n},j=function(t,e,i){i<<=7&e;var n=e/8>>0;t[n]|=i,t[n+1]|=i>>>8},F=function(t,e,i){i<<=7&e;var n=e/8>>0;t[n]|=i,t[n+1]|=i>>>8,t[n+2]|=i>>>16},E=function(t,e){for(var i=[],n=0;n<t.length;++n)t[n]&&i.push({s:n,f:t[n]});var s=i.length,a=i.slice();if(!s)return[new r(0),0];if(1==s){var h=new r(i[0].s+1);return h[i[0].s]=1,[h,1]}i.sort((function(t,e){return t.f-e.f})),i.push({s:-1,f:25001});var c=i[0],l=i[1],u=0,f=1,d=2;for(i[0]={s:-1,f:c.f+l.f,l:c,r:l};f!=s-1;)c=i[i[u].f<i[d].f?u++:d++],l=i[u!=f&&i[u].f<i[d].f?u++:d++],i[f++]={s:-1,f:c.f+l.f,l:c,r:l};var p=a[0].s;for(n=1;n<s;++n)a[n].s>p&&(p=a[n].s);var g=new o(p+1),m=I(i[f-1],g,0);if(m>e){n=0;var v=0,b=m-e,y=1<<b;for(a.sort((function(t,e){return g[e.s]-g[t.s]||t.f-e.f}));n<s;++n){var w=a[n].s;if(!(g[w]>e))break;v+=y-(1<<m-g[w]),g[w]=e}for(v>>>=b;v>0;){var x=a[n].s;g[x]<e?v-=1<<e-g[x]++-1:++n}for(;n>=0&&v;--n){var _=a[n].s;g[_]==e&&(--g[_],++v)}m=e}return[new r(g),m]},I=function(t,e,i){return-1==t.s?Math.max(I(t.l,e,i+1),I(t.r,e,i+1)):e[t.s]=i},M=function(t){for(var e=t.length;e&&!t[--e];);for(var i=new o(++e),n=0,r=t[0],s=1,a=function(t){i[n++]=t},h=1;h<=e;++h)if(t[h]==r&&h!=e)++s;else{if(!r&&s>2){for(;s>138;s-=138)a(32754);s>2&&(a(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(a(r),--s;s>6;s-=6)a(8304);s>2&&(a(s-3<<5|8208),s=0)}for(;s--;)a(r);s=1,r=t[h]}return[i.subarray(0,n),e]},D=function(t,e){for(var i=0,n=0;n<e.length;++n)i+=t[n]*e[n];return i},B=function(t,e,i){var n=i.length,r=k(e+2);t[r]=255&n,t[r+1]=n>>>8,t[r+2]=255^t[r],t[r+3]=255^t[r+1];for(var o=0;o<n;++o)t[r+o+4]=i[o];return 8*(r+4+n)},R=function(t,e,i,n,r,s,l,u,f,d,p){j(e,p++,i),++r[256];for(var g=E(r,15),m=g[0],v=g[1],b=E(s,15),y=b[0],C=b[1],L=M(m),P=L[0],T=L[1],O=M(y),k=O[0],N=O[1],I=new o(19),R=0;R<P.length;++R)I[31&P[R]]++;for(R=0;R<k.length;++R)I[31&k[R]]++;for(var z=E(I,7),q=z[0],U=z[1],W=19;W>4&&!q[c[W-1]];--W);var H,V,G,X,Y=d+5<<3,K=D(r,x)+D(s,_)+l,J=D(r,m)+D(s,y)+l+14+3*W+D(I,q)+(2*I[16]+3*I[17]+7*I[18]);if(Y<=K&&Y<=J)return B(e,p,t.subarray(f,f+d));if(j(e,p,1+(J<K)),p+=2,J<K){H=w(m,v,0),V=m,G=w(y,C,0),X=y;var $=w(q,U,0);for(j(e,p,T-257),j(e,p+5,N-1),j(e,p+10,W-4),p+=14,R=0;R<W;++R)j(e,p+3*R,q[c[R]]);p+=3*W;for(var Z=[P,k],Q=0;Q<2;++Q){var tt=Z[Q];for(R=0;R<tt.length;++R){var et=31&tt[R];j(e,p,$[et]),p+=q[et],et>15&&(j(e,p,tt[R]>>>5&127),p+=tt[R]>>>12)}}}else H=S,V=x,G=A,X=_;for(R=0;R<u;++R)if(n[R]>255){et=n[R]>>>18&31,F(e,p,H[et+257]),p+=V[et+257],et>7&&(j(e,p,n[R]>>>23&31),p+=a[et]);var it=31&n[R];F(e,p,G[it]),p+=X[it],it>3&&(F(e,p,n[R]>>>5&8191),p+=h[it])}else F(e,p,H[n[R]]),p+=V[n[R]];return F(e,p,H[256]),p+V[256]},z=new s([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),q=new r(0),U=function(t,e,i,n,c){return function(t,e,i,n,c,l){var u=t.length,f=new r(n+u+5*(1+Math.floor(u/7e3))+c),p=f.subarray(n,f.length-c),g=0;if(!e||u<8)for(var v=0;v<=u;v+=65535){var b=v+65535;b<u?g=B(p,g,t.subarray(v,b)):(p[v]=l,g=B(p,g,t.subarray(v,u)))}else{for(var y=z[e-1],w=y>>>13,x=8191&y,_=(1<<i)-1,S=new o(32768),C=new o(_+1),A=Math.ceil(i/3),L=2*A,P=function(e){return(t[e]^t[e+1]<<A^t[e+2]<<L)&_},T=new s(25e3),O=new o(288),j=new o(32),F=0,E=0,I=(v=0,0),M=0,D=0;v<u;++v){var U=P(v),W=32767&v,H=C[U];if(S[W]=H,C[U]=W,M<=v){var V=u-v;if((F>7e3||I>24576)&&V>423){g=R(t,p,0,T,O,j,E,I,D,v-D,g),I=F=E=0,D=v;for(var G=0;G<286;++G)O[G]=0;for(G=0;G<30;++G)j[G]=0}var X=2,Y=0,K=x,J=W-H&32767;if(V>2&&U==P(v-J))for(var $=Math.min(w,V)-1,Z=Math.min(32767,v),Q=Math.min(258,V);J<=Z&&--K&&W!=H;){if(t[v+X]==t[v+X-J]){for(var tt=0;tt<Q&&t[v+tt]==t[v+tt-J];++tt);if(tt>X){if(X=tt,Y=J,tt>$)break;var et=Math.min(J,tt-2),it=0;for(G=0;G<et;++G){var nt=v-J+G+32768&32767,rt=nt-S[nt]+32768&32767;rt>it&&(it=rt,H=nt)}}}J+=(W=H)-(H=S[W])+32768&32767}if(Y){T[I++]=268435456|d[X]<<18|m[Y];var ot=31&d[X],st=31&m[Y];E+=a[ot]+h[st],++O[257+ot],++j[st],M=v+X,++F}else T[I++]=t[v],++O[t[v]]}}g=R(t,p,l,T,O,j,E,I,D,v-D,g),l||(g=B(p,g,q))}return N(f,0,n+k(g)+c)}(t,null==e.level?6:e.level,null==e.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(t.length)))):12+e.mem,i,n,!c)};function W(t,e){void 0===e&&(e={});var i=function(){var t=1,e=0;return{p:function(i){for(var n=t,r=e,o=i.length,s=0;s!=o;){for(var a=Math.min(s+5552,o);s<a;++s)r+=n+=i[s];n%=65521,r%=65521}t=n,e=r},d:function(){return(t>>>8<<16|(255&e)<<8|e>>>8)+2*((255&t)<<23)}}}();i.p(t);var n=U(t,e,2,4);return function(t,e){var i=e.level,n=0==i?0:i<6?1:9==i?3:2;t[0]=120,t[1]=n<<6|(n?32-2*n:1)}(n,e),function(t,e,i){for(;i;++e)t[e]=i,i>>>=8}(n,n.length-4,i.d()),n}function H(t,e){return function(t,e,i){var n=t.length,o=!e||i,s=!i||i.i;i||(i={}),e||(e=new r(3*n));var l=function(t){var i=e.length;if(t>i){var n=new r(Math.max(2*i,t));n.set(e),e=n}},u=i.f||0,d=i.p||0,p=i.b||0,m=i.l,v=i.d,b=i.m,y=i.n,x=8*n;do{if(!m){i.f=u=T(t,d,1);var _=T(t,d+1,3);if(d+=3,!_){var S=t[(q=k(d)+4)-4]|t[q-3]<<8,A=q+S;if(A>n){if(s)throw"unexpected EOF";break}o&&l(p+S),e.set(t.subarray(q,A),p),i.b=p+=S,i.p=d=8*A;continue}if(1==_)m=C,v=L,b=9,y=5;else{if(2!=_)throw"invalid block type";var j=T(t,d,31)+257,F=T(t,d+10,15)+4,E=j+T(t,d+5,31)+1;d+=14;for(var I=new r(E),M=new r(19),D=0;D<F;++D)M[c[D]]=T(t,d+3*D,7);d+=3*F;var B=P(M),R=(1<<B)-1;if(!s&&d+E*(B+7)>x)break;var z=w(M,B,1);for(D=0;D<E;){var q,U=z[T(t,d,R)];if(d+=15&U,(q=U>>>4)<16)I[D++]=q;else{var W=0,H=0;for(16==q?(H=3+T(t,d,3),d+=2,W=I[D-1]):17==q?(H=3+T(t,d,7),d+=3):18==q&&(H=11+T(t,d,127),d+=7);H--;)I[D++]=W}}var V=I.subarray(0,j),G=I.subarray(j);b=P(V),y=P(G),m=w(V,b,1),v=w(G,y,1)}if(d>x)throw"unexpected EOF"}o&&l(p+131072);for(var X=(1<<b)-1,Y=(1<<y)-1,K=b+y+18;s||d+K<x;){var J=(W=m[O(t,d)&X])>>>4;if((d+=15&W)>x)throw"unexpected EOF";if(!W)throw"invalid length/literal";if(J<256)e[p++]=J;else{if(256==J){m=null;break}var $=J-254;if(J>264){var Z=a[D=J-257];$=T(t,d,(1<<Z)-1)+f[D],d+=Z}var Q=v[O(t,d)&Y],tt=Q>>>4;if(!Q)throw"invalid distance";if(d+=15&Q,G=g[tt],tt>3&&(Z=h[tt],G+=O(t,d)&(1<<Z)-1,d+=Z),d>x)throw"unexpected EOF";o&&l(p+131072);for(var et=p+$;p<et;p+=4)e[p]=e[p-G],e[p+1]=e[p+1-G],e[p+2]=e[p+2-G],e[p+3]=e[p+3-G];p=et}}i.l=m,i.p=d,i.b=p,m&&(u=1,i.m=b,i.d=v,i.n=y)}while(!u);return p==e.length?e:N(e,0,p)}((function(t){if(8!=(15&t[0])||t[0]>>>4>7||(t[0]<<8|t[1])%31)throw"invalid zlib data";if(32&t[1])throw"invalid zlib data: preset dictionaries not supported"}(t),t.subarray(2,-4)),e)}var V=i(2702),G=function(){return"undefined"!=typeof window?window:void 0!==i.g?i.g:"undefined"!=typeof self?self:this}();function X(){G.console&&"function"==typeof G.console.log&&G.console.log.apply(G.console,arguments)}var Y={log:X,warn:function(t){G.console&&("function"==typeof G.console.warn?G.console.warn.apply(G.console,arguments):X.call(null,arguments))},error:function(t){G.console&&("function"==typeof G.console.error?G.console.error.apply(G.console,arguments):X(t))}};function K(t,e,i){var n=new XMLHttpRequest;n.open("GET",t),n.responseType="blob",n.onload=function(){tt(n.response,e,i)},n.onerror=function(){Y.error("could not download file")},n.send()}function J(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return e.status>=200&&e.status<=299}function $(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(i){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var Z,Q,tt=G.saveAs||("object"!==("undefined"==typeof window?"undefined":n(window))||window!==G?function(){}:"undefined"!=typeof HTMLAnchorElement&&"download"in HTMLAnchorElement.prototype?function(t,e,i){var n=G.URL||G.webkitURL,r=document.createElement("a");e=e||t.name||"download",r.download=e,r.rel="noopener","string"==typeof t?(r.href=t,r.origin!==location.origin?J(r.href)?K(t,e,i):$(r,r.target="_blank"):$(r)):(r.href=n.createObjectURL(t),setTimeout((function(){n.revokeObjectURL(r.href)}),4e4),setTimeout((function(){$(r)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,e,i){if(e=e||t.name||"download","string"==typeof t)if(J(t))K(t,e,i);else{var r=document.createElement("a");r.href=t,r.target="_blank",setTimeout((function(){$(r)}))}else navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!==n(e)&&(Y.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t}(t,i),e)}:function(t,e,i,r){if((r=r||open("","_blank"))&&(r.document.title=r.document.body.innerText="downloading..."),"string"==typeof t)return K(t,e,i);var o="application/octet-stream"===t.type,s=/constructor/i.test(G.HTMLElement)||G.safari,a=/CriOS\/[\d]+/.test(navigator.userAgent);if((a||o&&s)&&"object"===("undefined"==typeof FileReader?"undefined":n(FileReader))){var h=new FileReader;h.onloadend=function(){var t=h.result;t=a?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),r?r.location.href=t:location=t,r=null},h.readAsDataURL(t)}else{var c=G.URL||G.webkitURL,l=c.createObjectURL(t);r?r.location=l:location.href=l,r=null,setTimeout((function(){c.revokeObjectURL(l)}),4e4)}});function et(t){var e;t=t||"",this.ok=!1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"}[t=(t=t.replace(/ /g,"")).toLowerCase()]||t;for(var i=[{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^(\w{2})(\w{2})(\w{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^(\w{1})(\w{1})(\w{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],n=0;n<i.length;n++){var r=i[n].re,o=i[n].process,s=r.exec(t);s&&(e=o(s),this.r=e[0],this.g=e[1],this.b=e[2],this.ok=!0)}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),i=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==i.length&&(i="0"+i),"#"+t+e+i}}function it(t,e){var i=t[0],n=t[1],r=t[2],o=t[3];i=rt(i,n,r,o,e[0],7,-680876936),o=rt(o,i,n,r,e[1],12,-389564586),r=rt(r,o,i,n,e[2],17,606105819),n=rt(n,r,o,i,e[3],22,-1044525330),i=rt(i,n,r,o,e[4],7,-176418897),o=rt(o,i,n,r,e[5],12,1200080426),r=rt(r,o,i,n,e[6],17,-1473231341),n=rt(n,r,o,i,e[7],22,-45705983),i=rt(i,n,r,o,e[8],7,1770035416),o=rt(o,i,n,r,e[9],12,-1958414417),r=rt(r,o,i,n,e[10],17,-42063),n=rt(n,r,o,i,e[11],22,-1990404162),i=rt(i,n,r,o,e[12],7,1804603682),o=rt(o,i,n,r,e[13],12,-40341101),r=rt(r,o,i,n,e[14],17,-1502002290),i=ot(i,n=rt(n,r,o,i,e[15],22,1236535329),r,o,e[1],5,-165796510),o=ot(o,i,n,r,e[6],9,-1069501632),r=ot(r,o,i,n,e[11],14,643717713),n=ot(n,r,o,i,e[0],20,-373897302),i=ot(i,n,r,o,e[5],5,-701558691),o=ot(o,i,n,r,e[10],9,38016083),r=ot(r,o,i,n,e[15],14,-660478335),n=ot(n,r,o,i,e[4],20,-405537848),i=ot(i,n,r,o,e[9],5,568446438),o=ot(o,i,n,r,e[14],9,-1019803690),r=ot(r,o,i,n,e[3],14,-187363961),n=ot(n,r,o,i,e[8],20,1163531501),i=ot(i,n,r,o,e[13],5,-1444681467),o=ot(o,i,n,r,e[2],9,-51403784),r=ot(r,o,i,n,e[7],14,1735328473),i=st(i,n=ot(n,r,o,i,e[12],20,-1926607734),r,o,e[5],4,-378558),o=st(o,i,n,r,e[8],11,-2022574463),r=st(r,o,i,n,e[11],16,1839030562),n=st(n,r,o,i,e[14],23,-35309556),i=st(i,n,r,o,e[1],4,-1530992060),o=st(o,i,n,r,e[4],11,1272893353),r=st(r,o,i,n,e[7],16,-155497632),n=st(n,r,o,i,e[10],23,-1094730640),i=st(i,n,r,o,e[13],4,681279174),o=st(o,i,n,r,e[0],11,-358537222),r=st(r,o,i,n,e[3],16,-722521979),n=st(n,r,o,i,e[6],23,76029189),i=st(i,n,r,o,e[9],4,-640364487),o=st(o,i,n,r,e[12],11,-421815835),r=st(r,o,i,n,e[15],16,530742520),i=at(i,n=st(n,r,o,i,e[2],23,-995338651),r,o,e[0],6,-198630844),o=at(o,i,n,r,e[7],10,1126891415),r=at(r,o,i,n,e[14],15,-1416354905),n=at(n,r,o,i,e[5],21,-57434055),i=at(i,n,r,o,e[12],6,1700485571),o=at(o,i,n,r,e[3],10,-1894986606),r=at(r,o,i,n,e[10],15,-1051523),n=at(n,r,o,i,e[1],21,-2054922799),i=at(i,n,r,o,e[8],6,1873313359),o=at(o,i,n,r,e[15],10,-30611744),r=at(r,o,i,n,e[6],15,-1560198380),n=at(n,r,o,i,e[13],21,1309151649),i=at(i,n,r,o,e[4],6,-145523070),o=at(o,i,n,r,e[11],10,-1120210379),r=at(r,o,i,n,e[2],15,718787259),n=at(n,r,o,i,e[9],21,-343485551),t[0]=gt(i,t[0]),t[1]=gt(n,t[1]),t[2]=gt(r,t[2]),t[3]=gt(o,t[3])}function nt(t,e,i,n,r,o){return e=gt(gt(e,t),gt(n,o)),gt(e<<r|e>>>32-r,i)}function rt(t,e,i,n,r,o,s){return nt(e&i|~e&n,t,e,r,o,s)}function ot(t,e,i,n,r,o,s){return nt(e&n|i&~n,t,e,r,o,s)}function st(t,e,i,n,r,o,s){return nt(e^i^n,t,e,r,o,s)}function at(t,e,i,n,r,o,s){return nt(i^(e|~n),t,e,r,o,s)}function ht(t){var e,i=t.length,n=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=t.length;e+=64)it(n,ct(t.substring(e-64,e)));t=t.substring(e-64);var r=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(e=0;e<t.length;e++)r[e>>2]|=t.charCodeAt(e)<<(e%4<<3);if(r[e>>2]|=128<<(e%4<<3),e>55)for(it(n,r),e=0;e<16;e++)r[e]=0;return r[14]=8*i,it(n,r),n}function ct(t){var e,i=[];for(e=0;e<64;e+=4)i[e>>2]=t.charCodeAt(e)+(t.charCodeAt(e+1)<<8)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+3)<<24);return i}Z=G.atob.bind(G),Q=G.btoa.bind(G);var lt="0123456789abcdef".split("");function ut(t){for(var e="",i=0;i<4;i++)e+=lt[t>>8*i+4&15]+lt[t>>8*i&15];return e}function ft(t){return String.fromCharCode((255&t)>>0,(65280&t)>>8,(16711680&t)>>16,(4278190080&t)>>24)}function dt(t){return ht(t).map(ft).join("")}var pt="5d41402abc4b2a76b9719d911017c592"!=function(t){for(var e=0;e<t.length;e++)t[e]=ut(t[e]);return t.join("")}(ht("hello"));function gt(t,e){if(pt){var i=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(i>>16)<<16|65535&i}return t+e&4294967295}function mt(t,e){var i,n,r,o;if(t!==i){for(var s=(r=t,o=1+(256/t.length>>0),new Array(o+1).join(r)),a=[],h=0;h<256;h++)a[h]=h;var c=0;for(h=0;h<256;h++){var l=a[h];c=(c+l+s.charCodeAt(h))%256,a[h]=a[c],a[c]=l}i=t,n=a}else a=n;var u=e.length,f=0,d=0,p="";for(h=0;h<u;h++)d=(d+(l=a[f=(f+1)%256]))%256,a[f]=a[d],a[d]=l,s=a[(a[f]+a[d])%256],p+=String.fromCharCode(e.charCodeAt(h)^s);return p}var vt={print:4,modify:8,copy:16,"annot-forms":32};function bt(t,e,i,n){this.v=1,this.r=2;var r=192;t.forEach((function(t){if(void 0!==vt.perm)throw new Error("Invalid permission: "+t);r+=vt[t]})),this.padding="(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";var o=(e+this.padding).substr(0,32),s=(i+this.padding).substr(0,32);this.O=this.processOwnerPassword(o,s),this.P=-(1+(255^r)),this.encryptionKey=dt(o+this.O+this.lsbFirstWord(this.P)+this.hexToBytes(n)).substr(0,5),this.U=mt(this.encryptionKey,this.padding)}function yt(t){if(/[^\u0000-\u00ff]/.test(t))throw new Error("Invalid PDF Name Object: "+t+", Only accept ASCII characters.");for(var e="",i=t.length,n=0;n<i;n++){var r=t.charCodeAt(n);e+=r<33||35===r||37===r||40===r||41===r||47===r||60===r||62===r||91===r||93===r||123===r||125===r||r>126?"#"+("0"+r.toString(16)).slice(-2):t[n]}return e}function wt(t){if("object"!==n(t))throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");var e={};this.subscribe=function(t,i,n){if(n=n||!1,"string"!=typeof t||"function"!=typeof i||"boolean"!=typeof n)throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");e.hasOwnProperty(t)||(e[t]={});var r=Math.random().toString(35);return e[t][r]=[i,!!n],r},this.unsubscribe=function(t){for(var i in e)if(e[i][t])return delete e[i][t],0===Object.keys(e[i]).length&&delete e[i],!0;return!1},this.publish=function(i){if(e.hasOwnProperty(i)){var n=Array.prototype.slice.call(arguments,1),r=[];for(var o in e[i]){var s=e[i][o];try{s[0].apply(t,n)}catch(i){G.console&&Y.error("jsPDF PubSub Error",i.message,i)}s[1]&&r.push(o)}r.length&&r.forEach(this.unsubscribe)}},this.getTopics=function(){return e}}function xt(t){if(!(this instanceof xt))return new xt(t);var e="opacity,stroke-opacity".split(",");for(var i in t)t.hasOwnProperty(i)&&e.indexOf(i)>=0&&(this[i]=t[i]);this.id="",this.objectNumber=-1}function _t(t,e){this.gState=t,this.matrix=e,this.id="",this.objectNumber=-1}function St(t,e,i,n,r){if(!(this instanceof St))return new St(t,e,i,n,r);this.type="axial"===t?2:3,this.coords=e,this.colors=i,_t.call(this,n,r)}function Ct(t,e,i,n,r){if(!(this instanceof Ct))return new Ct(t,e,i,n,r);this.boundingBox=t,this.xStep=e,this.yStep=i,this.stream="",this.cloneIndex=0,_t.call(this,n,r)}function At(t){var e,i="string"==typeof arguments[0]?arguments[0]:"p",r=arguments[1],o=arguments[2],s=arguments[3],a=[],h=1,c=16,l="S",u=null;"object"===n(t=t||{})&&(i=t.orientation,r=t.unit||r,o=t.format||o,s=t.compress||t.compressPdf||s,null!==(u=t.encryption||null)&&(u.userPassword=u.userPassword||"",u.ownerPassword=u.ownerPassword||"",u.userPermissions=u.userPermissions||[]),h="number"==typeof t.userUnit?Math.abs(t.userUnit):1,void 0!==t.precision&&(e=t.precision),void 0!==t.floatPrecision&&(c=t.floatPrecision),l=t.defaultPathOperation||"S"),a=t.filters||(!0===s?["FlateEncode"]:a),r=r||"mm",i=(""+(i||"P")).toLowerCase();var f=t.putOnlyUsedFonts||!1,d={},p={internal:{},__private__:{}};p.__private__.PubSub=wt;var g="1.3",m=p.__private__.getPdfVersion=function(){return g};p.__private__.setPdfVersion=function(t){g=t};var v={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]};p.__private__.getPageFormats=function(){return v};var b=p.__private__.getPageFormat=function(t){return v[t]};o=o||"a4";var y={COMPAT:"compat",ADVANCED:"advanced"},w=y.COMPAT;function x(){this.saveGraphicsState(),ot(new Gt(Pt,0,0,-Pt,0,zi()*Pt).toString()+" cm"),this.setFontSize(this.getFontSize()/Pt),l="n",w=y.ADVANCED}function _(){this.restoreGraphicsState(),l="S",w=y.COMPAT}var S=p.__private__.combineFontStyleAndFontWeight=function(t,e){if("bold"==t&&"normal"==e||"bold"==t&&400==e||"normal"==t&&"italic"==e||"bold"==t&&"italic"==e)throw new Error("Invalid Combination of fontweight and fontstyle");return e&&(t=400==e||"normal"===e?"italic"===t?"italic":"normal":700!=e&&"bold"!==e||"normal"!==t?(700==e?"bold":e)+""+t:"bold"),t};p.advancedAPI=function(t){var e=w===y.COMPAT;return e&&x.call(this),"function"!=typeof t||(t(this),e&&_.call(this)),this},p.compatAPI=function(t){var e=w===y.ADVANCED;return e&&_.call(this),"function"!=typeof t||(t(this),e&&x.call(this)),this},p.isAdvancedAPI=function(){return w===y.ADVANCED};var C,A=function(t){if(w!==y.ADVANCED)throw new Error(t+" is only available in 'advanced' API mode. You need to call advancedAPI() first.")},L=p.roundToPrecision=p.__private__.roundToPrecision=function(t,i){var n=e||i;if(isNaN(t)||isNaN(n))throw new Error("Invalid argument passed to jsPDF.roundToPrecision");return t.toFixed(n).replace(/0+$/,"")};C=p.hpf=p.__private__.hpf="number"==typeof c?function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return L(t,c)}:"smart"===c?function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return L(t,t>-1&&t<1?16:5)}:function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return L(t,16)};var P=p.f2=p.__private__.f2=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f2");return L(t,2)},T=p.__private__.f3=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f3");return L(t,3)},O=p.scale=p.__private__.scale=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.scale");return w===y.COMPAT?t*Pt:w===y.ADVANCED?t:void 0},k=function(t){return w===y.COMPAT?zi()-t:w===y.ADVANCED?t:void 0},N=function(t){return O(k(t))};p.__private__.setPrecision=p.setPrecision=function(t){"number"==typeof parseInt(t,10)&&(e=parseInt(t,10))};var j,F="00000000000000000000000000000000",E=p.__private__.getFileId=function(){return F},I=p.__private__.setFileId=function(t){return F=void 0!==t&&/^[a-fA-F0-9]{32}$/.test(t)?t.toUpperCase():F.split("").map((function(){return"ABCDEF0123456789".charAt(Math.floor(16*Math.random()))})).join(""),null!==u&&(Ye=new bt(u.userPermissions,u.userPassword,u.ownerPassword,F)),F};p.setFileId=function(t){return I(t),this},p.getFileId=function(){return E()};var M=p.__private__.convertDateToPDFDate=function(t){var e=t.getTimezoneOffset(),i=e<0?"+":"-",n=Math.floor(Math.abs(e/60)),r=Math.abs(e%60),o=[i,q(n),"'",q(r),"'"].join("");return["D:",t.getFullYear(),q(t.getMonth()+1),q(t.getDate()),q(t.getHours()),q(t.getMinutes()),q(t.getSeconds()),o].join("")},D=p.__private__.convertPDFDateToDate=function(t){var e=parseInt(t.substr(2,4),10),i=parseInt(t.substr(6,2),10)-1,n=parseInt(t.substr(8,2),10),r=parseInt(t.substr(10,2),10),o=parseInt(t.substr(12,2),10),s=parseInt(t.substr(14,2),10);return new Date(e,i,n,r,o,s,0)},B=p.__private__.setCreationDate=function(t){var e;if(void 0===t&&(t=new Date),t instanceof Date)e=M(t);else{if(!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t))throw new Error("Invalid argument passed to jsPDF.setCreationDate");e=t}return j=e},R=p.__private__.getCreationDate=function(t){var e=j;return"jsDate"===t&&(e=D(j)),e};p.setCreationDate=function(t){return B(t),this},p.getCreationDate=function(t){return R(t)};var z,q=p.__private__.padd2=function(t){return("0"+parseInt(t)).slice(-2)},U=p.__private__.padd2Hex=function(t){return("00"+(t=t.toString())).substr(t.length)},W=0,H=[],X=[],K=0,J=[],$=[],Z=!1,it=X,nt=function(){W=0,K=0,X=[],H=[],J=[],te=$t(),ee=$t()};p.__private__.setCustomOutputDestination=function(t){Z=!0,it=t};var rt=function(t){Z||(it=t)};p.__private__.resetCustomOutputDestination=function(){Z=!1,it=X};var ot=p.__private__.out=function(t){return t=t.toString(),K+=t.length+1,it.push(t),it},st=p.__private__.write=function(t){return ot(1===arguments.length?t.toString():Array.prototype.join.call(arguments," "))},at=p.__private__.getArrayBuffer=function(t){for(var e=t.length,i=new ArrayBuffer(e),n=new Uint8Array(i);e--;)n[e]=t.charCodeAt(e);return i},ht=[["Helvetica","helvetica","normal","WinAnsiEncoding"],["Helvetica-Bold","helvetica","bold","WinAnsiEncoding"],["Helvetica-Oblique","helvetica","italic","WinAnsiEncoding"],["Helvetica-BoldOblique","helvetica","bolditalic","WinAnsiEncoding"],["Courier","courier","normal","WinAnsiEncoding"],["Courier-Bold","courier","bold","WinAnsiEncoding"],["Courier-Oblique","courier","italic","WinAnsiEncoding"],["Courier-BoldOblique","courier","bolditalic","WinAnsiEncoding"],["Times-Roman","times","normal","WinAnsiEncoding"],["Times-Bold","times","bold","WinAnsiEncoding"],["Times-Italic","times","italic","WinAnsiEncoding"],["Times-BoldItalic","times","bolditalic","WinAnsiEncoding"],["ZapfDingbats","zapfdingbats","normal",null],["Symbol","symbol","normal",null]];p.__private__.getStandardFonts=function(){return ht};var ct=t.fontSize||16;p.__private__.setFontSize=p.setFontSize=function(t){return ct=w===y.ADVANCED?t/Pt:t,this};var lt,ut=p.__private__.getFontSize=p.getFontSize=function(){return w===y.COMPAT?ct:ct*Pt},ft=t.R2L||!1;p.__private__.setR2L=p.setR2L=function(t){return ft=t,this},p.__private__.getR2L=p.getR2L=function(){return ft};var dt,pt=p.__private__.setZoomMode=function(t){if(/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t))lt=t;else if(isNaN(t)){if(-1===[void 0,null,"fullwidth","fullheight","fullpage","original"].indexOf(t))throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "'+t+'" is not recognized.');lt=t}else lt=parseInt(t,10)};p.__private__.getZoomMode=function(){return lt};var gt,mt=p.__private__.setPageMode=function(t){if(-1==[void 0,null,"UseNone","UseOutlines","UseThumbs","FullScreen"].indexOf(t))throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "'+t+'" is not recognized.');dt=t};p.__private__.getPageMode=function(){return dt};var vt=p.__private__.setLayoutMode=function(t){if(-1==[void 0,null,"continuous","single","twoleft","tworight","two"].indexOf(t))throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "'+t+'" is not recognized.');gt=t};p.__private__.getLayoutMode=function(){return gt},p.__private__.setDisplayMode=p.setDisplayMode=function(t,e,i){return pt(t),vt(e),mt(i),this};var _t={title:"",subject:"",author:"",keywords:"",creator:""};p.__private__.getDocumentProperty=function(t){if(-1===Object.keys(_t).indexOf(t))throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");return _t[t]},p.__private__.getDocumentProperties=function(){return _t},p.__private__.setDocumentProperties=p.setProperties=p.setDocumentProperties=function(t){for(var e in _t)_t.hasOwnProperty(e)&&t[e]&&(_t[e]=t[e]);return this},p.__private__.setDocumentProperty=function(t,e){if(-1===Object.keys(_t).indexOf(t))throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");return _t[t]=e};var Lt,Pt,Tt,Ot,kt,Nt={},jt={},Ft=[],Et={},It={},Mt={},Dt={},Bt=null,Rt=0,zt=[],qt=new wt(p),Ut=t.hotfixes||[],Wt={},Ht={},Vt=[],Gt=function t(e,i,n,r,o,s){if(!(this instanceof t))return new t(e,i,n,r,o,s);isNaN(e)&&(e=1),isNaN(i)&&(i=0),isNaN(n)&&(n=0),isNaN(r)&&(r=1),isNaN(o)&&(o=0),isNaN(s)&&(s=0),this._matrix=[e,i,n,r,o,s]};Object.defineProperty(Gt.prototype,"sx",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Gt.prototype,"shy",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Gt.prototype,"shx",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Gt.prototype,"sy",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Gt.prototype,"tx",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Gt.prototype,"ty",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Gt.prototype,"a",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Gt.prototype,"b",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Gt.prototype,"c",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Gt.prototype,"d",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Gt.prototype,"e",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Gt.prototype,"f",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Gt.prototype,"rotation",{get:function(){return Math.atan2(this.shx,this.sx)}}),Object.defineProperty(Gt.prototype,"scaleX",{get:function(){return this.decompose().scale.sx}}),Object.defineProperty(Gt.prototype,"scaleY",{get:function(){return this.decompose().scale.sy}}),Object.defineProperty(Gt.prototype,"isIdentity",{get:function(){return 1===this.sx&&0===this.shy&&0===this.shx&&1===this.sy&&0===this.tx&&0===this.ty}}),Gt.prototype.join=function(t){return[this.sx,this.shy,this.shx,this.sy,this.tx,this.ty].map(C).join(t)},Gt.prototype.multiply=function(t){var e=t.sx*this.sx+t.shy*this.shx,i=t.sx*this.shy+t.shy*this.sy,n=t.shx*this.sx+t.sy*this.shx,r=t.shx*this.shy+t.sy*this.sy,o=t.tx*this.sx+t.ty*this.shx+this.tx,s=t.tx*this.shy+t.ty*this.sy+this.ty;return new Gt(e,i,n,r,o,s)},Gt.prototype.decompose=function(){var t=this.sx,e=this.shy,i=this.shx,n=this.sy,r=this.tx,o=this.ty,s=Math.sqrt(t*t+e*e),a=(t/=s)*i+(e/=s)*n;i-=t*a,n-=e*a;var h=Math.sqrt(i*i+n*n);return a/=h,t*(n/=h)<e*(i/=h)&&(t=-t,e=-e,a=-a,s=-s),{scale:new Gt(s,0,0,h,0,0),translate:new Gt(1,0,0,1,r,o),rotate:new Gt(t,e,-e,t,0,0),skew:new Gt(1,0,a,1,0,0)}},Gt.prototype.toString=function(t){return this.join(" ")},Gt.prototype.inversed=function(){var t=this.sx,e=this.shy,i=this.shx,n=this.sy,r=this.tx,o=this.ty,s=1/(t*n-e*i),a=n*s,h=-e*s,c=-i*s,l=t*s;return new Gt(a,h,c,l,-a*r-c*o,-h*r-l*o)},Gt.prototype.applyToPoint=function(t){var e=t.x*this.sx+t.y*this.shx+this.tx,i=t.x*this.shy+t.y*this.sy+this.ty;return new ji(e,i)},Gt.prototype.applyToRectangle=function(t){var e=this.applyToPoint(t),i=this.applyToPoint(new ji(t.x+t.w,t.y+t.h));return new Fi(e.x,e.y,i.x-e.x,i.y-e.y)},Gt.prototype.clone=function(){var t=this.sx,e=this.shy,i=this.shx,n=this.sy,r=this.tx,o=this.ty;return new Gt(t,e,i,n,r,o)},p.Matrix=Gt;var Xt=p.matrixMult=function(t,e){return e.multiply(t)},Yt=new Gt(1,0,0,1,0,0);p.unitMatrix=p.identityMatrix=Yt;var Kt=function(t,e){if(!It[t]){var i=(e instanceof St?"Sh":"P")+(Object.keys(Et).length+1).toString(10);e.id=i,It[t]=i,Et[i]=e,qt.publish("addPattern",e)}};p.ShadingPattern=St,p.TilingPattern=Ct,p.addShadingPattern=function(t,e){return A("addShadingPattern()"),Kt(t,e),this},p.beginTilingPattern=function(t){A("beginTilingPattern()"),Ii(t.boundingBox[0],t.boundingBox[1],t.boundingBox[2]-t.boundingBox[0],t.boundingBox[3]-t.boundingBox[1],t.matrix)},p.endTilingPattern=function(t,e){A("endTilingPattern()"),e.stream=$[z].join("\n"),Kt(t,e),qt.publish("endTilingPattern",e),Vt.pop().restore()};var Jt=p.__private__.newObject=function(){var t=$t();return Zt(t,!0),t},$t=p.__private__.newObjectDeferred=function(){return W++,H[W]=function(){return K},W},Zt=function(t,e){return e="boolean"==typeof e&&e,H[t]=K,e&&ot(t+" 0 obj"),t},Qt=p.__private__.newAdditionalObject=function(){var t={objId:$t(),content:""};return J.push(t),t},te=$t(),ee=$t(),ie=p.__private__.decodeColorString=function(t){var e=t.split(" ");if(2!==e.length||"g"!==e[1]&&"G"!==e[1])5!==e.length||"k"!==e[4]&&"K"!==e[4]||(e=[(1-e[0])*(1-e[3]),(1-e[1])*(1-e[3]),(1-e[2])*(1-e[3]),"r"]);else{var i=parseFloat(e[0]);e=[i,i,i,"r"]}for(var n="#",r=0;r<3;r++)n+=("0"+Math.floor(255*parseFloat(e[r])).toString(16)).slice(-2);return n},ne=p.__private__.encodeColorString=function(t){var e;"string"==typeof t&&(t={ch1:t});var i=t.ch1,r=t.ch2,o=t.ch3,s=t.ch4,a="draw"===t.pdfColorType?["G","RG","K"]:["g","rg","k"];if("string"==typeof i&&"#"!==i.charAt(0)){var h=new et(i);if(h.ok)i=h.toHex();else if(!/^\d*\.?\d*$/.test(i))throw new Error('Invalid color "'+i+'" passed to jsPDF.encodeColorString.')}if("string"==typeof i&&/^#[0-9A-Fa-f]{3}$/.test(i)&&(i="#"+i[1]+i[1]+i[2]+i[2]+i[3]+i[3]),"string"==typeof i&&/^#[0-9A-Fa-f]{6}$/.test(i)){var c=parseInt(i.substr(1),16);i=c>>16&255,r=c>>8&255,o=255&c}if(void 0===r||void 0===s&&i===r&&r===o)e="string"==typeof i?i+" "+a[0]:2===t.precision?P(i/255)+" "+a[0]:T(i/255)+" "+a[0];else if(void 0===s||"object"===n(s)){if(s&&!isNaN(s.a)&&0===s.a)return["1.","1.","1.",a[1]].join(" ");e="string"==typeof i?[i,r,o,a[1]].join(" "):2===t.precision?[P(i/255),P(r/255),P(o/255),a[1]].join(" "):[T(i/255),T(r/255),T(o/255),a[1]].join(" ")}else e="string"==typeof i?[i,r,o,s,a[2]].join(" "):2===t.precision?[P(i),P(r),P(o),P(s),a[2]].join(" "):[T(i),T(r),T(o),T(s),a[2]].join(" ");return e},re=p.__private__.getFilters=function(){return a},oe=p.__private__.putStream=function(t){var e=(t=t||{}).data||"",i=t.filters||re(),n=t.alreadyAppliedFilters||[],r=t.addLength1||!1,o=e.length,s=t.objectId,a=function(t){return t};if(null!==u&&void 0===s)throw new Error("ObjectId must be passed to putStream for file encryption");null!==u&&(a=Ye.encryptor(s,0));var h={};!0===i&&(i=["FlateEncode"]);var c=t.additionalKeyValues||[],l=(h=void 0!==At.API.processDataByFilters?At.API.processDataByFilters(e,i):{data:e,reverseChain:[]}).reverseChain+(Array.isArray(n)?n.join(" "):n.toString());if(0!==h.data.length&&(c.push({key:"Length",value:h.data.length}),!0===r&&c.push({key:"Length1",value:o})),0!=l.length)if(l.split("/").length-1==1)c.push({key:"Filter",value:l});else{c.push({key:"Filter",value:"["+l+"]"});for(var f=0;f<c.length;f+=1)if("DecodeParms"===c[f].key){for(var d=[],p=0;p<h.reverseChain.split("/").length-1;p+=1)d.push("null");d.push(c[f].value),c[f].value="["+d.join(" ")+"]"}}ot("<<");for(var g=0;g<c.length;g++)ot("/"+c[g].key+" "+c[g].value);ot(">>"),0!==h.data.length&&(ot("stream"),ot(a(h.data)),ot("endstream"))},se=p.__private__.putPage=function(t){var e=t.number,i=t.data,n=t.objId,r=t.contentsObjId;Zt(n,!0),ot("<</Type /Page"),ot("/Parent "+t.rootDictionaryObjId+" 0 R"),ot("/Resources "+t.resourceDictionaryObjId+" 0 R"),ot("/MediaBox ["+parseFloat(C(t.mediaBox.bottomLeftX))+" "+parseFloat(C(t.mediaBox.bottomLeftY))+" "+C(t.mediaBox.topRightX)+" "+C(t.mediaBox.topRightY)+"]"),null!==t.cropBox&&ot("/CropBox ["+C(t.cropBox.bottomLeftX)+" "+C(t.cropBox.bottomLeftY)+" "+C(t.cropBox.topRightX)+" "+C(t.cropBox.topRightY)+"]"),null!==t.bleedBox&&ot("/BleedBox ["+C(t.bleedBox.bottomLeftX)+" "+C(t.bleedBox.bottomLeftY)+" "+C(t.bleedBox.topRightX)+" "+C(t.bleedBox.topRightY)+"]"),null!==t.trimBox&&ot("/TrimBox ["+C(t.trimBox.bottomLeftX)+" "+C(t.trimBox.bottomLeftY)+" "+C(t.trimBox.topRightX)+" "+C(t.trimBox.topRightY)+"]"),null!==t.artBox&&ot("/ArtBox ["+C(t.artBox.bottomLeftX)+" "+C(t.artBox.bottomLeftY)+" "+C(t.artBox.topRightX)+" "+C(t.artBox.topRightY)+"]"),"number"==typeof t.userUnit&&1!==t.userUnit&&ot("/UserUnit "+t.userUnit),qt.publish("putPage",{objId:n,pageContext:zt[e],pageNumber:e,page:i}),ot("/Contents "+r+" 0 R"),ot(">>"),ot("endobj");var o=i.join("\n");return w===y.ADVANCED&&(o+="\nQ"),Zt(r,!0),oe({data:o,filters:re(),objectId:r}),ot("endobj"),n},ae=p.__private__.putPages=function(){var t,e,i=[];for(t=1;t<=Rt;t++)zt[t].objId=$t(),zt[t].contentsObjId=$t();for(t=1;t<=Rt;t++)i.push(se({number:t,data:$[t],objId:zt[t].objId,contentsObjId:zt[t].contentsObjId,mediaBox:zt[t].mediaBox,cropBox:zt[t].cropBox,bleedBox:zt[t].bleedBox,trimBox:zt[t].trimBox,artBox:zt[t].artBox,userUnit:zt[t].userUnit,rootDictionaryObjId:te,resourceDictionaryObjId:ee}));Zt(te,!0),ot("<</Type /Pages");var n="/Kids [";for(e=0;e<Rt;e++)n+=i[e]+" 0 R ";ot(n+"]"),ot("/Count "+Rt),ot(">>"),ot("endobj"),qt.publish("postPutPages")},he=function(t){qt.publish("putFont",{font:t,out:ot,newObject:Jt,putStream:oe}),!0!==t.isAlreadyPutted&&(t.objectNumber=Jt(),ot("<<"),ot("/Type /Font"),ot("/BaseFont /"+yt(t.postScriptName)),ot("/Subtype /Type1"),"string"==typeof t.encoding&&ot("/Encoding /"+t.encoding),ot("/FirstChar 32"),ot("/LastChar 255"),ot(">>"),ot("endobj"))},ce=function(){for(var t in Nt)Nt.hasOwnProperty(t)&&(!1===f||!0===f&&d.hasOwnProperty(t))&&he(Nt[t])},le=function(t){t.objectNumber=Jt();var e=[];e.push({key:"Type",value:"/XObject"}),e.push({key:"Subtype",value:"/Form"}),e.push({key:"BBox",value:"["+[C(t.x),C(t.y),C(t.x+t.width),C(t.y+t.height)].join(" ")+"]"}),e.push({key:"Matrix",value:"["+t.matrix.toString()+"]"});var i=t.pages[1].join("\n");oe({data:i,additionalKeyValues:e,objectId:t.objectNumber}),ot("endobj")},ue=function(){for(var t in Wt)Wt.hasOwnProperty(t)&&le(Wt[t])},fe=function(t,e){var i,n=[],r=1/(e-1);for(i=0;i<1;i+=r)n.push(i);if(n.push(1),0!=t[0].offset){var o={offset:0,color:t[0].color};t.unshift(o)}if(1!=t[t.length-1].offset){var s={offset:1,color:t[t.length-1].color};t.push(s)}for(var a="",h=0,c=0;c<n.length;c++){for(i=n[c];i>t[h+1].offset;)h++;var l=t[h].offset,u=(i-l)/(t[h+1].offset-l),f=t[h].color,d=t[h+1].color;a+=U(Math.round((1-u)*f[0]+u*d[0]).toString(16))+U(Math.round((1-u)*f[1]+u*d[1]).toString(16))+U(Math.round((1-u)*f[2]+u*d[2]).toString(16))}return a.trim()},de=function(t,e){e||(e=21);var i=Jt(),n=fe(t.colors,e),r=[];r.push({key:"FunctionType",value:"0"}),r.push({key:"Domain",value:"[0.0 1.0]"}),r.push({key:"Size",value:"["+e+"]"}),r.push({key:"BitsPerSample",value:"8"}),r.push({key:"Range",value:"[0.0 1.0 0.0 1.0 0.0 1.0]"}),r.push({key:"Decode",value:"[0.0 1.0 0.0 1.0 0.0 1.0]"}),oe({data:n,additionalKeyValues:r,alreadyAppliedFilters:["/ASCIIHexDecode"],objectId:i}),ot("endobj"),t.objectNumber=Jt(),ot("<< /ShadingType "+t.type),ot("/ColorSpace /DeviceRGB");var o="/Coords ["+C(parseFloat(t.coords[0]))+" "+C(parseFloat(t.coords[1]))+" ";2===t.type?o+=C(parseFloat(t.coords[2]))+" "+C(parseFloat(t.coords[3])):o+=C(parseFloat(t.coords[2]))+" "+C(parseFloat(t.coords[3]))+" "+C(parseFloat(t.coords[4]))+" "+C(parseFloat(t.coords[5])),ot(o+="]"),t.matrix&&ot("/Matrix ["+t.matrix.toString()+"]"),ot("/Function "+i+" 0 R"),ot("/Extend [true true]"),ot(">>"),ot("endobj")},pe=function(t,e){var i=$t(),n=Jt();e.push({resourcesOid:i,objectOid:n}),t.objectNumber=n;var r=[];r.push({key:"Type",value:"/Pattern"}),r.push({key:"PatternType",value:"1"}),r.push({key:"PaintType",value:"1"}),r.push({key:"TilingType",value:"1"}),r.push({key:"BBox",value:"["+t.boundingBox.map(C).join(" ")+"]"}),r.push({key:"XStep",value:C(t.xStep)}),r.push({key:"YStep",value:C(t.yStep)}),r.push({key:"Resources",value:i+" 0 R"}),t.matrix&&r.push({key:"Matrix",value:"["+t.matrix.toString()+"]"}),oe({data:t.stream,additionalKeyValues:r,objectId:t.objectNumber}),ot("endobj")},ge=function(t){var e;for(e in Et)Et.hasOwnProperty(e)&&(Et[e]instanceof St?de(Et[e]):Et[e]instanceof Ct&&pe(Et[e],t))},me=function(t){for(var e in t.objectNumber=Jt(),ot("<<"),t)switch(e){case"opacity":ot("/ca "+P(t[e]));break;case"stroke-opacity":ot("/CA "+P(t[e]))}ot(">>"),ot("endobj")},ve=function(){var t;for(t in Mt)Mt.hasOwnProperty(t)&&me(Mt[t])},be=function(){for(var t in ot("/XObject <<"),Wt)Wt.hasOwnProperty(t)&&Wt[t].objectNumber>=0&&ot("/"+t+" "+Wt[t].objectNumber+" 0 R");qt.publish("putXobjectDict"),ot(">>")},ye=function(){Ye.oid=Jt(),ot("<<"),ot("/Filter /Standard"),ot("/V "+Ye.v),ot("/R "+Ye.r),ot("/U <"+Ye.toHexString(Ye.U)+">"),ot("/O <"+Ye.toHexString(Ye.O)+">"),ot("/P "+Ye.P),ot(">>"),ot("endobj")},we=function(){for(var t in ot("/Font <<"),Nt)Nt.hasOwnProperty(t)&&(!1===f||!0===f&&d.hasOwnProperty(t))&&ot("/"+t+" "+Nt[t].objectNumber+" 0 R");ot(">>")},xe=function(){if(Object.keys(Et).length>0){for(var t in ot("/Shading <<"),Et)Et.hasOwnProperty(t)&&Et[t]instanceof St&&Et[t].objectNumber>=0&&ot("/"+t+" "+Et[t].objectNumber+" 0 R");qt.publish("putShadingPatternDict"),ot(">>")}},_e=function(t){if(Object.keys(Et).length>0){for(var e in ot("/Pattern <<"),Et)Et.hasOwnProperty(e)&&Et[e]instanceof p.TilingPattern&&Et[e].objectNumber>=0&&Et[e].objectNumber<t&&ot("/"+e+" "+Et[e].objectNumber+" 0 R");qt.publish("putTilingPatternDict"),ot(">>")}},Se=function(){if(Object.keys(Mt).length>0){var t;for(t in ot("/ExtGState <<"),Mt)Mt.hasOwnProperty(t)&&Mt[t].objectNumber>=0&&ot("/"+t+" "+Mt[t].objectNumber+" 0 R");qt.publish("putGStateDict"),ot(">>")}},Ce=function(t){Zt(t.resourcesOid,!0),ot("<<"),ot("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"),we(),xe(),_e(t.objectOid),Se(),be(),ot(">>"),ot("endobj")},Ae=function(){var t=[];ce(),ve(),ue(),ge(t),qt.publish("putResources"),t.forEach(Ce),Ce({resourcesOid:ee,objectOid:Number.MAX_SAFE_INTEGER}),qt.publish("postPutResources")},Le=function(){qt.publish("putAdditionalObjects");for(var t=0;t<J.length;t++){var e=J[t];Zt(e.objId,!0),ot(e.content),ot("endobj")}qt.publish("postPutAdditionalObjects")},Pe=function(t){jt[t.fontName]=jt[t.fontName]||{},jt[t.fontName][t.fontStyle]=t.id},Te=function(t,e,i,n,r){var o={id:"F"+(Object.keys(Nt).length+1).toString(10),postScriptName:t,fontName:e,fontStyle:i,encoding:n,isStandardFont:r||!1,metadata:{}};return qt.publish("addFont",{font:o,instance:this}),Nt[o.id]=o,Pe(o),o.id},Oe=function(t){for(var e=0,i=ht.length;e<i;e++){var n=Te.call(this,t[e][0],t[e][1],t[e][2],ht[e][3],!0);!1===f&&(d[n]=!0);var r=t[e][0].split("-");Pe({id:n,fontName:r[0],fontStyle:r[1]||""})}qt.publish("addFonts",{fonts:Nt,dictionary:jt})},ke=function(t){return t.foo=function(){try{return t.apply(this,arguments)}catch(t){var e=t.stack||"";~e.indexOf(" at ")&&(e=e.split(" at ")[1]);var i="Error in function "+e.split("\n")[0].split("<")[0]+": "+t.message;if(!G.console)throw new Error(i);G.console.error(i,t),G.alert&&alert(i)}},t.foo.bar=t,t.foo},Ne=function(t,e){var i,n,r,o,s,a,h,c,l;if(r=(e=e||{}).sourceEncoding||"Unicode",s=e.outputEncoding,(e.autoencode||s)&&Nt[Lt].metadata&&Nt[Lt].metadata[r]&&Nt[Lt].metadata[r].encoding&&(o=Nt[Lt].metadata[r].encoding,!s&&Nt[Lt].encoding&&(s=Nt[Lt].encoding),!s&&o.codePages&&(s=o.codePages[0]),"string"==typeof s&&(s=o[s]),s)){for(h=!1,a=[],i=0,n=t.length;i<n;i++)(c=s[t.charCodeAt(i)])?a.push(String.fromCharCode(c)):a.push(t[i]),a[i].charCodeAt(0)>>8&&(h=!0);t=a.join("")}for(i=t.length;void 0===h&&0!==i;)t.charCodeAt(i-1)>>8&&(h=!0),i--;if(!h)return t;for(a=e.noBOM?[]:[254,255],i=0,n=t.length;i<n;i++){if((l=(c=t.charCodeAt(i))>>8)>>8)throw new Error("Character at position "+i+" of string '"+t+"' exceeds 16bits. Cannot be encoded into UCS-2 BE");a.push(l),a.push(c-(l<<8))}return String.fromCharCode.apply(void 0,a)},je=p.__private__.pdfEscape=p.pdfEscape=function(t,e){return Ne(t,e).replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},Fe=p.__private__.beginPage=function(t){$[++Rt]=[],zt[Rt]={objId:0,contentsObjId:0,userUnit:Number(h),artBox:null,bleedBox:null,cropBox:null,trimBox:null,mediaBox:{bottomLeftX:0,bottomLeftY:0,topRightX:Number(t[0]),topRightY:Number(t[1])}},Me(Rt),rt($[z])},Ee=function(t,e){var n,r,s;switch(i=e||i,"string"==typeof t&&(n=b(t.toLowerCase()),Array.isArray(n)&&(r=n[0],s=n[1])),Array.isArray(t)&&(r=t[0]*Pt,s=t[1]*Pt),isNaN(r)&&(r=o[0],s=o[1]),(r>14400||s>14400)&&(Y.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"),r=Math.min(14400,r),s=Math.min(14400,s)),o=[r,s],i.substr(0,1)){case"l":s>r&&(o=[s,r]);break;case"p":r>s&&(o=[s,r])}Fe(o),gi(di),ot(Si),0!==Oi&&ot(Oi+" J"),0!==ki&&ot(ki+" j"),qt.publish("addPage",{pageNumber:Rt})},Ie=function(t){t>0&&t<=Rt&&($.splice(t,1),zt.splice(t,1),Rt--,z>Rt&&(z=Rt),this.setPage(z))},Me=function(t){t>0&&t<=Rt&&(z=t)},De=p.__private__.getNumberOfPages=p.getNumberOfPages=function(){return $.length-1},Be=function(t,e,i){var n,r=void 0;return i=i||{},t=void 0!==t?t:Nt[Lt].fontName,e=void 0!==e?e:Nt[Lt].fontStyle,n=t.toLowerCase(),void 0!==jt[n]&&void 0!==jt[n][e]?r=jt[n][e]:void 0!==jt[t]&&void 0!==jt[t][e]?r=jt[t][e]:!1===i.disableWarning&&Y.warn("Unable to look up font label for font '"+t+"', '"+e+"'. Refer to getFontList() for available fonts."),r||i.noFallback||null==(r=jt.times[e])&&(r=jt.times.normal),r},Re=p.__private__.putInfo=function(){var t=Jt(),e=function(t){return t};for(var i in null!==u&&(e=Ye.encryptor(t,0)),ot("<<"),ot("/Producer ("+je(e("jsPDF "+At.version))+")"),_t)_t.hasOwnProperty(i)&&_t[i]&&ot("/"+i.substr(0,1).toUpperCase()+i.substr(1)+" ("+je(e(_t[i]))+")");ot("/CreationDate ("+je(e(j))+")"),ot(">>"),ot("endobj")},ze=p.__private__.putCatalog=function(t){var e=(t=t||{}).rootDictionaryObjId||te;switch(Jt(),ot("<<"),ot("/Type /Catalog"),ot("/Pages "+e+" 0 R"),lt||(lt="fullwidth"),lt){case"fullwidth":ot("/OpenAction [3 0 R /FitH null]");break;case"fullheight":ot("/OpenAction [3 0 R /FitV null]");break;case"fullpage":ot("/OpenAction [3 0 R /Fit]");break;case"original":ot("/OpenAction [3 0 R /XYZ null null 1]");break;default:var i=""+lt;"%"===i.substr(i.length-1)&&(lt=parseInt(lt)/100),"number"==typeof lt&&ot("/OpenAction [3 0 R /XYZ null null "+P(lt)+"]")}switch(gt||(gt="continuous"),gt){case"continuous":ot("/PageLayout /OneColumn");break;case"single":ot("/PageLayout /SinglePage");break;case"two":case"twoleft":ot("/PageLayout /TwoColumnLeft");break;case"tworight":ot("/PageLayout /TwoColumnRight")}dt&&ot("/PageMode /"+dt),qt.publish("putCatalog"),ot(">>"),ot("endobj")},qe=p.__private__.putTrailer=function(){ot("trailer"),ot("<<"),ot("/Size "+(W+1)),ot("/Root "+W+" 0 R"),ot("/Info "+(W-1)+" 0 R"),null!==u&&ot("/Encrypt "+Ye.oid+" 0 R"),ot("/ID [ <"+F+"> <"+F+"> ]"),ot(">>")},Ue=p.__private__.putHeader=function(){ot("%PDF-"+g),ot("%ºß¬à")},We=p.__private__.putXRef=function(){var t="0000000000";ot("xref"),ot("0 "+(W+1)),ot("0000000000 65535 f ");for(var e=1;e<=W;e++)"function"==typeof H[e]?ot((t+H[e]()).slice(-10)+" 00000 n "):void 0!==H[e]?ot((t+H[e]).slice(-10)+" 00000 n "):ot("0000000000 00000 n ")},He=p.__private__.buildDocument=function(){nt(),rt(X),qt.publish("buildDocument"),Ue(),ae(),Le(),Ae(),null!==u&&ye(),Re(),ze();var t=K;return We(),qe(),ot("startxref"),ot(""+t),ot("%%EOF"),rt($[z]),X.join("\n")},Ve=p.__private__.getBlob=function(t){return new Blob([at(t)],{type:"application/pdf"})},Ge=p.output=p.__private__.output=ke((function(t,e){switch("string"==typeof(e=e||{})?e={filename:e}:e.filename=e.filename||"generated.pdf",t){case void 0:return He();case"save":p.save(e.filename);break;case"arraybuffer":return at(He());case"blob":return Ve(He());case"bloburi":case"bloburl":if(void 0!==G.URL&&"function"==typeof G.URL.createObjectURL)return G.URL&&G.URL.createObjectURL(Ve(He()))||void 0;Y.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");break;case"datauristring":case"dataurlstring":var i="",n=He();try{i=Q(n)}catch(t){i=Q(unescape(encodeURIComponent(n)))}return"data:application/pdf;filename="+e.filename+";base64,"+i;case"pdfobjectnewwindow":if("[object Window]"===Object.prototype.toString.call(G)){var r="https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js",o=' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';e.pdfObjectUrl&&(r=e.pdfObjectUrl,o="");var s='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="'+r+'"'+o+'><\/script><script >PDFObject.embed("'+this.output("dataurlstring")+'", '+JSON.stringify(e)+");<\/script></body></html>",a=G.open();return null!==a&&a.document.write(s),a}throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");case"pdfjsnewwindow":if("[object Window]"===Object.prototype.toString.call(G)){var h='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="'+(e.pdfJsUrl||"examples/PDF.js/web/viewer.html")+"?file=&downloadName="+e.filename+'" width="500px" height="400px" /></body></html>',c=G.open();if(null!==c){c.document.write(h);var l=this;c.document.documentElement.querySelector("#pdfViewer").onload=function(){c.document.title=e.filename,c.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(l.output("bloburl"))}}return c}throw new Error("The option pdfjsnewwindow just works in a browser-environment.");case"dataurlnewwindow":if("[object Window]"!==Object.prototype.toString.call(G))throw new Error("The option dataurlnewwindow just works in a browser-environment.");var u='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="'+this.output("datauristring",e)+'"></iframe></body></html>',f=G.open();if(null!==f&&(f.document.write(u),f.document.title=e.filename),f||"undefined"==typeof safari)return f;break;case"datauri":case"dataurl":return G.document.location.href=this.output("datauristring",e);default:return null}})),Xe=function(t){return!0===Array.isArray(Ut)&&Ut.indexOf(t)>-1};switch(r){case"pt":Pt=1;break;case"mm":Pt=72/25.4;break;case"cm":Pt=72/2.54;break;case"in":Pt=72;break;case"px":Pt=1==Xe("px_scaling")?.75:96/72;break;case"pc":case"em":Pt=12;break;case"ex":Pt=6;break;default:if("number"!=typeof r)throw new Error("Invalid unit: "+r);Pt=r}var Ye=null;B(),I();var Ke=function(t){return null!==u?Ye.encryptor(t,0):function(t){return t}},Je=p.__private__.getPageInfo=p.getPageInfo=function(t){if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfo");return{objId:zt[t].objId,pageNumber:t,pageContext:zt[t]}},$e=p.__private__.getPageInfoByObjId=function(t){if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");for(var e in zt)if(zt[e].objId===t)break;return Je(e)},Ze=p.__private__.getCurrentPageInfo=p.getCurrentPageInfo=function(){return{objId:zt[z].objId,pageNumber:z,pageContext:zt[z]}};p.addPage=function(){return Ee.apply(this,arguments),this},p.setPage=function(){return Me.apply(this,arguments),rt.call(this,$[z]),this},p.insertPage=function(t){return this.addPage(),this.movePage(z,t),this},p.movePage=function(t,e){var i,n;if(t>e){i=$[t],n=zt[t];for(var r=t;r>e;r--)$[r]=$[r-1],zt[r]=zt[r-1];$[e]=i,zt[e]=n,this.setPage(e)}else if(t<e){i=$[t],n=zt[t];for(var o=t;o<e;o++)$[o]=$[o+1],zt[o]=zt[o+1];$[e]=i,zt[e]=n,this.setPage(e)}return this},p.deletePage=function(){return Ie.apply(this,arguments),this},p.__private__.text=p.text=function(t,e,i,r,o){var s,a,h,c,l,u,f,p,g,m=(r=r||{}).scope||this;if("number"==typeof t&&"number"==typeof e&&("string"==typeof i||Array.isArray(i))){var v=i;i=e,e=t,t=v}if(arguments[3]instanceof Gt==0?(h=arguments[4],c=arguments[5],"object"===n(f=arguments[3])&&null!==f||("string"==typeof h&&(c=h,h=null),"string"==typeof f&&(c=f,f=null),"number"==typeof f&&(h=f,f=null),r={flags:f,angle:h,align:c})):(A("The transform parameter of text() with a Matrix value"),g=o),isNaN(e)||isNaN(i)||null==t)throw new Error("Invalid arguments passed to jsPDF.text");if(0===t.length)return m;var b="",x=!1,_="number"==typeof r.lineHeightFactor?r.lineHeightFactor:fi,S=m.internal.scaleFactor;function L(t){return t=t.split("\t").join(Array(r.TabLen||9).join(" ")),je(t,f)}function P(t){for(var e,i=t.concat(),n=[],r=i.length;r--;)"string"==typeof(e=i.shift())?n.push(e):Array.isArray(t)&&(1===e.length||void 0===e[1]&&void 0===e[2])?n.push(e[0]):n.push([e[0],e[1],e[2]]);return n}function T(t,e){var i;if("string"==typeof t)i=e(t)[0];else if(Array.isArray(t)){for(var n,r,o=t.concat(),s=[],a=o.length;a--;)"string"==typeof(n=o.shift())?s.push(e(n)[0]):Array.isArray(n)&&"string"==typeof n[0]&&(r=e(n[0],n[1],n[2]),s.push([r[0],r[1],r[2]]));i=s}return i}var k=!1,N=!0;if("string"==typeof t)k=!0;else if(Array.isArray(t)){var j=t.concat();a=[];for(var F,E=j.length;E--;)("string"!=typeof(F=j.shift())||Array.isArray(F)&&"string"!=typeof F[0])&&(N=!1);k=N}if(!1===k)throw new Error('Type of text must be string or Array. "'+t+'" is not recognized.');"string"==typeof t&&(t=t.match(/[\r?\n]/)?t.split(/\r\n|\r|\n/g):[t]);var I=ct/m.internal.scaleFactor,M=I*(_-1);switch(r.baseline){case"bottom":i-=M;break;case"top":i+=I-M;break;case"hanging":i+=I-2*M;break;case"middle":i+=I/2-M}if((u=r.maxWidth||0)>0&&("string"==typeof t?t=m.splitTextToSize(t,u):"[object Array]"===Object.prototype.toString.call(t)&&(t=t.reduce((function(t,e){return t.concat(m.splitTextToSize(e,u))}),[]))),s={text:t,x:e,y:i,options:r,mutex:{pdfEscape:je,activeFontKey:Lt,fonts:Nt,activeFontSize:ct}},qt.publish("preProcessText",s),t=s.text,h=(r=s.options).angle,g instanceof Gt==0&&h&&"number"==typeof h){h*=Math.PI/180,0===r.rotationDirection&&(h=-h),w===y.ADVANCED&&(h=-h);var D=Math.cos(h),B=Math.sin(h);g=new Gt(D,B,-B,D,0,0)}else h&&h instanceof Gt&&(g=h);w!==y.ADVANCED||g||(g=Yt),void 0!==(l=r.charSpace||Pi)&&(b+=C(O(l))+" Tc\n",this.setCharSpace(this.getCharSpace()||0)),void 0!==(p=r.horizontalScale)&&(b+=C(100*p)+" Tz\n"),r.lang;var R=-1,z=void 0!==r.renderingMode?r.renderingMode:r.stroke,q=m.internal.getCurrentPageInfo().pageContext;switch(z){case 0:case!1:case"fill":R=0;break;case 1:case!0:case"stroke":R=1;break;case 2:case"fillThenStroke":R=2;break;case 3:case"invisible":R=3;break;case 4:case"fillAndAddForClipping":R=4;break;case 5:case"strokeAndAddPathForClipping":R=5;break;case 6:case"fillThenStrokeAndAddToPathForClipping":R=6;break;case 7:case"addToPathForClipping":R=7}var U=void 0!==q.usedRenderingMode?q.usedRenderingMode:-1;-1!==R?b+=R+" Tr\n":-1!==U&&(b+="0 Tr\n"),-1!==R&&(q.usedRenderingMode=R),c=r.align||"left";var W,H=ct*_,V=m.internal.pageSize.getWidth(),G=Nt[Lt];l=r.charSpace||Pi,u=r.maxWidth||0,f=Object.assign({autoencode:!0,noBOM:!0},r.flags);var X=[];if("[object Array]"===Object.prototype.toString.call(t)){var Y;a=P(t),"left"!==c&&(W=a.map((function(t){return m.getStringUnitWidth(t,{font:G,charSpace:l,fontSize:ct,doKerning:!1})*ct/S})));var K,J=0;if("right"===c){e-=W[0],t=[],E=a.length;for(var $=0;$<E;$++)0===$?(K=yi(e),Y=wi(i)):(K=O(J-W[$]),Y=-H),t.push([a[$],K,Y]),J=W[$]}else if("center"===c){e-=W[0]/2,t=[],E=a.length;for(var Z=0;Z<E;Z++)0===Z?(K=yi(e),Y=wi(i)):(K=O((J-W[Z])/2),Y=-H),t.push([a[Z],K,Y]),J=W[Z]}else if("left"===c){t=[],E=a.length;for(var Q=0;Q<E;Q++)t.push(a[Q])}else{if("justify"!==c)throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');t=[],E=a.length,u=0!==u?u:V;for(var tt=0;tt<E;tt++)Y=0===tt?wi(i):-H,K=0===tt?yi(e):0,tt<E-1?X.push(C(O((u-W[tt])/(a[tt].split(" ").length-1)))):X.push(0),t.push([a[tt],K,Y])}}var et="boolean"==typeof r.R2L?r.R2L:ft;!0===et&&(t=T(t,(function(t,e,i){return[t.split("").reverse().join(""),e,i]}))),s={text:t,x:e,y:i,options:r,mutex:{pdfEscape:je,activeFontKey:Lt,fonts:Nt,activeFontSize:ct}},qt.publish("postProcessText",s),t=s.text,x=s.mutex.isHex||!1;var it=Nt[Lt].encoding;"WinAnsiEncoding"!==it&&"StandardEncoding"!==it||(t=T(t,(function(t,e,i){return[L(t),e,i]}))),a=P(t),t=[];for(var nt,rt,st,at=0,ht=1,lt=Array.isArray(a[0])?ht:at,ut="",dt=function(t,e,i){var n="";return i instanceof Gt?(i="number"==typeof r.angle?Xt(i,new Gt(1,0,0,1,t,e)):Xt(new Gt(1,0,0,1,t,e),i),w===y.ADVANCED&&(i=Xt(new Gt(1,0,0,-1,0,0),i)),n=i.join(" ")+" Tm\n"):n=C(t)+" "+C(e)+" Td\n",n},pt=0;pt<a.length;pt++){switch(ut="",lt){case ht:st=(x?"<":"(")+a[pt][0]+(x?">":")"),nt=parseFloat(a[pt][1]),rt=parseFloat(a[pt][2]);break;case at:st=(x?"<":"(")+a[pt]+(x?">":")"),nt=yi(e),rt=wi(i)}void 0!==X&&void 0!==X[pt]&&(ut=X[pt]+" Tw\n"),0===pt?t.push(ut+dt(nt,rt,g)+st):lt===at?t.push(ut+st):lt===ht&&t.push(ut+dt(nt,rt,g)+st)}t=lt===at?t.join(" Tj\nT* "):t.join(" Tj\n"),t+=" Tj\n";var gt="BT\n/";return gt+=Lt+" "+ct+" Tf\n",gt+=C(ct*_)+" TL\n",gt+=Ai+"\n",gt+=b,gt+=t,ot(gt+="ET"),d[Lt]=!0,m};var Qe=p.__private__.clip=p.clip=function(t){return ot("evenodd"===t?"W*":"W"),this};p.clipEvenOdd=function(){return Qe("evenodd")},p.__private__.discardPath=p.discardPath=function(){return ot("n"),this};var ti=p.__private__.isValidStyle=function(t){var e=!1;return-1!==[void 0,null,"S","D","F","DF","FD","f","f*","B","B*","n"].indexOf(t)&&(e=!0),e};p.__private__.setDefaultPathOperation=p.setDefaultPathOperation=function(t){return ti(t)&&(l=t),this};var ei=p.__private__.getStyle=p.getStyle=function(t){var e=l;switch(t){case"D":case"S":e="S";break;case"F":e="f";break;case"FD":case"DF":e="B";break;case"f":case"f*":case"B":case"B*":e=t}return e},ii=p.close=function(){return ot("h"),this};p.stroke=function(){return ot("S"),this},p.fill=function(t){return ni("f",t),this},p.fillEvenOdd=function(t){return ni("f*",t),this},p.fillStroke=function(t){return ni("B",t),this},p.fillStrokeEvenOdd=function(t){return ni("B*",t),this};var ni=function(t,e){"object"===n(e)?si(e,t):ot(t)},ri=function(t){null===t||w===y.ADVANCED&&void 0===t||(t=ei(t),ot(t))};function oi(t,e,i,n,r){var o=new Ct(e||this.boundingBox,i||this.xStep,n||this.yStep,this.gState,r||this.matrix);o.stream=this.stream;var s=t+"$$"+this.cloneIndex+++"$$";return Kt(s,o),o}var si=function(t,e){var i=It[t.key],n=Et[i];if(n instanceof St)ot("q"),ot(ai(e)),n.gState&&p.setGState(n.gState),ot(t.matrix.toString()+" cm"),ot("/"+i+" sh"),ot("Q");else if(n instanceof Ct){var r=new Gt(1,0,0,-1,0,zi());t.matrix&&(r=r.multiply(t.matrix||Yt),i=oi.call(n,t.key,t.boundingBox,t.xStep,t.yStep,r).id),ot("q"),ot("/Pattern cs"),ot("/"+i+" scn"),n.gState&&p.setGState(n.gState),ot(e),ot("Q")}},ai=function(t){switch(t){case"f":case"F":case"n":return"W n";case"f*":return"W* n";case"B":case"S":return"W S";case"B*":return"W* S"}},hi=p.moveTo=function(t,e){return ot(C(O(t))+" "+C(N(e))+" m"),this},ci=p.lineTo=function(t,e){return ot(C(O(t))+" "+C(N(e))+" l"),this},li=p.curveTo=function(t,e,i,n,r,o){return ot([C(O(t)),C(N(e)),C(O(i)),C(N(n)),C(O(r)),C(N(o)),"c"].join(" ")),this};p.__private__.line=p.line=function(t,e,i,n,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n)||!ti(r))throw new Error("Invalid arguments passed to jsPDF.line");return w===y.COMPAT?this.lines([[i-t,n-e]],t,e,[1,1],r||"S"):this.lines([[i-t,n-e]],t,e,[1,1]).stroke()},p.__private__.lines=p.lines=function(t,e,i,n,r,o){var s,a,h,c,l,u,f,d,p,g,m,v;if("number"==typeof t&&(v=i,i=e,e=t,t=v),n=n||[1,1],o=o||!1,isNaN(e)||isNaN(i)||!Array.isArray(t)||!Array.isArray(n)||!ti(r)||"boolean"!=typeof o)throw new Error("Invalid arguments passed to jsPDF.lines");for(hi(e,i),s=n[0],a=n[1],c=t.length,g=e,m=i,h=0;h<c;h++)2===(l=t[h]).length?(g=l[0]*s+g,m=l[1]*a+m,ci(g,m)):(u=l[0]*s+g,f=l[1]*a+m,d=l[2]*s+g,p=l[3]*a+m,g=l[4]*s+g,m=l[5]*a+m,li(u,f,d,p,g,m));return o&&ii(),ri(r),this},p.path=function(t){for(var e=0;e<t.length;e++){var i=t[e],n=i.c;switch(i.op){case"m":hi(n[0],n[1]);break;case"l":ci(n[0],n[1]);break;case"c":li.apply(this,n);break;case"h":ii()}}return this},p.__private__.rect=p.rect=function(t,e,i,n,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n)||!ti(r))throw new Error("Invalid arguments passed to jsPDF.rect");return w===y.COMPAT&&(n=-n),ot([C(O(t)),C(N(e)),C(O(i)),C(O(n)),"re"].join(" ")),ri(r),this},p.__private__.triangle=p.triangle=function(t,e,i,n,r,o,s){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n)||isNaN(r)||isNaN(o)||!ti(s))throw new Error("Invalid arguments passed to jsPDF.triangle");return this.lines([[i-t,n-e],[r-i,o-n],[t-r,e-o]],t,e,[1,1],s,!0),this},p.__private__.roundedRect=p.roundedRect=function(t,e,i,n,r,o,s){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n)||isNaN(r)||isNaN(o)||!ti(s))throw new Error("Invalid arguments passed to jsPDF.roundedRect");var a=4/3*(Math.SQRT2-1);return r=Math.min(r,.5*i),o=Math.min(o,.5*n),this.lines([[i-2*r,0],[r*a,0,r,o-o*a,r,o],[0,n-2*o],[0,o*a,-r*a,o,-r,o],[2*r-i,0],[-r*a,0,-r,-o*a,-r,-o],[0,2*o-n],[0,-o*a,r*a,-o,r,-o]],t+r,e,[1,1],s,!0),this},p.__private__.ellipse=p.ellipse=function(t,e,i,n,r){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n)||!ti(r))throw new Error("Invalid arguments passed to jsPDF.ellipse");var o=4/3*(Math.SQRT2-1)*i,s=4/3*(Math.SQRT2-1)*n;return hi(t+i,e),li(t+i,e-s,t+o,e-n,t,e-n),li(t-o,e-n,t-i,e-s,t-i,e),li(t-i,e+s,t-o,e+n,t,e+n),li(t+o,e+n,t+i,e+s,t+i,e),ri(r),this},p.__private__.circle=p.circle=function(t,e,i,n){if(isNaN(t)||isNaN(e)||isNaN(i)||!ti(n))throw new Error("Invalid arguments passed to jsPDF.circle");return this.ellipse(t,e,i,i,n)},p.setFont=function(t,e,i){return i&&(e=S(e,i)),Lt=Be(t,e,{disableWarning:!1}),this};var ui=p.__private__.getFont=p.getFont=function(){return Nt[Be.apply(p,arguments)]};p.__private__.getFontList=p.getFontList=function(){var t,e,i={};for(t in jt)if(jt.hasOwnProperty(t))for(e in i[t]=[],jt[t])jt[t].hasOwnProperty(e)&&i[t].push(e);return i},p.addFont=function(t,e,i,n,r){var o=["StandardEncoding","MacRomanEncoding","Identity-H","WinAnsiEncoding"];return arguments[3]&&-1!==o.indexOf(arguments[3])?r=arguments[3]:arguments[3]&&-1==o.indexOf(arguments[3])&&(i=S(i,n)),r=r||"Identity-H",Te.call(this,t,e,i,r)};var fi,di=t.lineWidth||.200025,pi=p.__private__.getLineWidth=p.getLineWidth=function(){return di},gi=p.__private__.setLineWidth=p.setLineWidth=function(t){return di=t,ot(C(O(t))+" w"),this};p.__private__.setLineDash=At.API.setLineDash=At.API.setLineDashPattern=function(t,e){if(t=t||[],e=e||0,isNaN(e)||!Array.isArray(t))throw new Error("Invalid arguments passed to jsPDF.setLineDash");return t=t.map((function(t){return C(O(t))})).join(" "),e=C(O(e)),ot("["+t+"] "+e+" d"),this};var mi=p.__private__.getLineHeight=p.getLineHeight=function(){return ct*fi};p.__private__.getLineHeight=p.getLineHeight=function(){return ct*fi};var vi=p.__private__.setLineHeightFactor=p.setLineHeightFactor=function(t){return"number"==typeof(t=t||1.15)&&(fi=t),this},bi=p.__private__.getLineHeightFactor=p.getLineHeightFactor=function(){return fi};vi(t.lineHeight);var yi=p.__private__.getHorizontalCoordinate=function(t){return O(t)},wi=p.__private__.getVerticalCoordinate=function(t){return w===y.ADVANCED?t:zt[z].mediaBox.topRightY-zt[z].mediaBox.bottomLeftY-O(t)},xi=p.__private__.getHorizontalCoordinateString=p.getHorizontalCoordinateString=function(t){return C(yi(t))},_i=p.__private__.getVerticalCoordinateString=p.getVerticalCoordinateString=function(t){return C(wi(t))},Si=t.strokeColor||"0 G";p.__private__.getStrokeColor=p.getDrawColor=function(){return ie(Si)},p.__private__.setStrokeColor=p.setDrawColor=function(t,e,i,n){return Si=ne({ch1:t,ch2:e,ch3:i,ch4:n,pdfColorType:"draw",precision:2}),ot(Si),this};var Ci=t.fillColor||"0 g";p.__private__.getFillColor=p.getFillColor=function(){return ie(Ci)},p.__private__.setFillColor=p.setFillColor=function(t,e,i,n){return Ci=ne({ch1:t,ch2:e,ch3:i,ch4:n,pdfColorType:"fill",precision:2}),ot(Ci),this};var Ai=t.textColor||"0 g",Li=p.__private__.getTextColor=p.getTextColor=function(){return ie(Ai)};p.__private__.setTextColor=p.setTextColor=function(t,e,i,n){return Ai=ne({ch1:t,ch2:e,ch3:i,ch4:n,pdfColorType:"text",precision:3}),this};var Pi=t.charSpace,Ti=p.__private__.getCharSpace=p.getCharSpace=function(){return parseFloat(Pi||0)};p.__private__.setCharSpace=p.setCharSpace=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.setCharSpace");return Pi=t,this};var Oi=0;p.CapJoinStyles={0:0,butt:0,but:0,miter:0,1:1,round:1,rounded:1,circle:1,2:2,projecting:2,project:2,square:2,bevel:2},p.__private__.setLineCap=p.setLineCap=function(t){var e=p.CapJoinStyles[t];if(void 0===e)throw new Error("Line cap style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return Oi=e,ot(e+" J"),this};var ki=0;p.__private__.setLineJoin=p.setLineJoin=function(t){var e=p.CapJoinStyles[t];if(void 0===e)throw new Error("Line join style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return ki=e,ot(e+" j"),this},p.__private__.setLineMiterLimit=p.__private__.setMiterLimit=p.setLineMiterLimit=p.setMiterLimit=function(t){if(t=t||0,isNaN(t))throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");return ot(C(O(t))+" M"),this},p.GState=xt,p.setGState=function(t){(t="string"==typeof t?Mt[Dt[t]]:Ni(null,t)).equals(Bt)||(ot("/"+t.id+" gs"),Bt=t)};var Ni=function(t,e){if(!t||!Dt[t]){var i=!1;for(var n in Mt)if(Mt.hasOwnProperty(n)&&Mt[n].equals(e)){i=!0;break}if(i)e=Mt[n];else{var r="GS"+(Object.keys(Mt).length+1).toString(10);Mt[r]=e,e.id=r}return t&&(Dt[t]=e.id),qt.publish("addGState",e),e}};p.addGState=function(t,e){return Ni(t,e),this},p.saveGraphicsState=function(){return ot("q"),Ft.push({key:Lt,size:ct,color:Ai}),this},p.restoreGraphicsState=function(){ot("Q");var t=Ft.pop();return Lt=t.key,ct=t.size,Ai=t.color,Bt=null,this},p.setCurrentTransformationMatrix=function(t){return ot(t.toString()+" cm"),this},p.comment=function(t){return ot("#"+t),this};var ji=function(t,e){var i=t||0;Object.defineProperty(this,"x",{enumerable:!0,get:function(){return i},set:function(t){isNaN(t)||(i=parseFloat(t))}});var n=e||0;Object.defineProperty(this,"y",{enumerable:!0,get:function(){return n},set:function(t){isNaN(t)||(n=parseFloat(t))}});var r="pt";return Object.defineProperty(this,"type",{enumerable:!0,get:function(){return r},set:function(t){r=t.toString()}}),this},Fi=function(t,e,i,n){ji.call(this,t,e),this.type="rect";var r=i||0;Object.defineProperty(this,"w",{enumerable:!0,get:function(){return r},set:function(t){isNaN(t)||(r=parseFloat(t))}});var o=n||0;return Object.defineProperty(this,"h",{enumerable:!0,get:function(){return o},set:function(t){isNaN(t)||(o=parseFloat(t))}}),this},Ei=function(){this.page=Rt,this.currentPage=z,this.pages=$.slice(0),this.pagesContext=zt.slice(0),this.x=Tt,this.y=Ot,this.matrix=kt,this.width=Bi(z),this.height=zi(z),this.outputDestination=it,this.id="",this.objectNumber=-1};Ei.prototype.restore=function(){Rt=this.page,z=this.currentPage,zt=this.pagesContext,$=this.pages,Tt=this.x,Ot=this.y,kt=this.matrix,Ri(z,this.width),qi(z,this.height),it=this.outputDestination};var Ii=function(t,e,i,n,r){Vt.push(new Ei),Rt=z=0,$=[],Tt=t,Ot=e,kt=r,Fe([i,n])},Mi=function(t){if(Ht[t])Vt.pop().restore();else{var e=new Ei,i="Xo"+(Object.keys(Wt).length+1).toString(10);e.id=i,Ht[t]=i,Wt[i]=e,qt.publish("addFormObject",e),Vt.pop().restore()}};for(var Di in p.beginFormObject=function(t,e,i,n,r){return Ii(t,e,i,n,r),this},p.endFormObject=function(t){return Mi(t),this},p.doFormObject=function(t,e){var i=Wt[Ht[t]];return ot("q"),ot(e.toString()+" cm"),ot("/"+i.id+" Do"),ot("Q"),this},p.getFormObject=function(t){var e=Wt[Ht[t]];return{x:e.x,y:e.y,width:e.width,height:e.height,matrix:e.matrix}},p.save=function(t,e){return t=t||"generated.pdf",(e=e||{}).returnPromise=e.returnPromise||!1,!1===e.returnPromise?(tt(Ve(He()),t),"function"==typeof tt.unload&&G.setTimeout&&setTimeout(tt.unload,911),this):new V((function(e,i){try{var n=tt(Ve(He()),t);"function"==typeof tt.unload&&G.setTimeout&&setTimeout(tt.unload,911),e(n)}catch(t){i(t.message)}}))},At.API)At.API.hasOwnProperty(Di)&&("events"===Di&&At.API.events.length?function(t,e){var i,n,r;for(r=e.length-1;-1!==r;r--)i=e[r][0],n=e[r][1],t.subscribe.apply(t,[i].concat("function"==typeof n?[n]:n))}(qt,At.API.events):p[Di]=At.API[Di]);var Bi=p.getPageWidth=function(t){return(zt[t=t||z].mediaBox.topRightX-zt[t].mediaBox.bottomLeftX)/Pt},Ri=p.setPageWidth=function(t,e){zt[t].mediaBox.topRightX=e*Pt+zt[t].mediaBox.bottomLeftX},zi=p.getPageHeight=function(t){return(zt[t=t||z].mediaBox.topRightY-zt[t].mediaBox.bottomLeftY)/Pt},qi=p.setPageHeight=function(t,e){zt[t].mediaBox.topRightY=e*Pt+zt[t].mediaBox.bottomLeftY};return p.internal={pdfEscape:je,getStyle:ei,getFont:ui,getFontSize:ut,getCharSpace:Ti,getTextColor:Li,getLineHeight:mi,getLineHeightFactor:bi,getLineWidth:pi,write:st,getHorizontalCoordinate:yi,getVerticalCoordinate:wi,getCoordinateString:xi,getVerticalCoordinateString:_i,collections:{},newObject:Jt,newAdditionalObject:Qt,newObjectDeferred:$t,newObjectDeferredBegin:Zt,getFilters:re,putStream:oe,events:qt,scaleFactor:Pt,pageSize:{getWidth:function(){return Bi(z)},setWidth:function(t){Ri(z,t)},getHeight:function(){return zi(z)},setHeight:function(t){qi(z,t)}},encryptionOptions:u,encryption:Ye,getEncryptor:Ke,output:Ge,getNumberOfPages:De,pages:$,out:ot,f2:P,f3:T,getPageInfo:Je,getPageInfoByObjId:$e,getCurrentPageInfo:Ze,getPDFVersion:m,Point:ji,Rectangle:Fi,Matrix:Gt,hasHotfix:Xe},Object.defineProperty(p.internal.pageSize,"width",{get:function(){return Bi(z)},set:function(t){Ri(z,t)},enumerable:!0,configurable:!0}),Object.defineProperty(p.internal.pageSize,"height",{get:function(){return zi(z)},set:function(t){qi(z,t)},enumerable:!0,configurable:!0}),Oe.call(p,ht),Lt="F1",Ee(o,i),qt.publish("initialized"),p}bt.prototype.lsbFirstWord=function(t){return String.fromCharCode(t>>0&255,t>>8&255,t>>16&255,t>>24&255)},bt.prototype.toHexString=function(t){return t.split("").map((function(t){return("0"+(255&t.charCodeAt(0)).toString(16)).slice(-2)})).join("")},bt.prototype.hexToBytes=function(t){for(var e=[],i=0;i<t.length;i+=2)e.push(String.fromCharCode(parseInt(t.substr(i,2),16)));return e.join("")},bt.prototype.processOwnerPassword=function(t,e){return mt(dt(e).substr(0,5),t)},bt.prototype.encryptor=function(t,e){var i=dt(this.encryptionKey+String.fromCharCode(255&t,t>>8&255,t>>16&255,255&e,e>>8&255)).substr(0,10);return function(t){return mt(i,t)}},xt.prototype.equals=function(t){var e,i="id,objectNumber,equals";if(!t||n(t)!==n(this))return!1;var r=0;for(e in this)if(!(i.indexOf(e)>=0)){if(this.hasOwnProperty(e)&&!t.hasOwnProperty(e))return!1;if(this[e]!==t[e])return!1;r++}for(e in t)t.hasOwnProperty(e)&&i.indexOf(e)<0&&r--;return 0===r},At.API={events:[]},At.version="2.5.1";var Lt=At.API,Pt=1,Tt=function(t){return t.replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},Ot=function(t){return t.replace(/\\\\/g,"\\").replace(/\\\(/g,"(").replace(/\\\)/g,")")},kt=function(t){return t.toFixed(2)},Nt=function(t){return t.toFixed(5)};Lt.__acroform__={};var jt=function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t},Ft=function(t){return t*Pt},Et=function(t){var e=new Jt,i=le.internal.getHeight(t)||0,n=le.internal.getWidth(t)||0;return e.BBox=[0,0,Number(kt(n)),Number(kt(i))],e},It=Lt.__acroform__.setBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");return t|1<<e},Mt=Lt.__acroform__.clearBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");return t&~(1<<e)},Dt=Lt.__acroform__.getBit=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");return 0==(t&1<<e)?0:1},Bt=Lt.__acroform__.getBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");return Dt(t,e-1)},Rt=Lt.__acroform__.setBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");return It(t,e-1)},zt=Lt.__acroform__.clearBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");return Mt(t,e-1)},qt=Lt.__acroform__.calculateCoordinates=function(t,e){var i=e.internal.getHorizontalCoordinate,n=e.internal.getVerticalCoordinate,r=t[0],o=t[1],s=t[2],a=t[3],h={};return h.lowerLeft_X=i(r)||0,h.lowerLeft_Y=n(o+a)||0,h.upperRight_X=i(r+s)||0,h.upperRight_Y=n(o)||0,[Number(kt(h.lowerLeft_X)),Number(kt(h.lowerLeft_Y)),Number(kt(h.upperRight_X)),Number(kt(h.upperRight_Y))]},Ut=function(t){if(t.appearanceStreamContent)return t.appearanceStreamContent;if(t.V||t.DV){var e=[],i=t._V||t.DV,n=Wt(t,i),r=t.scope.internal.getFont(t.fontName,t.fontStyle).id;e.push("/Tx BMC"),e.push("q"),e.push("BT"),e.push(t.scope.__private__.encodeColorString(t.color)),e.push("/"+r+" "+kt(n.fontSize)+" Tf"),e.push("1 0 0 1 0 0 Tm"),e.push(n.text),e.push("ET"),e.push("Q"),e.push("EMC");var o=Et(t);return o.scope=t.scope,o.stream=e.join("\n"),o}},Wt=function(t,e){var i=0===t.fontSize?t.maxFontSize:t.fontSize,n={text:"",fontSize:""},r=(e=")"==(e="("==e.substr(0,1)?e.substr(1):e).substr(e.length-1)?e.substr(0,e.length-1):e).split(" ");r=t.multiline?r.map((function(t){return t.split("\n")})):r.map((function(t){return[t]}));var o=i,s=le.internal.getHeight(t)||0;s=s<0?-s:s;var a=le.internal.getWidth(t)||0;a=a<0?-a:a;var h=function(e,i,n){if(e+1<r.length){var o=i+" "+r[e+1][0];return Ht(o,t,n).width<=a-4}return!1};o++;t:for(;o>0;){e="",o--;var c,l,u=Ht("3",t,o).height,f=t.multiline?s-o:(s-u)/2,d=f+=2,p=0,g=0,m=0;if(o<=0){e="(...) Tj\n",e+="% Width of Text: "+Ht(e,t,o=12).width+", FieldWidth:"+a+"\n";break}for(var v="",b=0,y=0;y<r.length;y++)if(r.hasOwnProperty(y)){var w=!1;if(1!==r[y].length&&m!==r[y].length-1){if((u+2)*(b+2)+2>s)continue t;v+=r[y][m],w=!0,g=y,y--}else{v=" "==(v+=r[y][m]+" ").substr(v.length-1)?v.substr(0,v.length-1):v;var x=parseInt(y),_=h(x,v,o),S=y>=r.length-1;if(_&&!S){v+=" ",m=0;continue}if(_||S){if(S)g=x;else if(t.multiline&&(u+2)*(b+2)+2>s)continue t}else{if(!t.multiline)continue t;if((u+2)*(b+2)+2>s)continue t;g=x}}for(var C="",A=p;A<=g;A++){var L=r[A];if(t.multiline){if(A===g){C+=L[m]+" ",m=(m+1)%L.length;continue}if(A===p){C+=L[L.length-1]+" ";continue}}C+=L[0]+" "}switch(C=" "==C.substr(C.length-1)?C.substr(0,C.length-1):C,l=Ht(C,t,o).width,t.textAlign){case"right":c=a-l-2;break;case"center":c=(a-l)/2;break;default:c=2}e+=kt(c)+" "+kt(d)+" Td\n",e+="("+Tt(C)+") Tj\n",e+=-kt(c)+" 0 Td\n",d=-(o+2),l=0,p=w?g:g+1,b++,v=""}break}return n.text=e,n.fontSize=o,n},Ht=function(t,e,i){var n=e.scope.internal.getFont(e.fontName,e.fontStyle),r=e.scope.getStringUnitWidth(t,{font:n,fontSize:parseFloat(i),charSpace:0})*parseFloat(i);return{height:e.scope.getStringUnitWidth("3",{font:n,fontSize:parseFloat(i),charSpace:0})*parseFloat(i)*1.5,width:r}},Vt={fields:[],xForms:[],acroFormDictionaryRoot:null,printedOut:!1,internal:null,isInitialized:!1},Gt=function(t,e){var i={type:"reference",object:t};void 0===e.internal.getPageInfo(t.page).pageContext.annotations.find((function(t){return t.type===i.type&&t.object===i.object}))&&e.internal.getPageInfo(t.page).pageContext.annotations.push(i)},Xt=Lt.__acroform__.arrayToPdfArray=function(t,e,i){var r=function(t){return t};if(Array.isArray(t)){for(var o="[",s=0;s<t.length;s++)switch(0!==s&&(o+=" "),n(t[s])){case"boolean":case"number":case"object":o+=t[s].toString();break;case"string":"/"!==t[s].substr(0,1)?(void 0!==e&&i&&(r=i.internal.getEncryptor(e)),o+="("+Tt(r(t[s].toString()))+")"):o+=t[s].toString()}return o+"]"}throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray")},Yt=function(t,e,i){var n=function(t){return t};return void 0!==e&&i&&(n=i.internal.getEncryptor(e)),(t=t||"").toString(),"("+Tt(n(t))+")"},Kt=function(){this._objId=void 0,this._scope=void 0,Object.defineProperty(this,"objId",{get:function(){if(void 0===this._objId){if(void 0===this.scope)return;this._objId=this.scope.internal.newObjectDeferred()}return this._objId},set:function(t){this._objId=t}}),Object.defineProperty(this,"scope",{value:this._scope,writable:!0})};Kt.prototype.toString=function(){return this.objId+" 0 R"},Kt.prototype.putStream=function(){var t=this.getKeyValueListForStream();this.scope.internal.putStream({data:this.stream,additionalKeyValues:t,objectId:this.objId}),this.scope.internal.out("endobj")},Kt.prototype.getKeyValueListForStream=function(){var t=[],e=Object.getOwnPropertyNames(this).filter((function(t){return"content"!=t&&"appearanceStreamContent"!=t&&"scope"!=t&&"objId"!=t&&"_"!=t.substring(0,1)}));for(var i in e)if(!1===Object.getOwnPropertyDescriptor(this,e[i]).configurable){var n=e[i],r=this[n];r&&(Array.isArray(r)?t.push({key:n,value:Xt(r,this.objId,this.scope)}):r instanceof Kt?(r.scope=this.scope,t.push({key:n,value:r.objId+" 0 R"})):"function"!=typeof r&&t.push({key:n,value:r}))}return t};var Jt=function(){Kt.call(this),Object.defineProperty(this,"Type",{value:"/XObject",configurable:!1,writable:!0}),Object.defineProperty(this,"Subtype",{value:"/Form",configurable:!1,writable:!0}),Object.defineProperty(this,"FormType",{value:1,configurable:!1,writable:!0});var t,e=[];Object.defineProperty(this,"BBox",{configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,"Resources",{value:"2 0 R",configurable:!1,writable:!0}),Object.defineProperty(this,"stream",{enumerable:!1,configurable:!0,set:function(e){t=e.trim()},get:function(){return t||null}})};jt(Jt,Kt);var $t=function(){Kt.call(this);var t,e=[];Object.defineProperty(this,"Kids",{enumerable:!1,configurable:!0,get:function(){return e.length>0?e:void 0}}),Object.defineProperty(this,"Fields",{enumerable:!1,configurable:!1,get:function(){return e}}),Object.defineProperty(this,"DA",{enumerable:!1,configurable:!1,get:function(){if(t){var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),"("+Tt(e(t))+")"}},set:function(e){t=e}})};jt($t,Kt);var Zt=function t(){Kt.call(this);var e=4;Object.defineProperty(this,"F",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute F supplied.');e=t}}),Object.defineProperty(this,"showWhenPrinted",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(e,3))},set:function(t){!0===Boolean(t)?this.F=Rt(e,3):this.F=zt(e,3)}});var i=0;Object.defineProperty(this,"Ff",{enumerable:!1,configurable:!1,get:function(){return i},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute Ff supplied.');i=t}});var n=[];Object.defineProperty(this,"Rect",{enumerable:!1,configurable:!1,get:function(){if(0!==n.length)return n},set:function(t){n=void 0!==t?t:[]}}),Object.defineProperty(this,"x",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[0])?0:n[0]},set:function(t){n[0]=t}}),Object.defineProperty(this,"y",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[1])?0:n[1]},set:function(t){n[1]=t}}),Object.defineProperty(this,"width",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[2])?0:n[2]},set:function(t){n[2]=t}}),Object.defineProperty(this,"height",{enumerable:!0,configurable:!0,get:function(){return!n||isNaN(n[3])?0:n[3]},set:function(t){n[3]=t}});var r="";Object.defineProperty(this,"FT",{enumerable:!0,configurable:!1,get:function(){return r},set:function(t){switch(t){case"/Btn":case"/Tx":case"/Ch":case"/Sig":r=t;break;default:throw new Error('Invalid value "'+t+'" for attribute FT supplied.')}}});var o=null;Object.defineProperty(this,"T",{enumerable:!0,configurable:!1,get:function(){if(!o||o.length<1){if(this instanceof se)return;o="FieldObject"+t.FieldNum++}var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),"("+Tt(e(o))+")"},set:function(t){o=t.toString()}}),Object.defineProperty(this,"fieldName",{configurable:!0,enumerable:!0,get:function(){return o},set:function(t){o=t}});var s="helvetica";Object.defineProperty(this,"fontName",{enumerable:!0,configurable:!0,get:function(){return s},set:function(t){s=t}});var a="normal";Object.defineProperty(this,"fontStyle",{enumerable:!0,configurable:!0,get:function(){return a},set:function(t){a=t}});var h=0;Object.defineProperty(this,"fontSize",{enumerable:!0,configurable:!0,get:function(){return h},set:function(t){h=t}});var c=void 0;Object.defineProperty(this,"maxFontSize",{enumerable:!0,configurable:!0,get:function(){return void 0===c?50/Pt:c},set:function(t){c=t}});var l="black";Object.defineProperty(this,"color",{enumerable:!0,configurable:!0,get:function(){return l},set:function(t){l=t}});var u="/F1 0 Tf 0 g";Object.defineProperty(this,"DA",{enumerable:!0,configurable:!1,get:function(){if(!(!u||this instanceof se||this instanceof he))return Yt(u,this.objId,this.scope)},set:function(t){t=t.toString(),u=t}});var f=null;Object.defineProperty(this,"DV",{enumerable:!1,configurable:!1,get:function(){if(f)return this instanceof ne==0?Yt(f,this.objId,this.scope):f},set:function(t){t=t.toString(),f=this instanceof ne==0?"("===t.substr(0,1)?Ot(t.substr(1,t.length-2)):Ot(t):t}}),Object.defineProperty(this,"defaultValue",{enumerable:!0,configurable:!0,get:function(){return this instanceof ne==1?Ot(f.substr(1,f.length-1)):f},set:function(t){t=t.toString(),f=this instanceof ne==1?"/"+t:t}});var d=null;Object.defineProperty(this,"_V",{enumerable:!1,configurable:!1,get:function(){if(d)return d},set:function(t){this.V=t}}),Object.defineProperty(this,"V",{enumerable:!1,configurable:!1,get:function(){if(d)return this instanceof ne==0?Yt(d,this.objId,this.scope):d},set:function(t){t=t.toString(),d=this instanceof ne==0?"("===t.substr(0,1)?Ot(t.substr(1,t.length-2)):Ot(t):t}}),Object.defineProperty(this,"value",{enumerable:!0,configurable:!0,get:function(){return this instanceof ne==1?Ot(d.substr(1,d.length-1)):d},set:function(t){t=t.toString(),d=this instanceof ne==1?"/"+t:t}}),Object.defineProperty(this,"hasAnnotation",{enumerable:!0,configurable:!0,get:function(){return this.Rect}}),Object.defineProperty(this,"Type",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Annot":null}}),Object.defineProperty(this,"Subtype",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Widget":null}});var p,g=!1;Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,get:function(){return g},set:function(t){t=Boolean(t),g=t}}),Object.defineProperty(this,"page",{enumerable:!0,configurable:!0,get:function(){if(p)return p},set:function(t){p=t}}),Object.defineProperty(this,"readOnly",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,1))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,1):this.Ff=zt(this.Ff,1)}}),Object.defineProperty(this,"required",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,2))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,2):this.Ff=zt(this.Ff,2)}}),Object.defineProperty(this,"noExport",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,3))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,3):this.Ff=zt(this.Ff,3)}});var m=null;Object.defineProperty(this,"Q",{enumerable:!0,configurable:!1,get:function(){if(null!==m)return m},set:function(t){if(-1===[0,1,2].indexOf(t))throw new Error('Invalid value "'+t+'" for attribute Q supplied.');m=t}}),Object.defineProperty(this,"textAlign",{get:function(){var t;switch(m){case 0:default:t="left";break;case 1:t="center";break;case 2:t="right"}return t},configurable:!0,enumerable:!0,set:function(t){switch(t){case"right":case 2:m=2;break;case"center":case 1:m=1;break;default:m=0}}})};jt(Zt,Kt);var Qt=function(){Zt.call(this),this.FT="/Ch",this.V="()",this.fontName="zapfdingbats";var t=0;Object.defineProperty(this,"TI",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"topIndex",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){t=e}});var e=[];Object.defineProperty(this,"Opt",{enumerable:!0,configurable:!1,get:function(){return Xt(e,this.objId,this.scope)},set:function(t){var i,n;n=[],"string"==typeof(i=t)&&(n=function(t,e,i){i||(i=1);for(var n,r=[];n=e.exec(t);)r.push(n[i]);return r}(i,/\((.*?)\)/g)),e=n}}),this.getOptions=function(){return e},this.setOptions=function(t){e=t,this.sort&&e.sort()},this.addOption=function(t){t=(t=t||"").toString(),e.push(t),this.sort&&e.sort()},this.removeOption=function(t,i){for(i=i||!1,t=(t=t||"").toString();-1!==e.indexOf(t)&&(e.splice(e.indexOf(t),1),!1!==i););},Object.defineProperty(this,"combo",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,18))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,18):this.Ff=zt(this.Ff,18)}}),Object.defineProperty(this,"edit",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,19))},set:function(t){!0===this.combo&&(!0===Boolean(t)?this.Ff=Rt(this.Ff,19):this.Ff=zt(this.Ff,19))}}),Object.defineProperty(this,"sort",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,20))},set:function(t){!0===Boolean(t)?(this.Ff=Rt(this.Ff,20),e.sort()):this.Ff=zt(this.Ff,20)}}),Object.defineProperty(this,"multiSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,22))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,22):this.Ff=zt(this.Ff,22)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,23):this.Ff=zt(this.Ff,23)}}),Object.defineProperty(this,"commitOnSelChange",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,27))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,27):this.Ff=zt(this.Ff,27)}}),this.hasAppearanceStream=!1};jt(Qt,Zt);var te=function(){Qt.call(this),this.fontName="helvetica",this.combo=!1};jt(te,Qt);var ee=function(){te.call(this),this.combo=!0};jt(ee,te);var ie=function(){ee.call(this),this.edit=!0};jt(ie,ee);var ne=function(){Zt.call(this),this.FT="/Btn",Object.defineProperty(this,"noToggleToOff",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,15))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,15):this.Ff=zt(this.Ff,15)}}),Object.defineProperty(this,"radio",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,16))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,16):this.Ff=zt(this.Ff,16)}}),Object.defineProperty(this,"pushButton",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,17))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,17):this.Ff=zt(this.Ff,17)}}),Object.defineProperty(this,"radioIsUnison",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,26):this.Ff=zt(this.Ff,26)}});var t,e={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};if(this.scope&&(t=this.scope.internal.getEncryptor(this.objId)),0!==Object.keys(e).length){var i,n=[];for(i in n.push("<<"),e)n.push("/"+i+" ("+Tt(t(e[i]))+")");return n.push(">>"),n.join("\n")}},set:function(t){"object"===n(t)&&(e=t)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return e.CA||""},set:function(t){"string"==typeof t&&(e.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return t.substr(1,t.length-1)},set:function(e){t="/"+e}})};jt(ne,Zt);var re=function(){ne.call(this),this.pushButton=!0};jt(re,ne);var oe=function(){ne.call(this),this.radio=!0,this.pushButton=!1;var t=[];Object.defineProperty(this,"Kids",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=void 0!==e?e:[]}})};jt(oe,ne);var se=function(){var t,e;Zt.call(this),Object.defineProperty(this,"Parent",{enumerable:!1,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"optionName",{enumerable:!1,configurable:!0,get:function(){return e},set:function(t){e=t}});var i,r={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};this.scope&&(t=this.scope.internal.getEncryptor(this.objId));var e,i=[];for(e in i.push("<<"),r)i.push("/"+e+" ("+Tt(t(r[e]))+")");return i.push(">>"),i.join("\n")},set:function(t){"object"===n(t)&&(r=t)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return r.CA||""},set:function(t){"string"==typeof t&&(r.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return i},set:function(t){i=t}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return i.substr(1,i.length-1)},set:function(t){i="/"+t}}),this.caption="l",this.appearanceState="Off",this._AppearanceType=le.RadioButton.Circle,this.appearanceStreamContent=this._AppearanceType.createAppearanceStream(this.optionName)};jt(se,Zt),oe.prototype.setAppearance=function(t){if(!("createAppearanceStream"in t)||!("getCA"in t))throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");for(var e in this.Kids)if(this.Kids.hasOwnProperty(e)){var i=this.Kids[e];i.appearanceStreamContent=t.createAppearanceStream(i.optionName),i.caption=t.getCA()}},oe.prototype.createOption=function(t){var e=new se;return e.Parent=this,e.optionName=t,this.Kids.push(e),ue.call(this.scope,e),e};var ae=function(){ne.call(this),this.fontName="zapfdingbats",this.caption="3",this.appearanceState="On",this.value="On",this.textAlign="center",this.appearanceStreamContent=le.CheckBox.createAppearanceStream()};jt(ae,ne);var he=function(){Zt.call(this),this.FT="/Tx",Object.defineProperty(this,"multiline",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,13))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,13):this.Ff=zt(this.Ff,13)}}),Object.defineProperty(this,"fileSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,21))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,21):this.Ff=zt(this.Ff,21)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,23):this.Ff=zt(this.Ff,23)}}),Object.defineProperty(this,"doNotScroll",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,24))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,24):this.Ff=zt(this.Ff,24)}}),Object.defineProperty(this,"comb",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,25))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,25):this.Ff=zt(this.Ff,25)}}),Object.defineProperty(this,"richText",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,26):this.Ff=zt(this.Ff,26)}});var t=null;Object.defineProperty(this,"MaxLen",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"maxLength",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){Number.isInteger(e)&&(t=e)}}),Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,get:function(){return this.V||this.DV}})};jt(he,Zt);var ce=function(){he.call(this),Object.defineProperty(this,"password",{enumerable:!0,configurable:!0,get:function(){return Boolean(Bt(this.Ff,14))},set:function(t){!0===Boolean(t)?this.Ff=Rt(this.Ff,14):this.Ff=zt(this.Ff,14)}}),this.password=!0};jt(ce,he);var le={CheckBox:{createAppearanceStream:function(){return{N:{On:le.CheckBox.YesNormal},D:{On:le.CheckBox.YesPushDown,Off:le.CheckBox.OffPushDown}}},YesPushDown:function(t){var e=Et(t);e.scope=t.scope;var i=[],n=t.scope.internal.getFont(t.fontName,t.fontStyle).id,r=t.scope.__private__.encodeColorString(t.color),o=Wt(t,t.caption);return i.push("0.749023 g"),i.push("0 0 "+kt(le.internal.getWidth(t))+" "+kt(le.internal.getHeight(t))+" re"),i.push("f"),i.push("BMC"),i.push("q"),i.push("0 0 1 rg"),i.push("/"+n+" "+kt(o.fontSize)+" Tf "+r),i.push("BT"),i.push(o.text),i.push("ET"),i.push("Q"),i.push("EMC"),e.stream=i.join("\n"),e},YesNormal:function(t){var e=Et(t);e.scope=t.scope;var i=t.scope.internal.getFont(t.fontName,t.fontStyle).id,n=t.scope.__private__.encodeColorString(t.color),r=[],o=le.internal.getHeight(t),s=le.internal.getWidth(t),a=Wt(t,t.caption);return r.push("1 g"),r.push("0 0 "+kt(s)+" "+kt(o)+" re"),r.push("f"),r.push("q"),r.push("0 0 1 rg"),r.push("0 0 "+kt(s-1)+" "+kt(o-1)+" re"),r.push("W"),r.push("n"),r.push("0 g"),r.push("BT"),r.push("/"+i+" "+kt(a.fontSize)+" Tf "+n),r.push(a.text),r.push("ET"),r.push("Q"),e.stream=r.join("\n"),e},OffPushDown:function(t){var e=Et(t);e.scope=t.scope;var i=[];return i.push("0.749023 g"),i.push("0 0 "+kt(le.internal.getWidth(t))+" "+kt(le.internal.getHeight(t))+" re"),i.push("f"),e.stream=i.join("\n"),e}},RadioButton:{Circle:{createAppearanceStream:function(t){var e={D:{Off:le.RadioButton.Circle.OffPushDown},N:{}};return e.N[t]=le.RadioButton.Circle.YesNormal,e.D[t]=le.RadioButton.Circle.YesPushDown,e},getCA:function(){return"l"},YesNormal:function(t){var e=Et(t);e.scope=t.scope;var i=[],n=le.internal.getWidth(t)<=le.internal.getHeight(t)?le.internal.getWidth(t)/4:le.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var r=le.internal.Bezier_C,o=Number((n*r).toFixed(5));return i.push("q"),i.push("1 0 0 1 "+Nt(le.internal.getWidth(t)/2)+" "+Nt(le.internal.getHeight(t)/2)+" cm"),i.push(n+" 0 m"),i.push(n+" "+o+" "+o+" "+n+" 0 "+n+" c"),i.push("-"+o+" "+n+" -"+n+" "+o+" -"+n+" 0 c"),i.push("-"+n+" -"+o+" -"+o+" -"+n+" 0 -"+n+" c"),i.push(o+" -"+n+" "+n+" -"+o+" "+n+" 0 c"),i.push("f"),i.push("Q"),e.stream=i.join("\n"),e},YesPushDown:function(t){var e=Et(t);e.scope=t.scope;var i=[],n=le.internal.getWidth(t)<=le.internal.getHeight(t)?le.internal.getWidth(t)/4:le.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var r=Number((2*n).toFixed(5)),o=Number((r*le.internal.Bezier_C).toFixed(5)),s=Number((n*le.internal.Bezier_C).toFixed(5));return i.push("0.749023 g"),i.push("q"),i.push("1 0 0 1 "+Nt(le.internal.getWidth(t)/2)+" "+Nt(le.internal.getHeight(t)/2)+" cm"),i.push(r+" 0 m"),i.push(r+" "+o+" "+o+" "+r+" 0 "+r+" c"),i.push("-"+o+" "+r+" -"+r+" "+o+" -"+r+" 0 c"),i.push("-"+r+" -"+o+" -"+o+" -"+r+" 0 -"+r+" c"),i.push(o+" -"+r+" "+r+" -"+o+" "+r+" 0 c"),i.push("f"),i.push("Q"),i.push("0 g"),i.push("q"),i.push("1 0 0 1 "+Nt(le.internal.getWidth(t)/2)+" "+Nt(le.internal.getHeight(t)/2)+" cm"),i.push(n+" 0 m"),i.push(n+" "+s+" "+s+" "+n+" 0 "+n+" c"),i.push("-"+s+" "+n+" -"+n+" "+s+" -"+n+" 0 c"),i.push("-"+n+" -"+s+" -"+s+" -"+n+" 0 -"+n+" c"),i.push(s+" -"+n+" "+n+" -"+s+" "+n+" 0 c"),i.push("f"),i.push("Q"),e.stream=i.join("\n"),e},OffPushDown:function(t){var e=Et(t);e.scope=t.scope;var i=[],n=le.internal.getWidth(t)<=le.internal.getHeight(t)?le.internal.getWidth(t)/4:le.internal.getHeight(t)/4;n=Number((.9*n).toFixed(5));var r=Number((2*n).toFixed(5)),o=Number((r*le.internal.Bezier_C).toFixed(5));return i.push("0.749023 g"),i.push("q"),i.push("1 0 0 1 "+Nt(le.internal.getWidth(t)/2)+" "+Nt(le.internal.getHeight(t)/2)+" cm"),i.push(r+" 0 m"),i.push(r+" "+o+" "+o+" "+r+" 0 "+r+" c"),i.push("-"+o+" "+r+" -"+r+" "+o+" -"+r+" 0 c"),i.push("-"+r+" -"+o+" -"+o+" -"+r+" 0 -"+r+" c"),i.push(o+" -"+r+" "+r+" -"+o+" "+r+" 0 c"),i.push("f"),i.push("Q"),e.stream=i.join("\n"),e}},Cross:{createAppearanceStream:function(t){var e={D:{Off:le.RadioButton.Cross.OffPushDown},N:{}};return e.N[t]=le.RadioButton.Cross.YesNormal,e.D[t]=le.RadioButton.Cross.YesPushDown,e},getCA:function(){return"8"},YesNormal:function(t){var e=Et(t);e.scope=t.scope;var i=[],n=le.internal.calculateCross(t);return i.push("q"),i.push("1 1 "+kt(le.internal.getWidth(t)-2)+" "+kt(le.internal.getHeight(t)-2)+" re"),i.push("W"),i.push("n"),i.push(kt(n.x1.x)+" "+kt(n.x1.y)+" m"),i.push(kt(n.x2.x)+" "+kt(n.x2.y)+" l"),i.push(kt(n.x4.x)+" "+kt(n.x4.y)+" m"),i.push(kt(n.x3.x)+" "+kt(n.x3.y)+" l"),i.push("s"),i.push("Q"),e.stream=i.join("\n"),e},YesPushDown:function(t){var e=Et(t);e.scope=t.scope;var i=le.internal.calculateCross(t),n=[];return n.push("0.749023 g"),n.push("0 0 "+kt(le.internal.getWidth(t))+" "+kt(le.internal.getHeight(t))+" re"),n.push("f"),n.push("q"),n.push("1 1 "+kt(le.internal.getWidth(t)-2)+" "+kt(le.internal.getHeight(t)-2)+" re"),n.push("W"),n.push("n"),n.push(kt(i.x1.x)+" "+kt(i.x1.y)+" m"),n.push(kt(i.x2.x)+" "+kt(i.x2.y)+" l"),n.push(kt(i.x4.x)+" "+kt(i.x4.y)+" m"),n.push(kt(i.x3.x)+" "+kt(i.x3.y)+" l"),n.push("s"),n.push("Q"),e.stream=n.join("\n"),e},OffPushDown:function(t){var e=Et(t);e.scope=t.scope;var i=[];return i.push("0.749023 g"),i.push("0 0 "+kt(le.internal.getWidth(t))+" "+kt(le.internal.getHeight(t))+" re"),i.push("f"),e.stream=i.join("\n"),e}}},createDefaultAppearanceStream:function(t){var e=t.scope.internal.getFont(t.fontName,t.fontStyle).id,i=t.scope.__private__.encodeColorString(t.color);return"/"+e+" "+t.fontSize+" Tf "+i}};le.internal={Bezier_C:.551915024494,calculateCross:function(t){var e=le.internal.getWidth(t),i=le.internal.getHeight(t),n=Math.min(e,i);return{x1:{x:(e-n)/2,y:(i-n)/2+n},x2:{x:(e-n)/2+n,y:(i-n)/2},x3:{x:(e-n)/2,y:(i-n)/2},x4:{x:(e-n)/2+n,y:(i-n)/2+n}}}},le.internal.getWidth=function(t){var e=0;return"object"===n(t)&&(e=Ft(t.Rect[2])),e},le.internal.getHeight=function(t){var e=0;return"object"===n(t)&&(e=Ft(t.Rect[3])),e};var ue=Lt.addField=function(t){if(function(t,e){if(e.scope=t,void 0!==t.internal&&(void 0===t.internal.acroformPlugin||!1===t.internal.acroformPlugin.isInitialized)){if(Zt.FieldNum=0,t.internal.acroformPlugin=JSON.parse(JSON.stringify(Vt)),t.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("Exception while creating AcroformDictionary");Pt=t.internal.scaleFactor,t.internal.acroformPlugin.acroFormDictionaryRoot=new $t,t.internal.acroformPlugin.acroFormDictionaryRoot.scope=t,t.internal.acroformPlugin.acroFormDictionaryRoot._eventID=t.internal.events.subscribe("postPutResources",(function(){var e;(e=t).internal.events.unsubscribe(e.internal.acroformPlugin.acroFormDictionaryRoot._eventID),delete e.internal.acroformPlugin.acroFormDictionaryRoot._eventID,e.internal.acroformPlugin.printedOut=!0})),t.internal.events.subscribe("buildDocument",(function(){!function(t){t.internal.acroformPlugin.acroFormDictionaryRoot.objId=void 0;var e=t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;for(var i in e)if(e.hasOwnProperty(i)){var n=e[i];n.objId=void 0,n.hasAnnotation&&Gt(n,t)}}(t)})),t.internal.events.subscribe("putCatalog",(function(){!function(t){if(void 0===t.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("putCatalogCallback: Root missing.");t.internal.write("/AcroForm "+t.internal.acroformPlugin.acroFormDictionaryRoot.objId+" 0 R")}(t)})),t.internal.events.subscribe("postPutPages",(function(e){!function(t,e){var i=!t;for(var r in t||(e.internal.newObjectDeferredBegin(e.internal.acroformPlugin.acroFormDictionaryRoot.objId,!0),e.internal.acroformPlugin.acroFormDictionaryRoot.putStream()),t=t||e.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if(t.hasOwnProperty(r)){var o=t[r],s=[],a=o.Rect;if(o.Rect&&(o.Rect=qt(o.Rect,e)),e.internal.newObjectDeferredBegin(o.objId,!0),o.DA=le.createDefaultAppearanceStream(o),"object"===n(o)&&"function"==typeof o.getKeyValueListForStream&&(s=o.getKeyValueListForStream()),o.Rect=a,o.hasAppearanceStream&&!o.appearanceStreamContent){var h=Ut(o);s.push({key:"AP",value:"<</N "+h+">>"}),e.internal.acroformPlugin.xForms.push(h)}if(o.appearanceStreamContent){var c="";for(var l in o.appearanceStreamContent)if(o.appearanceStreamContent.hasOwnProperty(l)){var u=o.appearanceStreamContent[l];if(c+="/"+l+" ",c+="<<",Object.keys(u).length>=1||Array.isArray(u)){for(var r in u)if(u.hasOwnProperty(r)){var f=u[r];"function"==typeof f&&(f=f.call(e,o)),c+="/"+r+" "+f+" ",e.internal.acroformPlugin.xForms.indexOf(f)>=0||e.internal.acroformPlugin.xForms.push(f)}}else"function"==typeof(f=u)&&(f=f.call(e,o)),c+="/"+r+" "+f,e.internal.acroformPlugin.xForms.indexOf(f)>=0||e.internal.acroformPlugin.xForms.push(f);c+=">>"}s.push({key:"AP",value:"<<\n"+c+">>"})}e.internal.putStream({additionalKeyValues:s,objectId:o.objId}),e.internal.out("endobj")}i&&function(t,e){for(var i in t)if(t.hasOwnProperty(i)){var r=i,o=t[i];e.internal.newObjectDeferredBegin(o.objId,!0),"object"===n(o)&&"function"==typeof o.putStream&&o.putStream(),delete t[r]}}(e.internal.acroformPlugin.xForms,e)}(e,t)})),t.internal.acroformPlugin.isInitialized=!0}}(this,t),!(t instanceof Zt))throw new Error("Invalid argument passed to jsPDF.addField.");var e;return(e=t).scope.internal.acroformPlugin.printedOut&&(e.scope.internal.acroformPlugin.printedOut=!1,e.scope.internal.acroformPlugin.acroFormDictionaryRoot=null),e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e),t.page=t.scope.internal.getCurrentPageInfo().pageNumber,this};Lt.AcroFormChoiceField=Qt,Lt.AcroFormListBox=te,Lt.AcroFormComboBox=ee,Lt.AcroFormEditBox=ie,Lt.AcroFormButton=ne,Lt.AcroFormPushButton=re,Lt.AcroFormRadioButton=oe,Lt.AcroFormCheckBox=ae,Lt.AcroFormTextField=he,Lt.AcroFormPasswordField=ce,Lt.AcroFormAppearance=le,Lt.AcroForm={ChoiceField:Qt,ListBox:te,ComboBox:ee,EditBox:ie,Button:ne,PushButton:re,RadioButton:oe,CheckBox:ae,TextField:he,PasswordField:ce,Appearance:le},At.AcroForm={ChoiceField:Qt,ListBox:te,ComboBox:ee,EditBox:ie,Button:ne,PushButton:re,RadioButton:oe,CheckBox:ae,TextField:he,PasswordField:ce,Appearance:le};var fe,de,pe=At.AcroForm;function ge(t){return t.reduce((function(t,e,i){return t[e]=i,t}),{})}!function(t){t.__addimage__={};var e="UNKNOWN",i={PNG:[[137,80,78,71]],TIFF:[[77,77,0,42],[73,73,42,0]],JPEG:[[255,216,255,224,void 0,void 0,74,70,73,70,0],[255,216,255,225,void 0,void 0,69,120,105,102,0,0],[255,216,255,219],[255,216,255,238]],JPEG2000:[[0,0,0,12,106,80,32,32]],GIF87a:[[71,73,70,56,55,97]],GIF89a:[[71,73,70,56,57,97]],WEBP:[[82,73,70,70,void 0,void 0,void 0,void 0,87,69,66,80]],BMP:[[66,77],[66,65],[67,73],[67,80],[73,67],[80,84]]},r=t.__addimage__.getImageFileTypeByImageData=function(t,n){var r,o,s,a,h,c=e;if("RGBA"===(n=n||e)||void 0!==t.data&&t.data instanceof Uint8ClampedArray&&"height"in t&&"width"in t)return"RGBA";if(S(t))for(h in i)for(s=i[h],r=0;r<s.length;r+=1){for(a=!0,o=0;o<s[r].length;o+=1)if(void 0!==s[r][o]&&s[r][o]!==t[o]){a=!1;break}if(!0===a){c=h;break}}else for(h in i)for(s=i[h],r=0;r<s.length;r+=1){for(a=!0,o=0;o<s[r].length;o+=1)if(void 0!==s[r][o]&&s[r][o]!==t.charCodeAt(o)){a=!1;break}if(!0===a){c=h;break}}return c===e&&n!==e&&(c=n),c},o=function t(e){for(var i=this.internal.write,n=this.internal.putStream,r=(0,this.internal.getFilters)();-1!==r.indexOf("FlateEncode");)r.splice(r.indexOf("FlateEncode"),1);e.objectId=this.internal.newObject();var o=[];if(o.push({key:"Type",value:"/XObject"}),o.push({key:"Subtype",value:"/Image"}),o.push({key:"Width",value:e.width}),o.push({key:"Height",value:e.height}),e.colorSpace===v.INDEXED?o.push({key:"ColorSpace",value:"[/Indexed /DeviceRGB "+(e.palette.length/3-1)+" "+("sMask"in e&&void 0!==e.sMask?e.objectId+2:e.objectId+1)+" 0 R]"}):(o.push({key:"ColorSpace",value:"/"+e.colorSpace}),e.colorSpace===v.DEVICE_CMYK&&o.push({key:"Decode",value:"[1 0 1 0 1 0 1 0]"})),o.push({key:"BitsPerComponent",value:e.bitsPerComponent}),"decodeParameters"in e&&void 0!==e.decodeParameters&&o.push({key:"DecodeParms",value:"<<"+e.decodeParameters+">>"}),"transparency"in e&&Array.isArray(e.transparency)){for(var s="",a=0,h=e.transparency.length;a<h;a++)s+=e.transparency[a]+" "+e.transparency[a]+" ";o.push({key:"Mask",value:"["+s+"]"})}void 0!==e.sMask&&o.push({key:"SMask",value:e.objectId+1+" 0 R"});var c=void 0!==e.filter?["/"+e.filter]:void 0;if(n({data:e.data,additionalKeyValues:o,alreadyAppliedFilters:c,objectId:e.objectId}),i("endobj"),"sMask"in e&&void 0!==e.sMask){var l="/Predictor "+e.predictor+" /Colors 1 /BitsPerComponent "+e.bitsPerComponent+" /Columns "+e.width,u={width:e.width,height:e.height,colorSpace:"DeviceGray",bitsPerComponent:e.bitsPerComponent,decodeParameters:l,data:e.sMask};"filter"in e&&(u.filter=e.filter),t.call(this,u)}if(e.colorSpace===v.INDEXED){var f=this.internal.newObject();n({data:A(new Uint8Array(e.palette)),objectId:f}),i("endobj")}},s=function(){var t=this.internal.collections.addImage_images;for(var e in t)o.call(this,t[e])},a=function(){var t,e=this.internal.collections.addImage_images,i=this.internal.write;for(var n in e)i("/I"+(t=e[n]).index,t.objectId,"0","R")},h=function(){this.internal.collections.addImage_images||(this.internal.collections.addImage_images={},this.internal.events.subscribe("putResources",s),this.internal.events.subscribe("putXobjectDict",a))},c=function(){var t=this.internal.collections.addImage_images;return h.call(this),t},l=function(){return Object.keys(this.internal.collections.addImage_images).length},u=function(e){return"function"==typeof t["process"+e.toUpperCase()]},f=function(t){return"object"===n(t)&&1===t.nodeType},d=function(e,i){if("IMG"===e.nodeName&&e.hasAttribute("src")){var n=""+e.getAttribute("src");if(0===n.indexOf("data:image/"))return Z(unescape(n).split("base64,").pop());var r=t.loadFile(n,!0);if(void 0!==r)return r}if("CANVAS"===e.nodeName){if(0===e.width||0===e.height)throw new Error("Given canvas must have data. Canvas width: "+e.width+", height: "+e.height);var o;switch(i){case"PNG":o="image/png";break;case"WEBP":o="image/webp";break;default:o="image/jpeg"}return Z(e.toDataURL(o,1).split("base64,").pop())}},p=function(t){var e=this.internal.collections.addImage_images;if(e)for(var i in e)if(t===e[i].alias)return e[i]},g=function(t,e,i){return t||e||(t=-96,e=-96),t<0&&(t=-1*i.width*72/t/this.internal.scaleFactor),e<0&&(e=-1*i.height*72/e/this.internal.scaleFactor),0===t&&(t=e*i.width/i.height),0===e&&(e=t*i.height/i.width),[t,e]},m=function(t,e,i,n,r,o){var s=g.call(this,i,n,r),a=this.internal.getCoordinateString,h=this.internal.getVerticalCoordinateString,l=c.call(this);if(i=s[0],n=s[1],l[r.index]=r,o){o*=Math.PI/180;var u=Math.cos(o),f=Math.sin(o),d=function(t){return t.toFixed(4)},p=[d(u),d(f),d(-1*f),d(u),0,0,"cm"]}this.internal.write("q"),o?(this.internal.write([1,"0","0",1,a(t),h(e+n),"cm"].join(" ")),this.internal.write(p.join(" ")),this.internal.write([a(i),"0","0",a(n),"0","0","cm"].join(" "))):this.internal.write([a(i),"0","0",a(n),a(t),h(e+n),"cm"].join(" ")),this.isAdvancedAPI()&&this.internal.write([1,0,0,-1,0,0,"cm"].join(" ")),this.internal.write("/I"+r.index+" Do"),this.internal.write("Q")},v=t.color_spaces={DEVICE_RGB:"DeviceRGB",DEVICE_GRAY:"DeviceGray",DEVICE_CMYK:"DeviceCMYK",CAL_GREY:"CalGray",CAL_RGB:"CalRGB",LAB:"Lab",ICC_BASED:"ICCBased",INDEXED:"Indexed",PATTERN:"Pattern",SEPARATION:"Separation",DEVICE_N:"DeviceN"};t.decode={DCT_DECODE:"DCTDecode",FLATE_DECODE:"FlateDecode",LZW_DECODE:"LZWDecode",JPX_DECODE:"JPXDecode",JBIG2_DECODE:"JBIG2Decode",ASCII85_DECODE:"ASCII85Decode",ASCII_HEX_DECODE:"ASCIIHexDecode",RUN_LENGTH_DECODE:"RunLengthDecode",CCITT_FAX_DECODE:"CCITTFaxDecode"};var b=t.image_compression={NONE:"NONE",FAST:"FAST",MEDIUM:"MEDIUM",SLOW:"SLOW"},y=t.__addimage__.sHashCode=function(t){var e,i,n=0;if("string"==typeof t)for(i=t.length,e=0;e<i;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;else if(S(t))for(i=t.byteLength/2,e=0;e<i;e++)n=(n<<5)-n+t[e],n|=0;return n},w=t.__addimage__.validateStringAsBase64=function(t){(t=t||"").toString().trim();var e=!0;return 0===t.length&&(e=!1),t.length%4!=0&&(e=!1),!1===/^[A-Za-z0-9+/]+$/.test(t.substr(0,t.length-2))&&(e=!1),!1===/^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2))&&(e=!1),e},x=t.__addimage__.extractImageFromDataUrl=function(t){var e=(t=t||"").split("base64,"),i=null;if(2===e.length){var n=/^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);Array.isArray(n)&&(i={mimeType:n[1],charset:n[2],data:e[1]})}return i},_=t.__addimage__.supportsArrayBuffer=function(){return"undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array};t.__addimage__.isArrayBuffer=function(t){return _()&&t instanceof ArrayBuffer};var S=t.__addimage__.isArrayBufferView=function(t){return _()&&"undefined"!=typeof Uint32Array&&(t instanceof Int8Array||t instanceof Uint8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)},C=t.__addimage__.binaryStringToUint8Array=function(t){for(var e=t.length,i=new Uint8Array(e),n=0;n<e;n++)i[n]=t.charCodeAt(n);return i},A=t.__addimage__.arrayBufferToBinaryString=function(t){for(var e="",i=S(t)?t:new Uint8Array(t),n=0;n<i.length;n+=8192)e+=String.fromCharCode.apply(null,i.subarray(n,n+8192));return e};t.addImage=function(){var t,i,r,o,s,a,c,l,u;if("number"==typeof arguments[1]?(i=e,r=arguments[1],o=arguments[2],s=arguments[3],a=arguments[4],c=arguments[5],l=arguments[6],u=arguments[7]):(i=arguments[1],r=arguments[2],o=arguments[3],s=arguments[4],a=arguments[5],c=arguments[6],l=arguments[7],u=arguments[8]),"object"===n(t=arguments[0])&&!f(t)&&"imageData"in t){var d=t;t=d.imageData,i=d.format||i||e,r=d.x||r||0,o=d.y||o||0,s=d.w||d.width||s,a=d.h||d.height||a,c=d.alias||c,l=d.compression||l,u=d.rotation||d.angle||u}var p=this.internal.getFilters();if(void 0===l&&-1!==p.indexOf("FlateEncode")&&(l="SLOW"),isNaN(r)||isNaN(o))throw new Error("Invalid coordinates passed to jsPDF.addImage");h.call(this);var g=L.call(this,t,i,c,l);return m.call(this,r,o,s,a,g,u),this};var L=function(i,n,o,s){var a,h,c;if("string"==typeof i&&r(i)===e){i=unescape(i);var g=P(i,!1);(""!==g||void 0!==(g=t.loadFile(i,!0)))&&(i=g)}if(f(i)&&(i=d(i,n)),n=r(i,n),!u(n))throw new Error("addImage does not support files of type '"+n+"', please ensure that a plugin for '"+n+"' support is added.");if((null==(c=o)||0===c.length)&&(o=function(t){return"string"==typeof t||S(t)?y(t):S(t.data)?y(t.data):null}(i)),(a=p.call(this,o))||(_()&&(i instanceof Uint8Array||"RGBA"===n||(h=i,i=C(i))),a=this["process"+n.toUpperCase()](i,l.call(this),o,function(e){return e&&"string"==typeof e&&(e=e.toUpperCase()),e in t.image_compression?e:b.NONE}(s),h)),!a)throw new Error("An unknown error occurred whilst processing the image.");return a},P=t.__addimage__.convertBase64ToBinaryString=function(t,e){var i;e="boolean"!=typeof e||e;var n,r="";if("string"==typeof t){n=null!==(i=x(t))?i.data:t;try{r=Z(n)}catch(t){if(e)throw w(n)?new Error("atob-Error in jsPDF.convertBase64ToBinaryString "+t.message):new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ")}}return r};t.getImageProperties=function(i){var n,o,s="";if(f(i)&&(i=d(i)),"string"==typeof i&&r(i)===e&&(""===(s=P(i,!1))&&(s=t.loadFile(i)||""),i=s),o=r(i),!u(o))throw new Error("addImage does not support files of type '"+o+"', please ensure that a plugin for '"+o+"' support is added.");if(!_()||i instanceof Uint8Array||(i=C(i)),!(n=this["process"+o.toUpperCase()](i)))throw new Error("An unknown error occurred whilst processing the image");return n.fileType=o,n}}(At.API),fe=At.API,de=function(t){if(void 0!==t&&""!=t)return!0},At.API.events.push(["addPage",function(t){this.internal.getPageInfo(t.pageNumber).pageContext.annotations=[]}]),fe.events.push(["putPage",function(t){for(var e,i,n,r=this.internal.getCoordinateString,o=this.internal.getVerticalCoordinateString,s=this.internal.getPageInfoByObjId(t.objId),a=t.pageContext.annotations,h=!1,c=0;c<a.length&&!h;c++)switch((e=a[c]).type){case"link":(de(e.options.url)||de(e.options.pageNumber))&&(h=!0);break;case"reference":case"text":case"freetext":h=!0}if(0!=h){this.internal.write("/Annots [");for(var l=0;l<a.length;l++){e=a[l];var u=this.internal.pdfEscape,f=this.internal.getEncryptor(t.objId);switch(e.type){case"reference":this.internal.write(" "+e.object.objId+" 0 R ");break;case"text":var d=this.internal.newAdditionalObject(),p=this.internal.newAdditionalObject(),g=this.internal.getEncryptor(d.objId),m=e.title||"Note";n="<</Type /Annot /Subtype /Text "+(i="/Rect ["+r(e.bounds.x)+" "+o(e.bounds.y+e.bounds.h)+" "+r(e.bounds.x+e.bounds.w)+" "+o(e.bounds.y)+"] ")+"/Contents ("+u(g(e.contents))+")",n+=" /Popup "+p.objId+" 0 R",n+=" /P "+s.objId+" 0 R",n+=" /T ("+u(g(m))+") >>",d.content=n;var v=d.objId+" 0 R";n="<</Type /Annot /Subtype /Popup "+(i="/Rect ["+r(e.bounds.x+30)+" "+o(e.bounds.y+e.bounds.h)+" "+r(e.bounds.x+e.bounds.w+30)+" "+o(e.bounds.y)+"] ")+" /Parent "+v,e.open&&(n+=" /Open true"),n+=" >>",p.content=n,this.internal.write(d.objId,"0 R",p.objId,"0 R");break;case"freetext":i="/Rect ["+r(e.bounds.x)+" "+o(e.bounds.y)+" "+r(e.bounds.x+e.bounds.w)+" "+o(e.bounds.y+e.bounds.h)+"] ";var b=e.color||"#000000";n="<</Type /Annot /Subtype /FreeText "+i+"/Contents ("+u(f(e.contents))+")",n+=" /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#"+b+")",n+=" /Border [0 0 0]",n+=" >>",this.internal.write(n);break;case"link":if(e.options.name){var y=this.annotations._nameMap[e.options.name];e.options.pageNumber=y.page,e.options.top=y.y}else e.options.top||(e.options.top=0);if(i="/Rect ["+e.finalBounds.x+" "+e.finalBounds.y+" "+e.finalBounds.w+" "+e.finalBounds.h+"] ",n="",e.options.url)n="<</Type /Annot /Subtype /Link "+i+"/Border [0 0 0] /A <</S /URI /URI ("+u(f(e.options.url))+") >>";else if(e.options.pageNumber)switch(n="<</Type /Annot /Subtype /Link "+i+"/Border [0 0 0] /Dest ["+this.internal.getPageInfo(e.options.pageNumber).objId+" 0 R",e.options.magFactor=e.options.magFactor||"XYZ",e.options.magFactor){case"Fit":n+=" /Fit]";break;case"FitH":n+=" /FitH "+e.options.top+"]";break;case"FitV":e.options.left=e.options.left||0,n+=" /FitV "+e.options.left+"]";break;default:var w=o(e.options.top);e.options.left=e.options.left||0,void 0===e.options.zoom&&(e.options.zoom=0),n+=" /XYZ "+e.options.left+" "+w+" "+e.options.zoom+"]"}""!=n&&(n+=" >>",this.internal.write(n))}}this.internal.write("]")}}]),fe.createAnnotation=function(t){var e=this.internal.getCurrentPageInfo();switch(t.type){case"link":this.link(t.bounds.x,t.bounds.y,t.bounds.w,t.bounds.h,t);break;case"text":case"freetext":e.pageContext.annotations.push(t)}},fe.link=function(t,e,i,n,r){var o=this.internal.getCurrentPageInfo(),s=this.internal.getCoordinateString,a=this.internal.getVerticalCoordinateString;o.pageContext.annotations.push({finalBounds:{x:s(t),y:a(e),w:s(t+i),h:a(e+n)},options:r,type:"link"})},fe.textWithLink=function(t,e,i,n){var r,o,s=this.getTextWidth(t),a=this.internal.getLineHeight()/this.internal.scaleFactor;if(void 0!==n.maxWidth){o=n.maxWidth;var h=this.splitTextToSize(t,o).length;r=Math.ceil(a*h)}else o=s,r=a;return this.text(t,e,i,n),i+=.2*a,"center"===n.align&&(e-=s/2),"right"===n.align&&(e-=s),this.link(e,i-a,o,r,n),s},fe.getTextWidth=function(t){var e=this.internal.getFontSize();return this.getStringUnitWidth(t)*e/this.internal.scaleFactor},function(t){var e={1569:[65152],1570:[65153,65154],1571:[65155,65156],1572:[65157,65158],1573:[65159,65160],1574:[65161,65162,65163,65164],1575:[65165,65166],1576:[65167,65168,65169,65170],1577:[65171,65172],1578:[65173,65174,65175,65176],1579:[65177,65178,65179,65180],1580:[65181,65182,65183,65184],1581:[65185,65186,65187,65188],1582:[65189,65190,65191,65192],1583:[65193,65194],1584:[65195,65196],1585:[65197,65198],1586:[65199,65200],1587:[65201,65202,65203,65204],1588:[65205,65206,65207,65208],1589:[65209,65210,65211,65212],1590:[65213,65214,65215,65216],1591:[65217,65218,65219,65220],1592:[65221,65222,65223,65224],1593:[65225,65226,65227,65228],1594:[65229,65230,65231,65232],1601:[65233,65234,65235,65236],1602:[65237,65238,65239,65240],1603:[65241,65242,65243,65244],1604:[65245,65246,65247,65248],1605:[65249,65250,65251,65252],1606:[65253,65254,65255,65256],1607:[65257,65258,65259,65260],1608:[65261,65262],1609:[65263,65264,64488,64489],1610:[65265,65266,65267,65268],1649:[64336,64337],1655:[64477],1657:[64358,64359,64360,64361],1658:[64350,64351,64352,64353],1659:[64338,64339,64340,64341],1662:[64342,64343,64344,64345],1663:[64354,64355,64356,64357],1664:[64346,64347,64348,64349],1667:[64374,64375,64376,64377],1668:[64370,64371,64372,64373],1670:[64378,64379,64380,64381],1671:[64382,64383,64384,64385],1672:[64392,64393],1676:[64388,64389],1677:[64386,64387],1678:[64390,64391],1681:[64396,64397],1688:[64394,64395],1700:[64362,64363,64364,64365],1702:[64366,64367,64368,64369],1705:[64398,64399,64400,64401],1709:[64467,64468,64469,64470],1711:[64402,64403,64404,64405],1713:[64410,64411,64412,64413],1715:[64406,64407,64408,64409],1722:[64414,64415],1723:[64416,64417,64418,64419],1726:[64426,64427,64428,64429],1728:[64420,64421],1729:[64422,64423,64424,64425],1733:[64480,64481],1734:[64473,64474],1735:[64471,64472],1736:[64475,64476],1737:[64482,64483],1739:[64478,64479],1740:[64508,64509,64510,64511],1744:[64484,64485,64486,64487],1746:[64430,64431],1747:[64432,64433]},i={65247:{65154:65269,65156:65271,65160:65273,65166:65275},65248:{65154:65270,65156:65272,65160:65274,65166:65276},65165:{65247:{65248:{65258:65010}}},1617:{1612:64606,1613:64607,1614:64608,1615:64609,1616:64610}},n={1612:64606,1613:64607,1614:64608,1615:64609,1616:64610},r=[1570,1571,1573,1575];t.__arabicParser__={};var o=t.__arabicParser__.isInArabicSubstitutionA=function(t){return void 0!==e[t.charCodeAt(0)]},s=t.__arabicParser__.isArabicLetter=function(t){return"string"==typeof t&&/^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t)},a=t.__arabicParser__.isArabicEndLetter=function(t){return s(t)&&o(t)&&e[t.charCodeAt(0)].length<=2},h=t.__arabicParser__.isArabicAlfLetter=function(t){return s(t)&&r.indexOf(t.charCodeAt(0))>=0};t.__arabicParser__.arabicLetterHasIsolatedForm=function(t){return s(t)&&o(t)&&e[t.charCodeAt(0)].length>=1};var c=t.__arabicParser__.arabicLetterHasFinalForm=function(t){return s(t)&&o(t)&&e[t.charCodeAt(0)].length>=2};t.__arabicParser__.arabicLetterHasInitialForm=function(t){return s(t)&&o(t)&&e[t.charCodeAt(0)].length>=3};var l=t.__arabicParser__.arabicLetterHasMedialForm=function(t){return s(t)&&o(t)&&4==e[t.charCodeAt(0)].length},u=t.__arabicParser__.resolveLigatures=function(t){var e=0,n=i,r="",o=0;for(e=0;e<t.length;e+=1)void 0!==n[t.charCodeAt(e)]?(o++,"number"==typeof(n=n[t.charCodeAt(e)])&&(r+=String.fromCharCode(n),n=i,o=0),e===t.length-1&&(n=i,r+=t.charAt(e-(o-1)),e-=o-1,o=0)):(n=i,r+=t.charAt(e-o),e-=o,o=0);return r};t.__arabicParser__.isArabicDiacritic=function(t){return void 0!==t&&void 0!==n[t.charCodeAt(0)]};var f=t.__arabicParser__.getCorrectForm=function(t,e,i){return s(t)?!1===o(t)?-1:!c(t)||!s(e)&&!s(i)||!s(i)&&a(e)||a(t)&&!s(e)||a(t)&&h(e)||a(t)&&a(e)?0:l(t)&&s(e)&&!a(e)&&s(i)&&c(i)?3:a(t)||!s(i)?1:2:-1},d=function(t){var i=0,n=0,r=0,o="",a="",h="",c=(t=t||"").split("\\s+"),l=[];for(i=0;i<c.length;i+=1){for(l.push(""),n=0;n<c[i].length;n+=1)o=c[i][n],a=c[i][n-1],h=c[i][n+1],s(o)?(r=f(o,a,h),l[i]+=-1!==r?String.fromCharCode(e[o.charCodeAt(0)][r]):o):l[i]+=o;l[i]=u(l[i])}return l.join(" ")},p=t.__arabicParser__.processArabic=t.processArabic=function(){var t,e="string"==typeof arguments[0]?arguments[0]:arguments[0].text,i=[];if(Array.isArray(e)){var n=0;for(i=[],n=0;n<e.length;n+=1)Array.isArray(e[n])?i.push([d(e[n][0]),e[n][1],e[n][2]]):i.push([d(e[n])]);t=i}else t=d(e);return"string"==typeof arguments[0]?t:(arguments[0].text=t,arguments[0])};t.events.push(["preProcessText",p])}(At.API),At.API.autoPrint=function(t){var e;return"javascript"===((t=t||{}).variant=t.variant||"non-conform",t.variant)?this.addJS("print({});"):(this.internal.events.subscribe("postPutResources",(function(){e=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /Named"),this.internal.out("/Type /Action"),this.internal.out("/N /Print"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){this.internal.out("/OpenAction "+e+" 0 R")}))),this},function(t){var e=function(){var t=void 0;Object.defineProperty(this,"pdf",{get:function(){return t},set:function(e){t=e}});var e=150;Object.defineProperty(this,"width",{get:function(){return e},set:function(t){e=isNaN(t)||!1===Number.isInteger(t)||t<0?150:t,this.getContext("2d").pageWrapXEnabled&&(this.getContext("2d").pageWrapX=e+1)}});var i=300;Object.defineProperty(this,"height",{get:function(){return i},set:function(t){i=isNaN(t)||!1===Number.isInteger(t)||t<0?300:t,this.getContext("2d").pageWrapYEnabled&&(this.getContext("2d").pageWrapY=i+1)}});var n=[];Object.defineProperty(this,"childNodes",{get:function(){return n},set:function(t){n=t}});var r={};Object.defineProperty(this,"style",{get:function(){return r},set:function(t){r=t}}),Object.defineProperty(this,"parentNode",{})};e.prototype.getContext=function(t,e){var i;if("2d"!==(t=t||"2d"))return null;for(i in e)this.pdf.context2d.hasOwnProperty(i)&&(this.pdf.context2d[i]=e[i]);return this.pdf.context2d._canvas=this,this.pdf.context2d},e.prototype.toDataURL=function(){throw new Error("toDataURL is not implemented.")},t.events.push(["initialized",function(){this.canvas=new e,this.canvas.pdf=this}])}(At.API),function(t){var e={left:0,top:0,bottom:0,right:0},i=!1,r=function(){void 0===this.internal.__cell__&&(this.internal.__cell__={},this.internal.__cell__.padding=3,this.internal.__cell__.headerFunction=void 0,this.internal.__cell__.margins=Object.assign({},e),this.internal.__cell__.margins.width=this.getPageWidth(),o.call(this))},o=function(){this.internal.__cell__.lastCell=new s,this.internal.__cell__.pages=1},s=function(){var t=arguments[0];Object.defineProperty(this,"x",{enumerable:!0,get:function(){return t},set:function(e){t=e}});var e=arguments[1];Object.defineProperty(this,"y",{enumerable:!0,get:function(){return e},set:function(t){e=t}});var i=arguments[2];Object.defineProperty(this,"width",{enumerable:!0,get:function(){return i},set:function(t){i=t}});var n=arguments[3];Object.defineProperty(this,"height",{enumerable:!0,get:function(){return n},set:function(t){n=t}});var r=arguments[4];Object.defineProperty(this,"text",{enumerable:!0,get:function(){return r},set:function(t){r=t}});var o=arguments[5];Object.defineProperty(this,"lineNumber",{enumerable:!0,get:function(){return o},set:function(t){o=t}});var s=arguments[6];return Object.defineProperty(this,"align",{enumerable:!0,get:function(){return s},set:function(t){s=t}}),this};s.prototype.clone=function(){return new s(this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align)},s.prototype.toArray=function(){return[this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align]},t.setHeaderFunction=function(t){return r.call(this),this.internal.__cell__.headerFunction="function"==typeof t?t:void 0,this},t.getTextDimensions=function(t,e){r.call(this);var i=(e=e||{}).fontSize||this.getFontSize(),n=e.font||this.getFont(),o=e.scaleFactor||this.internal.scaleFactor,s=0,a=0,h=0,c=this;if(!Array.isArray(t)&&"string"!=typeof t){if("number"!=typeof t)throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");t=String(t)}var l=e.maxWidth;l>0?"string"==typeof t?t=this.splitTextToSize(t,l):"[object Array]"===Object.prototype.toString.call(t)&&(t=t.reduce((function(t,e){return t.concat(c.splitTextToSize(e,l))}),[])):t=Array.isArray(t)?t:[t];for(var u=0;u<t.length;u++)s<(h=this.getStringUnitWidth(t[u],{font:n})*i)&&(s=h);return 0!==s&&(a=t.length),{w:s/=o,h:Math.max((a*i*this.getLineHeightFactor()-i*(this.getLineHeightFactor()-1))/o,0)}},t.cellAddPage=function(){r.call(this),this.addPage();var t=this.internal.__cell__.margins||e;return this.internal.__cell__.lastCell=new s(t.left,t.top,void 0,void 0),this.internal.__cell__.pages+=1,this};var a=t.cell=function(){var t;t=arguments[0]instanceof s?arguments[0]:new s(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]),r.call(this);var n=this.internal.__cell__.lastCell,o=this.internal.__cell__.padding,a=this.internal.__cell__.margins||e,h=this.internal.__cell__.tableHeaderRow,c=this.internal.__cell__.printHeaders;return void 0!==n.lineNumber&&(n.lineNumber===t.lineNumber?(t.x=(n.x||0)+(n.width||0),t.y=n.y||0):n.y+n.height+t.height+a.bottom>this.getPageHeight()?(this.cellAddPage(),t.y=a.top,c&&h&&(this.printHeaderRow(t.lineNumber,!0),t.y+=h[0].height)):t.y=n.y+n.height||t.y),void 0!==t.text[0]&&(this.rect(t.x,t.y,t.width,t.height,!0===i?"FD":void 0),"right"===t.align?this.text(t.text,t.x+t.width-o,t.y+o,{align:"right",baseline:"top"}):"center"===t.align?this.text(t.text,t.x+t.width/2,t.y+o,{align:"center",baseline:"top",maxWidth:t.width-o-o}):this.text(t.text,t.x+o,t.y+o,{align:"left",baseline:"top",maxWidth:t.width-o-o})),this.internal.__cell__.lastCell=t,this};t.table=function(t,i,c,l,u){if(r.call(this),!c)throw new Error("No data for PDF table.");var f,d,p,g,m=[],v=[],b=[],y={},w={},x=[],_=[],S=(u=u||{}).autoSize||!1,C=!1!==u.printHeaders,A=u.css&&void 0!==u.css["font-size"]?16*u.css["font-size"]:u.fontSize||12,L=u.margins||Object.assign({width:this.getPageWidth()},e),P="number"==typeof u.padding?u.padding:3,T=u.headerBackgroundColor||"#c8c8c8",O=u.headerTextColor||"#000";if(o.call(this),this.internal.__cell__.printHeaders=C,this.internal.__cell__.margins=L,this.internal.__cell__.table_font_size=A,this.internal.__cell__.padding=P,this.internal.__cell__.headerBackgroundColor=T,this.internal.__cell__.headerTextColor=O,this.setFontSize(A),null==l)v=m=Object.keys(c[0]),b=m.map((function(){return"left"}));else if(Array.isArray(l)&&"object"===n(l[0]))for(m=l.map((function(t){return t.name})),v=l.map((function(t){return t.prompt||t.name||""})),b=l.map((function(t){return t.align||"left"})),f=0;f<l.length;f+=1)w[l[f].name]=l[f].width*(19.049976/25.4);else Array.isArray(l)&&"string"==typeof l[0]&&(v=m=l,b=m.map((function(){return"left"})));if(S||Array.isArray(l)&&"string"==typeof l[0])for(f=0;f<m.length;f+=1){for(y[g=m[f]]=c.map((function(t){return t[g]})),this.setFont(void 0,"bold"),x.push(this.getTextDimensions(v[f],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w),d=y[g],this.setFont(void 0,"normal"),p=0;p<d.length;p+=1)x.push(this.getTextDimensions(d[p],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w);w[g]=Math.max.apply(null,x)+P+P,x=[]}if(C){var k={};for(f=0;f<m.length;f+=1)k[m[f]]={},k[m[f]].text=v[f],k[m[f]].align=b[f];var N=h.call(this,k,w);_=m.map((function(e){return new s(t,i,w[e],N,k[e].text,void 0,k[e].align)})),this.setTableHeaderRow(_),this.printHeaderRow(1,!1)}var j=l.reduce((function(t,e){return t[e.name]=e.align,t}),{});for(f=0;f<c.length;f+=1){"rowStart"in u&&u.rowStart instanceof Function&&u.rowStart({row:f,data:c[f]},this);var F=h.call(this,c[f],w);for(p=0;p<m.length;p+=1){var E=c[f][m[p]];"cellStart"in u&&u.cellStart instanceof Function&&u.cellStart({row:f,col:p,data:E},this),a.call(this,new s(t,i,w[m[p]],F,E,f+2,j[m[p]]))}}return this.internal.__cell__.table_x=t,this.internal.__cell__.table_y=i,this};var h=function(t,e){var i=this.internal.__cell__.padding,n=this.internal.__cell__.table_font_size,r=this.internal.scaleFactor;return Object.keys(t).map((function(n){var r=t[n];return this.splitTextToSize(r.hasOwnProperty("text")?r.text:r,e[n]-i-i)}),this).map((function(t){return this.getLineHeightFactor()*t.length*n/r+i+i}),this).reduce((function(t,e){return Math.max(t,e)}),0)};t.setTableHeaderRow=function(t){r.call(this),this.internal.__cell__.tableHeaderRow=t},t.printHeaderRow=function(t,e){if(r.call(this),!this.internal.__cell__.tableHeaderRow)throw new Error("Property tableHeaderRow does not exist.");var n;if(i=!0,"function"==typeof this.internal.__cell__.headerFunction){var o=this.internal.__cell__.headerFunction(this,this.internal.__cell__.pages);this.internal.__cell__.lastCell=new s(o[0],o[1],o[2],o[3],void 0,-1)}this.setFont(void 0,"bold");for(var h=[],c=0;c<this.internal.__cell__.tableHeaderRow.length;c+=1){n=this.internal.__cell__.tableHeaderRow[c].clone(),e&&(n.y=this.internal.__cell__.margins.top||0,h.push(n)),n.lineNumber=t;var l=this.getTextColor();this.setTextColor(this.internal.__cell__.headerTextColor),this.setFillColor(this.internal.__cell__.headerBackgroundColor),a.call(this,n),this.setTextColor(l)}h.length>0&&this.setTableHeaderRow(h),this.setFont(void 0,"normal"),i=!1}}(At.API);var me={italic:["italic","oblique","normal"],oblique:["oblique","italic","normal"],normal:["normal","oblique","italic"]},ve=["ultra-condensed","extra-condensed","condensed","semi-condensed","normal","semi-expanded","expanded","extra-expanded","ultra-expanded"],be=ge(ve),ye=[100,200,300,400,500,600,700,800,900],we=ge(ye);function xe(t){var e=t.family.replace(/"|'/g,"").toLowerCase(),i=function(t){return me[t=t||"normal"]?t:"normal"}(t.style),n=function(t){return t?"number"==typeof t?t>=100&&t<=900&&t%100==0?t:400:/^\d00$/.test(t)?parseInt(t):"bold"===t?700:400:400}(t.weight),r=function(t){return"number"==typeof be[t=t||"normal"]?t:"normal"}(t.stretch);return{family:e,style:i,weight:n,stretch:r,src:t.src||[],ref:t.ref||{name:e,style:[r,i,n].join(" ")}}}function _e(t,e,i,n){var r;for(r=i;r>=0&&r<e.length;r+=n)if(t[e[r]])return t[e[r]];for(r=i;r>=0&&r<e.length;r-=n)if(t[e[r]])return t[e[r]]}var Se={"sans-serif":"helvetica",fixed:"courier",monospace:"courier",terminal:"courier",cursive:"times",fantasy:"times",serif:"times"},Ce={caption:"times",icon:"times",menu:"times","message-box":"times","small-caption":"times","status-bar":"times"};function Ae(t){return[t.stretch,t.style,t.weight,t.family].join(" ")}function Le(t){return t.trimLeft()}function Pe(t,e){for(var i=0;i<t.length;){if(t.charAt(i)===e)return[t.substring(0,i),t.substring(i+1)];i+=1}return null}function Te(t){var e=t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);return null===e?null:[e[0],t.substring(e[0].length)]}var Oe,ke,Ne,je=["times"];!function(t){var e,i,r,o,s,a,h,c,l,u=function(t){return t=t||{},this.isStrokeTransparent=t.isStrokeTransparent||!1,this.strokeOpacity=t.strokeOpacity||1,this.strokeStyle=t.strokeStyle||"#000000",this.fillStyle=t.fillStyle||"#000000",this.isFillTransparent=t.isFillTransparent||!1,this.fillOpacity=t.fillOpacity||1,this.font=t.font||"10px sans-serif",this.textBaseline=t.textBaseline||"alphabetic",this.textAlign=t.textAlign||"left",this.lineWidth=t.lineWidth||1,this.lineJoin=t.lineJoin||"miter",this.lineCap=t.lineCap||"butt",this.path=t.path||[],this.transform=void 0!==t.transform?t.transform.clone():new c,this.globalCompositeOperation=t.globalCompositeOperation||"normal",this.globalAlpha=t.globalAlpha||1,this.clip_path=t.clip_path||[],this.currentPoint=t.currentPoint||new a,this.miterLimit=t.miterLimit||10,this.lastPoint=t.lastPoint||new a,this.lineDashOffset=t.lineDashOffset||0,this.lineDash=t.lineDash||[],this.margin=t.margin||[0,0,0,0],this.prevPageLastElemOffset=t.prevPageLastElemOffset||0,this.ignoreClearRect="boolean"!=typeof t.ignoreClearRect||t.ignoreClearRect,this};t.events.push(["initialized",function(){this.context2d=new f(this),e=this.internal.f2,i=this.internal.getCoordinateString,r=this.internal.getVerticalCoordinateString,o=this.internal.getHorizontalCoordinate,s=this.internal.getVerticalCoordinate,a=this.internal.Point,h=this.internal.Rectangle,c=this.internal.Matrix,l=new u}]);var f=function(t){Object.defineProperty(this,"canvas",{get:function(){return{parentNode:!1,style:!1}}});var e=t;Object.defineProperty(this,"pdf",{get:function(){return e}});var i=!1;Object.defineProperty(this,"pageWrapXEnabled",{get:function(){return i},set:function(t){i=Boolean(t)}});var n=!1;Object.defineProperty(this,"pageWrapYEnabled",{get:function(){return n},set:function(t){n=Boolean(t)}});var r=0;Object.defineProperty(this,"posX",{get:function(){return r},set:function(t){isNaN(t)||(r=t)}});var o=0;Object.defineProperty(this,"posY",{get:function(){return o},set:function(t){isNaN(t)||(o=t)}}),Object.defineProperty(this,"margin",{get:function(){return l.margin},set:function(t){var e;"number"==typeof t?e=[t,t,t,t]:((e=new Array(4))[0]=t[0],e[1]=t.length>=2?t[1]:e[0],e[2]=t.length>=3?t[2]:e[0],e[3]=t.length>=4?t[3]:e[1]),l.margin=e}});var s=!1;Object.defineProperty(this,"autoPaging",{get:function(){return s},set:function(t){s=t}});var a=0;Object.defineProperty(this,"lastBreak",{get:function(){return a},set:function(t){a=t}});var h=[];Object.defineProperty(this,"pageBreaks",{get:function(){return h},set:function(t){h=t}}),Object.defineProperty(this,"ctx",{get:function(){return l},set:function(t){t instanceof u&&(l=t)}}),Object.defineProperty(this,"path",{get:function(){return l.path},set:function(t){l.path=t}});var c=[];Object.defineProperty(this,"ctxStack",{get:function(){return c},set:function(t){c=t}}),Object.defineProperty(this,"fillStyle",{get:function(){return this.ctx.fillStyle},set:function(t){var e;e=d(t),this.ctx.fillStyle=e.style,this.ctx.isFillTransparent=0===e.a,this.ctx.fillOpacity=e.a,this.pdf.setFillColor(e.r,e.g,e.b,{a:e.a}),this.pdf.setTextColor(e.r,e.g,e.b,{a:e.a})}}),Object.defineProperty(this,"strokeStyle",{get:function(){return this.ctx.strokeStyle},set:function(t){var e=d(t);this.ctx.strokeStyle=e.style,this.ctx.isStrokeTransparent=0===e.a,this.ctx.strokeOpacity=e.a,0===e.a?this.pdf.setDrawColor(255,255,255):(e.a,this.pdf.setDrawColor(e.r,e.g,e.b))}}),Object.defineProperty(this,"lineCap",{get:function(){return this.ctx.lineCap},set:function(t){-1!==["butt","round","square"].indexOf(t)&&(this.ctx.lineCap=t,this.pdf.setLineCap(t))}}),Object.defineProperty(this,"lineWidth",{get:function(){return this.ctx.lineWidth},set:function(t){isNaN(t)||(this.ctx.lineWidth=t,this.pdf.setLineWidth(t))}}),Object.defineProperty(this,"lineJoin",{get:function(){return this.ctx.lineJoin},set:function(t){-1!==["bevel","round","miter"].indexOf(t)&&(this.ctx.lineJoin=t,this.pdf.setLineJoin(t))}}),Object.defineProperty(this,"miterLimit",{get:function(){return this.ctx.miterLimit},set:function(t){isNaN(t)||(this.ctx.miterLimit=t,this.pdf.setMiterLimit(t))}}),Object.defineProperty(this,"textBaseline",{get:function(){return this.ctx.textBaseline},set:function(t){this.ctx.textBaseline=t}}),Object.defineProperty(this,"textAlign",{get:function(){return this.ctx.textAlign},set:function(t){-1!==["right","end","center","left","start"].indexOf(t)&&(this.ctx.textAlign=t)}});var f=null;function p(t,e){if(null===f){var i=function(t){var e=[];return Object.keys(t).forEach((function(i){t[i].forEach((function(t){var n=null;switch(t){case"bold":n={family:i,weight:"bold"};break;case"italic":n={family:i,style:"italic"};break;case"bolditalic":n={family:i,weight:"bold",style:"italic"};break;case"":case"normal":n={family:i}}null!==n&&(n.ref={name:i,style:t},e.push(n))}))})),e}(t.getFontList());f=function(t){for(var e={},i=0;i<t.length;++i){var n=xe(t[i]),r=n.family,o=n.stretch,s=n.style,a=n.weight;e[r]=e[r]||{},e[r][o]=e[r][o]||{},e[r][o][s]=e[r][o][s]||{},e[r][o][s][a]=n}return e}(i.concat(e))}return f}var g=null;Object.defineProperty(this,"fontFaces",{get:function(){return g},set:function(t){f=null,g=t}}),Object.defineProperty(this,"font",{get:function(){return this.ctx.font},set:function(t){var e;if(this.ctx.font=t,null!==(e=/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))){var i=e[1],n=(e[2],e[3]),r=e[4],o=(e[5],e[6]),s=/^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(r)[2];r="px"===s?Math.floor(parseFloat(r)*this.pdf.internal.scaleFactor):"em"===s?Math.floor(parseFloat(r)*this.pdf.getFontSize()):Math.floor(parseFloat(r)*this.pdf.internal.scaleFactor),this.pdf.setFontSize(r);var a=function(t){var e,i,n=[],r=t.trim();if(""===r)return je;if(r in Ce)return[Ce[r]];for(;""!==r;){switch(i=null,e=(r=Le(r)).charAt(0)){case'"':case"'":i=Pe(r.substring(1),e);break;default:i=Te(r)}if(null===i)return je;if(n.push(i[0]),""!==(r=Le(i[1]))&&","!==r.charAt(0))return je;r=r.replace(/^,/,"")}return n}(o);if(this.fontFaces){var h=function(t,e,i){for(var n=(i=i||{}).defaultFontFamily||"times",r=Object.assign({},Se,i.genericFontFamilies||{}),o=null,s=null,a=0;a<e.length;++a)if(r[(o=xe(e[a])).family]&&(o.family=r[o.family]),t.hasOwnProperty(o.family)){s=t[o.family];break}if(!(s=s||t[n]))throw new Error("Could not find a font-family for the rule '"+Ae(o)+"' and default family '"+n+"'.");if(s=function(t,e){if(e[t])return e[t];var i=be[t],n=i<=be.normal?-1:1,r=_e(e,ve,i,n);if(!r)throw new Error("Could not find a matching font-stretch value for "+t);return r}(o.stretch,s),s=function(t,e){if(e[t])return e[t];for(var i=me[t],n=0;n<i.length;++n)if(e[i[n]])return e[i[n]];throw new Error("Could not find a matching font-style for "+t)}(o.style,s),!(s=function(t,e){if(e[t])return e[t];if(400===t&&e[500])return e[500];if(500===t&&e[400])return e[400];var i=we[t],n=_e(e,ye,i,t<400?-1:1);if(!n)throw new Error("Could not find a matching font-weight for value "+t);return n}(o.weight,s)))throw new Error("Failed to resolve a font for the rule '"+Ae(o)+"'.");return s}(p(this.pdf,this.fontFaces),a.map((function(t){return{family:t,stretch:"normal",weight:n,style:i}})));this.pdf.setFont(h.ref.name,h.ref.style)}else{var c="";("bold"===n||parseInt(n,10)>=700||"bold"===i)&&(c="bold"),"italic"===i&&(c+="italic"),0===c.length&&(c="normal");for(var l="",u={arial:"Helvetica",Arial:"Helvetica",verdana:"Helvetica",Verdana:"Helvetica",helvetica:"Helvetica",Helvetica:"Helvetica","sans-serif":"Helvetica",fixed:"Courier",monospace:"Courier",terminal:"Courier",cursive:"Times",fantasy:"Times",serif:"Times"},f=0;f<a.length;f++){if(void 0!==this.pdf.internal.getFont(a[f],c,{noFallback:!0,disableWarning:!0})){l=a[f];break}if("bolditalic"===c&&void 0!==this.pdf.internal.getFont(a[f],"bold",{noFallback:!0,disableWarning:!0}))l=a[f],c="bold";else if(void 0!==this.pdf.internal.getFont(a[f],"normal",{noFallback:!0,disableWarning:!0})){l=a[f],c="normal";break}}if(""===l)for(var d=0;d<a.length;d++)if(u[a[d]]){l=u[a[d]];break}l=""===l?"Times":l,this.pdf.setFont(l,c)}}}}),Object.defineProperty(this,"globalCompositeOperation",{get:function(){return this.ctx.globalCompositeOperation},set:function(t){this.ctx.globalCompositeOperation=t}}),Object.defineProperty(this,"globalAlpha",{get:function(){return this.ctx.globalAlpha},set:function(t){this.ctx.globalAlpha=t}}),Object.defineProperty(this,"lineDashOffset",{get:function(){return this.ctx.lineDashOffset},set:function(t){this.ctx.lineDashOffset=t,B.call(this)}}),Object.defineProperty(this,"lineDash",{get:function(){return this.ctx.lineDash},set:function(t){this.ctx.lineDash=t,B.call(this)}}),Object.defineProperty(this,"ignoreClearRect",{get:function(){return this.ctx.ignoreClearRect},set:function(t){this.ctx.ignoreClearRect=Boolean(t)}})};f.prototype.setLineDash=function(t){this.lineDash=t},f.prototype.getLineDash=function(){return this.lineDash.length%2?this.lineDash.concat(this.lineDash):this.lineDash.slice()},f.prototype.fill=function(){x.call(this,"fill",!1)},f.prototype.stroke=function(){x.call(this,"stroke",!1)},f.prototype.beginPath=function(){this.path=[{type:"begin"}]},f.prototype.moveTo=function(t,e){if(isNaN(t)||isNaN(e))throw Y.error("jsPDF.context2d.moveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.moveTo");var i=this.ctx.transform.applyToPoint(new a(t,e));this.path.push({type:"mt",x:i.x,y:i.y}),this.ctx.lastPoint=new a(t,e)},f.prototype.closePath=function(){var t=new a(0,0),e=0;for(e=this.path.length-1;-1!==e;e--)if("begin"===this.path[e].type&&"object"===n(this.path[e+1])&&"number"==typeof this.path[e+1].x){t=new a(this.path[e+1].x,this.path[e+1].y);break}this.path.push({type:"close"}),this.ctx.lastPoint=new a(t.x,t.y)},f.prototype.lineTo=function(t,e){if(isNaN(t)||isNaN(e))throw Y.error("jsPDF.context2d.lineTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.lineTo");var i=this.ctx.transform.applyToPoint(new a(t,e));this.path.push({type:"lt",x:i.x,y:i.y}),this.ctx.lastPoint=new a(i.x,i.y)},f.prototype.clip=function(){this.ctx.clip_path=JSON.parse(JSON.stringify(this.path)),x.call(this,null,!0)},f.prototype.quadraticCurveTo=function(t,e,i,n){if(isNaN(i)||isNaN(n)||isNaN(t)||isNaN(e))throw Y.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");var r=this.ctx.transform.applyToPoint(new a(i,n)),o=this.ctx.transform.applyToPoint(new a(t,e));this.path.push({type:"qct",x1:o.x,y1:o.y,x:r.x,y:r.y}),this.ctx.lastPoint=new a(r.x,r.y)},f.prototype.bezierCurveTo=function(t,e,i,n,r,o){if(isNaN(r)||isNaN(o)||isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n))throw Y.error("jsPDF.context2d.bezierCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");var s=this.ctx.transform.applyToPoint(new a(r,o)),h=this.ctx.transform.applyToPoint(new a(t,e)),c=this.ctx.transform.applyToPoint(new a(i,n));this.path.push({type:"bct",x1:h.x,y1:h.y,x2:c.x,y2:c.y,x:s.x,y:s.y}),this.ctx.lastPoint=new a(s.x,s.y)},f.prototype.arc=function(t,e,i,n,r,o){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n)||isNaN(r))throw Y.error("jsPDF.context2d.arc: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.arc");if(o=Boolean(o),!this.ctx.transform.isIdentity){var s=this.ctx.transform.applyToPoint(new a(t,e));t=s.x,e=s.y;var h=this.ctx.transform.applyToPoint(new a(0,i)),c=this.ctx.transform.applyToPoint(new a(0,0));i=Math.sqrt(Math.pow(h.x-c.x,2)+Math.pow(h.y-c.y,2))}Math.abs(r-n)>=2*Math.PI&&(n=0,r=2*Math.PI),this.path.push({type:"arc",x:t,y:e,radius:i,startAngle:n,endAngle:r,counterclockwise:o})},f.prototype.arcTo=function(t,e,i,n,r){throw new Error("arcTo not implemented.")},f.prototype.rect=function(t,e,i,n){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n))throw Y.error("jsPDF.context2d.rect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rect");this.moveTo(t,e),this.lineTo(t+i,e),this.lineTo(t+i,e+n),this.lineTo(t,e+n),this.lineTo(t,e),this.lineTo(t+i,e),this.lineTo(t,e)},f.prototype.fillRect=function(t,e,i,n){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n))throw Y.error("jsPDF.context2d.fillRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillRect");if(!p.call(this)){var r={};"butt"!==this.lineCap&&(r.lineCap=this.lineCap,this.lineCap="butt"),"miter"!==this.lineJoin&&(r.lineJoin=this.lineJoin,this.lineJoin="miter"),this.beginPath(),this.rect(t,e,i,n),this.fill(),r.hasOwnProperty("lineCap")&&(this.lineCap=r.lineCap),r.hasOwnProperty("lineJoin")&&(this.lineJoin=r.lineJoin)}},f.prototype.strokeRect=function(t,e,i,n){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n))throw Y.error("jsPDF.context2d.strokeRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");g.call(this)||(this.beginPath(),this.rect(t,e,i,n),this.stroke())},f.prototype.clearRect=function(t,e,i,n){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n))throw Y.error("jsPDF.context2d.clearRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.clearRect");this.ignoreClearRect||(this.fillStyle="#ffffff",this.fillRect(t,e,i,n))},f.prototype.save=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,i=0;i<this.pdf.internal.getNumberOfPages();i++)this.pdf.setPage(i+1),this.pdf.internal.out("q");if(this.pdf.setPage(e),t){this.ctx.fontSize=this.pdf.internal.getFontSize();var n=new u(this.ctx);this.ctxStack.push(this.ctx),this.ctx=n}},f.prototype.restore=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,i=0;i<this.pdf.internal.getNumberOfPages();i++)this.pdf.setPage(i+1),this.pdf.internal.out("Q");this.pdf.setPage(e),t&&0!==this.ctxStack.length&&(this.ctx=this.ctxStack.pop(),this.fillStyle=this.ctx.fillStyle,this.strokeStyle=this.ctx.strokeStyle,this.font=this.ctx.font,this.lineCap=this.ctx.lineCap,this.lineWidth=this.ctx.lineWidth,this.lineJoin=this.ctx.lineJoin,this.lineDash=this.ctx.lineDash,this.lineDashOffset=this.ctx.lineDashOffset)},f.prototype.toDataURL=function(){throw new Error("toDataUrl not implemented.")};var d=function(t){var e,i,n,r;if(!0===t.isCanvasGradient&&(t=t.getColor()),!t)return{r:0,g:0,b:0,a:0,style:t};if(/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t))e=0,i=0,n=0,r=0;else{var o=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);if(null!==o)e=parseInt(o[1]),i=parseInt(o[2]),n=parseInt(o[3]),r=1;else if(null!==(o=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t)))e=parseInt(o[1]),i=parseInt(o[2]),n=parseInt(o[3]),r=parseFloat(o[4]);else{if(r=1,"string"==typeof t&&"#"!==t.charAt(0)){var s=new et(t);t=s.ok?s.toHex():"#000000"}4===t.length?(e=t.substring(1,2),e+=e,i=t.substring(2,3),i+=i,n=t.substring(3,4),n+=n):(e=t.substring(1,3),i=t.substring(3,5),n=t.substring(5,7)),e=parseInt(e,16),i=parseInt(i,16),n=parseInt(n,16)}}return{r:e,g:i,b:n,a:r,style:t}},p=function(){return this.ctx.isFillTransparent||0==this.globalAlpha},g=function(){return Boolean(this.ctx.isStrokeTransparent||0==this.globalAlpha)};f.prototype.fillText=function(t,e,i,n){if(isNaN(e)||isNaN(i)||"string"!=typeof t)throw Y.error("jsPDF.context2d.fillText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillText");if(n=isNaN(n)?void 0:n,!p.call(this)){var r=I(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;O.call(this,{text:t,x:e,y:i,scale:o,angle:r,align:this.textAlign,maxWidth:n})}},f.prototype.strokeText=function(t,e,i,n){if(isNaN(e)||isNaN(i)||"string"!=typeof t)throw Y.error("jsPDF.context2d.strokeText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeText");if(!g.call(this)){n=isNaN(n)?void 0:n;var r=I(this.ctx.transform.rotation),o=this.ctx.transform.scaleX;O.call(this,{text:t,x:e,y:i,scale:o,renderingMode:"stroke",angle:r,align:this.textAlign,maxWidth:n})}},f.prototype.measureText=function(t){if("string"!=typeof t)throw Y.error("jsPDF.context2d.measureText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.measureText");var e=this.pdf,i=this.pdf.internal.scaleFactor,n=e.internal.getFontSize(),r=e.getStringUnitWidth(t)*n/e.internal.scaleFactor,o=function(t){var e=(t=t||{}).width||0;return Object.defineProperty(this,"width",{get:function(){return e}}),this};return new o({width:r*=Math.round(96*i/72*1e4)/1e4})},f.prototype.scale=function(t,e){if(isNaN(t)||isNaN(e))throw Y.error("jsPDF.context2d.scale: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.scale");var i=new c(t,0,0,e,0,0);this.ctx.transform=this.ctx.transform.multiply(i)},f.prototype.rotate=function(t){if(isNaN(t))throw Y.error("jsPDF.context2d.rotate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rotate");var e=new c(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t),0,0);this.ctx.transform=this.ctx.transform.multiply(e)},f.prototype.translate=function(t,e){if(isNaN(t)||isNaN(e))throw Y.error("jsPDF.context2d.translate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.translate");var i=new c(1,0,0,1,t,e);this.ctx.transform=this.ctx.transform.multiply(i)},f.prototype.transform=function(t,e,i,n,r,o){if(isNaN(t)||isNaN(e)||isNaN(i)||isNaN(n)||isNaN(r)||isNaN(o))throw Y.error("jsPDF.context2d.transform: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.transform");var s=new c(t,e,i,n,r,o);this.ctx.transform=this.ctx.transform.multiply(s)},f.prototype.setTransform=function(t,e,i,n,r,o){t=isNaN(t)?1:t,e=isNaN(e)?0:e,i=isNaN(i)?0:i,n=isNaN(n)?1:n,r=isNaN(r)?0:r,o=isNaN(o)?0:o,this.ctx.transform=new c(t,e,i,n,r,o)};var m=function(){return this.margin[0]>0||this.margin[1]>0||this.margin[2]>0||this.margin[3]>0};f.prototype.drawImage=function(t,e,i,n,r,o,s,a,l){var u=this.pdf.getImageProperties(t),f=1,d=1,p=1,g=1;void 0!==n&&void 0!==a&&(p=a/n,g=l/r,f=u.width/n*a/n,d=u.height/r*l/r),void 0===o&&(o=e,s=i,e=0,i=0),void 0!==n&&void 0===a&&(a=n,l=r),void 0===n&&void 0===a&&(a=u.width,l=u.height);for(var b,x=this.ctx.transform.decompose(),S=I(x.rotate.shx),C=new c,A=(C=(C=(C=C.multiply(x.translate)).multiply(x.skew)).multiply(x.scale)).applyToRectangle(new h(o-e*p,s-i*g,n*f,r*d)),L=v.call(this,A),P=[],T=0;T<L.length;T+=1)-1===P.indexOf(L[T])&&P.push(L[T]);if(w(P),this.autoPaging)for(var O=P[0],k=P[P.length-1],N=O;N<k+1;N++){this.pdf.setPage(N);var j=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],F=1===N?this.posY+this.margin[0]:this.margin[0],E=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],M=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],D=1===N?0:E+(N-2)*M;if(0!==this.ctx.clip_path.length){var B=this.path;b=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=y(b,this.posX+this.margin[3],-D+F+this.ctx.prevPageLastElemOffset),_.call(this,"fill",!0),this.path=B}var R=JSON.parse(JSON.stringify(A));R=y([R],this.posX+this.margin[3],-D+F+this.ctx.prevPageLastElemOffset)[0];var z=(N>O||N<k)&&m.call(this);z&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],j,M,null).clip().discardPath()),this.pdf.addImage(t,"JPEG",R.x,R.y,R.w,R.h,null,null,S),z&&this.pdf.restoreGraphicsState()}else this.pdf.addImage(t,"JPEG",A.x,A.y,A.w,A.h,null,null,S)};var v=function(t,e,i){var n=[];e=e||this.pdf.internal.pageSize.width,i=i||this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2];var r=this.posY+this.ctx.prevPageLastElemOffset;switch(t.type){default:case"mt":case"lt":n.push(Math.floor((t.y+r)/i)+1);break;case"arc":n.push(Math.floor((t.y+r-t.radius)/i)+1),n.push(Math.floor((t.y+r+t.radius)/i)+1);break;case"qct":var o=M(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x,t.y);n.push(Math.floor((o.y+r)/i)+1),n.push(Math.floor((o.y+o.h+r)/i)+1);break;case"bct":var s=D(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x2,t.y2,t.x,t.y);n.push(Math.floor((s.y+r)/i)+1),n.push(Math.floor((s.y+s.h+r)/i)+1);break;case"rect":n.push(Math.floor((t.y+r)/i)+1),n.push(Math.floor((t.y+t.h+r)/i)+1)}for(var a=0;a<n.length;a+=1)for(;this.pdf.internal.getNumberOfPages()<n[a];)b.call(this);return n},b=function(){var t=this.fillStyle,e=this.strokeStyle,i=this.font,n=this.lineCap,r=this.lineWidth,o=this.lineJoin;this.pdf.addPage(),this.fillStyle=t,this.strokeStyle=e,this.font=i,this.lineCap=n,this.lineWidth=r,this.lineJoin=o},y=function(t,e,i){for(var n=0;n<t.length;n++)switch(t[n].type){case"bct":t[n].x2+=e,t[n].y2+=i;case"qct":t[n].x1+=e,t[n].y1+=i;default:t[n].x+=e,t[n].y+=i}return t},w=function(t){return t.sort((function(t,e){return t-e}))},x=function(t,e){for(var i,n,r=this.fillStyle,o=this.strokeStyle,s=this.lineCap,a=this.lineWidth,h=Math.abs(a*this.ctx.transform.scaleX),c=this.lineJoin,l=JSON.parse(JSON.stringify(this.path)),u=JSON.parse(JSON.stringify(this.path)),f=[],d=0;d<u.length;d++)if(void 0!==u[d].x)for(var p=v.call(this,u[d]),g=0;g<p.length;g+=1)-1===f.indexOf(p[g])&&f.push(p[g]);for(var x=0;x<f.length;x++)for(;this.pdf.internal.getNumberOfPages()<f[x];)b.call(this);if(w(f),this.autoPaging)for(var S=f[0],C=f[f.length-1],A=S;A<C+1;A++){this.pdf.setPage(A),this.fillStyle=r,this.strokeStyle=o,this.lineCap=s,this.lineWidth=h,this.lineJoin=c;var L=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],P=1===A?this.posY+this.margin[0]:this.margin[0],T=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],O=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],k=1===A?0:T+(A-2)*O;if(0!==this.ctx.clip_path.length){var N=this.path;i=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=y(i,this.posX+this.margin[3],-k+P+this.ctx.prevPageLastElemOffset),_.call(this,t,!0),this.path=N}if(n=JSON.parse(JSON.stringify(l)),this.path=y(n,this.posX+this.margin[3],-k+P+this.ctx.prevPageLastElemOffset),!1===e||0===A){var j=(A>S||A<C)&&m.call(this);j&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],L,O,null).clip().discardPath()),_.call(this,t,e),j&&this.pdf.restoreGraphicsState()}this.lineWidth=a}else this.lineWidth=h,_.call(this,t,e),this.lineWidth=a;this.path=l},_=function(t,e){if(("stroke"!==t||e||!g.call(this))&&("stroke"===t||e||!p.call(this))){for(var i,n,r=[],o=this.path,s=0;s<o.length;s++){var a=o[s];switch(a.type){case"begin":r.push({begin:!0});break;case"close":r.push({close:!0});break;case"mt":r.push({start:a,deltas:[],abs:[]});break;case"lt":var h=r.length;if(o[s-1]&&!isNaN(o[s-1].x)&&(i=[a.x-o[s-1].x,a.y-o[s-1].y],h>0))for(;h>=0;h--)if(!0!==r[h-1].close&&!0!==r[h-1].begin){r[h-1].deltas.push(i),r[h-1].abs.push(a);break}break;case"bct":i=[a.x1-o[s-1].x,a.y1-o[s-1].y,a.x2-o[s-1].x,a.y2-o[s-1].y,a.x-o[s-1].x,a.y-o[s-1].y],r[r.length-1].deltas.push(i);break;case"qct":var c=o[s-1].x+2/3*(a.x1-o[s-1].x),l=o[s-1].y+2/3*(a.y1-o[s-1].y),u=a.x+2/3*(a.x1-a.x),f=a.y+2/3*(a.y1-a.y),d=a.x,m=a.y;i=[c-o[s-1].x,l-o[s-1].y,u-o[s-1].x,f-o[s-1].y,d-o[s-1].x,m-o[s-1].y],r[r.length-1].deltas.push(i);break;case"arc":r.push({deltas:[],abs:[],arc:!0}),Array.isArray(r[r.length-1].abs)&&r[r.length-1].abs.push(a)}}n=e?null:"stroke"===t?"stroke":"fill";for(var v=!1,b=0;b<r.length;b++)if(r[b].arc)for(var y=r[b].abs,w=0;w<y.length;w++){var x=y[w];"arc"===x.type?A.call(this,x.x,x.y,x.radius,x.startAngle,x.endAngle,x.counterclockwise,void 0,e,!v):k.call(this,x.x,x.y),v=!0}else if(!0===r[b].close)this.pdf.internal.out("h"),v=!1;else if(!0!==r[b].begin){var _=r[b].start.x,S=r[b].start.y;N.call(this,r[b].deltas,_,S),v=!0}n&&L.call(this,n),e&&P.call(this)}},S=function(t){var e=this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor,i=e*(this.pdf.internal.getLineHeightFactor()-1);switch(this.ctx.textBaseline){case"bottom":return t-i;case"top":return t+e-i;case"hanging":return t+e-2*i;case"middle":return t+e/2-i;default:return t}},C=function(t){return t+this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor*(this.pdf.internal.getLineHeightFactor()-1)};f.prototype.createLinearGradient=function(){var t=function(){};return t.colorStops=[],t.addColorStop=function(t,e){this.colorStops.push([t,e])},t.getColor=function(){return 0===this.colorStops.length?"#000000":this.colorStops[0][1]},t.isCanvasGradient=!0,t},f.prototype.createPattern=function(){return this.createLinearGradient()},f.prototype.createRadialGradient=function(){return this.createLinearGradient()};var A=function(t,e,i,n,r,o,s,a,h){for(var c=F.call(this,i,n,r,o),l=0;l<c.length;l++){var u=c[l];0===l&&(h?T.call(this,u.x1+t,u.y1+e):k.call(this,u.x1+t,u.y1+e)),j.call(this,t,e,u.x2,u.y2,u.x3,u.y3,u.x4,u.y4)}a?P.call(this):L.call(this,s)},L=function(t){switch(t){case"stroke":this.pdf.internal.out("S");break;case"fill":this.pdf.internal.out("f")}},P=function(){this.pdf.clip(),this.pdf.discardPath()},T=function(t,e){this.pdf.internal.out(i(t)+" "+r(e)+" m")},O=function(t){var e;switch(t.align){case"right":case"end":e="right";break;case"center":e="center";break;default:e="left"}var i=this.pdf.getTextDimensions(t.text),n=S.call(this,t.y),r=C.call(this,n)-i.h,o=this.ctx.transform.applyToPoint(new a(t.x,n)),s=this.ctx.transform.decompose(),l=new c;l=(l=(l=l.multiply(s.translate)).multiply(s.skew)).multiply(s.scale);for(var u,f,d,p=this.ctx.transform.applyToRectangle(new h(t.x,n,i.w,i.h)),g=l.applyToRectangle(new h(t.x,r,i.w,i.h)),b=v.call(this,g),x=[],A=0;A<b.length;A+=1)-1===x.indexOf(b[A])&&x.push(b[A]);if(w(x),this.autoPaging)for(var L=x[0],P=x[x.length-1],T=L;T<P+1;T++){this.pdf.setPage(T);var O=1===T?this.posY+this.margin[0]:this.margin[0],k=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],N=this.pdf.internal.pageSize.height-this.margin[2],j=N-this.margin[0],F=this.pdf.internal.pageSize.width-this.margin[1],E=F-this.margin[3],I=1===T?0:k+(T-2)*j;if(0!==this.ctx.clip_path.length){var M=this.path;u=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=y(u,this.posX+this.margin[3],-1*I+O),_.call(this,"fill",!0),this.path=M}var D=y([JSON.parse(JSON.stringify(g))],this.posX+this.margin[3],-I+O+this.ctx.prevPageLastElemOffset)[0];t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale);var B="text"!==this.autoPaging;if(B||D.y+D.h<=N){if(B||D.y>=O&&D.x<=F){var R=B?t.text:this.pdf.splitTextToSize(t.text,t.maxWidth||F-D.x)[0],z=y([JSON.parse(JSON.stringify(p))],this.posX+this.margin[3],-I+O+this.ctx.prevPageLastElemOffset)[0],q=B&&(T>L||T<P)&&m.call(this);q&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],E,j,null).clip().discardPath()),this.pdf.text(R,z.x,z.y,{angle:t.angle,align:e,renderingMode:t.renderingMode}),q&&this.pdf.restoreGraphicsState()}}else D.y<N&&(this.ctx.prevPageLastElemOffset+=N-D.y);t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)}else t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale),this.pdf.text(t.text,o.x+this.posX,o.y+this.posY,{angle:t.angle,align:e,renderingMode:t.renderingMode,maxWidth:t.maxWidth}),t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)},k=function(t,e,n,o){n=n||0,o=o||0,this.pdf.internal.out(i(t+n)+" "+r(e+o)+" l")},N=function(t,e,i){return this.pdf.lines(t,e,i,null,null)},j=function(t,i,n,r,a,h,c,l){this.pdf.internal.out([e(o(n+t)),e(s(r+i)),e(o(a+t)),e(s(h+i)),e(o(c+t)),e(s(l+i)),"c"].join(" "))},F=function(t,e,i,n){for(var r=2*Math.PI,o=Math.PI/2;e>i;)e-=r;var s=Math.abs(i-e);s<r&&n&&(s=r-s);for(var a=[],h=n?-1:1,c=e;s>1e-5;){var l=c+h*Math.min(s,o);a.push(E.call(this,t,c,l)),s-=Math.abs(l-c),c=l}return a},E=function(t,e,i){var n=(i-e)/2,r=t*Math.cos(n),o=t*Math.sin(n),s=r,a=-o,h=s*s+a*a,c=h+s*r+a*o,l=4/3*(Math.sqrt(2*h*c)-c)/(s*o-a*r),u=s-l*a,f=a+l*s,d=u,p=-f,g=n+e,m=Math.cos(g),v=Math.sin(g);return{x1:t*Math.cos(e),y1:t*Math.sin(e),x2:u*m-f*v,y2:u*v+f*m,x3:d*m-p*v,y3:d*v+p*m,x4:t*Math.cos(i),y4:t*Math.sin(i)}},I=function(t){return 180*t/Math.PI},M=function(t,e,i,n,r,o){var s=t+.5*(i-t),a=e+.5*(n-e),c=r+.5*(i-r),l=o+.5*(n-o),u=Math.min(t,r,s,c),f=Math.max(t,r,s,c),d=Math.min(e,o,a,l),p=Math.max(e,o,a,l);return new h(u,d,f-u,p-d)},D=function(t,e,i,n,r,o,s,a){var c,l,u,f,d,p,g,m,v,b,y,w,x,_,S=i-t,C=n-e,A=r-i,L=o-n,P=s-r,T=a-o;for(l=0;l<41;l++)v=(g=(u=t+(c=l/40)*S)+c*((d=i+c*A)-u))+c*(d+c*(r+c*P-d)-g),b=(m=(f=e+c*C)+c*((p=n+c*L)-f))+c*(p+c*(o+c*T-p)-m),0==l?(y=v,w=b,x=v,_=b):(y=Math.min(y,v),w=Math.min(w,b),x=Math.max(x,v),_=Math.max(_,b));return new h(Math.round(y),Math.round(w),Math.round(x-y),Math.round(_-w))},B=function(){if(this.prevLineDash||this.ctx.lineDash.length||this.ctx.lineDashOffset){var t,e,i=(t=this.ctx.lineDash,e=this.ctx.lineDashOffset,JSON.stringify({lineDash:t,lineDashOffset:e}));this.prevLineDash!==i&&(this.pdf.setLineDash(this.ctx.lineDash,this.ctx.lineDashOffset),this.prevLineDash=i)}}}(At.API),function(t){var e=function(t){var e,i,n,r,o,s,a,h,c,l;for(/[^\x00-\xFF]/.test(t),i=[],n=0,r=(t+=e="\0\0\0\0".slice(t.length%4||4)).length;r>n;n+=4)0!==(o=(t.charCodeAt(n)<<24)+(t.charCodeAt(n+1)<<16)+(t.charCodeAt(n+2)<<8)+t.charCodeAt(n+3))?(s=(o=((o=((o=((o=(o-(l=o%85))/85)-(c=o%85))/85)-(h=o%85))/85)-(a=o%85))/85)%85,i.push(s+33,a+33,h+33,c+33,l+33)):i.push(122);return function(t,e){for(var i=e;i>0;i--)t.pop()}(i,e.length),String.fromCharCode.apply(String,i)+"~>"},i=function(t){var e,i,n,r,o,s=String,a="length",h=255,c="charCodeAt",l="slice",u="replace";for(t[l](-2),t=t[l](0,-2)[u](/\s/g,"")[u]("z","!!!!!"),n=[],r=0,o=(t+=e="uuuuu"[l](t[a]%5||5))[a];o>r;r+=5)i=52200625*(t[c](r)-33)+614125*(t[c](r+1)-33)+7225*(t[c](r+2)-33)+85*(t[c](r+3)-33)+(t[c](r+4)-33),n.push(h&i>>24,h&i>>16,h&i>>8,h&i);return function(t,e){for(var i=e;i>0;i--)t.pop()}(n,e[a]),s.fromCharCode.apply(s,n)},n=function(t){var e=new RegExp(/^([0-9A-Fa-f]{2})+$/);if(-1!==(t=t.replace(/\s/g,"")).indexOf(">")&&(t=t.substr(0,t.indexOf(">"))),t.length%2&&(t+="0"),!1===e.test(t))return"";for(var i="",n=0;n<t.length;n+=2)i+=String.fromCharCode("0x"+(t[n]+t[n+1]));return i},r=function(t){for(var e=new Uint8Array(t.length),i=t.length;i--;)e[i]=t.charCodeAt(i);return(e=W(e)).reduce((function(t,e){return t+String.fromCharCode(e)}),"")};t.processDataByFilters=function(t,o){var s=0,a=t||"",h=[];for("string"==typeof(o=o||[])&&(o=[o]),s=0;s<o.length;s+=1)switch(o[s]){case"ASCII85Decode":case"/ASCII85Decode":a=i(a),h.push("/ASCII85Encode");break;case"ASCII85Encode":case"/ASCII85Encode":a=e(a),h.push("/ASCII85Decode");break;case"ASCIIHexDecode":case"/ASCIIHexDecode":a=n(a),h.push("/ASCIIHexEncode");break;case"ASCIIHexEncode":case"/ASCIIHexEncode":a=a.split("").map((function(t){return("0"+t.charCodeAt().toString(16)).slice(-2)})).join("")+">",h.push("/ASCIIHexDecode");break;case"FlateEncode":case"/FlateEncode":a=r(a),h.push("/FlateDecode");break;default:throw new Error('The filter: "'+o[s]+'" is not implemented')}return{data:a,reverseChain:h.reverse().join(" ")}}}(At.API),function(t){t.loadFile=function(t,e,i){return function(t,e,i){e=!1!==e,i="function"==typeof i?i:function(){};var n=void 0;try{n=function(t,e,i){var n=new XMLHttpRequest,r=0,o=function(t){var e=t.length,i=[],n=String.fromCharCode;for(r=0;r<e;r+=1)i.push(n(255&t.charCodeAt(r)));return i.join("")};if(n.open("GET",t,!e),n.overrideMimeType("text/plain; charset=x-user-defined"),!1===e&&(n.onload=function(){200===n.status?i(o(this.responseText)):i(void 0)}),n.send(null),e&&200===n.status)return o(n.responseText)}(t,e,i)}catch(t){}return n}(t,e,i)},t.loadImageFile=t.loadFile}(At.API),function(t){function e(){return(G.html2canvas?V.resolve(G.html2canvas):i.e(120).then(i.t.bind(i,1120,23))).catch((function(t){return V.reject(new Error("Could not load html2canvas: "+t))})).then((function(t){return t.default?t.default:t}))}function r(){return(G.DOMPurify?V.resolve(G.DOMPurify):i.e(856).then(i.t.bind(i,7856,23))).catch((function(t){return V.reject(new Error("Could not load dompurify: "+t))})).then((function(t){return t.default?t.default:t}))}var o=function(t){var e=n(t);return"undefined"===e?"undefined":"string"===e||t instanceof String?"string":"number"===e||t instanceof Number?"number":"function"===e||t instanceof Function?"function":t&&t.constructor===Array?"array":t&&1===t.nodeType?"element":"object"===e?"object":"unknown"},s=function(t,e){var i=document.createElement(t);for(var n in e.className&&(i.className=e.className),e.innerHTML&&e.dompurify&&(i.innerHTML=e.dompurify.sanitize(e.innerHTML)),e.style)i.style[n]=e.style[n];return i},a=function t(e){var i=Object.assign(t.convert(V.resolve()),JSON.parse(JSON.stringify(t.template))),n=t.convert(V.resolve(),i);return(n=n.setProgress(1,t,1,[t])).set(e)};(a.prototype=Object.create(V.prototype)).constructor=a,a.convert=function(t,e){return t.__proto__=e||a.prototype,t},a.template={prop:{src:null,container:null,overlay:null,canvas:null,img:null,pdf:null,pageSize:null,callback:function(){}},progress:{val:0,state:null,n:0,stack:[]},opt:{filename:"file.pdf",margin:[0,0,0,0],enableLinks:!0,x:0,y:0,html2canvas:{},jsPDF:{},backgroundColor:"transparent"}},a.prototype.from=function(t,e){return this.then((function(){switch(e=e||function(t){switch(o(t)){case"string":return"string";case"element":return"canvas"===t.nodeName.toLowerCase()?"canvas":"element";default:return"unknown"}}(t)){case"string":return this.then(r).then((function(e){return this.set({src:s("div",{innerHTML:t,dompurify:e})})}));case"element":return this.set({src:t});case"canvas":return this.set({canvas:t});case"img":return this.set({img:t});default:return this.error("Unknown source type.")}}))},a.prototype.to=function(t){switch(t){case"container":return this.toContainer();case"canvas":return this.toCanvas();case"img":return this.toImg();case"pdf":return this.toPdf();default:return this.error("Invalid target.")}},a.prototype.toContainer=function(){return this.thenList([function(){return this.prop.src||this.error("Cannot duplicate - no source HTML.")},function(){return this.prop.pageSize||this.setPageSize()}]).then((function(){var t={position:"relative",display:"inline-block",width:("number"!=typeof this.opt.width||isNaN(this.opt.width)||"number"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?Math.max(this.prop.src.clientWidth,this.prop.src.scrollWidth,this.prop.src.offsetWidth):this.opt.windowWidth)+"px",left:0,right:0,top:0,margin:"auto",backgroundColor:this.opt.backgroundColor},e=function t(e,i){for(var n=3===e.nodeType?document.createTextNode(e.nodeValue):e.cloneNode(!1),r=e.firstChild;r;r=r.nextSibling)!0!==i&&1===r.nodeType&&"SCRIPT"===r.nodeName||n.appendChild(t(r,i));return 1===e.nodeType&&("CANVAS"===e.nodeName?(n.width=e.width,n.height=e.height,n.getContext("2d").drawImage(e,0,0)):"TEXTAREA"!==e.nodeName&&"SELECT"!==e.nodeName||(n.value=e.value),n.addEventListener("load",(function(){n.scrollTop=e.scrollTop,n.scrollLeft=e.scrollLeft}),!0)),n}(this.prop.src,this.opt.html2canvas.javascriptEnabled);"BODY"===e.tagName&&(t.height=Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight)+"px"),this.prop.overlay=s("div",{className:"html2pdf__overlay",style:{position:"fixed",overflow:"hidden",zIndex:1e3,left:"-100000px",right:0,bottom:0,top:0}}),this.prop.container=s("div",{className:"html2pdf__container",style:t}),this.prop.container.appendChild(e),this.prop.container.firstChild.appendChild(s("div",{style:{clear:"both",border:"0 none transparent",margin:0,padding:0,height:0}})),this.prop.container.style.float="none",this.prop.overlay.appendChild(this.prop.container),document.body.appendChild(this.prop.overlay),this.prop.container.firstChild.style.position="relative",this.prop.container.height=Math.max(this.prop.container.firstChild.clientHeight,this.prop.container.firstChild.scrollHeight,this.prop.container.firstChild.offsetHeight)+"px"}))},a.prototype.toCanvas=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(e).then((function(t){var e=Object.assign({},this.opt.html2canvas);return delete e.onrendered,t(this.prop.container,e)})).then((function(t){(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},a.prototype.toContext2d=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(e).then((function(t){var e=this.opt.jsPDF,i=this.opt.fontFaces,n="number"!=typeof this.opt.width||isNaN(this.opt.width)||"number"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?1:this.opt.width/this.opt.windowWidth,r=Object.assign({async:!0,allowTaint:!0,scale:n,scrollX:this.opt.scrollX||0,scrollY:this.opt.scrollY||0,backgroundColor:"#ffffff",imageTimeout:15e3,logging:!0,proxy:null,removeContainer:!0,foreignObjectRendering:!1,useCORS:!1},this.opt.html2canvas);if(delete r.onrendered,e.context2d.autoPaging=void 0===this.opt.autoPaging||this.opt.autoPaging,e.context2d.posX=this.opt.x,e.context2d.posY=this.opt.y,e.context2d.margin=this.opt.margin,e.context2d.fontFaces=i,i)for(var o=0;o<i.length;++o){var s=i[o],a=s.src.find((function(t){return"truetype"===t.format}));a&&e.addFont(a.url,s.ref.name,s.ref.style)}return r.windowHeight=r.windowHeight||0,r.windowHeight=0==r.windowHeight?Math.max(this.prop.container.clientHeight,this.prop.container.scrollHeight,this.prop.container.offsetHeight):r.windowHeight,e.context2d.save(!0),t(this.prop.container,r)})).then((function(t){this.opt.jsPDF.context2d.restore(!0),(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},a.prototype.toImg=function(){return this.thenList([function(){return this.prop.canvas||this.toCanvas()}]).then((function(){var t=this.prop.canvas.toDataURL("image/"+this.opt.image.type,this.opt.image.quality);this.prop.img=document.createElement("img"),this.prop.img.src=t}))},a.prototype.toPdf=function(){return this.thenList([function(){return this.toContext2d()}]).then((function(){this.prop.pdf=this.prop.pdf||this.opt.jsPDF}))},a.prototype.output=function(t,e,i){return"img"===(i=i||"pdf").toLowerCase()||"image"===i.toLowerCase()?this.outputImg(t,e):this.outputPdf(t,e)},a.prototype.outputPdf=function(t,e){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){return this.prop.pdf.output(t,e)}))},a.prototype.outputImg=function(t){return this.thenList([function(){return this.prop.img||this.toImg()}]).then((function(){switch(t){case void 0:case"img":return this.prop.img;case"datauristring":case"dataurlstring":return this.prop.img.src;case"datauri":case"dataurl":return document.location.href=this.prop.img.src;default:throw'Image output type "'+t+'" is not supported.'}}))},a.prototype.save=function(t){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).set(t?{filename:t}:null).then((function(){this.prop.pdf.save(this.opt.filename)}))},a.prototype.doCallback=function(){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){this.prop.callback(this.prop.pdf)}))},a.prototype.set=function(t){if("object"!==o(t))return this;var e=Object.keys(t||{}).map((function(e){if(e in a.template.prop)return function(){this.prop[e]=t[e]};switch(e){case"margin":return this.setMargin.bind(this,t.margin);case"jsPDF":return function(){return this.opt.jsPDF=t.jsPDF,this.setPageSize()};case"pageSize":return this.setPageSize.bind(this,t.pageSize);default:return function(){this.opt[e]=t[e]}}}),this);return this.then((function(){return this.thenList(e)}))},a.prototype.get=function(t,e){return this.then((function(){var i=t in a.template.prop?this.prop[t]:this.opt[t];return e?e(i):i}))},a.prototype.setMargin=function(t){return this.then((function(){switch(o(t)){case"number":t=[t,t,t,t];case"array":if(2===t.length&&(t=[t[0],t[1],t[0],t[1]]),4===t.length)break;default:return this.error("Invalid margin array.")}this.opt.margin=t})).then(this.setPageSize)},a.prototype.setPageSize=function(t){function e(t,e){return Math.floor(t*e/72*96)}return this.then((function(){(t=t||At.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner")||(t.inner={width:t.width-this.opt.margin[1]-this.opt.margin[3],height:t.height-this.opt.margin[0]-this.opt.margin[2]},t.inner.px={width:e(t.inner.width,t.k),height:e(t.inner.height,t.k)},t.inner.ratio=t.inner.height/t.inner.width),this.prop.pageSize=t}))},a.prototype.setProgress=function(t,e,i,n){return null!=t&&(this.progress.val=t),null!=e&&(this.progress.state=e),null!=i&&(this.progress.n=i),null!=n&&(this.progress.stack=n),this.progress.ratio=this.progress.val/this.progress.state,this},a.prototype.updateProgress=function(t,e,i,n){return this.setProgress(t?this.progress.val+t:null,e||null,i?this.progress.n+i:null,n?this.progress.stack.concat(n):null)},a.prototype.then=function(t,e){var i=this;return this.thenCore(t,e,(function(t,e){return i.updateProgress(null,null,1,[t]),V.prototype.then.call(this,(function(e){return i.updateProgress(null,t),e})).then(t,e).then((function(t){return i.updateProgress(1),t}))}))},a.prototype.thenCore=function(t,e,i){i=i||V.prototype.then,t&&(t=t.bind(this)),e&&(e=e.bind(this));var n=-1!==V.toString().indexOf("[native code]")&&"Promise"===V.name?this:a.convert(Object.assign({},this),V.prototype),r=i.call(n,t,e);return a.convert(r,this.__proto__)},a.prototype.thenExternal=function(t,e){return V.prototype.then.call(this,t,e)},a.prototype.thenList=function(t){var e=this;return t.forEach((function(t){e=e.thenCore(t)})),e},a.prototype.catch=function(t){t&&(t=t.bind(this));var e=V.prototype.catch.call(this,t);return a.convert(e,this)},a.prototype.catchExternal=function(t){return V.prototype.catch.call(this,t)},a.prototype.error=function(t){return this.then((function(){throw new Error(t)}))},a.prototype.using=a.prototype.set,a.prototype.saveAs=a.prototype.save,a.prototype.export=a.prototype.output,a.prototype.run=a.prototype.then,At.getPageSize=function(t,e,i){if("object"===n(t)){var r=t;t=r.orientation,e=r.unit||e,i=r.format||i}e=e||"mm",i=i||"a4",t=(""+(t||"P")).toLowerCase();var o,s=(""+i).toLowerCase(),a={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]};switch(e){case"pt":o=1;break;case"mm":o=72/25.4;break;case"cm":o=72/2.54;break;case"in":o=72;break;case"px":o=.75;break;case"pc":case"em":o=12;break;case"ex":o=6;break;default:throw"Invalid unit: "+e}var h,c=0,l=0;if(a.hasOwnProperty(s))c=a[s][1]/o,l=a[s][0]/o;else try{c=i[1],l=i[0]}catch(t){throw new Error("Invalid format: "+i)}if("p"===t||"portrait"===t)t="p",l>c&&(h=l,l=c,c=h);else{if("l"!==t&&"landscape"!==t)throw"Invalid orientation: "+t;t="l",c>l&&(h=l,l=c,c=h)}return{width:l,height:c,unit:e,k:o,orientation:t}},t.html=function(t,e){(e=e||{}).callback=e.callback||function(){},e.html2canvas=e.html2canvas||{},e.html2canvas.canvas=e.html2canvas.canvas||this.canvas,e.jsPDF=e.jsPDF||this,e.fontFaces=e.fontFaces?e.fontFaces.map(xe):null;var i=new a(e);return e.worker?i:i.from(t).doCallback()}}(At.API),At.API.addJS=function(t){return Ne=t,this.internal.events.subscribe("postPutResources",(function(){Oe=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/Names [(EmbeddedJS) "+(Oe+1)+" 0 R]"),this.internal.out(">>"),this.internal.out("endobj"),ke=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /JavaScript"),this.internal.out("/JS ("+Ne+")"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){void 0!==Oe&&void 0!==ke&&this.internal.out("/Names <</JavaScript "+Oe+" 0 R>>")})),this},function(t){var e;t.events.push(["postPutResources",function(){var t=this,i=/^(\d+) 0 obj$/;if(this.outline.root.children.length>0)for(var n=t.outline.render().split(/\r\n/),r=0;r<n.length;r++){var o=n[r],s=i.exec(o);if(null!=s){var a=s[1];t.internal.newObjectDeferredBegin(a,!1)}t.internal.write(o)}if(this.outline.createNamedDestinations){var h=this.internal.pages.length,c=[];for(r=0;r<h;r++){var l=t.internal.newObject();c.push(l);var u=t.internal.getPageInfo(r+1);t.internal.write("<< /D["+u.objId+" 0 R /XYZ null null null]>> endobj")}var f=t.internal.newObject();for(t.internal.write("<< /Names [ "),r=0;r<c.length;r++)t.internal.write("(page_"+(r+1)+")"+c[r]+" 0 R");t.internal.write(" ] >>","endobj"),e=t.internal.newObject(),t.internal.write("<< /Dests "+f+" 0 R"),t.internal.write(">>","endobj")}}]),t.events.push(["putCatalog",function(){this.outline.root.children.length>0&&(this.internal.write("/Outlines",this.outline.makeRef(this.outline.root)),this.outline.createNamedDestinations&&this.internal.write("/Names "+e+" 0 R"))}]),t.events.push(["initialized",function(){var t=this;t.outline={createNamedDestinations:!1,root:{children:[]}},t.outline.add=function(t,e,i){var n={title:e,options:i,children:[]};return null==t&&(t=this.root),t.children.push(n),n},t.outline.render=function(){return this.ctx={},this.ctx.val="",this.ctx.pdf=t,this.genIds_r(this.root),this.renderRoot(this.root),this.renderItems(this.root),this.ctx.val},t.outline.genIds_r=function(e){e.id=t.internal.newObjectDeferred();for(var i=0;i<e.children.length;i++)this.genIds_r(e.children[i])},t.outline.renderRoot=function(t){this.objStart(t),this.line("/Type /Outlines"),t.children.length>0&&(this.line("/First "+this.makeRef(t.children[0])),this.line("/Last "+this.makeRef(t.children[t.children.length-1]))),this.line("/Count "+this.count_r({count:0},t)),this.objEnd()},t.outline.renderItems=function(e){for(var i=this.ctx.pdf.internal.getVerticalCoordinateString,n=0;n<e.children.length;n++){var r=e.children[n];this.objStart(r),this.line("/Title "+this.makeString(r.title)),this.line("/Parent "+this.makeRef(e)),n>0&&this.line("/Prev "+this.makeRef(e.children[n-1])),n<e.children.length-1&&this.line("/Next "+this.makeRef(e.children[n+1])),r.children.length>0&&(this.line("/First "+this.makeRef(r.children[0])),this.line("/Last "+this.makeRef(r.children[r.children.length-1])));var o=this.count=this.count_r({count:0},r);if(o>0&&this.line("/Count "+o),r.options&&r.options.pageNumber){var s=t.internal.getPageInfo(r.options.pageNumber);this.line("/Dest ["+s.objId+" 0 R /XYZ 0 "+i(0)+" 0]")}this.objEnd()}for(var a=0;a<e.children.length;a++)this.renderItems(e.children[a])},t.outline.line=function(t){this.ctx.val+=t+"\r\n"},t.outline.makeRef=function(t){return t.id+" 0 R"},t.outline.makeString=function(e){return"("+t.internal.pdfEscape(e)+")"},t.outline.objStart=function(t){this.ctx.val+="\r\n"+t.id+" 0 obj\r\n<<\r\n"},t.outline.objEnd=function(){this.ctx.val+=">> \r\nendobj\r\n"},t.outline.count_r=function(t,e){for(var i=0;i<e.children.length;i++)t.count++,this.count_r(t,e.children[i]);return t.count}}])}(At.API),function(t){var e=[192,193,194,195,196,197,198,199];t.processJPEG=function(t,i,n,r,o,s){var a,h=this.decode.DCT_DECODE,c=null;if("string"==typeof t||this.__addimage__.isArrayBuffer(t)||this.__addimage__.isArrayBufferView(t)){switch(t=o||t,t=this.__addimage__.isArrayBuffer(t)?new Uint8Array(t):t,(a=function(t){for(var i,n=256*t.charCodeAt(4)+t.charCodeAt(5),r=t.length,o={width:0,height:0,numcomponents:1},s=4;s<r;s+=2){if(s+=n,-1!==e.indexOf(t.charCodeAt(s+1))){i=256*t.charCodeAt(s+5)+t.charCodeAt(s+6),o={width:256*t.charCodeAt(s+7)+t.charCodeAt(s+8),height:i,numcomponents:t.charCodeAt(s+9)};break}n=256*t.charCodeAt(s+2)+t.charCodeAt(s+3)}return o}(t=this.__addimage__.isArrayBufferView(t)?this.__addimage__.arrayBufferToBinaryString(t):t)).numcomponents){case 1:s=this.color_spaces.DEVICE_GRAY;break;case 4:s=this.color_spaces.DEVICE_CMYK;break;case 3:s=this.color_spaces.DEVICE_RGB}c={data:t,width:a.width,height:a.height,colorSpace:s,bitsPerComponent:8,filter:h,index:i,alias:n}}return c}}(At.API);var Fe,Ee,Ie,Me,De,Be=function(){var t,e,i;function n(t){var e,i,n,r,o,s,a,h,c,l,u,f,d,p;for(this.data=t,this.pos=8,this.palette=[],this.imgData=[],this.transparency={},this.animation=null,this.text={},s=null;;){switch(e=this.readUInt32(),c=function(){var t,e;for(e=[],t=0;t<4;++t)e.push(String.fromCharCode(this.data[this.pos++]));return e}.call(this).join("")){case"IHDR":this.width=this.readUInt32(),this.height=this.readUInt32(),this.bits=this.data[this.pos++],this.colorType=this.data[this.pos++],this.compressionMethod=this.data[this.pos++],this.filterMethod=this.data[this.pos++],this.interlaceMethod=this.data[this.pos++];break;case"acTL":this.animation={numFrames:this.readUInt32(),numPlays:this.readUInt32()||1/0,frames:[]};break;case"PLTE":this.palette=this.read(e);break;case"fcTL":s&&this.animation.frames.push(s),this.pos+=4,s={width:this.readUInt32(),height:this.readUInt32(),xOffset:this.readUInt32(),yOffset:this.readUInt32()},o=this.readUInt16(),r=this.readUInt16()||100,s.delay=1e3*o/r,s.disposeOp=this.data[this.pos++],s.blendOp=this.data[this.pos++],s.data=[];break;case"IDAT":case"fdAT":for("fdAT"===c&&(this.pos+=4,e-=4),t=(null!=s?s.data:void 0)||this.imgData,f=0;0<=e?f<e:f>e;0<=e?++f:--f)t.push(this.data[this.pos++]);break;case"tRNS":switch(this.transparency={},this.colorType){case 3:if(n=this.palette.length/3,this.transparency.indexed=this.read(e),this.transparency.indexed.length>n)throw new Error("More transparent colors than palette size");if((l=n-this.transparency.indexed.length)>0)for(d=0;0<=l?d<l:d>l;0<=l?++d:--d)this.transparency.indexed.push(255);break;case 0:this.transparency.grayscale=this.read(e)[0];break;case 2:this.transparency.rgb=this.read(e)}break;case"tEXt":a=(u=this.read(e)).indexOf(0),h=String.fromCharCode.apply(String,u.slice(0,a)),this.text[h]=String.fromCharCode.apply(String,u.slice(a+1));break;case"IEND":return s&&this.animation.frames.push(s),this.colors=function(){switch(this.colorType){case 0:case 3:case 4:return 1;case 2:case 6:return 3}}.call(this),this.hasAlphaChannel=4===(p=this.colorType)||6===p,i=this.colors+(this.hasAlphaChannel?1:0),this.pixelBitlength=this.bits*i,this.colorSpace=function(){switch(this.colors){case 1:return"DeviceGray";case 3:return"DeviceRGB"}}.call(this),void(this.imgData=new Uint8Array(this.imgData));default:this.pos+=e}if(this.pos+=4,this.pos>this.data.length)throw new Error("Incomplete or corrupt PNG file")}}n.prototype.read=function(t){var e,i;for(i=[],e=0;0<=t?e<t:e>t;0<=t?++e:--e)i.push(this.data[this.pos++]);return i},n.prototype.readUInt32=function(){return this.data[this.pos++]<<24|this.data[this.pos++]<<16|this.data[this.pos++]<<8|this.data[this.pos++]},n.prototype.readUInt16=function(){return this.data[this.pos++]<<8|this.data[this.pos++]},n.prototype.decodePixels=function(t){var e=this.pixelBitlength/8,i=new Uint8Array(this.width*this.height*e),n=0,r=this;if(null==t&&(t=this.imgData),0===t.length)return new Uint8Array(0);function o(o,s,a,h){var c,l,u,f,d,p,g,m,v,b,y,w,x,_,S,C,A,L,P,T,O,k=Math.ceil((r.width-o)/a),N=Math.ceil((r.height-s)/h),j=r.width==k&&r.height==N;for(_=e*k,w=j?i:new Uint8Array(_*N),p=t.length,x=0,l=0;x<N&&n<p;){switch(t[n++]){case 0:for(f=A=0;A<_;f=A+=1)w[l++]=t[n++];break;case 1:for(f=L=0;L<_;f=L+=1)c=t[n++],d=f<e?0:w[l-e],w[l++]=(c+d)%256;break;case 2:for(f=P=0;P<_;f=P+=1)c=t[n++],u=(f-f%e)/e,S=x&&w[(x-1)*_+u*e+f%e],w[l++]=(S+c)%256;break;case 3:for(f=T=0;T<_;f=T+=1)c=t[n++],u=(f-f%e)/e,d=f<e?0:w[l-e],S=x&&w[(x-1)*_+u*e+f%e],w[l++]=(c+Math.floor((d+S)/2))%256;break;case 4:for(f=O=0;O<_;f=O+=1)c=t[n++],u=(f-f%e)/e,d=f<e?0:w[l-e],0===x?S=C=0:(S=w[(x-1)*_+u*e+f%e],C=u&&w[(x-1)*_+(u-1)*e+f%e]),g=d+S-C,m=Math.abs(g-d),b=Math.abs(g-S),y=Math.abs(g-C),v=m<=b&&m<=y?d:b<=y?S:C,w[l++]=(c+v)%256;break;default:throw new Error("Invalid filter algorithm: "+t[n-1])}if(!j){var F=((s+x*h)*r.width+o)*e,E=x*_;for(f=0;f<k;f+=1){for(var I=0;I<e;I+=1)i[F++]=w[E++];F+=(a-1)*e}}x++}}return t=H(t),1==r.interlaceMethod?(o(0,0,8,8),o(4,0,8,8),o(0,4,4,8),o(2,0,4,4),o(0,2,2,4),o(1,0,2,2),o(0,1,1,2)):o(0,0,1,1),i},n.prototype.decodePalette=function(){var t,e,i,n,r,o,s,a,h;for(i=this.palette,o=this.transparency.indexed||[],r=new Uint8Array((o.length||0)+i.length),n=0,t=0,e=s=0,a=i.length;s<a;e=s+=3)r[n++]=i[e],r[n++]=i[e+1],r[n++]=i[e+2],r[n++]=null!=(h=o[t++])?h:255;return r},n.prototype.copyToImageData=function(t,e){var i,n,r,o,s,a,h,c,l,u,f;if(n=this.colors,l=null,i=this.hasAlphaChannel,this.palette.length&&(l=null!=(f=this._decodedPalette)?f:this._decodedPalette=this.decodePalette(),n=4,i=!0),c=(r=t.data||t).length,s=l||e,o=a=0,1===n)for(;o<c;)h=l?4*e[o/4]:a,u=s[h++],r[o++]=u,r[o++]=u,r[o++]=u,r[o++]=i?s[h++]:255,a=h;else for(;o<c;)h=l?4*e[o/4]:a,r[o++]=s[h++],r[o++]=s[h++],r[o++]=s[h++],r[o++]=i?s[h++]:255,a=h},n.prototype.decode=function(){var t;return t=new Uint8Array(this.width*this.height*4),this.copyToImageData(t,this.decodePixels()),t};var r=function(){if("[object Window]"===Object.prototype.toString.call(G)){try{e=G.document.createElement("canvas"),i=e.getContext("2d")}catch(t){return!1}return!0}return!1};return r(),t=function(t){var n;if(!0===r())return i.width=t.width,i.height=t.height,i.clearRect(0,0,t.width,t.height),i.putImageData(t,0,0),(n=new Image).src=e.toDataURL(),n;throw new Error("This method requires a Browser with Canvas-capability.")},n.prototype.decodeFrames=function(e){var i,n,r,o,s,a,h,c;if(this.animation){for(c=[],n=s=0,a=(h=this.animation.frames).length;s<a;n=++s)i=h[n],r=e.createImageData(i.width,i.height),o=this.decodePixels(new Uint8Array(i.data)),this.copyToImageData(r,o),i.imageData=r,c.push(i.image=t(r));return c}},n.prototype.renderFrame=function(t,e){var i,n,r;return i=(n=this.animation.frames)[e],r=n[e-1],0===e&&t.clearRect(0,0,this.width,this.height),1===(null!=r?r.disposeOp:void 0)?t.clearRect(r.xOffset,r.yOffset,r.width,r.height):2===(null!=r?r.disposeOp:void 0)&&t.putImageData(r.imageData,r.xOffset,r.yOffset),0===i.blendOp&&t.clearRect(i.xOffset,i.yOffset,i.width,i.height),t.drawImage(i.image,i.xOffset,i.yOffset)},n.prototype.animate=function(t){var e,i,n,r,o,s,a=this;return i=0,s=this.animation,r=s.numFrames,n=s.frames,o=s.numPlays,(e=function(){var s,h;if(s=i++%r,h=n[s],a.renderFrame(t,s),r>1&&i/r<o)return a.animation._timeout=setTimeout(e,h.delay)})()},n.prototype.stopAnimation=function(){var t;return clearTimeout(null!=(t=this.animation)?t._timeout:void 0)},n.prototype.render=function(t){var e,i;return t._png&&t._png.stopAnimation(),t._png=this,t.width=this.width,t.height=this.height,e=t.getContext("2d"),this.animation?(this.decodeFrames(e),this.animate(e)):(i=e.createImageData(this.width,this.height),this.copyToImageData(i,this.decodePixels()),e.putImageData(i,0,0))},n}();function Re(t){var e=0;if(71!==t[e++]||73!==t[e++]||70!==t[e++]||56!==t[e++]||56!=(t[e++]+1&253)||97!==t[e++])throw new Error("Invalid GIF 87a/89a header.");var i=t[e++]|t[e++]<<8,n=t[e++]|t[e++]<<8,r=t[e++],o=r>>7,s=1<<1+(7&r);t[e++],t[e++];var a=null,h=null;o&&(a=e,h=s,e+=3*s);var c=!0,l=[],u=0,f=null,d=0,p=null;for(this.width=i,this.height=n;c&&e<t.length;)switch(t[e++]){case 33:switch(t[e++]){case 255:if(11!==t[e]||78==t[e+1]&&69==t[e+2]&&84==t[e+3]&&83==t[e+4]&&67==t[e+5]&&65==t[e+6]&&80==t[e+7]&&69==t[e+8]&&50==t[e+9]&&46==t[e+10]&&48==t[e+11]&&3==t[e+12]&&1==t[e+13]&&0==t[e+16])e+=14,p=t[e++]|t[e++]<<8,e++;else for(e+=12;;){if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}break;case 249:if(4!==t[e++]||0!==t[e+4])throw new Error("Invalid graphics extension block.");var g=t[e++];u=t[e++]|t[e++]<<8,f=t[e++],0==(1&g)&&(f=null),d=g>>2&7,e++;break;case 254:for(;;){if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}break;default:throw new Error("Unknown graphic control label: 0x"+t[e-1].toString(16))}break;case 44:var m=t[e++]|t[e++]<<8,v=t[e++]|t[e++]<<8,b=t[e++]|t[e++]<<8,y=t[e++]|t[e++]<<8,w=t[e++],x=w>>6&1,_=1<<1+(7&w),S=a,C=h,A=!1;w>>7&&(A=!0,S=e,C=_,e+=3*_);var L=e;for(e++;;){var P;if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}l.push({x:m,y:v,width:b,height:y,has_local_palette:A,palette_offset:S,palette_size:C,data_offset:L,data_length:e-L,transparent_index:f,interlaced:!!x,delay:u,disposal:d});break;case 59:c=!1;break;default:throw new Error("Unknown gif block: 0x"+t[e-1].toString(16))}this.numFrames=function(){return l.length},this.loopCount=function(){return p},this.frameInfo=function(t){if(t<0||t>=l.length)throw new Error("Frame index out of range.");return l[t]},this.decodeAndBlitFrameBGRA=function(e,n){var r=this.frameInfo(e),o=r.width*r.height,s=new Uint8Array(o);ze(t,r.data_offset,s,o);var a=r.palette_offset,h=r.transparent_index;null===h&&(h=256);var c=r.width,l=i-c,u=c,f=4*(r.y*i+r.x),d=4*((r.y+r.height)*i+r.x),p=f,g=4*l;!0===r.interlaced&&(g+=4*i*7);for(var m=8,v=0,b=s.length;v<b;++v){var y=s[v];if(0===u&&(u=c,(p+=g)>=d&&(g=4*l+4*i*(m-1),p=f+(c+l)*(m<<1),m>>=1)),y===h)p+=4;else{var w=t[a+3*y],x=t[a+3*y+1],_=t[a+3*y+2];n[p++]=_,n[p++]=x,n[p++]=w,n[p++]=255}--u}},this.decodeAndBlitFrameRGBA=function(e,n){var r=this.frameInfo(e),o=r.width*r.height,s=new Uint8Array(o);ze(t,r.data_offset,s,o);var a=r.palette_offset,h=r.transparent_index;null===h&&(h=256);var c=r.width,l=i-c,u=c,f=4*(r.y*i+r.x),d=4*((r.y+r.height)*i+r.x),p=f,g=4*l;!0===r.interlaced&&(g+=4*i*7);for(var m=8,v=0,b=s.length;v<b;++v){var y=s[v];if(0===u&&(u=c,(p+=g)>=d&&(g=4*l+4*i*(m-1),p=f+(c+l)*(m<<1),m>>=1)),y===h)p+=4;else{var w=t[a+3*y],x=t[a+3*y+1],_=t[a+3*y+2];n[p++]=w,n[p++]=x,n[p++]=_,n[p++]=255}--u}}}function ze(t,e,i,n){for(var r=t[e++],o=1<<r,s=o+1,a=s+1,h=r+1,c=(1<<h)-1,l=0,u=0,f=0,d=t[e++],p=new Int32Array(4096),g=null;;){for(;l<16&&0!==d;)u|=t[e++]<<l,l+=8,1===d?d=t[e++]:--d;if(l<h)break;var m=u&c;if(u>>=h,l-=h,m!==o){if(m===s)break;for(var v=m<a?m:g,b=0,y=v;y>o;)y=p[y]>>8,++b;var w=y;if(f+b+(v!==m?1:0)>n)return void Y.log("Warning, gif stream longer than expected.");i[f++]=w;var x=f+=b;for(v!==m&&(i[f++]=w),y=v;b--;)y=p[y],i[--x]=255&y,y>>=8;null!==g&&a<4096&&(p[a++]=g<<8|w,a>=c+1&&h<12&&(++h,c=c<<1|1)),g=m}else a=s+1,c=(1<<(h=r+1))-1,g=null}return f!==n&&Y.log("Warning, gif stream shorter than expected."),i}function qe(t){var e,i,n,r,o,s=Math.floor,a=new Array(64),h=new Array(64),c=new Array(64),l=new Array(64),u=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),g=[],m=0,v=7,b=new Array(64),y=new Array(64),w=new Array(64),x=new Array(256),_=new Array(2048),S=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],C=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],A=[0,1,2,3,4,5,6,7,8,9,10,11],L=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],P=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],T=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],O=[0,1,2,3,4,5,6,7,8,9,10,11],k=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],N=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function j(t,e){for(var i=0,n=0,r=new Array,o=1;o<=16;o++){for(var s=1;s<=t[o];s++)r[e[n]]=[],r[e[n]][0]=i,r[e[n]][1]=o,n++,i++;i*=2}return r}function F(t){for(var e=t[0],i=t[1]-1;i>=0;)e&1<<i&&(m|=1<<v),i--,--v<0&&(255==m?(E(255),E(0)):E(m),v=7,m=0)}function E(t){g.push(t)}function I(t){E(t>>8&255),E(255&t)}function M(t,e,i,n,r){for(var o,s=r[0],a=r[240],h=function(t,e){var i,n,r,o,s,a,h,c,l,u,f=0;for(l=0;l<8;++l){i=t[f],n=t[f+1],r=t[f+2],o=t[f+3],s=t[f+4],a=t[f+5],h=t[f+6];var p=i+(c=t[f+7]),g=i-c,m=n+h,v=n-h,b=r+a,y=r-a,w=o+s,x=o-s,_=p+w,S=p-w,C=m+b,A=m-b;t[f]=_+C,t[f+4]=_-C;var L=.707106781*(A+S);t[f+2]=S+L,t[f+6]=S-L;var P=.382683433*((_=x+y)-(A=v+g)),T=.5411961*_+P,O=1.306562965*A+P,k=.707106781*(C=y+v),N=g+k,j=g-k;t[f+5]=j+T,t[f+3]=j-T,t[f+1]=N+O,t[f+7]=N-O,f+=8}for(f=0,l=0;l<8;++l){i=t[f],n=t[f+8],r=t[f+16],o=t[f+24],s=t[f+32],a=t[f+40],h=t[f+48];var F=i+(c=t[f+56]),E=i-c,I=n+h,M=n-h,D=r+a,B=r-a,R=o+s,z=o-s,q=F+R,U=F-R,W=I+D,H=I-D;t[f]=q+W,t[f+32]=q-W;var V=.707106781*(H+U);t[f+16]=U+V,t[f+48]=U-V;var G=.382683433*((q=z+B)-(H=M+E)),X=.5411961*q+G,Y=1.306562965*H+G,K=.707106781*(W=B+M),J=E+K,$=E-K;t[f+40]=$+X,t[f+24]=$-X,t[f+8]=J+Y,t[f+56]=J-Y,f++}for(l=0;l<64;++l)u=t[l]*e[l],d[l]=u>0?u+.5|0:u-.5|0;return d}(t,e),c=0;c<64;++c)p[S[c]]=h[c];var l=p[0]-i;i=p[0],0==l?F(n[0]):(F(n[f[o=32767+l]]),F(u[o]));for(var g=63;g>0&&0==p[g];)g--;if(0==g)return F(s),i;for(var m,v=1;v<=g;){for(var b=v;0==p[v]&&v<=g;)++v;var y=v-b;if(y>=16){m=y>>4;for(var w=1;w<=m;++w)F(a);y&=15}o=32767+p[v],F(r[(y<<4)+f[o]]),F(u[o]),v++}return 63!=g&&F(s),i}function D(t){t=Math.min(Math.max(t,1),100),o!=t&&(function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],i=0;i<64;i++){var n=s((e[i]*t+50)/100);n=Math.min(Math.max(n,1),255),a[S[i]]=n}for(var r=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],o=0;o<64;o++){var u=s((r[o]*t+50)/100);u=Math.min(Math.max(u,1),255),h[S[o]]=u}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var g=0;g<8;g++)c[d]=1/(a[S[d]]*f[p]*f[g]*8),l[d]=1/(h[S[d]]*f[p]*f[g]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),o=t)}this.encode=function(t,o){o&&D(o),g=new Array,m=0,v=7,I(65496),I(65504),I(16),E(74),E(70),E(73),E(70),E(0),E(1),E(1),E(0),I(1),I(1),E(0),E(0),function(){I(65499),I(132),E(0);for(var t=0;t<64;t++)E(a[t]);E(1);for(var e=0;e<64;e++)E(h[e])}(),function(t,e){I(65472),I(17),E(8),I(e),I(t),E(3),E(1),E(17),E(0),E(2),E(17),E(1),E(3),E(17),E(1)}(t.width,t.height),function(){I(65476),I(418),E(0);for(var t=0;t<16;t++)E(C[t+1]);for(var e=0;e<=11;e++)E(A[e]);E(16);for(var i=0;i<16;i++)E(L[i+1]);for(var n=0;n<=161;n++)E(P[n]);E(1);for(var r=0;r<16;r++)E(T[r+1]);for(var o=0;o<=11;o++)E(O[o]);E(17);for(var s=0;s<16;s++)E(k[s+1]);for(var a=0;a<=161;a++)E(N[a])}(),I(65498),I(12),E(3),E(1),E(0),E(2),E(17),E(3),E(17),E(0),E(63),E(0);var s=0,u=0,f=0;m=0,v=7,this.encode.displayName="_encode_";for(var d,p,x,S,j,B,R,z,q,U=t.data,W=t.width,H=t.height,V=4*W,G=0;G<H;){for(d=0;d<V;){for(j=V*G+d,R=-1,z=0,q=0;q<64;q++)B=j+(z=q>>3)*V+(R=4*(7&q)),G+z>=H&&(B-=V*(G+1+z-H)),d+R>=V&&(B-=d+R-V+4),p=U[B++],x=U[B++],S=U[B++],b[q]=(_[p]+_[x+256>>0]+_[S+512>>0]>>16)-128,y[q]=(_[p+768>>0]+_[x+1024>>0]+_[S+1280>>0]>>16)-128,w[q]=(_[p+1280>>0]+_[x+1536>>0]+_[S+1792>>0]>>16)-128;s=M(b,c,s,e,n),u=M(y,l,u,i,r),f=M(w,l,f,i,r),d+=32}G+=8}if(v>=0){var X=[];X[1]=v+1,X[0]=(1<<v+1)-1,F(X)}return I(65497),new Uint8Array(g)},t=t||50,function(){for(var t=String.fromCharCode,e=0;e<256;e++)x[e]=t(e)}(),e=j(C,A),i=j(T,O),n=j(L,P),r=j(k,N),function(){for(var t=1,e=2,i=1;i<=15;i++){for(var n=t;n<e;n++)f[32767+n]=i,u[32767+n]=[],u[32767+n][1]=i,u[32767+n][0]=n;for(var r=-(e-1);r<=-t;r++)f[32767+r]=i,u[32767+r]=[],u[32767+r][1]=i,u[32767+r][0]=e-1+r;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)_[t]=19595*t,_[t+256>>0]=38470*t,_[t+512>>0]=7471*t+32768,_[t+768>>0]=-11059*t,_[t+1024>>0]=-21709*t,_[t+1280>>0]=32768*t+8421375,_[t+1536>>0]=-27439*t,_[t+1792>>0]=-5329*t}(),D(t)}function Ue(t,e){if(this.pos=0,this.buffer=t,this.datav=new DataView(t.buffer),this.is_with_alpha=!!e,this.bottom_up=!0,this.flag=String.fromCharCode(this.buffer[0])+String.fromCharCode(this.buffer[1]),this.pos+=2,-1===["BM","BA","CI","CP","IC","PT"].indexOf(this.flag))throw new Error("Invalid BMP File");this.parseHeader(),this.parseBGR()}function We(t){function e(t){if(!t)throw Error("assert :P")}function i(t,e,i){for(var n=0;4>n;n++)if(t[e+n]!=i.charCodeAt(n))return!0;return!1}function n(t,e,i,n,r){for(var o=0;o<r;o++)t[e+o]=i[n+o]}function r(t,e,i,n){for(var r=0;r<n;r++)t[e+r]=i}function o(t){return new Int32Array(t)}function s(t,e){for(var i=[],n=0;n<t;n++)i.push(new e);return i}function a(t,e){var i=[];return function t(i,n,r){for(var o=r[n],s=0;s<o&&(i.push(r.length>n+1?[]:new e),!(r.length<n+1));s++)t(i[s],n+1,r)}(i,0,t),i}var h=function(){var t=this;function h(t,e){for(var i=1<<e-1>>>0;t&i;)i>>>=1;return i?(t&i-1)+i:t}function c(t,i,n,r,o){e(!(r%n));do{t[i+(r-=n)]=o}while(0<r)}function l(t,i,n,r,s){if(e(2328>=s),512>=s)var a=o(512);else if(null==(a=o(s)))return 0;return function(t,i,n,r,s,a){var l,f,d=i,p=1<<n,g=o(16),m=o(16);for(e(0!=s),e(null!=r),e(null!=t),e(0<n),f=0;f<s;++f){if(15<r[f])return 0;++g[r[f]]}if(g[0]==s)return 0;for(m[1]=0,l=1;15>l;++l){if(g[l]>1<<l)return 0;m[l+1]=m[l]+g[l]}for(f=0;f<s;++f)l=r[f],0<r[f]&&(a[m[l]++]=f);if(1==m[15])return(r=new u).g=0,r.value=a[0],c(t,d,1,p,r),p;var v,b=-1,y=p-1,w=0,x=1,_=1,S=1<<n;for(f=0,l=1,s=2;l<=n;++l,s<<=1){if(x+=_<<=1,0>(_-=g[l]))return 0;for(;0<g[l];--g[l])(r=new u).g=l,r.value=a[f++],c(t,d+w,s,S,r),w=h(w,l)}for(l=n+1,s=2;15>=l;++l,s<<=1){if(x+=_<<=1,0>(_-=g[l]))return 0;for(;0<g[l];--g[l]){if(r=new u,(w&y)!=b){for(d+=S,v=1<<(b=l)-n;15>b&&!(0>=(v-=g[b]));)++b,v<<=1;p+=S=1<<(v=b-n),t[i+(b=w&y)].g=v+n,t[i+b].value=d-i-b}r.g=l-n,r.value=a[f++],c(t,d+(w>>n),s,S,r),w=h(w,l)}}return x!=2*m[15]-1?0:p}(t,i,n,r,s,a)}function u(){this.value=this.g=0}function f(){this.value=this.g=0}function d(){this.G=s(5,u),this.H=o(5),this.jc=this.Qb=this.qb=this.nd=0,this.pd=s(Bi,f)}function p(t,i,n,r){e(null!=t),e(null!=i),e(2147483648>r),t.Ca=254,t.I=0,t.b=-8,t.Ka=0,t.oa=i,t.pa=n,t.Jd=i,t.Yc=n+r,t.Zc=4<=r?n+r-4+1:n,L(t)}function g(t,e){for(var i=0;0<e--;)i|=T(t,128)<<e;return i}function m(t,e){var i=g(t,e);return P(t)?-i:i}function v(t,i,n,r){var o,s=0;for(e(null!=t),e(null!=i),e(4294967288>r),t.Sb=r,t.Ra=0,t.u=0,t.h=0,4<r&&(r=4),o=0;o<r;++o)s+=i[n+o]<<8*o;t.Ra=s,t.bb=r,t.oa=i,t.pa=n}function b(t){for(;8<=t.u&&t.bb<t.Sb;)t.Ra>>>=8,t.Ra+=t.oa[t.pa+t.bb]<<qi-8>>>0,++t.bb,t.u-=8;S(t)&&(t.h=1,t.u=0)}function y(t,i){if(e(0<=i),!t.h&&i<=zi){var n=_(t)&Ri[i];return t.u+=i,b(t),n}return t.h=1,t.u=0}function w(){this.b=this.Ca=this.I=0,this.oa=[],this.pa=0,this.Jd=[],this.Yc=0,this.Zc=[],this.Ka=0}function x(){this.Ra=0,this.oa=[],this.h=this.u=this.bb=this.Sb=this.pa=0}function _(t){return t.Ra>>>(t.u&qi-1)>>>0}function S(t){return e(t.bb<=t.Sb),t.h||t.bb==t.Sb&&t.u>qi}function C(t,e){t.u=e,t.h=S(t)}function A(t){t.u>=Ui&&(e(t.u>=Ui),b(t))}function L(t){e(null!=t&&null!=t.oa),t.pa<t.Zc?(t.I=(t.oa[t.pa++]|t.I<<8)>>>0,t.b+=8):(e(null!=t&&null!=t.oa),t.pa<t.Yc?(t.b+=8,t.I=t.oa[t.pa++]|t.I<<8):t.Ka?t.b=0:(t.I<<=8,t.b+=8,t.Ka=1))}function P(t){return g(t,1)}function T(t,e){var i=t.Ca;0>t.b&&L(t);var n=t.b,r=i*e>>>8,o=(t.I>>>n>r)+0;for(o?(i-=r,t.I-=r+1<<n>>>0):i=r+1,n=i,r=0;256<=n;)r+=8,n>>=8;return n=7^r+Wi[n],t.b-=n,t.Ca=(i<<n)-1,o}function O(t,e,i){t[e+0]=i>>24&255,t[e+1]=i>>16&255,t[e+2]=i>>8&255,t[e+3]=i>>0&255}function k(t,e){return t[e+0]<<0|t[e+1]<<8}function N(t,e){return k(t,e)|t[e+2]<<16}function j(t,e){return k(t,e)|k(t,e+2)<<16}function F(t,i){var n=1<<i;return e(null!=t),e(0<i),t.X=o(n),null==t.X?0:(t.Mb=32-i,t.Xa=i,1)}function E(t,i){e(null!=t),e(null!=i),e(t.Xa==i.Xa),n(i.X,0,t.X,0,1<<i.Xa)}function I(){this.X=[],this.Xa=this.Mb=0}function M(t,i,n,r){e(null!=n),e(null!=r);var o=n[0],s=r[0];return 0==o&&(o=(t*s+i/2)/i),0==s&&(s=(i*o+t/2)/t),0>=o||0>=s?0:(n[0]=o,r[0]=s,1)}function D(t,e){return t+(1<<e)-1>>>e}function B(t,e){return((4278255360&t)+(4278255360&e)>>>0&4278255360)+((16711935&t)+(16711935&e)>>>0&16711935)>>>0}function R(e,i){t[i]=function(i,n,r,o,s,a,h){var c;for(c=0;c<s;++c){var l=t[e](a[h+c-1],r,o+c);a[h+c]=B(i[n+c],l)}}}function z(){this.ud=this.hd=this.jd=0}function q(t,e){return((4278124286&(t^e))>>>1)+(t&e)>>>0}function U(t){return 0<=t&&256>t?t:0>t?0:255<t?255:void 0}function W(t,e){return U(t+(t-e+.5>>1))}function H(t,e,i){return Math.abs(e-i)-Math.abs(t-i)}function V(t,e,i,n,r,o,s){for(n=o[s-1],i=0;i<r;++i)o[s+i]=n=B(t[e+i],n)}function G(t,e,i,n,r){var o;for(o=0;o<i;++o){var s=t[e+o],a=s>>8&255,h=16711935&(h=(h=16711935&s)+((a<<16)+a));n[r+o]=(4278255360&s)+h>>>0}}function X(t,e){e.jd=t>>0&255,e.hd=t>>8&255,e.ud=t>>16&255}function Y(t,e,i,n,r,o){var s;for(s=0;s<n;++s){var a=e[i+s],h=a>>>8,c=a,l=255&(l=(l=a>>>16)+((t.jd<<24>>24)*(h<<24>>24)>>>5));c=255&(c=(c+=(t.hd<<24>>24)*(h<<24>>24)>>>5)+((t.ud<<24>>24)*(l<<24>>24)>>>5)),r[o+s]=(4278255360&a)+(l<<16)+c}}function K(e,i,n,r,o){t[i]=function(t,e,i,n,s,a,h,c,l){for(n=h;n<c;++n)for(h=0;h<l;++h)s[a++]=o(i[r(t[e++])])},t[e]=function(e,i,s,a,h,c,l){var u=8>>e.b,f=e.Ea,d=e.K[0],p=e.w;if(8>u)for(e=(1<<e.b)-1,p=(1<<u)-1;i<s;++i){var g,m=0;for(g=0;g<f;++g)g&e||(m=r(a[h++])),c[l++]=o(d[m&p]),m>>=u}else t["VP8LMapColor"+n](a,h,d,p,c,l,i,s,f)}}function J(t,e,i,n,r){for(i=e+i;e<i;){var o=t[e++];n[r++]=o>>16&255,n[r++]=o>>8&255,n[r++]=o>>0&255}}function $(t,e,i,n,r){for(i=e+i;e<i;){var o=t[e++];n[r++]=o>>16&255,n[r++]=o>>8&255,n[r++]=o>>0&255,n[r++]=o>>24&255}}function Z(t,e,i,n,r){for(i=e+i;e<i;){var o=(s=t[e++])>>16&240|s>>12&15,s=s>>0&240|s>>28&15;n[r++]=o,n[r++]=s}}function Q(t,e,i,n,r){for(i=e+i;e<i;){var o=(s=t[e++])>>16&248|s>>13&7,s=s>>5&224|s>>3&31;n[r++]=o,n[r++]=s}}function tt(t,e,i,n,r){for(i=e+i;e<i;){var o=t[e++];n[r++]=o>>0&255,n[r++]=o>>8&255,n[r++]=o>>16&255}}function et(t,e,i,r,o,s){if(0==s)for(i=e+i;e<i;)O(r,((s=t[e++])[0]>>24|s[1]>>8&65280|s[2]<<8&16711680|s[3]<<24)>>>0),o+=32;else n(r,o,t,e,i)}function it(e,i){t[i][0]=t[e+"0"],t[i][1]=t[e+"1"],t[i][2]=t[e+"2"],t[i][3]=t[e+"3"],t[i][4]=t[e+"4"],t[i][5]=t[e+"5"],t[i][6]=t[e+"6"],t[i][7]=t[e+"7"],t[i][8]=t[e+"8"],t[i][9]=t[e+"9"],t[i][10]=t[e+"10"],t[i][11]=t[e+"11"],t[i][12]=t[e+"12"],t[i][13]=t[e+"13"],t[i][14]=t[e+"0"],t[i][15]=t[e+"0"]}function nt(t){return t==Wn||t==Hn||t==Vn||t==Gn}function rt(){this.eb=[],this.size=this.A=this.fb=0}function ot(){this.y=[],this.f=[],this.ea=[],this.F=[],this.Tc=this.Ed=this.Cd=this.Fd=this.lb=this.Db=this.Ab=this.fa=this.J=this.W=this.N=this.O=0}function st(){this.Rd=this.height=this.width=this.S=0,this.f={},this.f.RGBA=new rt,this.f.kb=new ot,this.sd=null}function at(){this.width=[0],this.height=[0],this.Pd=[0],this.Qd=[0],this.format=[0]}function ht(){this.Id=this.fd=this.Md=this.hb=this.ib=this.da=this.bd=this.cd=this.j=this.v=this.Da=this.Sd=this.ob=0}function ct(t){return alert("todo:WebPSamplerProcessPlane"),t.T}function lt(t,e){var i=t.T,r=e.ba.f.RGBA,o=r.eb,s=r.fb+t.ka*r.A,a=vr[e.ba.S],h=t.y,c=t.O,l=t.f,u=t.N,f=t.ea,d=t.W,p=e.cc,g=e.dc,m=e.Mc,v=e.Nc,b=t.ka,y=t.ka+t.T,w=t.U,x=w+1>>1;for(0==b?a(h,c,null,null,l,u,f,d,l,u,f,d,o,s,null,null,w):(a(e.ec,e.fc,h,c,p,g,m,v,l,u,f,d,o,s-r.A,o,s,w),++i);b+2<y;b+=2)p=l,g=u,m=f,v=d,u+=t.Rc,d+=t.Rc,s+=2*r.A,a(h,(c+=2*t.fa)-t.fa,h,c,p,g,m,v,l,u,f,d,o,s-r.A,o,s,w);return c+=t.fa,t.j+y<t.o?(n(e.ec,e.fc,h,c,w),n(e.cc,e.dc,l,u,x),n(e.Mc,e.Nc,f,d,x),i--):1&y||a(h,c,null,null,l,u,f,d,l,u,f,d,o,s+r.A,null,null,w),i}function ut(t,i,n){var r=t.F,o=[t.J];if(null!=r){var s=t.U,a=i.ba.S,h=a==zn||a==Vn;i=i.ba.f.RGBA;var c=[0],l=t.ka;c[0]=t.T,t.Kb&&(0==l?--c[0]:(--l,o[0]-=t.width),t.j+t.ka+t.T==t.o&&(c[0]=t.o-t.j-l));var u=i.eb;l=i.fb+l*i.A,t=An(r,o[0],t.width,s,c,u,l+(h?0:3),i.A),e(n==c),t&&nt(a)&&Sn(u,l,h,s,c,i.A)}return 0}function ft(t){var e=t.ma,i=e.ba.S,n=11>i,r=i==Dn||i==Rn||i==zn||i==qn||12==i||nt(i);if(e.memory=null,e.Ib=null,e.Jb=null,e.Nd=null,!Ii(e.Oa,t,r?11:12))return 0;if(r&&nt(i)&&bi(),t.da)alert("todo:use_scaling");else{if(n){if(e.Ib=ct,t.Kb){if(i=t.U+1>>1,e.memory=o(t.U+2*i),null==e.memory)return 0;e.ec=e.memory,e.fc=0,e.cc=e.ec,e.dc=e.fc+t.U,e.Mc=e.cc,e.Nc=e.dc+i,e.Ib=lt,bi()}}else alert("todo:EmitYUV");r&&(e.Jb=ut,n&&mi())}if(n&&!Nr){for(t=0;256>t;++t)jr[t]=89858*(t-128)+Lr>>Ar,Ir[t]=-22014*(t-128)+Lr,Er[t]=-45773*(t-128),Fr[t]=113618*(t-128)+Lr>>Ar;for(t=Pr;t<Tr;++t)e=76283*(t-16)+Lr>>Ar,Mr[t-Pr]=Vt(e,255),Dr[t-Pr]=Vt(e+8>>4,15);Nr=1}return 1}function dt(t){var i=t.ma,n=t.U,r=t.T;return e(!(1&t.ka)),0>=n||0>=r?0:(n=i.Ib(t,i),null!=i.Jb&&i.Jb(t,i,n),i.Dc+=n,1)}function pt(t){t.ma.memory=null}function gt(t,e,i,n){return 47!=y(t,8)?0:(e[0]=y(t,14)+1,i[0]=y(t,14)+1,n[0]=y(t,1),0!=y(t,3)?0:!t.h)}function mt(t,e){if(4>t)return t+1;var i=t-2>>1;return(2+(1&t)<<i)+y(e,i)+1}function vt(t,e){return 120<e?e-120:1<=(i=((i=Zn[e-1])>>4)*t+(8-(15&i)))?i:1;var i}function bt(t,e,i){var n=_(i),r=t[e+=255&n].g-8;return 0<r&&(C(i,i.u+8),n=_(i),e+=t[e].value,e+=n&(1<<r)-1),C(i,i.u+t[e].g),t[e].value}function yt(t,i,n){return n.g+=t.g,n.value+=t.value<<i>>>0,e(8>=n.g),t.g}function wt(t,i,n){var r=t.xc;return e((i=0==r?0:t.vc[t.md*(n>>r)+(i>>r)])<t.Wb),t.Ya[i]}function xt(t,i,r,o){var s=t.ab,a=t.c*i,h=t.C;i=h+i;var c=r,l=o;for(o=t.Ta,r=t.Ua;0<s--;){var u=t.gc[s],f=h,d=i,p=c,g=l,m=(l=o,c=r,u.Ea);switch(e(f<d),e(d<=u.nc),u.hc){case 2:Gi(p,g,(d-f)*m,l,c);break;case 0:var v=f,b=d,y=l,w=c,x=(L=u).Ea;0==v&&(Hi(p,g,null,null,1,y,w),V(p,g+1,0,0,x-1,y,w+1),g+=x,w+=x,++v);for(var _=1<<L.b,S=_-1,C=D(x,L.b),A=L.K,L=L.w+(v>>L.b)*C;v<b;){var P=A,T=L,O=1;for(Vi(p,g,y,w-x,1,y,w);O<x;){var k=(O&~S)+_;k>x&&(k=x),(0,$i[P[T++]>>8&15])(p,g+ +O,y,w+O-x,k-O,y,w+O),O=k}g+=x,w+=x,++v&S||(L+=C)}d!=u.nc&&n(l,c-m,l,c+(d-f-1)*m,m);break;case 1:for(m=p,b=g,x=(p=u.Ea)-(w=p&~(y=(g=1<<u.b)-1)),v=D(p,u.b),_=u.K,u=u.w+(f>>u.b)*v;f<d;){for(S=_,C=u,A=new z,L=b+w,P=b+p;b<L;)X(S[C++],A),Zi(A,m,b,g,l,c),b+=g,c+=g;b<P&&(X(S[C++],A),Zi(A,m,b,x,l,c),b+=x,c+=x),++f&y||(u+=v)}break;case 3:if(p==l&&g==c&&0<u.b){for(b=l,p=m=c+(d-f)*m-(w=(d-f)*D(u.Ea,u.b)),g=l,y=c,v=[],w=(x=w)-1;0<=w;--w)v[w]=g[y+w];for(w=x-1;0<=w;--w)b[p+w]=v[w];Xi(u,f,d,l,m,l,c)}else Xi(u,f,d,p,g,l,c)}c=o,l=r}l!=r&&n(o,r,c,l,a)}function _t(t,i){var n=t.V,r=t.Ba+t.c*t.C,o=i-t.C;if(e(i<=t.l.o),e(16>=o),0<o){var s=t.l,a=t.Ta,h=t.Ua,c=s.width;if(xt(t,o,n,r),o=h=[h],e((n=t.C)<(r=i)),e(s.v<s.va),r>s.o&&(r=s.o),n<s.j){var l=s.j-n;n=s.j,o[0]+=l*c}if(n>=r?n=0:(o[0]+=4*s.v,s.ka=n-s.j,s.U=s.va-s.v,s.T=r-n,n=1),n){if(h=h[0],11>(n=t.ca).S){var u=n.f.RGBA,f=(r=n.S,o=s.U,s=s.T,l=u.eb,u.A),d=s;for(u=u.fb+t.Ma*u.A;0<d--;){var p=a,g=h,m=o,v=l,b=u;switch(r){case Mn:Qi(p,g,m,v,b);break;case Dn:tn(p,g,m,v,b);break;case Wn:tn(p,g,m,v,b),Sn(v,b,0,m,1,0);break;case Bn:rn(p,g,m,v,b);break;case Rn:et(p,g,m,v,b,1);break;case Hn:et(p,g,m,v,b,1),Sn(v,b,0,m,1,0);break;case zn:et(p,g,m,v,b,0);break;case Vn:et(p,g,m,v,b,0),Sn(v,b,1,m,1,0);break;case qn:en(p,g,m,v,b);break;case Gn:en(p,g,m,v,b),Cn(v,b,m,1,0);break;case Un:nn(p,g,m,v,b);break;default:e(0)}h+=c,u+=f}t.Ma+=s}else alert("todo:EmitRescaledRowsYUVA");e(t.Ma<=n.height)}}t.C=i,e(t.C<=t.i)}function St(t){var e;if(0<t.ua)return 0;for(e=0;e<t.Wb;++e){var i=t.Ya[e].G,n=t.Ya[e].H;if(0<i[1][n[1]+0].g||0<i[2][n[2]+0].g||0<i[3][n[3]+0].g)return 0}return 1}function Ct(t,i,n,r,o,s){if(0!=t.Z){var a=t.qd,h=t.rd;for(e(null!=mr[t.Z]);i<n;++i)mr[t.Z](a,h,r,o,r,o,s),a=r,h=o,o+=s;t.qd=a,t.rd=h}}function At(t,i){var n=t.l.ma,r=0==n.Z||1==n.Z?t.l.j:t.C;if(r=t.C<r?r:t.C,e(i<=t.l.o),i>r){var o=t.l.width,s=n.ca,a=n.tb+o*r,h=t.V,c=t.Ba+t.c*r,l=t.gc;e(1==t.ab),e(3==l[0].hc),Ki(l[0],r,i,h,c,s,a),Ct(n,r,i,s,a,o)}t.C=t.Ma=i}function Lt(t,i,n,r,o,s,a){var h=t.$/r,c=t.$%r,l=t.m,u=t.s,f=n+t.$,d=f;o=n+r*o;var p=n+r*s,g=280+u.ua,m=t.Pb?h:16777216,v=0<u.ua?u.Wa:null,b=u.wc,y=f<p?wt(u,c,h):null;e(t.C<s),e(p<=o);var w=!1;t:for(;;){for(;w||f<p;){var x=0;if(h>=m){var L=f-n;e((m=t).Pb),m.wd=m.m,m.xd=L,0<m.s.ua&&E(m.s.Wa,m.s.vb),m=h+tr}if(c&b||(y=wt(u,c,h)),e(null!=y),y.Qb&&(i[f]=y.qb,w=!0),!w)if(A(l),y.jc){x=l,L=i;var P=f,T=y.pd[_(x)&Bi-1];e(y.jc),256>T.g?(C(x,x.u+T.g),L[P]=T.value,x=0):(C(x,x.u+T.g-256),e(256<=T.value),x=T.value),0==x&&(w=!0)}else x=bt(y.G[0],y.H[0],l);if(l.h)break;if(w||256>x){if(!w)if(y.nd)i[f]=(y.qb|x<<8)>>>0;else{if(A(l),w=bt(y.G[1],y.H[1],l),A(l),L=bt(y.G[2],y.H[2],l),P=bt(y.G[3],y.H[3],l),l.h)break;i[f]=(P<<24|w<<16|x<<8|L)>>>0}if(w=!1,++f,++c>=r&&(c=0,++h,null!=a&&h<=s&&!(h%16)&&a(t,h),null!=v))for(;d<f;)x=i[d++],v.X[(506832829*x&4294967295)>>>v.Mb]=x}else if(280>x){if(x=mt(x-256,l),L=bt(y.G[4],y.H[4],l),A(l),L=vt(r,L=mt(L,l)),l.h)break;if(f-n<L||o-f<x)break t;for(P=0;P<x;++P)i[f+P]=i[f+P-L];for(f+=x,c+=x;c>=r;)c-=r,++h,null!=a&&h<=s&&!(h%16)&&a(t,h);if(e(f<=o),c&b&&(y=wt(u,c,h)),null!=v)for(;d<f;)x=i[d++],v.X[(506832829*x&4294967295)>>>v.Mb]=x}else{if(!(x<g))break t;for(w=x-280,e(null!=v);d<f;)x=i[d++],v.X[(506832829*x&4294967295)>>>v.Mb]=x;x=f,e(!(w>>>(L=v).Xa)),i[x]=L.X[w],w=!0}w||e(l.h==S(l))}if(t.Pb&&l.h&&f<o)e(t.m.h),t.a=5,t.m=t.wd,t.$=t.xd,0<t.s.ua&&E(t.s.vb,t.s.Wa);else{if(l.h)break t;null!=a&&a(t,h>s?s:h),t.a=0,t.$=f-n}return 1}return t.a=3,0}function Pt(t){e(null!=t),t.vc=null,t.yc=null,t.Ya=null;var i=t.Wa;null!=i&&(i.X=null),t.vb=null,e(null!=t)}function Tt(){var e=new si;return null==e?null:(e.a=0,e.xb=gr,it("Predictor","VP8LPredictors"),it("Predictor","VP8LPredictors_C"),it("PredictorAdd","VP8LPredictorsAdd"),it("PredictorAdd","VP8LPredictorsAdd_C"),Gi=G,Zi=Y,Qi=J,tn=$,en=Z,nn=Q,rn=tt,t.VP8LMapColor32b=Yi,t.VP8LMapColor8b=Ji,e)}function Ot(t,i,n,a,h){var c=1,f=[t],p=[i],g=a.m,m=a.s,v=null,b=0;t:for(;;){if(n)for(;c&&y(g,1);){var w=f,x=p,S=a,L=1,P=S.m,T=S.gc[S.ab],O=y(P,2);if(S.Oc&1<<O)c=0;else{switch(S.Oc|=1<<O,T.hc=O,T.Ea=w[0],T.nc=x[0],T.K=[null],++S.ab,e(4>=S.ab),O){case 0:case 1:T.b=y(P,3)+2,L=Ot(D(T.Ea,T.b),D(T.nc,T.b),0,S,T.K),T.K=T.K[0];break;case 3:var k,N=y(P,8)+1,j=16<N?0:4<N?1:2<N?2:3;if(w[0]=D(T.Ea,j),T.b=j,k=L=Ot(N,1,0,S,T.K)){var E,I=N,M=T,R=1<<(8>>M.b),z=o(R);if(null==z)k=0;else{var q=M.K[0],U=M.w;for(z[0]=M.K[0][0],E=1;E<1*I;++E)z[E]=B(q[U+E],z[E-1]);for(;E<4*R;++E)z[E]=0;M.K[0]=null,M.K[0]=z,k=1}}L=k;break;case 2:break;default:e(0)}c=L}}if(f=f[0],p=p[0],c&&y(g,1)&&!(c=1<=(b=y(g,4))&&11>=b)){a.a=3;break t}var W;if(W=c)e:{var H,V,G,X=a,Y=f,K=p,J=b,$=n,Z=X.m,Q=X.s,tt=[null],et=1,it=0,nt=Qn[J];i:for(;;){if($&&y(Z,1)){var rt=y(Z,3)+2,ot=D(Y,rt),st=D(K,rt),at=ot*st;if(!Ot(ot,st,0,X,tt))break i;for(tt=tt[0],Q.xc=rt,H=0;H<at;++H){var ht=tt[H]>>8&65535;tt[H]=ht,ht>=et&&(et=ht+1)}}if(Z.h)break i;for(V=0;5>V;++V){var ct=Kn[V];!V&&0<J&&(ct+=1<<J),it<ct&&(it=ct)}var lt=s(et*nt,u),ut=et,ft=s(ut,d);if(null==ft)var dt=null;else e(65536>=ut),dt=ft;var pt=o(it);if(null==dt||null==pt||null==lt){X.a=1;break i}var gt=lt;for(H=G=0;H<et;++H){var mt=dt[H],vt=mt.G,bt=mt.H,wt=0,xt=1,_t=0;for(V=0;5>V;++V){ct=Kn[V],vt[V]=gt,bt[V]=G,!V&&0<J&&(ct+=1<<J);n:{var St,Ct=ct,At=X,Tt=pt,kt=gt,Nt=G,jt=0,Ft=At.m,Et=y(Ft,1);if(r(Tt,0,0,Ct),Et){var It=y(Ft,1)+1,Mt=y(Ft,1),Dt=y(Ft,0==Mt?1:8);Tt[Dt]=1,2==It&&(Tt[Dt=y(Ft,8)]=1);var Bt=1}else{var Rt=o(19),zt=y(Ft,4)+4;if(19<zt){At.a=3;var qt=0;break n}for(St=0;St<zt;++St)Rt[$n[St]]=y(Ft,3);var Ut=void 0,Wt=void 0,Ht=At,Vt=Rt,Gt=Ct,Xt=Tt,Yt=0,Kt=Ht.m,Jt=8,$t=s(128,u);r:for(;l($t,0,7,Vt,19);){if(y(Kt,1)){var Zt=2+2*y(Kt,3);if((Ut=2+y(Kt,Zt))>Gt)break r}else Ut=Gt;for(Wt=0;Wt<Gt&&Ut--;){A(Kt);var Qt=$t[0+(127&_(Kt))];C(Kt,Kt.u+Qt.g);var te=Qt.value;if(16>te)Xt[Wt++]=te,0!=te&&(Jt=te);else{var ee=16==te,ie=te-16,ne=Yn[ie],re=y(Kt,Xn[ie])+ne;if(Wt+re>Gt)break r;for(var oe=ee?Jt:0;0<re--;)Xt[Wt++]=oe}}Yt=1;break r}Yt||(Ht.a=3),Bt=Yt}(Bt=Bt&&!Ft.h)&&(jt=l(kt,Nt,8,Tt,Ct)),Bt&&0!=jt?qt=jt:(At.a=3,qt=0)}if(0==qt)break i;if(xt&&1==Jn[V]&&(xt=0==gt[G].g),wt+=gt[G].g,G+=qt,3>=V){var se,ae=pt[0];for(se=1;se<ct;++se)pt[se]>ae&&(ae=pt[se]);_t+=ae}}if(mt.nd=xt,mt.Qb=0,xt&&(mt.qb=(vt[3][bt[3]+0].value<<24|vt[1][bt[1]+0].value<<16|vt[2][bt[2]+0].value)>>>0,0==wt&&256>vt[0][bt[0]+0].value&&(mt.Qb=1,mt.qb+=vt[0][bt[0]+0].value<<8)),mt.jc=!mt.Qb&&6>_t,mt.jc){var he,ce=mt;for(he=0;he<Bi;++he){var le=he,ue=ce.pd[le],fe=ce.G[0][ce.H[0]+le];256<=fe.value?(ue.g=fe.g+256,ue.value=fe.value):(ue.g=0,ue.value=0,le>>=yt(fe,8,ue),le>>=yt(ce.G[1][ce.H[1]+le],16,ue),le>>=yt(ce.G[2][ce.H[2]+le],0,ue),yt(ce.G[3][ce.H[3]+le],24,ue))}}}Q.vc=tt,Q.Wb=et,Q.Ya=dt,Q.yc=lt,W=1;break e}W=0}if(!(c=W)){a.a=3;break t}if(0<b){if(m.ua=1<<b,!F(m.Wa,b)){a.a=1,c=0;break t}}else m.ua=0;var de=a,pe=f,ge=p,me=de.s,ve=me.xc;if(de.c=pe,de.i=ge,me.md=D(pe,ve),me.wc=0==ve?-1:(1<<ve)-1,n){a.xb=pr;break t}if(null==(v=o(f*p))){a.a=1,c=0;break t}c=(c=Lt(a,v,0,f,p,p,null))&&!g.h;break t}return c?(null!=h?h[0]=v:(e(null==v),e(n)),a.$=0,n||Pt(m)):Pt(m),c}function kt(t,i){var n=t.c*t.i,r=n+i+16*i;return e(t.c<=i),t.V=o(r),null==t.V?(t.Ta=null,t.Ua=0,t.a=1,0):(t.Ta=t.V,t.Ua=t.Ba+n+i,1)}function Nt(t,i){var n=t.C,r=i-n,o=t.V,s=t.Ba+t.c*n;for(e(i<=t.l.o);0<r;){var a=16<r?16:r,h=t.l.ma,c=t.l.width,l=c*a,u=h.ca,f=h.tb+c*n,d=t.Ta,p=t.Ua;xt(t,a,o,s),Ln(d,p,u,f,l),Ct(h,n,n+a,u,f,c),r-=a,o+=a*t.c,n+=a}e(n==i),t.C=t.Ma=i}function jt(){this.ub=this.yd=this.td=this.Rb=0}function Ft(){this.Kd=this.Ld=this.Ud=this.Td=this.i=this.c=0}function Et(){this.Fb=this.Bb=this.Cb=0,this.Zb=o(4),this.Lb=o(4)}function It(){this.Yb=function(){var t=[];return function t(e,i,n){for(var r=n[i],o=0;o<r&&(e.push(n.length>i+1?[]:0),!(n.length<i+1));o++)t(e[o],i+1,n)}(t,0,[3,11]),t}()}function Mt(){this.jb=o(3),this.Wc=a([4,8],It),this.Xc=a([4,17],It)}function Dt(){this.Pc=this.wb=this.Tb=this.zd=0,this.vd=new o(4),this.od=new o(4)}function Bt(){this.ld=this.La=this.dd=this.tc=0}function Rt(){this.Na=this.la=0}function zt(){this.Sc=[0,0],this.Eb=[0,0],this.Qc=[0,0],this.ia=this.lc=0}function qt(){this.ad=o(384),this.Za=0,this.Ob=o(16),this.$b=this.Ad=this.ia=this.Gc=this.Hc=this.Dd=0}function Ut(){this.uc=this.M=this.Nb=0,this.wa=Array(new Bt),this.Y=0,this.ya=Array(new qt),this.aa=0,this.l=new Gt}function Wt(){this.y=o(16),this.f=o(8),this.ea=o(8)}function Ht(){this.cb=this.a=0,this.sc="",this.m=new w,this.Od=new jt,this.Kc=new Ft,this.ed=new Dt,this.Qa=new Et,this.Ic=this.$c=this.Aa=0,this.D=new Ut,this.Xb=this.Va=this.Hb=this.zb=this.yb=this.Ub=this.za=0,this.Jc=s(8,w),this.ia=0,this.pb=s(4,zt),this.Pa=new Mt,this.Bd=this.kc=0,this.Ac=[],this.Bc=0,this.zc=[0,0,0,0],this.Gd=Array(new Wt),this.Hd=0,this.rb=Array(new Rt),this.sb=0,this.wa=Array(new Bt),this.Y=0,this.oc=[],this.pc=0,this.sa=[],this.ta=0,this.qa=[],this.ra=0,this.Ha=[],this.B=this.R=this.Ia=0,this.Ec=[],this.M=this.ja=this.Vb=this.Fc=0,this.ya=Array(new qt),this.L=this.aa=0,this.gd=a([4,2],Bt),this.ga=null,this.Fa=[],this.Cc=this.qc=this.P=0,this.Gb=[],this.Uc=0,this.mb=[],this.nb=0,this.rc=[],this.Ga=this.Vc=0}function Vt(t,e){return 0>t?0:t>e?e:t}function Gt(){this.T=this.U=this.ka=this.height=this.width=0,this.y=[],this.f=[],this.ea=[],this.Rc=this.fa=this.W=this.N=this.O=0,this.ma="void",this.put="VP8IoPutHook",this.ac="VP8IoSetupHook",this.bc="VP8IoTeardownHook",this.ha=this.Kb=0,this.data=[],this.hb=this.ib=this.da=this.o=this.j=this.va=this.v=this.Da=this.ob=this.w=0,this.F=[],this.J=0}function Xt(){var t=new Ht;return null!=t&&(t.a=0,t.sc="OK",t.cb=0,t.Xb=0,nr||(nr=$t)),t}function Yt(t,e,i){return 0==t.a&&(t.a=e,t.sc=i,t.cb=0),0}function Kt(t,e,i){return 3<=i&&157==t[e+0]&&1==t[e+1]&&42==t[e+2]}function Jt(t,i){if(null==t)return 0;if(t.a=0,t.sc="OK",null==i)return Yt(t,2,"null VP8Io passed to VP8GetHeaders()");var n=i.data,o=i.w,s=i.ha;if(4>s)return Yt(t,7,"Truncated header.");var a=n[o+0]|n[o+1]<<8|n[o+2]<<16,h=t.Od;if(h.Rb=!(1&a),h.td=a>>1&7,h.yd=a>>4&1,h.ub=a>>5,3<h.td)return Yt(t,3,"Incorrect keyframe parameters.");if(!h.yd)return Yt(t,4,"Frame not displayable.");o+=3,s-=3;var c=t.Kc;if(h.Rb){if(7>s)return Yt(t,7,"cannot parse picture header");if(!Kt(n,o,s))return Yt(t,3,"Bad code word");c.c=16383&(n[o+4]<<8|n[o+3]),c.Td=n[o+4]>>6,c.i=16383&(n[o+6]<<8|n[o+5]),c.Ud=n[o+6]>>6,o+=7,s-=7,t.za=c.c+15>>4,t.Ub=c.i+15>>4,i.width=c.c,i.height=c.i,i.Da=0,i.j=0,i.v=0,i.va=i.width,i.o=i.height,i.da=0,i.ib=i.width,i.hb=i.height,i.U=i.width,i.T=i.height,r((a=t.Pa).jb,0,255,a.jb.length),e(null!=(a=t.Qa)),a.Cb=0,a.Bb=0,a.Fb=1,r(a.Zb,0,0,a.Zb.length),r(a.Lb,0,0,a.Lb)}if(h.ub>s)return Yt(t,7,"bad partition length");p(a=t.m,n,o,h.ub),o+=h.ub,s-=h.ub,h.Rb&&(c.Ld=P(a),c.Kd=P(a)),c=t.Qa;var l,u=t.Pa;if(e(null!=a),e(null!=c),c.Cb=P(a),c.Cb){if(c.Bb=P(a),P(a)){for(c.Fb=P(a),l=0;4>l;++l)c.Zb[l]=P(a)?m(a,7):0;for(l=0;4>l;++l)c.Lb[l]=P(a)?m(a,6):0}if(c.Bb)for(l=0;3>l;++l)u.jb[l]=P(a)?g(a,8):255}else c.Bb=0;if(a.Ka)return Yt(t,3,"cannot parse segment header");if((c=t.ed).zd=P(a),c.Tb=g(a,6),c.wb=g(a,3),c.Pc=P(a),c.Pc&&P(a)){for(u=0;4>u;++u)P(a)&&(c.vd[u]=m(a,6));for(u=0;4>u;++u)P(a)&&(c.od[u]=m(a,6))}if(t.L=0==c.Tb?0:c.zd?1:2,a.Ka)return Yt(t,3,"cannot parse filter header");var f=s;if(s=l=o,o=l+f,c=f,t.Xb=(1<<g(t.m,2))-1,f<3*(u=t.Xb))n=7;else{for(l+=3*u,c-=3*u,f=0;f<u;++f){var d=n[s+0]|n[s+1]<<8|n[s+2]<<16;d>c&&(d=c),p(t.Jc[+f],n,l,d),l+=d,c-=d,s+=3}p(t.Jc[+u],n,l,c),n=l<o?0:5}if(0!=n)return Yt(t,n,"cannot parse partitions");for(n=g(l=t.m,7),s=P(l)?m(l,4):0,o=P(l)?m(l,4):0,c=P(l)?m(l,4):0,u=P(l)?m(l,4):0,l=P(l)?m(l,4):0,f=t.Qa,d=0;4>d;++d){if(f.Cb){var v=f.Zb[d];f.Fb||(v+=n)}else{if(0<d){t.pb[d]=t.pb[0];continue}v=n}var b=t.pb[d];b.Sc[0]=er[Vt(v+s,127)],b.Sc[1]=ir[Vt(v+0,127)],b.Eb[0]=2*er[Vt(v+o,127)],b.Eb[1]=101581*ir[Vt(v+c,127)]>>16,8>b.Eb[1]&&(b.Eb[1]=8),b.Qc[0]=er[Vt(v+u,117)],b.Qc[1]=ir[Vt(v+l,127)],b.lc=v+l}if(!h.Rb)return Yt(t,4,"Not a key frame.");for(P(a),h=t.Pa,n=0;4>n;++n){for(s=0;8>s;++s)for(o=0;3>o;++o)for(c=0;11>c;++c)u=T(a,cr[n][s][o][c])?g(a,8):ar[n][s][o][c],h.Wc[n][s].Yb[o][c]=u;for(s=0;17>s;++s)h.Xc[n][s]=h.Wc[n][lr[s]]}return t.kc=P(a),t.kc&&(t.Bd=g(a,8)),t.cb=1}function $t(t,e,i,n,r,o,s){var a=e[r].Yb[i];for(i=0;16>r;++r){if(!T(t,a[i+0]))return r;for(;!T(t,a[i+1]);)if(a=e[++r].Yb[0],i=0,16==r)return 16;var h=e[r+1].Yb;if(T(t,a[i+2])){var c=t,l=0;if(T(c,(f=a)[(u=i)+3]))if(T(c,f[u+6])){for(a=0,u=2*(l=T(c,f[u+8]))+(f=T(c,f[u+9+l])),l=0,f=rr[u];f[a];++a)l+=l+T(c,f[a]);l+=3+(8<<u)}else T(c,f[u+7])?(l=7+2*T(c,165),l+=T(c,145)):l=5+T(c,159);else l=T(c,f[u+4])?3+T(c,f[u+5]):2;a=h[2]}else l=1,a=h[1];h=s+or[r],0>(c=t).b&&L(c);var u,f=c.b,d=(u=c.Ca>>1)-(c.I>>f)>>31;--c.b,c.Ca+=d,c.Ca|=1,c.I-=(u+1&d)<<f,o[h]=((l^d)-d)*n[(0<r)+0]}return 16}function Zt(t){var e=t.rb[t.sb-1];e.la=0,e.Na=0,r(t.zc,0,0,t.zc.length),t.ja=0}function Qt(t,i){if(null==t)return 0;if(null==i)return Yt(t,2,"NULL VP8Io parameter in VP8Decode().");if(!t.cb&&!Jt(t,i))return 0;if(e(t.cb),null==i.ac||i.ac(i)){i.ob&&(t.L=0);var a=Rr[t.L];if(2==t.L?(t.yb=0,t.zb=0):(t.yb=i.v-a>>4,t.zb=i.j-a>>4,0>t.yb&&(t.yb=0),0>t.zb&&(t.zb=0)),t.Va=i.o+15+a>>4,t.Hb=i.va+15+a>>4,t.Hb>t.za&&(t.Hb=t.za),t.Va>t.Ub&&(t.Va=t.Ub),0<t.L){var h=t.ed;for(a=0;4>a;++a){var c;if(t.Qa.Cb){var l=t.Qa.Lb[a];t.Qa.Fb||(l+=h.Tb)}else l=h.Tb;for(c=0;1>=c;++c){var u=t.gd[a][c],f=l;if(h.Pc&&(f+=h.vd[0],c&&(f+=h.od[0])),0<(f=0>f?0:63<f?63:f)){var d=f;0<h.wb&&(d=4<h.wb?d>>2:d>>1)>9-h.wb&&(d=9-h.wb),1>d&&(d=1),u.dd=d,u.tc=2*f+d,u.ld=40<=f?2:15<=f?1:0}else u.tc=0;u.La=c}}}a=0}else Yt(t,6,"Frame setup failed"),a=t.a;if(a=0==a){if(a){t.$c=0,0<t.Aa||(t.Ic=qr);t:{a=t.Ic,h=4*(d=t.za);var p=32*d,g=d+1,m=0<t.L?d*(0<t.Aa?2:1):0,v=(2==t.Aa?2:1)*d;if((u=h+832+(c=3*(16*a+Rr[t.L])/2*p)+(l=null!=t.Fa&&0<t.Fa.length?t.Kc.c*t.Kc.i:0))!=u)a=0;else{if(u>t.Vb){if(t.Vb=0,t.Ec=o(u),t.Fc=0,null==t.Ec){a=Yt(t,1,"no memory during frame initialization.");break t}t.Vb=u}u=t.Ec,f=t.Fc,t.Ac=u,t.Bc=f,f+=h,t.Gd=s(p,Wt),t.Hd=0,t.rb=s(g+1,Rt),t.sb=1,t.wa=m?s(m,Bt):null,t.Y=0,t.D.Nb=0,t.D.wa=t.wa,t.D.Y=t.Y,0<t.Aa&&(t.D.Y+=d),e(!0),t.oc=u,t.pc=f,f+=832,t.ya=s(v,qt),t.aa=0,t.D.ya=t.ya,t.D.aa=t.aa,2==t.Aa&&(t.D.aa+=d),t.R=16*d,t.B=8*d,d=(p=Rr[t.L])*t.R,p=p/2*t.B,t.sa=u,t.ta=f+d,t.qa=t.sa,t.ra=t.ta+16*a*t.R+p,t.Ha=t.qa,t.Ia=t.ra+8*a*t.B+p,t.$c=0,f+=c,t.mb=l?u:null,t.nb=l?f:null,e(f+l<=t.Fc+t.Vb),Zt(t),r(t.Ac,t.Bc,0,h),a=1}}if(a){if(i.ka=0,i.y=t.sa,i.O=t.ta,i.f=t.qa,i.N=t.ra,i.ea=t.Ha,i.Vd=t.Ia,i.fa=t.R,i.Rc=t.B,i.F=null,i.J=0,!Nn){for(a=-255;255>=a;++a)Pn[255+a]=0>a?-a:a;for(a=-1020;1020>=a;++a)Tn[1020+a]=-128>a?-128:127<a?127:a;for(a=-112;112>=a;++a)On[112+a]=-16>a?-16:15<a?15:a;for(a=-255;510>=a;++a)kn[255+a]=0>a?0:255<a?255:a;Nn=1}on=ce,sn=oe,hn=se,cn=ae,ln=he,an=re,un=Ye,fn=Ke,dn=Ze,pn=Qe,gn=Je,mn=$e,vn=ti,bn=ei,yn=Ue,wn=We,xn=He,_n=Ve,fr[0]=Ce,fr[1]=ue,fr[2]=_e,fr[3]=Se,fr[4]=Ae,fr[5]=Pe,fr[6]=Le,fr[7]=Te,fr[8]=ke,fr[9]=Oe,ur[0]=ve,ur[1]=de,ur[2]=pe,ur[3]=ge,ur[4]=be,ur[5]=ye,ur[6]=we,dr[0]=Ee,dr[1]=fe,dr[2]=Ne,dr[3]=je,dr[4]=Me,dr[5]=Ie,dr[6]=De,a=1}else a=0}a&&(a=function(t,i){for(t.M=0;t.M<t.Va;++t.M){var s,a=t.Jc[t.M&t.Xb],h=t.m,c=t;for(s=0;s<c.za;++s){var l=h,u=c,f=u.Ac,d=u.Bc+4*s,p=u.zc,g=u.ya[u.aa+s];if(u.Qa.Bb?g.$b=T(l,u.Pa.jb[0])?2+T(l,u.Pa.jb[2]):T(l,u.Pa.jb[1]):g.$b=0,u.kc&&(g.Ad=T(l,u.Bd)),g.Za=!T(l,145)+0,g.Za){var m=g.Ob,v=0;for(u=0;4>u;++u){var b,y=p[0+u];for(b=0;4>b;++b){y=hr[f[d+b]][y];for(var w=sr[T(l,y[0])];0<w;)w=sr[2*w+T(l,y[w])];y=-w,f[d+b]=y}n(m,v,f,d,4),v+=4,p[0+u]=y}}else y=T(l,156)?T(l,128)?1:3:T(l,163)?2:0,g.Ob[0]=y,r(f,d,y,4),r(p,0,y,4);g.Dd=T(l,142)?T(l,114)?T(l,183)?1:3:2:0}if(c.m.Ka)return Yt(t,7,"Premature end-of-partition0 encountered.");for(;t.ja<t.za;++t.ja){if(c=a,l=(h=t).rb[h.sb-1],f=h.rb[h.sb+h.ja],s=h.ya[h.aa+h.ja],d=h.kc?s.Ad:0)l.la=f.la=0,s.Za||(l.Na=f.Na=0),s.Hc=0,s.Gc=0,s.ia=0;else{var x,_;if(l=f,f=c,d=h.Pa.Xc,p=h.ya[h.aa+h.ja],g=h.pb[p.$b],u=p.ad,m=0,v=h.rb[h.sb-1],y=b=0,r(u,m,0,384),p.Za)var S=0,C=d[3];else{w=o(16);var A=l.Na+v.Na;if(A=nr(f,d[1],A,g.Eb,0,w,0),l.Na=v.Na=(0<A)+0,1<A)on(w,0,u,m);else{var L=w[0]+3>>3;for(w=0;256>w;w+=16)u[m+w]=L}S=1,C=d[0]}var P=15&l.la,O=15&v.la;for(w=0;4>w;++w){var k=1&O;for(L=_=0;4>L;++L)P=P>>1|(k=(A=nr(f,C,A=k+(1&P),g.Sc,S,u,m))>S)<<7,_=_<<2|(3<A?3:1<A?2:0!=u[m+0]),m+=16;P>>=4,O=O>>1|k<<7,b=(b<<8|_)>>>0}for(C=P,S=O>>4,x=0;4>x;x+=2){for(_=0,P=l.la>>4+x,O=v.la>>4+x,w=0;2>w;++w){for(k=1&O,L=0;2>L;++L)A=k+(1&P),P=P>>1|(k=0<(A=nr(f,d[2],A,g.Qc,0,u,m)))<<3,_=_<<2|(3<A?3:1<A?2:0!=u[m+0]),m+=16;P>>=2,O=O>>1|k<<5}y|=_<<4*x,C|=P<<4<<x,S|=(240&O)<<x}l.la=C,v.la=S,p.Hc=b,p.Gc=y,p.ia=43690&y?0:g.ia,d=!(b|y)}if(0<h.L&&(h.wa[h.Y+h.ja]=h.gd[s.$b][s.Za],h.wa[h.Y+h.ja].La|=!d),c.Ka)return Yt(t,7,"Premature end-of-file encountered.")}if(Zt(t),h=i,c=1,s=(a=t).D,l=0<a.L&&a.M>=a.zb&&a.M<=a.Va,0==a.Aa)t:{if(s.M=a.M,s.uc=l,Fi(a,s),c=1,s=(_=a.D).Nb,l=(y=Rr[a.L])*a.R,f=y/2*a.B,w=16*s*a.R,L=8*s*a.B,d=a.sa,p=a.ta-l+w,g=a.qa,u=a.ra-f+L,m=a.Ha,v=a.Ia-f+L,O=0==(P=_.M),b=P>=a.Va-1,2==a.Aa&&Fi(a,_),_.uc)for(k=(A=a).D.M,e(A.D.uc),_=A.yb;_<A.Hb;++_){S=_,C=k;var N=(j=(q=A).D).Nb;x=q.R;var j=j.wa[j.Y+S],F=q.sa,E=q.ta+16*N*x+16*S,I=j.dd,M=j.tc;if(0!=M)if(e(3<=M),1==q.L)0<S&&wn(F,E,x,M+4),j.La&&_n(F,E,x,M),0<C&&yn(F,E,x,M+4),j.La&&xn(F,E,x,M);else{var D=q.B,B=q.qa,R=q.ra+8*N*D+8*S,z=q.Ha,q=q.Ia+8*N*D+8*S;N=j.ld,0<S&&(fn(F,E,x,M+4,I,N),pn(B,R,z,q,D,M+4,I,N)),j.La&&(mn(F,E,x,M,I,N),bn(B,R,z,q,D,M,I,N)),0<C&&(un(F,E,x,M+4,I,N),dn(B,R,z,q,D,M+4,I,N)),j.La&&(gn(F,E,x,M,I,N),vn(B,R,z,q,D,M,I,N))}}if(a.ia&&alert("todo:DitherRow"),null!=h.put){if(_=16*P,P=16*(P+1),O?(h.y=a.sa,h.O=a.ta+w,h.f=a.qa,h.N=a.ra+L,h.ea=a.Ha,h.W=a.Ia+L):(_-=y,h.y=d,h.O=p,h.f=g,h.N=u,h.ea=m,h.W=v),b||(P-=y),P>h.o&&(P=h.o),h.F=null,h.J=null,null!=a.Fa&&0<a.Fa.length&&_<P&&(h.J=ui(a,h,_,P-_),h.F=a.mb,null==h.F&&0==h.F.length)){c=Yt(a,3,"Could not decode alpha data.");break t}_<h.j&&(y=h.j-_,_=h.j,e(!(1&y)),h.O+=a.R*y,h.N+=a.B*(y>>1),h.W+=a.B*(y>>1),null!=h.F&&(h.J+=h.width*y)),_<P&&(h.O+=h.v,h.N+=h.v>>1,h.W+=h.v>>1,null!=h.F&&(h.J+=h.v),h.ka=_-h.j,h.U=h.va-h.v,h.T=P-_,c=h.put(h))}s+1!=a.Ic||b||(n(a.sa,a.ta-l,d,p+16*a.R,l),n(a.qa,a.ra-f,g,u+8*a.B,f),n(a.Ha,a.Ia-f,m,v+8*a.B,f))}if(!c)return Yt(t,6,"Output aborted.")}return 1}(t,i)),null!=i.bc&&i.bc(i),a&=1}return a?(t.cb=0,a):0}function te(t,e,i,n,r){r=t[e+i+32*n]+(r>>3),t[e+i+32*n]=-256&r?0>r?0:255:r}function ee(t,e,i,n,r,o){te(t,e,0,i,n+r),te(t,e,1,i,n+o),te(t,e,2,i,n-o),te(t,e,3,i,n-r)}function ie(t){return(20091*t>>16)+t}function ne(t,e,i,n){var r,s=0,a=o(16);for(r=0;4>r;++r){var h=t[e+0]+t[e+8],c=t[e+0]-t[e+8],l=(35468*t[e+4]>>16)-ie(t[e+12]),u=ie(t[e+4])+(35468*t[e+12]>>16);a[s+0]=h+u,a[s+1]=c+l,a[s+2]=c-l,a[s+3]=h-u,s+=4,e++}for(r=s=0;4>r;++r)h=(t=a[s+0]+4)+a[s+8],c=t-a[s+8],l=(35468*a[s+4]>>16)-ie(a[s+12]),te(i,n,0,0,h+(u=ie(a[s+4])+(35468*a[s+12]>>16))),te(i,n,1,0,c+l),te(i,n,2,0,c-l),te(i,n,3,0,h-u),s++,n+=32}function re(t,e,i,n){var r=t[e+0]+4,o=35468*t[e+4]>>16,s=ie(t[e+4]),a=35468*t[e+1]>>16;ee(i,n,0,r+s,t=ie(t[e+1]),a),ee(i,n,1,r+o,t,a),ee(i,n,2,r-o,t,a),ee(i,n,3,r-s,t,a)}function oe(t,e,i,n,r){ne(t,e,i,n),r&&ne(t,e+16,i,n+4)}function se(t,e,i,n){sn(t,e+0,i,n,1),sn(t,e+32,i,n+128,1)}function ae(t,e,i,n){var r;for(t=t[e+0]+4,r=0;4>r;++r)for(e=0;4>e;++e)te(i,n,e,r,t)}function he(t,e,i,n){t[e+0]&&cn(t,e+0,i,n),t[e+16]&&cn(t,e+16,i,n+4),t[e+32]&&cn(t,e+32,i,n+128),t[e+48]&&cn(t,e+48,i,n+128+4)}function ce(t,e,i,n){var r,s=o(16);for(r=0;4>r;++r){var a=t[e+0+r]+t[e+12+r],h=t[e+4+r]+t[e+8+r],c=t[e+4+r]-t[e+8+r],l=t[e+0+r]-t[e+12+r];s[0+r]=a+h,s[8+r]=a-h,s[4+r]=l+c,s[12+r]=l-c}for(r=0;4>r;++r)a=(t=s[0+4*r]+3)+s[3+4*r],h=s[1+4*r]+s[2+4*r],c=s[1+4*r]-s[2+4*r],l=t-s[3+4*r],i[n+0]=a+h>>3,i[n+16]=l+c>>3,i[n+32]=a-h>>3,i[n+48]=l-c>>3,n+=64}function le(t,e,i){var n,r=e-32,o=En,s=255-t[r-1];for(n=0;n<i;++n){var a,h=o,c=s+t[e-1];for(a=0;a<i;++a)t[e+a]=h[c+t[r+a]];e+=32}}function ue(t,e){le(t,e,4)}function fe(t,e){le(t,e,8)}function de(t,e){le(t,e,16)}function pe(t,e){var i;for(i=0;16>i;++i)n(t,e+32*i,t,e-32,16)}function ge(t,e){var i;for(i=16;0<i;--i)r(t,e,t[e-1],16),e+=32}function me(t,e,i){var n;for(n=0;16>n;++n)r(e,i+32*n,t,16)}function ve(t,e){var i,n=16;for(i=0;16>i;++i)n+=t[e-1+32*i]+t[e+i-32];me(n>>5,t,e)}function be(t,e){var i,n=8;for(i=0;16>i;++i)n+=t[e-1+32*i];me(n>>4,t,e)}function ye(t,e){var i,n=8;for(i=0;16>i;++i)n+=t[e+i-32];me(n>>4,t,e)}function we(t,e){me(128,t,e)}function xe(t,e,i){return t+2*e+i+2>>2}function _e(t,e){var i,r=e-32;for(r=new Uint8Array([xe(t[r-1],t[r+0],t[r+1]),xe(t[r+0],t[r+1],t[r+2]),xe(t[r+1],t[r+2],t[r+3]),xe(t[r+2],t[r+3],t[r+4])]),i=0;4>i;++i)n(t,e+32*i,r,0,r.length)}function Se(t,e){var i=t[e-1],n=t[e-1+32],r=t[e-1+64],o=t[e-1+96];O(t,e+0,16843009*xe(t[e-1-32],i,n)),O(t,e+32,16843009*xe(i,n,r)),O(t,e+64,16843009*xe(n,r,o)),O(t,e+96,16843009*xe(r,o,o))}function Ce(t,e){var i,n=4;for(i=0;4>i;++i)n+=t[e+i-32]+t[e-1+32*i];for(n>>=3,i=0;4>i;++i)r(t,e+32*i,n,4)}function Ae(t,e){var i=t[e-1+0],n=t[e-1+32],r=t[e-1+64],o=t[e-1-32],s=t[e+0-32],a=t[e+1-32],h=t[e+2-32],c=t[e+3-32];t[e+0+96]=xe(n,r,t[e-1+96]),t[e+1+96]=t[e+0+64]=xe(i,n,r),t[e+2+96]=t[e+1+64]=t[e+0+32]=xe(o,i,n),t[e+3+96]=t[e+2+64]=t[e+1+32]=t[e+0+0]=xe(s,o,i),t[e+3+64]=t[e+2+32]=t[e+1+0]=xe(a,s,o),t[e+3+32]=t[e+2+0]=xe(h,a,s),t[e+3+0]=xe(c,h,a)}function Le(t,e){var i=t[e+1-32],n=t[e+2-32],r=t[e+3-32],o=t[e+4-32],s=t[e+5-32],a=t[e+6-32],h=t[e+7-32];t[e+0+0]=xe(t[e+0-32],i,n),t[e+1+0]=t[e+0+32]=xe(i,n,r),t[e+2+0]=t[e+1+32]=t[e+0+64]=xe(n,r,o),t[e+3+0]=t[e+2+32]=t[e+1+64]=t[e+0+96]=xe(r,o,s),t[e+3+32]=t[e+2+64]=t[e+1+96]=xe(o,s,a),t[e+3+64]=t[e+2+96]=xe(s,a,h),t[e+3+96]=xe(a,h,h)}function Pe(t,e){var i=t[e-1+0],n=t[e-1+32],r=t[e-1+64],o=t[e-1-32],s=t[e+0-32],a=t[e+1-32],h=t[e+2-32],c=t[e+3-32];t[e+0+0]=t[e+1+64]=o+s+1>>1,t[e+1+0]=t[e+2+64]=s+a+1>>1,t[e+2+0]=t[e+3+64]=a+h+1>>1,t[e+3+0]=h+c+1>>1,t[e+0+96]=xe(r,n,i),t[e+0+64]=xe(n,i,o),t[e+0+32]=t[e+1+96]=xe(i,o,s),t[e+1+32]=t[e+2+96]=xe(o,s,a),t[e+2+32]=t[e+3+96]=xe(s,a,h),t[e+3+32]=xe(a,h,c)}function Te(t,e){var i=t[e+0-32],n=t[e+1-32],r=t[e+2-32],o=t[e+3-32],s=t[e+4-32],a=t[e+5-32],h=t[e+6-32],c=t[e+7-32];t[e+0+0]=i+n+1>>1,t[e+1+0]=t[e+0+64]=n+r+1>>1,t[e+2+0]=t[e+1+64]=r+o+1>>1,t[e+3+0]=t[e+2+64]=o+s+1>>1,t[e+0+32]=xe(i,n,r),t[e+1+32]=t[e+0+96]=xe(n,r,o),t[e+2+32]=t[e+1+96]=xe(r,o,s),t[e+3+32]=t[e+2+96]=xe(o,s,a),t[e+3+64]=xe(s,a,h),t[e+3+96]=xe(a,h,c)}function Oe(t,e){var i=t[e-1+0],n=t[e-1+32],r=t[e-1+64],o=t[e-1+96];t[e+0+0]=i+n+1>>1,t[e+2+0]=t[e+0+32]=n+r+1>>1,t[e+2+32]=t[e+0+64]=r+o+1>>1,t[e+1+0]=xe(i,n,r),t[e+3+0]=t[e+1+32]=xe(n,r,o),t[e+3+32]=t[e+1+64]=xe(r,o,o),t[e+3+64]=t[e+2+64]=t[e+0+96]=t[e+1+96]=t[e+2+96]=t[e+3+96]=o}function ke(t,e){var i=t[e-1+0],n=t[e-1+32],r=t[e-1+64],o=t[e-1+96],s=t[e-1-32],a=t[e+0-32],h=t[e+1-32],c=t[e+2-32];t[e+0+0]=t[e+2+32]=i+s+1>>1,t[e+0+32]=t[e+2+64]=n+i+1>>1,t[e+0+64]=t[e+2+96]=r+n+1>>1,t[e+0+96]=o+r+1>>1,t[e+3+0]=xe(a,h,c),t[e+2+0]=xe(s,a,h),t[e+1+0]=t[e+3+32]=xe(i,s,a),t[e+1+32]=t[e+3+64]=xe(n,i,s),t[e+1+64]=t[e+3+96]=xe(r,n,i),t[e+1+96]=xe(o,r,n)}function Ne(t,e){var i;for(i=0;8>i;++i)n(t,e+32*i,t,e-32,8)}function je(t,e){var i;for(i=0;8>i;++i)r(t,e,t[e-1],8),e+=32}function Fe(t,e,i){var n;for(n=0;8>n;++n)r(e,i+32*n,t,8)}function Ee(t,e){var i,n=8;for(i=0;8>i;++i)n+=t[e+i-32]+t[e-1+32*i];Fe(n>>4,t,e)}function Ie(t,e){var i,n=4;for(i=0;8>i;++i)n+=t[e+i-32];Fe(n>>3,t,e)}function Me(t,e){var i,n=4;for(i=0;8>i;++i)n+=t[e-1+32*i];Fe(n>>3,t,e)}function De(t,e){Fe(128,t,e)}function Be(t,e,i){var n=t[e-i],r=t[e+0],o=3*(r-n)+jn[1020+t[e-2*i]-t[e+i]],s=Fn[112+(o+4>>3)];t[e-i]=En[255+n+Fn[112+(o+3>>3)]],t[e+0]=En[255+r-s]}function Re(t,e,i,n){var r=t[e+0],o=t[e+i];return In[255+t[e-2*i]-t[e-i]]>n||In[255+o-r]>n}function ze(t,e,i,n){return 4*In[255+t[e-i]-t[e+0]]+In[255+t[e-2*i]-t[e+i]]<=n}function qe(t,e,i,n,r){var o=t[e-3*i],s=t[e-2*i],a=t[e-i],h=t[e+0],c=t[e+i],l=t[e+2*i],u=t[e+3*i];return 4*In[255+a-h]+In[255+s-c]>n?0:In[255+t[e-4*i]-o]<=r&&In[255+o-s]<=r&&In[255+s-a]<=r&&In[255+u-l]<=r&&In[255+l-c]<=r&&In[255+c-h]<=r}function Ue(t,e,i,n){var r=2*n+1;for(n=0;16>n;++n)ze(t,e+n,i,r)&&Be(t,e+n,i)}function We(t,e,i,n){var r=2*n+1;for(n=0;16>n;++n)ze(t,e+n*i,1,r)&&Be(t,e+n*i,1)}function He(t,e,i,n){var r;for(r=3;0<r;--r)Ue(t,e+=4*i,i,n)}function Ve(t,e,i,n){var r;for(r=3;0<r;--r)We(t,e+=4,i,n)}function Ge(t,e,i,n,r,o,s,a){for(o=2*o+1;0<r--;){if(qe(t,e,i,o,s))if(Re(t,e,i,a))Be(t,e,i);else{var h=t,c=e,l=i,u=h[c-2*l],f=h[c-l],d=h[c+0],p=h[c+l],g=h[c+2*l],m=27*(b=jn[1020+3*(d-f)+jn[1020+u-p]])+63>>7,v=18*b+63>>7,b=9*b+63>>7;h[c-3*l]=En[255+h[c-3*l]+b],h[c-2*l]=En[255+u+v],h[c-l]=En[255+f+m],h[c+0]=En[255+d-m],h[c+l]=En[255+p-v],h[c+2*l]=En[255+g-b]}e+=n}}function Xe(t,e,i,n,r,o,s,a){for(o=2*o+1;0<r--;){if(qe(t,e,i,o,s))if(Re(t,e,i,a))Be(t,e,i);else{var h=t,c=e,l=i,u=h[c-l],f=h[c+0],d=h[c+l],p=Fn[112+(4+(g=3*(f-u))>>3)],g=Fn[112+(g+3>>3)],m=p+1>>1;h[c-2*l]=En[255+h[c-2*l]+m],h[c-l]=En[255+u+g],h[c+0]=En[255+f-p],h[c+l]=En[255+d-m]}e+=n}}function Ye(t,e,i,n,r,o){Ge(t,e,i,1,16,n,r,o)}function Ke(t,e,i,n,r,o){Ge(t,e,1,i,16,n,r,o)}function Je(t,e,i,n,r,o){var s;for(s=3;0<s;--s)Xe(t,e+=4*i,i,1,16,n,r,o)}function $e(t,e,i,n,r,o){var s;for(s=3;0<s;--s)Xe(t,e+=4,1,i,16,n,r,o)}function Ze(t,e,i,n,r,o,s,a){Ge(t,e,r,1,8,o,s,a),Ge(i,n,r,1,8,o,s,a)}function Qe(t,e,i,n,r,o,s,a){Ge(t,e,1,r,8,o,s,a),Ge(i,n,1,r,8,o,s,a)}function ti(t,e,i,n,r,o,s,a){Xe(t,e+4*r,r,1,8,o,s,a),Xe(i,n+4*r,r,1,8,o,s,a)}function ei(t,e,i,n,r,o,s,a){Xe(t,e+4,1,r,8,o,s,a),Xe(i,n+4,1,r,8,o,s,a)}function ii(){this.ba=new st,this.ec=[],this.cc=[],this.Mc=[],this.Dc=this.Nc=this.dc=this.fc=0,this.Oa=new ht,this.memory=0,this.Ib="OutputFunc",this.Jb="OutputAlphaFunc",this.Nd="OutputRowFunc"}function ni(){this.data=[],this.offset=this.kd=this.ha=this.w=0,this.na=[],this.xa=this.gb=this.Ja=this.Sa=this.P=0}function ri(){this.nc=this.Ea=this.b=this.hc=0,this.K=[],this.w=0}function oi(){this.ua=0,this.Wa=new I,this.vb=new I,this.md=this.xc=this.wc=0,this.vc=[],this.Wb=0,this.Ya=new d,this.yc=new u}function si(){this.xb=this.a=0,this.l=new Gt,this.ca=new st,this.V=[],this.Ba=0,this.Ta=[],this.Ua=0,this.m=new x,this.Pb=0,this.wd=new x,this.Ma=this.$=this.C=this.i=this.c=this.xd=0,this.s=new oi,this.ab=0,this.gc=s(4,ri),this.Oc=0}function ai(){this.Lc=this.Z=this.$a=this.i=this.c=0,this.l=new Gt,this.ic=0,this.ca=[],this.tb=0,this.qd=null,this.rd=0}function hi(t,e,i,n,r,o,s){for(t=null==t?0:t[e+0],e=0;e<s;++e)r[o+e]=t+i[n+e]&255,t=r[o+e]}function ci(t,e,i,n,r,o,s){var a;if(null==t)hi(null,null,i,n,r,o,s);else for(a=0;a<s;++a)r[o+a]=t[e+a]+i[n+a]&255}function li(t,e,i,n,r,o,s){if(null==t)hi(null,null,i,n,r,o,s);else{var a,h=t[e+0],c=h,l=h;for(a=0;a<s;++a)c=l+(h=t[e+a])-c,l=i[n+a]+(-256&c?0>c?0:255:c)&255,c=h,r[o+a]=l}}function ui(t,i,r,s){var a=i.width,h=i.o;if(e(null!=t&&null!=i),0>r||0>=s||r+s>h)return null;if(!t.Cc){if(null==t.ga){var c;if(t.ga=new ai,(c=null==t.ga)||(c=i.width*i.o,e(0==t.Gb.length),t.Gb=o(c),t.Uc=0,null==t.Gb?c=0:(t.mb=t.Gb,t.nb=t.Uc,t.rc=null,c=1),c=!c),!c){c=t.ga;var l=t.Fa,u=t.P,f=t.qc,d=t.mb,p=t.nb,g=u+1,m=f-1,b=c.l;if(e(null!=l&&null!=d&&null!=i),mr[0]=null,mr[1]=hi,mr[2]=ci,mr[3]=li,c.ca=d,c.tb=p,c.c=i.width,c.i=i.height,e(0<c.c&&0<c.i),1>=f)i=0;else if(c.$a=l[u+0]>>0&3,c.Z=l[u+0]>>2&3,c.Lc=l[u+0]>>4&3,u=l[u+0]>>6&3,0>c.$a||1<c.$a||4<=c.Z||1<c.Lc||u)i=0;else if(b.put=dt,b.ac=ft,b.bc=pt,b.ma=c,b.width=i.width,b.height=i.height,b.Da=i.Da,b.v=i.v,b.va=i.va,b.j=i.j,b.o=i.o,c.$a)t:{e(1==c.$a),i=Tt();e:for(;;){if(null==i){i=0;break t}if(e(null!=c),c.mc=i,i.c=c.c,i.i=c.i,i.l=c.l,i.l.ma=c,i.l.width=c.c,i.l.height=c.i,i.a=0,v(i.m,l,g,m),!Ot(c.c,c.i,1,i,null))break e;if(1==i.ab&&3==i.gc[0].hc&&St(i.s)?(c.ic=1,l=i.c*i.i,i.Ta=null,i.Ua=0,i.V=o(l),i.Ba=0,null==i.V?(i.a=1,i=0):i=1):(c.ic=0,i=kt(i,c.c)),!i)break e;i=1;break t}c.mc=null,i=0}else i=m>=c.c*c.i;c=!i}if(c)return null;1!=t.ga.Lc?t.Ga=0:s=h-r}e(null!=t.ga),e(r+s<=h);t:{if(i=(l=t.ga).c,h=l.l.o,0==l.$a){if(g=t.rc,m=t.Vc,b=t.Fa,u=t.P+1+r*i,f=t.mb,d=t.nb+r*i,e(u<=t.P+t.qc),0!=l.Z)for(e(null!=mr[l.Z]),c=0;c<s;++c)mr[l.Z](g,m,b,u,f,d,i),g=f,m=d,d+=i,u+=i;else for(c=0;c<s;++c)n(f,d,b,u,i),g=f,m=d,d+=i,u+=i;t.rc=g,t.Vc=m}else{if(e(null!=l.mc),i=r+s,e(null!=(c=l.mc)),e(i<=c.i),c.C>=i)i=1;else if(l.ic||mi(),l.ic){l=c.V,g=c.Ba,m=c.c;var y=c.i,w=(b=1,u=c.$/m,f=c.$%m,d=c.m,p=c.s,c.$),x=m*y,_=m*i,C=p.wc,L=w<_?wt(p,f,u):null;e(w<=x),e(i<=y),e(St(p));e:for(;;){for(;!d.h&&w<_;){if(f&C||(L=wt(p,f,u)),e(null!=L),A(d),256>(y=bt(L.G[0],L.H[0],d)))l[g+w]=y,++w,++f>=m&&(f=0,++u<=i&&!(u%16)&&At(c,u));else{if(!(280>y)){b=0;break e}y=mt(y-256,d);var P,T=bt(L.G[4],L.H[4],d);if(A(d),!(w>=(T=vt(m,T=mt(T,d)))&&x-w>=y)){b=0;break e}for(P=0;P<y;++P)l[g+w+P]=l[g+w+P-T];for(w+=y,f+=y;f>=m;)f-=m,++u<=i&&!(u%16)&&At(c,u);w<_&&f&C&&(L=wt(p,f,u))}e(d.h==S(d))}At(c,u>i?i:u);break e}!b||d.h&&w<x?(b=0,c.a=d.h?5:3):c.$=w,i=b}else i=Lt(c,c.V,c.Ba,c.c,c.i,i,Nt);if(!i){s=0;break t}}r+s>=h&&(t.Cc=1),s=1}if(!s)return null;if(t.Cc&&(null!=(s=t.ga)&&(s.mc=null),t.ga=null,0<t.Ga))return alert("todo:WebPDequantizeLevels"),null}return t.nb+r*a}function fi(t,e,i,n,r,o){for(;0<r--;){var s,a=t,h=e+(i?1:0),c=t,l=e+(i?0:3);for(s=0;s<n;++s){var u=c[l+4*s];255!=u&&(u*=32897,a[h+4*s+0]=a[h+4*s+0]*u>>23,a[h+4*s+1]=a[h+4*s+1]*u>>23,a[h+4*s+2]=a[h+4*s+2]*u>>23)}e+=o}}function di(t,e,i,n,r){for(;0<n--;){var o;for(o=0;o<i;++o){var s=t[e+2*o+0],a=15&(c=t[e+2*o+1]),h=4369*a,c=(240&c|c>>4)*h>>16;t[e+2*o+0]=(240&s|s>>4)*h>>16&240|(15&s|s<<4)*h>>16>>4&15,t[e+2*o+1]=240&c|a}e+=r}}function pi(t,e,i,n,r,o,s,a){var h,c,l=255;for(c=0;c<r;++c){for(h=0;h<n;++h){var u=t[e+h];o[s+4*h]=u,l&=u}e+=i,s+=a}return 255!=l}function gi(t,e,i,n,r){var o;for(o=0;o<r;++o)i[n+o]=t[e+o]>>8}function mi(){Sn=fi,Cn=di,An=pi,Ln=gi}function vi(i,n,r){t[i]=function(t,i,o,s,a,h,c,l,u,f,d,p,g,m,v,b,y){var w,x=y-1>>1,_=a[h+0]|c[l+0]<<16,S=u[f+0]|d[p+0]<<16;e(null!=t);var C=3*_+S+131074>>2;for(n(t[i+0],255&C,C>>16,g,m),null!=o&&(C=3*S+_+131074>>2,n(o[s+0],255&C,C>>16,v,b)),w=1;w<=x;++w){var A=a[h+w]|c[l+w]<<16,L=u[f+w]|d[p+w]<<16,P=_+A+S+L+524296,T=P+2*(A+S)>>3;C=T+_>>1,_=(P=P+2*(_+L)>>3)+A>>1,n(t[i+2*w-1],255&C,C>>16,g,m+(2*w-1)*r),n(t[i+2*w-0],255&_,_>>16,g,m+(2*w-0)*r),null!=o&&(C=P+S>>1,_=T+L>>1,n(o[s+2*w-1],255&C,C>>16,v,b+(2*w-1)*r),n(o[s+2*w+0],255&_,_>>16,v,b+(2*w+0)*r)),_=A,S=L}1&y||(C=3*_+S+131074>>2,n(t[i+y-1],255&C,C>>16,g,m+(y-1)*r),null!=o&&(C=3*S+_+131074>>2,n(o[s+y-1],255&C,C>>16,v,b+(y-1)*r)))}}function bi(){vr[Mn]=br,vr[Dn]=wr,vr[Bn]=yr,vr[Rn]=xr,vr[zn]=_r,vr[qn]=Sr,vr[Un]=Cr,vr[Wn]=wr,vr[Hn]=xr,vr[Vn]=_r,vr[Gn]=Sr}function yi(t){return t&~kr?0>t?0:255:t>>Or}function wi(t,e){return yi((19077*t>>8)+(26149*e>>8)-14234)}function xi(t,e,i){return yi((19077*t>>8)-(6419*e>>8)-(13320*i>>8)+8708)}function _i(t,e){return yi((19077*t>>8)+(33050*e>>8)-17685)}function Si(t,e,i,n,r){n[r+0]=wi(t,i),n[r+1]=xi(t,e,i),n[r+2]=_i(t,e)}function Ci(t,e,i,n,r){n[r+0]=_i(t,e),n[r+1]=xi(t,e,i),n[r+2]=wi(t,i)}function Ai(t,e,i,n,r){var o=xi(t,e,i);e=o<<3&224|_i(t,e)>>3,n[r+0]=248&wi(t,i)|o>>5,n[r+1]=e}function Li(t,e,i,n,r){var o=240&_i(t,e)|15;n[r+0]=240&wi(t,i)|xi(t,e,i)>>4,n[r+1]=o}function Pi(t,e,i,n,r){n[r+0]=255,Si(t,e,i,n,r+1)}function Ti(t,e,i,n,r){Ci(t,e,i,n,r),n[r+3]=255}function Oi(t,e,i,n,r){Si(t,e,i,n,r),n[r+3]=255}function Vt(t,e){return 0>t?0:t>e?e:t}function ki(e,i,n){t[e]=function(t,e,r,o,s,a,h,c,l){for(var u=c+(-2&l)*n;c!=u;)i(t[e+0],r[o+0],s[a+0],h,c),i(t[e+1],r[o+0],s[a+0],h,c+n),e+=2,++o,++a,c+=2*n;1&l&&i(t[e+0],r[o+0],s[a+0],h,c)}}function Ni(t,e,i){return 0==i?0==t?0==e?6:5:0==e?4:0:i}function ji(t,e,i,n,r){switch(t>>>30){case 3:sn(e,i,n,r,0);break;case 2:an(e,i,n,r);break;case 1:cn(e,i,n,r)}}function Fi(t,e){var i,o,s=e.M,a=e.Nb,h=t.oc,c=t.pc+40,l=t.oc,u=t.pc+584,f=t.oc,d=t.pc+600;for(i=0;16>i;++i)h[c+32*i-1]=129;for(i=0;8>i;++i)l[u+32*i-1]=129,f[d+32*i-1]=129;for(0<s?h[c-1-32]=l[u-1-32]=f[d-1-32]=129:(r(h,c-32-1,127,21),r(l,u-32-1,127,9),r(f,d-32-1,127,9)),o=0;o<t.za;++o){var p=e.ya[e.aa+o];if(0<o){for(i=-1;16>i;++i)n(h,c+32*i-4,h,c+32*i+12,4);for(i=-1;8>i;++i)n(l,u+32*i-4,l,u+32*i+4,4),n(f,d+32*i-4,f,d+32*i+4,4)}var g=t.Gd,m=t.Hd+o,v=p.ad,b=p.Hc;if(0<s&&(n(h,c-32,g[m].y,0,16),n(l,u-32,g[m].f,0,8),n(f,d-32,g[m].ea,0,8)),p.Za){var y=h,w=c-32+16;for(0<s&&(o>=t.za-1?r(y,w,g[m].y[15],4):n(y,w,g[m+1].y,0,4)),i=0;4>i;i++)y[w+128+i]=y[w+256+i]=y[w+384+i]=y[w+0+i];for(i=0;16>i;++i,b<<=2)y=h,w=c+Br[i],fr[p.Ob[i]](y,w),ji(b,v,16*+i,y,w)}else if(y=Ni(o,s,p.Ob[0]),ur[y](h,c),0!=b)for(i=0;16>i;++i,b<<=2)ji(b,v,16*+i,h,c+Br[i]);for(i=p.Gc,y=Ni(o,s,p.Dd),dr[y](l,u),dr[y](f,d),b=v,y=l,w=u,255&(p=i>>0)&&(170&p?hn(b,256,y,w):ln(b,256,y,w)),p=f,b=d,255&(i>>=8)&&(170&i?hn(v,320,p,b):ln(v,320,p,b)),s<t.Ub-1&&(n(g[m].y,0,h,c+480,16),n(g[m].f,0,l,u+224,8),n(g[m].ea,0,f,d+224,8)),i=8*a*t.B,g=t.sa,m=t.ta+16*o+16*a*t.R,v=t.qa,p=t.ra+8*o+i,b=t.Ha,y=t.Ia+8*o+i,i=0;16>i;++i)n(g,m+i*t.R,h,c+32*i,16);for(i=0;8>i;++i)n(v,p+i*t.B,l,u+32*i,8),n(b,y+i*t.B,f,d+32*i,8)}}function Ei(t,n,r,o,s,a,h,c,l){var u=[0],f=[0],d=0,p=null!=l?l.kd:0,g=null!=l?l:new ni;if(null==t||12>r)return 7;g.data=t,g.w=n,g.ha=r,n=[n],r=[r],g.gb=[g.gb];t:{var m=n,b=r,y=g.gb;if(e(null!=t),e(null!=b),e(null!=y),y[0]=0,12<=b[0]&&!i(t,m[0],"RIFF")){if(i(t,m[0]+8,"WEBP")){y=3;break t}var w=j(t,m[0]+4);if(12>w||4294967286<w){y=3;break t}if(p&&w>b[0]-8){y=7;break t}y[0]=w,m[0]+=12,b[0]-=12}y=0}if(0!=y)return y;for(w=0<g.gb[0],r=r[0];;){t:{var _=t;b=n,y=r;var S=u,C=f,A=m=[0];if((T=d=[d])[0]=0,8>y[0])y=7;else{if(!i(_,b[0],"VP8X")){if(10!=j(_,b[0]+4)){y=3;break t}if(18>y[0]){y=7;break t}var L=j(_,b[0]+8),P=1+N(_,b[0]+12);if(2147483648<=P*(_=1+N(_,b[0]+15))){y=3;break t}null!=A&&(A[0]=L),null!=S&&(S[0]=P),null!=C&&(C[0]=_),b[0]+=18,y[0]-=18,T[0]=1}y=0}}if(d=d[0],m=m[0],0!=y)return y;if(b=!!(2&m),!w&&d)return 3;if(null!=a&&(a[0]=!!(16&m)),null!=h&&(h[0]=b),null!=c&&(c[0]=0),h=u[0],m=f[0],d&&b&&null==l){y=0;break}if(4>r){y=7;break}if(w&&d||!w&&!d&&!i(t,n[0],"ALPH")){r=[r],g.na=[g.na],g.P=[g.P],g.Sa=[g.Sa];t:{L=t,y=n,w=r;var T=g.gb;S=g.na,C=g.P,A=g.Sa,P=22,e(null!=L),e(null!=w),_=y[0];var O=w[0];for(e(null!=S),e(null!=A),S[0]=null,C[0]=null,A[0]=0;;){if(y[0]=_,w[0]=O,8>O){y=7;break t}var k=j(L,_+4);if(4294967286<k){y=3;break t}var F=8+k+1&-2;if(P+=F,0<T&&P>T){y=3;break t}if(!i(L,_,"VP8 ")||!i(L,_,"VP8L")){y=0;break t}if(O[0]<F){y=7;break t}i(L,_,"ALPH")||(S[0]=L,C[0]=_+8,A[0]=k),_+=F,O-=F}}if(r=r[0],g.na=g.na[0],g.P=g.P[0],g.Sa=g.Sa[0],0!=y)break}r=[r],g.Ja=[g.Ja],g.xa=[g.xa];t:if(T=t,y=n,w=r,S=g.gb[0],C=g.Ja,A=g.xa,L=y[0],_=!i(T,L,"VP8 "),P=!i(T,L,"VP8L"),e(null!=T),e(null!=w),e(null!=C),e(null!=A),8>w[0])y=7;else{if(_||P){if(T=j(T,L+4),12<=S&&T>S-12){y=3;break t}if(p&&T>w[0]-8){y=7;break t}C[0]=T,y[0]+=8,w[0]-=8,A[0]=P}else A[0]=5<=w[0]&&47==T[L+0]&&!(T[L+4]>>5),C[0]=w[0];y=0}if(r=r[0],g.Ja=g.Ja[0],g.xa=g.xa[0],n=n[0],0!=y)break;if(4294967286<g.Ja)return 3;if(null==c||b||(c[0]=g.xa?2:1),h=[h],m=[m],g.xa){if(5>r){y=7;break}c=h,p=m,b=a,null==t||5>r?t=0:5<=r&&47==t[n+0]&&!(t[n+4]>>5)?(w=[0],T=[0],S=[0],v(C=new x,t,n,r),gt(C,w,T,S)?(null!=c&&(c[0]=w[0]),null!=p&&(p[0]=T[0]),null!=b&&(b[0]=S[0]),t=1):t=0):t=0}else{if(10>r){y=7;break}c=m,null==t||10>r||!Kt(t,n+3,r-3)?t=0:(p=t[n+0]|t[n+1]<<8|t[n+2]<<16,b=16383&(t[n+7]<<8|t[n+6]),t=16383&(t[n+9]<<8|t[n+8]),1&p||3<(p>>1&7)||!(p>>4&1)||p>>5>=g.Ja||!b||!t?t=0:(h&&(h[0]=b),c&&(c[0]=t),t=1))}if(!t)return 3;if(h=h[0],m=m[0],d&&(u[0]!=h||f[0]!=m))return 3;null!=l&&(l[0]=g,l.offset=n-l.w,e(4294967286>n-l.w),e(l.offset==l.ha-r));break}return 0==y||7==y&&d&&null==l?(null!=a&&(a[0]|=null!=g.na&&0<g.na.length),null!=o&&(o[0]=h),null!=s&&(s[0]=m),0):y}function Ii(t,e,i){var n=e.width,r=e.height,o=0,s=0,a=n,h=r;if(e.Da=null!=t&&0<t.Da,e.Da&&(a=t.cd,h=t.bd,o=t.v,s=t.j,11>i||(o&=-2,s&=-2),0>o||0>s||0>=a||0>=h||o+a>n||s+h>r))return 0;if(e.v=o,e.j=s,e.va=o+a,e.o=s+h,e.U=a,e.T=h,e.da=null!=t&&0<t.da,e.da){if(!M(a,h,i=[t.ib],o=[t.hb]))return 0;e.ib=i[0],e.hb=o[0]}return e.ob=null!=t&&t.ob,e.Kb=null==t||!t.Sd,e.da&&(e.ob=e.ib<3*n/4&&e.hb<3*r/4,e.Kb=0),1}function Mi(t){if(null==t)return 2;if(11>t.S){var e=t.f.RGBA;e.fb+=(t.height-1)*e.A,e.A=-e.A}else e=t.f.kb,t=t.height,e.O+=(t-1)*e.fa,e.fa=-e.fa,e.N+=(t-1>>1)*e.Ab,e.Ab=-e.Ab,e.W+=(t-1>>1)*e.Db,e.Db=-e.Db,null!=e.F&&(e.J+=(t-1)*e.lb,e.lb=-e.lb);return 0}function Di(t,e,i,n){if(null==n||0>=t||0>=e)return 2;if(null!=i){if(i.Da){var r=i.cd,s=i.bd,a=-2&i.v,h=-2&i.j;if(0>a||0>h||0>=r||0>=s||a+r>t||h+s>e)return 2;t=r,e=s}if(i.da){if(!M(t,e,r=[i.ib],s=[i.hb]))return 2;t=r[0],e=s[0]}}n.width=t,n.height=e;t:{var c=n.width,l=n.height;if(t=n.S,0>=c||0>=l||!(t>=Mn&&13>t))t=2;else{if(0>=n.Rd&&null==n.sd){a=s=r=e=0;var u=(h=c*Ur[t])*l;if(11>t||(s=(l+1)/2*(e=(c+1)/2),12==t&&(a=(r=c)*l)),null==(l=o(u+2*s+a))){t=1;break t}n.sd=l,11>t?((c=n.f.RGBA).eb=l,c.fb=0,c.A=h,c.size=u):((c=n.f.kb).y=l,c.O=0,c.fa=h,c.Fd=u,c.f=l,c.N=0+u,c.Ab=e,c.Cd=s,c.ea=l,c.W=0+u+s,c.Db=e,c.Ed=s,12==t&&(c.F=l,c.J=0+u+2*s),c.Tc=a,c.lb=r)}if(e=1,r=n.S,s=n.width,a=n.height,r>=Mn&&13>r)if(11>r)t=n.f.RGBA,e&=(h=Math.abs(t.A))*(a-1)+s<=t.size,e&=h>=s*Ur[r],e&=null!=t.eb;else{t=n.f.kb,h=(s+1)/2,u=(a+1)/2,c=Math.abs(t.fa),l=Math.abs(t.Ab);var f=Math.abs(t.Db),d=Math.abs(t.lb),p=d*(a-1)+s;e&=c*(a-1)+s<=t.Fd,e&=l*(u-1)+h<=t.Cd,e=(e&=f*(u-1)+h<=t.Ed)&c>=s&l>=h&f>=h,e&=null!=t.y,e&=null!=t.f,e&=null!=t.ea,12==r&&(e&=d>=s,e&=p<=t.Tc,e&=null!=t.F)}else e=0;t=e?0:2}}return 0!=t||null!=i&&i.fd&&(t=Mi(n)),t}var Bi=64,Ri=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215],zi=24,qi=32,Ui=8,Wi=[0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];R("Predictor0","PredictorAdd0"),t.Predictor0=function(){return 4278190080},t.Predictor1=function(t){return t},t.Predictor2=function(t,e,i){return e[i+0]},t.Predictor3=function(t,e,i){return e[i+1]},t.Predictor4=function(t,e,i){return e[i-1]},t.Predictor5=function(t,e,i){return q(q(t,e[i+1]),e[i+0])},t.Predictor6=function(t,e,i){return q(t,e[i-1])},t.Predictor7=function(t,e,i){return q(t,e[i+0])},t.Predictor8=function(t,e,i){return q(e[i-1],e[i+0])},t.Predictor9=function(t,e,i){return q(e[i+0],e[i+1])},t.Predictor10=function(t,e,i){return q(q(t,e[i-1]),q(e[i+0],e[i+1]))},t.Predictor11=function(t,e,i){var n=e[i+0];return 0>=H(n>>24&255,t>>24&255,(e=e[i-1])>>24&255)+H(n>>16&255,t>>16&255,e>>16&255)+H(n>>8&255,t>>8&255,e>>8&255)+H(255&n,255&t,255&e)?n:t},t.Predictor12=function(t,e,i){var n=e[i+0];return(U((t>>24&255)+(n>>24&255)-((e=e[i-1])>>24&255))<<24|U((t>>16&255)+(n>>16&255)-(e>>16&255))<<16|U((t>>8&255)+(n>>8&255)-(e>>8&255))<<8|U((255&t)+(255&n)-(255&e)))>>>0},t.Predictor13=function(t,e,i){var n=e[i-1];return(W((t=q(t,e[i+0]))>>24&255,n>>24&255)<<24|W(t>>16&255,n>>16&255)<<16|W(t>>8&255,n>>8&255)<<8|W(t>>0&255,n>>0&255))>>>0};var Hi=t.PredictorAdd0;t.PredictorAdd1=V,R("Predictor2","PredictorAdd2"),R("Predictor3","PredictorAdd3"),R("Predictor4","PredictorAdd4"),R("Predictor5","PredictorAdd5"),R("Predictor6","PredictorAdd6"),R("Predictor7","PredictorAdd7"),R("Predictor8","PredictorAdd8"),R("Predictor9","PredictorAdd9"),R("Predictor10","PredictorAdd10"),R("Predictor11","PredictorAdd11"),R("Predictor12","PredictorAdd12"),R("Predictor13","PredictorAdd13");var Vi=t.PredictorAdd2;K("ColorIndexInverseTransform","MapARGB","32b",(function(t){return t>>8&255}),(function(t){return t})),K("VP8LColorIndexInverseTransformAlpha","MapAlpha","8b",(function(t){return t}),(function(t){return t>>8&255}));var Gi,Xi=t.ColorIndexInverseTransform,Yi=t.MapARGB,Ki=t.VP8LColorIndexInverseTransformAlpha,Ji=t.MapAlpha,$i=t.VP8LPredictorsAdd=[];$i.length=16,(t.VP8LPredictors=[]).length=16,(t.VP8LPredictorsAdd_C=[]).length=16,(t.VP8LPredictors_C=[]).length=16;var Zi,Qi,tn,en,nn,rn,on,sn,an,hn,cn,ln,un,fn,dn,pn,gn,mn,vn,bn,yn,wn,xn,_n,Sn,Cn,An,Ln,Pn=o(511),Tn=o(2041),On=o(225),kn=o(767),Nn=0,jn=Tn,Fn=On,En=kn,In=Pn,Mn=0,Dn=1,Bn=2,Rn=3,zn=4,qn=5,Un=6,Wn=7,Hn=8,Vn=9,Gn=10,Xn=[2,3,7],Yn=[3,3,11],Kn=[280,256,256,256,40],Jn=[0,1,1,1,0],$n=[17,18,0,1,2,3,4,5,16,6,7,8,9,10,11,12,13,14,15],Zn=[24,7,23,25,40,6,39,41,22,26,38,42,56,5,55,57,21,27,54,58,37,43,72,4,71,73,20,28,53,59,70,74,36,44,88,69,75,52,60,3,87,89,19,29,86,90,35,45,68,76,85,91,51,61,104,2,103,105,18,30,102,106,34,46,84,92,67,77,101,107,50,62,120,1,119,121,83,93,17,31,100,108,66,78,118,122,33,47,117,123,49,63,99,109,82,94,0,116,124,65,79,16,32,98,110,48,115,125,81,95,64,114,126,97,111,80,113,127,96,112],Qn=[2954,2956,2958,2962,2970,2986,3018,3082,3212,3468,3980,5004],tr=8,er=[4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,17,18,19,20,20,21,21,22,22,23,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,95,96,98,100,101,102,104,106,108,110,112,114,116,118,122,124,126,128,130,132,134,136,138,140,143,145,148,151,154,157],ir=[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,234,239,245,249,254,259,264,269,274,279,284],nr=null,rr=[[173,148,140,0],[176,155,140,135,0],[180,157,141,134,130,0],[254,254,243,230,196,177,153,140,133,130,129,0]],or=[0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15],sr=[-0,1,-1,2,-2,3,4,6,-3,5,-4,-5,-6,7,-7,8,-8,-9],ar=[[[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]],[[253,136,254,255,228,219,128,128,128,128,128],[189,129,242,255,227,213,255,219,128,128,128],[106,126,227,252,214,209,255,255,128,128,128]],[[1,98,248,255,236,226,255,255,128,128,128],[181,133,238,254,221,234,255,154,128,128,128],[78,134,202,247,198,180,255,219,128,128,128]],[[1,185,249,255,243,255,128,128,128,128,128],[184,150,247,255,236,224,128,128,128,128,128],[77,110,216,255,236,230,128,128,128,128,128]],[[1,101,251,255,241,255,128,128,128,128,128],[170,139,241,252,236,209,255,255,128,128,128],[37,116,196,243,228,255,255,255,128,128,128]],[[1,204,254,255,245,255,128,128,128,128,128],[207,160,250,255,238,128,128,128,128,128,128],[102,103,231,255,211,171,128,128,128,128,128]],[[1,152,252,255,240,255,128,128,128,128,128],[177,135,243,255,234,225,128,128,128,128,128],[80,129,211,255,194,224,128,128,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[246,1,255,128,128,128,128,128,128,128,128],[255,128,128,128,128,128,128,128,128,128,128]]],[[[198,35,237,223,193,187,162,160,145,155,62],[131,45,198,221,172,176,220,157,252,221,1],[68,47,146,208,149,167,221,162,255,223,128]],[[1,149,241,255,221,224,255,255,128,128,128],[184,141,234,253,222,220,255,199,128,128,128],[81,99,181,242,176,190,249,202,255,255,128]],[[1,129,232,253,214,197,242,196,255,255,128],[99,121,210,250,201,198,255,202,128,128,128],[23,91,163,242,170,187,247,210,255,255,128]],[[1,200,246,255,234,255,128,128,128,128,128],[109,178,241,255,231,245,255,255,128,128,128],[44,130,201,253,205,192,255,255,128,128,128]],[[1,132,239,251,219,209,255,165,128,128,128],[94,136,225,251,218,190,255,255,128,128,128],[22,100,174,245,186,161,255,199,128,128,128]],[[1,182,249,255,232,235,128,128,128,128,128],[124,143,241,255,227,234,128,128,128,128,128],[35,77,181,251,193,211,255,205,128,128,128]],[[1,157,247,255,236,231,255,255,128,128,128],[121,141,235,255,225,227,255,255,128,128,128],[45,99,188,251,195,217,255,224,128,128,128]],[[1,1,251,255,213,255,128,128,128,128,128],[203,1,248,255,255,128,128,128,128,128,128],[137,1,177,255,224,255,128,128,128,128,128]]],[[[253,9,248,251,207,208,255,192,128,128,128],[175,13,224,243,193,185,249,198,255,255,128],[73,17,171,221,161,179,236,167,255,234,128]],[[1,95,247,253,212,183,255,255,128,128,128],[239,90,244,250,211,209,255,255,128,128,128],[155,77,195,248,188,195,255,255,128,128,128]],[[1,24,239,251,218,219,255,205,128,128,128],[201,51,219,255,196,186,128,128,128,128,128],[69,46,190,239,201,218,255,228,128,128,128]],[[1,191,251,255,255,128,128,128,128,128,128],[223,165,249,255,213,255,128,128,128,128,128],[141,124,248,255,255,128,128,128,128,128,128]],[[1,16,248,255,255,128,128,128,128,128,128],[190,36,230,255,236,255,128,128,128,128,128],[149,1,255,128,128,128,128,128,128,128,128]],[[1,226,255,128,128,128,128,128,128,128,128],[247,192,255,128,128,128,128,128,128,128,128],[240,128,255,128,128,128,128,128,128,128,128]],[[1,134,252,255,255,128,128,128,128,128,128],[213,62,250,255,255,128,128,128,128,128,128],[55,93,255,128,128,128,128,128,128,128,128]],[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]]],[[[202,24,213,235,186,191,220,160,240,175,255],[126,38,182,232,169,184,228,174,255,187,128],[61,46,138,219,151,178,240,170,255,216,128]],[[1,112,230,250,199,191,247,159,255,255,128],[166,109,228,252,211,215,255,174,128,128,128],[39,77,162,232,172,180,245,178,255,255,128]],[[1,52,220,246,198,199,249,220,255,255,128],[124,74,191,243,183,193,250,221,255,255,128],[24,71,130,219,154,170,243,182,255,255,128]],[[1,182,225,249,219,240,255,224,128,128,128],[149,150,226,252,216,205,255,171,128,128,128],[28,108,170,242,183,194,254,223,255,255,128]],[[1,81,230,252,204,203,255,192,128,128,128],[123,102,209,247,188,196,255,233,128,128,128],[20,95,153,243,164,173,255,203,128,128,128]],[[1,222,248,255,216,213,128,128,128,128,128],[168,175,246,252,235,205,255,255,128,128,128],[47,116,215,255,211,212,255,255,128,128,128]],[[1,121,236,253,212,214,255,255,128,128,128],[141,84,213,252,201,202,255,219,128,128,128],[42,80,160,240,162,185,255,205,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[244,1,255,128,128,128,128,128,128,128,128],[238,1,255,128,128,128,128,128,128,128,128]]]],hr=[[[231,120,48,89,115,113,120,152,112],[152,179,64,126,170,118,46,70,95],[175,69,143,80,85,82,72,155,103],[56,58,10,171,218,189,17,13,152],[114,26,17,163,44,195,21,10,173],[121,24,80,195,26,62,44,64,85],[144,71,10,38,171,213,144,34,26],[170,46,55,19,136,160,33,206,71],[63,20,8,114,114,208,12,9,226],[81,40,11,96,182,84,29,16,36]],[[134,183,89,137,98,101,106,165,148],[72,187,100,130,157,111,32,75,80],[66,102,167,99,74,62,40,234,128],[41,53,9,178,241,141,26,8,107],[74,43,26,146,73,166,49,23,157],[65,38,105,160,51,52,31,115,128],[104,79,12,27,217,255,87,17,7],[87,68,71,44,114,51,15,186,23],[47,41,14,110,182,183,21,17,194],[66,45,25,102,197,189,23,18,22]],[[88,88,147,150,42,46,45,196,205],[43,97,183,117,85,38,35,179,61],[39,53,200,87,26,21,43,232,171],[56,34,51,104,114,102,29,93,77],[39,28,85,171,58,165,90,98,64],[34,22,116,206,23,34,43,166,73],[107,54,32,26,51,1,81,43,31],[68,25,106,22,64,171,36,225,114],[34,19,21,102,132,188,16,76,124],[62,18,78,95,85,57,50,48,51]],[[193,101,35,159,215,111,89,46,111],[60,148,31,172,219,228,21,18,111],[112,113,77,85,179,255,38,120,114],[40,42,1,196,245,209,10,25,109],[88,43,29,140,166,213,37,43,154],[61,63,30,155,67,45,68,1,209],[100,80,8,43,154,1,51,26,71],[142,78,78,16,255,128,34,197,171],[41,40,5,102,211,183,4,1,221],[51,50,17,168,209,192,23,25,82]],[[138,31,36,171,27,166,38,44,229],[67,87,58,169,82,115,26,59,179],[63,59,90,180,59,166,93,73,154],[40,40,21,116,143,209,34,39,175],[47,15,16,183,34,223,49,45,183],[46,17,33,183,6,98,15,32,183],[57,46,22,24,128,1,54,17,37],[65,32,73,115,28,128,23,128,205],[40,3,9,115,51,192,18,6,223],[87,37,9,115,59,77,64,21,47]],[[104,55,44,218,9,54,53,130,226],[64,90,70,205,40,41,23,26,57],[54,57,112,184,5,41,38,166,213],[30,34,26,133,152,116,10,32,134],[39,19,53,221,26,114,32,73,255],[31,9,65,234,2,15,1,118,73],[75,32,12,51,192,255,160,43,51],[88,31,35,67,102,85,55,186,85],[56,21,23,111,59,205,45,37,192],[55,38,70,124,73,102,1,34,98]],[[125,98,42,88,104,85,117,175,82],[95,84,53,89,128,100,113,101,45],[75,79,123,47,51,128,81,171,1],[57,17,5,71,102,57,53,41,49],[38,33,13,121,57,73,26,1,85],[41,10,67,138,77,110,90,47,114],[115,21,2,10,102,255,166,23,6],[101,29,16,10,85,128,101,196,26],[57,18,10,102,102,213,34,20,43],[117,20,15,36,163,128,68,1,26]],[[102,61,71,37,34,53,31,243,192],[69,60,71,38,73,119,28,222,37],[68,45,128,34,1,47,11,245,171],[62,17,19,70,146,85,55,62,70],[37,43,37,154,100,163,85,160,1],[63,9,92,136,28,64,32,201,85],[75,15,9,9,64,255,184,119,16],[86,6,28,5,64,255,25,248,1],[56,8,17,132,137,255,55,116,128],[58,15,20,82,135,57,26,121,40]],[[164,50,31,137,154,133,25,35,218],[51,103,44,131,131,123,31,6,158],[86,40,64,135,148,224,45,183,128],[22,26,17,131,240,154,14,1,209],[45,16,21,91,64,222,7,1,197],[56,21,39,155,60,138,23,102,213],[83,12,13,54,192,255,68,47,28],[85,26,85,85,128,128,32,146,171],[18,11,7,63,144,171,4,4,246],[35,27,10,146,174,171,12,26,128]],[[190,80,35,99,180,80,126,54,45],[85,126,47,87,176,51,41,20,32],[101,75,128,139,118,146,116,128,85],[56,41,15,176,236,85,37,9,62],[71,30,17,119,118,255,17,18,138],[101,38,60,138,55,70,43,26,142],[146,36,19,30,171,255,97,27,20],[138,45,61,62,219,1,81,188,64],[32,41,20,117,151,142,20,21,163],[112,19,12,61,195,128,48,4,24]]],cr=[[[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[176,246,255,255,255,255,255,255,255,255,255],[223,241,252,255,255,255,255,255,255,255,255],[249,253,253,255,255,255,255,255,255,255,255]],[[255,244,252,255,255,255,255,255,255,255,255],[234,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255]],[[255,246,254,255,255,255,255,255,255,255,255],[239,253,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[251,255,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[251,254,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,254,253,255,254,255,255,255,255,255,255],[250,255,254,255,254,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[217,255,255,255,255,255,255,255,255,255,255],[225,252,241,253,255,255,254,255,255,255,255],[234,250,241,250,253,255,253,254,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[223,254,254,255,255,255,255,255,255,255,255],[238,253,254,254,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[249,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,255,255,255,255,255,255,255,255,255],[247,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[252,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[186,251,250,255,255,255,255,255,255,255,255],[234,251,244,254,255,255,255,255,255,255,255],[251,251,243,253,254,255,254,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[236,253,254,255,255,255,255,255,255,255,255],[251,253,253,254,254,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[254,254,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[254,254,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[248,255,255,255,255,255,255,255,255,255,255],[250,254,252,254,255,255,255,255,255,255,255],[248,254,249,253,255,255,255,255,255,255,255]],[[255,253,253,255,255,255,255,255,255,255,255],[246,253,253,255,255,255,255,255,255,255,255],[252,254,251,254,254,255,255,255,255,255,255]],[[255,254,252,255,255,255,255,255,255,255,255],[248,254,253,255,255,255,255,255,255,255,255],[253,255,254,254,255,255,255,255,255,255,255]],[[255,251,254,255,255,255,255,255,255,255,255],[245,251,254,255,255,255,255,255,255,255,255],[253,253,254,255,255,255,255,255,255,255,255]],[[255,251,253,255,255,255,255,255,255,255,255],[252,253,254,255,255,255,255,255,255,255,255],[255,254,255,255,255,255,255,255,255,255,255]],[[255,252,255,255,255,255,255,255,255,255,255],[249,255,254,255,255,255,255,255,255,255,255],[255,255,254,255,255,255,255,255,255,255,255]],[[255,255,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]]],lr=[0,1,2,3,6,4,5,6,6,6,6,6,6,6,6,7,0],ur=[],fr=[],dr=[],pr=1,gr=2,mr=[],vr=[];vi("UpsampleRgbLinePair",Si,3),vi("UpsampleBgrLinePair",Ci,3),vi("UpsampleRgbaLinePair",Oi,4),vi("UpsampleBgraLinePair",Ti,4),vi("UpsampleArgbLinePair",Pi,4),vi("UpsampleRgba4444LinePair",Li,2),vi("UpsampleRgb565LinePair",Ai,2);var br=t.UpsampleRgbLinePair,yr=t.UpsampleBgrLinePair,wr=t.UpsampleRgbaLinePair,xr=t.UpsampleBgraLinePair,_r=t.UpsampleArgbLinePair,Sr=t.UpsampleRgba4444LinePair,Cr=t.UpsampleRgb565LinePair,Ar=16,Lr=1<<Ar-1,Pr=-227,Tr=482,Or=6,kr=(256<<Or)-1,Nr=0,jr=o(256),Fr=o(256),Er=o(256),Ir=o(256),Mr=o(Tr-Pr),Dr=o(Tr-Pr);ki("YuvToRgbRow",Si,3),ki("YuvToBgrRow",Ci,3),ki("YuvToRgbaRow",Oi,4),ki("YuvToBgraRow",Ti,4),ki("YuvToArgbRow",Pi,4),ki("YuvToRgba4444Row",Li,2),ki("YuvToRgb565Row",Ai,2);var Br=[0,4,8,12,128,132,136,140,256,260,264,268,384,388,392,396],Rr=[0,2,8],zr=[8,7,6,4,4,2,2,2,1,1,1,1],qr=1;this.WebPDecodeRGBA=function(t,i,n,r,o){var s=Dn,a=new ii,h=new st;a.ba=h,h.S=s,h.width=[h.width],h.height=[h.height];var c=h.width,l=h.height,u=new at;if(null==u||null==t)var f=2;else e(null!=u),f=Ei(t,i,n,u.width,u.height,u.Pd,u.Qd,u.format,null);if(0!=f?c=0:(null!=c&&(c[0]=u.width[0]),null!=l&&(l[0]=u.height[0]),c=1),c){h.width=h.width[0],h.height=h.height[0],null!=r&&(r[0]=h.width),null!=o&&(o[0]=h.height);t:{if(r=new Gt,(o=new ni).data=t,o.w=i,o.ha=n,o.kd=1,i=[0],e(null!=o),(0==(t=Ei(o.data,o.w,o.ha,null,null,null,i,null,o))||7==t)&&i[0]&&(t=4),0==(i=t)){if(e(null!=a),r.data=o.data,r.w=o.w+o.offset,r.ha=o.ha-o.offset,r.put=dt,r.ac=ft,r.bc=pt,r.ma=a,o.xa){if(null==(t=Tt())){a=1;break t}if(function(t,i){var n=[0],r=[0],o=[0];e:for(;;){if(null==t)return 0;if(null==i)return t.a=2,0;if(t.l=i,t.a=0,v(t.m,i.data,i.w,i.ha),!gt(t.m,n,r,o)){t.a=3;break e}if(t.xb=gr,i.width=n[0],i.height=r[0],!Ot(n[0],r[0],1,t,null))break e;return 1}return e(0!=t.a),0}(t,r)){if(r=0==(i=Di(r.width,r.height,a.Oa,a.ba))){e:{r=t;i:for(;;){if(null==r){r=0;break e}if(e(null!=r.s.yc),e(null!=r.s.Ya),e(0<r.s.Wb),e(null!=(n=r.l)),e(null!=(o=n.ma)),0!=r.xb){if(r.ca=o.ba,r.tb=o.tb,e(null!=r.ca),!Ii(o.Oa,n,Rn)){r.a=2;break i}if(!kt(r,n.width))break i;if(n.da)break i;if((n.da||nt(r.ca.S))&&mi(),11>r.ca.S||(alert("todo:WebPInitConvertARGBToYUV"),null!=r.ca.f.kb.F&&mi()),r.Pb&&0<r.s.ua&&null==r.s.vb.X&&!F(r.s.vb,r.s.Wa.Xa)){r.a=1;break i}r.xb=0}if(!Lt(r,r.V,r.Ba,r.c,r.i,n.o,_t))break i;o.Dc=r.Ma,r=1;break e}e(0!=r.a),r=0}r=!r}r&&(i=t.a)}else i=t.a}else{if(null==(t=new Xt)){a=1;break t}if(t.Fa=o.na,t.P=o.P,t.qc=o.Sa,Jt(t,r)){if(0==(i=Di(r.width,r.height,a.Oa,a.ba))){if(t.Aa=0,n=a.Oa,e(null!=(o=t)),null!=n){if(0<(c=0>(c=n.Md)?0:100<c?255:255*c/100)){for(l=u=0;4>l;++l)12>(f=o.pb[l]).lc&&(f.ia=c*zr[0>f.lc?0:f.lc]>>3),u|=f.ia;u&&(alert("todo:VP8InitRandom"),o.ia=1)}o.Ga=n.Id,100<o.Ga?o.Ga=100:0>o.Ga&&(o.Ga=0)}Qt(t,r)||(i=t.a)}}else i=t.a}0==i&&null!=a.Oa&&a.Oa.fd&&(i=Mi(a.ba))}a=i}s=0!=a?null:11>s?h.f.RGBA.eb:h.f.kb.y}else s=null;return s};var Ur=[3,4,3,4,4,2,2,4,4,4,2,1,1]};function c(t,e){for(var i="",n=0;n<4;n++)i+=String.fromCharCode(t[e++]);return i}function l(t,e){return(t[e+0]<<0|t[e+1]<<8|t[e+2]<<16)>>>0}function u(t,e){return(t[e+0]<<0|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}new h;var f=[0],d=[0],p=[],g=new h,m=t,v=function(t,e){var i={},n=0,r=!1,o=0,s=0;if(i.frames=[],!function(t,e,i,n){for(var r=0;r<4;r++)if(t[e+r]!="RIFF".charCodeAt(r))return!0;return!1}(t,e)){var a,h;for(u(t,e+=4),e+=8;e<t.length;){var f=c(t,e),d=u(t,e+=4);e+=4;var p=d+(1&d);switch(f){case"VP8 ":case"VP8L":void 0===i.frames[n]&&(i.frames[n]={}),(v=i.frames[n]).src_off=r?s:e-8,v.src_size=o+d+8,n++,r&&(r=!1,o=0,s=0);break;case"VP8X":(v=i.header={}).feature_flags=t[e];var g=e+4;v.canvas_width=1+l(t,g),g+=3,v.canvas_height=1+l(t,g),g+=3;break;case"ALPH":r=!0,o=p+8,s=e-8;break;case"ANIM":(v=i.header).bgcolor=u(t,e),g=e+4,v.loop_count=(a=t)[(h=g)+0]<<0|a[h+1]<<8,g+=2;break;case"ANMF":var m,v;(v=i.frames[n]={}).offset_x=2*l(t,e),e+=3,v.offset_y=2*l(t,e),e+=3,v.width=1+l(t,e),e+=3,v.height=1+l(t,e),e+=3,v.duration=l(t,e),e+=3,m=t[e++],v.dispose=1&m,v.blend=m>>1&1}"ANMF"!=f&&(e+=p)}return i}}(m,0);v.response=m,v.rgbaoutput=!0,v.dataurl=!1;var b=v.header?v.header:null,y=v.frames?v.frames:null;if(b){b.loop_counter=b.loop_count,f=[b.canvas_height],d=[b.canvas_width];for(var w=0;w<y.length&&0!=y[w].blend;w++);}var x=y[0],_=g.WebPDecodeRGBA(m,x.src_off,x.src_size,d,f);x.rgba=_,x.imgwidth=d[0],x.imgheight=f[0];for(var S=0;S<d[0]*f[0]*4;S++)p[S]=_[S];return this.width=d,this.height=f,this.data=p,this}!function(t){var e=function(e,n,h,c){var l=4,u=o;switch(c){case t.image_compression.FAST:l=1,u=r;break;case t.image_compression.MEDIUM:l=6,u=s;break;case t.image_compression.SLOW:l=9,u=a}var f=W(e=i(e,n,h,u),{level:l});return t.__addimage__.arrayBufferToBinaryString(f)},i=function(t,e,i,n){for(var r,o,s,a=t.length/e,h=new Uint8Array(t.length+a),u=c(),f=0;f<a;f+=1){if(s=f*e,r=t.subarray(s,s+e),n)h.set(n(r,i,o),s+f);else{for(var d,p=u.length,g=[];d<p;d+=1)g[d]=u[d](r,i,o);var m=l(g.concat());h.set(g[m],s+f)}o=r}return h},n=function(t){var e=Array.apply([],t);return e.unshift(0),e},r=function(t,e){var i,n=[],r=t.length;n[0]=1;for(var o=0;o<r;o+=1)i=t[o-e]||0,n[o+1]=t[o]-i+256&255;return n},o=function(t,e,i){var n,r=[],o=t.length;r[0]=2;for(var s=0;s<o;s+=1)n=i&&i[s]||0,r[s+1]=t[s]-n+256&255;return r},s=function(t,e,i){var n,r,o=[],s=t.length;o[0]=3;for(var a=0;a<s;a+=1)n=t[a-e]||0,r=i&&i[a]||0,o[a+1]=t[a]+256-(n+r>>>1)&255;return o},a=function(t,e,i){var n,r,o,s,a=[],c=t.length;a[0]=4;for(var l=0;l<c;l+=1)n=t[l-e]||0,r=i&&i[l]||0,o=i&&i[l-e]||0,s=h(n,r,o),a[l+1]=t[l]-s+256&255;return a},h=function(t,e,i){if(t===e&&e===i)return t;var n=Math.abs(e-i),r=Math.abs(t-i),o=Math.abs(t+e-i-i);return n<=r&&n<=o?t:r<=o?e:i},c=function(){return[n,r,o,s,a]},l=function(t){var e=t.map((function(t){return t.reduce((function(t,e){return t+Math.abs(e)}),0)}));return e.indexOf(Math.min.apply(null,e))};t.processPNG=function(i,n,r,o){var s,a,h,c,l,u,f,d,p,g,m,v,b,y,w,x=this.decode.FLATE_DECODE,_="";if(this.__addimage__.isArrayBuffer(i)&&(i=new Uint8Array(i)),this.__addimage__.isArrayBufferView(i)){if(i=(h=new Be(i)).imgData,a=h.bits,s=h.colorSpace,l=h.colors,-1!==[4,6].indexOf(h.colorType)){if(8===h.bits){p=(d=32==h.pixelBitlength?new Uint32Array(h.decodePixels().buffer):16==h.pixelBitlength?new Uint16Array(h.decodePixels().buffer):new Uint8Array(h.decodePixels().buffer)).length,m=new Uint8Array(p*h.colors),g=new Uint8Array(p);var S,C=h.pixelBitlength-h.bits;for(y=0,w=0;y<p;y++){for(b=d[y],S=0;S<C;)m[w++]=b>>>S&255,S+=h.bits;g[y]=b>>>S&255}}if(16===h.bits){p=(d=new Uint32Array(h.decodePixels().buffer)).length,m=new Uint8Array(p*(32/h.pixelBitlength)*h.colors),g=new Uint8Array(p*(32/h.pixelBitlength)),v=h.colors>1,y=0,w=0;for(var A=0;y<p;)b=d[y++],m[w++]=b>>>0&255,v&&(m[w++]=b>>>16&255,b=d[y++],m[w++]=b>>>0&255),g[A++]=b>>>16&255;a=8}o!==t.image_compression.NONE?(i=e(m,h.width*h.colors,h.colors,o),f=e(g,h.width,1,o)):(i=m,f=g,x=void 0)}if(3===h.colorType&&(s=this.color_spaces.INDEXED,u=h.palette,h.transparency.indexed)){var L=h.transparency.indexed,P=0;for(y=0,p=L.length;y<p;++y)P+=L[y];if((P/=255)==p-1&&-1!==L.indexOf(0))c=[L.indexOf(0)];else if(P!==p){for(d=h.decodePixels(),g=new Uint8Array(d.length),y=0,p=d.length;y<p;y++)g[y]=L[d[y]];f=e(g,h.width,1)}}var T=function(e){var i;switch(e){case t.image_compression.FAST:i=11;break;case t.image_compression.MEDIUM:i=13;break;case t.image_compression.SLOW:i=14;break;default:i=12}return i}(o);return x===this.decode.FLATE_DECODE&&(_="/Predictor "+T+" "),_+="/Colors "+l+" /BitsPerComponent "+a+" /Columns "+h.width,(this.__addimage__.isArrayBuffer(i)||this.__addimage__.isArrayBufferView(i))&&(i=this.__addimage__.arrayBufferToBinaryString(i)),(f&&this.__addimage__.isArrayBuffer(f)||this.__addimage__.isArrayBufferView(f))&&(f=this.__addimage__.arrayBufferToBinaryString(f)),{alias:r,data:i,index:n,filter:x,decodeParameters:_,transparency:c,palette:u,sMask:f,predictor:T,width:h.width,height:h.height,bitsPerComponent:a,colorSpace:s}}}}(At.API),function(t){t.processGIF89A=function(e,i,n,r){var o=new Re(e),s=o.width,a=o.height,h=[];o.decodeAndBlitFrameRGBA(0,h);var c={data:h,width:s,height:a},l=new qe(100).encode(c,100);return t.processJPEG.call(this,l,i,n,r)},t.processGIF87A=t.processGIF89A}(At.API),Ue.prototype.parseHeader=function(){if(this.fileSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.reserved=this.datav.getUint32(this.pos,!0),this.pos+=4,this.offset=this.datav.getUint32(this.pos,!0),this.pos+=4,this.headerSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.width=this.datav.getUint32(this.pos,!0),this.pos+=4,this.height=this.datav.getInt32(this.pos,!0),this.pos+=4,this.planes=this.datav.getUint16(this.pos,!0),this.pos+=2,this.bitPP=this.datav.getUint16(this.pos,!0),this.pos+=2,this.compress=this.datav.getUint32(this.pos,!0),this.pos+=4,this.rawSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.hr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.vr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.colors=this.datav.getUint32(this.pos,!0),this.pos+=4,this.importantColors=this.datav.getUint32(this.pos,!0),this.pos+=4,16===this.bitPP&&this.is_with_alpha&&(this.bitPP=15),this.bitPP<15){var t=0===this.colors?1<<this.bitPP:this.colors;this.palette=new Array(t);for(var e=0;e<t;e++){var i=this.datav.getUint8(this.pos++,!0),n=this.datav.getUint8(this.pos++,!0),r=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0);this.palette[e]={red:r,green:n,blue:i,quad:o}}}this.height<0&&(this.height*=-1,this.bottom_up=!1)},Ue.prototype.parseBGR=function(){this.pos=this.offset;try{var t="bit"+this.bitPP,e=this.width*this.height*4;this.data=new Uint8Array(e),this[t]()}catch(t){Y.log("bit decode error:"+t)}},Ue.prototype.bit1=function(){var t,e=Math.ceil(this.width/8),i=e%4;for(t=this.height-1;t>=0;t--){for(var n=this.bottom_up?t:this.height-1-t,r=0;r<e;r++)for(var o=this.datav.getUint8(this.pos++,!0),s=n*this.width*4+8*r*4,a=0;a<8&&8*r+a<this.width;a++){var h=this.palette[o>>7-a&1];this.data[s+4*a]=h.blue,this.data[s+4*a+1]=h.green,this.data[s+4*a+2]=h.red,this.data[s+4*a+3]=255}0!==i&&(this.pos+=4-i)}},Ue.prototype.bit4=function(){for(var t=Math.ceil(this.width/2),e=t%4,i=this.height-1;i>=0;i--){for(var n=this.bottom_up?i:this.height-1-i,r=0;r<t;r++){var o=this.datav.getUint8(this.pos++,!0),s=n*this.width*4+2*r*4,a=o>>4,h=15&o,c=this.palette[a];if(this.data[s]=c.blue,this.data[s+1]=c.green,this.data[s+2]=c.red,this.data[s+3]=255,2*r+1>=this.width)break;c=this.palette[h],this.data[s+4]=c.blue,this.data[s+4+1]=c.green,this.data[s+4+2]=c.red,this.data[s+4+3]=255}0!==e&&(this.pos+=4-e)}},Ue.prototype.bit8=function(){for(var t=this.width%4,e=this.height-1;e>=0;e--){for(var i=this.bottom_up?e:this.height-1-e,n=0;n<this.width;n++){var r=this.datav.getUint8(this.pos++,!0),o=i*this.width*4+4*n;if(r<this.palette.length){var s=this.palette[r];this.data[o]=s.red,this.data[o+1]=s.green,this.data[o+2]=s.blue,this.data[o+3]=255}else this.data[o]=255,this.data[o+1]=255,this.data[o+2]=255,this.data[o+3]=255}0!==t&&(this.pos+=4-t)}},Ue.prototype.bit15=function(){for(var t=this.width%3,e=parseInt("11111",2),i=this.height-1;i>=0;i--){for(var n=this.bottom_up?i:this.height-1-i,r=0;r<this.width;r++){var o=this.datav.getUint16(this.pos,!0);this.pos+=2;var s=(o&e)/e*255|0,a=(o>>5&e)/e*255|0,h=(o>>10&e)/e*255|0,c=o>>15?255:0,l=n*this.width*4+4*r;this.data[l]=h,this.data[l+1]=a,this.data[l+2]=s,this.data[l+3]=c}this.pos+=t}},Ue.prototype.bit16=function(){for(var t=this.width%3,e=parseInt("11111",2),i=parseInt("111111",2),n=this.height-1;n>=0;n--){for(var r=this.bottom_up?n:this.height-1-n,o=0;o<this.width;o++){var s=this.datav.getUint16(this.pos,!0);this.pos+=2;var a=(s&e)/e*255|0,h=(s>>5&i)/i*255|0,c=(s>>11)/e*255|0,l=r*this.width*4+4*o;this.data[l]=c,this.data[l+1]=h,this.data[l+2]=a,this.data[l+3]=255}this.pos+=t}},Ue.prototype.bit24=function(){for(var t=this.height-1;t>=0;t--){for(var e=this.bottom_up?t:this.height-1-t,i=0;i<this.width;i++){var n=this.datav.getUint8(this.pos++,!0),r=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0),s=e*this.width*4+4*i;this.data[s]=o,this.data[s+1]=r,this.data[s+2]=n,this.data[s+3]=255}this.pos+=this.width%4}},Ue.prototype.bit32=function(){for(var t=this.height-1;t>=0;t--)for(var e=this.bottom_up?t:this.height-1-t,i=0;i<this.width;i++){var n=this.datav.getUint8(this.pos++,!0),r=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0),s=this.datav.getUint8(this.pos++,!0),a=e*this.width*4+4*i;this.data[a]=o,this.data[a+1]=r,this.data[a+2]=n,this.data[a+3]=s}},Ue.prototype.getData=function(){return this.data},function(t){t.processBMP=function(e,i,n,r){var o=new Ue(e,!1),s=o.width,a=o.height,h={data:o.getData(),width:s,height:a},c=new qe(100).encode(h,100);return t.processJPEG.call(this,c,i,n,r)}}(At.API),We.prototype.getData=function(){return this.data},function(t){t.processWEBP=function(e,i,n,r){var o=new We(e,!1),s=o.width,a=o.height,h={data:o.getData(),width:s,height:a},c=new qe(100).encode(h,100);return t.processJPEG.call(this,c,i,n,r)}}(At.API),At.API.processRGBA=function(t,e,i){for(var n=t.data,r=n.length,o=new Uint8Array(r/4*3),s=new Uint8Array(r/4),a=0,h=0,c=0;c<r;c+=4){var l=n[c],u=n[c+1],f=n[c+2],d=n[c+3];o[a++]=l,o[a++]=u,o[a++]=f,s[h++]=d}var p=this.__addimage__.arrayBufferToBinaryString(o);return{alpha:this.__addimage__.arrayBufferToBinaryString(s),data:p,index:e,alias:i,colorSpace:"DeviceRGB",bitsPerComponent:8,width:t.width,height:t.height}},At.API.setLanguage=function(t){return void 0===this.internal.languageSettings&&(this.internal.languageSettings={},this.internal.languageSettings.isSubscribed=!1),void 0!=={af:"Afrikaans",sq:"Albanian",ar:"Arabic (Standard)","ar-DZ":"Arabic (Algeria)","ar-BH":"Arabic (Bahrain)","ar-EG":"Arabic (Egypt)","ar-IQ":"Arabic (Iraq)","ar-JO":"Arabic (Jordan)","ar-KW":"Arabic (Kuwait)","ar-LB":"Arabic (Lebanon)","ar-LY":"Arabic (Libya)","ar-MA":"Arabic (Morocco)","ar-OM":"Arabic (Oman)","ar-QA":"Arabic (Qatar)","ar-SA":"Arabic (Saudi Arabia)","ar-SY":"Arabic (Syria)","ar-TN":"Arabic (Tunisia)","ar-AE":"Arabic (U.A.E.)","ar-YE":"Arabic (Yemen)",an:"Aragonese",hy:"Armenian",as:"Assamese",ast:"Asturian",az:"Azerbaijani",eu:"Basque",be:"Belarusian",bn:"Bengali",bs:"Bosnian",br:"Breton",bg:"Bulgarian",my:"Burmese",ca:"Catalan",ch:"Chamorro",ce:"Chechen",zh:"Chinese","zh-HK":"Chinese (Hong Kong)","zh-CN":"Chinese (PRC)","zh-SG":"Chinese (Singapore)","zh-TW":"Chinese (Taiwan)",cv:"Chuvash",co:"Corsican",cr:"Cree",hr:"Croatian",cs:"Czech",da:"Danish",nl:"Dutch (Standard)","nl-BE":"Dutch (Belgian)",en:"English","en-AU":"English (Australia)","en-BZ":"English (Belize)","en-CA":"English (Canada)","en-IE":"English (Ireland)","en-JM":"English (Jamaica)","en-NZ":"English (New Zealand)","en-PH":"English (Philippines)","en-ZA":"English (South Africa)","en-TT":"English (Trinidad & Tobago)","en-GB":"English (United Kingdom)","en-US":"English (United States)","en-ZW":"English (Zimbabwe)",eo:"Esperanto",et:"Estonian",fo:"Faeroese",fj:"Fijian",fi:"Finnish",fr:"French (Standard)","fr-BE":"French (Belgium)","fr-CA":"French (Canada)","fr-FR":"French (France)","fr-LU":"French (Luxembourg)","fr-MC":"French (Monaco)","fr-CH":"French (Switzerland)",fy:"Frisian",fur:"Friulian",gd:"Gaelic (Scots)","gd-IE":"Gaelic (Irish)",gl:"Galacian",ka:"Georgian",de:"German (Standard)","de-AT":"German (Austria)","de-DE":"German (Germany)","de-LI":"German (Liechtenstein)","de-LU":"German (Luxembourg)","de-CH":"German (Switzerland)",el:"Greek",gu:"Gujurati",ht:"Haitian",he:"Hebrew",hi:"Hindi",hu:"Hungarian",is:"Icelandic",id:"Indonesian",iu:"Inuktitut",ga:"Irish",it:"Italian (Standard)","it-CH":"Italian (Switzerland)",ja:"Japanese",kn:"Kannada",ks:"Kashmiri",kk:"Kazakh",km:"Khmer",ky:"Kirghiz",tlh:"Klingon",ko:"Korean","ko-KP":"Korean (North Korea)","ko-KR":"Korean (South Korea)",la:"Latin",lv:"Latvian",lt:"Lithuanian",lb:"Luxembourgish",mk:"North Macedonia",ms:"Malay",ml:"Malayalam",mt:"Maltese",mi:"Maori",mr:"Marathi",mo:"Moldavian",nv:"Navajo",ng:"Ndonga",ne:"Nepali",no:"Norwegian",nb:"Norwegian (Bokmal)",nn:"Norwegian (Nynorsk)",oc:"Occitan",or:"Oriya",om:"Oromo",fa:"Persian","fa-IR":"Persian/Iran",pl:"Polish",pt:"Portuguese","pt-BR":"Portuguese (Brazil)",pa:"Punjabi","pa-IN":"Punjabi (India)","pa-PK":"Punjabi (Pakistan)",qu:"Quechua",rm:"Rhaeto-Romanic",ro:"Romanian","ro-MO":"Romanian (Moldavia)",ru:"Russian","ru-MO":"Russian (Moldavia)",sz:"Sami (Lappish)",sg:"Sango",sa:"Sanskrit",sc:"Sardinian",sd:"Sindhi",si:"Singhalese",sr:"Serbian",sk:"Slovak",sl:"Slovenian",so:"Somani",sb:"Sorbian",es:"Spanish","es-AR":"Spanish (Argentina)","es-BO":"Spanish (Bolivia)","es-CL":"Spanish (Chile)","es-CO":"Spanish (Colombia)","es-CR":"Spanish (Costa Rica)","es-DO":"Spanish (Dominican Republic)","es-EC":"Spanish (Ecuador)","es-SV":"Spanish (El Salvador)","es-GT":"Spanish (Guatemala)","es-HN":"Spanish (Honduras)","es-MX":"Spanish (Mexico)","es-NI":"Spanish (Nicaragua)","es-PA":"Spanish (Panama)","es-PY":"Spanish (Paraguay)","es-PE":"Spanish (Peru)","es-PR":"Spanish (Puerto Rico)","es-ES":"Spanish (Spain)","es-UY":"Spanish (Uruguay)","es-VE":"Spanish (Venezuela)",sx:"Sutu",sw:"Swahili",sv:"Swedish","sv-FI":"Swedish (Finland)","sv-SV":"Swedish (Sweden)",ta:"Tamil",tt:"Tatar",te:"Teluga",th:"Thai",tig:"Tigre",ts:"Tsonga",tn:"Tswana",tr:"Turkish",tk:"Turkmen",uk:"Ukrainian",hsb:"Upper Sorbian",ur:"Urdu",ve:"Venda",vi:"Vietnamese",vo:"Volapuk",wa:"Walloon",cy:"Welsh",xh:"Xhosa",ji:"Yiddish",zu:"Zulu"}[t]&&(this.internal.languageSettings.languageCode=t,!1===this.internal.languageSettings.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){this.internal.write("/Lang ("+this.internal.languageSettings.languageCode+")")})),this.internal.languageSettings.isSubscribed=!0)),this},Fe=At.API,Ee=Fe.getCharWidthsArray=function(t,e){var i,r,o=(e=e||{}).font||this.internal.getFont(),s=e.fontSize||this.internal.getFontSize(),a=e.charSpace||this.internal.getCharSpace(),h=e.widths?e.widths:o.metadata.Unicode.widths,c=h.fof?h.fof:1,l=e.kerning?e.kerning:o.metadata.Unicode.kerning,u=l.fof?l.fof:1,f=!1!==e.doKerning,d=0,p=t.length,g=0,m=h[0]||c,v=[];for(i=0;i<p;i++)r=t.charCodeAt(i),"function"==typeof o.metadata.widthOfString?v.push((o.metadata.widthOfGlyph(o.metadata.characterToGlyph(r))+a*(1e3/s)||0)/1e3):(d=f&&"object"===n(l[r])&&!isNaN(parseInt(l[r][g],10))?l[r][g]/u:0,v.push((h[r]||m)/c+d)),g=r;return v},Ie=Fe.getStringUnitWidth=function(t,e){var i=(e=e||{}).fontSize||this.internal.getFontSize(),n=e.font||this.internal.getFont(),r=e.charSpace||this.internal.getCharSpace();return Fe.processArabic&&(t=Fe.processArabic(t)),"function"==typeof n.metadata.widthOfString?n.metadata.widthOfString(t,i,r)/i:Ee.apply(this,arguments).reduce((function(t,e){return t+e}),0)},Me=function(t,e,i,n){for(var r=[],o=0,s=t.length,a=0;o!==s&&a+e[o]<i;)a+=e[o],o++;r.push(t.slice(0,o));var h=o;for(a=0;o!==s;)a+e[o]>n&&(r.push(t.slice(h,o)),a=0,h=o),a+=e[o],o++;return h!==o&&r.push(t.slice(h,o)),r},De=function(t,e,i){i||(i={});var n,r,o,s,a,h,c,l=[],u=[l],f=i.textIndent||0,d=0,p=0,g=t.split(" "),m=Ee.apply(this,[" ",i])[0];if(h=-1===i.lineIndent?g[0].length+2:i.lineIndent||0){var v=Array(h).join(" "),b=[];g.map((function(t){(t=t.split(/\s*\n/)).length>1?b=b.concat(t.map((function(t,e){return(e&&t.length?"\n":"")+t}))):b.push(t[0])})),g=b,h=Ie.apply(this,[v,i])}for(o=0,s=g.length;o<s;o++){var y=0;if(n=g[o],h&&"\n"==n[0]&&(n=n.substr(1),y=1),f+d+(p=(r=Ee.apply(this,[n,i])).reduce((function(t,e){return t+e}),0))>e||y){if(p>e){for(a=Me.apply(this,[n,r,e-(f+d),e]),l.push(a.shift()),l=[a.pop()];a.length;)u.push([a.shift()]);p=r.slice(n.length-(l[0]?l[0].length:0)).reduce((function(t,e){return t+e}),0)}else l=[n];u.push(l),f=p+h,d=m}else l.push(n),f+=d+p,d=m}return c=h?function(t,e){return(e?v:"")+t.join(" ")}:function(t){return t.join(" ")},u.map(c)},Fe.splitTextToSize=function(t,e,i){var n,r=(i=i||{}).fontSize||this.internal.getFontSize(),o=function(t){if(t.widths&&t.kerning)return{widths:t.widths,kerning:t.kerning};var e=this.internal.getFont(t.fontName,t.fontStyle);return e.metadata.Unicode?{widths:e.metadata.Unicode.widths||{0:1},kerning:e.metadata.Unicode.kerning||{}}:{font:e.metadata,fontSize:this.internal.getFontSize(),charSpace:this.internal.getCharSpace()}}.call(this,i);n=Array.isArray(t)?t:String(t).split(/\r?\n/);var s=1*this.internal.scaleFactor*e/r;o.textIndent=i.textIndent?1*i.textIndent*this.internal.scaleFactor/r:0,o.lineIndent=i.lineIndent;var a,h,c=[];for(a=0,h=n.length;a<h;a++)c=c.concat(De.apply(this,[n[a],s,o]));return c},function(t){t.__fontmetrics__=t.__fontmetrics__||{};for(var e="klmnopqrstuvwxyz",i={},r={},o=0;o<e.length;o++)i[e[o]]="0123456789abcdef"[o],r["0123456789abcdef"[o]]=e[o];var s=function(t){return"0x"+parseInt(t,10).toString(16)},a=t.__fontmetrics__.compress=function(t){var e,i,o,h,c=["{"];for(var l in t){if(e=t[l],isNaN(parseInt(l,10))?i="'"+l+"'":(l=parseInt(l,10),i=(i=s(l).slice(2)).slice(0,-1)+r[i.slice(-1)]),"number"==typeof e)e<0?(o=s(e).slice(3),h="-"):(o=s(e).slice(2),h=""),o=h+o.slice(0,-1)+r[o.slice(-1)];else{if("object"!==n(e))throw new Error("Don't know what to do with value type "+n(e)+".");o=a(e)}c.push(i+o)}return c.push("}"),c.join("")},h=t.__fontmetrics__.uncompress=function(t){if("string"!=typeof t)throw new Error("Invalid argument passed to uncompress.");for(var e,n,r,o,s={},a=1,h=s,c=[],l="",u="",f=t.length-1,d=1;d<f;d+=1)"'"==(o=t[d])?e?(r=e.join(""),e=void 0):e=[]:e?e.push(o):"{"==o?(c.push([h,r]),h={},r=void 0):"}"==o?((n=c.pop())[0][n[1]]=h,r=void 0,h=n[0]):"-"==o?a=-1:void 0===r?i.hasOwnProperty(o)?(l+=i[o],r=parseInt(l,16)*a,a=1,l=""):l+=o:i.hasOwnProperty(o)?(u+=i[o],h[r]=parseInt(u,16)*a,a=1,r=void 0,u=""):u+=o;return s},c={codePages:["WinAnsiEncoding"],WinAnsiEncoding:h("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")},l={Unicode:{Courier:c,"Courier-Bold":c,"Courier-BoldOblique":c,"Courier-Oblique":c,Helvetica:c,"Helvetica-Bold":c,"Helvetica-BoldOblique":c,"Helvetica-Oblique":c,"Times-Roman":c,"Times-Bold":c,"Times-BoldItalic":c,"Times-Italic":c}},u={Unicode:{"Courier-Oblique":h("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-BoldItalic":h("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),"Helvetica-Bold":h("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),Courier:h("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-BoldOblique":h("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Bold":h("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),Symbol:h("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),Helvetica:h("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),"Helvetica-BoldOblique":h("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),ZapfDingbats:h("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-Bold":h("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Italic":h("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),"Times-Roman":h("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),"Helvetica-Oblique":h("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")}};t.events.push(["addFont",function(t){var e=t.font,i=u.Unicode[e.postScriptName];i&&(e.metadata.Unicode={},e.metadata.Unicode.widths=i.widths,e.metadata.Unicode.kerning=i.kerning);var n=l.Unicode[e.postScriptName];n&&(e.metadata.Unicode.encoding=n,e.encoding=n.codePages[0])}])}(At.API),function(t){var e=function(t){for(var e=t.length,i=new Uint8Array(e),n=0;n<e;n++)i[n]=t.charCodeAt(n);return i};t.API.events.push(["addFont",function(i){var n=void 0,r=i.font,o=i.instance;if(!r.isStandardFont){if(void 0===o)throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('"+r.postScriptName+"').");if("string"!=typeof(n=!1===o.existsFileInVFS(r.postScriptName)?o.loadFile(r.postScriptName):o.getFileFromVFS(r.postScriptName)))throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('"+r.postScriptName+"').");!function(i,n){n=/^\x00\x01\x00\x00/.test(n)?e(n):e(Z(n)),i.metadata=t.API.TTFFont.open(n),i.metadata.Unicode=i.metadata.Unicode||{encoding:{},kerning:{},widths:[]},i.metadata.glyIdsUsed=[0]}(r,n)}}])}(At),function(t){function e(){return(G.canvg?V.resolve(G.canvg):i.e(779).then(i.bind(i,779))).catch((function(t){return V.reject(new Error("Could not load canvg: "+t))})).then((function(t){return t.default?t.default:t}))}At.API.addSvgAsImage=function(t,i,n,r,o,s,a,h){if(isNaN(i)||isNaN(n))throw Y.error("jsPDF.addSvgAsImage: Invalid coordinates",arguments),new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");if(isNaN(r)||isNaN(o))throw Y.error("jsPDF.addSvgAsImage: Invalid measurements",arguments),new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");var c=document.createElement("canvas");c.width=r,c.height=o;var l=c.getContext("2d");l.fillStyle="#fff",l.fillRect(0,0,c.width,c.height);var u={ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0},f=this;return e().then((function(e){return e.fromString(l,t,u)}),(function(){return V.reject(new Error("Could not load canvg."))})).then((function(t){return t.render(u)})).then((function(){f.addImage(c.toDataURL("image/jpeg",1),i,n,r,o,a,h)}))}}(),At.API.putTotalPages=function(t){var e,i=0;parseInt(this.internal.getFont().id.substr(1),10)<15?(e=new RegExp(t,"g"),i=this.internal.getNumberOfPages()):(e=new RegExp(this.pdfEscape16(t,this.internal.getFont()),"g"),i=this.pdfEscape16(this.internal.getNumberOfPages()+"",this.internal.getFont()));for(var n=1;n<=this.internal.getNumberOfPages();n++)for(var r=0;r<this.internal.pages[n].length;r++)this.internal.pages[n][r]=this.internal.pages[n][r].replace(e,i);return this},At.API.viewerPreferences=function(t,e){var i;t=t||{},e=e||!1;var r,o,s,a={HideToolbar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideMenubar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideWindowUI:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},FitWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},CenterWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},DisplayDocTitle:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.4},NonFullScreenPageMode:{defaultValue:"UseNone",value:"UseNone",type:"name",explicitSet:!1,valueSet:["UseNone","UseOutlines","UseThumbs","UseOC"],pdfVersion:1.3},Direction:{defaultValue:"L2R",value:"L2R",type:"name",explicitSet:!1,valueSet:["L2R","R2L"],pdfVersion:1.3},ViewArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},ViewClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintScaling:{defaultValue:"AppDefault",value:"AppDefault",type:"name",explicitSet:!1,valueSet:["AppDefault","None"],pdfVersion:1.6},Duplex:{defaultValue:"",value:"none",type:"name",explicitSet:!1,valueSet:["Simplex","DuplexFlipShortEdge","DuplexFlipLongEdge","none"],pdfVersion:1.7},PickTrayByPDFSize:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.7},PrintPageRange:{defaultValue:"",value:"",type:"array",explicitSet:!1,valueSet:null,pdfVersion:1.7},NumCopies:{defaultValue:1,value:1,type:"integer",explicitSet:!1,valueSet:null,pdfVersion:1.7}},h=Object.keys(a),c=[],l=0,u=0,f=0;function d(t,e){var i,n=!1;for(i=0;i<t.length;i+=1)t[i]===e&&(n=!0);return n}if(void 0===this.internal.viewerpreferences&&(this.internal.viewerpreferences={},this.internal.viewerpreferences.configuration=JSON.parse(JSON.stringify(a)),this.internal.viewerpreferences.isSubscribed=!1),i=this.internal.viewerpreferences.configuration,"reset"===t||!0===e){var p=h.length;for(f=0;f<p;f+=1)i[h[f]].value=i[h[f]].defaultValue,i[h[f]].explicitSet=!1}if("object"===n(t))for(o in t)if(s=t[o],d(h,o)&&void 0!==s){if("boolean"===i[o].type&&"boolean"==typeof s)i[o].value=s;else if("name"===i[o].type&&d(i[o].valueSet,s))i[o].value=s;else if("integer"===i[o].type&&Number.isInteger(s))i[o].value=s;else if("array"===i[o].type){for(l=0;l<s.length;l+=1)if(r=!0,1===s[l].length&&"number"==typeof s[l][0])c.push(String(s[l]-1));else if(s[l].length>1){for(u=0;u<s[l].length;u+=1)"number"!=typeof s[l][u]&&(r=!1);!0===r&&c.push([s[l][0]-1,s[l][1]-1].join(" "))}i[o].value="["+c.join(" ")+"]"}else i[o].value=i[o].defaultValue;i[o].explicitSet=!0}return!1===this.internal.viewerpreferences.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){var t,e=[];for(t in i)!0===i[t].explicitSet&&("name"===i[t].type?e.push("/"+t+" /"+i[t].value):e.push("/"+t+" "+i[t].value));0!==e.length&&this.internal.write("/ViewerPreferences\n<<\n"+e.join("\n")+"\n>>")})),this.internal.viewerpreferences.isSubscribed=!0),this.internal.viewerpreferences.configuration=i,this},function(t){var e=function(){var t='<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="'+this.internal.__metadata__.namespaceuri+'"><jspdf:metadata>',e=unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),i=unescape(encodeURIComponent(t)),n=unescape(encodeURIComponent(this.internal.__metadata__.metadata)),r=unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),o=unescape(encodeURIComponent("</x:xmpmeta>")),s=i.length+n.length+r.length+e.length+o.length;this.internal.__metadata__.metadata_object_number=this.internal.newObject(),this.internal.write("<< /Type /Metadata /Subtype /XML /Length "+s+" >>"),this.internal.write("stream"),this.internal.write(e+i+n+r+o),this.internal.write("endstream"),this.internal.write("endobj")},i=function(){this.internal.__metadata__.metadata_object_number&&this.internal.write("/Metadata "+this.internal.__metadata__.metadata_object_number+" 0 R")};t.addMetadata=function(t,n){return void 0===this.internal.__metadata__&&(this.internal.__metadata__={metadata:t,namespaceuri:n||"http://jspdf.default.namespaceuri/"},this.internal.events.subscribe("putCatalog",i),this.internal.events.subscribe("postPutResources",e)),this}}(At.API),function(t){var e=t.API,i=e.pdfEscape16=function(t,e){for(var i,n=e.metadata.Unicode.widths,r=["","0","00","000","0000"],o=[""],s=0,a=t.length;s<a;++s){if(i=e.metadata.characterToGlyph(t.charCodeAt(s)),e.metadata.glyIdsUsed.push(i),e.metadata.toUnicode[i]=t.charCodeAt(s),-1==n.indexOf(i)&&(n.push(i),n.push([parseInt(e.metadata.widthOfGlyph(i),10)])),"0"==i)return o.join("");i=i.toString(16),o.push(r[4-i.length],i)}return o.join("")},n=function(t){var e,i,n,r,o,s,a;for(o="/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange",n=[],s=0,a=(i=Object.keys(t).sort((function(t,e){return t-e}))).length;s<a;s++)e=i[s],n.length>=100&&(o+="\n"+n.length+" beginbfchar\n"+n.join("\n")+"\nendbfchar",n=[]),void 0!==t[e]&&null!==t[e]&&"function"==typeof t[e].toString&&(r=("0000"+t[e].toString(16)).slice(-4),e=("0000"+(+e).toString(16)).slice(-4),n.push("<"+e+"><"+r+">"));return n.length&&(o+="\n"+n.length+" beginbfchar\n"+n.join("\n")+"\nendbfchar\n"),o+"endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"};e.events.push(["putFont",function(e){!function(e){var i=e.font,r=e.out,o=e.newObject,s=e.putStream;if(i.metadata instanceof t.API.TTFFont&&"Identity-H"===i.encoding){for(var a=i.metadata.Unicode.widths,h=i.metadata.subset.encode(i.metadata.glyIdsUsed,1),c="",l=0;l<h.length;l++)c+=String.fromCharCode(h[l]);var u=o();s({data:c,addLength1:!0,objectId:u}),r("endobj");var f=o();s({data:n(i.metadata.toUnicode),addLength1:!0,objectId:f}),r("endobj");var d=o();r("<<"),r("/Type /FontDescriptor"),r("/FontName /"+yt(i.fontName)),r("/FontFile2 "+u+" 0 R"),r("/FontBBox "+t.API.PDFObject.convert(i.metadata.bbox)),r("/Flags "+i.metadata.flags),r("/StemV "+i.metadata.stemV),r("/ItalicAngle "+i.metadata.italicAngle),r("/Ascent "+i.metadata.ascender),r("/Descent "+i.metadata.decender),r("/CapHeight "+i.metadata.capHeight),r(">>"),r("endobj");var p=o();r("<<"),r("/Type /Font"),r("/BaseFont /"+yt(i.fontName)),r("/FontDescriptor "+d+" 0 R"),r("/W "+t.API.PDFObject.convert(a)),r("/CIDToGIDMap /Identity"),r("/DW 1000"),r("/Subtype /CIDFontType2"),r("/CIDSystemInfo"),r("<<"),r("/Supplement 0"),r("/Registry (Adobe)"),r("/Ordering ("+i.encoding+")"),r(">>"),r(">>"),r("endobj"),i.objectNumber=o(),r("<<"),r("/Type /Font"),r("/Subtype /Type0"),r("/ToUnicode "+f+" 0 R"),r("/BaseFont /"+yt(i.fontName)),r("/Encoding /"+i.encoding),r("/DescendantFonts ["+p+" 0 R]"),r(">>"),r("endobj"),i.isAlreadyPutted=!0}}(e)}]),e.events.push(["putFont",function(e){!function(e){var i=e.font,r=e.out,o=e.newObject,s=e.putStream;if(i.metadata instanceof t.API.TTFFont&&"WinAnsiEncoding"===i.encoding){for(var a=i.metadata.rawData,h="",c=0;c<a.length;c++)h+=String.fromCharCode(a[c]);var l=o();s({data:h,addLength1:!0,objectId:l}),r("endobj");var u=o();s({data:n(i.metadata.toUnicode),addLength1:!0,objectId:u}),r("endobj");var f=o();r("<<"),r("/Descent "+i.metadata.decender),r("/CapHeight "+i.metadata.capHeight),r("/StemV "+i.metadata.stemV),r("/Type /FontDescriptor"),r("/FontFile2 "+l+" 0 R"),r("/Flags 96"),r("/FontBBox "+t.API.PDFObject.convert(i.metadata.bbox)),r("/FontName /"+yt(i.fontName)),r("/ItalicAngle "+i.metadata.italicAngle),r("/Ascent "+i.metadata.ascender),r(">>"),r("endobj"),i.objectNumber=o();for(var d=0;d<i.metadata.hmtx.widths.length;d++)i.metadata.hmtx.widths[d]=parseInt(i.metadata.hmtx.widths[d]*(1e3/i.metadata.head.unitsPerEm));r("<</Subtype/TrueType/Type/Font/ToUnicode "+u+" 0 R/BaseFont/"+yt(i.fontName)+"/FontDescriptor "+f+" 0 R/Encoding/"+i.encoding+" /FirstChar 29 /LastChar 255 /Widths "+t.API.PDFObject.convert(i.metadata.hmtx.widths)+">>"),r("endobj"),i.isAlreadyPutted=!0}}(e)}]);var r=function(t){var e,n=t.text||"",r=t.x,o=t.y,s=t.options||{},a=t.mutex||{},h=a.pdfEscape,c=a.activeFontKey,l=a.fonts,u=c,f="",d=0,p="",g=l[u].encoding;if("Identity-H"!==l[u].encoding)return{text:n,x:r,y:o,options:s,mutex:a};for(p=n,u=c,Array.isArray(n)&&(p=n[0]),d=0;d<p.length;d+=1)l[u].metadata.hasOwnProperty("cmap")&&(e=l[u].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]),e||p[d].charCodeAt(0)<256&&l[u].metadata.hasOwnProperty("Unicode")?f+=p[d]:f+="";var m="";return parseInt(u.slice(1))<14||"WinAnsiEncoding"===g?m=h(f,u).split("").map((function(t){return t.charCodeAt(0).toString(16)})).join(""):"Identity-H"===g&&(m=i(f,l[u])),a.isHex=!0,{text:m,x:r,y:o,options:s,mutex:a}};e.events.push(["postProcessText",function(t){var e=t.text||"",i=[],n={text:e,x:t.x,y:t.y,options:t.options,mutex:t.mutex};if(Array.isArray(e)){var o=0;for(o=0;o<e.length;o+=1)Array.isArray(e[o])&&3===e[o].length?i.push([r(Object.assign({},n,{text:e[o][0]})).text,e[o][1],e[o][2]]):i.push(r(Object.assign({},n,{text:e[o]})).text);t.text=i}else t.text=r(Object.assign({},n,{text:e})).text}])}(At),function(t){var e=function(){return void 0===this.internal.vFS&&(this.internal.vFS={}),!0};t.existsFileInVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]},t.addFileToVFS=function(t,i){return e.call(this),this.internal.vFS[t]=i,this},t.getFileFromVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]?this.internal.vFS[t]:null}}(At.API),function(t){t.__bidiEngine__=t.prototype.__bidiEngine__=function(t){var i,n,r,o,s,a,h,c=e,l=[[0,3,0,1,0,0,0],[0,3,0,1,2,2,0],[0,3,0,17,2,0,1],[0,3,5,5,4,1,0],[0,3,21,21,4,0,1],[0,3,5,5,4,2,0]],u=[[2,0,1,1,0,1,0],[2,0,1,1,0,2,0],[2,0,2,1,3,2,0],[2,0,2,33,3,1,1]],f={L:0,R:1,EN:2,AN:3,N:4,B:5,S:6},d={0:0,5:1,6:2,7:3,32:4,251:5,254:6,255:7},p=["(",")","(","<",">","<","[","]","[","{","}","{","«","»","«","‹","›","‹","⁅","⁆","⁅","⁽","⁾","⁽","₍","₎","₍","≤","≥","≤","〈","〉","〈","﹙","﹚","﹙","﹛","﹜","﹛","﹝","﹞","﹝","﹤","﹥","﹤"],g=new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),m=!1,v=0;this.__bidiEngine__={};var b=function(t){var e=t.charCodeAt(),i=e>>8,n=d[i];return void 0!==n?c[256*n+(255&e)]:252===i||253===i?"AL":g.test(i)?"L":8===i?"R":"N"},y=function(t){for(var e,i=0;i<t.length;i++){if("L"===(e=b(t.charAt(i))))return!1;if("R"===e)return!0}return!1},w=function(t,e,s,a){var h,c,l,u,f=e[a];switch(f){case"L":case"R":case"LRE":case"RLE":case"LRO":case"RLO":case"PDF":m=!1;break;case"N":case"AN":break;case"EN":m&&(f="AN");break;case"AL":m=!0,f="R";break;case"WS":case"BN":f="N";break;case"CS":a<1||a+1>=e.length||"EN"!==(h=s[a-1])&&"AN"!==h||"EN"!==(c=e[a+1])&&"AN"!==c?f="N":m&&(c="AN"),f=c===h?c:"N";break;case"ES":f="EN"===(h=a>0?s[a-1]:"B")&&a+1<e.length&&"EN"===e[a+1]?"EN":"N";break;case"ET":if(a>0&&"EN"===s[a-1]){f="EN";break}if(m){f="N";break}for(l=a+1,u=e.length;l<u&&"ET"===e[l];)l++;f=l<u&&"EN"===e[l]?"EN":"N";break;case"NSM":if(r&&!o){for(u=e.length,l=a+1;l<u&&"NSM"===e[l];)l++;if(l<u){var d=t[a],p=d>=1425&&d<=2303||64286===d;if(h=e[l],p&&("R"===h||"AL"===h)){f="R";break}}}f=a<1||"B"===(h=e[a-1])?"N":s[a-1];break;case"B":m=!1,i=!0,f=v;break;case"S":n=!0,f="N"}return f},x=function(t,e,i){var n=t.split("");return i&&_(n,i,{hiLevel:v}),n.reverse(),e&&e.reverse(),n.join("")},_=function(t,e,r){var o,s,a,h,c,d=-1,p=t.length,g=0,y=[],x=v?u:l,_=[];for(m=!1,i=!1,n=!1,s=0;s<p;s++)_[s]=b(t[s]);for(a=0;a<p;a++){if(c=g,y[a]=w(t,_,y,a),o=240&(g=x[c][f[y[a]]]),g&=15,e[a]=h=x[g][5],o>0)if(16===o){for(s=d;s<a;s++)e[s]=1;d=-1}else d=-1;if(x[g][6])-1===d&&(d=a);else if(d>-1){for(s=d;s<a;s++)e[s]=h;d=-1}"B"===_[a]&&(e[a]=0),r.hiLevel|=h}n&&function(t,e,i){for(var n=0;n<i;n++)if("S"===t[n]){e[n]=v;for(var r=n-1;r>=0&&"WS"===t[r];r--)e[r]=v}}(_,e,p)},S=function(t,e,n,r,o){if(!(o.hiLevel<t)){if(1===t&&1===v&&!i)return e.reverse(),void(n&&n.reverse());for(var s,a,h,c,l=e.length,u=0;u<l;){if(r[u]>=t){for(h=u+1;h<l&&r[h]>=t;)h++;for(c=u,a=h-1;c<a;c++,a--)s=e[c],e[c]=e[a],e[a]=s,n&&(s=n[c],n[c]=n[a],n[a]=s);u=h}u++}}},C=function(t,e,i){var n=t.split(""),r={hiLevel:v};return i||(i=[]),_(n,i,r),function(t,e,i){if(0!==i.hiLevel&&h)for(var n,r=0;r<t.length;r++)1===e[r]&&(n=p.indexOf(t[r]))>=0&&(t[r]=p[n+1])}(n,i,r),S(2,n,e,i,r),S(1,n,e,i,r),n.join("")};return this.__bidiEngine__.doBidiReorder=function(t,e,i){if(function(t,e){if(e)for(var i=0;i<t.length;i++)e[i]=i;void 0===o&&(o=y(t)),void 0===a&&(a=y(t))}(t,e),r||!s||a)if(r&&s&&o^a)v=o?1:0,t=x(t,e,i);else if(!r&&s&&a)v=o?1:0,t=C(t,e,i),t=x(t,e);else if(!r||o||s||a){if(r&&!s&&o^a)t=x(t,e),o?(v=0,t=C(t,e,i)):(v=1,t=C(t,e,i),t=x(t,e));else if(r&&o&&!s&&a)v=1,t=C(t,e,i),t=x(t,e);else if(!r&&!s&&o^a){var n=h;o?(v=1,t=C(t,e,i),v=0,h=!1,t=C(t,e,i),h=n):(v=0,t=C(t,e,i),t=x(t,e),v=1,h=!1,t=C(t,e,i),h=n,t=x(t,e))}}else v=0,t=C(t,e,i);else v=o?1:0,t=C(t,e,i);return t},this.__bidiEngine__.setOptions=function(t){t&&(r=t.isInputVisual,s=t.isOutputVisual,o=t.isInputRtl,a=t.isOutputRtl,h=t.isSymmetricSwapping)},this.__bidiEngine__.setOptions(t),this.__bidiEngine__};var e=["BN","BN","BN","BN","BN","BN","BN","BN","BN","S","B","S","WS","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","B","B","B","S","WS","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","BN","BN","BN","BN","BN","BN","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","CS","N","ET","ET","ET","ET","N","N","N","N","L","N","N","BN","N","N","ET","ET","EN","EN","N","L","N","N","N","EN","L","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","N","N","N","N","N","ET","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","NSM","R","NSM","NSM","R","NSM","NSM","R","NSM","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","N","N","N","N","N","R","R","R","R","R","N","N","N","N","N","N","N","N","N","N","N","AN","AN","AN","AN","AN","AN","N","N","AL","ET","ET","AL","CS","AL","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","AN","AN","AN","AN","AN","AN","AN","AN","AN","ET","AN","AN","AL","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","N","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","NSM","NSM","N","NSM","NSM","NSM","NSM","AL","AL","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","R","N","N","N","N","R","N","N","N","N","N","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","BN","BN","BN","L","R","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","B","LRE","RLE","PDF","LRO","RLO","CS","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","BN","BN","BN","BN","BN","N","LRI","RLI","FSI","PDI","BN","BN","BN","BN","BN","BN","EN","L","N","N","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","L","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","N","N","N","N","N","R","NSM","R","R","R","R","R","R","R","R","R","R","ES","R","R","R","R","R","R","R","R","R","R","R","R","R","N","R","R","R","R","R","N","R","N","R","R","N","R","R","N","R","R","R","R","R","R","R","R","R","R","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","CS","N","N","CS","N","N","N","N","N","N","N","N","N","ET","N","N","ES","ES","N","N","N","N","N","ET","ET","N","N","N","N","N","AL","AL","AL","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","BN","N","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","N","N","N","ET","ET","N","N","N","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N"],i=new t.__bidiEngine__({isInputVisual:!0});t.API.events.push(["postProcessText",function(t){var e=t.text,n=(t.x,t.y,t.options||{}),r=(t.mutex,n.lang,[]);if(n.isInputVisual="boolean"!=typeof n.isInputVisual||n.isInputVisual,i.setOptions(n),"[object Array]"===Object.prototype.toString.call(e)){var o=0;for(r=[],o=0;o<e.length;o+=1)"[object Array]"===Object.prototype.toString.call(e[o])?r.push([i.doBidiReorder(e[o][0]),e[o][1],e[o][2]]):r.push([i.doBidiReorder(e[o])]);t.text=r}else t.text=i.doBidiReorder(e);i.setOptions({isInputVisual:!0})}])}(At),At.API.TTFFont=function(){function t(t){var e;if(this.rawData=t,e=this.contents=new Ve(t),this.contents.pos=4,"ttcf"===e.readString(4))throw new Error("TTCF not supported.");e.pos=0,this.parse(),this.subset=new li(this),this.registerTTF()}return t.open=function(e){return new t(e)},t.prototype.parse=function(){return this.directory=new Ge(this.contents),this.head=new Ke(this),this.name=new ii(this),this.cmap=new $e(this),this.toUnicode={},this.hhea=new Ze(this),this.maxp=new ni(this),this.hmtx=new ri(this),this.post=new ti(this),this.os2=new Qe(this),this.loca=new ci(this),this.glyf=new si(this),this.ascender=this.os2.exists&&this.os2.ascender||this.hhea.ascender,this.decender=this.os2.exists&&this.os2.decender||this.hhea.decender,this.lineGap=this.os2.exists&&this.os2.lineGap||this.hhea.lineGap,this.bbox=[this.head.xMin,this.head.yMin,this.head.xMax,this.head.yMax]},t.prototype.registerTTF=function(){var t,e,i,n,r;if(this.scaleFactor=1e3/this.head.unitsPerEm,this.bbox=function(){var e,i,n,r;for(r=[],e=0,i=(n=this.bbox).length;e<i;e++)t=n[e],r.push(Math.round(t*this.scaleFactor));return r}.call(this),this.stemV=0,this.post.exists?(i=255&(n=this.post.italic_angle),0!=(32768&(e=n>>16))&&(e=-(1+(65535^e))),this.italicAngle=+(e+"."+i)):this.italicAngle=0,this.ascender=Math.round(this.ascender*this.scaleFactor),this.decender=Math.round(this.decender*this.scaleFactor),this.lineGap=Math.round(this.lineGap*this.scaleFactor),this.capHeight=this.os2.exists&&this.os2.capHeight||this.ascender,this.xHeight=this.os2.exists&&this.os2.xHeight||0,this.familyClass=(this.os2.exists&&this.os2.familyClass||0)>>8,this.isSerif=1===(r=this.familyClass)||2===r||3===r||4===r||5===r||7===r,this.isScript=10===this.familyClass,this.flags=0,this.post.isFixedPitch&&(this.flags|=1),this.isSerif&&(this.flags|=2),this.isScript&&(this.flags|=8),0!==this.italicAngle&&(this.flags|=64),this.flags|=32,!this.cmap.unicode)throw new Error("No unicode cmap for font")},t.prototype.characterToGlyph=function(t){var e;return(null!=(e=this.cmap.unicode)?e.codeMap[t]:void 0)||0},t.prototype.widthOfGlyph=function(t){var e;return e=1e3/this.head.unitsPerEm,this.hmtx.forGlyph(t).advance*e},t.prototype.widthOfString=function(t,e,i){var n,r,o,s;for(o=0,r=0,s=(t=""+t).length;0<=s?r<s:r>s;r=0<=s?++r:--r)n=t.charCodeAt(r),o+=this.widthOfGlyph(this.characterToGlyph(n))+i*(1e3/e)||0;return o*(e/1e3)},t.prototype.lineHeight=function(t,e){var i;return null==e&&(e=!1),i=e?this.lineGap:0,(this.ascender+i-this.decender)/1e3*t},t}();var He,Ve=function(){function t(t){this.data=null!=t?t:[],this.pos=0,this.length=this.data.length}return t.prototype.readByte=function(){return this.data[this.pos++]},t.prototype.writeByte=function(t){return this.data[this.pos++]=t},t.prototype.readUInt32=function(){return 16777216*this.readByte()+(this.readByte()<<16)+(this.readByte()<<8)+this.readByte()},t.prototype.writeUInt32=function(t){return this.writeByte(t>>>24&255),this.writeByte(t>>16&255),this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt32=function(){var t;return(t=this.readUInt32())>=2147483648?t-4294967296:t},t.prototype.writeInt32=function(t){return t<0&&(t+=4294967296),this.writeUInt32(t)},t.prototype.readUInt16=function(){return this.readByte()<<8|this.readByte()},t.prototype.writeUInt16=function(t){return this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt16=function(){var t;return(t=this.readUInt16())>=32768?t-65536:t},t.prototype.writeInt16=function(t){return t<0&&(t+=65536),this.writeUInt16(t)},t.prototype.readString=function(t){var e,i;for(i=[],e=0;0<=t?e<t:e>t;e=0<=t?++e:--e)i[e]=String.fromCharCode(this.readByte());return i.join("")},t.prototype.writeString=function(t){var e,i,n;for(n=[],e=0,i=t.length;0<=i?e<i:e>i;e=0<=i?++e:--e)n.push(this.writeByte(t.charCodeAt(e)));return n},t.prototype.readShort=function(){return this.readInt16()},t.prototype.writeShort=function(t){return this.writeInt16(t)},t.prototype.readLongLong=function(){var t,e,i,n,r,o,s,a;return t=this.readByte(),e=this.readByte(),i=this.readByte(),n=this.readByte(),r=this.readByte(),o=this.readByte(),s=this.readByte(),a=this.readByte(),128&t?-1*(72057594037927940*(255^t)+281474976710656*(255^e)+1099511627776*(255^i)+4294967296*(255^n)+16777216*(255^r)+65536*(255^o)+256*(255^s)+(255^a)+1):72057594037927940*t+281474976710656*e+1099511627776*i+4294967296*n+16777216*r+65536*o+256*s+a},t.prototype.writeLongLong=function(t){var e,i;return e=Math.floor(t/4294967296),i=4294967295&t,this.writeByte(e>>24&255),this.writeByte(e>>16&255),this.writeByte(e>>8&255),this.writeByte(255&e),this.writeByte(i>>24&255),this.writeByte(i>>16&255),this.writeByte(i>>8&255),this.writeByte(255&i)},t.prototype.readInt=function(){return this.readInt32()},t.prototype.writeInt=function(t){return this.writeInt32(t)},t.prototype.read=function(t){var e,i;for(e=[],i=0;0<=t?i<t:i>t;i=0<=t?++i:--i)e.push(this.readByte());return e},t.prototype.write=function(t){var e,i,n,r;for(r=[],i=0,n=t.length;i<n;i++)e=t[i],r.push(this.writeByte(e));return r},t}(),Ge=function(){var t;function e(t){var e,i,n;for(this.scalarType=t.readInt(),this.tableCount=t.readShort(),this.searchRange=t.readShort(),this.entrySelector=t.readShort(),this.rangeShift=t.readShort(),this.tables={},i=0,n=this.tableCount;0<=n?i<n:i>n;i=0<=n?++i:--i)e={tag:t.readString(4),checksum:t.readInt(),offset:t.readInt(),length:t.readInt()},this.tables[e.tag]=e}return e.prototype.encode=function(e){var i,n,r,o,s,a,h,c,l,u,f,d,p;for(p in f=Object.keys(e).length,a=Math.log(2),l=16*Math.floor(Math.log(f)/a),o=Math.floor(l/a),c=16*f-l,(n=new Ve).writeInt(this.scalarType),n.writeShort(f),n.writeShort(l),n.writeShort(o),n.writeShort(c),r=16*f,h=n.pos+r,s=null,d=[],e)for(u=e[p],n.writeString(p),n.writeInt(t(u)),n.writeInt(h),n.writeInt(u.length),d=d.concat(u),"head"===p&&(s=h),h+=u.length;h%4;)d.push(0),h++;return n.write(d),i=2981146554-t(n.data),n.pos=s+8,n.writeUInt32(i),n.data},t=function(t){var e,i,n,r;for(t=oi.call(t);t.length%4;)t.push(0);for(n=new Ve(t),i=0,e=0,r=t.length;e<r;e=e+=4)i+=n.readUInt32();return 4294967295&i},e}(),Xe={}.hasOwnProperty,Ye=function(t,e){for(var i in e)Xe.call(e,i)&&(t[i]=e[i]);function n(){this.constructor=t}return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t};He=function(){function t(t){var e;this.file=t,e=this.file.directory.tables[this.tag],this.exists=!!e,e&&(this.offset=e.offset,this.length=e.length,this.parse(this.file.contents))}return t.prototype.parse=function(){},t.prototype.encode=function(){},t.prototype.raw=function(){return this.exists?(this.file.contents.pos=this.offset,this.file.contents.read(this.length)):null},t}();var Ke=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="head",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.revision=t.readInt(),this.checkSumAdjustment=t.readInt(),this.magicNumber=t.readInt(),this.flags=t.readShort(),this.unitsPerEm=t.readShort(),this.created=t.readLongLong(),this.modified=t.readLongLong(),this.xMin=t.readShort(),this.yMin=t.readShort(),this.xMax=t.readShort(),this.yMax=t.readShort(),this.macStyle=t.readShort(),this.lowestRecPPEM=t.readShort(),this.fontDirectionHint=t.readShort(),this.indexToLocFormat=t.readShort(),this.glyphDataFormat=t.readShort()},e.prototype.encode=function(t){var e;return(e=new Ve).writeInt(this.version),e.writeInt(this.revision),e.writeInt(this.checkSumAdjustment),e.writeInt(this.magicNumber),e.writeShort(this.flags),e.writeShort(this.unitsPerEm),e.writeLongLong(this.created),e.writeLongLong(this.modified),e.writeShort(this.xMin),e.writeShort(this.yMin),e.writeShort(this.xMax),e.writeShort(this.yMax),e.writeShort(this.macStyle),e.writeShort(this.lowestRecPPEM),e.writeShort(this.fontDirectionHint),e.writeShort(t),e.writeShort(this.glyphDataFormat),e.data},e}(),Je=function(){function t(t,e){var i,n,r,o,s,a,h,c,l,u,f,d,p,g,m,v,b;switch(this.platformID=t.readUInt16(),this.encodingID=t.readShort(),this.offset=e+t.readInt(),l=t.pos,t.pos=this.offset,this.format=t.readUInt16(),this.length=t.readUInt16(),this.language=t.readUInt16(),this.isUnicode=3===this.platformID&&1===this.encodingID&&4===this.format||0===this.platformID&&4===this.format,this.codeMap={},this.format){case 0:for(a=0;a<256;++a)this.codeMap[a]=t.readByte();break;case 4:for(f=t.readUInt16(),u=f/2,t.pos+=6,r=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:e>u;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),t.pos+=2,p=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:e>u;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),h=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:e>u;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),c=function(){var e,i;for(i=[],a=e=0;0<=u?e<u:e>u;a=0<=u?++e:--e)i.push(t.readUInt16());return i}(),n=(this.length-t.pos+this.offset)/2,s=function(){var e,i;for(i=[],a=e=0;0<=n?e<n:e>n;a=0<=n?++e:--e)i.push(t.readUInt16());return i}(),a=m=0,b=r.length;m<b;a=++m)for(g=r[a],i=v=d=p[a];d<=g?v<=g:v>=g;i=d<=g?++v:--v)0===c[a]?o=i+h[a]:0!==(o=s[c[a]/2+(i-d)-(u-a)]||0)&&(o+=h[a]),this.codeMap[i]=65535&o}t.pos=l}return t.encode=function(t,e){var i,n,r,o,s,a,h,c,l,u,f,d,p,g,m,v,b,y,w,x,_,S,C,A,L,P,T,O,k,N,j,F,E,I,M,D,B,R,z,q,U,W,H,V,G,X;switch(O=new Ve,o=Object.keys(t).sort((function(t,e){return t-e})),e){case"macroman":for(p=0,g=function(){var t=[];for(d=0;d<256;++d)t.push(0);return t}(),v={0:0},r={},k=0,E=o.length;k<E;k++)null==v[H=t[n=o[k]]]&&(v[H]=++p),r[n]={old:t[n],new:v[t[n]]},g[n]=v[t[n]];return O.writeUInt16(1),O.writeUInt16(0),O.writeUInt32(12),O.writeUInt16(0),O.writeUInt16(262),O.writeUInt16(0),O.write(g),{charMap:r,subtable:O.data,maxGlyphID:p+1};case"unicode":for(P=[],l=[],b=0,v={},i={},m=h=null,N=0,I=o.length;N<I;N++)null==v[w=t[n=o[N]]]&&(v[w]=++b),i[n]={old:w,new:v[w]},s=v[w]-n,null!=m&&s===h||(m&&l.push(m),P.push(n),h=s),m=n;for(m&&l.push(m),l.push(65535),P.push(65535),A=2*(C=P.length),S=2*Math.pow(Math.log(C)/Math.LN2,2),u=Math.log(S/2)/Math.LN2,_=2*C-S,a=[],x=[],f=[],d=j=0,M=P.length;j<M;d=++j){if(L=P[d],c=l[d],65535===L){a.push(0),x.push(0);break}if(L-(T=i[L].new)>=32768)for(a.push(0),x.push(2*(f.length+C-d)),n=F=L;L<=c?F<=c:F>=c;n=L<=c?++F:--F)f.push(i[n].new);else a.push(T-L),x.push(0)}for(O.writeUInt16(3),O.writeUInt16(1),O.writeUInt32(12),O.writeUInt16(4),O.writeUInt16(16+8*C+2*f.length),O.writeUInt16(0),O.writeUInt16(A),O.writeUInt16(S),O.writeUInt16(u),O.writeUInt16(_),U=0,D=l.length;U<D;U++)n=l[U],O.writeUInt16(n);for(O.writeUInt16(0),W=0,B=P.length;W<B;W++)n=P[W],O.writeUInt16(n);for(V=0,R=a.length;V<R;V++)s=a[V],O.writeUInt16(s);for(G=0,z=x.length;G<z;G++)y=x[G],O.writeUInt16(y);for(X=0,q=f.length;X<q;X++)p=f[X],O.writeUInt16(p);return{charMap:i,subtable:O.data,maxGlyphID:b+1}}},t}(),$e=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="cmap",e.prototype.parse=function(t){var e,i,n;for(t.pos=this.offset,this.version=t.readUInt16(),n=t.readUInt16(),this.tables=[],this.unicode=null,i=0;0<=n?i<n:i>n;i=0<=n?++i:--i)e=new Je(t,this.offset),this.tables.push(e),e.isUnicode&&null==this.unicode&&(this.unicode=e);return!0},e.encode=function(t,e){var i,n;return null==e&&(e="macroman"),i=Je.encode(t,e),(n=new Ve).writeUInt16(0),n.writeUInt16(1),i.table=n.data.concat(i.subtable),i},e}(),Ze=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="hhea",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.ascender=t.readShort(),this.decender=t.readShort(),this.lineGap=t.readShort(),this.advanceWidthMax=t.readShort(),this.minLeftSideBearing=t.readShort(),this.minRightSideBearing=t.readShort(),this.xMaxExtent=t.readShort(),this.caretSlopeRise=t.readShort(),this.caretSlopeRun=t.readShort(),this.caretOffset=t.readShort(),t.pos+=8,this.metricDataFormat=t.readShort(),this.numberOfMetrics=t.readUInt16()},e}(),Qe=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="OS/2",e.prototype.parse=function(t){if(t.pos=this.offset,this.version=t.readUInt16(),this.averageCharWidth=t.readShort(),this.weightClass=t.readUInt16(),this.widthClass=t.readUInt16(),this.type=t.readShort(),this.ySubscriptXSize=t.readShort(),this.ySubscriptYSize=t.readShort(),this.ySubscriptXOffset=t.readShort(),this.ySubscriptYOffset=t.readShort(),this.ySuperscriptXSize=t.readShort(),this.ySuperscriptYSize=t.readShort(),this.ySuperscriptXOffset=t.readShort(),this.ySuperscriptYOffset=t.readShort(),this.yStrikeoutSize=t.readShort(),this.yStrikeoutPosition=t.readShort(),this.familyClass=t.readShort(),this.panose=function(){var e,i;for(i=[],e=0;e<10;++e)i.push(t.readByte());return i}(),this.charRange=function(){var e,i;for(i=[],e=0;e<4;++e)i.push(t.readInt());return i}(),this.vendorID=t.readString(4),this.selection=t.readShort(),this.firstCharIndex=t.readShort(),this.lastCharIndex=t.readShort(),this.version>0&&(this.ascent=t.readShort(),this.descent=t.readShort(),this.lineGap=t.readShort(),this.winAscent=t.readShort(),this.winDescent=t.readShort(),this.codePageRange=function(){var e,i;for(i=[],e=0;e<2;e=++e)i.push(t.readInt());return i}(),this.version>1))return this.xHeight=t.readShort(),this.capHeight=t.readShort(),this.defaultChar=t.readShort(),this.breakChar=t.readShort(),this.maxContext=t.readShort()},e}(),ti=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="post",e.prototype.parse=function(t){var e,i,n;switch(t.pos=this.offset,this.format=t.readInt(),this.italicAngle=t.readInt(),this.underlinePosition=t.readShort(),this.underlineThickness=t.readShort(),this.isFixedPitch=t.readInt(),this.minMemType42=t.readInt(),this.maxMemType42=t.readInt(),this.minMemType1=t.readInt(),this.maxMemType1=t.readInt(),this.format){case 65536:case 196608:break;case 131072:var r;for(i=t.readUInt16(),this.glyphNameIndex=[],r=0;0<=i?r<i:r>i;r=0<=i?++r:--r)this.glyphNameIndex.push(t.readUInt16());for(this.names=[],n=[];t.pos<this.offset+this.length;)e=t.readByte(),n.push(this.names.push(t.readString(e)));return n;case 151552:return i=t.readUInt16(),this.offsets=t.read(i);case 262144:return this.map=function(){var e,i,n;for(n=[],r=e=0,i=this.file.maxp.numGlyphs;0<=i?e<i:e>i;r=0<=i?++e:--e)n.push(t.readUInt32());return n}.call(this)}},e}(),ei=function(t,e){this.raw=t,this.length=t.length,this.platformID=e.platformID,this.encodingID=e.encodingID,this.languageID=e.languageID},ii=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="name",e.prototype.parse=function(t){var e,i,n,r,o,s,a,h,c,l,u;for(t.pos=this.offset,t.readShort(),e=t.readShort(),s=t.readShort(),i=[],r=0;0<=e?r<e:r>e;r=0<=e?++r:--r)i.push({platformID:t.readShort(),encodingID:t.readShort(),languageID:t.readShort(),nameID:t.readShort(),length:t.readShort(),offset:this.offset+s+t.readShort()});for(a={},r=c=0,l=i.length;c<l;r=++c)n=i[r],t.pos=n.offset,h=t.readString(n.length),o=new ei(h,n),null==a[u=n.nameID]&&(a[u]=[]),a[n.nameID].push(o);this.strings=a,this.copyright=a[0],this.fontFamily=a[1],this.fontSubfamily=a[2],this.uniqueSubfamily=a[3],this.fontName=a[4],this.version=a[5];try{this.postscriptName=a[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}catch(t){this.postscriptName=a[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}return this.trademark=a[7],this.manufacturer=a[8],this.designer=a[9],this.description=a[10],this.vendorUrl=a[11],this.designerUrl=a[12],this.license=a[13],this.licenseUrl=a[14],this.preferredFamily=a[15],this.preferredSubfamily=a[17],this.compatibleFull=a[18],this.sampleText=a[19]},e}(),ni=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="maxp",e.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.numGlyphs=t.readUInt16(),this.maxPoints=t.readUInt16(),this.maxContours=t.readUInt16(),this.maxCompositePoints=t.readUInt16(),this.maxComponentContours=t.readUInt16(),this.maxZones=t.readUInt16(),this.maxTwilightPoints=t.readUInt16(),this.maxStorage=t.readUInt16(),this.maxFunctionDefs=t.readUInt16(),this.maxInstructionDefs=t.readUInt16(),this.maxStackElements=t.readUInt16(),this.maxSizeOfInstructions=t.readUInt16(),this.maxComponentElements=t.readUInt16(),this.maxComponentDepth=t.readUInt16()},e}(),ri=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="hmtx",e.prototype.parse=function(t){var e,i,n,r,o,s,a;for(t.pos=this.offset,this.metrics=[],e=0,s=this.file.hhea.numberOfMetrics;0<=s?e<s:e>s;e=0<=s?++e:--e)this.metrics.push({advance:t.readUInt16(),lsb:t.readInt16()});for(n=this.file.maxp.numGlyphs-this.file.hhea.numberOfMetrics,this.leftSideBearings=function(){var i,r;for(r=[],e=i=0;0<=n?i<n:i>n;e=0<=n?++i:--i)r.push(t.readInt16());return r}(),this.widths=function(){var t,e,i,n;for(n=[],t=0,e=(i=this.metrics).length;t<e;t++)r=i[t],n.push(r.advance);return n}.call(this),i=this.widths[this.widths.length-1],a=[],e=o=0;0<=n?o<n:o>n;e=0<=n?++o:--o)a.push(this.widths.push(i));return a},e.prototype.forGlyph=function(t){return t in this.metrics?this.metrics[t]:{advance:this.metrics[this.metrics.length-1].advance,lsb:this.leftSideBearings[t-this.metrics.length]}},e}(),oi=[].slice,si=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="glyf",e.prototype.parse=function(){return this.cache={}},e.prototype.glyphFor=function(t){var e,i,n,r,o,s,a,h,c,l;return t in this.cache?this.cache[t]:(r=this.file.loca,e=this.file.contents,i=r.indexOf(t),0===(n=r.lengthOf(t))?this.cache[t]=null:(e.pos=this.offset+i,o=(s=new Ve(e.read(n))).readShort(),h=s.readShort(),l=s.readShort(),a=s.readShort(),c=s.readShort(),this.cache[t]=-1===o?new hi(s,h,l,a,c):new ai(s,o,h,l,a,c),this.cache[t]))},e.prototype.encode=function(t,e,i){var n,r,o,s,a;for(o=[],r=[],s=0,a=e.length;s<a;s++)n=t[e[s]],r.push(o.length),n&&(o=o.concat(n.encode(i)));return r.push(o.length),{table:o,offsets:r}},e}(),ai=function(){function t(t,e,i,n,r,o){this.raw=t,this.numberOfContours=e,this.xMin=i,this.yMin=n,this.xMax=r,this.yMax=o,this.compound=!1}return t.prototype.encode=function(){return this.raw.data},t}(),hi=function(){function t(t,e,i,n,r){var o,s;for(this.raw=t,this.xMin=e,this.yMin=i,this.xMax=n,this.yMax=r,this.compound=!0,this.glyphIDs=[],this.glyphOffsets=[],o=this.raw;s=o.readShort(),this.glyphOffsets.push(o.pos),this.glyphIDs.push(o.readUInt16()),32&s;)o.pos+=1&s?4:2,128&s?o.pos+=8:64&s?o.pos+=4:8&s&&(o.pos+=2)}return t.prototype.encode=function(){var t,e,i;for(e=new Ve(oi.call(this.raw.data)),t=0,i=this.glyphIDs.length;t<i;++t)e.pos=this.glyphOffsets[t];return e.data},t}(),ci=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return Ye(e,He),e.prototype.tag="loca",e.prototype.parse=function(t){var e,i;return t.pos=this.offset,e=this.file.head.indexToLocFormat,this.offsets=0===e?function(){var e,n;for(n=[],i=0,e=this.length;i<e;i+=2)n.push(2*t.readUInt16());return n}.call(this):function(){var e,n;for(n=[],i=0,e=this.length;i<e;i+=4)n.push(t.readUInt32());return n}.call(this)},e.prototype.indexOf=function(t){return this.offsets[t]},e.prototype.lengthOf=function(t){return this.offsets[t+1]-this.offsets[t]},e.prototype.encode=function(t,e){for(var i=new Uint32Array(this.offsets.length),n=0,r=0,o=0;o<i.length;++o)if(i[o]=n,r<e.length&&e[r]==o){++r,i[o]=n;var s=this.offsets[o],a=this.offsets[o+1]-s;a>0&&(n+=a)}for(var h=new Array(4*i.length),c=0;c<i.length;++c)h[4*c+3]=255&i[c],h[4*c+2]=(65280&i[c])>>8,h[4*c+1]=(16711680&i[c])>>16,h[4*c]=(4278190080&i[c])>>24;return h},e}(),li=function(){function t(t){this.font=t,this.subset={},this.unicodes={},this.next=33}return t.prototype.generateCmap=function(){var t,e,i,n,r;for(e in n=this.font.cmap.tables[0].codeMap,t={},r=this.subset)i=r[e],t[e]=n[i];return t},t.prototype.glyphsFor=function(t){var e,i,n,r,o,s,a;for(n={},o=0,s=t.length;o<s;o++)n[r=t[o]]=this.font.glyf.glyphFor(r);for(r in e=[],n)(null!=(i=n[r])?i.compound:void 0)&&e.push.apply(e,i.glyphIDs);if(e.length>0)for(r in a=this.glyphsFor(e))i=a[r],n[r]=i;return n},t.prototype.encode=function(t,e){var i,n,r,o,s,a,h,c,l,u,f,d,p,g,m;for(n in i=$e.encode(this.generateCmap(),"unicode"),o=this.glyphsFor(t),f={0:0},m=i.charMap)f[(a=m[n]).old]=a.new;for(d in u=i.maxGlyphID,o)d in f||(f[d]=u++);return c=function(t){var e,i;for(e in i={},t)i[t[e]]=e;return i}(f),l=Object.keys(c).sort((function(t,e){return t-e})),p=function(){var t,e,i;for(i=[],t=0,e=l.length;t<e;t++)s=l[t],i.push(c[s]);return i}(),r=this.font.glyf.encode(o,p,f),h=this.font.loca.encode(r.offsets,p),g={cmap:this.font.cmap.raw(),glyf:r.table,loca:h,hmtx:this.font.hmtx.raw(),hhea:this.font.hhea.raw(),maxp:this.font.maxp.raw(),post:this.font.post.raw(),name:this.font.name.raw(),head:this.font.head.encode(e)},this.font.os2.exists&&(g["OS/2"]=this.font.os2.raw()),this.font.directory.encode(g)},t}();At.API.PDFObject=function(){var t;function e(){}return t=function(t,e){return(Array(e+1).join("0")+t).slice(-e)},e.convert=function(i){var n,r,o,s;if(Array.isArray(i))return"["+function(){var t,r,o;for(o=[],t=0,r=i.length;t<r;t++)n=i[t],o.push(e.convert(n));return o}().join(" ")+"]";if("string"==typeof i)return"/"+i;if(null!=i?i.isString:void 0)return"("+i+")";if(i instanceof Date)return"(D:"+t(i.getUTCFullYear(),4)+t(i.getUTCMonth(),2)+t(i.getUTCDate(),2)+t(i.getUTCHours(),2)+t(i.getUTCMinutes(),2)+t(i.getUTCSeconds(),2)+"Z)";if("[object Object]"==={}.toString.call(i)){for(r in o=["<<"],i)s=i[r],o.push("/"+r+" "+e.convert(s));return o.push(">>"),o.join("\n")}return""+i},e}();const ui=At},3379:t=>{"use strict";var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var o={},s=[],a=0;a<t.length;a++){var h=t[a],c=n.base?h[0]+n.base:h[0],l=o[c]||0,u="".concat(c," ").concat(l);o[c]=l+1;var f=i(u),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var p=r(d,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:p,references:1})}s.push(u)}return s}function r(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,r){var o=n(t=t||[],r=r||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=i(o[s]);e[a].references--}for(var h=n(t,r),c=0;c<o.length;c++){var l=i(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=h}}},569:t=>{"use strict";var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,i)=>{"use strict";t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var r=void 0!==i.layer;r&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,r&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var o=i.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},722:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.color="#535353",this.map=t,this.mapResize=this.mapResize.bind(this)}create(){this.updateValues(),void 0!==this.map?(this.map.on("resize",this.mapResize),this.createCanvas(this.map.getCanvasContainer())):console.error("map object is null")}updateValues(){var t,e;this.width=null===(t=this.map)||void 0===t?void 0:t.getCanvas().clientWidth,this.height=null===(e=this.map)||void 0===e?void 0:e.getCanvas().clientHeight}mapResize(){this.updateValues(),this.updateCanvas()}updateCanvas(){if(void 0!==this.svgCanvas&&void 0!==this.yLine&&void 0!==this.xLine&&void 0!==this.width&&void 0!==this.height){this.svgCanvas.setAttribute("width",`${this.width}px`),this.svgCanvas.setAttribute("height",`${this.height}px`);const t=this.width/2,e=this.height/2;this.yLine.setAttribute("x1",`${t}px`),this.yLine.setAttribute("y1","0px"),this.yLine.setAttribute("x2",`${t}px`),this.yLine.setAttribute("y2",`${this.height}px`),this.xLine.setAttribute("x1","0px"),this.xLine.setAttribute("y1",`${e}px`),this.xLine.setAttribute("x2",`${this.width}px`),this.xLine.setAttribute("y2",`${e}px`)}else console.error("element value is null")}createCanvas(t){if(void 0!==this.width&&void 0!==this.height){const e=document.createElementNS("http://www.w3.org/2000/svg","svg");e.style.position="relative",e.setAttribute("width",`${this.width}px`),e.setAttribute("height",`${this.height}px`);const i=this.width/2,n=this.height/2;this.yLine=e.appendChild(this.createLine(i,0,i,this.height,this.color,"2px")),this.xLine=e.appendChild(this.createLine(0,n,this.width,n,this.color,"2px")),null==t||t.appendChild(e),this.svgCanvas=e}}createLine(t,e,i,n,r,o){const s=document.createElementNS("http://www.w3.org/2000/svg","line");return s.setAttribute("x1",t),s.setAttribute("y1",e),s.setAttribute("x2",i),s.setAttribute("y2",n),s.setAttribute("stroke-dasharray","5,5"),s.setAttribute("stroke",r),s.setAttribute("stroke-width",o),s}destroy(){void 0!==this.xLine&&(this.xLine.remove(),this.xLine=void 0),void 0!==this.yLine&&(this.yLine.remove(),this.yLine=void 0),void 0!==this.svgCanvas&&(this.svgCanvas.remove(),this.svgCanvas=void 0),void 0!==this.map&&(this.map.off("resize",this.mapResize),this.map=void 0)}}},2337:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(722),r=i(8098),o=i(7476),s=i(3927);e.default=class{constructor(t){this.options={PageSize:s.Size.A4,PageOrientation:s.PageOrientation.Landscape,Format:s.Format.PDF,DPI:s.DPI[300],Crosshair:!1,PrintableArea:!1,accessToken:void 0},t&&(this.options=Object.assign(this.options,t)),this.onDocumentClick=this.onDocumentClick.bind(this)}getDefaultPosition(){return"top-right"}getTranslation(){switch(this.options.Local){case"de":return o.german;case"en":default:return o.english;case"fr":return o.french;case"fi":return o.finnish;case"sv":return o.swedish;case"vi":return o.vietnam}}onAdd(t){this.map=t,this.controlContainer=document.createElement("div"),this.controlContainer.classList.add("mapboxgl-ctrl"),this.controlContainer.classList.add("mapboxgl-ctrl-group"),this.exportContainer=document.createElement("div"),this.exportContainer.classList.add("mapboxgl-export-list"),this.exportButton=document.createElement("button"),this.exportButton.classList.add("mapboxgl-ctrl-icon"),this.exportButton.classList.add("mapboxgl-export-control"),this.exportButton.type="button",this.exportButton.addEventListener("click",(()=>{this.exportButton.style.display="none",this.exportContainer.style.display="block",this.toggleCrosshair(!0),this.togglePrintableArea(!0)})),document.addEventListener("click",this.onDocumentClick),this.controlContainer.appendChild(this.exportButton),this.controlContainer.appendChild(this.exportContainer);const e=document.createElement("TABLE");e.className="print-table";const i=this.createSelection(s.Size,this.getTranslation().PageSize,"page-size",this.options.PageSize,((t,e)=>JSON.stringify(t[e])));e.appendChild(i);const n=this.createSelection(s.PageOrientation,this.getTranslation().PageOrientation,"page-orientaiton",this.options.PageOrientation,((t,e)=>t[e]));e.appendChild(n);const r=this.createSelection(s.Format,this.getTranslation().Format,"format-type",this.options.Format,((t,e)=>t[e]));e.appendChild(r);const o=this.createSelection(s.DPI,this.getTranslation().DPI,"dpi-type",this.options.DPI,((t,e)=>t[e]));e.appendChild(o),this.exportContainer.appendChild(e);const a=document.createElement("button");return a.type="button",a.textContent=this.getTranslation().Generate,a.classList.add("generate-button"),a.addEventListener("click",(()=>{const e=document.getElementById("mapbox-gl-export-page-size"),i=document.getElementById("mapbox-gl-export-page-orientaiton"),n=document.getElementById("mapbox-gl-export-format-type"),r=document.getElementById("mapbox-gl-export-dpi-type"),o=i.value;let a=JSON.parse(e.value);o===s.PageOrientation.Portrait&&(a=a.reverse()),new s.default(t,a,Number(r.value),n.value,s.Unit.mm,this.options.accessToken).generate()})),this.exportContainer.appendChild(a),this.controlContainer}createSelection(t,e,i,n,r){const o=document.createElement("label");o.textContent=e;const s=document.createElement("select");s.setAttribute("id",`mapbox-gl-export-${i}`),s.style.width="100%",Object.keys(t).forEach((e=>{const o=document.createElement("option");o.setAttribute("value",r(t,e)),o.appendChild(document.createTextNode(e)),o.setAttribute("name",i),n===t[e]&&(o.selected=!0),s.appendChild(o)})),s.addEventListener("change",(()=>{this.updatePrintableArea()}));const a=document.createElement("TR"),h=document.createElement("TD"),c=document.createElement("TD");return h.appendChild(o),c.appendChild(s),a.appendChild(h),a.appendChild(c),a}onRemove(){this.controlContainer&&this.controlContainer.parentNode&&this.map&&this.exportButton&&(this.exportButton.removeEventListener("click",this.onDocumentClick),this.controlContainer.parentNode.removeChild(this.controlContainer),document.removeEventListener("click",this.onDocumentClick),void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0),this.map=void 0)}onDocumentClick(t){this.controlContainer&&!this.controlContainer.contains(t.target)&&this.exportContainer&&this.exportButton&&(this.exportContainer.style.display="none",this.exportButton.style.display="block",this.toggleCrosshair(!1),this.togglePrintableArea(!1))}toggleCrosshair(t){!0===this.options.Crosshair&&(!1===t?void 0!==this.crosshair&&(this.crosshair.destroy(),this.crosshair=void 0):(this.crosshair=new n.default(this.map),this.crosshair.create()))}togglePrintableArea(t){!0===this.options.PrintableArea&&(!1===t?void 0!==this.printableArea&&(this.printableArea.destroy(),this.printableArea=void 0):(this.printableArea=new r.default(this.map),this.updatePrintableArea()))}updatePrintableArea(){if(void 0===this.printableArea)return;const t=document.getElementById("mapbox-gl-export-page-size"),e=document.getElementById("mapbox-gl-export-page-orientaiton").value;let i=JSON.parse(t.value);e===s.PageOrientation.Portrait&&(i=i.reverse()),this.printableArea.updateArea(i[0],i[1])}}},9620:(t,e,i)=>{"use strict";e.g8=e.ED=e.gf=e.$u=e.HN=void 0;var n=i(2337);Object.defineProperty(e,"HN",{enumerable:!0,get:function(){return n.default}});var r=i(3927);Object.defineProperty(e,"$u",{enumerable:!0,get:function(){return r.Size}}),Object.defineProperty(e,"gf",{enumerable:!0,get:function(){return r.PageOrientation}}),Object.defineProperty(e,"ED",{enumerable:!0,get:function(){return r.Format}}),Object.defineProperty(e,"g8",{enumerable:!0,get:function(){return r.DPI}})},2868:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={PageSize:"Papierformat",PageOrientation:"Papierausrichtung",Format:"Dateiformat",DPI:"Druckauflösung",Generate:"Erstellen"}},8261:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={PageSize:"Page Size",PageOrientation:"Page Orientation",Format:"Format",DPI:"DPI",Generate:"Generate"}},497:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={PageSize:"Sivukoko",PageOrientation:"Sivun suunta",Format:"Muoto",DPI:"DPI",Generate:"Generoi"}},3722:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={PageSize:"Taille de page",PageOrientation:"Orientation de la page",Format:"Format",DPI:"DPI",Generate:"Générer"}},7476:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.vietnam=e.swedish=e.german=e.finnish=e.french=e.english=void 0;const n=i(8261);e.english=n.default;const r=i(3722);e.french=r.default;const o=i(497);e.finnish=o.default;const s=i(2868);e.german=s.default;const a=i(2822);e.swedish=a.default;const h=i(6167);e.vietnam=h.default},2822:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={PageSize:"Sidstorlek",PageOrientation:"Sidorientering",Format:"Format",DPI:"DPI",Generate:"Generera"}},6167:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={PageSize:"Kích thước trang",PageOrientation:"Loại trang",Format:"Định dạng",DPI:"Mật độ điểm ảnh (DPI)",Generate:"Tạo"}},3927:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DPI=e.PageOrientation=e.Size=e.Unit=e.Format=void 0;const n=i(7851),r=i(3162),o=i(7140);i(4245);const s=i(2777);e.Format={JPEG:"jpg",PNG:"png",PDF:"pdf",SVG:"svg"},e.Unit={in:"in",mm:"mm"},e.Size={LETTER:[279,216],A2:[594,420],A3:[420,297],A4:[297,210],A5:[210,148],A6:[148,105],B2:[707,500],B3:[500,353],B4:[353,250],B5:[250,176],B6:[176,125]},e.PageOrientation={Landscape:"landscape",Portrait:"portrait"},e.DPI={72:72,96:96,200:200,300:300,400:400},e.default=class{constructor(t,i=e.Size.A4,n=300,r=e.Format.PNG.toString(),o=e.Unit.mm,s){this.map=t,this.width=i[0],this.height=i[1],this.dpi=n,this.format=r,this.unit=o,this.accesstoken=s}generate(){const t=this;JsLoadingOverlay.show({overlayBackgroundColor:"#5D5959",overlayOpacity:"0.6",spinnerIcon:"ball-spin",spinnerColor:"#2400FD",spinnerSize:"2x",overlayIDName:"overlay",spinnerIDName:"spinner",offsetX:0,offsetY:0,containerID:null,lockScroll:!1,overlayZIndex:9998,spinnerZIndex:9999});const i=window.devicePixelRatio;Object.defineProperty(window,"devicePixelRatio",{get:()=>t.dpi/96});const n=document.createElement("div");n.className="hidden-map",document.body.appendChild(n);const r=document.createElement("div");r.style.width=this.toPixels(this.width),r.style.height=this.toPixels(this.height),n.appendChild(r);const s=this.map.getStyle();if(s&&s.sources){const t=s.sources;Object.keys(t).forEach((e=>{const i=t[e];Object.keys(i).forEach((t=>{i[t]||delete i[t]}))}))}const a=new o.Map({accessToken:this.accesstoken||o.accessToken,container:r,style:s,center:this.map.getCenter(),zoom:this.map.getZoom(),bearing:this.map.getBearing(),pitch:this.map.getPitch(),interactive:!1,preserveDrawingBuffer:!0,fadeDuration:0,attributionControl:!1,transformRequest:this.map._requestManager._transformRequestFn}),h=(this.map.style.imageManager||{}).images||[];Object.keys(h).forEach((t=>{a.addImage(t,h[t].data)})),a.once("idle",(()=>{var r;const o=a.getCanvas(),s=`map.${t.format}`;switch(t.format){case e.Format.PNG:t.toPNG(o,s);break;case e.Format.JPEG:t.toJPEG(o,s);break;case e.Format.PDF:t.toPDF(a,s);break;case e.Format.SVG:t.toSVG(o,s);break;default:console.error(`Invalid file format: ${t.format}`)}a.remove(),null===(r=n.parentNode)||void 0===r||r.removeChild(n),Object.defineProperty(window,"devicePixelRatio",{get:()=>i}),JsLoadingOverlay.hide()}))}toPNG(t,e){t.toBlob((t=>{(0,r.saveAs)(t,e)}))}toJPEG(t,e){const i=t.toDataURL("image/jpeg",.85),n=document.createElement("a");n.href=i,n.download=e,n.click(),n.remove()}toPDF(t,e){const i=t.getCanvas(),r=new n.jsPDF({orientation:this.width>this.height?"l":"p",unit:this.unit,compress:!0});r.addImage(i.toDataURL("image/png"),"png",0,0,this.width,this.height,void 0,"FAST");const{lng:o,lat:s}=t.getCenter();r.setProperties({title:t.getStyle().name,subject:`center: [${o}, ${s}], zoom: ${t.getZoom()}`,creator:"Mapbox GL Export Plugin",author:"(c)Mapbox, (c)OpenStreetMap"}),r.save(e)}toSVG(t,e){const i=t.toDataURL("image/png");s.fabric.Image.fromURL(i,(t=>{const i=new s.fabric.Canvas("canvas"),n=Number(this.toPixels(this.width,this.dpi).replace("px","")),r=Number(this.toPixels(this.height,this.dpi).replace("px",""));t.scaleToWidth(n),t.scaleToHeight(r),i.add(t);const o=i.toSVG({x:0,y:0,width:n,height:r,viewBox:{x:0,y:0,width:n,height:r}}),a=document.createElement("a");a.href=`data:application/xml,${encodeURIComponent(o)}`,a.download=e,a.click(),a.remove()}))}toPixels(t,i=96){return this.unit===e.Unit.mm&&(i/=25.4),i*t+"px"}}},8098:(t,e,i)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=i(3927);e.default=class{constructor(t){var e,i,n;if(this.map=t,void 0===this.map)return;this.mapResize=this.mapResize.bind(this),this.map.on("resize",this.mapResize);const r=null===(e=this.map)||void 0===e?void 0:e.getCanvas().clientWidth,o=null===(i=this.map)||void 0===i?void 0:i.getCanvas().clientHeight,s=document.createElementNS("http://www.w3.org/2000/svg","svg");s.style.position="absolute",s.style.top="0px",s.style.left="0px",s.setAttribute("width",`${r}px`),s.setAttribute("height",`${o}px`);const a=document.createElementNS("http://www.w3.org/2000/svg","path");a.setAttribute("style","fill:#888888;stroke-width:0"),a.setAttribute("fill-opacity","0.5"),s.append(a),null===(n=this.map)||void 0===n||n.getCanvasContainer().appendChild(s),this.svgCanvas=s,this.svgPath=a}mapResize(){this.generateCutOut()}updateArea(t,e){this.width=t,this.height=e,this.unit=n.Unit.mm,this.generateCutOut()}generateCutOut(){var t,e;if(void 0===this.map||void 0===this.svgCanvas||void 0===this.svgPath)return;const i=this.toPixels(this.width),n=this.toPixels(this.height),r=null===(t=this.map)||void 0===t?void 0:t.getCanvas().clientWidth,o=null===(e=this.map)||void 0===e?void 0:e.getCanvas().clientHeight,s=r/2-i/2,a=s+i,h=o/2-n/2,c=h+n;this.svgCanvas.setAttribute("width",`${r}px`),this.svgCanvas.setAttribute("height",`${o}px`),this.svgPath.setAttribute("d",`M 0 0 L ${r} 0 L ${r} ${o} L 0 ${o} M ${s} ${h} L ${s} ${c} L ${a} ${c} L ${a} ${h}`)}destroy(){void 0!==this.svgCanvas&&(this.svgCanvas.remove(),this.svgCanvas=void 0),void 0!==this.map&&(this.map=void 0)}toPixels(t,e=96){return this.unit===n.Unit.mm&&(e/=25.4),e*t}}},7976:t=>{"use strict";t.exports='data:image/svg+xml;charset=UTF-8,<svg id="Capa_1" enable-background="new 0 0 512 512" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="m422.5 99v-24c0-41.355-33.645-75-75-75h-184c-41.355 0-75 33.645-75 75v24z"/><path d="m118.5 319v122 26 15c0 16.568 13.431 30 30 30h214c16.569 0 30-13.432 30-30v-15-26-122zm177 128h-80c-8.284 0-15-6.716-15-15s6.716-15 15-15h80c8.284 0 15 6.716 15 15s-6.716 15-15 15zm0-64h-80c-8.284 0-15-6.716-15-15s6.716-15 15-15h80c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/><path d="m436.5 129h-361c-41.355 0-75 33.645-75 75v120c0 41.355 33.645 75 75 75h13v-80h-9c-8.284 0-15-6.716-15-15s6.716-15 15-15h24 304 24c8.284 0 15 6.716 15 15s-6.716 15-15 15h-9v80h14c41.355 0 75-33.645 75-75v-120c0-41.355-33.645-75-75-75zm-309 94h-48c-8.284 0-15-6.716-15-15s6.716-15 15-15h48c8.284 0 15 6.716 15 15s-6.716 15-15 15z"/></g></svg>'},7140:t=>{"use strict";t.exports=mapboxgl},4960:()=>{},6759:()=>{},6272:()=>{}},o={};function s(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={id:t,exports:{}};return r[t].call(i.exports,i,i.exports,s),i.exports}s.m=r,s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},e=Object.getPrototypeOf?t=>Object.getPrototypeOf(t):t=>t.__proto__,s.t=function(i,n){if(1&n&&(i=this(i)),8&n)return i;if("object"==typeof i&&i){if(4&n&&i.__esModule)return i;if(16&n&&"function"==typeof i.then)return i}var r=Object.create(null);s.r(r);var o={};t=t||[null,e({}),e([]),e(e)];for(var a=2&n&&i;"object"==typeof a&&!~t.indexOf(a);a=e(a))Object.getOwnPropertyNames(a).forEach((t=>o[t]=()=>i[t]));return o.default=()=>i,s.d(r,o),r},s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.f={},s.e=t=>Promise.all(Object.keys(s.f).reduce(((e,i)=>(s.f[i](t,e),e)),[])),s.u=t=>t+".bundle.js",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i={},n="@watergis/mapbox-gl-export:",s.l=(t,e,r,o)=>{if(i[t])i[t].push(e);else{var a,h;if(void 0!==r)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==n+r){a=u;break}}a||(h=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",n+r),a.src=t),i[t]=[e];var f=(e,n)=>{a.onerror=a.onload=null,clearTimeout(d);var r=i[t];if(delete i[t],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((t=>t(n))),e)return e(n)},d=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),h&&document.head.appendChild(a)}},s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var e=s.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t})(),(()=>{s.b=document.baseURI||self.location.href;var t={179:0};s.f.j=(e,i)=>{var n=s.o(t,e)?t[e]:void 0;if(0!==n)if(n)i.push(n[2]);else{var r=new Promise(((i,r)=>n=t[e]=[i,r]));i.push(n[2]=r);var o=s.p+s.u(e),a=new Error;s.l(o,(i=>{if(s.o(t,e)&&(0!==(n=t[e])&&(t[e]=void 0),n)){var r=i&&("load"===i.type?"missing":i.type),o=i&&i.target&&i.target.src;a.message="Loading chunk "+e+" failed.\n("+r+": "+o+")",a.name="ChunkLoadError",a.type=r,a.request=o,n[1](a)}}),"chunk-"+e,e)}};var e=(e,i)=>{var n,r,[o,a,h]=i,c=0;if(o.some((e=>0!==t[e]))){for(n in a)s.o(a,n)&&(s.m[n]=a[n]);h&&h(s)}for(e&&e(i);c<o.length;c++)r=o[c],s.o(t,r)&&t[r]&&t[r][0](),t[r]=0},i=self.webpackChunk_watergis_mapbox_gl_export=self.webpackChunk_watergis_mapbox_gl_export||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})(),s.nc=void 0,(()=>{"use strict";var t=s(7140),e=s.n(t),i=s(9620),n=s(3379),r=s.n(n),o=s(7795),a=s.n(o),h=s(569),c=s.n(h),l=s(3565),u=s.n(l),f=s(9216),d=s.n(f),p=s(4589),g=s.n(p),m=s(2170),v={};v.styleTagTransform=g(),v.setAttributes=u(),v.insert=c().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d(),r()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals,(()=>{const t=new(e().Map)({container:"map",style:"https://narwassco.github.io/mapbox-stylefiles/unvt/style.json",center:[35.87063,-1.08551],zoom:12,hash:!0});t.addControl(new(e().NavigationControl),"top-right"),t.addControl(new i.HN({PageSize:i.$u.A3,PageOrientation:i.gf.Portrait,Format:i.ED.PNG,DPI:i.g8[96],Crosshair:!0,PrintableArea:!0,Local:"en"}),"top-right")})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7VUFDSUEsRUFEQUMsRUNBQUMsRUFDQUMsK0dDR0FDLEVBQWdDLElBQUlDLElBQUksYUFDeENDLEVBQTBCLElBQTRCLEtBQ3REQyxFQUFxQyxJQUFnQ0gsR0FFekVFLEVBQXdCRSxLQUFLLENBQUNDLEVBQU9DLEdBQUksNG1CQUE4bUJILEVBQXFDLGtQQUFtUCxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyw4QkFBOEIsTUFBUSxHQUFHLFNBQVcsbVdBQW1XLGVBQWlCLENBQUMsd3REQUF3dUQsV0FBYSxNQUV4bUcsaUNDSkFFLEVBQU9FLFFBQVUsU0FBVUMsR0FDekIsSUFBSUMsRUFBTyxHQTZGWCxPQTNGQUEsRUFBS0MsU0FBVyxXQUNkLE9BQU9DLEtBQUtDLEtBQUksU0FBVUMsR0FDeEIsSUFBSUMsRUFBVSxHQUNWQyxPQUErQixJQUFaRixFQUFLLEdBNEI1QixPQTFCSUEsRUFBSyxLQUNQQyxHQUFXLGNBQWNFLE9BQU9ILEVBQUssR0FBSSxRQUd2Q0EsRUFBSyxLQUNQQyxHQUFXLFVBQVVFLE9BQU9ILEVBQUssR0FBSSxPQUduQ0UsSUFDRkQsR0FBVyxTQUFTRSxPQUFPSCxFQUFLLEdBQUdJLE9BQVMsRUFBSSxJQUFJRCxPQUFPSCxFQUFLLElBQU0sR0FBSSxPQUc1RUMsR0FBV04sRUFBdUJLLEdBRTlCRSxJQUNGRCxHQUFXLEtBR1RELEVBQUssS0FDUEMsR0FBVyxLQUdURCxFQUFLLEtBQ1BDLEdBQVcsS0FHTkEsQ0FDVCxJQUFHSSxLQUFLLEdBQ1YsRUFHQVQsRUFBS1UsRUFBSSxTQUFXQyxFQUFTQyxFQUFPQyxFQUFRQyxFQUFVQyxHQUM3QixpQkFBWkosSUFDVEEsRUFBVSxDQUFDLENBQUMsS0FBTUEsT0FBU0ssS0FHN0IsSUFBSUMsRUFBeUIsQ0FBQyxFQUU5QixHQUFJSixFQUNGLElBQUssSUFBSUssRUFBSSxFQUFHQSxFQUFJaEIsS0FBS00sT0FBUVUsSUFBSyxDQUNwQyxJQUFJckIsRUFBS0ssS0FBS2dCLEdBQUcsR0FFUCxNQUFOckIsSUFDRm9CLEVBQXVCcEIsSUFBTSxFQUVqQyxDQUdGLElBQUssSUFBSXNCLEVBQUssRUFBR0EsRUFBS1IsRUFBUUgsT0FBUVcsSUFBTSxDQUMxQyxJQUFJZixFQUFPLEdBQUdHLE9BQU9JLEVBQVFRLElBRXpCTixHQUFVSSxFQUF1QmIsRUFBSyxXQUlyQixJQUFWVyxTQUNjLElBQVpYLEVBQUssS0FHZEEsRUFBSyxHQUFLLFNBQVNHLE9BQU9ILEVBQUssR0FBR0ksT0FBUyxFQUFJLElBQUlELE9BQU9ILEVBQUssSUFBTSxHQUFJLE1BQU1HLE9BQU9ILEVBQUssR0FBSSxNQUYvRkEsRUFBSyxHQUFLVyxHQU9WSCxJQUNHUixFQUFLLElBR1JBLEVBQUssR0FBSyxVQUFVRyxPQUFPSCxFQUFLLEdBQUksTUFBTUcsT0FBT0gsRUFBSyxHQUFJLEtBQzFEQSxFQUFLLEdBQUtRLEdBSFZSLEVBQUssR0FBS1EsR0FPVkUsSUFDR1YsRUFBSyxJQUdSQSxFQUFLLEdBQUssY0FBY0csT0FBT0gsRUFBSyxHQUFJLE9BQU9HLE9BQU9ILEVBQUssR0FBSSxLQUMvREEsRUFBSyxHQUFLVSxHQUhWVixFQUFLLEdBQUssR0FBR0csT0FBT08sSUFPeEJkLEVBQUtMLEtBQUtTLEdBQ1osQ0FDRixFQUVPSixDQUNULHlCQ25HQUosRUFBT0UsUUFBVSxTQUFVc0IsRUFBS0MsR0FLOUIsT0FKS0EsSUFDSEEsRUFBVSxDQUFDLEdBR1JELEdBSUxBLEVBQU1FLE9BQU9GLEVBQUlHLFdBQWFILEVBQUlJLFFBQVVKLEdBRXhDLGVBQWVLLEtBQUtMLEtBQ3RCQSxFQUFNQSxFQUFJTSxNQUFNLEdBQUksSUFHbEJMLEVBQVFNLE9BQ1ZQLEdBQU9DLEVBQVFNLE1BS2Isb0JBQW9CRixLQUFLTCxJQUFRQyxFQUFRTyxXQUNwQyxJQUFLckIsT0FBT2EsRUFBSVMsUUFBUSxLQUFNLE9BQU9BLFFBQVEsTUFBTyxPQUFRLEtBRzlEVCxHQW5CRUEsQ0FvQlgseUJDMUJBeEIsRUFBT0UsUUFBVSxTQUFVTSxHQUN6QixJQUFJQyxFQUFVRCxFQUFLLEdBQ2YwQixFQUFhMUIsRUFBSyxHQUV0QixJQUFLMEIsRUFDSCxPQUFPekIsRUFHVCxHQUFvQixtQkFBVDBCLEtBQXFCLENBQzlCLElBQUlDLEVBQVNELEtBQUtFLFNBQVNDLG1CQUFtQkMsS0FBS0MsVUFBVU4sTUFDekRPLEVBQU8sK0RBQStEOUIsT0FBT3lCLEdBQzdFTSxFQUFnQixPQUFPL0IsT0FBTzhCLEVBQU0sT0FDcENFLEVBQWFULEVBQVdVLFFBQVFyQyxLQUFJLFNBQVVzQyxHQUNoRCxNQUFPLGlCQUFpQmxDLE9BQU91QixFQUFXWSxZQUFjLElBQUluQyxPQUFPa0MsRUFBUSxNQUM3RSxJQUNBLE1BQU8sQ0FBQ3BDLEdBQVNFLE9BQU9nQyxHQUFZaEMsT0FBTyxDQUFDK0IsSUFBZ0I3QixLQUFLLEtBQ25FLENBRUEsTUFBTyxDQUFDSixHQUFTSSxLQUFLLEtBQ3hCLHdCQ1pnRWIsRUFBT0UsUUFHL0QsV0FBZSxhQU92QixTQUFTNkMsRUFBV0MsR0FDbEIsTUFBb0IsbUJBQU5BLENBQ2hCLENBSUEsSUFTSUMsRUFSQUMsTUFBTUQsUUFDR0MsTUFBTUQsUUFFTixTQUFVRCxHQUNuQixNQUE2QyxtQkFBdENHLE9BQU9DLFVBQVUvQyxTQUFTZ0QsS0FBS0wsRUFDeEMsRUFLRU0sRUFBTSxFQUNOQyxPQUFZLEVBQ1pDLE9BQW9CLEVBRXBCQyxFQUFPLFNBQWNDLEVBQVVDLEdBQ2pDQyxFQUFNTixHQUFPSSxFQUNiRSxFQUFNTixFQUFNLEdBQUtLLEVBRUwsS0FEWkwsR0FBTyxLQUtERSxFQUNGQSxFQUFrQkssR0FFbEJDLElBR04sRUFVQSxJQUFJQyxFQUFrQyxvQkFBWEMsT0FBeUJBLFlBQVM1QyxFQUN6RDZDLEVBQWdCRixHQUFpQixDQUFDLEVBQ2xDRyxFQUEwQkQsRUFBY0Usa0JBQW9CRixFQUFjRyx1QkFDMUVDLEVBQXlCLG9CQUFUQyxNQUEyQyxvQkFBWkMsU0FBeUQscUJBQTlCLENBQUMsRUFBRWxFLFNBQVNnRCxLQUFLa0IsU0FHM0ZDLEVBQXdDLG9CQUF0QkMsbUJBQThELG9CQUFsQkMsZUFBMkQsb0JBQW5CQyxlQTBDMUcsU0FBU0MsSUFHUCxJQUFJQyxFQUFtQkMsV0FDdkIsT0FBTyxXQUNMLE9BQU9ELEVBQWlCaEIsRUFBTyxFQUNqQyxDQUNGLENBRUEsSUFBSUQsRUFBUSxJQUFJVixNQUFNLEtBQ3RCLFNBQVNXLElBQ1AsSUFBSyxJQUFJL0MsRUFBSSxFQUFHQSxFQUFJd0MsRUFBS3hDLEdBQUssR0FJNUI0QyxFQUhlRSxFQUFNOUMsSUFDWDhDLEVBQU05QyxFQUFJLElBSXBCOEMsRUFBTTlDLFFBQUtNLEVBQ1h3QyxFQUFNOUMsRUFBSSxRQUFLTSxFQUdqQmtDLEVBQU0sQ0FDUixDQVlBLElBekNNeUIsRUFaQUMsRUFDQUMsRUFDQUMsRUFtREZwQixPQUFnQixFQWNwQixTQUFTcUIsRUFBS0MsRUFBZUMsR0FDM0IsSUFBSUMsRUFBU2hGLEtBRVRpRixFQUFRLElBQUlqRixLQUFLa0YsWUFBWUMsUUFFUHJFLElBQXRCbUUsRUFBTUcsSUFDUkMsRUFBWUosR0FHZCxJQUFJSyxFQUFTTixFQUFPTSxPQUdwQixHQUFJQSxFQUFRLENBQ1YsSUFBSWxDLEVBQVdtQyxVQUFVRCxFQUFTLEdBQ2xDbkMsR0FBSyxXQUNILE9BQU9xQyxFQUFlRixFQUFRTCxFQUFPN0IsRUFBVTRCLEVBQU9TLFFBQ3hELEdBQ0YsTUFDRUMsRUFBVVYsRUFBUUMsRUFBT0gsRUFBZUMsR0FHMUMsT0FBT0UsQ0FDVCxDQWlDQSxTQUFTVSxFQUFVQyxHQUlqQixHQUFJQSxHQUE0QixpQkFBWEEsR0FBdUJBLEVBQU9WLGNBRmpDbEYsS0FHaEIsT0FBTzRGLEVBR1QsSUFBSUMsRUFBVSxJQU5JN0YsS0FNWW1GLEdBRTlCLE9BREFXLEVBQVFELEVBQVNELEdBQ1ZDLENBQ1QsQ0E3RUVyQyxFQURFTyxFQXhFSyxXQUNMLE9BQU9FLFFBQVE4QixTQUFTeEMsRUFDMUIsRUF3RVNLLEdBekRMYyxFQUFhLEVBQ2JDLEVBQVcsSUFBSWYsRUFBd0JMLEdBQ3ZDcUIsRUFBT29CLFNBQVNDLGVBQWUsSUFDbkN0QixFQUFTdUIsUUFBUXRCLEVBQU0sQ0FBRXVCLGVBQWUsSUFFakMsV0FDTHZCLEVBQUt6QyxLQUFPdUMsSUFBZUEsRUFBYSxDQUMxQyxHQW9EU1IsSUEvQ0xPLEVBQVUsSUFBSUosZ0JBQ1YrQixNQUFNQyxVQUFZOUMsRUFDbkIsV0FDTCxPQUFPa0IsRUFBUTZCLE1BQU1DLFlBQVksRUFDbkMsUUE2QzJCekYsSUFBbEIyQyxFQWxCWCxXQUNFLElBQ0UsSUFBSStDLEVBQVFDLFNBQVMsY0FBVEEsR0FBMEJDLFFBQVEsU0FFOUMsWUF6RHVCLEtBd0R2QnpELEVBQVl1RCxFQUFNRyxXQUFhSCxFQUFNSSxjQXZEOUIsV0FDTDNELEVBQVVNLEVBQ1osRUFHS2UsR0FzRFAsQ0FGRSxNQUFPdUMsR0FDUCxPQUFPdkMsR0FDVCxDQUNGLENBV2tCd0MsR0FFQXhDLElBdUVsQixJQUFJYyxFQUFhMkIsS0FBS0MsU0FBU2pILFNBQVMsSUFBSWtILFVBQVUsR0FFdEQsU0FBUzlCLElBQVEsQ0FFakIsSUFBSStCLE9BQVUsRUErRGQsU0FBU0MsRUFBb0J0QixFQUFTdUIsRUFBZUMsR0FDL0NELEVBQWNsQyxjQUFnQlcsRUFBUVgsYUFBZW1DLElBQVl4QyxHQUFRdUMsRUFBY2xDLFlBQVlZLFVBQVlILEVBZnJILFNBQTJCRSxFQUFTeUIsR0FoRHBCLElBaURWQSxFQUFTaEMsT0FDWGlDLEVBQVExQixFQUFTeUIsRUFBUzdCLFNBakRmLElBa0RGNkIsRUFBU2hDLE9BQ2xCa0MsRUFBTzNCLEVBQVN5QixFQUFTN0IsU0FFekJDLEVBQVU0QixPQUFVeEcsR0FBVyxTQUFVMkcsR0FDdkMsT0FBTzNCLEVBQVFELEVBQVM0QixFQUMxQixJQUFHLFNBQVVDLEdBQ1gsT0FBT0YsRUFBTzNCLEVBQVM2QixFQUN6QixHQUVKLENBSUlDLENBQWtCOUIsRUFBU3VCLFFBRVh0RyxJQUFadUcsRUFDRkUsRUFBUTFCLEVBQVN1QixHQUNSM0UsRUFBVzRFLEdBakQxQixTQUErQnhCLEVBQVN5QixFQUFVRCxHQUNoRGxFLEdBQUssU0FBVTBDLEdBQ2IsSUFBSStCLEdBQVMsRUFDVEMsRUFYUixTQUFpQlIsRUFBU0ksRUFBT0ssRUFBb0JDLEdBQ25ELElBQ0VWLEVBQVF0RSxLQUFLMEUsRUFBT0ssRUFBb0JDLEVBRzFDLENBRkUsTUFBT2xCLEdBQ1AsT0FBT0EsQ0FDVCxDQUNGLENBS2dCbUIsQ0FBUVgsRUFBU0MsR0FBVSxTQUFVRyxHQUMzQ0csSUFHSkEsR0FBUyxFQUNMTixJQUFhRyxFQUNmM0IsRUFBUUQsRUFBUzRCLEdBRWpCRixFQUFRMUIsRUFBUzRCLEdBRXJCLElBQUcsU0FBVUMsR0FDUEUsSUFHSkEsR0FBUyxFQUVUSixFQUFPM0IsRUFBUzZCLEdBQ2xCLEdBQWlCN0IsRUFBUW9DLFNBRXBCTCxHQUFVQyxJQUNiRCxHQUFTLEVBQ1RKLEVBQU8zQixFQUFTZ0MsR0FFcEIsR0FBR2hDLEVBQ0wsQ0F1Qk1xQyxDQUFzQnJDLEVBQVN1QixFQUFlQyxHQUU5Q0UsRUFBUTFCLEVBQVN1QixFQUd2QixDQUVBLFNBQVN0QixFQUFRRCxFQUFTNEIsR0FDeEIsR0FBSTVCLElBQVk0QixFQUNkRCxFQUFPM0IsRUExRUYsSUFBSXNDLFVBQVUsa0RBMkVkLEdBelNIQyxTQURvQjFGLEVBMFNJK0UsR0F4U2YsT0FBTi9FLEdBQXdCLFdBQVQwRixHQUE4QixhQUFUQSxFQWtUekNiLEVBQVExQixFQUFTNEIsT0FWaUIsQ0FDbEMsSUFBSUosT0FBVSxFQUNkLElBQ0VBLEVBQVVJLEVBQU01QyxJQUlsQixDQUhFLE1BQU9nRCxHQUVQLFlBREFMLEVBQU8zQixFQUFTZ0MsRUFFbEIsQ0FDQVYsRUFBb0J0QixFQUFTNEIsRUFBT0osRUFDdEMsQ0FuVEYsSUFBMEIzRSxFQUNwQjBGLENBcVROLENBRUEsU0FBU0MsRUFBaUJ4QyxHQUNwQkEsRUFBUXlDLFVBQ1Z6QyxFQUFReUMsU0FBU3pDLEVBQVFKLFNBRzNCOEMsRUFBUTFDLEVBQ1YsQ0FFQSxTQUFTMEIsRUFBUTFCLEVBQVM0QixHQUNwQjVCLEVBQVFQLFNBQVc0QixJQUl2QnJCLEVBQVFKLFFBQVVnQyxFQUNsQjVCLEVBQVFQLE9BM0dNLEVBNkdzQixJQUFoQ08sRUFBUTJDLGFBQWFsSSxRQUN2QjZDLEVBQUtvRixFQUFTMUMsR0FFbEIsQ0FFQSxTQUFTMkIsRUFBTzNCLEVBQVM2QixHQUNuQjdCLEVBQVFQLFNBQVc0QixJQUd2QnJCLEVBQVFQLE9BckhLLEVBc0hiTyxFQUFRSixRQUFVaUMsRUFFbEJ2RSxFQUFLa0YsRUFBa0J4QyxHQUN6QixDQUVBLFNBQVNILEVBQVVWLEVBQVFDLEVBQU9ILEVBQWVDLEdBQy9DLElBQUl5RCxFQUFleEQsRUFBT3dELGFBQ3RCbEksRUFBU2tJLEVBQWFsSSxPQUcxQjBFLEVBQU9zRCxTQUFXLEtBRWxCRSxFQUFhbEksR0FBVTJFLEVBQ3ZCdUQsRUFBYWxJLEVBcElDLEdBb0lxQndFLEVBQ25DMEQsRUFBYWxJLEVBcElBLEdBb0lxQnlFLEVBRW5CLElBQVh6RSxHQUFnQjBFLEVBQU9NLFFBQ3pCbkMsRUFBS29GLEVBQVN2RCxFQUVsQixDQUVBLFNBQVN1RCxFQUFRMUMsR0FDZixJQUFJNEMsRUFBYzVDLEVBQVEyQyxhQUN0QkUsRUFBVTdDLEVBQVFQLE9BRXRCLEdBQTJCLElBQXZCbUQsRUFBWW5JLE9BQWhCLENBUUEsSUFKQSxJQUFJMkUsT0FBUSxFQUNSN0IsT0FBVyxFQUNYdUYsRUFBUzlDLEVBQVFKLFFBRVpqRixFQUFJLEVBQUdBLEVBQUlpSSxFQUFZbkksT0FBUUUsR0FBSyxFQUMzQ3lFLEVBQVF3RCxFQUFZakksR0FDcEI0QyxFQUFXcUYsRUFBWWpJLEVBQUlrSSxHQUV2QnpELEVBQ0ZPLEVBQWVrRCxFQUFTekQsRUFBTzdCLEVBQVV1RixHQUV6Q3ZGLEVBQVN1RixHQUliOUMsRUFBUTJDLGFBQWFsSSxPQUFTLENBakI5QixDQWtCRixDQUVBLFNBQVNrRixFQUFla0QsRUFBUzdDLEVBQVN6QyxFQUFVdUYsR0FDbEQsSUFBSUMsRUFBY25HLEVBQVdXLEdBQ3pCcUUsT0FBUSxFQUNSSSxPQUFRLEVBQ1JnQixHQUFZLEVBRWhCLEdBQUlELEVBQWEsQ0FDZixJQUNFbkIsRUFBUXJFLEVBQVN1RixFQUluQixDQUhFLE1BQU85QixHQUNQZ0MsR0FBWSxFQUNaaEIsRUFBUWhCLENBQ1YsQ0FFQSxHQUFJaEIsSUFBWTRCLEVBRWQsWUFEQUQsRUFBTzNCLEVBN0tKLElBQUlzQyxVQUFVLHdEQWdMckIsTUFDRVYsRUFBUWtCLEVBR045QyxFQUFRUCxTQUFXNEIsSUFFWjBCLEdBQWVDLEVBQ3hCL0MsRUFBUUQsRUFBUzRCLElBQ00sSUFBZG9CLEVBQ1RyQixFQUFPM0IsRUFBU2dDLEdBak1KLElBa01IYSxFQUNUbkIsRUFBUTFCLEVBQVM0QixHQWxNTixJQW1NRmlCLEdBQ1RsQixFQUFPM0IsRUFBUzRCLEdBRXBCLENBY0EsSUFBSTlILEVBQUssRUFLVCxTQUFTMEYsRUFBWVEsR0FDbkJBLEVBQVFULEdBQWN6RixJQUN0QmtHLEVBQVFQLFlBQVN4RSxFQUNqQitFLEVBQVFKLGFBQVUzRSxFQUNsQitFLEVBQVEyQyxhQUFlLEVBQ3pCLENBTUEsSUFBSU0sRUFBYSxXQUNmLFNBQVNBLEVBQVdDLEVBQWFDLEdBQy9CaEosS0FBS2lKLHFCQUF1QkYsRUFDNUIvSSxLQUFLNkYsUUFBVSxJQUFJa0QsRUFBWTVELEdBRTFCbkYsS0FBSzZGLFFBQVFULElBQ2hCQyxFQUFZckYsS0FBSzZGLFNBR2ZsRCxFQUFRcUcsSUFDVmhKLEtBQUtNLE9BQVMwSSxFQUFNMUksT0FDcEJOLEtBQUtrSixXQUFhRixFQUFNMUksT0FFeEJOLEtBQUt5RixRQUFVLElBQUk3QyxNQUFNNUMsS0FBS00sUUFFVixJQUFoQk4sS0FBS00sT0FDUGlILEVBQVF2SCxLQUFLNkYsUUFBUzdGLEtBQUt5RixVQUUzQnpGLEtBQUtNLE9BQVNOLEtBQUtNLFFBQVUsRUFDN0JOLEtBQUttSixXQUFXSCxHQUNRLElBQXBCaEosS0FBS2tKLFlBQ1AzQixFQUFRdkgsS0FBSzZGLFFBQVM3RixLQUFLeUYsV0FJL0IrQixFQUFPeEgsS0FBSzZGLFFBNUJULElBQUl1RCxNQUFNLDJDQThCakIsQ0E0RUEsT0ExRUFOLEVBQVdoRyxVQUFVcUcsV0FBYSxTQUFvQkgsR0FDcEQsSUFBSyxJQUFJeEksRUFBSSxFQUFHUixLQUFLc0YsU0FBVzRCLEdBQVcxRyxFQUFJd0ksRUFBTTFJLE9BQVFFLElBQzNEUixLQUFLcUosV0FBV0wsRUFBTXhJLEdBQUlBLEVBRTlCLEVBRUFzSSxFQUFXaEcsVUFBVXVHLFdBQWEsU0FBb0JDLEVBQU85SSxHQUMzRCxJQUFJK0ksRUFBSXZKLEtBQUtpSixxQkFDVE8sRUFBYUQsRUFBRXpELFFBR25CLEdBQUkwRCxJQUFlN0QsRUFBVyxDQUM1QixJQUFJOEQsT0FBUSxFQUNSNUIsT0FBUSxFQUNSNkIsR0FBVyxFQUNmLElBQ0VELEVBQVFILEVBQU16RSxJQUloQixDQUhFLE1BQU9nQyxHQUNQNkMsR0FBVyxFQUNYN0IsRUFBUWhCLENBQ1YsQ0FFQSxHQUFJNEMsSUFBVTVFLEdBQVF5RSxFQUFNaEUsU0FBVzRCLEVBQ3JDbEgsS0FBSzJKLFdBQVdMLEVBQU1oRSxPQUFROUUsRUFBRzhJLEVBQU03RCxjQUNsQyxHQUFxQixtQkFBVmdFLEVBQ2hCekosS0FBS2tKLGFBQ0xsSixLQUFLeUYsUUFBUWpGLEdBQUs4SSxPQUNiLEdBQUlDLElBQU1LLEVBQVcsQ0FDMUIsSUFBSS9ELEVBQVUsSUFBSTBELEVBQUVwRSxHQUNoQnVFLEVBQ0ZsQyxFQUFPM0IsRUFBU2dDLEdBRWhCVixFQUFvQnRCLEVBQVN5RCxFQUFPRyxHQUV0Q3pKLEtBQUs2SixjQUFjaEUsRUFBU3JGLEVBQzlCLE1BQ0VSLEtBQUs2SixjQUFjLElBQUlOLEdBQUUsU0FBVUMsR0FDakMsT0FBT0EsRUFBV0YsRUFDcEIsSUFBSTlJLEVBRVIsTUFDRVIsS0FBSzZKLGNBQWNMLEVBQVdGLEdBQVE5SSxFQUUxQyxFQUVBc0ksRUFBV2hHLFVBQVU2RyxXQUFhLFNBQW9CRyxFQUFPdEosRUFBR2lILEdBQzlELElBQUk1QixFQUFVN0YsS0FBSzZGLFFBR2ZBLEVBQVFQLFNBQVc0QixJQUNyQmxILEtBQUtrSixhQW5USSxJQXFUTFksRUFDRnRDLEVBQU8zQixFQUFTNEIsR0FFaEJ6SCxLQUFLeUYsUUFBUWpGLEdBQUtpSCxHQUlFLElBQXBCekgsS0FBS2tKLFlBQ1AzQixFQUFRMUIsRUFBUzdGLEtBQUt5RixRQUUxQixFQUVBcUQsRUFBV2hHLFVBQVUrRyxjQUFnQixTQUF1QmhFLEVBQVNyRixHQUNuRSxJQUFJdUosRUFBYS9KLEtBRWpCMEYsRUFBVUcsT0FBUy9FLEdBQVcsU0FBVTJHLEdBQ3RDLE9BQU9zQyxFQUFXSixXQXRVUixFQXNVOEJuSixFQUFHaUgsRUFDN0MsSUFBRyxTQUFVQyxHQUNYLE9BQU9xQyxFQUFXSixXQXZVVCxFQXVVOEJuSixFQUFHa0gsRUFDNUMsR0FDRixFQUVPb0IsQ0FDVCxDQXhHaUIsR0EwWWpCLElBQUljLEVBQVksV0FDZCxTQUFTSSxFQUFRQyxHQUNmakssS0FBS29GLEdBMVpBekYsSUEyWkxLLEtBQUt5RixRQUFVekYsS0FBS3NGLFlBQVN4RSxFQUM3QmQsS0FBS3dJLGFBQWUsR0FFaEJyRCxJQUFTOEUsSUFDUyxtQkFBYkEsR0F2SGIsV0FDRSxNQUFNLElBQUk5QixVQUFVLHFGQUN0QixDQXFId0MrQixHQUNsQ2xLLGdCQUFnQmdLLEVBOWF0QixTQUEyQm5FLEVBQVNvRSxHQUNsQyxJQUNFQSxHQUFTLFNBQXdCeEMsR0FDL0IzQixFQUFRRCxFQUFTNEIsRUFDbkIsSUFBRyxTQUF1QkMsR0FDeEJGLEVBQU8zQixFQUFTNkIsRUFDbEIsR0FHRixDQUZFLE1BQU9iLEdBQ1BXLEVBQU8zQixFQUFTZ0IsRUFDbEIsQ0FDRixDQW9hZ0NzRCxDQUFrQm5LLEtBQU1pSyxHQXBIeEQsV0FDRSxNQUFNLElBQUk5QixVQUFVLHdIQUN0QixDQWtIb0VpQyxHQUVsRSxDQTJQQSxPQS9EQUosRUFBUWxILFVBQVV1SCxNQUFRLFNBQWdCdEYsR0FDeEMsT0FBTy9FLEtBQUs2RSxLQUFLLEtBQU1FLEVBQ3pCLEVBMENBaUYsRUFBUWxILFVBQVV3SCxRQUFVLFNBQWtCbEgsR0FDNUMsSUFBSXlDLEVBQVU3RixLQUNWa0YsRUFBY1csRUFBUVgsWUFFMUIsT0FBSXpDLEVBQVdXLEdBQ055QyxFQUFRaEIsTUFBSyxTQUFVNEMsR0FDNUIsT0FBT3ZDLEVBQVlZLFFBQVExQyxLQUFZeUIsTUFBSyxXQUMxQyxPQUFPNEMsQ0FDVCxHQUNGLElBQUcsU0FBVUMsR0FDWCxPQUFPeEMsRUFBWVksUUFBUTFDLEtBQVl5QixNQUFLLFdBQzFDLE1BQU02QyxDQUNSLEdBQ0YsSUFHSzdCLEVBQVFoQixLQUFLekIsRUFBVUEsRUFDaEMsRUFFTzRHLENBQ1QsQ0F0UWdCLEdBdVRoQixPQS9DQUosRUFBVTlHLFVBQVUrQixLQUFPQSxFQUMzQitFLEVBQVVXLElBMWZWLFNBQWFDLEdBQ1gsT0FBTyxJQUFJMUIsRUFBVzlJLEtBQU13SyxHQUFTM0UsT0FDdkMsRUF5ZkErRCxFQUFVYSxLQXRiVixTQUFjRCxHQUVaLElBQUl6QixFQUFjL0ksS0FFbEIsT0FBSzJDLEVBQVE2SCxHQUtKLElBQUl6QixHQUFZLFNBQVVqRCxFQUFTMEIsR0FFeEMsSUFEQSxJQUFJbEgsRUFBU2tLLEVBQVFsSyxPQUNaRSxFQUFJLEVBQUdBLEVBQUlGLEVBQVFFLElBQzFCdUksRUFBWWpELFFBQVEwRSxFQUFRaEssSUFBSXFFLEtBQUtpQixFQUFTMEIsRUFFbEQsSUFUTyxJQUFJdUIsR0FBWSxTQUFVMkIsRUFBR2xELEdBQ2xDLE9BQU9BLEVBQU8sSUFBSVcsVUFBVSxtQ0FDOUIsR0FTSixFQXVhQXlCLEVBQVU5RCxRQUFVSCxFQUNwQmlFLEVBQVVwQyxPQXBZVixTQUFrQkUsR0FFaEIsSUFDSTdCLEVBQVUsSUFESTdGLEtBQ1ltRixHQUU5QixPQURBcUMsRUFBTzNCLEVBQVM2QixHQUNUN0IsQ0FDVCxFQStYQStELEVBQVVlLGNBN2lDVixTQUFzQkMsR0FDcEIxSCxFQUFvQjBILENBQ3RCLEVBNGlDQWhCLEVBQVVpQixTQTFpQ1YsU0FBaUJDLEdBQ2YzSCxFQUFPMkgsQ0FDVCxFQXlpQ0FsQixFQUFVbUIsTUFBUTVILEVBcUNsQnlHLEVBQVVvQixTQWxDVixXQUNFLElBQUlDLE9BQVEsRUFFWixRQUFzQixJQUFYLEVBQUFDLEVBQ1RELEVBQVEsRUFBQUMsT0FDSCxHQUFvQixvQkFBVGxILEtBQ2hCaUgsRUFBUWpILFVBRVIsSUFDRWlILEVBQVF4RSxTQUFTLGNBQVRBLEVBR1YsQ0FGRSxNQUFPSSxHQUNQLE1BQU0sSUFBSXVDLE1BQU0sMkVBQ2xCLENBR0YsSUFBSStCLEVBQUlGLEVBQU1qQixRQUVkLEdBQUltQixFQUFHLENBQ0wsSUFBSUMsRUFBa0IsS0FDdEIsSUFDRUEsRUFBa0J2SSxPQUFPQyxVQUFVL0MsU0FBU2dELEtBQUtvSSxFQUFFckYsVUFHckQsQ0FGRSxNQUFPZSxHQUVULENBRUEsR0FBd0IscUJBQXBCdUUsSUFBMkNELEVBQUVFLEtBQy9DLE1BRUosQ0FFQUosRUFBTWpCLFFBQVVKLENBQ2xCLEVBSUFBLEVBQVVJLFFBQVVKLEVBRWJBLENBRU4sQ0F4b0NnRjBCLG1CQ05qRixJQTRtQlVDLEVBRUpDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBazVFQUMsRUFDQUMsRUFtRkFDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBR0FDLEVBOHJFSUMsRUF5dVFKQyxFQUNBQyxFQXE5RUFDLEVBQ0FDLEVBS0FDLEVBZ3VYQUMsRUEyM0RBQyxFQUNBQyxFQTdqN0JGQyxFQUFTQSxHQUFVLENBQUVDLFFBQVMsU0FTbEMsR0FQRWxOLEVBQVFpTixPQUFTQSxFQU9LLG9CQUFiN0csVUFBOEMsb0JBQVh0QyxPQUN4Q3NDLG9CQUE2QyxvQkFBakIrRyxhQUErQkEsYUFBZUMsVUFDNUVILEVBQU83RyxTQUFXQSxTQUdsQjZHLEVBQU83RyxTQUFXQSxTQUFTaUgsZUFBZUMsbUJBQW1CLElBRS9ETCxFQUFPbkosT0FBU0EsV0FFYixDQUVILElBQ0l5SixFQUFnQixJQURSLEVBQVEsTUFDVUMsT0FDNUJDLG1CQUFtQiw4RkFDbkIsQ0FDRUMsU0FBVSxDQUNSQyx1QkFBd0IsQ0FBQyxRQUUzQkMsVUFBVyxXQUNWOUosT0FDTG1KLEVBQU83RyxTQUFXbUgsRUFBY25ILFNBQ2hDNkcsRUFBT1ksb0JBQXNCLHVCQUM3QlosRUFBT2EsV0FBYSxlQUNwQmIsRUFBT25KLE9BQVN5SixFQUNoQlEsVUFBWWQsRUFBT25KLE9BQU9pSyxTQUM1QixDQXU3cUJBLFNBQVNDLEVBQW9CQyxFQUFJQyxHQUMvQixJQUFJQyxFQUFXRixFQUFHRyxPQUFRQyxFQUFlSCxFQUFjRyxhQUNuREMsRUFBTUQsRUFBYUUsV0FBVyxNQUNsQ0QsRUFBSUUsVUFBVSxFQUFHSCxFQUFhSSxRQUM5QkgsRUFBSUksTUFBTSxHQUFJLEdBRWQsSUFBSUMsRUFBVVIsRUFBU00sT0FBU0osRUFBYUksT0FDN0NILEVBQUlNLFVBQVVULEVBQVUsRUFBR1EsRUFBU04sRUFBYVEsTUFBT1IsRUFBYUksT0FBUSxFQUFHLEVBQzlFSixFQUFhUSxNQUFPUixFQUFhSSxPQUNyQyxDQVVBLFNBQVNLLEVBQXVCYixFQUFJQyxHQUNsQyxJQUErQ0ksRUFBNUJKLEVBQWNHLGFBQWlDRSxXQUFXLE1BQ3pFUSxFQUFTYixFQUFjYyxpQkFDdkJDLEVBQVVmLEVBQWNnQixrQkFDeEJDLEVBQVdKLEVBQVNFLEVBQVUsRUFHOUJHLEVBQUssSUFBSUMsV0FBV2pQLEtBQUtrUCxZQUFhLEVBQUdILEdBRXpDSSxFQUFZLElBQUloTCxrQkFBa0JuRSxLQUFLa1AsWUFBYSxFQUFHSCxHQUUzRGxCLEVBQUd1QixXQUFXLEVBQUcsRUFBR1QsRUFBUUUsRUFBU2hCLEVBQUd3QixLQUFNeEIsRUFBR3lCLGNBQWVOLEdBQ2hFLElBQUlPLEVBQVUsSUFBSUMsVUFBVUwsRUFBV1IsRUFBUUUsR0FDL0NYLEVBQUl1QixhQUFhRixFQUFTLEVBQUcsRUFDL0IsQ0FsOXFCQTFDLEVBQU82QyxpQkFBbUIsaUJBQWtCN0MsRUFBT25KLFFBQVUsaUJBQWtCbUosRUFBTzdHLFVBQ25GNkcsRUFBT25KLFFBQVVtSixFQUFPbkosT0FBT2lNLFdBQWE5QyxFQUFPbkosT0FBT2lNLFVBQVVDLGVBQWlCLEVBTXhGL0MsRUFBT2dELGFBQWlDLG9CQUFYQyxRQUNXLG9CQUFYcE0sT0FPN0JtSixFQUFPa0Qsa0JBQW9CLENBQ3pCLFVBQ0EsWUFDQSxPQUFRLGVBQWdCLFlBQ3hCLFVBQ0EsU0FBVSxtQkFBb0IsaUJBQWtCLG9CQUNoRCxrQkFBbUIsb0JBQ25CLGlCQUFrQixlQUNsQixLQUFNLGNBQWUsZ0JBQ3JCLHNCQUF1QixhQU96QmxELEVBQU9tRCxJQUFNLEdBQ2JuRCxFQUFPb0QsTUFBUSxrREFDZnBELEVBQU9xRCxTQUFXLHVCQUNsQnJELEVBQU9zRCxjQUFnQix5REFDdkJ0RCxFQUFPdUQsVUFBWSxpQkFDbkJ2RCxFQUFPd0QsVUFBWSxDQUFFLEVBQ3JCeEQsRUFBT3lELFFBQVUsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDakN6RCxFQUFPMEQsTUFBUSw2QkFRZjFELEVBQU8yRCxtQkFBcUIsUUFRNUIzRCxFQUFPNEQsa0JBQW9CLEtBUTNCNUQsRUFBTzZELGtCQUFvQixJQUszQjdELEVBQU84RCxnQkFBa0IsQ0FBRSxFQVMzQjlELEVBQU8rRCxZQUFjLEtBU3JCL0QsRUFBT2dFLHVCQUF3QixFQVUvQmhFLEVBQU9pRSxtQkFBb0IsRUFNM0JqRSxFQUFPa0UsaUJBQW1CbEUsRUFBT25KLE9BQU9xTixrQkFDZGxFLEVBQU9uSixPQUFPc04sd0JBQ2RuRSxFQUFPbkosT0FBT3VOLHFCQUNkLEVBZTFCcEUsRUFBT3FFLDBCQUE0QixFQU1uQ3JFLEVBQU9zRSxtQkFBcUIsQ0FBRSxFQVU5QnRFLEVBQU91RSxtQkFBcUIsQ0FBRSxFQU05QnZFLEVBQU93RSxxQkFBc0IsRUFTN0J4RSxFQUFPeUUscUJBQXNCLEVBRTdCekUsRUFBTzBFLGtCQUFvQixXQUN6QixPQUFJMUUsRUFBT2lFLG1CQUFxQmpFLEVBQU8yRSxrQkFBb0IzRSxFQUFPMkUsaUJBQWlCM0UsRUFBTytELGNBQ3hGYSxRQUFRQyxJQUFJLHFCQUF1QjdFLEVBQU84RSxnQkFDbkMsSUFBSzlFLEVBQU8rRSxtQkFBbUIsQ0FBRUMsU0FBVWhGLEVBQU8rRCxlQUVsRC9ELEVBQU9pRixzQkFDUCxJQUFLakYsRUFBT2lGLDJCQURoQixDQUdQLEVBR3dCLG9CQUFiOUwsVUFBOEMsb0JBQVh0QyxTQUU1Q0EsT0FBT21KLE9BQVNBLEdBSWxCLFdBT0UsU0FBU2tGLEVBQXFCQyxFQUFXQyxHQUN2QyxHQUFLalMsS0FBS2tTLGlCQUFpQkYsR0FBM0IsQ0FHQSxJQUFJRyxFQUFnQm5TLEtBQUtrUyxpQkFBaUJGLEdBQ3RDQyxFQUNGRSxFQUFjQSxFQUFjQyxRQUFRSCxLQUFZLEVBR2hEcEYsRUFBT3dGLEtBQUtDLE1BQU1DLEtBQUtKLEdBQWUsRUFOeEMsQ0FRRixDQThCQSxTQUFTSyxFQUFNUixFQUFXQyxHQUN4QixJQUFJUSxFQUFXLFdBQ2JSLEVBQVFTLE1BQU0xUyxLQUFNdUYsV0FDcEJ2RixLQUFLMlMsSUFBSVgsRUFBV1MsRUFDdEIsRUFBRUcsS0FBSzVTLE1BQ1BBLEtBQUs2UyxHQUFHYixFQUFXUyxFQUNyQixDQWdGQTVGLEVBQU9pRyxXQUFhLENBQ2xCQyxLQXpCRixTQUFjZixFQUFXN1EsR0FDdkIsSUFBS25CLEtBQUtrUyxpQkFDUixPQUFPbFMsS0FHVCxJQUFJZ1QsRUFBb0JoVCxLQUFLa1MsaUJBQWlCRixHQUM5QyxJQUFLZ0IsRUFDSCxPQUFPaFQsS0FHVCxJQUFLLElBQUlRLEVBQUksRUFBR3dDLEVBQU1nUSxFQUFrQjFTLE9BQVFFLEVBQUl3QyxFQUFLeEMsSUFDdkR3UyxFQUFrQnhTLElBQU13UyxFQUFrQnhTLEdBQUd1QyxLQUFLL0MsS0FBTW1CLEdBQVcsQ0FBRSxHQUt2RSxPQUhBbkIsS0FBS2tTLGlCQUFpQkYsR0FBYWdCLEVBQWtCQyxRQUFPLFNBQVN4TCxHQUNuRSxPQUFpQixJQUFWQSxDQUNULElBQ096SCxJQUNULEVBU0U2UyxHQTNHRixTQUFZYixFQUFXQyxHQUtyQixHQUpLalMsS0FBS2tTLG1CQUNSbFMsS0FBS2tTLGlCQUFtQixDQUFFLEdBR0gsSUFBckIzTSxVQUFVakYsT0FDWixJQUFLLElBQUk0UyxLQUFRbEIsRUFDZmhTLEtBQUs2UyxHQUFHSyxFQUFNbEIsRUFBVWtCLFNBSXJCbFQsS0FBS2tTLGlCQUFpQkYsS0FDekJoUyxLQUFLa1MsaUJBQWlCRixHQUFhLElBRXJDaFMsS0FBS2tTLGlCQUFpQkYsR0FBV3ZTLEtBQUt3UyxHQUV4QyxPQUFPalMsSUFDVCxFQTJGRW1ULEtBakZGLFNBQWNuQixFQUFXQyxHQUV2QixHQUF5QixJQUFyQjFNLFVBQVVqRixPQUNaLElBQUssSUFBSTRTLEtBQVFsQixFQUNmUSxFQUFNelAsS0FBSy9DLEtBQU1rVCxFQUFNbEIsRUFBVWtCLFNBSW5DVixFQUFNelAsS0FBSy9DLEtBQU1nUyxFQUFXQyxHQUU5QixPQUFPalMsSUFDVCxFQXVFRTJTLElBM0RGLFNBQWFYLEVBQVdDLEdBQ3RCLElBQUtqUyxLQUFLa1MsaUJBQ1IsT0FBT2xTLEtBSVQsR0FBeUIsSUFBckJ1RixVQUFVakYsT0FDWixJQUFLMFIsS0FBYWhTLEtBQUtrUyxpQkFDckJILEVBQXFCaFAsS0FBSy9DLEtBQU1nUyxRQUkvQixHQUF5QixJQUFyQnpNLFVBQVVqRixRQUF3QyxpQkFBakJpRixVQUFVLEdBQ2xELElBQUssSUFBSTJOLEtBQVFsQixFQUNmRCxFQUFxQmhQLEtBQUsvQyxLQUFNa1QsRUFBTWxCLEVBQVVrQixTQUlsRG5CLEVBQXFCaFAsS0FBSy9DLEtBQU1nUyxFQUFXQyxHQUU3QyxPQUFPalMsSUFDVCxFQXdDRCxDQTVJRCxHQWtKQTZNLEVBQU91RyxXQUFhLENBRWxCQyxTQUFVLEdBY1ZDLElBQUssV0FFSCxHQURBdFQsS0FBS3FULFNBQVM1VCxLQUFLaVQsTUFBTTFTLEtBQUtxVCxTQUFVOU4sV0FDcEN2RixLQUFLdVQsZUFDUCxJQUFLLElBQUkvUyxFQUFJLEVBQUdGLEVBQVNpRixVQUFVakYsT0FBUUUsRUFBSUYsRUFBUUUsSUFDckRSLEtBQUt1VCxlQUFlaE8sVUFBVS9FLElBSWxDLE9BREFSLEtBQUt3VCxtQkFBcUJ4VCxLQUFLeVQsbUJBQ3hCelQsSUFDVCxFQWNBMFQsU0FBVSxTQUFVOU4sRUFBUStOLEVBQU9DLEdBQ2pDLElBQUlDLEVBQVU3VCxLQUFLcVQsU0FTbkIsT0FSSU8sRUFDRkMsRUFBUUYsR0FBUy9OLEVBR2pCaU8sRUFBUUMsT0FBT0gsRUFBTyxFQUFHL04sR0FFM0I1RixLQUFLdVQsZ0JBQWtCdlQsS0FBS3VULGVBQWUzTixHQUMzQzVGLEtBQUt3VCxtQkFBcUJ4VCxLQUFLeVQsbUJBQ3hCelQsSUFDVCxFQVFBK1QsT0FBUSxXQUlOLElBSEEsSUFDSUosRUFEQUUsRUFBVTdULEtBQUtxVCxTQUNSVyxHQUFtQixFQUVyQnhULEVBQUksRUFBR0YsRUFBU2lGLFVBQVVqRixPQUFRRSxFQUFJRixFQUFRRSxLQUl0QyxLQUhmbVQsRUFBUUUsRUFBUXpCLFFBQVE3TSxVQUFVL0UsT0FJaEN3VCxHQUFtQixFQUNuQkgsRUFBUUMsT0FBT0gsRUFBTyxHQUN0QjNULEtBQUtpVSxrQkFBb0JqVSxLQUFLaVUsaUJBQWlCMU8sVUFBVS9FLEtBSzdELE9BREFSLEtBQUt3VCxtQkFBcUJRLEdBQW9CaFUsS0FBS3lULG1CQUM1Q3pULElBQ1QsRUFjQWtVLGNBQWUsU0FBUzlRLEVBQVUrUSxHQUVoQyxJQURBLElBQUlOLEVBQVU3VCxLQUFLb1UsYUFDVjVULEVBQUksRUFBR3dDLEVBQU02USxFQUFRdlQsT0FBUUUsRUFBSXdDLEVBQUt4QyxJQUM3QzRDLEVBQVNMLEtBQUtvUixFQUFTTixFQUFRclQsR0FBSUEsRUFBR3FULEdBRXhDLE9BQU83VCxJQUNULEVBU0FvVSxXQUFZLFNBQVNoTSxHQUNuQixZQUFvQixJQUFUQSxFQUNGcEksS0FBS3FULFNBQVNoVCxTQUVoQkwsS0FBS3FULFNBQVNKLFFBQU8sU0FBU29CLEdBQ25DLE9BQU9BLEVBQUVqTSxPQUFTQSxDQUNwQixHQUNGLEVBT0FsSSxLQUFNLFNBQVV5VCxHQUNkLE9BQU8zVCxLQUFLcVQsU0FBU00sRUFDdkIsRUFNQVcsUUFBUyxXQUNQLE9BQWdDLElBQXpCdFUsS0FBS3FULFNBQVMvUyxNQUN2QixFQU1BaVUsS0FBTSxXQUNKLE9BQU92VSxLQUFLcVQsU0FBUy9TLE1BQ3ZCLEVBUUFrVSxTQUFVLFNBQVU1TyxFQUFRNk8sR0FDMUIsT0FBSXpVLEtBQUtxVCxTQUFTakIsUUFBUXhNLElBQVcsS0FHNUI2TyxHQUNBelUsS0FBS3FULFNBQVNxQixNQUFLLFNBQVVDLEdBQ2xDLE1BQStCLG1CQUFqQkEsRUFBSUgsVUFBMkJHLEVBQUlILFNBQVM1TyxHQUFRLEVBQ3BFLEdBR0osRUFNQWdQLFdBQVksV0FDVixPQUFPNVUsS0FBS3FULFNBQVN3QixRQUFPLFNBQVVDLEVBQU1DLEdBRTFDLE9BREFELEdBQVFDLEVBQVFILFdBQWFHLEVBQVFILGFBQWUsRUFFdEQsR0FBRyxFQUNMLEdBT0YvSCxFQUFPbUksY0FBZ0IsQ0FNckJDLFlBQWEsU0FBUzlULEdBQ3BCLElBQUssSUFBSStSLEtBQVEvUixFQUNmbkIsS0FBS2tWLElBQUloQyxFQUFNL1IsRUFBUStSLEdBRTNCLEVBT0FpQyxjQUFlLFNBQVNDLEVBQVFDLElBQzFCRCxJQUFVQSxFQUFPRSxZQUFnQkYsYUFBa0J2SSxFQUFPMEksVUFDNUR2VixLQUFLa1YsSUFBSUcsRUFBVSxJQUFJeEksRUFBTzBJLFNBQVNILEdBRTNDLEVBUUFJLGFBQWMsU0FBU0osRUFBUUMsRUFBVWpTLElBQ25DZ1MsSUFBVUEsRUFBTzdTLFFBQVk2UyxhQUFrQnZJLEVBQU80SSxRQUl4RHJTLEdBQVlBLElBSFpwRCxLQUFLa1YsSUFBSUcsRUFBVSxJQUFJeEksRUFBTzRJLFFBQVFMLEVBQVFoUyxHQUtsRCxFQUtBc1MsV0FBWSxTQUFTZixHQUNuQixJQUFLLElBQUl6QixLQUFReUIsRUFDZjNVLEtBQUsyVixLQUFLekMsRUFBTXlCLEVBQUl6QixHQUV4QixFQVNBZ0MsSUFBSyxTQUFTVSxFQUFLbk8sR0FPakIsTUFObUIsaUJBQVJtTyxFQUNUNVYsS0FBSzBWLFdBQVdFLEdBR2hCNVYsS0FBSzJWLEtBQUtDLEVBQUtuTyxHQUVWekgsSUFDVCxFQUVBMlYsS0FBTSxTQUFTQyxFQUFLbk8sR0FDbEJ6SCxLQUFLNFYsR0FBT25PLENBQ2QsRUFRQW9PLE9BQVEsU0FBU1IsR0FDZixJQUFJNU4sRUFBUXpILEtBQUs4VixJQUFJVCxHQUlyQixNQUhxQixrQkFBVjVOLEdBQ1R6SCxLQUFLa1YsSUFBSUcsR0FBVzVOLEdBRWZ6SCxJQUNULEVBT0E4VixJQUFLLFNBQVNULEdBQ1osT0FBT3JWLEtBQUtxVixFQUNkLEdBSVE5SixFQWtzQzBCM0wsRUFoc0M5QjRMLEVBQU96RSxLQUFLeUUsS0FDWkMsRUFBUTFFLEtBQUswRSxNQUNiQyxFQUFNM0UsS0FBSzJFLElBQ1hDLEVBQVU1RSxLQUFLZ1AsR0FBSyxJQUNwQm5LLEVBQVE3RSxLQUFLZ1AsR0FBSyxFQUt0QmxKLEVBQU93RixLQUFPLENBU1oyRCxJQUFLLFNBQVNDLEdBQ1osR0FBYyxJQUFWQSxFQUFlLE9BQU8sRUFNMUIsT0FMSUEsRUFBUSxJQUVWQSxHQUFTQSxHQUVNQSxFQUFRckssR0FFdkIsS0FBSyxFQUFHLEtBQUssRUFBRyxPQUFPLEVBQ3ZCLEtBQUssRUFBRyxPQUFRLEVBRWxCLE9BQU83RSxLQUFLaVAsSUFBSUMsRUFDbEIsRUFTQUMsSUFBSyxTQUFTRCxHQUNaLEdBQWMsSUFBVkEsRUFBZSxPQUFPLEVBQzFCLElBQWdDRSxFQUFPLEVBS3ZDLE9BSklGLEVBQVEsSUFFVkUsR0FBUSxHQUhPRixFQUFRckssR0FNdkIsS0FBSyxFQUFHLE9BQU91SyxFQUNmLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHLE9BQVFBLEVBRWxCLE9BQU9wUCxLQUFLbVAsSUFBSUQsRUFDbEIsRUFXQUcsZ0JBQWlCLFNBQVM5RCxFQUFPN0ssR0FDL0IsSUFBSTRPLEVBQU0vRCxFQUFNRixRQUFRM0ssR0FJeEIsT0FIYSxJQUFUNE8sR0FDRi9ELEVBQU13QixPQUFPdUMsRUFBSyxHQUViL0QsQ0FDVCxFQVVBZ0UsYUFBYyxTQUFTakssRUFBS0MsR0FDMUIsT0FBT3ZGLEtBQUt3UCxNQUFNeFAsS0FBS0MsVUFBWXNGLEVBQU1ELEVBQU0sSUFBTUEsQ0FDdkQsRUFTQUUsaUJBQWtCLFNBQVNpSyxHQUN6QixPQUFPQSxFQUFVN0ssQ0FDbkIsRUFTQThLLGlCQUFrQixTQUFTQyxHQUN6QixPQUFPQSxFQUFVL0ssQ0FDbkIsRUFXQWdMLFlBQWEsU0FBU0MsRUFBT0MsRUFBUUgsR0FDbkMsSUFBSUksRUFBVyxJQUFJakssRUFBT2tLLE1BQU1ILEVBQU1sVSxFQUFJbVUsRUFBT25VLEVBQUdrVSxFQUFNSSxFQUFJSCxFQUFPRyxHQUNqRUMsRUFBSXBLLEVBQU93RixLQUFLNkUsYUFBYUosRUFBVUosR0FDM0MsT0FBTyxJQUFJN0osRUFBT2tLLE1BQU1FLEVBQUV2VSxFQUFHdVUsRUFBRUQsR0FBR0csVUFBVU4sRUFDOUMsRUFVQUssYUFBYyxTQUFTRSxFQUFRVixHQUM3QixJQUFJUixFQUFNckosRUFBT3dGLEtBQUs2RCxJQUFJUSxHQUN0QlYsRUFBTW5KLEVBQU93RixLQUFLMkQsSUFBSVUsR0FHMUIsTUFBTyxDQUNMaFUsRUFITzBVLEVBQU8xVSxFQUFJc1QsRUFBTW9CLEVBQU9KLEVBQUlkLEVBSW5DYyxFQUhPSSxFQUFPMVUsRUFBSXdULEVBQU1rQixFQUFPSixFQUFJaEIsRUFLdkMsRUFlQXFCLGFBQWMsU0FBVUMsRUFBTUMsR0FDNUIsT0FBTyxJQUFJMUssRUFBT2tLLE1BQU1RLEVBQUc3VSxFQUFJNFUsRUFBSzVVLEVBQUc2VSxFQUFHUCxFQUFJTSxFQUFLTixFQUNyRCxFQVVBUSx3QkFBeUIsU0FBVUMsRUFBR0MsR0FDcEMsT0FBTzNRLEtBQUs0USxNQUFNRixFQUFFL1UsRUFBSWdWLEVBQUVoVixFQUFJK1UsRUFBRVQsRUFBSVUsRUFBRVYsSUFBTWpRLEtBQUs2USxNQUFNSCxFQUFFL1UsRUFBRytVLEVBQUVULEdBQUtqUSxLQUFLNlEsTUFBTUYsRUFBRWhWLEVBQUdnVixFQUFFVixJQUN2RixFQVFBYSxhQUFjLFNBQVVaLEdBQ3RCLE9BQU8sSUFBSXBLLEVBQU9rSyxNQUFNRSxFQUFFdlUsRUFBR3VVLEVBQUVELEdBQUdjLFNBQVMsRUFBSS9RLEtBQUs2USxNQUFNWCxFQUFFdlUsRUFBR3VVLEVBQUVELEdBQ25FLEVBVUFlLFlBQWEsU0FBVUMsRUFBR0MsRUFBR0MsR0FDM0IsSUFBSUMsRUFBS3RMLEVBQU93RixLQUFLZ0YsYUFBYVcsRUFBR0MsR0FBSUcsRUFBS3ZMLEVBQU93RixLQUFLZ0YsYUFBYVcsRUFBR0UsR0FDdEVHLEVBQVF4TCxFQUFPd0YsS0FBS21GLHdCQUF3QlcsRUFBSUMsR0FHaERFLEVBQU1ELEdBQWdCLElBRGpCeEwsRUFBT3dGLEtBQUttRix3QkFBd0IzSyxFQUFPd0YsS0FBSzZFLGFBQWFpQixFQUFJRSxHQUFRRCxHQUNwRCxHQUFLLEdBQUssRUFDeEMsTUFBTyxDQUNMaEIsT0FBUXZLLEVBQU93RixLQUFLd0YsYUFBYWhMLEVBQU93RixLQUFLNkUsYUFBYWlCLEVBQUlHLElBQzlEckMsTUFBT29DLEVBRVgsRUFxQkFFLHNCQUF1QixTQUFVQyxFQUFRclgsRUFBU3NYLEdBQ2hELElBQUlDLEVBQVMsR0FBSUMsRUFBSXhYLEVBQVF5WCxZQUFjLEVBQ3ZDQyxFQUFzQjFYLEVBQVEyWCxjQUM1QixJQUFJak0sRUFBT2tLLE1BQU0sRUFBSTVWLEVBQVE0WCxPQUFRLEVBQUk1WCxFQUFRNlgsUUFBVSxJQUFJbk0sRUFBT2tLLE1BQU0sRUFBRyxHQUNqRmtDLEVBQXFCLFNBQVVoQyxHQUM3QixJQUFJaUMsRUFBU1AsRUFBSzVSLEtBQUs2USxNQUFNWCxFQUFFdlUsRUFBR3VVLEVBQUVELEdBQ3BDLE9BQU8sSUFBSW5LLEVBQU9rSyxNQUFNRSxFQUFFdlUsRUFBSXdXLEVBQVNMLEVBQW9CblcsRUFBR3VVLEVBQUVELEVBQUlrQyxFQUFTTCxFQUFvQjdCLEVBQ25HLEVBQ0osT0FBSXdCLEVBQU9sWSxRQUFVLEdBQ3JCa1ksRUFBT1csU0FBUSxTQUFVQyxFQUFHekYsR0FDMUIsSUFBb0NzRSxFQUFHQyxFQUFuQ0YsRUFBSSxJQUFJbkwsRUFBT2tLLE1BQU1xQyxFQUFFMVcsRUFBRzBXLEVBQUVwQyxHQUNsQixJQUFWckQsR0FDRnVFLEVBQUlNLEVBQU83RSxFQUFRLEdBQ25Cc0UsRUFBSVEsRUFBV1EsRUFBbUJwTSxFQUFPd0YsS0FBS2dGLGFBQWFhLEVBQUdGLElBQUliLFVBQVVhLEdBQUtRLEVBQU9BLEVBQU9sWSxPQUFTLElBRWpHcVQsSUFBVTZFLEVBQU9sWSxPQUFTLEdBQ2pDMlgsRUFBSU8sRUFBTzdFLEVBQVEsR0FDbkJ1RSxFQUFJTyxFQUFXUSxFQUFtQnBNLEVBQU93RixLQUFLZ0YsYUFBYVksRUFBR0QsSUFBSWIsVUFBVWEsR0FBS1EsRUFBTyxLQUd4RlAsRUFBSU8sRUFBTzdFLEVBQVEsR0FDbkJ1RSxFQUFJTSxFQUFPN0UsRUFBUSxJQUVyQixJQUdJdUYsRUFDQUcsRUFKQUMsRUFBV3pNLEVBQU93RixLQUFLMEYsWUFBWUMsRUFBR0MsRUFBR0MsR0FDekNxQixFQUFpQkQsRUFBU2xDLE9BQzFCaUIsRUFBUWlCLEVBQVNyRCxNQUdyQixHQUErQixVQUEzQjlVLEVBQVFxWSxpQkFDVk4sR0FBVVAsRUFBSTVSLEtBQUttUCxJQUFJbUMsRUFBUSxHQUMvQmdCLEVBQWMsSUFBSXhNLEVBQU9rSyxNQUN2QndDLEVBQWU3VyxFQUFJd1csRUFBU0wsRUFBb0JuVyxFQUNoRDZXLEVBQWV2QyxFQUFJa0MsRUFBU0wsRUFBb0I3QixHQUU5Q2pRLEtBQUs2USxNQUFNeUIsRUFBWTNXLEVBQUcyVyxFQUFZckMsR0FBSzJCLEdBQUt4WCxFQUFRc1ksa0JBRzFELE9BRkFmLEVBQU9qWixLQUFLdVksRUFBRTFFLElBQUkrRixTQUNsQlgsRUFBT2paLEtBQUt1WSxFQUFFMEIsU0FBU0wsSUFJM0JILEdBQVVQLEVBQUk1UixLQUFLNFMsTUFDbkJOLEVBQWMsSUFBSXhNLEVBQU9rSyxNQUN2QndDLEVBQWU3VyxFQUFJd1csRUFBU0wsRUFBb0JuVyxFQUNoRDZXLEVBQWV2QyxFQUFJa0MsRUFBU0wsRUFBb0I3QixHQUVsRDBCLEVBQU9qWixLQUFLdVksRUFBRTFFLElBQUkrRixJQUNsQlgsRUFBT2paLEtBQUt1WSxFQUFFMEIsU0FBU0wsR0FDekIsSUF2Q2dDWCxDQXlDbEMsRUFXQWtCLGVBQWdCLFNBQVNSLEVBQUdTLEVBQUdDLEdBQzdCLE9BQUlBLEVBQ0ssSUFBSWpOLEVBQU9rSyxNQUNoQjhDLEVBQUUsR0FBS1QsRUFBRTFXLEVBQUltWCxFQUFFLEdBQUtULEVBQUVwQyxFQUN0QjZDLEVBQUUsR0FBS1QsRUFBRTFXLEVBQUltWCxFQUFFLEdBQUtULEVBQUVwQyxHQUduQixJQUFJbkssRUFBT2tLLE1BQ2hCOEMsRUFBRSxHQUFLVCxFQUFFMVcsRUFBSW1YLEVBQUUsR0FBS1QsRUFBRXBDLEVBQUk2QyxFQUFFLEdBQzVCQSxFQUFFLEdBQUtULEVBQUUxVyxFQUFJbVgsRUFBRSxHQUFLVCxFQUFFcEMsRUFBSTZDLEVBQUUsR0FFaEMsRUFRQUUsMEJBQTJCLFNBQVN2QixFQUFRd0IsR0FDMUMsR0FBSUEsRUFDRixJQUFLLElBQUl4WixFQUFJLEVBQUdBLEVBQUlnWSxFQUFPbFksT0FBUUUsSUFDakNnWSxFQUFPaFksR0FBS3FNLEVBQU93RixLQUFLdUgsZUFBZXBCLEVBQU9oWSxHQUFJd1osR0FHdEQsSUFBSUMsRUFBVSxDQUFDekIsRUFBTyxHQUFHOVYsRUFBRzhWLEVBQU8sR0FBRzlWLEVBQUc4VixFQUFPLEdBQUc5VixFQUFHOFYsRUFBTyxHQUFHOVYsR0FDNUR3WCxFQUFPck4sRUFBT3dGLEtBQUtDLE1BQU1qRyxJQUFJNE4sR0FFN0J4TCxFQURPNUIsRUFBT3dGLEtBQUtDLE1BQU1oRyxJQUFJMk4sR0FDZEMsRUFDZkMsRUFBVSxDQUFDM0IsRUFBTyxHQUFHeEIsRUFBR3dCLEVBQU8sR0FBR3hCLEVBQUd3QixFQUFPLEdBQUd4QixFQUFHd0IsRUFBTyxHQUFHeEIsR0FDNURvRCxFQUFPdk4sRUFBT3dGLEtBQUtDLE1BQU1qRyxJQUFJOE4sR0FJakMsTUFBTyxDQUNMRSxLQUFNSCxFQUNOSSxJQUFLRixFQUNMM0wsTUFBT0EsRUFDUEosT0FQU3hCLEVBQU93RixLQUFLQyxNQUFNaEcsSUFBSTZOLEdBQ2JDLEVBUXRCLEVBU0FHLGdCQUFpQixTQUFTVixHQUN4QixJQUFJcEMsRUFBSSxHQUFLb0MsRUFBRSxHQUFLQSxFQUFFLEdBQUtBLEVBQUUsR0FBS0EsRUFBRSxJQUNoQ1csRUFBSSxDQUFDL0MsRUFBSW9DLEVBQUUsSUFBS3BDLEVBQUlvQyxFQUFFLElBQUtwQyxFQUFJb0MsRUFBRSxHQUFJcEMsRUFBSW9DLEVBQUUsSUFDM0N4RixFQUFJeEgsRUFBT3dGLEtBQUt1SCxlQUFlLENBQUVsWCxFQUFHbVgsRUFBRSxHQUFJN0MsRUFBRzZDLEVBQUUsSUFBTVcsR0FBRyxHQUc1RCxPQUZBQSxFQUFFLElBQU1uRyxFQUFFM1IsRUFDVjhYLEVBQUUsSUFBTW5HLEVBQUUyQyxFQUNId0QsQ0FDVCxFQVVBN04sUUFBUyxTQUFTOE4sRUFBUUMsR0FDeEIsT0FBT0MsV0FBV0MsT0FBT0gsR0FBUTlOLFFBQVErTixHQUMzQyxFQVNBRyxVQUFXLFNBQVNwVCxFQUFPcVQsR0FDekIsSUFBSUMsRUFBTyxXQUFXQyxLQUFLdlQsR0FDdkJnVCxFQUFTRSxXQUFXbFQsR0FJeEIsT0FIS3FULElBQ0hBLEVBQVdqTyxFQUFPb08sS0FBS0MsdUJBRWpCSCxFQUFLLElBQ1gsSUFBSyxLQUNILE9BQU9OLEVBQVM1TixFQUFPbUQsSUFBTSxLQUUvQixJQUFLLEtBQ0gsT0FBT3lLLEVBQVM1TixFQUFPbUQsSUFBTSxLQUUvQixJQUFLLEtBQ0gsT0FBT3lLLEVBQVM1TixFQUFPbUQsSUFFekIsSUFBSyxLQUNILE9BQU95SyxFQUFTNU4sRUFBT21ELElBQU0sR0FFL0IsSUFBSyxLQUNILE9BQU95SyxFQUFTNU4sRUFBT21ELElBQU0sR0FBSyxHQUVwQyxJQUFLLEtBQ0gsT0FBT3lLLEVBQVNLLEVBRWxCLFFBQ0UsT0FBT0wsRUFFYixFQVFBVSxjQUFlLFdBQ2IsT0FBTyxDQUNULEVBU0FDLFNBQVUsU0FBU2hULEVBQU1pVCxHQUd2QixPQURBalQsRUFBT3lFLEVBQU93RixLQUFLaUosT0FBT0MsU0FBU25ULEVBQUtvVCxPQUFPLEdBQUdDLGNBQWdCclQsRUFBSzVHLE1BQU0sSUFDdEVxTCxFQUFPd0YsS0FBS3FKLGlCQUFpQkwsR0FBV2pULEVBQ2pELEVBUUF1VCxpQkFBa0IsU0FBU3ZULEdBQ3pCLElBQUl3VCxFQUFhLENBQ2Ysc0JBQ0EsUUFDQSxLQUNBLFNBRUYsT0FBUXhULEdBQ04sSUFBSyxpQkFDSHdULEVBQWFBLEVBQVd2YixPQUFPLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxnQkFBaUIsc0JBQ3pFLE1BQ0YsSUFBSyxpQkFDSHViLEVBQWFBLEVBQVd2YixPQUFPLENBQUMsZ0JBQWlCLG9CQUFxQixLQUFNLEtBQU0sSUFBSyxLQUFNLEtBQU0sT0FDbkcsTUFDRixJQUFLLE9BQ0h1YixFQUFhQSxFQUFXdmIsT0FBTyxDQUFDLFNBQVUsYUFBYyxpQkFHNUQsT0FBT3ViLENBQ1QsRUFRQUYsaUJBQWtCLFNBQVNMLEdBQ3pCLElBQUtBLEVBQ0gsT0FBT3hPLEVBR1QsSUFDd0JyTSxFQURwQnFiLEVBQVFSLEVBQVVTLE1BQU0sS0FDeEI5WSxFQUFNNlksRUFBTXZiLE9BQ1pxVSxFQUFNcEosR0FBVXNCLEVBQU9uSixPQUUzQixJQUFLbEQsRUFBSSxFQUFHQSxFQUFJd0MsSUFBT3hDLEVBQ3JCbVUsRUFBTUEsRUFBSWtILEVBQU1yYixJQUdsQixPQUFPbVUsQ0FDVCxFQVVBb0gsVUFBVyxTQUFTN2EsRUFBS2tDLEVBQVUrUSxFQUFTNkgsR0FDMUMsR0FBSzlhLEVBQUwsQ0FLQSxJQUFJK2EsRUFBTXBQLEVBQU93RixLQUFLNkosY0FHbEJDLEVBQWlCLFdBQ25CL1ksR0FBWUEsRUFBU0wsS0FBS29SLEVBQVM4SCxHQUFLLEdBQ3hDQSxFQUFNQSxFQUFJRyxPQUFTSCxFQUFJSSxRQUFVLElBQ25DLEVBRUFKLEVBQUlHLE9BQVNELEVBRWJGLEVBQUlJLFFBQVUsV0FDWnhQLEVBQU82RSxJQUFJLGlCQUFtQnVLLEVBQUlLLEtBQ2xDbFosR0FBWUEsRUFBU0wsS0FBS29SLEVBQVMsTUFBTSxHQUN6QzhILEVBQU1BLEVBQUlHLE9BQVNILEVBQUlJLFFBQVUsSUFDbkMsRUFPNEIsSUFBeEJuYixFQUFJa1IsUUFBUSxTQUFabFIsTUFDRjhhLElBRUFDLEVBQUlELFlBQWNBLEdBTVEsbUJBQXhCOWEsRUFBSStGLFVBQVUsRUFBRSxNQUNsQmdWLEVBQUlHLE9BQVMsS0FDYnZQLEVBQU93RixLQUFLa0ssZUFBZU4sRUFBS0UsSUFHbENGLEVBQUlLLElBQU1wYixDQXJDVixNQUZFa0MsR0FBWUEsRUFBU0wsS0FBS29SLEVBQVNqVCxFQXdDdkMsRUFTQXFiLGVBQWdCLFNBQVNOLEVBQUtFLEdBQzVCLElBQUlLLEVBQU0zUCxFQUFPN0csU0FBU3lXLGNBQWMsT0FDeENELEVBQUlFLE1BQU1qTyxNQUFRK04sRUFBSUUsTUFBTXJPLE9BQVMsTUFDckNtTyxFQUFJRSxNQUFNckMsS0FBT21DLEVBQUlFLE1BQU1wQyxJQUFNLFFBQ2pDa0MsRUFBSUUsTUFBTUMsU0FBVyxXQUNyQkgsRUFBSUksWUFBWVgsR0FDaEJwUCxFQUFPN0csU0FBUzZXLGNBQWMsUUFBUUQsWUFBWUosR0FNbERQLEVBQUlHLE9BQVMsV0FDWEQsSUFDQUssRUFBSU0sV0FBV0MsWUFBWVAsR0FDM0JBLEVBQU0sSUFDUixDQUNGLEVBWUFRLGVBQWdCLFNBQVNuSixFQUFTelEsRUFBVWlZLEVBQVc0QixHQUdyRCxJQUFJQyxFQUFtQixHQUNuQkMsRUFBbUIsRUFDbkJDLEdBSkp2SixFQUFVQSxHQUFXLElBSVN2VCxPQUU5QixTQUFTK2MsTUFDREYsSUFBcUJDLEdBQ3pCaGEsR0FBWUEsRUFBUzhaLEVBQWlCakssUUFBTyxTQUFTMEIsR0FFcEQsT0FBT0EsQ0FDVCxJQUVKLENBRUt5SSxFQUtMdkosRUFBUXNGLFNBQVEsU0FBVTlFLEVBQUdWLEdBRXRCVSxHQUFNQSxFQUFFak0sS0FJRHlFLEVBQU93RixLQUFLK0ksU0FBUy9HLEVBQUVqTSxLQUFNaVQsR0FDbkNpQyxXQUFXakosR0FBRyxTQUFVTSxFQUFLOU0sR0FDakNBLElBQVVxVixFQUFpQnZKLEdBQVNnQixHQUNwQ3NJLEdBQVdBLEVBQVE1SSxFQUFHTSxFQUFLOU0sR0FDM0J3VixHQUNGLElBUkVBLEdBU0osSUFoQkVqYSxHQUFZQSxFQUFTOFosRUFpQnpCLEVBU0FLLHdCQUF5QixTQUFVM1gsRUFBUXVPLEVBQVMvUSxHQUNsRCxJQUFJb2EsRUFBZTNRLEVBQU9oSyxPQUFPNGEsY0FBY3hLLFFBQU8sU0FBVTJDLEdBQU8sUUFBU2hRLEVBQU9nUSxFQUFNLElBQzdGL0ksRUFBT3dGLEtBQUsySyxlQUFlUSxFQUFhdmQsS0FBSSxTQUFVMlYsR0FBTyxPQUFPaFEsRUFBT2dRLEVBQU0sS0FBSSxTQUFVOEgsR0FDN0YsSUFBSTdKLEVBQVUsQ0FBQyxFQUNmMkosRUFBYXJFLFNBQVEsU0FBVXZELEVBQUtqQyxHQUNsQ0UsRUFBUStCLEdBQU84SCxFQUFhL0osR0FDNUJRLElBQVlBLEVBQVF5QixHQUFPOEgsRUFBYS9KLEdBQzFDLElBQ0F2USxHQUFZQSxFQUFTeVEsRUFDdkIsR0FDRixFQVVBOEosZ0JBQWlCLFNBQVNDLEVBQVV4YSxHQUdsQyxTQUFTaWEsTUFDRFEsSUFBc0JDLEdBQzFCMWEsR0FBWUEsRUFBUzJhLEVBRXpCLENBRUEsSUFBSUEsRUFBb0IsR0FDcEJGLEVBQW9CLEVBQ3BCQyxHQVZKRixFQUFXQSxHQUFZLElBVUl0ZCxPQUV0QndkLEVBS0xGLEVBQVN6RSxTQUFRLFNBQVVDLEVBQUd6RixHQUN4QnlGLEdBQUtBLEVBQUU3VyxPQUNULElBQUlzSyxFQUFPNEksUUFBUTJELEdBQUcsU0FBUzRFLEdBQzdCRCxFQUFrQnBLLEdBQVNxSyxFQUMzQlgsR0FDRixLQUdBVSxFQUFrQnBLLEdBQVN5RixFQUMzQmlFLElBRUosSUFmRWphLEdBQVlBLEVBQVMyYSxFQWdCekIsRUFXQUUsaUJBQWtCLFNBQVNDLEVBQVUvYyxFQUFTZ2QsR0FDNUMsSUFBSXZZLEVBQ0osT0FBSXNZLEdBQWdDLElBQXBCQSxFQUFTNWQsT0FDaEI0ZCxFQUFTLElBRWQvYyxJQUNFQSxFQUFRc04sT0FBU3ROLEVBQVFrTixPQUMzQmxOLEVBQVFpZCxZQUFjLENBQ3BCMWIsRUFBR3ZCLEVBQVFzTixNQUFRLEVBQ25CdUksRUFBRzdWLEVBQVFrTixPQUFTLFdBSWZsTixFQUFRc04sYUFDUnROLEVBQVFrTixTQUduQnpJLEVBQVMsSUFBSWlILEVBQU93UixNQUFNSCxFQUFVL2MsUUFDaEIsSUFBVGdkLElBQ1R2WSxFQUFPMFksV0FBYUgsR0FFZnZZLEVBQ1QsRUFVQTJZLHVCQUF3QixTQUFTaGMsRUFBUWljLEVBQWFDLEdBQ3BELEdBQUlBLEdBQWM3YixNQUFNRCxRQUFROGIsR0FDOUIsSUFBSyxJQUFJamUsRUFBSSxFQUFHd0MsRUFBTXliLEVBQVduZSxPQUFRRSxFQUFJd0MsRUFBS3hDLElBQzVDaWUsRUFBV2plLEtBQU0rQixJQUNuQmljLEVBQVlDLEVBQVdqZSxJQUFNK0IsRUFBT2tjLEVBQVdqZSxJQUl2RCxFQVFBa2Usb0JBQXFCLFdBQ25CLE9BQU83UixFQUFPN0csU0FBU3lXLGNBQWMsU0FDdkMsRUFTQWtDLGtCQUFtQixTQUFTM1EsR0FDMUIsSUFBSTRRLEVBQVkvUixFQUFPd0YsS0FBS3FNLHNCQUk1QixPQUhBRSxFQUFVblEsTUFBUVQsRUFBT1MsTUFDekJtUSxFQUFVdlEsT0FBU0wsRUFBT0ssT0FDMUJ1USxFQUFVelEsV0FBVyxNQUFNSyxVQUFVUixFQUFRLEVBQUcsR0FDekM0USxDQUNULEVBV0FDLFVBQVcsU0FBU0MsRUFBVUMsRUFBUUMsR0FDcEMsT0FBT0YsRUFBU0QsVUFBVSxTQUFXRSxFQUFRQyxFQUMvQyxFQVFBOUMsWUFBYSxXQUNYLE9BQU9yUCxFQUFPN0csU0FBU3lXLGNBQWMsTUFDdkMsRUFXQXdDLDBCQUEyQixTQUFTeEgsRUFBR0MsRUFBR3dILEdBRXhDLE1BQU8sQ0FDTHpILEVBQUUsR0FBS0MsRUFBRSxHQUFLRCxFQUFFLEdBQUtDLEVBQUUsR0FDdkJELEVBQUUsR0FBS0MsRUFBRSxHQUFLRCxFQUFFLEdBQUtDLEVBQUUsR0FDdkJELEVBQUUsR0FBS0MsRUFBRSxHQUFLRCxFQUFFLEdBQUtDLEVBQUUsR0FDdkJELEVBQUUsR0FBS0MsRUFBRSxHQUFLRCxFQUFFLEdBQUtDLEVBQUUsR0FDdkJ3SCxFQUFRLEVBQUl6SCxFQUFFLEdBQUtDLEVBQUUsR0FBS0QsRUFBRSxHQUFLQyxFQUFFLEdBQUtELEVBQUUsR0FDMUN5SCxFQUFRLEVBQUl6SCxFQUFFLEdBQUtDLEVBQUUsR0FBS0QsRUFBRSxHQUFLQyxFQUFFLEdBQUtELEVBQUUsR0FFOUMsRUFTQTBILFlBQWEsU0FBUzFILEdBQ3BCLElBQUl4QixFQUFReEssRUFBTWdNLEVBQUUsR0FBSUEsRUFBRSxJQUN0QjJILEVBQVExVCxFQUFJK0wsRUFBRSxHQUFJLEdBQUsvTCxFQUFJK0wsRUFBRSxHQUFJLEdBQ2pDc0IsRUFBU3ZOLEVBQUs0VCxHQUNkcEcsR0FBVXZCLEVBQUUsR0FBS0EsRUFBRSxHQUFLQSxFQUFFLEdBQUtBLEVBQUUsSUFBTXNCLEVBQ3ZDc0csRUFBUTVULEVBQU1nTSxFQUFFLEdBQUtBLEVBQUUsR0FBS0EsRUFBRSxHQUFLQSxFQUFHLEdBQUkySCxHQUM5QyxNQUFPLENBQ0xuSixNQUFPQSxFQUFRdEssRUFDZm9OLE9BQVFBLEVBQ1JDLE9BQVFBLEVBQ1JxRyxNQUFPQSxFQUFRMVQsRUFDZjJULE1BQU8sRUFDUEMsV0FBWTlILEVBQUUsR0FDZCtILFdBQVkvSCxFQUFFLEdBRWxCLEVBWUFnSSxpQkFBa0IsU0FBU3RlLEdBQ3pCLElBQUtBLEVBQVE4VSxNQUNYLE9BQU9wSixFQUFPeUQsUUFBUWpRLFNBRXhCLElBQUlxZixFQUFRN1MsRUFBT3dGLEtBQUs5RixpQkFBaUJwTCxFQUFROFUsT0FDN0NELEVBQU1uSixFQUFPd0YsS0FBSzJELElBQUkwSixHQUN0QnhKLEVBQU1ySixFQUFPd0YsS0FBSzZELElBQUl3SixHQUMxQixNQUFPLENBQUMxSixFQUFLRSxHQUFNQSxFQUFLRixFQUFLLEVBQUcsRUFDbEMsRUFtQkEySixxQkFBc0IsU0FBU3hlLEdBQzdCLElBQUk0WCxPQUFtQyxJQUFuQjVYLEVBQVE0WCxPQUF5QixFQUFJNVgsRUFBUTRYLE9BQzdEQyxPQUFtQyxJQUFuQjdYLEVBQVE2WCxPQUF5QixFQUFJN1gsRUFBUTZYLE9BQzdENEcsRUFBYyxDQUNaemUsRUFBUTBlLE9BQVM5RyxFQUFTQSxFQUMxQixFQUNBLEVBQ0E1WCxFQUFRMmUsT0FBUzlHLEVBQVNBLEVBQzFCLEVBQ0EsR0FDRmxCLEVBQVdqTCxFQUFPd0YsS0FBSzRNLDBCQUN2QjFTLEVBQW1CTSxFQUFPd0YsS0FBSzlGLGlCQWFuQyxPQVpJcEwsRUFBUWtlLFFBQ1ZPLEVBQWM5SCxFQUNaOEgsRUFDQSxDQUFDLEVBQUcsRUFBRzdZLEtBQUtnWixJQUFJeFQsRUFBaUJwTCxFQUFRa2UsUUFBUyxJQUNsRCxJQUVBbGUsRUFBUW1lLFFBQ1ZNLEVBQWM5SCxFQUNaOEgsRUFDQSxDQUFDLEVBQUc3WSxLQUFLZ1osSUFBSXhULEVBQWlCcEwsRUFBUW1lLFFBQVMsRUFBRyxJQUNsRCxJQUVHTSxDQUNULEVBb0JBSSxjQUFlLFNBQVM3ZSxHQUN0QixJQUFJOGUsRUFBUyxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUc5ZSxFQUFRb2UsWUFBYyxFQUFHcGUsRUFBUXFlLFlBQWMsR0FDckUxSCxFQUFXakwsRUFBT3dGLEtBQUs0TSwwQkFRM0IsT0FQSTlkLEVBQVE4VSxRQUNWZ0ssRUFBU25JLEVBQVNtSSxFQUFRcFQsRUFBT3dGLEtBQUtvTixpQkFBaUJ0ZSxNQUVsQyxJQUFuQkEsRUFBUTRYLFFBQW1DLElBQW5CNVgsRUFBUTZYLFFBQ2hDN1gsRUFBUWtlLE9BQVNsZSxFQUFRbWUsT0FBU25lLEVBQVEwZSxPQUFTMWUsRUFBUTJlLFNBQzdERyxFQUFTbkksRUFBU21JLEVBQVFwVCxFQUFPd0YsS0FBS3NOLHFCQUFxQnhlLEtBRXREOGUsQ0FDVCxFQVFBQyxxQkFBc0IsU0FBVUMsR0FDOUJBLEVBQU9wSCxPQUFTLEVBQ2hCb0gsRUFBT25ILE9BQVMsRUFDaEJtSCxFQUFPZCxNQUFRLEVBQ2ZjLEVBQU9iLE1BQVEsRUFDZmEsRUFBT04sT0FBUSxFQUNmTSxFQUFPTCxPQUFRLEVBQ2ZLLEVBQU9DLE9BQU8sRUFDaEIsRUFTQUMsb0JBQXFCLFNBQVVGLEdBQzdCLE1BQU8sQ0FDTHBILE9BQVFvSCxFQUFPcEgsT0FDZkMsT0FBUW1ILEVBQU9uSCxPQUNmcUcsTUFBT2MsRUFBT2QsTUFDZEMsTUFBT2EsRUFBT2IsTUFDZHJKLE1BQU9rSyxFQUFPbEssTUFDZG9FLEtBQU04RixFQUFPOUYsS0FDYndGLE1BQU9NLEVBQU9OLE1BQ2RDLE1BQU9LLEVBQU9MLE1BQ2R4RixJQUFLNkYsRUFBTzdGLElBRWhCLEVBVUFnRyxjQUFlLFNBQVNwUyxFQUFLeEwsRUFBR3NVLEVBQUd1SixHQUk3QkEsRUFBWSxJQUNWN2QsRUFBSTZkLEVBQ043ZCxHQUFLNmQsRUFHTDdkLEVBQUksRUFFRnNVLEVBQUl1SixFQUNOdkosR0FBS3VKLEVBR0x2SixFQUFJLEdBSVIsSUFBMkJ4VyxFQUF2QmdnQixHQUFpQixFQUNqQkMsRUFBWXZTLEVBQUl3UyxhQUFhaGUsRUFBR3NVLEVBQWdCLEVBQVp1SixHQUFrQixFQUFnQixFQUFaQSxHQUFrQixHQUM1RUksRUFBSUYsRUFBVXRlLEtBQUs3QixPQUd2QixJQUFLRSxFQUFJLEVBQUdBLEVBQUltZ0IsR0FHUyxJQUR2QkgsRUFET0MsRUFBVXRlLEtBQUszQixJQUNHLEdBRlJBLEdBQUssR0FVeEIsT0FGQWlnQixFQUFZLEtBRUxELENBQ1QsRUFPQUksa0NBQW1DLFNBQVNDLEdBQzFDLElBQzZDQyxFQUR6Q0MsRUFBYyxPQUNkQyxFQUFtQkgsRUFBVS9FLE1BQU0sS0FldkMsT0FiSWtGLEdBQW9CQSxFQUFpQjFnQixTQUVuQixVQURwQnlnQixFQUFjQyxFQUFpQkMsUUFDZSxVQUFoQkYsR0FDNUJELEVBQVFDLEVBQ1JBLEVBQWMsUUFFUEMsRUFBaUIxZ0IsU0FDeEJ3Z0IsRUFBUUUsRUFBaUJDLFFBTXRCLENBQ0xGLFlBQWFBLEVBQ2JHLE9BSmlCLFNBQVZKLEVBQW1CQSxFQUFNdGYsTUFBTSxFQUFHLEdBQUssT0FLOUMyZixPQUppQixTQUFWTCxFQUFtQkEsRUFBTXRmLE1BQU0sRUFBRyxHQUFLLE9BTWxELEVBY0E0ZixxQkFBc0IsU0FBU0MsSUFDN0JBLEdBQWNBLEdBQWMsSUFBSUMsZUFJdkJ6VSxFQUFPOEQsZ0JBQWdCMFEsV0FDdkJ4VSxFQUFPOEQsZ0JBQWdCMFEsR0FIOUJ4VSxFQUFPOEQsZ0JBQWtCLENBQUUsQ0FLL0IsRUFXQTRRLGdCQUFpQixTQUFTQyxFQUFJQyxHQUM1QixJQUFJQyxFQUFhM2EsS0FBS3lFLEtBQUtpVyxFQUFjRCxHQUNyQ0csRUFBaUI1YSxLQUFLd1AsTUFBTWtMLEVBQWNDLEdBQzlDLE1BQU8sQ0FBRWhmLEVBQUdxRSxLQUFLd1AsTUFBTW1MLEdBQWExSyxFQUFHMkssRUFDekMsRUFFQUMsU0FBVSxTQUFTdlYsRUFBSzVFLEVBQU82RSxHQUM3QixPQUFPdkYsS0FBS3VGLElBQUlELEVBQUt0RixLQUFLc0YsSUFBSTVFLEVBQU82RSxHQUN2QyxFQWVBdVYsZUFBZ0IsU0FBU3RmLEVBQVFpYyxHQUMvQixPQUFPelgsS0FBS3NGLElBQUltUyxFQUFZL1AsTUFBUWxNLEVBQU9rTSxNQUFPK1AsRUFBWW5RLE9BQVM5TCxFQUFPOEwsT0FDaEYsRUFlQXlULGlCQUFrQixTQUFTdmYsRUFBUWljLEdBQ2pDLE9BQU96WCxLQUFLdUYsSUFBSWtTLEVBQVkvUCxNQUFRbE0sRUFBT2tNLE1BQU8rUCxFQUFZblEsT0FBUzlMLEVBQU84TCxPQUNoRixFQVNBMFQsWUFBYSxTQUFTL0gsR0FDcEIsTUFBTyxVQUFZQSxFQUFVL1osS0FBSSxTQUFTd0gsR0FDeEMsT0FBT29GLEVBQU93RixLQUFLMUYsUUFBUWxGLEVBQU9vRixFQUFPaEssT0FBT21mLG9CQUNsRCxJQUFHemhCLEtBQUssS0FBTyxHQUNqQixFQWNBMGhCLDBCQUEyQixTQUFTcmMsRUFBUW9VLEdBQzFDLElBQUlrSSxFQUFXclYsRUFBT3dGLEtBQUtrSSxnQkFBZ0JQLEdBQ3ZDbUksRUFBaUJ0VixFQUFPd0YsS0FBSzRNLDBCQUEwQmlELEVBQVV0YyxFQUFPd2MsaUJBQzVFdlYsRUFBT3dGLEtBQUtnUSx1QkFBdUJ6YyxFQUFRdWMsRUFDN0MsRUFXQUcscUJBQXNCLFNBQVMxYyxFQUFRb1UsR0FDckNuTixFQUFPd0YsS0FBS2dRLHVCQUNWemMsRUFDQWlILEVBQU93RixLQUFLNE0sMEJBQTBCakYsRUFBV3BVLEVBQU93YyxpQkFFNUQsRUFRQUMsdUJBQXdCLFNBQVN6YyxFQUFRb1UsR0FDdkMsSUFBSTdZLEVBQVUwTCxFQUFPd0YsS0FBSzhNLFlBQVluRixHQUNsQ3VJLEVBQVMsSUFBSTFWLEVBQU9rSyxNQUFNNVYsRUFBUW9lLFdBQVlwZSxFQUFRcWUsWUFDMUQ1WixFQUFPaWEsT0FBUSxFQUNmamEsRUFBT2thLE9BQVEsRUFDZmxhLEVBQU9zUCxJQUFJLFNBQVUvVCxFQUFRNFgsUUFDN0JuVCxFQUFPc1AsSUFBSSxTQUFVL1QsRUFBUTZYLFFBQzdCcFQsRUFBT3laLE1BQVFsZSxFQUFRa2UsTUFDdkJ6WixFQUFPMFosTUFBUW5lLEVBQVFtZSxNQUN2QjFaLEVBQU9xUSxNQUFROVUsRUFBUThVLE1BQ3ZCclEsRUFBTzRjLG9CQUFvQkQsRUFBUSxTQUFVLFNBQy9DLEVBa0JBRSxtQkFBb0IsU0FBU2hVLEVBQU9KLEVBQVFsTixHQUMxQyxJQUFJdWhCLEVBQU9qVSxFQUFRLEVBQUdrVSxFQUFPdFUsRUFBUyxFQUNsQ21LLEVBQVMsQ0FDUCxDQUNFOVYsR0FBSWdnQixFQUNKMUwsR0FBSTJMLEdBRU4sQ0FDRWpnQixFQUFHZ2dCLEVBQ0gxTCxHQUFJMkwsR0FFTixDQUNFamdCLEdBQUlnZ0IsRUFDSjFMLEVBQUcyTCxHQUVMLENBQ0VqZ0IsRUFBR2dnQixFQUNIMUwsRUFBRzJMLElBRVBDLEVBQWtCL1YsRUFBT3dGLEtBQUtzTixxQkFBcUJ4ZSxHQUNuRDBoQixFQUFPaFcsRUFBT3dGLEtBQUswSCwwQkFBMEJ2QixFQUFRb0ssR0FDekQsTUFBTyxDQUNMbGdCLEVBQUdtZ0IsRUFBS3BVLE1BQ1J1SSxFQUFHNkwsRUFBS3hVLE9BRVosRUFxQkF5VSxlQUFnQixTQUFVQyxFQUFJQyxHQUM1QixJQUFJdkwsRUFBSXNMLEVBQUlyTCxFQUFJc0wsRUFDWnZMLEVBQUV5SyxXQUFheEssRUFBRXdLLFdBRW5CekssRUFBSXVMLEVBQ0p0TCxFQUFJcUwsR0FHTmxXLEVBQU93RixLQUFLZ1EsdUJBQ1YzSyxFQUNBN0ssRUFBT3dGLEtBQUs0TSwwQkFDVnBTLEVBQU93RixLQUFLa0ksZ0JBQWdCOUMsRUFBRXdMLHVCQUM5QnZMLEVBQUV1TCx3QkFJTixJQUFJZixFQUFXekssRUFBRXlLLFVBQVl4SyxFQUFFd0ssU0FLL0IsT0FKSUEsSUFFRnpLLEVBQUV5SyxTQUFXeEssRUFBRXdLLFVBQVcsR0FFckIsSUFBSXJWLEVBQU93UixNQUFNLENBQUM1RyxHQUFJLENBQUV5TCxTQUFVeEwsRUFBR3dLLFNBQVVBLEdBQ3hELEdBS0osV0FDRSxJQUFJaUIsRUFBUXZnQixNQUFNRSxVQUFVdkMsS0FDeEI2aUIsRUFBaUIsQ0FDZkMsRUFBRyxFQUNIMUMsRUFBRyxFQUNIMkMsRUFBRyxFQUNIck0sRUFBRyxFQUNIMU4sRUFBRyxFQUNIb1AsRUFBRyxFQUNINEssRUFBRyxFQUNIMUosRUFBRyxFQUNIcEMsRUFBRyxHQUVMK0wsRUFBbUIsQ0FDakJILEVBQUcsSUFDSEksRUFBRyxLQUVULFNBQVNDLEVBQWdCQyxFQUFLQyxFQUFLQyxFQUFPQyxFQUFPQyxFQUFJQyxFQUFJQyxFQUFLQyxFQUFLQyxFQUFJQyxFQUFPQyxHQUM1RSxJQUFJQyxFQUFTelgsRUFBT3dGLEtBQUsyRCxJQUFJMk4sR0FDekJZLEVBQVMxWCxFQUFPd0YsS0FBSzZELElBQUl5TixHQUN6QmEsRUFBUzNYLEVBQU93RixLQUFLMkQsSUFBSTROLEdBQ3pCYSxFQUFTNVgsRUFBT3dGLEtBQUs2RCxJQUFJME4sR0FDekJjLEVBQU1iLEVBQVFFLEVBQUtTLEVBQVNWLEVBQVFFLEVBQUtTLEVBQVNSLEVBQ2xEVSxFQUFNYixFQUFRQyxFQUFLUyxFQUFTWCxFQUFRRyxFQUFLUyxFQUFTUCxFQU10RCxNQUFPLENBQUMsSUFMR0UsRUFBUUQsSUFBUU4sRUFBUUUsRUFBS1EsRUFBU1QsRUFBUUUsRUFBS00sR0FDbkRELEVBQVFGLElBQVFMLEVBQVFDLEVBQUtRLEVBQVNWLEVBQVFHLEVBQUtNLEdBQ25ESSxFQUFNUCxHQUFPTixFQUFRRSxFQUFLVSxFQUFTWCxFQUFRRSxFQUFLUSxHQUNoREcsRUFBTVIsR0FBT0wsRUFBUUMsRUFBS1UsRUFBU1osRUFBUUcsRUFBS1EsR0FLekRFLEVBQUtDLEVBRVQsQ0FnRUEsU0FBU0MsRUFBZ0JDLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ25DLElBQUlDLEVBQUtsZSxLQUFLMEUsTUFBTXFaLEVBQUlELEdBQ3BCSyxFQUFLbmUsS0FBSzBFLE1BQU11WixFQUFJRCxHQUN4QixPQUFJRyxHQUFNRCxFQUNEQyxFQUFLRCxFQUdMLEVBQUlsZSxLQUFLZ1AsSUFBTWtQLEVBQUtDLEVBRS9CLENBdUdBLFNBQVNDLEVBQWlCQyxFQUFJQyxFQUFJM00sR0FVaEMsSUFUQSxJQUFJcUwsRUFBS3JMLEVBQU8sR0FDWnNMLEVBQUt0TCxFQUFPLEdBQ1o0TSxFQUFNNU0sRUFBTyxHQUNiNk0sRUFBUTdNLEVBQU8sR0FDZjhNLEVBQVE5TSxFQUFPLEdBR2YrTSxFQWxMTixTQUF1QmYsRUFBS0MsRUFBS1osRUFBSUMsRUFBSXVCLEVBQU9DLEVBQU9FLEdBQ3JELElBQUkzUCxFQUFLaFAsS0FBS2dQLEdBQUk0UCxFQUFLRCxFQUFVM1AsRUFBSyxJQUNsQytOLEVBQVFqWCxFQUFPd0YsS0FBSzZELElBQUl5UCxHQUN4QjlCLEVBQVFoWCxFQUFPd0YsS0FBSzJELElBQUkyUCxHQUN4QnZCLEVBQVEsRUFBR0MsRUFBUSxFQUtuQnVCLEdBQU0vQixFQUFRYSxFQUFNLEdBQU1aLEVBQVFhLEVBQU0sR0FDeENrQixHQUFNaEMsRUFBUWMsRUFBTSxHQUFNYixFQUFRWSxFQUFNLEdBQ3hDb0IsR0FMSi9CLEVBQUtoZCxLQUFLZ2YsSUFBSWhDLElBS0NBLEVBQUlpQyxHQUpuQmhDLEVBQUtqZCxLQUFLZ2YsSUFBSS9CLElBSWdCQSxFQUFJaUMsRUFBTUosRUFBS0EsRUFBSUssRUFBTU4sRUFBS0EsRUFDeERPLEVBQUtMLEVBQU1FLEVBQU1GLEVBQU1HLEVBQU1ELEVBQU1FLEVBQ25DRSxFQUFPLEVBRVgsR0FBSUQsRUFBSyxFQUFHLENBQ1YsSUFBSXhOLEVBQUk1UixLQUFLeUUsS0FBSyxFQUFJMmEsR0FBTUwsRUFBTUUsSUFDbENqQyxHQUFNcEwsRUFDTnFMLEdBQU1yTCxDQUNSLE1BRUV5TixHQUFRYixJQUFVQyxHQUFTLEVBQU0sR0FDekJ6ZSxLQUFLeUUsS0FBTTJhLEdBQU1MLEVBQU1HLEVBQU1ELEVBQU1FLElBRzdDLElBQUlHLEVBQUtELEVBQU9yQyxFQUFLOEIsRUFBSzdCLEVBQ3RCc0MsR0FBTUYsRUFBT3BDLEVBQUs0QixFQUFLN0IsRUFDdkJFLEVBQU1KLEVBQVF3QyxFQUFLdkMsRUFBUXdDLEVBQVcsR0FBTjVCLEVBQ2hDUixFQUFNSixFQUFRdUMsRUFBS3hDLEVBQVF5QyxFQUFXLEdBQU4zQixFQUNoQzRCLEVBQVMzQixFQUFnQixFQUFHLEdBQUlnQixFQUFLUyxHQUFNdEMsR0FBSzhCLEVBQUtTLEdBQU10QyxHQUMzRHdDLEVBQVM1QixHQUFpQmdCLEVBQUtTLEdBQU10QyxHQUFLOEIsRUFBS1MsR0FBTXRDLElBQU00QixFQUFLUyxHQUFNdEMsSUFBTThCLEVBQUtTLEdBQU10QyxHQUU3RSxJQUFWd0IsR0FBZWdCLEVBQVMsRUFDMUJBLEdBQVUsRUFBSXpRLEVBRUcsSUFBVnlQLEdBQWVnQixFQUFTLElBQy9CQSxHQUFVLEVBQUl6USxHQVNoQixJQUxBLElBQUkwUSxFQUFXMWYsS0FBSzJmLEtBQUszZixLQUFLZ2YsSUFBSVMsRUFBU3pRLEVBQUssSUFDNUM0USxFQUFTLEdBQUlDLEVBQVNKLEVBQVNDLEVBQy9CdEMsRUFBSyxFQUFJLEVBQUlwZCxLQUFLbVAsSUFBSTBRLEVBQVMsR0FBSzdmLEtBQUttUCxJQUFJMFEsRUFBUyxHQUFLN2YsS0FBS21QLElBQUkwUSxFQUFTLEdBQzdFaEQsRUFBTTJDLEVBQVNLLEVBRVZwbUIsRUFBSSxFQUFHQSxFQUFJaW1CLEVBQVVqbUIsSUFDNUJtbUIsRUFBT25tQixHQUFLa2pCLEVBQWdCNkMsRUFBUTNDLEVBQUtDLEVBQU9DLEVBQU9DLEVBQUlDLEVBQUlDLEVBQUtDLEVBQUtDLEVBQUlDLEVBQU9DLEdBQ3BGRCxFQUFRdUMsRUFBT25tQixHQUFHLEdBQ2xCNmpCLEVBQVFzQyxFQUFPbm1CLEdBQUcsR0FDbEIrbEIsRUFBUzNDLEVBQ1RBLEdBQU9nRCxFQUVULE9BQU9ELENBQ1QsQ0E2SGlCRSxDQUZObk8sRUFBTyxHQUVrQjBNLEVBRHpCMU0sRUFBTyxHQUMyQjJNLEVBQUl0QixFQUFJQyxFQUFJdUIsRUFBT0MsRUFBT0YsR0FFNUQ5a0IsRUFBSSxFQUFHd0MsRUFBTXlpQixFQUFTbmxCLE9BQVFFLEVBQUl3QyxFQUFLeEMsSUFDOUNpbEIsRUFBU2psQixHQUFHLElBQU00a0IsRUFDbEJLLEVBQVNqbEIsR0FBRyxJQUFNNmtCLEVBQ2xCSSxFQUFTamxCLEdBQUcsSUFBTTRrQixFQUNsQkssRUFBU2psQixHQUFHLElBQU02a0IsRUFDbEJJLEVBQVNqbEIsR0FBRyxJQUFNNGtCLEVBQ2xCSyxFQUFTamxCLEdBQUcsSUFBTTZrQixFQUVwQixPQUFPSSxDQUNULENBdUxBLFNBQVNxQixFQUFlQyxFQUFJQyxFQUFJQyxFQUFJQyxHQUNsQyxPQUFPbmdCLEtBQUt5RSxNQUFNeWIsRUFBS0YsSUFBT0UsRUFBS0YsSUFBT0csRUFBS0YsSUFBT0UsRUFBS0YsR0FDN0QsQ0FpQkEsU0FBU0csRUFBOEJDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEdBQ3hFLE9BQU8sU0FBU0MsR0FDZCxJQWZTL04sRUFlTGtKLEdBZktsSixFQWVJK04sR0FkSi9OLEVBQUlBLEVBY01tSixFQVp2QixTQUFhbkosR0FDWCxPQUFPLEVBQUlBLEVBQUlBLEdBQUssRUFBSUEsRUFDMUIsQ0FVNEJnTyxDQUFJRCxHQUFNRSxFQVR0QyxTQUFhak8sR0FDWCxPQUFPLEVBQUlBLEdBQUssRUFBSUEsSUFBTSxFQUFJQSxFQUNoQyxDQU8yQ2tPLENBQUlILEdBQU1JLEVBTnJELFNBQWFuTyxHQUNYLE9BQVEsRUFBSUEsSUFBTSxFQUFJQSxJQUFNLEVBQUlBLEVBQ2xDLENBSTBEb08sQ0FBSUwsR0FDMUQsTUFBTyxDQUNMbGxCLEVBQUdnbEIsRUFBTTNFLEVBQUt5RSxFQUFNeEUsRUFBS3NFLEVBQU1RLEVBQUtWLEVBQU1ZLEVBQzFDaFIsRUFBRzJRLEVBQU01RSxFQUFLMEUsRUFBTXpFLEVBQUt1RSxFQUFNTyxFQUFLVCxFQUFNVyxFQUU5QyxDQUNGLENBRUEsU0FBU0UsRUFBd0JkLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUtDLEdBQ2xFLE9BQU8sU0FBVUMsR0FDZixJQUFJTyxFQUFPLEVBQUlQLEVBQ1hRLEVBQVksRUFBSUQsRUFBT0EsR0FBUWIsRUFBTUYsR0FBUyxFQUFJZSxFQUFPUCxHQUFPSixFQUFNRixHQUNyRSxFQUFJTSxFQUFNQSxHQUFPRixFQUFNRixHQUN4QmEsRUFBWSxFQUFJRixFQUFPQSxHQUFRWixFQUFNRixHQUFTLEVBQUljLEVBQU9QLEdBQU9ILEVBQU1GLEdBQ3JFLEVBQUlLLEVBQU1BLEdBQU9ELEVBQU1GLEdBQzVCLE9BQU8xZ0IsS0FBSzBFLE1BQU00YyxFQUFVRCxFQUM5QixDQUNGLENBY0EsU0FBU0UsRUFBa0NsQixFQUFLQyxFQUFLQyxFQUFLQyxFQUFLQyxFQUFLQyxHQUNsRSxPQUFPLFNBQVNHLEdBQ2QsSUFkUy9OLEVBY0xrSixHQWRLbEosRUFjSStOLEdBYkovTixFQWFVbUosRUFWdkIsU0FBYW5KLEdBQ1gsT0FBTyxFQUFJQSxHQUFLLEVBQUlBLEVBQ3RCLENBUTRCME8sQ0FBSVgsR0FBTUUsRUFOdEMsU0FBYWpPLEdBQ1gsT0FBUSxFQUFJQSxJQUFNLEVBQUlBLEVBQ3hCLENBSTJDMk8sQ0FBSVosR0FDM0MsTUFBTyxDQUNMbGxCLEVBQUc4a0IsRUFBTXpFLEVBQUt1RSxFQUFNdEUsRUFBS29FLEVBQU1VLEVBQy9COVEsRUFBR3lRLEVBQU0xRSxFQUFLd0UsRUFBTXZFLEVBQUtxRSxFQUFNUyxFQUVuQyxDQUNGLENBRUEsU0FBU1csRUFBNEJyQixFQUFLQyxFQUFLQyxFQUFLQyxFQUFLQyxFQUFLQyxHQUM1RCxPQUFPLFNBQVVHLEdBQ2YsSUFBSU8sRUFBTyxFQUFJUCxFQUNYUSxFQUFZLEVBQUlELEdBQVFiLEVBQU1GLEdBQVMsRUFBSVEsR0FBT0osRUFBTUYsR0FDeERlLEVBQVksRUFBSUYsR0FBUVosRUFBTUYsR0FBUyxFQUFJTyxHQUFPSCxFQUFNRixHQUM1RCxPQUFPeGdCLEtBQUswRSxNQUFNNGMsRUFBVUQsRUFDOUIsQ0FDRixDQUtBLFNBQVNNLEVBQWFDLEVBQVU1QixFQUFJQyxHQUNsQyxJQUE4QjVOLEVBQWV3UCxFQUF6Q0MsRUFBUSxDQUFFbm1CLEVBQUdxa0IsRUFBSS9QLEVBQUdnUSxHQUFTOEIsRUFBUyxFQUMxQyxJQUFLRixFQUFPLEVBQUdBLEdBQVEsSUFBS0EsR0FBUSxFQUNsQ3hQLEVBQUl1UCxFQUFTQyxFQUFPLEtBQ3BCRSxHQUFVaEMsRUFBZStCLEVBQU1ubUIsRUFBR21tQixFQUFNN1IsRUFBR29DLEVBQUUxVyxFQUFHMFcsRUFBRXBDLEdBQ2xENlIsRUFBUXpQLEVBRVYsT0FBTzBQLENBQ1QsQ0F5Q0EsU0FBU0MsRUFBb0I1SyxHQUszQixJQUpBLElBQXdDcEosRUFHTzRULEVBQVVLLEVBQVVDLEVBSC9EQyxFQUFjLEVBQUdsbUIsRUFBTW1iLEVBQUs3ZCxPQUc1QnltQixFQUFLLEVBQUdDLEVBQUssRUFBR0MsRUFBSyxFQUFHQyxFQUFLLEVBQUdpQyxFQUFPLEdBQ2xDM29CLEVBQUksRUFBR0EsRUFBSXdDLEVBQUt4QyxJQUFLLENBTzVCLE9BTEF3b0IsRUFBVyxDQUNUdG1CLEVBQUdxa0IsRUFDSC9QLEVBQUdnUSxFQUNIb0MsU0FKRnJVLEVBQVVvSixFQUFLM2QsSUFJSSxJQUVYdVUsRUFBUSxJQUNkLElBQUssSUFDSGlVLEVBQVMxb0IsT0FBUyxFQUNsQjJtQixFQUFLRixFQUFLaFMsRUFBUSxHQUNsQm1TLEVBQUtGLEVBQUtqUyxFQUFRLEdBQ2xCLE1BQ0YsSUFBSyxJQUNIaVUsRUFBUzFvQixPQUFTd21CLEVBQWVDLEVBQUlDLEVBQUlqUyxFQUFRLEdBQUlBLEVBQVEsSUFDN0RnUyxFQUFLaFMsRUFBUSxHQUNiaVMsRUFBS2pTLEVBQVEsR0FDYixNQUNGLElBQUssSUFDSDRULEVBQVd4QixFQUNUSixFQUNBQyxFQUNBalMsRUFBUSxHQUNSQSxFQUFRLEdBQ1JBLEVBQVEsR0FDUkEsRUFBUSxHQUNSQSxFQUFRLEdBQ1JBLEVBQVEsSUFFVmtVLEVBQWNmLEVBQ1puQixFQUNBQyxFQUNBalMsRUFBUSxHQUNSQSxFQUFRLEdBQ1JBLEVBQVEsR0FDUkEsRUFBUSxHQUNSQSxFQUFRLEdBQ1JBLEVBQVEsSUFFVmlVLEVBQVNMLFNBQVdBLEVBQ3BCSyxFQUFTQyxZQUFjQSxFQUN2QkQsRUFBUzFvQixPQUFTb29CLEVBQWFDLEVBQVU1QixFQUFJQyxHQUM3Q0QsRUFBS2hTLEVBQVEsR0FDYmlTLEVBQUtqUyxFQUFRLEdBQ2IsTUFDRixJQUFLLElBQ0g0VCxFQUFXTCxFQUNUdkIsRUFDQUMsRUFDQWpTLEVBQVEsR0FDUkEsRUFBUSxHQUNSQSxFQUFRLEdBQ1JBLEVBQVEsSUFFVmtVLEVBQWNSLEVBQ1oxQixFQUNBQyxFQUNBalMsRUFBUSxHQUNSQSxFQUFRLEdBQ1JBLEVBQVEsR0FDUkEsRUFBUSxJQUVWaVUsRUFBU0wsU0FBV0EsRUFDcEJLLEVBQVNDLFlBQWNBLEVBQ3ZCRCxFQUFTMW9CLE9BQVNvb0IsRUFBYUMsRUFBVTVCLEVBQUlDLEdBQzdDRCxFQUFLaFMsRUFBUSxHQUNiaVMsRUFBS2pTLEVBQVEsR0FDYixNQUNGLElBQUssSUFDTCxJQUFLLElBRUhpVSxFQUFTSyxNQUFRcEMsRUFDakIrQixFQUFTTSxNQUFRcEMsRUFDakI4QixFQUFTMW9CLE9BQVN3bUIsRUFBZUMsRUFBSUMsRUFBSUMsRUFBSUMsR0FDN0NILEVBQUtFLEVBQ0xELEVBQUtFLEVBR1RnQyxHQUFlRixFQUFTMW9CLE9BQ3hCNm9CLEVBQUsxcEIsS0FBS3VwQixFQUNaLENBRUEsT0FEQUcsRUFBSzFwQixLQUFLLENBQUVhLE9BQVE0b0IsRUFBYXhtQixFQUFHcWtCLEVBQUkvUCxFQUFHZ1EsSUFDcENtQyxDQUNULENBbU1BdGMsRUFBT3dGLEtBQUtrWCxTQUFXLFNBQVNDLEdBQzlCLE9BQU9BLEVBQVN2cEIsS0FBSSxTQUFVd3BCLEdBQVcsT0FBT0EsRUFBUWxwQixLQUFLLElBQU0sSUFBR0EsS0FBSyxJQUM3RSxFQUNBc00sRUFBT3dGLEtBQUtxWCxVQWxKWixTQUFtQkMsR0FDakIsSUFFSUMsRUFDQUMsRUFRQUMsRUFDQUMsRUFFQTVMLEVBZEF3SSxFQUFTLEdBQ1RqTyxFQUFTLEdBR1RzUixFQUFLbmQsRUFBT3NELGNBQ1o4WixFQUFVLHNEQUNWQyxFQUFrQixJQUFNRCxFQUFVLElBQU1wZCxFQUFPcUQsU0FDL0NpYSxFQUFnQixTQUFXdGQsRUFBT3FELFNBQVcsSUFHN0NrYSxFQUF5QixJQUFJQyxPQUZuQkgsRUFBa0IsSUFBTUEsRUFBa0IsSUFBTUEsRUFBa0JDLEVBQWdCQSxFQUMxRkQsRUFBa0IsS0FBT0QsRUFBVSxJQUNRLEtBS2pELElBQUtOLElBQWVBLEVBQVdHLE1BQzdCLE9BQU9uRCxFQUlULElBQUssSUFBVzJELEVBQVA5cEIsRUFBSSxFQUFpQndDLEdBRjlCbWIsRUFBT3dMLEVBQVdHLE1BQU0saUNBRWlCeHBCLE9BQVFFLEVBQUl3QyxFQUFLeEMsSUFBSyxDQUc3RHVwQixHQUZBSCxFQUFjekwsRUFBSzNkLElBRUtnQixNQUFNLEdBQUcrb0IsT0FDakM3UixFQUFPcFksT0FBUyxFQUVoQixJQUFJOG9CLEVBQVVRLEVBQVlwTyxPQUFPLEdBR2pDLEdBRkE4TyxFQUFlLENBQUNsQixHQUVjLE1BQTFCQSxFQUFROUgsY0FFVixJQUFLLElBQUlrSixFQUFPQSxFQUFPSixFQUF1QnBQLEtBQUsrTyxJQUNqRCxJQUFLLElBQUlVLEVBQUksRUFBR0EsRUFBSUQsRUFBS2xxQixPQUFRbXFCLElBQy9CL1IsRUFBT2paLEtBQUsrcUIsRUFBS0MsU0FLckIsS0FBUVgsRUFBUUUsRUFBR2hQLEtBQUsrTyxJQUN0QnJSLEVBQU9qWixLQUFLcXFCLEVBQU0sSUFJYlcsRUFBSSxFQUFiLElBQUssSUFBV0MsRUFBT2hTLEVBQU9wWSxPQUFRbXFCLEVBQUlDLEVBQU1ELElBQzlDWixFQUFTbFAsV0FBV2pDLEVBQU8rUixJQUN0QkUsTUFBTWQsSUFDVFMsRUFBYTdxQixLQUFLb3FCLEdBSXRCLElBQUllLEVBQWdCeEgsRUFBZWdHLEVBQVE5SCxlQUN2Q3VKLEVBQWtCckgsRUFBaUI0RixJQUFZQSxFQUVuRCxHQUFJa0IsRUFBYWhxQixPQUFTLEVBQUlzcUIsRUFDNUIsSUFBSyxJQUFJNXBCLEVBQUksRUFBRzhwQixFQUFPUixFQUFhaHFCLE9BQVFVLEVBQUk4cEIsRUFBTTlwQixHQUFLNHBCLEVBQ3pEakUsRUFBT2xuQixLQUFLLENBQUMycEIsR0FBUy9vQixPQUFPaXFCLEVBQWE5b0IsTUFBTVIsRUFBR0EsRUFBSTRwQixLQUN2RHhCLEVBQVV5QixPQUlabEUsRUFBT2xuQixLQUFLNnFCLEVBRWhCLENBRUEsT0FBTzNELENBQ1QsRUFpRkE5WixFQUFPd0YsS0FBSzBZLGdCQXhrQlosU0FBeUI1TSxHQUl2QixJQUlvQnBKLEVBQVN2VSxFQUFHd3FCLEVBR05DLEVBQVVDLEVBQVVDLEVBUDFDem9CLEVBQUksRUFBR3NVLEVBQUksRUFBR2hVLEVBQU1tYixFQUFLN2QsT0FJekJ5bUIsRUFBSyxFQUFHQyxFQUFLLEVBR2JvRSxFQUFrQixHQUN0QixJQUFLNXFCLEVBQUksRUFBR0EsRUFBSXdDLElBQU94QyxFQUFHLENBR3hCLE9BRkF3cUIsR0FBWSxHQUNaalcsRUFBVW9KLEVBQUszZCxHQUFHZ0IsTUFBTSxJQUNSLElBQ2QsSUFBSyxJQUNIdVQsRUFBUSxHQUFLLElBQ2JBLEVBQVEsSUFBTXJTLEVBQ2RxUyxFQUFRLElBQU1pQyxFQUVoQixJQUFLLElBQ0h0VSxFQUFJcVMsRUFBUSxHQUNaaUMsRUFBSWpDLEVBQVEsR0FDWixNQUNGLElBQUssSUFDSEEsRUFBUSxJQUFNclMsRUFFaEIsSUFBSyxJQUNIcVMsRUFBUSxHQUFLLElBQ2JBLEVBQVEsR0FBS2lDLEVBQ2J0VSxFQUFJcVMsRUFBUSxHQUNaLE1BQ0YsSUFBSyxJQUNIQSxFQUFRLElBQU1pQyxFQUVoQixJQUFLLElBQ0hqQyxFQUFRLEdBQUssSUFDYmlDLEVBQUlqQyxFQUFRLEdBQ1pBLEVBQVEsR0FBS3JTLEVBQ2JxUyxFQUFRLEdBQUtpQyxFQUNiLE1BQ0YsSUFBSyxJQUNIakMsRUFBUSxHQUFLLElBQ2JBLEVBQVEsSUFBTXJTLEVBQ2RxUyxFQUFRLElBQU1pQyxFQUVoQixJQUFLLElBQ0h0VSxFQUFJcVMsRUFBUSxHQUNaaUMsRUFBSWpDLEVBQVEsR0FDWmdTLEVBQUtoUyxFQUFRLEdBQ2JpUyxFQUFLalMsRUFBUSxHQUNiLE1BQ0YsSUFBSyxJQUNIQSxFQUFRLEdBQUssSUFDYkEsRUFBUSxJQUFNclMsRUFDZHFTLEVBQVEsSUFBTWlDLEVBQ2RqQyxFQUFRLElBQU1yUyxFQUNkcVMsRUFBUSxJQUFNaUMsRUFDZGpDLEVBQVEsSUFBTXJTLEVBQ2RxUyxFQUFRLElBQU1pQyxFQUVoQixJQUFLLElBQ0hrVSxFQUFXblcsRUFBUSxHQUNuQm9XLEVBQVdwVyxFQUFRLEdBQ25CclMsRUFBSXFTLEVBQVEsR0FDWmlDLEVBQUlqQyxFQUFRLEdBQ1osTUFDRixJQUFLLElBQ0hBLEVBQVEsR0FBSyxJQUNiQSxFQUFRLElBQU1yUyxFQUNkcVMsRUFBUSxJQUFNaUMsRUFDZGpDLEVBQVEsSUFBTXJTLEVBQ2RxUyxFQUFRLElBQU1pQyxFQUVoQixJQUFLLElBRWMsTUFBYmlVLEdBRUZDLEVBQVcsRUFBSXhvQixFQUFJd29CLEVBQ25CQyxFQUFXLEVBQUluVSxFQUFJbVUsSUFLbkJELEVBQVd4b0IsRUFDWHlvQixFQUFXblUsR0FFYnRVLEVBQUlxUyxFQUFRLEdBQ1ppQyxFQUFJakMsRUFBUSxHQUNaQSxFQUFRLEdBQUssSUFDYkEsRUFBUSxHQUFLQSxFQUFRLEdBQ3JCQSxFQUFRLEdBQUtBLEVBQVEsR0FDckJBLEVBQVEsR0FBS0EsRUFBUSxHQUNyQkEsRUFBUSxHQUFLQSxFQUFRLEdBQ3JCQSxFQUFRLEdBQUttVyxFQUNiblcsRUFBUSxHQUFLb1csRUFHYkQsRUFBV25XLEVBQVEsR0FDbkJvVyxFQUFXcFcsRUFBUSxHQUNuQixNQUNGLElBQUssSUFDSEEsRUFBUSxHQUFLLElBQ2JBLEVBQVEsSUFBTXJTLEVBQ2RxUyxFQUFRLElBQU1pQyxFQUNkakMsRUFBUSxJQUFNclMsRUFDZHFTLEVBQVEsSUFBTWlDLEVBRWhCLElBQUssSUFDSGtVLEVBQVduVyxFQUFRLEdBQ25Cb1csRUFBV3BXLEVBQVEsR0FDbkJyUyxFQUFJcVMsRUFBUSxHQUNaaUMsRUFBSWpDLEVBQVEsR0FDWixNQUNGLElBQUssSUFDSEEsRUFBUSxHQUFLLElBQ2JBLEVBQVEsSUFBTXJTLEVBQ2RxUyxFQUFRLElBQU1pQyxFQUVoQixJQUFLLElBQ2MsTUFBYmlVLEdBRUZDLEVBQVcsRUFBSXhvQixFQUFJd29CLEVBQ25CQyxFQUFXLEVBQUluVSxFQUFJbVUsSUFLbkJELEVBQVd4b0IsRUFDWHlvQixFQUFXblUsR0FFYmpDLEVBQVEsR0FBSyxJQUNiclMsRUFBSXFTLEVBQVEsR0FDWmlDLEVBQUlqQyxFQUFRLEdBQ1pBLEVBQVEsR0FBS21XLEVBQ2JuVyxFQUFRLEdBQUtvVyxFQUNicFcsRUFBUSxHQUFLclMsRUFDYnFTLEVBQVEsR0FBS2lDLEVBQ2IsTUFDRixJQUFLLElBQ0hqQyxFQUFRLEdBQUssSUFDYkEsRUFBUSxJQUFNclMsRUFDZHFTLEVBQVEsSUFBTWlDLEVBRWhCLElBQUssSUFDSGdVLEdBQVksRUFDWkksRUFBa0JBLEVBQWdCL3FCLE9BQU84a0IsRUFBaUJ6aUIsRUFBR3NVLEVBQUdqQyxJQUNoRXJTLEVBQUlxUyxFQUFRLEdBQ1ppQyxFQUFJakMsRUFBUSxHQUNaLE1BQ0YsSUFBSyxJQUNMLElBQUssSUFDSHJTLEVBQUlxa0IsRUFDSi9QLEVBQUlnUSxFQUlIZ0UsR0FDSEksRUFBZ0IzckIsS0FBS3NWLEdBRXZCa1csRUFBV2xXLEVBQVEsRUFDckIsQ0FDQSxPQUFPcVcsQ0FDVCxFQXFhQXZlLEVBQU93RixLQUFLZ1osd0JBekVaLFNBQWlDN1MsRUFBUThTLEdBQ3ZDLElBQWU5cUIsRUFBWDJkLEVBQU8sR0FDUG9OLEVBQUssSUFBSTFlLEVBQU9rSyxNQUFNeUIsRUFBTyxHQUFHOVYsRUFBRzhWLEVBQU8sR0FBR3hCLEdBQzdDd1UsRUFBSyxJQUFJM2UsRUFBT2tLLE1BQU15QixFQUFPLEdBQUc5VixFQUFHOFYsRUFBTyxHQUFHeEIsR0FDN0NoVSxFQUFNd1YsRUFBT2xZLE9BQVFtckIsRUFBWSxFQUFHQyxFQUFZLEVBQUdDLEVBQWEzb0IsRUFBTSxFQVExRSxJQVBBc29CLEVBQWFBLEdBQWMsRUFFdkJLLElBQ0ZGLEVBQVlqVCxFQUFPLEdBQUc5VixFQUFJOG9CLEVBQUc5b0IsR0FBSyxFQUFJOFYsRUFBTyxHQUFHOVYsSUFBTThvQixFQUFHOW9CLEVBQUksRUFBSSxFQUNqRWdwQixFQUFZbFQsRUFBTyxHQUFHeEIsRUFBSXdVLEVBQUd4VSxHQUFLLEVBQUl3QixFQUFPLEdBQUd4QixJQUFNd1UsRUFBR3hVLEVBQUksRUFBSSxHQUVuRW1ILEVBQUsxZSxLQUFLLENBQUMsSUFBSzhyQixFQUFHN29CLEVBQUkrb0IsRUFBWUgsRUFBWUMsRUFBR3ZVLEVBQUkwVSxFQUFZSixJQUM3RDlxQixFQUFJLEVBQUdBLEVBQUl3QyxFQUFLeEMsSUFBSyxDQUN4QixJQUFLK3FCLEVBQUdLLEdBQUdKLEdBQUssQ0FDZCxJQUFJSyxFQUFXTixFQUFHTyxhQUFhTixHQUkvQnJOLEVBQUsxZSxLQUFLLENBQUMsSUFBSzhyQixFQUFHN29CLEVBQUc2b0IsRUFBR3ZVLEVBQUc2VSxFQUFTbnBCLEVBQUdtcEIsRUFBUzdVLEdBQ25ELENBQ0F1VSxFQUFLL1MsRUFBT2hZLEdBQ1BBLEVBQUksRUFBS2dZLEVBQU9sWSxTQUNuQmtyQixFQUFLaFQsRUFBT2hZLEVBQUksR0FFcEIsQ0FNQSxPQUxJbXJCLElBQ0ZGLEVBQVlGLEVBQUc3b0IsRUFBSThWLEVBQU9oWSxFQUFJLEdBQUdrQyxFQUFJLEVBQUk2b0IsRUFBRzdvQixJQUFNOFYsRUFBT2hZLEVBQUksR0FBR2tDLEVBQUksR0FBSyxFQUN6RWdwQixFQUFZSCxFQUFHdlUsRUFBSXdCLEVBQU9oWSxFQUFJLEdBQUd3VyxFQUFJLEVBQUl1VSxFQUFHdlUsSUFBTXdCLEVBQU9oWSxFQUFJLEdBQUd3VyxFQUFJLEdBQUssR0FFM0VtSCxFQUFLMWUsS0FBSyxDQUFDLElBQUs4ckIsRUFBRzdvQixFQUFJK29CLEVBQVlILEVBQVlDLEVBQUd2VSxFQUFJMFUsRUFBWUosSUFDM0RuTixDQUNULEVBMkNBdFIsRUFBT3dGLEtBQUswVyxvQkFBc0JBLEVBQ2xDbGMsRUFBT3dGLEtBQUswWixpQkEvckJaLFNBQTBCQyxFQUFJQyxFQUFJbEYsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSWdGLEVBQUlDLEdBQ3BELElBQUlDLEVBQ0osR0FBSXZmLEVBQU93RSxzQkFDVCthLEVBQWFqSixFQUFNcGdCLEtBQUt3QyxXQUNwQnNILEVBQU91RSxtQkFBbUJnYixJQUM1QixPQUFPdmYsRUFBT3VFLG1CQUFtQmdiLEdBSXJDLElBSUkzVSxFQUFHQyxFQUFHbk8sRUFBR3NRLEVBQUd3UyxFQUFJQyxFQUFJQyxFQUFNQyxFQUoxQmhoQixFQUFPekUsS0FBS3lFLEtBQ1phLEVBQU10RixLQUFLc0YsSUFBS0MsRUFBTXZGLEtBQUt1RixJQUMzQnlaLEVBQU1oZixLQUFLZ2YsSUFBSzBHLEVBQVUsR0FDMUJDLEVBQVMsQ0FBQyxHQUFJLElBR2xCaFYsRUFBSSxFQUFJc1UsRUFBSyxHQUFLakYsRUFBSyxFQUFJRSxFQUMzQnhQLEdBQUssRUFBSXVVLEVBQUssRUFBSWpGLEVBQUssRUFBSUUsRUFBSyxFQUFJaUYsRUFDcEMzaUIsRUFBSSxFQUFJd2QsRUFBSyxFQUFJaUYsRUFFakIsSUFBSyxJQUFJeHJCLEVBQUksRUFBR0EsRUFBSSxJQUFLQSxFQU92QixHQU5JQSxFQUFJLElBQ05rWCxFQUFJLEVBQUl1VSxFQUFLLEdBQUtqRixFQUFLLEVBQUlFLEVBQzNCelAsR0FBSyxFQUFJd1UsRUFBSyxFQUFJakYsRUFBSyxFQUFJRSxFQUFLLEVBQUlpRixFQUNwQzVpQixFQUFJLEVBQUl5ZCxFQUFLLEVBQUlpRixHQUdmbEcsRUFBSXRPLEdBQUssTUFBYixDQUNFLEdBQUlzTyxFQUFJck8sR0FBSyxNQUNYLFNBR0UsR0FESm1DLEdBQUt0USxFQUFJbU8sSUFDSW1DLEVBQUksR0FDZjRTLEVBQVFodEIsS0FBS29hLEVBR2pCLE1BQ0EwUyxFQUFPN1UsRUFBSUEsRUFBSSxFQUFJbk8sRUFBSWtPLEdBQ1osSUFLUCxHQURKNFUsSUFBTzNVLEdBRFA4VSxFQUFXaGhCLEVBQUsrZ0IsTUFDUSxFQUFJOVUsS0FDZDRVLEVBQUssR0FDakJJLEVBQVFodEIsS0FBSzRzQixHQUdYLEdBREpDLElBQU81VSxFQUFJOFUsSUFBYSxFQUFJL1UsS0FDZDZVLEVBQUssR0FDakJHLEVBQVFodEIsS0FBSzZzQixJQUtqQixJQURBLElBQUk1cEIsRUFBR3NVLEVBQWlDMlYsRUFBOUJsQyxFQUFJZ0MsRUFBUW5zQixPQUFRb3FCLEVBQU9ELEVBQzlCQSxLQUdML25CLEdBREFpcUIsRUFBSyxHQURMOVMsRUFBSTRTLEVBQVFoQyxLQUVGa0MsRUFBS0EsRUFBS1gsRUFBTyxFQUFJVyxFQUFLQSxFQUFLOVMsRUFBSWtOLEVBQU8sRUFBSTRGLEVBQUs5UyxFQUFJQSxFQUFJb04sRUFBT3BOLEVBQUlBLEVBQUlBLEVBQUlxUyxFQUN4RlEsRUFBTyxHQUFHakMsR0FBSy9uQixFQUVmc1UsRUFBSzJWLEVBQUtBLEVBQUtBLEVBQUtWLEVBQU8sRUFBSVUsRUFBS0EsRUFBSzlTLEVBQUltTixFQUFPLEVBQUkyRixFQUFLOVMsRUFBSUEsRUFBSXFOLEVBQU9yTixFQUFJQSxFQUFJQSxFQUFJc1MsRUFDeEZPLEVBQU8sR0FBR2pDLEdBQUt6VCxFQUdqQjBWLEVBQU8sR0FBR2hDLEdBQVFzQixFQUNsQlUsRUFBTyxHQUFHaEMsR0FBUXVCLEVBQ2xCUyxFQUFPLEdBQUdoQyxFQUFPLEdBQUt3QixFQUN0QlEsRUFBTyxHQUFHaEMsRUFBTyxHQUFLeUIsRUFDdEIsSUFBSXhGLEVBQVMsQ0FDWCxDQUNFamtCLEVBQUcySixFQUFJcUcsTUFBTSxLQUFNZ2EsRUFBTyxJQUMxQjFWLEVBQUczSyxFQUFJcUcsTUFBTSxLQUFNZ2EsRUFBTyxLQUU1QixDQUNFaHFCLEVBQUc0SixFQUFJb0csTUFBTSxLQUFNZ2EsRUFBTyxJQUMxQjFWLEVBQUcxSyxFQUFJb0csTUFBTSxLQUFNZ2EsRUFBTyxNQU05QixPQUhJN2YsRUFBT3dFLHNCQUNUeEUsRUFBT3VFLG1CQUFtQmdiLEdBQWN6RixHQUVuQ0EsQ0FDVCxFQWduQkE5WixFQUFPd0YsS0FBS3VhLGVBek1aLFNBQXdCek8sRUFBTTBPLEVBQVVDLEdBQ2pDQSxJQUNIQSxFQUFRL0QsRUFBb0I1SyxJQUc5QixJQURBLElBQUkzZCxFQUFJLEVBQ0Fxc0IsRUFBV0MsRUFBTXRzQixHQUFHRixPQUFTLEdBQU1FLEVBQUtzc0IsRUFBTXhzQixPQUFTLEdBQzdEdXNCLEdBQVlDLEVBQU10c0IsR0FBR0YsT0FDckJFLElBR0YsSUFDa0Qyb0IsRUFEOUM0RCxFQUFVRCxFQUFNdHNCLEdBQUl3c0IsRUFBYUgsRUFBV0UsRUFBUXpzQixPQUNwRDhvQixFQUFVMkQsRUFBUTNELFFBQVNLLEVBQVV0TCxFQUFLM2QsR0FFOUMsT0FBUTRvQixHQUNOLElBQUssSUFDSCxNQUFPLENBQUUxbUIsRUFBR3FxQixFQUFRcnFCLEVBQUdzVSxFQUFHK1YsRUFBUS9WLEVBQUdmLE1BQU8sR0FDOUMsSUFBSyxJQUNMLElBQUssSUFNSCxPQUxBa1QsRUFBTyxJQUFJdGMsRUFBT2tLLE1BQU1nVyxFQUFRcnFCLEVBQUdxcUIsRUFBUS9WLEdBQUdpVyxLQUM1QyxJQUFJcGdCLEVBQU9rSyxNQUFNZ1csRUFBUTFELE1BQU8wRCxFQUFRekQsT0FDeEMwRCxJQUVHL1csTUFBUWxQLEtBQUswRSxNQUFNc2hCLEVBQVF6RCxNQUFReUQsRUFBUS9WLEVBQUcrVixFQUFRMUQsTUFBUTBELEVBQVFycUIsR0FDcEV5bUIsRUFDVCxJQUFLLElBTUgsT0FMQUEsRUFBTyxJQUFJdGMsRUFBT2tLLE1BQU1nVyxFQUFRcnFCLEVBQUdxcUIsRUFBUS9WLEdBQUdpVyxLQUM1QyxJQUFJcGdCLEVBQU9rSyxNQUFNMFMsRUFBUSxHQUFJQSxFQUFRLElBQ3JDdUQsSUFFRy9XLE1BQVFsUCxLQUFLMEUsTUFBTWdlLEVBQVEsR0FBS3NELEVBQVEvVixFQUFHeVMsRUFBUSxHQUFLc0QsRUFBUXJxQixHQUM5RHltQixFQUNULElBQUssSUFFTCxJQUFLLElBQ0gsT0EzSk4sU0FBbUM0RCxFQUFTRixHQUsxQyxJQUpBLElBQ0l6VCxFQUFHOFQsRUFBNkRDLEVBRGhFdkUsRUFBTyxFQUFHRSxFQUFTLEVBQUdILEVBQVdvRSxFQUFRcEUsU0FBVUUsRUFBUSxDQUFFbm1CLEVBQUdxcUIsRUFBUXJxQixFQUFHc1UsRUFBRytWLEVBQVEvVixHQUMxRW9XLEVBQVcsSUFBTW5FLEVBQWM4RCxFQUFROUQsWUFHaERILEVBQVMrRCxHQUFZTyxFQUFXLE1BQ3JDaFUsRUFBSXVQLEVBQVNDLEdBQ2J1RSxFQUFXdkUsR0FDWHNFLEVBQVVwRyxFQUFlK0IsRUFBTW5tQixFQUFHbW1CLEVBQU03UixFQUFHb0MsRUFBRTFXLEVBQUcwVyxFQUFFcEMsSUFFbkM4UixFQUFVK0QsR0FFdkJqRSxHQUFRd0UsRUFDUkEsR0FBWSxJQUdadkUsRUFBUXpQLEVBQ1J3UCxHQUFRd0UsRUFDUnRFLEdBQVVvRSxHQUlkLE9BREE5VCxFQUFFbkQsTUFBUWdULEVBQVlrRSxHQUNmL1QsQ0FDVCxDQW9JYWlVLENBQTBCTixFQUFTRixHQUVoRCxFQXNLQWhnQixFQUFPd0YsS0FBS2liLGNBbENaLFNBQXVCblAsRUFBTW5FLEVBQVd1VCxHQU90QyxPQU5JQSxJQUNGdlQsRUFBWW5OLEVBQU93RixLQUFLNE0sMEJBQ3RCakYsRUFDQSxDQUFDLEVBQUcsRUFBRyxFQUFHLEdBQUl1VCxFQUFXN3FCLEdBQUk2cUIsRUFBV3ZXLEtBR3JDbUgsRUFBS2xlLEtBQUksU0FBU3V0QixHQUV2QixJQURBLElBQUlDLEVBQWFELEVBQVloc0IsTUFBTSxHQUFJb1YsRUFBUSxDQUFDLEVBQ3ZDcFcsRUFBSSxFQUFHQSxFQUFJZ3RCLEVBQVlsdEIsT0FBUyxFQUFHRSxHQUFLLEVBQy9Db1csRUFBTWxVLEVBQUk4cUIsRUFBWWh0QixHQUN0Qm9XLEVBQU1JLEVBQUl3VyxFQUFZaHRCLEVBQUksR0FDMUJvVyxFQUFRL0osRUFBT3dGLEtBQUt1SCxlQUFlaEQsRUFBT29ELEdBQzFDeVQsRUFBV2p0QixHQUFLb1csRUFBTWxVLEVBQ3RCK3FCLEVBQVdqdEIsRUFBSSxHQUFLb1csRUFBTUksRUFFNUIsT0FBT3lXLENBQ1QsR0FDRixDQWlCRCxDQTV6QkQsR0ErekJBLFdBRUUsSUFBSWpzQixFQUFRb0IsTUFBTUUsVUFBVXRCLE1BeUQ1QixTQUFTa3NCLEVBQUtwYixFQUFPcWIsRUFBWUMsR0FDL0IsR0FBS3RiLEdBQTBCLElBQWpCQSxFQUFNaFMsT0FBcEIsQ0FJQSxJQUFJRSxFQUFJOFIsRUFBTWhTLE9BQVMsRUFDbkJxbUIsRUFBU2dILEVBQWFyYixFQUFNOVIsR0FBR210QixHQUFjcmIsRUFBTTlSLEdBQ3ZELEdBQUltdEIsRUFDRixLQUFPbnRCLEtBQ0RvdEIsRUFBVXRiLEVBQU05UixHQUFHbXRCLEdBQWFoSCxLQUNsQ0EsRUFBU3JVLEVBQU05UixHQUFHbXRCLFNBS3RCLEtBQU9udEIsS0FDRG90QixFQUFVdGIsRUFBTTlSLEdBQUltbUIsS0FDdEJBLEVBQVNyVSxFQUFNOVIsSUFJckIsT0FBT21tQixDQWxCUCxDQW1CRixDQUtBOVosRUFBT3dGLEtBQUtDLE1BQVEsQ0FDbEJDLEtBdkNGLFNBQWNELEVBQU83SyxHQUVuQixJQURBLElBQUl6RyxFQUFJc1IsRUFBTWhTLE9BQ1BVLEtBQ0xzUixFQUFNdFIsR0FBS3lHLEVBRWIsT0FBTzZLLENBQ1QsRUFrQ0V1YixPQTdFRixTQUFnQnZiLEVBQU93YixHQUVyQixJQURBLElBQUl0RCxFQUFPaHBCLEVBQU11QixLQUFLd0MsVUFBVyxHQUFJb2hCLEVBQVMsR0FDckNubUIsRUFBSSxFQUFHd0MsRUFBTXNQLEVBQU1oUyxPQUFRRSxFQUFJd0MsRUFBS3hDLElBQzNDbW1CLEVBQU9ubUIsR0FBS2dxQixFQUFLbHFCLE9BQVNnUyxFQUFNOVIsR0FBR3N0QixHQUFRcGIsTUFBTUosRUFBTTlSLEdBQUlncUIsR0FBUWxZLEVBQU05UixHQUFHc3RCLEdBQVEvcUIsS0FBS3VQLEVBQU05UixJQUVqRyxPQUFPbW1CLENBQ1QsRUF3RUV0YSxJQWxERixTQUFhaUcsRUFBT3FiLEdBQ2xCLE9BQU9ELEVBQUtwYixFQUFPcWIsR0FBWSxTQUFTSSxFQUFRQyxHQUM5QyxPQUFPRCxFQUFTQyxDQUNsQixHQUNGLEVBK0NFMWhCLElBaEVGLFNBQWFnRyxFQUFPcWIsR0FDbEIsT0FBT0QsRUFBS3BiLEVBQU9xYixHQUFZLFNBQVNJLEVBQVFDLEdBQzlDLE9BQU9ELEdBQVVDLENBQ25CLEdBQ0YsRUErREQsQ0E3RkQsR0FnR0EsV0FjRSxTQUFTQyxFQUFPelAsRUFBYWpjLEVBQVFrUyxHQUluQyxHQUFJQSxFQUNGLElBQUs1SCxFQUFPZ0QsY0FBZ0J0TixhQUFrQjJyQixRQUU1QzFQLEVBQWNqYyxPQUVYLEdBQUlBLGFBQWtCSyxNQUFPLENBQ2hDNGIsRUFBYyxHQUNkLElBQUssSUFBSWhlLEVBQUksRUFBR3dDLEVBQU1ULEVBQU9qQyxPQUFRRSxFQUFJd0MsRUFBS3hDLElBQzVDZ2UsRUFBWWhlLEdBQUt5dEIsRUFBTyxDQUFFLEVBQUcxckIsRUFBTy9CLEdBQUlpVSxFQUU1QyxNQUNLLEdBQUlsUyxHQUE0QixpQkFBWEEsRUFDeEIsSUFBSyxJQUFJOFMsS0FBWTlTLEVBQ0YsV0FBYjhTLEdBQXNDLFVBQWJBLEVBRzNCbUosRUFBWW5KLEdBQVksS0FFakI5UyxFQUFPNHJCLGVBQWU5WSxLQUM3Qm1KLEVBQVluSixHQUFZNFksRUFBTyxDQUFFLEVBQUcxckIsRUFBTzhTLEdBQVdaLFNBTTFEK0osRUFBY2pjLE9BSWhCLElBQUssSUFBSThTLEtBQVk5UyxFQUNuQmljLEVBQVluSixHQUFZOVMsRUFBTzhTLEdBR25DLE9BQU9tSixDQUNULENBaUJBM1IsRUFBT3dGLEtBQUt6TSxPQUFTLENBQ25CcW9CLE9BQVFBLEVBQ1J2aEIsTUFQRixTQUFlOUcsRUFBUTZPLEdBQ3JCLE9BQU93WixFQUFPLENBQUUsRUFBR3JvQixFQUFRNk8sRUFDN0IsR0FPQTVILEVBQU93RixLQUFLek0sT0FBT3FvQixPQUFPcGhCLEVBQU93RixLQUFNeEYsRUFBT2lHLFdBQy9DLENBMUVELEdBNkVBLFdBNERFLFNBQVNzYixFQUFhQyxFQUFLN3RCLEdBQ3pCLElBQUk4dEIsRUFBT0QsRUFBSUUsV0FBVy90QixHQUUxQixHQUFJbXFCLE1BQU0yRCxHQUNSLE1BQU8sR0FFVCxHQUFJQSxFQUFPLE9BQVVBLEVBQU8sTUFDMUIsT0FBT0QsRUFBSTdTLE9BQU9oYixHQUtwQixHQUFJLE9BQVU4dEIsR0FBUUEsR0FBUSxNQUFRLENBQ3BDLEdBQUlELEVBQUkvdEIsUUFBV0UsRUFBSSxFQUNyQixLQUFNLGlEQUVSLElBQUlndUIsRUFBT0gsRUFBSUUsV0FBVy90QixFQUFJLEdBQzlCLEdBQUksTUFBU2d1QixHQUFRQSxFQUFPLE1BQzFCLEtBQU0saURBRVIsT0FBT0gsRUFBSTdTLE9BQU9oYixHQUFLNnRCLEVBQUk3UyxPQUFPaGIsRUFBSSxFQUN4QyxDQUVBLEdBQVUsSUFBTkEsRUFDRixLQUFNLGlEQUVSLElBQUlpdUIsRUFBT0osRUFBSUUsV0FBVy90QixFQUFJLEdBSTlCLEdBQUksTUFBU2l1QixHQUFRQSxFQUFPLE1BQzFCLEtBQU0saURBSVIsT0FBTyxDQUNULENBT0E1aEIsRUFBT3dGLEtBQUtpSixPQUFTLENBQ25CQyxTQWhHRixTQUFrQkQsR0FDaEIsT0FBT0EsRUFBTzNaLFFBQVEsV0FBVyxTQUFTbW9CLEVBQU80RSxHQUMvQyxPQUFPQSxFQUFZQSxFQUFValQsY0FBZ0IsRUFDL0MsR0FDRixFQTZGRWtULFdBbEZGLFNBQW9CclQsRUFBUXNULEdBQzFCLE9BQU90VCxFQUFPRSxPQUFPLEdBQUdDLGVBQ3JCbVQsRUFBa0J0VCxFQUFPOVosTUFBTSxHQUFLOFosRUFBTzlaLE1BQU0sR0FBRzhmLGNBQ3pELEVBZ0ZFdU4sVUF4RUYsU0FBbUJ2VCxHQUNqQixPQUFPQSxFQUFPM1osUUFBUSxLQUFNLFNBQ3pCQSxRQUFRLEtBQU0sVUFDZEEsUUFBUSxLQUFNLFVBQ2RBLFFBQVEsS0FBTSxRQUNkQSxRQUFRLEtBQU0sT0FDbkIsRUFtRUVtdEIsY0EzREYsU0FBdUJDLEdBQ3JCLElBQVdDLEVBQVB4dUIsRUFBSSxFQUFReXVCLEVBQVksR0FDNUIsSUFBS3p1QixFQUFJLEVBQVFBLEVBQUl1dUIsRUFBV3p1QixPQUFRRSxLQUNNLEtBQXZDd3VCLEVBQU1aLEVBQWFXLEVBQVl2dUIsS0FHcEN5dUIsRUFBVXh2QixLQUFLdXZCLEdBRWpCLE9BQU9DLENBQ1QsRUFvREQsQ0E3R0QsR0FnSEEsV0FFRSxJQUFJenRCLEVBQVFvQixNQUFNRSxVQUFVdEIsTUFBTzB0QixFQUFnQixXQUFhLEVBRTVEQyxFQUFvQixXQUNsQixJQUFLLElBQUkvVixJQUFLLENBQUVyWixTQUFVLEdBQ3hCLEdBQVUsYUFBTnFaLEVBQ0YsT0FBTyxFQUdYLE9BQU8sQ0FDUixDQVBtQixHQVVwQmdXLEVBQWEsU0FBU0MsRUFBTzlzQixFQUFReUMsR0FDbkMsSUFBSyxJQUFJcVEsS0FBWTlTLEVBRWY4UyxLQUFZZ2EsRUFBTXZzQixXQUNtQixtQkFBOUJ1c0IsRUFBTXZzQixVQUFVdVMsS0FDdEI5UyxFQUFPOFMsR0FBWSxJQUFJakQsUUFBUSxjQUFnQixFQUVsRGlkLEVBQU12c0IsVUFBVXVTLEdBQVksU0FBVUEsR0FDcEMsT0FBTyxXQUVMLElBQUlpYSxFQUFhdHZCLEtBQUtrRixZQUFZb3FCLFdBQ2xDdHZCLEtBQUtrRixZQUFZb3FCLFdBQWF0cUIsRUFDOUIsSUFBSXVxQixFQUFjaHRCLEVBQU84UyxHQUFVM0MsTUFBTTFTLEtBQU11RixXQUcvQyxHQUZBdkYsS0FBS2tGLFlBQVlvcUIsV0FBYUEsRUFFYixlQUFiamEsRUFDRixPQUFPa2EsQ0FFWCxDQUNELENBWjJCLENBWXpCbGEsR0FHSGdhLEVBQU12c0IsVUFBVXVTLEdBQVk5UyxFQUFPOFMsR0FHakM4WixJQUNFNXNCLEVBQU94QyxXQUFhOEMsT0FBT0MsVUFBVS9DLFdBQ3ZDc3ZCLEVBQU12c0IsVUFBVS9DLFNBQVd3QyxFQUFPeEMsVUFFaEN3QyxFQUFPaXRCLFVBQVkzc0IsT0FBT0MsVUFBVTBzQixVQUN0Q0gsRUFBTXZzQixVQUFVMHNCLFFBQVVqdEIsRUFBT2l0QixTQUl6QyxFQUVKLFNBQVNDLElBQWEsQ0FFdEIsU0FBU0MsRUFBVUMsR0FLakIsSUFKQSxJQUFJQyxFQUFlLEtBQ2ZDLEVBQVE3dkIsS0FHTDZ2QixFQUFNM3FCLFlBQVlvcUIsWUFBWSxDQUNuQyxJQUFJUSxFQUFtQkQsRUFBTTNxQixZQUFZb3FCLFdBQVd4c0IsVUFBVTZzQixHQUM5RCxHQUFJRSxFQUFNRixLQUFnQkcsRUFBa0IsQ0FDMUNGLEVBQWVFLEVBQ2YsS0FDRixDQUVBRCxFQUFRQSxFQUFNM3FCLFlBQVlvcUIsV0FBV3hzQixTQUN2QyxDQUVBLE9BQUs4c0IsRUFJR3JxQixVQUFVakYsT0FBUyxFQUN2QnN2QixFQUFhbGQsTUFBTTFTLEtBQU13QixFQUFNdUIsS0FBS3dDLFVBQVcsSUFDL0NxcUIsRUFBYTdzQixLQUFLL0MsTUFMYnlSLFFBQVFDLElBQUksc0JBQXdCaWUsRUFBYSx3Q0FBeUMzdkIsS0FNckcsQ0F1Q0E2TSxFQUFPd0YsS0FBSzBkLFlBOUJaLFdBQ0UsSUFBSS9xQixFQUFTLEtBQ1R5WixFQUFhamQsRUFBTXVCLEtBQUt3QyxVQUFXLEdBS3ZDLFNBQVM4cEIsSUFDUHJ2QixLQUFLZ3dCLFdBQVd0ZCxNQUFNMVMsS0FBTXVGLFVBQzlCLENBTDZCLG1CQUFsQmtaLEVBQVcsS0FDcEJ6WixFQUFTeVosRUFBV3dSLFNBTXRCWixFQUFNQyxXQUFhdHFCLEVBQ25CcXFCLEVBQU1hLFdBQWEsR0FFZmxyQixJQUNGeXFCLEVBQVMzc0IsVUFBWWtDLEVBQU9sQyxVQUM1QnVzQixFQUFNdnNCLFVBQVksSUFBSTJzQixFQUN0QnpxQixFQUFPa3JCLFdBQVd6d0IsS0FBSzR2QixJQUV6QixJQUFLLElBQUk3dUIsRUFBSSxFQUFHRixFQUFTbWUsRUFBV25lLE9BQVFFLEVBQUlGLEVBQVFFLElBQ3RENHVCLEVBQVdDLEVBQU81USxFQUFXamUsR0FBSXdFLEdBT25DLE9BTEtxcUIsRUFBTXZzQixVQUFVa3RCLGFBQ25CWCxFQUFNdnNCLFVBQVVrdEIsV0FBYWQsR0FFL0JHLEVBQU12c0IsVUFBVW9DLFlBQWNtcUIsRUFDOUJBLEVBQU12c0IsVUFBVTRzQixVQUFZQSxFQUNyQkwsQ0FDVCxDQUdELENBbEhELEdBdUhNeGpCLElBQXdCZ0IsRUFBTzdHLFNBQVN5VyxjQUFjLE9BQU8wVCxZQUM3RHJrQixFQUFjLENBQUMsYUFBYyxZQUFhLFlBUzlDZSxFQUFPd0YsS0FBSytkLFlBQWMsU0FBU0MsRUFBU3JlLEVBQVdDLEVBQVM5USxHQUM5RGt2QixHQUFXQSxFQUFRQyxpQkFBaUJ0ZSxFQUFXQyxHQUFTcEcsR0FBOEIxSyxFQUN4RixFQVVBMEwsRUFBT3dGLEtBQUtrZSxlQUFpQixTQUFTRixFQUFTcmUsRUFBV0MsRUFBUzlRLEdBQ2pFa3ZCLEdBQVdBLEVBQVFHLG9CQUFvQnhlLEVBQVdDLEdBQVNwRyxHQUE4QjFLLEVBQzNGLEVBVUEwTCxFQUFPd0YsS0FBS29lLFdBQWEsU0FBU0MsR0FDaEMsSUFBSUwsRUFBVUssRUFBTXZRLE9BQ2hCd1EsRUFBUzlqQixFQUFPd0YsS0FBS3VlLGlCQUFpQlAsR0FDdENRLEVBWE4sU0FBc0JILEdBQ3BCLElBQUlJLEVBQVlKLEVBQU1LLGVBQ3RCLE9BQUlELEdBQWFBLEVBQVUsR0FDbEJBLEVBQVUsR0FFWkosQ0FDVCxDQUthTSxDQUFhTixHQUN4QixNQUFPLENBQ0xodUIsRUFBR211QixFQUFLSSxRQUFVTixFQUFPdFcsS0FDekJyRCxFQUFHNlosRUFBS0ssUUFBVVAsRUFBT3JXLElBRTdCLEVBRUF6TixFQUFPd0YsS0FBSzhlLGFBQWUsU0FBU1QsR0FDbEMsT0FBTzVrQixFQUFZc0csUUFBUXNlLEVBQU10b0IsT0FBUyxHQUEyQixVQUF0QnNvQixFQUFNVSxXQUN2RCxFQXVDSXBsQixFQUFtRCxpQkFEbkRELEVBQVVjLEVBQU83RyxTQUFTeVcsY0FBYyxRQUNQQyxNQUFNMlUsUUFDdkNwbEIsRUFBa0QsaUJBQXpCRixFQUFRMlEsTUFBTXpKLE9BQ3ZDL0csRUFBWSx3Q0FHWkMsRUFBYSxTQUFVa2tCLEdBQVcsT0FBT0EsQ0FBUyxFQUVsRHJrQixFQUVGRyxFQUFhLFNBQVNra0IsRUFBUzVvQixHQUU3QixPQURBNG9CLEVBQVEzVCxNQUFNMlUsUUFBVTVwQixFQUNqQjRvQixDQUNULEVBRU9wa0IsSUFFUEUsRUFBYSxTQUFTa2tCLEVBQVM1b0IsR0FDN0IsSUFBSTZwQixFQUFLakIsRUFBUTNULE1BV2pCLE9BVkkyVCxFQUFRa0IsZUFBaUJsQixFQUFRa0IsYUFBYUMsWUFDaERGLEVBQUdHLEtBQU8sR0FFUnZsQixFQUFVM0ssS0FBSyt2QixFQUFHcmUsU0FDcEJ4TCxFQUFRQSxHQUFTLE1BQVMsR0FBTSxpQkFBNEIsSUFBUkEsRUFBZSxJQUNuRTZwQixFQUFHcmUsT0FBU3FlLEVBQUdyZSxPQUFPdFIsUUFBUXVLLEVBQVd6RSxJQUd6QzZwQixFQUFHcmUsUUFBVSxrQkFBNkIsSUFBUnhMLEVBQWUsSUFFNUM0b0IsQ0FDVCxHQUdGeGpCLEVBQU93RixLQUFLcWYsU0ExRFosU0FBa0JyQixFQUFTc0IsR0FDekIsSUFBSUMsRUFBZXZCLEVBQVEzVCxNQUMzQixJQUFLa1YsRUFDSCxPQUFPdkIsRUFFVCxHQUFzQixpQkFBWHNCLEVBRVQsT0FEQXRCLEVBQVEzVCxNQUFNbVYsU0FBVyxJQUFNRixFQUN4QkEsRUFBT3ZmLFFBQVEsWUFBYyxFQUNoQ2pHLEVBQVdra0IsRUFBU3NCLEVBQU83SCxNQUFNLDBCQUEwQixJQUMzRHVHLEVBRU4sSUFBSyxJQUFJaGIsS0FBWXNjLEVBQ0YsWUFBYnRjLEVBQ0ZsSixFQUFXa2tCLEVBQVNzQixFQUFPdGMsSUFNM0J1YyxFQUh1QyxVQUFidmMsR0FBcUMsYUFBYkEsT0FDVixJQUE1QnVjLEVBQWFFLFdBQTZCLFdBQWEsYUFDL0R6YyxHQUMrQnNjLEVBQU90YyxHQUc5QyxPQUFPZ2IsQ0FDVCxFQXdDRixXQUVFLElBWUkwQixFQXlLQUMsRUFrQkV0VixFQUNBdVYsRUF4TUZDLEVBQVN0dkIsTUFBTUUsVUFBVXRCLE1BbUJ6QjJ3QixFQUFVLFNBQVNDLEdBQ2pCLE9BQU9GLEVBQU9udkIsS0FBS3F2QixFQUFXLEVBQ2hDLEVBRUosSUFDRUwsRUFBMkJJLEVBQVF0bEIsRUFBTzdHLFNBQVNxc0Isc0JBQXVCenZCLEtBRTlELENBQWQsTUFBTzB2QixHQUFPLENBbUJkLFNBQVNDLEVBQVlDLEVBQVM1VyxHQUM1QixJQUFJNlcsRUFBSzVsQixFQUFPN0csU0FBU3lXLGNBQWMrVixHQUN2QyxJQUFLLElBQUl0ZixLQUFRMEksRUFDRixVQUFUMUksRUFDRnVmLEVBQUdDLFVBQVk5VyxFQUFXMUksR0FFVixRQUFUQSxFQUNQdWYsRUFBR0UsUUFBVS9XLEVBQVcxSSxHQUd4QnVmLEVBQUdHLGFBQWExZixFQUFNMEksRUFBVzFJLElBR3JDLE9BQU91ZixDQUNULENBdUNBLFNBQVM3QixFQUFpQlAsR0FheEIsSUFYQSxJQUFJaFcsRUFBTyxFQUNQQyxFQUFNLEVBQ051WSxFQUFhaG1CLEVBQU83RyxTQUFTOHNCLGdCQUM3QkMsRUFBT2xtQixFQUFPN0csU0FBUytzQixNQUFRLENBQzdCQyxXQUFZLEVBQUdDLFVBQVcsR0FPekI1QyxJQUFZQSxFQUFRdlQsWUFBY3VULEVBQVE2QyxTQUcvQzdDLEVBQVVBLEVBQVF2VCxZQUFjdVQsRUFBUTZDLFFBRXhCcm1CLEVBQU83RyxVQUNyQnFVLEVBQU8wWSxFQUFLQyxZQUFjSCxFQUFXRyxZQUFjLEVBQ25EMVksRUFBTXlZLEVBQUtFLFdBQWNKLEVBQVdJLFdBQWEsSUFHakQ1WSxHQUFRZ1csRUFBUTJDLFlBQWMsRUFDOUIxWSxHQUFPK1YsRUFBUTRDLFdBQWEsR0FHTCxJQUFyQjVDLEVBQVE4QyxVQUE2QyxVQUEzQjlDLEVBQVEzVCxNQUFNQyxZQUs5QyxNQUFPLENBQUV0QyxLQUFNQSxFQUFNQyxJQUFLQSxFQUM1QixDQXZHS3lYLElBQ0hJLEVBQVUsU0FBU0MsR0FFakIsSUFEQSxJQUFJZ0IsRUFBTSxJQUFJeHdCLE1BQU13dkIsRUFBVTl4QixRQUFTRSxFQUFJNHhCLEVBQVU5eEIsT0FDOUNFLEtBQ0w0eUIsRUFBSTV5QixHQUFLNHhCLEVBQVU1eEIsR0FFckIsT0FBTzR5QixDQUNULEdBb0pBcEIsRUFERW5sQixFQUFPN0csU0FBU3F0QixhQUFleG1CLEVBQU83RyxTQUFTcXRCLFlBQVlDLGlCQUMzQyxTQUFTakQsRUFBU2tELEdBQ2xDLElBQUk3VyxFQUFRN1AsRUFBTzdHLFNBQVNxdEIsWUFBWUMsaUJBQWlCakQsRUFBUyxNQUNsRSxPQUFPM1QsRUFBUUEsRUFBTTZXLFFBQVF6eUIsQ0FDL0IsRUFHa0IsU0FBU3V2QixFQUFTa0QsR0FDbEMsSUFBSTlyQixFQUFRNG9CLEVBQVEzVCxNQUFNNlcsR0FJMUIsT0FISzlyQixHQUFTNG9CLEVBQVFrQixlQUNwQjlwQixFQUFRNG9CLEVBQVFrQixhQUFhZ0MsSUFFeEI5ckIsQ0FDVCxFQUlJaVYsRUFBUTdQLEVBQU83RyxTQUFTOHNCLGdCQUFnQnBXLE1BQ3hDdVYsRUFBYSxlQUFnQnZWLEVBQ3pCLGFBQ0Esa0JBQW1CQSxFQUNqQixnQkFDQSxxQkFBc0JBLEVBQ3BCLG1CQUNBLG9CQUFxQkEsRUFDbkIsa0JBQ0EsR0F3Q2Q3UCxFQUFPd0YsS0FBS21oQix3QkFoQ1osU0FBaUNuRCxHQVUvQixZQVRxQyxJQUExQkEsRUFBUW9ELGdCQUNqQnBELEVBQVFvRCxjQUFnQjVtQixFQUFPd0YsS0FBSzhJLGVBRWxDOFcsRUFDRjVCLEVBQVEzVCxNQUFNdVYsR0FBYyxPQUVXLGlCQUF6QjVCLEVBQVFxRCxlQUN0QnJELEVBQVFxRCxhQUFlLE1BRWxCckQsQ0FDVCxFQXNCQXhqQixFQUFPd0YsS0FBS3NoQixzQkFkWixTQUErQnRELEdBVTdCLFlBVHFDLElBQTFCQSxFQUFRb0QsZ0JBQ2pCcEQsRUFBUW9ELGNBQWdCLE1BRXRCeEIsRUFDRjVCLEVBQVEzVCxNQUFNdVYsR0FBYyxHQUVXLGlCQUF6QjVCLEVBQVFxRCxlQUN0QnJELEVBQVFxRCxhQUFlLElBRWxCckQsQ0FDVCxFQXdDRnhqQixFQUFPd0YsS0FBS3VoQixrQkFkWixTQUEyQjFsQixFQUFLekcsR0FDOUJ5RyxFQUFJMmxCLHNCQUF3QjNsQixFQUFJMmxCLHVCQUF5QjNsQixFQUFJNGxCLDZCQUN4RDVsQixFQUFJNmxCLDBCQUE0QjdsQixFQUFJOGxCLHlCQUEyQjlsQixFQUFJK2xCLHVCQUN4RS9sQixFQUFJMmxCLHNCQUF3QnBzQixDQUM5QixFQVdBb0YsRUFBT3dGLEtBQUs2aEIsUUF2UlosU0FBaUJ2MEIsR0FDZixNQUFxQixpQkFBUEEsRUFBa0JrTixFQUFPN0csU0FBU211QixlQUFleDBCLEdBQU1BLENBQ3ZFLEVBc1JBa04sRUFBT3dGLEtBQUs4ZixRQUFVQSxFQUN0QnRsQixFQUFPd0YsS0FBSytoQixTQTlOWixTQUFrQi9ELEVBQVNxQyxHQUNyQnJDLElBQStFLEtBQW5FLElBQU1BLEVBQVFxQyxVQUFZLEtBQUt0Z0IsUUFBUSxJQUFNc2dCLEVBQVksT0FDdkVyQyxFQUFRcUMsWUFBY3JDLEVBQVFxQyxVQUFZLElBQU0sSUFBTUEsRUFFMUQsRUEyTkE3bEIsRUFBT3dGLEtBQUtrZ0IsWUFBY0EsRUFDMUIxbEIsRUFBT3dGLEtBQUtnaUIsWUFsTlosU0FBcUJoRSxFQUFTaUUsRUFBUzFZLEdBUXJDLE1BUHVCLGlCQUFaMFksSUFDVEEsRUFBVS9CLEVBQVkrQixFQUFTMVksSUFFN0J5VSxFQUFRdlQsWUFDVnVULEVBQVF2VCxXQUFXeVgsYUFBYUQsRUFBU2pFLEdBRTNDaUUsRUFBUTFYLFlBQVl5VCxHQUNiaUUsQ0FDVCxFQTBNQXpuQixFQUFPd0YsS0FBS3VlLGlCQUFtQkEsRUFDL0IvakIsRUFBT3dGLEtBQUttaUIsaUJBekpaLFNBQTBCbkUsR0FDeEIsSUFBSW9FLEVBSUFDLEVBSEFDLEVBQU10RSxHQUFXQSxFQUFRdUUsY0FDekJDLEVBQU0sQ0FBRXhhLEtBQU0sRUFBR0MsSUFBSyxHQUN0QndhLEVBQVMsQ0FBRXphLEtBQU0sRUFBR0MsSUFBSyxHQUV6QnlhLEVBQW1CLENBQ2pCQyxnQkFBaUIsT0FDakJDLGVBQWlCLE1BQ2pCQyxZQUFpQixPQUNqQkMsV0FBaUIsT0FHdkIsSUFBS1IsRUFDSCxPQUFPRyxFQUdULElBQUssSUFBSXZCLEtBQVF3QixFQUNmRCxFQUFPQyxFQUFpQnhCLEtBQVU2QixTQUFTcEQsRUFBZ0IzQixFQUFTa0QsR0FBTyxLQUFPLEVBVXBGLE9BUEFrQixFQUFVRSxFQUFJN0IscUJBQ2dDLElBQWxDekMsRUFBUWdGLHdCQUNsQlIsRUFBTXhFLEVBQVFnRix5QkFHaEJYLEVBQWdCOUQsRUFBaUJQLEdBRTFCLENBQ0xoVyxLQUFNd2EsRUFBSXhhLEtBQU9xYSxFQUFjcmEsTUFBUW9hLEVBQVFhLFlBQWMsR0FBS1IsRUFBT3phLEtBQ3pFQyxJQUFLdWEsRUFBSXZhLElBQU1vYSxFQUFjcGEsS0FBT21hLEVBQVFjLFdBQWEsR0FBTVQsRUFBT3hhLElBRTFFLEVBMEhBek4sRUFBT3dGLEtBQUttakIsY0ExQ1osU0FBdUJuRixHQUNyQixJQUFJb0YsRUFBTzVvQixFQUFPWSxvQkFBb0I0aUIsR0FDdEMsT0FBT29GLEVBQUtDLFNBQVdELEVBQUtFLE1BQzlCLEVBd0NBOW9CLEVBQU93RixLQUFLdWpCLGlCQXRDWixTQUEwQnZGLEdBQ3hCLEdBQUt4akIsRUFBT2dELGFBQVosQ0FHQSxJQUFJNGxCLEVBQU81b0IsRUFBT1ksb0JBQW9CNGlCLEdBQ2xDb0YsSUFDRkEsRUFBS0UsT0FBUyxLQUNkRixFQUFLQyxRQUFVLEtBRWZELEVBQUtJLFlBQWMsS0FDbkJKLEVBQUtLLFlBQWMsS0FDbkJMLEVBQUtNLFdBQWEsS0FScEIsQ0FVRixDQTJCRCxDQTNTRCxHQThTQSxXQU1FLFNBQVNDLElBQVksQ0E4Q3JCbnBCLEVBQU93RixLQUFLNGpCLFFBakNaLFNBQWlCLzBCLEVBQUtDLEdBQ3BCQSxJQUFZQSxFQUFVLENBQUUsR0FFeEIsSUFBSTJzQixFQUFTM3NCLEVBQVEyc0IsT0FBUzNzQixFQUFRMnNCLE9BQU9yUyxjQUFnQixNQUN6RHlhLEVBQWEvMEIsRUFBUSswQixZQUFjLFdBQWEsRUFDaERDLEVBQU0sSUFBSXRwQixFQUFPbkosT0FBTzB5QixlQUN4QnJELEVBQU81eEIsRUFBUTR4QixNQUFRNXhCLEVBQVFrMUIsV0F3Qm5DLE9BckJBRixFQUFJRyxtQkFBcUIsV0FDQSxJQUFuQkgsRUFBSUksYUFDTkwsRUFBV0MsR0FDWEEsRUFBSUcsbUJBQXFCTixFQUU3QixFQUVlLFFBQVhsSSxJQUNGaUYsRUFBTyxLQUMyQixpQkFBdkI1eEIsRUFBUWsxQixhQUNqQm4xQixFQXBDTixTQUF1QkEsRUFBS3MxQixHQUMxQixPQUFPdDFCLEdBQU8sS0FBS0ssS0FBS0wsR0FBTyxJQUFNLEtBQU9zMUIsQ0FDOUMsQ0FrQ1lDLENBQWN2MUIsRUFBS0MsRUFBUWsxQixjQUlyQ0YsRUFBSU8sS0FBSzVJLEVBQVE1c0IsR0FBSyxHQUVQLFNBQVg0c0IsR0FBZ0MsUUFBWEEsR0FDdkJxSSxFQUFJUSxpQkFBaUIsZUFBZ0IscUNBR3ZDUixFQUFJUyxLQUFLN0QsR0FDRm9ELENBQ1QsQ0FHRCxDQXJERCxHQTREQXRwQixFQUFPNkUsSUFBTUQsUUFBUUMsSUFNckI3RSxFQUFPZ3FCLEtBQU9wbEIsUUFBUW9sQixLQUd0QixXQUVFLElBQUk1SSxFQUFTcGhCLEVBQU93RixLQUFLek0sT0FBT3FvQixPQUM1QnZoQixFQUFRRyxFQUFPd0YsS0FBS3pNLE9BQU84RyxNQTJDM0JvcUIsRUFBcUIsR0FpRnpCLFNBQVMzeEIsSUFDUCxPQUFPLENBQ1QsQ0FFQSxTQUFTNHhCLEVBQWNsZCxFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDOUIsT0FBUXp0QixFQUFJeEMsS0FBS2lQLElBQUk2RCxFQUFJbWQsR0FBS2p3QixLQUFLZ1AsR0FBSyxJQUFNeE0sRUFBSW1PLENBQ3BELENBdEZBN0ssRUFBT3dGLEtBQUt6TSxPQUFPcW9CLE9BQU82SSxFQUFvQixDQU01Q0csVUFBVyxXQUNULElBQUlDLEVBQWFsM0IsS0FBSzhULE9BQU8sR0FJN0IsT0FIQW9qQixFQUFXL2QsU0FBUSxTQUFVZ2UsR0FDM0JBLEVBQVVDLFFBQ1osSUFDT0YsQ0FDVCxFQU9BRyxlQUFnQixTQUFVcnBCLEdBQ3hCLElBQUtBLEVBQ0gsTUFBTyxHQUVULElBQUlzcEIsRUFBWXQzQixLQUFLaVQsUUFBTyxTQUFVa2tCLEdBQ3BDLE1BQW1DLGlCQUFyQkEsRUFBVWhYLFFBQXVCZ1gsRUFBVWhYLE9BQU9uUyxTQUFXQSxDQUM3RSxJQUlBLE9BSEFzcEIsRUFBVW5lLFNBQVEsU0FBVWdlLEdBQzFCQSxFQUFVQyxRQUNaLElBQ09FLENBQ1QsRUFPQUMsZUFBZ0IsU0FBVXBYLEdBQ3hCLElBQUltWCxFQUFZdDNCLEtBQUt3M0IsdUJBQXVCclgsR0FJNUMsT0FIQW1YLEVBQVVuZSxTQUFRLFNBQVVnZSxHQUMxQkEsRUFBVUMsUUFDWixJQUNPRSxDQUNULEVBT0FHLG1CQUFvQixTQUFVQyxHQUM1QixPQUFPMTNCLEtBQUtvUyxRQUFRcFMsS0FBSzIzQixjQUFjRCxHQUN6QyxFQU9BQyxjQUFlLFNBQVVELEdBQ3ZCLE9BQU8xM0IsS0FBSzB0QixNQUFLLFNBQVV5SixHQUN6QixPQUFPQSxFQUFVQyxTQUFXTSxDQUM5QixHQUNGLEVBT0FGLHVCQUF3QixTQUFVclgsR0FDaEMsT0FBS0EsRUFHRW5nQixLQUFLaVQsUUFBTyxTQUFVa2tCLEdBQzNCLE9BQU9BLEVBQVVoWCxTQUFXQSxDQUM5QixJQUpTLEVBS1gsSUFtR0YsSUFBSXlYLEVBQW9CL3FCLEVBQU9uSixPQUFPbTBCLHVCQUNkaHJCLEVBQU9uSixPQUFPbzBCLDZCQUNkanJCLEVBQU9uSixPQUFPcTBCLDBCQUNkbHJCLEVBQU9uSixPQUFPczBCLHdCQUNkbnJCLEVBQU9uSixPQUFPdTBCLHlCQUNkLFNBQVM3MEIsR0FDUCxPQUFPeUosRUFBT25KLE9BQU9jLFdBQVdwQixFQUFVLElBQU8sR0FDbkQsRUFFcEI4MEIsRUFBbUJyckIsRUFBT25KLE9BQU95MEIsc0JBQXdCdHJCLEVBQU9uSixPQUFPMDBCLGFBUzNFLFNBQVNDLElBQ1AsT0FBT1QsRUFBa0JsbEIsTUFBTTdGLEVBQU9uSixPQUFRNkIsVUFDaEQsQ0FNQXNILEVBQU93RixLQUFLaW1CLFFBeEdaLFNBQWlCbjNCLEdBQ2ZBLElBQVlBLEVBQVUsQ0FBQyxHQUN2QixJQUNJZ1QsRUFEQWlqQixHQUFTLEVBRVRtQixFQUFxQixXQUNuQixJQUFJNWtCLEVBQVE5RyxFQUFPMnJCLGtCQUFrQnBtQixRQUFRK0IsR0FDN0MsT0FBT1IsR0FBUyxHQUFLOUcsRUFBTzJyQixrQkFBa0Ixa0IsT0FBT0gsRUFBTyxHQUFHLEVBQ2pFLEVBb0VKLE9BbEVBUSxFQUFVOFosRUFBT3ZoQixFQUFNdkwsR0FBVSxDQUMvQmkyQixPQUFRLFdBRU4sT0FEQUEsR0FBUyxFQUNGbUIsR0FDVCxFQUNBRSxhQUFjLGVBQWdCdDNCLEVBQVVBLEVBQVF1M0IsV0FBYSxFQUM3REMsZUFBZ0IsRUFDaEJDLGFBQWMsSUFFaEIvckIsRUFBTzJyQixrQkFBa0IvNEIsS0FBSzBVLEdBRTlCa2tCLEdBQWlCLFNBQVNRLEdBQ3hCLElBRStCQyxFQUYzQkMsRUFBUUYsSUFBYyxJQUFJRyxLQUMxQkMsRUFBVzkzQixFQUFRODNCLFVBQVksSUFDL0JDLEVBQVNILEVBQVFFLEVBQ2pCRSxFQUFXaDRCLEVBQVFnNEIsVUFBWWgwQixFQUMvQmkwQixFQUFRajRCLEVBQVFpNEIsT0FBU2owQixFQUN6Qit3QixFQUFhLzBCLEVBQVErMEIsWUFBYy93QixFQUNuQ2swQixFQUFTbDRCLEVBQVFrNEIsUUFBVXRDLEVBQzNCdUMsRUFBUyxlQUFnQm40QixHQUFVQSxFQUFRdTNCLFdBQVdwNEIsT0FBUyxFQUMvRG80QixFQUFhLGVBQWdCdjNCLEVBQVVBLEVBQVF1M0IsV0FBYSxFQUM1RGEsRUFBVyxhQUFjcDRCLEVBQVVBLEVBQVFvNEIsU0FBVyxJQUN0REMsRUFBVXI0QixFQUFRcTRCLFVBQVlGLEVBQVNaLEVBQVd6NEIsS0FBSSxTQUFTd0gsRUFBT2pILEdBQ3BFLE9BQU8rNEIsRUFBUy80QixHQUFLazRCLEVBQVdsNEIsRUFDbEMsSUFBSys0QixFQUFXYixHQUVwQnYzQixFQUFRczRCLFNBQVd0NEIsRUFBUXM0QixVQUUzQixTQUFVQyxFQUFLQyxHQUViLElBQUlDLEdBREpkLEVBQU9hLElBQWEsSUFBSVgsTUFDQ0UsRUFBU0QsRUFBWUgsRUFBT0MsRUFDakRjLEVBQVdELEVBQWNYLEVBQ3pCbGtCLEVBQVV1a0IsRUFBU1osRUFBV3o0QixLQUFJLFNBQVM2NUIsRUFBUXQ1QixHQUNqRCxPQUFPNjRCLEVBQU9PLEVBQWFsQixFQUFXbDRCLEdBQUlnNUIsRUFBUWg1QixHQUFJeTRCLEVBQ3hELElBQUtJLEVBQU9PLEVBQWFsQixFQUFZYyxFQUFTUCxHQUM5Q2MsRUFBWVQsRUFBU3Z5QixLQUFLZ2YsS0FBS2hSLEVBQVEsR0FBSzJqQixFQUFXLElBQU1jLEVBQVEsSUFDakV6eUIsS0FBS2dmLEtBQUtoUixFQUFVMmpCLEdBQWNjLEdBSzFDLEdBSEFybEIsRUFBUXNrQixhQUFlYSxFQUFTdmtCLEVBQVF2VCxRQUFVdVQsRUFDbERaLEVBQVF3a0IsZUFBaUJvQixFQUN6QjVsQixFQUFReWtCLGFBQWVpQixHQUNuQnpDLEVBQUosQ0FHQSxJQUFJZ0MsRUFBTXJrQixFQUFTZ2xCLEVBQVdGLEdBSTlCLE9BQUlmLEVBQU9JLEdBRVQva0IsRUFBUXNrQixhQUFlYSxFQUFTQyxFQUFTLzNCLFFBQVUrM0IsRUFDbkRwbEIsRUFBUXdrQixlQUFpQixFQUN6QnhrQixFQUFReWtCLGFBQWUsRUFFdkJPLEVBQVNHLEVBQVNDLEVBQVMvM0IsUUFBVSszQixFQUFVLEVBQUcsR0FDbERyRCxFQUFXcUQsRUFBVSxFQUFHLFFBQ3hCaEIsTUFJQVksRUFBU3BrQixFQUFTZ2xCLEVBQVdGLFFBQzdCeEIsRUFBaUJxQixJQWhCakJuQixHQUZGLENBb0JELENBbkNELENBbUNHUSxFQUNMLElBRU81a0IsRUFBUWlqQixNQUNqQixFQTZCQXZxQixFQUFPd0YsS0FBS2dtQixpQkFBbUJBLEVBQy9CeHJCLEVBQU93RixLQUFLMm5CLGdCQU5aLFdBQ0UsT0FBTzlCLEVBQWlCeGxCLE1BQU03RixFQUFPbkosT0FBUTZCLFVBQy9DLEVBS0FzSCxFQUFPMnJCLGtCQUFvQjFCLENBQzVCLENBN1BELEdBZ1FBLFdBSUUsU0FBU21ELEVBQWVDLEVBQU9DLEVBQUtDLEdBQ2xDLElBQUlDLEVBQVEsUUFDTmpGLFNBQVU4RSxFQUFNLEdBQUtFLEdBQU9ELEVBQUksR0FBS0QsRUFBTSxJQUFNLElBQU0sSUFDdkQ5RSxTQUFVOEUsRUFBTSxHQUFLRSxHQUFPRCxFQUFJLEdBQUtELEVBQU0sSUFBTSxJQUFNLElBQ3ZEOUUsU0FBVThFLEVBQU0sR0FBS0UsR0FBT0QsRUFBSSxHQUFLRCxFQUFNLElBQU0sSUFJdkQsT0FGQUcsR0FBUyxLQUFPSCxHQUFTQyxFQUFNeGYsV0FBV3VmLEVBQU0sR0FBS0UsR0FBT0QsRUFBSSxHQUFLRCxFQUFNLEtBQU8sSUFDekUsR0FFWCxDQTBEQXJ0QixFQUFPd0YsS0FBS2lvQixhQTNDWixTQUFzQkMsRUFBV0MsRUFBU3ZCLEVBQVU5M0IsR0FDbEQsSUFBSXM1QixFQUFhLElBQUk1dEIsRUFBTzZ0QixNQUFNSCxHQUFXSSxZQUN6Q0MsRUFBVyxJQUFJL3RCLEVBQU82dEIsTUFBTUYsR0FBU0csWUFDckNFLEVBQXFCMTVCLEVBQVErMEIsV0FDN0I0RSxFQUFtQjM1QixFQUFRZzRCLFNBRy9CLE9BRkFoNEIsRUFBVUEsR0FBVyxDQUFDLEVBRWYwTCxFQUFPd0YsS0FBS2ltQixRQUFRenJCLEVBQU93RixLQUFLek0sT0FBT3FvQixPQUFPOXNCLEVBQVMsQ0FDNUQ4M0IsU0FBVUEsR0FBWSxJQUN0QlAsV0FBWStCLEVBQ1psQixTQUFVcUIsRUFDVnBCLFFBQVNvQixFQUNUdkIsT0FBUSxTQUFVTyxFQUFhbEIsRUFBWWMsRUFBU1AsR0FJbEQsT0FBT2dCLEVBQWV2QixFQUFZYyxFQUhuQnI0QixFQUFRNDVCLFlBQ25CNTVCLEVBQVE0NUIsWUFBWW5CLEVBQWFYLEdBQ2pDLEVBQUlseUIsS0FBS2lQLElBQUk0akIsRUFBY1gsR0FBWWx5QixLQUFLZ1AsR0FBSyxJQUV2RCxFQUVBbWdCLFdBQVksU0FBU25oQixFQUFTZ2xCLEVBQVdGLEdBQ3ZDLEdBQUlnQixFQUNGLE9BQU9BLEVBQ0xaLEVBQWVXLEVBQVVBLEVBQVUsR0FDbkNiLEVBQ0FGLEVBR04sRUFDQVYsU0FBVSxTQUFTcGtCLEVBQVNnbEIsRUFBV0YsR0FDckMsR0FBSWlCLEVBQWtCLENBQ3BCLEdBQUlsNEIsTUFBTUQsUUFBUW9TLEdBQ2hCLE9BQU8rbEIsRUFDTGIsRUFBZWxsQixFQUFTQSxFQUFTLEdBQ2pDZ2xCLEVBQ0FGLEdBR0ppQixFQUFpQi9sQixFQUFTZ2xCLEVBQVdGLEVBQ3ZDLENBQ0YsSUFFSixDQUlELENBekVELEdBNEVBLFdBRUUsU0FBU21CLEVBQVV2akIsRUFBR2xPLEVBQUc2UCxFQUFHVCxHQWMxQixPQWJJbEIsRUFBSTFRLEtBQUtnZixJQUFJeGMsSUFDZmtPLEVBQUlsTyxFQUNKb1AsRUFBSVMsRUFBSSxHQUtOVCxFQURRLElBQU5wUCxHQUFpQixJQUFOa08sRUFDVDJCLEdBQUssRUFBSXJTLEtBQUtnUCxJQUFNaFAsS0FBS2swQixLQUFLLEdBRzlCN2hCLEdBQUssRUFBSXJTLEtBQUtnUCxJQUFNaFAsS0FBS2swQixLQUFLMXhCLEVBQUlrTyxHQUduQyxDQUFFQSxFQUFHQSxFQUFHbE8sRUFBR0EsRUFBRzZQLEVBQUdBLEVBQUdULEVBQUdBLEVBQ2hDLENBRUEsU0FBU3VpQixFQUFRQyxFQUFNdGhCLEVBQUdtZCxHQUN4QixPQUFPbUUsRUFBSzFqQixFQUNWMVEsS0FBSzJFLElBQUksRUFBRyxJQUFNbU8sR0FBSyxJQUN2QjlTLEtBQUttUCxLQUFNMkQsRUFBSW1kLEVBQUltRSxFQUFLeGlCLElBQU0sRUFBSTVSLEtBQUtnUCxJQUFNb2xCLEVBQUsvaEIsRUFDdEQsQ0E2UUEsU0FBU2dpQixFQUFhdmhCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUM3QixPQUFPenRCLEVBQUk4eEIsRUFBZXJFLEVBQUluZCxFQUFHLEVBQUd0USxFQUFHeXRCLEdBQUt0ZixDQUM5QyxDQU1BLFNBQVMyakIsRUFBY3hoQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDOUIsT0FBS25kLEdBQUttZCxHQUFNLEVBQUksS0FDWHp0QixHQUFLLE9BQVNzUSxFQUFJQSxHQUFLbkMsRUFFdkJtQyxFQUFLLEVBQUksS0FDVHRRLEdBQUssUUFBVXNRLEdBQU0sSUFBTSxNQUFTQSxFQUFJLEtBQVFuQyxFQUVoRG1DLEVBQUssSUFBTSxLQUNYdFEsR0FBSyxRQUFVc1EsR0FBTSxLQUFPLE1BQVNBLEVBQUksT0FBVW5DLEVBR25Ebk8sR0FBSyxRQUFVc1EsR0FBTSxNQUFRLE1BQVNBLEVBQUksU0FBWW5DLENBRWpFLENBa0JBN0ssRUFBT3dGLEtBQUtpcEIsS0FBTyxDQU1qQkMsV0FBWSxTQUFTMWhCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUM1QixPQUFPenRCLEdBQUtzUSxHQUFLbWQsR0FBS25kLEVBQUluQyxDQUM1QixFQU1BOGpCLFlBQWEsU0FBUzNoQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDN0IsT0FBUXp0QixHQUFLc1EsR0FBS21kLElBQU1uZCxFQUFJLEdBQUtuQyxDQUNuQyxFQU1BK2pCLGNBQWUsU0FBUzVoQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FFL0IsT0FEQW5kLEdBQU1tZCxFQUFJLEdBQ0YsRUFDQ3p0QixFQUFJLEVBQUlzUSxFQUFJQSxFQUFJbkMsR0FFakJuTyxFQUFJLEtBQVFzUSxHQUFNQSxFQUFJLEdBQUssR0FBS25DLENBQzFDLEVBTUFna0IsWUFBYSxTQUFTN2hCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUM3QixPQUFPenRCLEdBQUtzUSxHQUFLbWQsR0FBS25kLEVBQUlBLEVBQUluQyxDQUNoQyxFQUVBaWtCLGFBcFZGLFNBQXNCOWhCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUM3QixPQUFPenRCLElBQU1zUSxFQUFJQSxFQUFJbWQsRUFBSSxHQUFLbmQsRUFBSUEsRUFBSSxHQUFLbkMsQ0FDN0MsRUFtVkVra0IsZUE3VUYsU0FBd0IvaEIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBRS9CLE9BREFuZCxHQUFLbWQsRUFBSSxHQUNELEVBQ0N6dEIsRUFBSSxFQUFJc1EsRUFBSUEsRUFBSUEsRUFBSW5DLEVBRXRCbk8sRUFBSSxJQUFNc1EsR0FBSyxHQUFLQSxFQUFJQSxFQUFJLEdBQUtuQyxDQUMxQyxFQXdVRW1rQixZQWxVRixTQUFxQmhpQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDNUIsT0FBT3p0QixHQUFLc1EsR0FBS21kLEdBQUtuZCxFQUFJQSxFQUFJQSxFQUFJbkMsQ0FDcEMsRUFpVUVva0IsYUEzVEYsU0FBc0JqaUIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBQzdCLE9BQVF6dEIsSUFBTXNRLEVBQUlBLEVBQUltZCxFQUFJLEdBQUtuZCxFQUFJQSxFQUFJQSxFQUFJLEdBQUtuQyxDQUNsRCxFQTBURXFrQixlQXBURixTQUF3QmxpQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FFL0IsT0FEQW5kLEdBQUttZCxFQUFJLEdBQ0QsRUFDQ3p0QixFQUFJLEVBQUlzUSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFJbkMsR0FFekJuTyxFQUFJLElBQU1zUSxHQUFLLEdBQUtBLEVBQUlBLEVBQUlBLEVBQUksR0FBS25DLENBQy9DLEVBK1NFc2tCLFlBelNGLFNBQXFCbmlCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUM1QixPQUFPenRCLEdBQUtzUSxHQUFLbWQsR0FBS25kLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUluQyxDQUN4QyxFQXdTRXVrQixhQWxTRixTQUFzQnBpQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDN0IsT0FBT3p0QixJQUFNc1EsRUFBSUEsRUFBSW1kLEVBQUksR0FBS25kLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUksR0FBS25DLENBQ3JELEVBaVNFd2tCLGVBM1JGLFNBQXdCcmlCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUUvQixPQURBbmQsR0FBS21kLEVBQUksR0FDRCxFQUNDenRCLEVBQUksRUFBSXNRLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUluQyxFQUU5Qm5PLEVBQUksSUFBTXNRLEdBQUssR0FBS0EsRUFBSUEsRUFBSUEsRUFBSUEsRUFBSSxHQUFLbkMsQ0FDbEQsRUFzUkV5a0IsV0FoUkYsU0FBb0J0aUIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBQzNCLE9BQVF6dEIsRUFBSXhDLEtBQUtpUCxJQUFJNkQsRUFBSW1kLEdBQUtqd0IsS0FBS2dQLEdBQUssSUFBTXhNLEVBQUltTyxDQUNwRCxFQStRRTBrQixZQXpRRixTQUFxQnZpQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDNUIsT0FBT3p0QixFQUFJeEMsS0FBS21QLElBQUkyRCxFQUFJbWQsR0FBS2p3QixLQUFLZ1AsR0FBSyxJQUFNMkIsQ0FDL0MsRUF3UUUya0IsY0FsUUYsU0FBdUJ4aUIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBQzlCLE9BQVF6dEIsRUFBSSxHQUFLeEMsS0FBS2lQLElBQUlqUCxLQUFLZ1AsR0FBSzhELEVBQUltZCxHQUFLLEdBQUt0ZixDQUNwRCxFQWlRRTRrQixXQTNQRixTQUFvQnppQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDM0IsT0FBYyxJQUFObmQsRUFBV25DLEVBQUluTyxFQUFJeEMsS0FBSzJFLElBQUksRUFBRyxJQUFNbU8sRUFBSW1kLEVBQUksSUFBTXRmLENBQzdELEVBMFBFNmtCLFlBcFBGLFNBQXFCMWlCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUM1QixPQUFRbmQsSUFBTW1kLEVBQUt0ZixFQUFJbk8sRUFBSUEsR0FBaUMsRUFBM0J4QyxLQUFLMkUsSUFBSSxHQUFJLEdBQUttTyxFQUFJbWQsSUFBVXRmLENBQ25FLEVBbVBFOGtCLGNBN09GLFNBQXVCM2lCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUM5QixPQUFVLElBQU5uZCxFQUNLbkMsRUFFTG1DLElBQU1tZCxFQUNEdGYsRUFBSW5PLEdBRWJzUSxHQUFLbWQsRUFBSSxHQUNELEVBQ0N6dEIsRUFBSSxFQUFJeEMsS0FBSzJFLElBQUksRUFBRyxJQUFNbU8sRUFBSSxJQUFNbkMsRUFFdENuTyxFQUFJLEdBQStCLEVBQXpCeEMsS0FBSzJFLElBQUksR0FBSSxLQUFPbU8sSUFBVW5DLENBQ2pELEVBa09FK2tCLFdBNU5GLFNBQW9CNWlCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUMzQixPQUFRenRCLEdBQUt4QyxLQUFLeUUsS0FBSyxHQUFLcU8sR0FBS21kLEdBQUtuZCxHQUFLLEdBQUtuQyxDQUNsRCxFQTJORWdsQixZQXJORixTQUFxQjdpQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsR0FDNUIsT0FBT3p0QixFQUFJeEMsS0FBS3lFLEtBQUssR0FBS3FPLEVBQUlBLEVBQUltZCxFQUFJLEdBQUtuZCxHQUFLbkMsQ0FDbEQsRUFvTkVpbEIsY0E5TUYsU0FBdUI5aUIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBRTlCLE9BREFuZCxHQUFLbWQsRUFBSSxHQUNELEdBQ0V6dEIsRUFBSSxHQUFLeEMsS0FBS3lFLEtBQUssRUFBSXFPLEVBQUlBLEdBQUssR0FBS25DLEVBRXhDbk8sRUFBSSxHQUFLeEMsS0FBS3lFLEtBQUssR0FBS3FPLEdBQUssR0FBS0EsR0FBSyxHQUFLbkMsQ0FDckQsRUF5TUVrbEIsY0FuTUYsU0FBdUIvaUIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBQzlCLElBQWlCNWQsRUFBSSxFQUNyQixPQUFVLElBQU5TLEVBQ0tuQyxFQUdDLElBRFZtQyxHQUFLbWQsR0FFSXRmLEVBQUluTyxHQUVSNlAsSUFDSEEsRUFBUSxHQUFKNGQsSUFHRWtFLEVBREdGLEVBWGlCenhCLEVBV0pBLEVBQUc2UCxFQVhuQixTQVljUyxFQUFHbWQsR0FBS3RmLEVBQ2hDLEVBc0xFbWxCLGVBaExGLFNBQXdCaGpCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixHQUMvQixJQUFpQjVkLEVBQUksRUFDckIsR0FBVSxJQUFOUyxFQUNGLE9BQU9uQyxFQUdULEdBQVUsSUFEVm1DLEdBQUttZCxHQUVILE9BQU90ZixFQUFJbk8sRUFFUjZQLElBQ0hBLEVBQVEsR0FBSjRkLEdBRU4sSUFBSW1FLEVBQU9ILEVBWGlCenhCLEVBV0pBLEVBQUc2UCxFQVhuQixTQVlSLE9BQU8raEIsRUFBSzFqQixFQUFJMVEsS0FBSzJFLElBQUksR0FBSSxHQUFLbU8sR0FBSzlTLEtBQUttUCxLQUFLMkQsRUFBSW1kLEVBQUltRSxFQUFLeGlCLElBQU0sRUFBSTVSLEtBQUtnUCxJQUFNb2xCLEVBQUsvaEIsR0FBTStoQixFQUFLNXhCLEVBQUltTyxDQUN6RyxFQW1LRW9sQixpQkE3SkYsU0FBMEJqakIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBQ2pDLElBQWlCNWQsRUFBSSxFQUNyQixHQUFVLElBQU5TLEVBQ0YsT0FBT25DLEVBR1QsR0FBVSxJQURWbUMsR0FBS21kLEVBQUksR0FFUCxPQUFPdGYsRUFBSW5PLEVBRVI2UCxJQUNIQSxFQUFJNGQsR0FBSyxHQUFNLE1BRWpCLElBQUltRSxFQUFPSCxFQVhpQnp4QixFQVdKQSxFQUFHNlAsRUFYbkIsU0FZUixPQUFJUyxFQUFJLEdBQ0UsR0FBTXFoQixFQUFRQyxFQUFNdGhCLEVBQUdtZCxHQUFLdGYsRUFFL0J5akIsRUFBSzFqQixFQUFJMVEsS0FBSzJFLElBQUksR0FBSSxJQUFNbU8sR0FBSyxJQUN0QzlTLEtBQUttUCxLQUFLMkQsRUFBSW1kLEVBQUltRSxFQUFLeGlCLElBQU0sRUFBSTVSLEtBQUtnUCxJQUFNb2xCLEVBQUsvaEIsR0FBTSxHQUFNK2hCLEVBQUs1eEIsRUFBSW1PLENBQzFFLEVBNElFcWxCLFdBdElGLFNBQW9CbGpCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixFQUFHcmUsR0FJOUIsWUFIVTdYLElBQU42WCxJQUNGQSxFQUFJLFNBRUNwUCxHQUFLc1EsR0FBS21kLEdBQUtuZCxJQUFNbEIsRUFBSSxHQUFLa0IsRUFBSWxCLEdBQUtqQixDQUNoRCxFQWtJRXNsQixZQTVIRixTQUFxQm5qQixFQUFHbkMsRUFBR25PLEVBQUd5dEIsRUFBR3JlLEdBSS9CLFlBSFU3WCxJQUFONlgsSUFDRkEsRUFBSSxTQUVDcFAsSUFBTXNRLEVBQUlBLEVBQUltZCxFQUFJLEdBQUtuZCxJQUFNbEIsRUFBSSxHQUFLa0IsRUFBSWxCLEdBQUssR0FBS2pCLENBQzdELEVBd0hFdWxCLGNBbEhGLFNBQXVCcGpCLEVBQUduQyxFQUFHbk8sRUFBR3l0QixFQUFHcmUsR0FLakMsWUFKVTdYLElBQU42WCxJQUNGQSxFQUFJLFVBRU5rQixHQUFLbWQsRUFBSSxHQUNELEVBQ0N6dEIsRUFBSSxHQUFLc1EsRUFBSUEsSUFBdUIsR0FBaEJsQixHQUFLLFFBQWdCa0IsRUFBSWxCLElBQU1qQixFQUVyRG5PLEVBQUksSUFBTXNRLEdBQUssR0FBS0EsSUFBdUIsR0FBaEJsQixHQUFLLFFBQWdCa0IsRUFBSWxCLEdBQUssR0FBS2pCLENBQ3ZFLEVBMEdFMGpCLGFBQWNBLEVBQ2RDLGNBQWVBLEVBQ2Y2QixnQkEzRUYsU0FBeUJyakIsRUFBR25DLEVBQUduTyxFQUFHeXRCLEdBQ2hDLE9BQUluZCxFQUFJbWQsRUFBSSxFQUM2QixHQUFoQ29FLEVBQWtCLEVBQUp2aEIsRUFBTyxFQUFHdFEsRUFBR3l0QixHQUFXdGYsRUFFSixHQUFwQzJqQixFQUFrQixFQUFKeGhCLEVBQVFtZCxFQUFHLEVBQUd6dEIsRUFBR3l0QixHQUFlLEdBQUp6dEIsRUFBVW1PLENBQzdELEVBeUVELENBN1lELEdBZ1pBLFNBQVVuTSxHQUVSLGFBT0EsSUFBSXNCLEVBQVN0QixFQUFPc0IsU0FBV3RCLEVBQU9zQixPQUFTLENBQUUsR0FDN0NvaEIsRUFBU3BoQixFQUFPd0YsS0FBS3pNLE9BQU9xb0IsT0FDNUJ2aEIsRUFBUUcsRUFBT3dGLEtBQUt6TSxPQUFPOEcsTUFDM0JDLEVBQVVFLEVBQU93RixLQUFLMUYsUUFDdEJrTyxFQUFZaE8sRUFBT3dGLEtBQUt3SSxVQUN4Qm9FLEVBQTRCcFMsRUFBT3dGLEtBQUs0TSwwQkFReENrZSxFQUFnQixDQUNkOVcsR0FBc0IsT0FDdEIzakIsRUFBc0IsT0FDdEI4WCxFQUFzQixTQUN0QjhMLEdBQXNCLE1BQ3RCdFAsRUFBc0IsTUFDdEJvbUIsUUFBc0IsVUFDdEJDLFdBQXNCLFVBQ3RCcmpCLFVBQXNCLGtCQUN0QixlQUFzQixjQUN0QixZQUFzQixXQUN0QixjQUFzQixhQUN0QixZQUFzQixXQUN0QixhQUFzQixZQUN0QixjQUFzQixhQUN0QixpQkFBc0IsY0FDdEIsY0FBc0IsYUFDdEIsbUJBQXNCLGtCQUN0QixvQkFBc0IsbUJBQ3RCLGlCQUFzQixnQkFDdEIsa0JBQXNCLGlCQUN0QixvQkFBc0IsbUJBQ3RCLGlCQUFzQixnQkFDdEIsZUFBc0IsY0FDdEIsa0JBQXNCLGlCQUN0QixjQUFzQixhQUN0QnFYLFFBQXNCLFVBQ3RCLFlBQXNCLFdBQ3RCLFlBQXNCLFdBQ3RCLGdCQUFzQixnQkFDdEIsa0JBQXNCLGtCQUd4QmlNLEVBQWtCLENBQ2hCQyxPQUFRLGdCQUNSaHJCLEtBQVEsZUFHVmlyQixFQUFRLFlBQWFDLEVBQVEsWUFXakMsU0FBU0MsRUFBY25LLEdBRXJCLE9BQUlBLEtBQVE0SixFQUNIQSxFQUFjNUosR0FFaEJBLENBQ1QsQ0FFQSxTQUFTb0ssRUFBZXBLLEVBQU05ckIsRUFBT20yQixFQUFrQjlpQixHQUNyRCxJQUFvQytPLEVBQWhDbG5CLEVBQVVDLE1BQU1ELFFBQVE4RSxHQUU1QixHQUFjLFNBQVQ4ckIsR0FBNEIsV0FBVEEsR0FBZ0MsU0FBVjlyQixFQUd6QyxJQUFhLGtCQUFUOHJCLEVBQ1AsTUFBa0IsdUJBQVY5ckIsRUFFTCxHQUFhLG9CQUFUOHJCLEVBRUw5ckIsRUFEWSxTQUFWQSxFQUNNLEtBR0FBLEVBQU05RixRQUFRLEtBQU0sS0FBS21hLE1BQU0sT0FBTzdiLElBQUkwYSxpQkFHakQsR0FBYSxvQkFBVDRZLEVBRUw5ckIsRUFERW0yQixHQUFvQkEsRUFBaUJoYixnQkFDL0IzRCxFQUNOMmUsRUFBaUJoYixnQkFBaUIvVixFQUFPZ3hCLHdCQUF3QnAyQixJQUczRG9GLEVBQU9neEIsd0JBQXdCcDJCLFFBR3RDLEdBQWEsWUFBVDhyQixFQUNQOXJCLEVBQWtCLFNBQVZBLEdBQThCLFdBQVZBLEVBRXhCbTJCLElBQWlELElBQTdCQSxFQUFpQkUsVUFDdkNyMkIsR0FBUSxRQUdQLEdBQWEsWUFBVDhyQixFQUNQOXJCLEVBQVFrVCxXQUFXbFQsR0FDZm0yQixRQUF3RCxJQUE3QkEsRUFBaUJ2TSxVQUM5QzVwQixHQUFTbTJCLEVBQWlCdk0sY0FHekIsR0FBYSxlQUFUa0MsRUFDUDlyQixFQUFrQixVQUFWQSxFQUFvQixPQUFtQixRQUFWQSxFQUFrQixRQUFVLGNBRTlELEdBQWEsZ0JBQVQ4ckIsRUFFUDFKLEVBQVNoUCxFQUFVcFQsRUFBT3FULEdBQVlBLEVBQVcsU0FFOUMsR0FBYSxlQUFUeVksRUFBdUIsQ0FDOUIsSUFBSXdLLEVBQVl0MkIsRUFBTTJLLFFBQVEsUUFDMUI0ckIsRUFBY3YyQixFQUFNMkssUUFBUSxVQUM1QjNLLEVBQVEsUUFDUnMyQixHQUFhLEdBQUtDLEdBQWUsR0FBS0EsRUFBY0QsSUFHaEMsSUFBZkEsR0FBb0JDLEdBQWUsS0FGMUN2MkIsRUFBUSxTQUtaLEtBQ0ssSUFBYSxTQUFUOHJCLEdBQTRCLGVBQVRBLEdBQWtDLFNBQVRBLEVBQ25ELE9BQU85ckIsRUFFSixHQUFhLG1CQUFUOHJCLEVBQ1AsTUFBa0Isb0JBQVY5ckIsRUFHUm9pQixFQUFTbG5CLEVBQVU4RSxFQUFNeEgsSUFBSTRhLEdBQWFBLEVBQVVwVCxFQUFPcVQsRUFDN0QsT0E3REVyVCxFQUFRLEdBK0RWLE9BQVM5RSxHQUFXZ29CLE1BQU1kLEdBQVVwaUIsRUFBUW9pQixDQUM5QyxDQUtBLFNBQVNvVSxFQUFZN0ssR0FDbkIsT0FBTyxJQUFJL0ksT0FBTyxLQUFPK0ksRUFBSTd5QixLQUFLLEtBQU8sT0FBUSxJQUNuRCxDQWlDQSxTQUFTMjlCLEVBQWtCdkosRUFBS3dKLEdBQzlCLElBQUlDLEVBQTBCQyxFQUFVNzlCLEVBQUd3QyxFQUE3QnM3QixFQUFZLEdBQzFCLElBQUs5OUIsRUFBSSxFQUFHd0MsRUFBTW03QixFQUFVNzlCLE9BQVFFLEVBQUl3QyxFQUFLeEMsSUFDM0M0OUIsRUFBV0QsRUFBVTM5QixHQUNyQjY5QixFQUFXMUosRUFBSTRKLHFCQUFxQkgsR0FDcENFLEVBQVlBLEVBQVVqK0IsT0FBT3VDLE1BQU1FLFVBQVV0QixNQUFNdUIsS0FBS3M3QixJQUUxRCxPQUFPQyxDQUNULENBNE1BLFNBQVNFLEVBQW1Cbk8sRUFBU29PLEdBQ25DLElBQUlDLEVBQWVDLEdBQWlCLEVBTXBDLE9BSkFELEVBQWdCRSxFQUFnQnZPLEVBQVNvTyxFQUFVeGQsU0FDOUJ3ZCxFQUFVbitCLFNBQzdCcStCLEVBS0osU0FBNkJ0TyxFQUFTb08sR0FFcEMsSUFEQSxJQUFJSSxFQUFVRixHQUFpQixFQUN4QnRPLEVBQVF2VCxZQUE4QyxJQUFoQ3VULEVBQVF2VCxXQUFXcVcsVUFBa0JzTCxFQUFVbitCLFFBQ3RFcStCLElBQ0ZFLEVBQVdKLEVBQVV4ZCxPQUd2QjBkLEVBQWlCQyxFQURqQnZPLEVBQVVBLEVBQVF2VCxXQUN3QitoQixHQUU1QyxPQUE0QixJQUFyQkosRUFBVW4rQixNQUNuQixDQWZxQncrQixDQUFvQnpPLEVBQVNvTyxJQUV6Q0MsR0FBaUJDLEdBQXdDLElBQXJCRixFQUFVbitCLE1BQ3ZELENBaUJBLFNBQVNzK0IsRUFBZ0J2TyxFQUFTd08sR0FDaEMsSUFFcUNFLEVBQVN2K0IsRUFGMUM0OUIsRUFBVy9OLEVBQVErTixTQUNuQlksRUFBYTNPLEVBQVE0TyxhQUFhLFNBQ2xDdC9CLEVBQUswd0IsRUFBUTRPLGFBQWEsTUFTOUIsR0FOQUYsRUFBVSxJQUFJMVUsT0FBTyxJQUFNK1QsRUFBVSxLQUNyQ1MsRUFBV0EsRUFBU2w5QixRQUFRbzlCLEVBQVMsSUFDakNwL0IsR0FBTWsvQixFQUFTditCLFNBQ2pCeStCLEVBQVUsSUFBSTFVLE9BQU8sSUFBTTFxQixFQUFLLG1CQUFvQixLQUNwRGsvQixFQUFXQSxFQUFTbDlCLFFBQVFvOUIsRUFBUyxLQUVuQ0MsR0FBY0gsRUFBU3YrQixPQUV6QixJQUFLRSxHQURMdytCLEVBQWFBLEVBQVdsakIsTUFBTSxNQUNWeGIsT0FBUUUsS0FDMUJ1K0IsRUFBVSxJQUFJMVUsT0FBTyxNQUFRMlUsRUFBV3grQixHQUFLLG1CQUFvQixLQUNqRXErQixFQUFXQSxFQUFTbDlCLFFBQVFvOUIsRUFBUyxJQUd6QyxPQUEyQixJQUFwQkYsRUFBU3YrQixNQUNsQixDQU1BLFNBQVM0K0IsRUFBWXZLLEVBQUtoMUIsR0FDeEIsSUFBSTh5QixFQUVKLEdBREFrQyxFQUFJUixpQkFBbUIxQixFQUFLa0MsRUFBSVIsZUFBZXgwQixJQUMzQzh5QixFQUNGLE9BQU9BLEVBRVQsSUFBSTd0QixFQUFNcEUsRUFBR3dDLEVBQUttOEIsRUFBV3hLLEVBQUk0SixxQkFBcUIsS0FDdEQsSUFBSy85QixFQUFJLEVBQUd3QyxFQUFNbThCLEVBQVM3K0IsT0FBUUUsRUFBSXdDLEVBQUt4QyxJQUUxQyxHQUFJYixLQURKaUYsRUFBT3U2QixFQUFTMytCLElBQ0F5K0IsYUFBYSxNQUMzQixPQUFPcjZCLENBR2IsQ0FqWkFpSSxFQUFPdXlCLHNCQUF3Qm5CLEVBOUNSLENBQUMsT0FBUSxTQUFVLFVBQVcsV0FBWSxVQUFXLE9BQVEsT0FDOUUsUUFBUyxTQThDZnB4QixFQUFPd3lCLHdCQUEwQnBCLEVBN0NSLENBQUMsU0FBVSxRQUFTLFNBQVUsVUFBVyxPQUFRLFFBOEMxRXB4QixFQUFPeXlCLHlCQUEyQnJCLEVBN0NSLENBQUMsVUFBVyxPQUFRLFNBQVUsV0FBWSxXQUFZLE9BQVEsU0E4Q3hGcHhCLEVBQU8weUIscUJBQXVCdEIsRUE3Q1IsQ0FBQyxTQUFVLElBQUssSUFBSyxNQUFPLFdBQVksU0ErQzlEcHhCLEVBQU8yeUIsU0FBVyxDQUFFLEVBQ3BCM3lCLEVBQU80eUIsYUFBZSxDQUFFLEVBQ3hCNXlCLEVBQU82eUIsVUFBWSxDQUFFLEVBd0lyQjd5QixFQUFPZ3hCLHdCQUEwQixXQXlCL0IsU0FBUzhCLEVBQVcxZixFQUFRdUssRUFBTTRQLEdBQ2hDbmEsRUFBT21hLEdBQU9yekIsS0FBS2daLElBQUlsVCxFQUFPd0YsS0FBSzlGLGlCQUFpQmllLEVBQUssSUFDM0QsQ0FVQSxJQUFJbGEsRUFBVXpELEVBQU95RCxRQUdqQm1LLEVBQVM1TixFQUFPb0QsTUFFaEJDLEVBQVdyRCxFQUFPcUQsU0F5QmxCOEosRUFBWSw2QkFSSVMsRUFBUyxJQUFNdkssRUFDckIsSUFBTXVLLEVBQVMsSUFBTXZLLEVBQ3JCLElBQU11SyxFQUFTLElBQU12SyxFQUNyQixJQUFNdUssRUFBUyxJQUFNdkssRUFDckIsSUFBTXVLLEVBQVMsSUFBTXZLLEVBQ3JCLElBQU11SyxFQUdKLHVDQVorQkEsRUFBUyxPQUN4Q3ZLLEVBQVcsSUFBTXVLLEVBV2pCLHFDQWZ1QkEsRUFBUyxPQUNoQ3ZLLEVBQVcsSUFBTXVLLEVBY2pCLHNDQW5CeUJBLEVBQVMsT0FDbEN2SyxFQUFXLElBQU11SyxFQUFTLElBQzFCdkssRUFBVyxJQUFNdUssRUFpQmpCLHFDQXZCdUJBLEVBdUJ2QixtQ0FyQnVCQSxFQXFCdkIsYUFjWm1sQixFQUFrQixJQUFJdlYsT0FITixjQUZLclEsRUFBWSxNQUFROUosRUFBVyxJQUFNOEosRUFFMUMsY0FNaEI2bEIsRUFBYyxJQUFJeFYsT0FBT3JRLEVBQVcsS0FFeEMsT0FBTyxTQUFTOGxCLEdBR2QsSUFBSTdmLEVBQVMzUCxFQUFRalEsU0FDakIwL0IsRUFBVyxHQUlmLElBQUtELEdBQW1CQSxJQUFtQkYsRUFBZ0JyK0IsS0FBS3UrQixHQUM5RCxPQUFPN2YsRUFHVDZmLEVBQWVuK0IsUUFBUWsrQixHQUFhLFNBQVMvVixHQUUzQyxJQUFJekcsRUFBSSxJQUFJZ0gsT0FBT3JRLEdBQVdnQixLQUFLOE8sR0FBTzdXLFFBQU8sU0FBVTZXLEdBRXJELFFBQVVBLENBQ1osSUFDQWtXLEVBQVkzYyxFQUFFLEdBQ2RtSCxFQUFPbkgsRUFBRTdoQixNQUFNLEdBQUd2QixJQUFJMGEsWUFFMUIsT0FBUXFsQixHQUNOLElBQUssYUEvRVgsU0FBeUIvZixFQUFRdUssR0FDL0J2SyxFQUFPLEdBQUt1SyxFQUFLLEdBQ0csSUFBaEJBLEVBQUtscUIsU0FDUDJmLEVBQU8sR0FBS3VLLEVBQUssR0FFckIsQ0EyRVF5VixDQUFnQmhnQixFQUFRdUssR0FDeEIsTUFDRixJQUFLLFNBQ0hBLEVBQUssR0FBSzNkLEVBQU93RixLQUFLOUYsaUJBQWlCaWUsRUFBSyxJQS9HcEQsU0FBc0J2SyxFQUFRdUssR0FDNUIsSUFBSXhVLEVBQU1uSixFQUFPd0YsS0FBSzJELElBQUl3VSxFQUFLLElBQUt0VSxFQUFNckosRUFBT3dGLEtBQUs2RCxJQUFJc1UsRUFBSyxJQUMzRDluQixFQUFJLEVBQUdzVSxFQUFJLEVBQ0ssSUFBaEJ3VCxFQUFLbHFCLFNBQ1BvQyxFQUFJOG5CLEVBQUssR0FDVHhULEVBQUl3VCxFQUFLLElBR1h2SyxFQUFPLEdBQUtqSyxFQUNaaUssRUFBTyxHQUFLL0osRUFDWitKLEVBQU8sSUFBTS9KLEVBQ2IrSixFQUFPLEdBQUtqSyxFQUNaaUssRUFBTyxHQUFLdmQsR0FBS3NULEVBQU10VCxFQUFJd1QsRUFBTWMsR0FDakNpSixFQUFPLEdBQUtqSixHQUFLZCxFQUFNeFQsRUFBSXNULEVBQU1nQixFQUNuQyxDQWtHUWtwQixDQUFhamdCLEVBQVF1SyxHQUNyQixNQUNGLElBQUssU0FsR1gsU0FBcUJ2SyxFQUFRdUssR0FDM0IsSUFBSTJWLEVBQWMzVixFQUFLLEdBQ25CNFYsRUFBK0IsSUFBaEI1VixFQUFLbHFCLE9BQWdCa3FCLEVBQUssR0FBS0EsRUFBSyxHQUV2RHZLLEVBQU8sR0FBS2tnQixFQUNabGdCLEVBQU8sR0FBS21nQixDQUNkLENBNkZReGdCLENBQVlLLEVBQVF1SyxHQUNwQixNQUNGLElBQUssUUFDSG1WLEVBQVcxZixFQUFRdUssRUFBTSxHQUN6QixNQUNGLElBQUssUUFDSG1WLEVBQVcxZixFQUFRdUssRUFBTSxHQUN6QixNQUNGLElBQUssU0FDSHZLLEVBQVN1SyxFQUtidVYsRUFBU3RnQyxLQUFLd2dCLEVBQU81ZixVQUVyQjRmLEVBQVMzUCxFQUFRalEsUUFDbkIsSUFHQSxJQURBLElBQUlnZ0MsRUFBaUJOLEVBQVMsR0FDdkJBLEVBQVN6L0IsT0FBUyxHQUN2QnkvQixFQUFTOVAsUUFDVG9RLEVBQWlCeHpCLEVBQU93RixLQUFLNE0sMEJBQTBCb2hCLEVBQWdCTixFQUFTLElBRWxGLE9BQU9NLENBQ1QsQ0FDRCxDQTlJZ0MsR0F3VWpDLElBQUlDLEVBQXFCLElBQUlqVyxPQUMzQixTQUNVeGQsRUFBT29ELE1BRGpCLGdCQUVVcEQsRUFBT29ELE1BRmpCLGdCQUdVcEQsRUFBT29ELE1BSGpCLGdCQUlVcEQsRUFBT29ELE1BSmpCLFdBV0YsU0FBU3N3QixFQUFzQmxRLEdBQzdCLElBQUt4akIsRUFBT3d5Qix3QkFBd0I5OUIsS0FBSzh1QixFQUFRK04sVUFDL0MsTUFBTyxDQUFDLEVBRVYsSUFHSWxrQixFQUNBRSxFQUNBb21CLEVBQWNDLEVBQWV4Z0IsRUFBUXdTLEVBTHJDaU8sRUFBY3JRLEVBQVE0TyxhQUFhLFdBQ25DbG1CLEVBQVMsRUFDVEMsRUFBUyxFQUlUMm5CLEVBQVl0USxFQUFRNE8sYUFBYSxTQUNqQzJCLEVBQWF2USxFQUFRNE8sYUFBYSxVQUNsQ3Y4QixFQUFJMnRCLEVBQVE0TyxhQUFhLE1BQVEsRUFDakNqb0IsRUFBSXFaLEVBQVE0TyxhQUFhLE1BQVEsRUFDakM0QixFQUFzQnhRLEVBQVE0TyxhQUFhLHdCQUEwQixHQUNyRTZCLEdBQW1CSixLQUFpQkEsRUFBY0EsRUFBWTVXLE1BQU13VyxJQUNwRVMsR0FBbUJKLElBQWNDLEdBQTRCLFNBQWRELEdBQXVDLFNBQWZDLEVBQ3ZFSSxFQUFhRixHQUFrQkMsRUFDL0JFLEVBQVksQ0FBRSxFQUFHaEIsRUFBa0IsR0FBSWlCLEVBQVksRUFBR0MsRUFBYSxFQWdCdkUsR0FkQUYsRUFBVXh5QixNQUFRLEVBQ2xCd3lCLEVBQVU1eUIsT0FBUyxFQUNuQjR5QixFQUFVRCxXQUFhQSxFQUVuQkYsSUFDSXArQixHQUFLc1UsSUFBTXFaLEVBQVF2VCxZQUE4QyxjQUFoQ3VULEVBQVF2VCxXQUFXc2hCLFdBQ3hENkIsRUFBa0IsY0FBZ0JwbEIsRUFBVW5ZLEdBQUssSUFBTW1ZLEVBQVU3RCxHQUFLLEtBQ3RFaUosR0FBVW9RLEVBQVE0TyxhQUFhLGNBQWdCLElBQU1nQixFQUNyRDVQLEVBQVF1QyxhQUFhLFlBQWEzUyxHQUNsQ29RLEVBQVErUSxnQkFBZ0IsS0FDeEIvUSxFQUFRK1EsZ0JBQWdCLE1BSXhCSixFQUNGLE9BQU9DLEVBR1QsR0FBSUgsRUFJRixPQUhBRyxFQUFVeHlCLE1BQVFvTSxFQUFVOGxCLEdBQzVCTSxFQUFVNXlCLE9BQVN3TSxFQUFVK2xCLEdBRXRCSyxFQWlEVCxHQS9DQS9tQixHQUFRUyxXQUFXK2xCLEVBQVksSUFDL0J0bUIsR0FBUU8sV0FBVytsQixFQUFZLElBQy9CRixFQUFlN2xCLFdBQVcrbEIsRUFBWSxJQUN0Q0QsRUFBZ0I5bEIsV0FBVytsQixFQUFZLElBQ3ZDTyxFQUFVL21CLEtBQU9BLEVBQ2pCK21CLEVBQVU3bUIsS0FBT0EsRUFDakI2bUIsRUFBVVQsYUFBZUEsRUFDekJTLEVBQVVSLGNBQWdCQSxFQUNyQk0sR0FPSEUsRUFBVXh5QixNQUFRK3hCLEVBQ2xCUyxFQUFVNXlCLE9BQVNveUIsSUFQbkJRLEVBQVV4eUIsTUFBUW9NLEVBQVU4bEIsR0FDNUJNLEVBQVU1eUIsT0FBU3dNLEVBQVUrbEIsR0FDN0I3bkIsRUFBU2tvQixFQUFVeHlCLE1BQVEreEIsRUFDM0J4bkIsRUFBU2lvQixFQUFVNXlCLE9BQVNveUIsR0FTSyxVQURuQ0ksRUFBc0JoMEIsRUFBT3dGLEtBQUt1TyxrQ0FBa0NpZ0IsSUFDNUMzZixTQUVrQixTQUFwQzJmLEVBQW9COWYsY0FDdEIvSCxFQUFTRCxFQUFVQSxFQUFTQyxFQUFTQSxFQUFTRCxHQUdSLFVBQXBDOG5CLEVBQW9COWYsY0FDdEIvSCxFQUFTRCxFQUFVQSxFQUFTQyxFQUFTRCxFQUFTQyxHQUdoRGtvQixFQUFZRCxFQUFVeHlCLE1BQVEreEIsRUFBZXpuQixFQUM3Q29vQixFQUFhRixFQUFVNXlCLE9BQVNveUIsRUFBZ0IxbkIsRUFDYixRQUEvQjhuQixFQUFvQjNmLFNBQ3RCZ2dCLEdBQWEsR0FFb0IsUUFBL0JMLEVBQW9CMWYsU0FDdEJnZ0IsR0FBYyxHQUVtQixRQUEvQk4sRUFBb0IzZixTQUN0QmdnQixFQUFZLEdBRXFCLFFBQS9CTCxFQUFvQjFmLFNBQ3RCZ2dCLEVBQWEsSUFJRixJQUFYcG9CLEdBQTJCLElBQVhDLEdBQXlCLElBQVRrQixHQUF1QixJQUFURSxHQUFvQixJQUFOMVgsR0FBaUIsSUFBTnNVLEVBQ3pFLE9BQU9pcUIsRUFjVCxJQVpLditCLEdBQUtzVSxJQUFzQyxjQUFoQ3FaLEVBQVF2VCxXQUFXc2hCLFdBQ2pDNkIsRUFBa0IsY0FBZ0JwbEIsRUFBVW5ZLEdBQUssSUFBTW1ZLEVBQVU3RCxHQUFLLE1BR3hFaUosRUFBU2dnQixFQUFrQixXQUFhbG5CLEVBQS9Ca25CLFFBR0tqbkIsRUFBUyxLQUNSa0IsRUFBT25CLEVBQVNtb0IsR0FBYSxLQUM3QjltQixFQUFPcEIsRUFBU21vQixHQUFjLEtBR3BCLFFBQXJCOVEsRUFBUStOLFNBQW9CLENBRzlCLElBRkEzTCxFQUFLcEMsRUFBUXVFLGNBQWN5TSxnQkFBZ0J4MEIsRUFBTzBELE1BQU8sS0FFbEQ4ZixFQUFRaVIsWUFDYjdPLEVBQUc3VixZQUFZeVQsRUFBUWlSLFlBRXpCalIsRUFBUXpULFlBQVk2VixFQUN0QixNQUVFQSxFQUFLcEMsR0FDRitRLGdCQUFnQixLQUNuQjNPLEVBQUcyTyxnQkFBZ0IsS0FDbkJuaEIsRUFBU3dTLEVBQUd3TSxhQUFhLGFBQWVoZixFQUcxQyxPQURBd1MsRUFBR0csYUFBYSxZQUFhM1MsR0FDdEJnaEIsQ0FDVCxDQWdGQSxTQUFTTSxFQUErQjVNLEVBQUs2TSxHQUMzQyxJQUNJQyxFQUFZLGFBRVpDLEVBQXFCeEMsRUFBWXZLLEVBRHpCNk0sRUFBU3ZDLGFBQWF3QyxHQUFXamdDLE1BQU0sSUFVbkQsR0FSSWtnQyxHQUFzQkEsRUFBbUJ6QyxhQUFhd0MsSUFDeERGLEVBQStCNU0sRUFBSytNLEdBTGpCLENBQUMsb0JBQXFCLEtBQU0sS0FBTSxLQUFNLEtBQU0sZ0JBQWlCLEtBQU0sS0FBTSxJQUFLLEtBQU0sTUFPNUZ2b0IsU0FBUSxTQUFTb2EsR0FDMUJtTyxJQUF1QkYsRUFBU0csYUFBYXBPLElBQVNtTyxFQUFtQkMsYUFBYXBPLElBQ3hGaU8sRUFBUzVPLGFBQWFXLEVBQU1tTyxFQUFtQnpDLGFBQWExTCxHQUVoRSxLQUNLaU8sRUFBU0ksU0FBU3RoQyxPQUVyQixJQURBLElBQUl1aEMsRUFBaUJILEVBQW1CSSxXQUFVLEdBQzNDRCxFQUFlUCxZQUNwQkUsRUFBUzVrQixZQUFZaWxCLEVBQWVQLFlBR3hDRSxFQUFTSixnQkFBZ0JLLEVBQzNCLENBNUVBNTBCLEVBQU9rMUIsaUJBQW1CLFNBQVNwTixFQUFLdnhCLEVBQVU2WixFQUFTK2tCLEdBQ3pELEdBQUtyTixFQUFMLEVBaE9GLFNBQTRCQSxHQUUxQixJQURBLElBQUl3SyxFQUFXakIsRUFBa0J2SixFQUFLLENBQUMsTUFBTyxZQUFhbjBCLEVBQUksRUFDeEQyK0IsRUFBUzcrQixRQUFVRSxFQUFJMitCLEVBQVM3K0IsUUFBUSxDQUM3QyxJQUFJbXlCLEVBQUswTSxFQUFTMytCLEdBQ2R5aEMsRUFBaUJ4UCxFQUFHd00sYUFBYSxlQUFpQnhNLEVBQUd3TSxhQUFhLFFBRXRFLEdBQXVCLE9BQW5CZ0QsRUFDRixPQUdGLElBTWlDMU8sRUFDN0I5SSxFQUNBeVgsRUFDQWwvQixFQVRBbS9CLEVBQVFGLEVBQWV6Z0MsTUFBTSxHQUM3QmtCLEVBQUkrdkIsRUFBR3dNLGFBQWEsTUFBUSxFQUM1QmpvQixFQUFJeWIsRUFBR3dNLGFBQWEsTUFBUSxFQUM1Qm1ELEVBQU1sRCxFQUFZdkssRUFBS3dOLEdBQU9MLFdBQVUsR0FDeENPLEdBQWdCRCxFQUFJbkQsYUFBYSxjQUFnQixJQUFNLGNBQWdCdjhCLEVBQUksS0FBT3NVLEVBQUksSUFFdEZzckIsRUFBWW5ELEVBQVM3K0IsT0FJckIrYSxFQUFZeE8sRUFBTzBELE1BR3ZCLEdBREFnd0IsRUFBc0I2QixHQUNsQixTQUFTN2dDLEtBQUs2Z0MsRUFBSWhFLFVBQVcsQ0FDL0IsSUFBSW1FLEVBQU1ILEVBQUl4TixjQUFjeU0sZ0JBQWdCaG1CLEVBQVcsS0FDdkQsSUFBS29QLEVBQUksRUFBMkJ6bkIsR0FBeEJrL0IsRUFBUUUsRUFBSXhtQixZQUF3QnRiLE9BQVFtcUIsRUFBSXpuQixFQUFLeW5CLElBQy9EOEksRUFBTzJPLEVBQU1oaUMsS0FBS3VxQixHQUNsQjhYLEVBQUlDLGVBQWVubkIsRUFBV2tZLEVBQUs2SyxTQUFVN0ssRUFBS2tQLFdBR3BELEtBQU9MLEVBQUlkLFlBQ1RpQixFQUFJM2xCLFlBQVl3bEIsRUFBSWQsWUFFdEJjLEVBQU1HLENBQ1IsQ0FFQSxJQUFLOVgsRUFBSSxFQUEwQnpuQixHQUF2QmsvQixFQUFRelAsRUFBRzdXLFlBQXdCdGIsT0FBUW1xQixFQUFJem5CLEVBQUt5bkIsSUFFeEMsT0FEdEI4SSxFQUFPMk8sRUFBTWhpQyxLQUFLdXFCLElBQ1QyVCxVQUFzQyxNQUFsQjdLLEVBQUs2SyxVQUNkLGVBQWxCN0ssRUFBSzZLLFVBQStDLFNBQWxCN0ssRUFBSzZLLFdBSW5CLGNBQWxCN0ssRUFBSzZLLFNBQ1BpRSxFQUFlOU8sRUFBS2tQLFVBQVksSUFBTUosRUFHdENELEVBQUl4UCxhQUFhVyxFQUFLNkssU0FBVTdLLEVBQUtrUCxZQUl6Q0wsRUFBSXhQLGFBQWEsWUFBYXlQLEdBQzlCRCxFQUFJeFAsYUFBYSxzQkFBdUIsS0FDeEN3UCxFQUFJaEIsZ0JBQWdCLE1BQ1AzTyxFQUFHM1YsV0FDTHlYLGFBQWE2TixFQUFLM1AsR0FFekIwTSxFQUFTNytCLFNBQVdnaUMsR0FDdEI5aEMsR0FFSixDQUNGLENBdUtFa2lDLENBQW1CL04sR0FFbkIsSUFBcUNuMEIsRUFBR3dDLEVBQXBDMi9CLEVBQVU5MUIsRUFBT2hLLE9BQU8rL0IsUUFDeEJ6aEMsRUFBVW8vQixFQUFzQjVMLEdBQ2hDa08sRUFBY2gyQixFQUFPd0YsS0FBSzhmLFFBQVF3QyxFQUFJNEoscUJBQXFCLE1BSS9ELEdBSEFwOUIsRUFBUTZhLFlBQWNnbUIsR0FBa0JBLEVBQWVobUIsWUFDdkQ3YSxFQUFRd2hDLE9BQVNBLEVBRVUsSUFBdkJFLEVBQVl2aUMsUUFBZ0J1TSxFQUFPZ0QsYUFBYyxDQUluRCxJQUFJdWpCLEVBQU0sR0FDVixJQUFLNXlCLEVBQUksRUFBR3dDLEdBRlo2L0IsRUFBY2xPLEVBQUltTyxZQUFZLHdCQUVBeGlDLE9BQVFFLEVBQUl3QyxFQUFLeEMsSUFDN0M0eUIsRUFBSTV5QixHQUFLcWlDLEVBQVlyaUMsR0FFdkJxaUMsRUFBY3pQLENBQ2hCLENBRUEsSUFBSWxWLEVBQVcya0IsRUFBWTV2QixRQUFPLFNBQVN3ZixHQUV6QyxPQURBOE4sRUFBc0I5TixHQUNmNWxCLEVBQU91eUIsc0JBQXNCNzlCLEtBQUtreEIsRUFBRzJMLFNBQVN6OEIsUUFBUSxPQUFRLE9BaER6RSxTQUFpQzB1QixFQUFTK04sR0FDeEMsS0FBTy9OLElBQVlBLEVBQVVBLEVBQVF2VCxhQUNuQyxHQUFJdVQsRUFBUStOLFVBQVlBLEVBQVM3OEIsS0FBSzh1QixFQUFRK04sU0FBU3o4QixRQUFRLE9BQVEsT0FDakUwdUIsRUFBUTRPLGFBQWEsdUJBQ3pCLE9BQU8sRUFHWCxPQUFPLENBQ1QsQ0F5Q1c4RCxDQUF3QnRRLEVBQUk1bEIsRUFBT3l5Qix5QkFDNUMsSUFDQSxJQUFLcGhCLEdBQWFBLElBQWFBLEVBQVM1ZCxPQUN0QzhDLEdBQVlBLEVBQVMsR0FBSSxDQUFDLE9BRDVCLENBSUEsSUFBSXM4QixFQUFZLENBQUUsRUFDbEJtRCxFQUFZNXZCLFFBQU8sU0FBU3dmLEdBQzFCLE1BQTJDLGFBQXBDQSxFQUFHMkwsU0FBU3o4QixRQUFRLE9BQVEsR0FDckMsSUFBR3dYLFNBQVEsU0FBU3NaLEdBQ2xCLElBQUk5eUIsRUFBSzh5QixFQUFHd00sYUFBYSxNQUN6QlMsRUFBVS8vQixHQUFNa04sRUFBT3dGLEtBQUs4ZixRQUFRTSxFQUFHOEwscUJBQXFCLE1BQU10ckIsUUFBTyxTQUFTd2YsR0FDaEYsT0FBTzVsQixFQUFPdXlCLHNCQUFzQjc5QixLQUFLa3hCLEVBQUcyTCxTQUFTejhCLFFBQVEsT0FBUSxJQUN2RSxHQUNGLElBQ0FrTCxFQUFPNHlCLGFBQWFrRCxHQUFVOTFCLEVBQU9tMkIsZ0JBQWdCck8sR0FDckQ5bkIsRUFBTzJ5QixTQUFTbUQsR0FBVTkxQixFQUFPbzJCLFlBQVl0TyxHQUM3QzluQixFQUFPNnlCLFVBQVVpRCxHQUFVakQsRUFFM0I3eUIsRUFBT3EyQixjQUFjaGxCLEdBQVUsU0FBU2lsQixFQUFXamxCLEdBQzdDOWEsSUFDRkEsRUFBUysvQixFQUFXaGlDLEVBQVMrYyxFQUFVMmtCLFVBQ2hDaDJCLEVBQU80eUIsYUFBYWtELFVBQ3BCOTFCLEVBQU8yeUIsU0FBU21ELFVBQ2hCOTFCLEVBQU82eUIsVUFBVWlELEdBRTVCLEdBQUdqMkIsRUFBTXZMLEdBQVU4YixFQUFTK2tCLEVBckI1QixDQTdCQSxDQW1ERixFQXdCQSxJQUFJb0IsRUFBb0IsSUFBSS9ZLE9BQzFCLHFIQUVFeGQsRUFBT29ELE1BQ1QsMkNBQTZDcEQsRUFBT29ELE1BQVEsZUFFOURnZSxFQUFPcGhCLEVBQVEsQ0FTYncyQixxQkFBc0IsU0FBUzU3QixFQUFPNjdCLEdBQ3BDLElBQUl4WixFQUFRcmlCLEVBQU1xaUIsTUFBTXNaLEdBRXhCLEdBQUt0WixFQUFMLENBR0EsSUFBSXlaLEVBQVl6WixFQUFNLEdBR2xCMFosRUFBYTFaLEVBQU0sR0FDbkJoUCxFQUFXZ1AsRUFBTSxHQUNqQjJaLEVBQWEzWixFQUFNLEdBQ25CekksRUFBYXlJLEVBQU0sR0FFbkJ5WixJQUNGRCxFQUFPQyxVQUFZQSxHQUVqQkMsSUFDRkYsRUFBT0UsV0FBYTdZLE1BQU1oUSxXQUFXNm9CLElBQWVBLEVBQWE3b0IsV0FBVzZvQixJQUUxRTFvQixJQUNGd29CLEVBQU94b0IsU0FBV0QsRUFBVUMsSUFFMUJ1RyxJQUNGaWlCLEVBQU9qaUIsV0FBYUEsR0FFbEJvaUIsSUFDRkgsRUFBT0csV0FBNEIsV0FBZkEsRUFBMEIsRUFBSUEsRUF0QnBELENBd0JGLEVBVUFULGdCQUFpQixTQUFTck8sR0FDeEIsSUFNSWxDLEVBREFpUixFQUFTeEYsRUFBa0J2SixFQUxoQixDQUNULGlCQUNBLGlCQUNBLHFCQUNBLHVCQUVFbEssRUFBSSxFQUFHZ1YsRUFBZSxDQUFFLEVBRWhDLElBREFoVixFQUFJaVosRUFBT3BqQyxPQUNKbXFCLE1BQ0xnSSxFQUFLaVIsRUFBT2paLElBQ0x3VSxhQUFhLGVBQ2xCc0MsRUFBK0I1TSxFQUFLbEMsR0FFdENnTixFQUFhaE4sRUFBR3dNLGFBQWEsT0FBU3hNLEVBRXhDLE9BQU9nTixDQUNULEVBV0FrRSxnQkFBaUIsU0FBU3RULEVBQVN6VSxFQUFZK21CLEdBRTdDLEdBQUt0UyxFQUFMLENBSUEsSUFBSTVvQixFQUVBcVQsRUFBVThvQixFQURWaEcsRUFBbUIsQ0FBRSxPQUdILElBQVgrRSxJQUNUQSxFQUFTdFMsRUFBUTRPLGFBQWEsV0FHNUI1TyxFQUFRdlQsWUFBY2pRLEVBQU8weUIscUJBQXFCaCtCLEtBQUs4dUIsRUFBUXZULFdBQVdzaEIsWUFDNUVSLEVBQW1CL3dCLEVBQU84MkIsZ0JBQWdCdFQsRUFBUXZULFdBQVlsQixFQUFZK21CLElBRzVFLElBQUlrQixFQUFnQmpvQixFQUFXL0csUUFBTyxTQUFTQyxFQUFNeWUsR0FLbkQsT0FKQTlyQixFQUFRNG9CLEVBQVE0TyxhQUFhMUwsTUFFM0J6ZSxFQUFLeWUsR0FBUTlyQixHQUVScU4sQ0FDVCxHQUFHLENBQUUsR0FHRGd2QixFQUFXN1YsRUE5ZW5CLFNBQW1Db0MsRUFBU3NTLEdBQzFDLElBQUloUixFQUFTLENBQUUsRUFDZixJQUFLLElBQUlvUyxLQUFRbDNCLEVBQU8yeUIsU0FBU21ELEdBQy9CLEdBQUluRSxFQUFtQm5PLEVBQVMwVCxFQUFLam9CLE1BQU0sTUFDekMsSUFBSyxJQUFJekcsS0FBWXhJLEVBQU8yeUIsU0FBU21ELEdBQVFvQixHQUMzQ3BTLEVBQU90YyxHQUFZeEksRUFBTzJ5QixTQUFTbUQsR0FBUW9CLEdBQU0xdUIsR0FJdkQsT0FBT3NjLENBQ1QsQ0FxZU1xUyxDQUEwQjNULEVBQVNzUyxHQUNuQzkxQixFQUFPbzNCLG9CQUFvQjVULElBRTdCd1QsRUFBZ0I1VixFQUNkNFYsRUFDQUMsR0FFRUEsRUFBU3JHLElBQ1hwTixFQUFRdUMsYUFBYTZLLEVBQU9xRyxFQUFTckcsSUFFdkMzaUIsRUFBVzhvQixFQUFpQmhHLEVBQWlCOWlCLFVBQVlqTyxFQUFPb08sS0FBS0Msc0JBQ2pFMm9CLEVBQWNyRyxLQUVoQnFHLEVBQWNyRyxHQUFTMWlCLEVBQVdELEVBQVVncEIsRUFBY3JHLEdBQVFvRyxJQUdwRSxJQUFJTSxFQUFnQkMsRUFBaUJDLEVBQWtCLENBQUMsRUFDeEQsSUFBSyxJQUFJN1EsS0FBUXNRLEVBRWZNLEVBQWtCeEcsRUFEbEJ1RyxFQUFpQnhHLEVBQWNuSyxHQUNrQnNRLEVBQWN0USxHQUFPcUssRUFBa0I5aUIsR0FDeEZzcEIsRUFBZ0JGLEdBQWtCQyxFQUVoQ0MsR0FBbUJBLEVBQWdCQyxNQUNyQ3gzQixFQUFPdzJCLHFCQUFxQmUsRUFBZ0JDLEtBQU1ELEdBRXBELElBQUlFLEVBQWNyVyxFQUFPMlAsRUFBa0J3RyxHQUMzQyxPQUFPdjNCLEVBQU8weUIscUJBQXFCaCtCLEtBQUs4dUIsRUFBUStOLFVBQVlrRyxFQXp1QmhFLFNBQStCMW9CLEdBQzdCLElBQUssSUFBSTJYLEtBQVErSixFQUVmLFFBQWlELElBQXRDMWhCLEVBQVcwaEIsRUFBZ0IvSixLQUErQyxLQUFyQjNYLEVBQVcyWCxHQUEzRSxDQUlBLFFBQWdDLElBQXJCM1gsRUFBVzJYLEdBQXVCLENBQzNDLElBQUsxbUIsRUFBT2hLLE9BQU9DLFVBQVV5d0IsR0FDM0IsU0FFRjNYLEVBQVcyWCxHQUFRMW1CLEVBQU9oSyxPQUFPQyxVQUFVeXdCLEVBQzdDLENBRUEsR0FBeUMsSUFBckMzWCxFQUFXMlgsR0FBTW5oQixRQUFRLFFBQTdCLENBSUEsSUFBSWlvQixFQUFRLElBQUl4dEIsRUFBTzZ0QixNQUFNOWUsRUFBVzJYLElBQ3hDM1gsRUFBVzJYLEdBQVE4RyxFQUFNa0ssU0FBUzUzQixFQUFRMHRCLEVBQU1tSyxXQUFhNW9CLEVBQVcwaEIsRUFBZ0IvSixJQUFRLElBQUlrUixRQUhwRyxDQVhBLENBZ0JGLE9BQU83b0IsQ0FDVCxDQW10QjhFOG9CLENBQXNCSixFQWxEaEcsQ0FtREYsRUFXQXBCLGNBQWUsU0FBU2hsQixFQUFVOWEsRUFBVWpDLEVBQVM4YixFQUFTK2tCLEdBQzVELElBQUluMUIsRUFBTzgzQixlQUFlem1CLEVBQVU5YSxFQUFVakMsRUFBUzhiLEVBQVMra0IsR0FBZ0I0QyxPQUNsRixFQVNBWCxvQkFBcUIsU0FBUzVULEdBQzVCLElBQUlpVCxFQUFTLENBQUUsRUFDWDVtQixFQUFRMlQsRUFBUTRPLGFBQWEsU0FFakMsT0FBS3ZpQixHQUlnQixpQkFBVkEsRUF4a0JmLFNBQTBCQSxFQUFPNG1CLEdBQy9CLElBQUkvUCxFQUFNOXJCLEVBQ1ZpVixFQUFNL2EsUUFBUSxRQUFTLElBQUltYSxNQUFNLEtBQUszQyxTQUFRLFNBQVUwckIsR0FDdEQsSUFBSUMsRUFBT0QsRUFBTS9vQixNQUFNLEtBRXZCeVgsRUFBT3VSLEVBQUssR0FBR3ZhLE9BQU9qSixjQUN0QjdaLEVBQVNxOUIsRUFBSyxHQUFHdmEsT0FFakIrWSxFQUFPL1AsR0FBUTlyQixDQUNqQixHQUNGLENBK2pCTXM5QixDQUFpQnJvQixFQUFPNG1CLEdBMWpCOUIsU0FBMEI1bUIsRUFBTzRtQixHQUMvQixJQUFJL1AsRUFBTTlyQixFQUNWLElBQUssSUFBSXlMLEtBQVF3SixPQUNZLElBQWhCQSxFQUFNeEosS0FJakJxZ0IsRUFBT3JnQixFQUFLb08sY0FDWjdaLEVBQVFpVixFQUFNeEosR0FFZG93QixFQUFPL1AsR0FBUTlyQixFQUVuQixDQWlqQk11OUIsQ0FBaUJ0b0IsRUFBTzRtQixHQUduQkEsR0FWRUEsQ0FXWCxFQVNBMkIscUJBQXNCLFNBQVN6c0IsR0FHN0IsSUFBS0EsRUFDSCxPQUFPLEtBT1QsSUFBdUJoWSxFQUFHd0MsRUFBdEJraUMsRUFBZSxHQUVuQixJQUFLMWtDLEVBQUksRUFBR3dDLEdBSFp3VixHQUZBQSxFQUFTQSxFQUFPN1csUUFBUSxLQUFNLEtBQUs0b0IsUUFFbkJ6TyxNQUFNLFFBR0d4YixPQUFRRSxFQUFJd0MsRUFBS3hDLEdBQUssRUFDN0Mwa0MsRUFBYXpsQyxLQUFLLENBQ2hCaUQsRUFBR2lZLFdBQVduQyxFQUFPaFksSUFDckJ3VyxFQUFHMkQsV0FBV25DLEVBQU9oWSxFQUFJLE1BUzdCLE9BQU8wa0MsQ0FDVCxFQVVBakMsWUFBYSxTQUFTdE8sR0FDcEIsSUFBZ0RuMEIsRUFBR3dDLEVBQS9DMnVCLEVBQVNnRCxFQUFJNEoscUJBQXFCLFNBQ2xDNEcsRUFBVyxDQUFFLEVBR2pCLElBQUsza0MsRUFBSSxFQUFHd0MsRUFBTTJ1QixFQUFPcnhCLE9BQVFFLEVBQUl3QyxFQUFLeEMsSUFBSyxDQUM3QyxJQUFJNGtDLEVBQWdCelQsRUFBT254QixHQUFHNmtDLFlBSUQsTUFEN0JELEVBQWdCQSxFQUFjempDLFFBQVEsb0JBQXFCLEtBQ3pDNG9CLFFBS1Y2YSxFQUFjdHBCLE1BQU0sS0FFZDdJLFFBQU8sU0FBUzh3QixHQUFRLE9BQU9BLEVBQUt4WixNQUFRLElBR3BEcFIsU0FBUSxTQUFTNHFCLEdBRXJCLElBQUlqYSxFQUFRaWEsRUFBS2pvQixNQUFNLEtBQ25Cd3BCLEVBQVUsQ0FBRSxFQUNaQyxFQUQ2QnpiLEVBQU0sR0FBR1MsT0FDTHpPLE1BQU0sS0FBSzdJLFFBQU8sU0FBUzZ4QixHQUFRLE9BQU9BLEVBQUt2YSxNQUFRLElBRTVGLElBQUsvcEIsRUFBSSxFQUFHd0MsRUFBTXVpQyxFQUFtQmpsQyxPQUFRRSxFQUFJd0MsRUFBS3hDLElBQUssQ0FDekQsSUFBSXNrQyxFQUFPUyxFQUFtQi9rQyxHQUFHc2IsTUFBTSxLQUNuQ3pHLEVBQVd5dkIsRUFBSyxHQUFHdmEsT0FDbkI5aUIsRUFBUXE5QixFQUFLLEdBQUd2YSxPQUNwQithLEVBQVFqd0IsR0FBWTVOLENBQ3RCLEVBQ0FzOEIsRUFBT2phLEVBQU0sR0FBR1MsUUFDWHpPLE1BQU0sS0FBSzNDLFNBQVEsU0FBU3FzQixHQUVqQixNQURkQSxFQUFRQSxFQUFNN2pDLFFBQVEsUUFBUyxJQUFJNG9CLFVBSS9CNGEsRUFBU0ssR0FDWDM0QixFQUFPd0YsS0FBS3pNLE9BQU9xb0IsT0FBT2tYLEVBQVNLLEdBQVFGLEdBRzNDSCxFQUFTSyxHQUFTMzRCLEVBQU93RixLQUFLek0sT0FBTzhHLE1BQU00NEIsR0FFL0MsR0FDRixHQUNGLENBQ0EsT0FBT0gsQ0FDVCxFQVlBTSxlQUFnQixTQUFTdmtDLEVBQUtrQyxFQUFVNlosRUFBUzliLEdBRS9DRCxFQUFNQSxFQUFJUyxRQUFRLFNBQVUsSUFBSTRvQixPQUNoQyxJQUFJMWQsRUFBT3dGLEtBQUs0akIsUUFBUS8wQixFQUFLLENBQzNCNHNCLE9BQVEsTUFDUm9JLFdBR0YsU0FBb0IxYixHQUVsQixJQUFJa3JCLEVBQU1sckIsRUFBRW1yQixZQUNaLElBQUtELElBQVFBLEVBQUk1UyxnQkFFZixPQURBMXZCLEdBQVlBLEVBQVMsT0FDZCxFQUdUeUosRUFBT2sxQixpQkFBaUIyRCxFQUFJNVMsaUJBQWlCLFNBQVU4UyxFQUFTQyxFQUFVM25CLEVBQVU0bkIsR0FDbEYxaUMsR0FBWUEsRUFBU3dpQyxFQUFTQyxFQUFVM25CLEVBQVU0bkIsRUFDcEQsR0FBRzdvQixFQUFTOWIsRUFDZCxHQUNGLEVBV0E0a0Msa0JBQW1CLFNBQVN6cUIsRUFBUWxZLEVBQVU2WixFQUFTOWIsR0FDckQsSUFDSXd6QixHQURTLElBQUk5bkIsRUFBT25KLE9BQU9pSyxXQUNkcTRCLGdCQUFnQjFxQixFQUFPaVAsT0FBUSxZQUNoRDFkLEVBQU9rMUIsaUJBQWlCcE4sRUFBSTdCLGlCQUFpQixTQUFVOFMsRUFBU0MsRUFBVTNuQixFQUFVNG5CLEdBQ2xGMWlDLEVBQVN3aUMsRUFBU0MsRUFBVTNuQixFQUFVNG5CLEVBQ3hDLEdBQUc3b0IsRUFBUzliLEVBQ2QsR0FHSCxDQWprQ0QsQ0Fpa0NvQ3ZCLEdBR3BDaU4sRUFBTzgzQixlQUFpQixTQUFTem1CLEVBQVU5YSxFQUFVakMsRUFBUzhiLEVBQVMra0IsRUFBZ0JyTixHQUNyRjMwQixLQUFLa2UsU0FBV0EsRUFDaEJsZSxLQUFLb0QsU0FBV0EsRUFDaEJwRCxLQUFLbUIsUUFBVUEsRUFDZm5CLEtBQUtpZCxRQUFVQSxFQUNmamQsS0FBSzJpQyxPQUFVeGhDLEdBQVdBLEVBQVF3aEMsUUFBVyxFQUM3QzNpQyxLQUFLZ2lDLGVBQWlCQSxFQUN0QmhpQyxLQUFLaW1DLFNBQVcsK0JBQ2hCam1DLEtBQUsyMEIsSUFBTUEsQ0FDYixHQUVVdm9CLEVBNElQUyxFQUFPODNCLGVBQWU3aEMsV0EzSWpCOGhDLE1BQVEsV0FDWjVrQyxLQUFLbWpDLFVBQVksSUFBSXZnQyxNQUFNNUMsS0FBS2tlLFNBQVM1ZCxRQUN6Q04sS0FBS2ttQyxZQUFjbG1DLEtBQUtrZSxTQUFTNWQsT0FDakNOLEtBQUttbUMsZUFDUCxFQUVBLzVCLEVBQU0rNUIsY0FBZ0IsV0FDcEIsSUFBSXRXLEVBQVE3dkIsS0FDWkEsS0FBS2tlLFNBQVMvRSxTQUFRLFNBQVNrWCxFQUFTN3ZCLEdBQ3RDNnZCLEVBQVF1QyxhQUFhLFNBQVUvQyxFQUFNOFMsUUFDckM5UyxFQUFNdVcsYUFBYS9WLEVBQVM3dkIsRUFDOUIsR0FDRixFQUVBNEwsRUFBTWk2QixRQUFVLFNBQVM1VCxHQUN2QixPQUFPNWxCLEVBQU9BLEVBQU93RixLQUFLaUosT0FBT3FULFdBQVc4RCxFQUFHRCxRQUFRN3dCLFFBQVEsT0FBUSxLQUN6RSxFQUVBeUssRUFBTWc2QixhQUFlLFNBQVMzVCxFQUFJOWUsR0FDaEMsSUFBSTBiLEVBQVFydkIsS0FBS3FtQyxRQUFRNVQsR0FDekIsR0FBSXBELEdBQVNBLEVBQU1pWCxZQUNqQixJQUNFalgsRUFBTWlYLFlBQVk3VCxFQUFJenlCLEtBQUt1bUMsZUFBZTV5QixFQUFPOGUsR0FBS3p5QixLQUFLbUIsUUFJN0QsQ0FGQSxNQUFPbXhCLEdBQ0x6bEIsRUFBTzZFLElBQUk0Z0IsRUFDYixNQUdBdHlCLEtBQUt3bUMsYUFFVCxFQUVBcDZCLEVBQU1tNkIsZUFBaUIsU0FBUzV5QixFQUFPOGUsR0FDckMsSUFBSTVDLEVBQVE3dkIsS0FDWixPQUFPLFNBQVMyVSxHQUNkLElBQUlreEIsRUFDSmhXLEVBQU00VyxnQkFBZ0I5eEIsRUFBSzhkLEVBQUksUUFDL0I1QyxFQUFNNFcsZ0JBQWdCOXhCLEVBQUs4ZCxFQUFJLFVBQzNCOWQsYUFBZTlILEVBQU82NUIsT0FBUy94QixFQUFJZ3lCLG1CQUNyQ2QsRUFBV2x4QixFQUFJaU0sa0NBQWtDNlIsSUFFbkQ5ZCxFQUFJaXlCLHVCQUF1QmYsR0FDM0JoVyxFQUFNZ1gsZ0JBQWdCbHlCLEVBQUs4ZCxHQUMzQjVDLEVBQU01UyxTQUFXNFMsRUFBTTVTLFFBQVF3VixFQUFJOWQsR0FDbkNrYixFQUFNc1QsVUFBVXh2QixHQUFTZ0IsRUFDekJrYixFQUFNMlcsYUFDUixDQUNGLEVBRUFwNkIsRUFBTTA2QiwwQkFBNEIsU0FBU255QixFQUFLVSxFQUFVMHhCLEdBQ3hELElBQUl0L0IsRUFBUWtOLEVBQUlVLEdBQVcyeEIsRUFBUWhuQyxLQUFLaW1DLFNBQ3hDLEdBQUtlLEVBQU16bEMsS0FBS2tHLEdBQWhCLENBR0F1L0IsRUFBTUMsVUFBWSxFQUNsQixJQUFJdG5DLEVBQUtxbkMsRUFBTWhzQixLQUFLdlQsR0FBTyxHQUUzQixPQURBdS9CLEVBQU1DLFVBQVksRUFDWHA2QixFQUFPazZCLEdBQVMvbUMsS0FBSzJpQyxRQUFRaGpDLEVBSnBDLENBS0YsRUFFQXlNLEVBQU1xNkIsZ0JBQWtCLFNBQVM5eEIsRUFBSzhkLEVBQUlwZCxHQUN4QyxJQUFJNnhCLEVBQWNsbkMsS0FBSzhtQywwQkFBMEJueUIsRUFBS1UsRUFBVSxnQkFDaEUsR0FBSTZ4QixFQUFhLENBQ2YsSUFBSUMsRUFBYzFVLEVBQUd3TSxhQUFhNXBCLEVBQVcsWUFDekNtc0IsRUFBVzMwQixFQUFPMEksU0FBUyt3QixZQUFZWSxFQUFhdnlCLEVBQUt3eUIsRUFBYW5uQyxLQUFLbUIsU0FDL0V3VCxFQUFJTyxJQUFJRyxFQUFVbXNCLEVBQ3BCLENBQ0YsRUFFQXAxQixFQUFNZzdCLHVCQUF5QixTQUFTenlCLEVBQUsweUIsR0FDM0MsT0FBTyxTQUFTQyxHQUNkQSxFQUFRVix5QkFDUlUsRUFBUUMsU0FBV0QsRUFBUUUsU0FDM0JILEVBQVU1bkMsS0FBSzZuQyxFQUNqQixDQUNGLEVBRUFsN0IsRUFBTXk2QixnQkFBa0IsU0FBU2x5QixFQUFLOHlCLEdBQ3BDLElBQ0lwWCxFQUFnQnFYLEVBQWlCTCxFQUFXTSxFQUQ1Q3prQixFQUFXbGpCLEtBQUs4bUMsMEJBQTBCbnlCLEVBQUssV0FBWSxhQUUvRCxHQUFJdU8sRUFBVSxDQUNabWtCLEVBQVksR0FDWkssRUFBa0I3NkIsRUFBT3dGLEtBQUtrSSxnQkFBZ0I1RixFQUFJc08sdUJBSWxELElBRkEsSUFBSTJrQixFQUFjMWtCLEVBQVMsR0FBR3BHLFdBQzFCK3FCLEVBQWdCSixFQUNiSSxFQUFjL3FCLFlBQWMrcUIsRUFBYzVJLGFBQWEsZUFBaUJ0cUIsRUFBSXVPLFVBQ2pGMmtCLEVBQWdCQSxFQUFjL3FCLFdBRWhDK3FCLEVBQWMvcUIsV0FBV0YsWUFBWWdyQixHQUNyQyxJQUFLLElBQUlwbkMsRUFBSSxFQUFHQSxFQUFJMGlCLEVBQVM1aUIsT0FBUUUsSUFDbkM2dkIsRUFBVW5OLEVBQVMxaUIsR0FDWFIsS0FBS3FtQyxRQUFRaFcsR0FDZmlXLFlBQ0pqVyxFQUNBcndCLEtBQUtvbkMsdUJBQXVCenlCLEVBQUsweUIsR0FDakNybkMsS0FBS21CLFNBSVAraEIsRUFEdUIsSUFBckJta0IsRUFBVS9tQyxPQUNEK21DLEVBQVUsR0FHVixJQUFJeDZCLEVBQU93UixNQUFNZ3BCLEdBRTlCTSxFQUFhOTZCLEVBQU93RixLQUFLNE0sMEJBQ3ZCeW9CLEVBQ0F4a0IsRUFBU0QsdUJBRVBDLEVBQVNBLFVBQ1hsakIsS0FBSzZtQyxnQkFBZ0IzakIsRUFBVTJrQixHQUVqQyxJQUFJMW1DLEVBQVUwTCxFQUFPd0YsS0FBSzhNLFlBQVl3b0IsR0FDdEN6a0IsRUFBU3JELE9BQVEsRUFDakJxRCxFQUFTcEQsT0FBUSxFQUNqQm9ELEVBQVNoTyxJQUFJLFNBQVUvVCxFQUFRNFgsUUFDL0JtSyxFQUFTaE8sSUFBSSxTQUFVL1QsRUFBUTZYLFFBQy9Ca0ssRUFBU2pOLE1BQVE5VSxFQUFROFUsTUFDekJpTixFQUFTN0QsTUFBUWxlLEVBQVFrZSxNQUN6QjZELEVBQVM1RCxNQUFRLEVBQ2pCNEQsRUFBU1Ysb0JBQW9CLENBQUU5ZixFQUFHdkIsRUFBUW9lLFdBQVl2SSxFQUFHN1YsRUFBUXFlLFlBQWMsU0FBVSxVQUN6RjdLLEVBQUl1TyxTQUFXQSxDQUNqQixhQUdTdk8sRUFBSXVPLFFBRWYsRUFFQTlXLEVBQU1vNkIsWUFBYyxXQUNTLEtBQXJCeG1DLEtBQUtrbUMsY0FDVGxtQyxLQUFLbWpDLFVBQVluakMsS0FBS21qQyxVQUFVbHdCLFFBQU8sU0FBU3dmLEdBRTlDLE9BQWEsTUFBTkEsQ0FDVCxJQUNBenlCLEtBQUtvRCxTQUFTcEQsS0FBS21qQyxVQUFXbmpDLEtBQUtrZSxVQUV2QyxFQUlGLFNBQVUzUyxHQUVSLGFBSUEsSUFBSXNCLEVBQVN0QixFQUFPc0IsU0FBV3RCLEVBQU9zQixPQUFTLENBQUUsR0FrQmpELFNBQVNrSyxFQUFNclUsRUFBR3NVLEdBQ2hCaFgsS0FBSzBDLEVBQUlBLEVBQ1QxQyxLQUFLZ1gsRUFBSUEsQ0FDWCxDQW5CSW5LLEVBQU9rSyxNQUNUbEssRUFBT2dxQixLQUFLLG9DQUlkaHFCLEVBQU9rSyxNQUFRQSxFQWdCZkEsRUFBTWpVLFVBQWlELENBRXJEc0YsS0FBTSxRQUVObEQsWUFBYTZSLEVBT2J6RCxJQUFLLFNBQVV3MEIsR0FDYixPQUFPLElBQUkvd0IsRUFBTS9XLEtBQUswQyxFQUFJb2xDLEVBQUtwbEMsRUFBRzFDLEtBQUtnWCxFQUFJOHdCLEVBQUs5d0IsRUFDbEQsRUFRQUcsVUFBVyxTQUFVMndCLEdBR25CLE9BRkE5bkMsS0FBSzBDLEdBQUtvbEMsRUFBS3BsQyxFQUNmMUMsS0FBS2dYLEdBQUs4d0IsRUFBSzl3QixFQUNSaFgsSUFDVCxFQU9BK25DLFVBQVcsU0FBVTd1QixHQUNuQixPQUFPLElBQUluQyxFQUFNL1csS0FBSzBDLEVBQUl3VyxFQUFRbFosS0FBS2dYLEVBQUlrQyxFQUM3QyxFQVFBOHVCLGdCQUFpQixTQUFVOXVCLEdBR3pCLE9BRkFsWixLQUFLMEMsR0FBS3dXLEVBQ1ZsWixLQUFLZ1gsR0FBS2tDLEVBQ0hsWixJQUNULEVBT0EwWixTQUFVLFNBQVVvdUIsR0FDbEIsT0FBTyxJQUFJL3dCLEVBQU0vVyxLQUFLMEMsRUFBSW9sQyxFQUFLcGxDLEVBQUcxQyxLQUFLZ1gsRUFBSTh3QixFQUFLOXdCLEVBQ2xELEVBUUFpeEIsZUFBZ0IsU0FBVUgsR0FHeEIsT0FGQTluQyxLQUFLMEMsR0FBS29sQyxFQUFLcGxDLEVBQ2YxQyxLQUFLZ1gsR0FBSzh3QixFQUFLOXdCLEVBQ1JoWCxJQUNULEVBT0Frb0MsZUFBZ0IsU0FBVWh2QixHQUN4QixPQUFPLElBQUluQyxFQUFNL1csS0FBSzBDLEVBQUl3VyxFQUFRbFosS0FBS2dYLEVBQUlrQyxFQUM3QyxFQVFBaXZCLHFCQUFzQixTQUFVanZCLEdBRzlCLE9BRkFsWixLQUFLMEMsR0FBS3dXLEVBQ1ZsWixLQUFLZ1gsR0FBS2tDLEVBQ0hsWixJQUNULEVBUUE4WCxTQUFVLFNBQVVvQixHQUNsQixPQUFPLElBQUluQyxFQUFNL1csS0FBSzBDLEVBQUl3VyxFQUFRbFosS0FBS2dYLEVBQUlrQyxFQUM3QyxFQVNBa3ZCLGVBQWdCLFNBQVVsdkIsR0FHeEIsT0FGQWxaLEtBQUswQyxHQUFLd1csRUFDVmxaLEtBQUtnWCxHQUFLa0MsRUFDSGxaLElBQ1QsRUFRQXFvQyxPQUFRLFNBQVVudkIsR0FDaEIsT0FBTyxJQUFJbkMsRUFBTS9XLEtBQUswQyxFQUFJd1csRUFBUWxaLEtBQUtnWCxFQUFJa0MsRUFDN0MsRUFTQW92QixhQUFjLFNBQVVwdkIsR0FHdEIsT0FGQWxaLEtBQUswQyxHQUFLd1csRUFDVmxaLEtBQUtnWCxHQUFLa0MsRUFDSGxaLElBQ1QsRUFPQTRyQixHQUFJLFNBQVVrYyxHQUNaLE9BQVE5bkMsS0FBSzBDLElBQU1vbEMsRUFBS3BsQyxHQUFLMUMsS0FBS2dYLElBQU04d0IsRUFBSzl3QixDQUMvQyxFQU9BdXhCLEdBQUksU0FBVVQsR0FDWixPQUFROW5DLEtBQUswQyxFQUFJb2xDLEVBQUtwbEMsR0FBSzFDLEtBQUtnWCxFQUFJOHdCLEVBQUs5d0IsQ0FDM0MsRUFPQXd4QixJQUFLLFNBQVVWLEdBQ2IsT0FBUTluQyxLQUFLMEMsR0FBS29sQyxFQUFLcGxDLEdBQUsxQyxLQUFLZ1gsR0FBSzh3QixFQUFLOXdCLENBQzdDLEVBUUF5eEIsR0FBSSxTQUFVWCxHQUNaLE9BQVE5bkMsS0FBSzBDLEVBQUlvbEMsRUFBS3BsQyxHQUFLMUMsS0FBS2dYLEVBQUk4d0IsRUFBSzl3QixDQUMzQyxFQU9BMHhCLElBQUssU0FBVVosR0FDYixPQUFROW5DLEtBQUswQyxHQUFLb2xDLEVBQUtwbEMsR0FBSzFDLEtBQUtnWCxHQUFLOHdCLEVBQUs5d0IsQ0FDN0MsRUFRQWlXLEtBQU0sU0FBVTZhLEVBQU1qdUIsR0FLcEIsWUFKaUIsSUFBTkEsSUFDVEEsRUFBSSxJQUVOQSxFQUFJOVMsS0FBS3VGLElBQUl2RixLQUFLc0YsSUFBSSxFQUFHd04sR0FBSSxHQUN0QixJQUFJOUMsRUFBTS9XLEtBQUswQyxHQUFLb2xDLEVBQUtwbEMsRUFBSTFDLEtBQUswQyxHQUFLbVgsRUFBRzdaLEtBQUtnWCxHQUFLOHdCLEVBQUs5d0IsRUFBSWhYLEtBQUtnWCxHQUFLNkMsRUFDaEYsRUFPQTh1QixhQUFjLFNBQVViLEdBQ3RCLElBQUljLEVBQUs1b0MsS0FBSzBDLEVBQUlvbEMsRUFBS3BsQyxFQUNuQm1tQyxFQUFLN29DLEtBQUtnWCxFQUFJOHdCLEVBQUs5d0IsRUFDdkIsT0FBT2pRLEtBQUt5RSxLQUFLbzlCLEVBQUtBLEVBQUtDLEVBQUtBLEVBQ2xDLEVBT0EvYyxhQUFjLFNBQVVnYyxHQUN0QixPQUFPOW5DLEtBQUtpdEIsS0FBSzZhLEVBQ25CLEVBT0F6N0IsSUFBSyxTQUFVeTdCLEdBQ2IsT0FBTyxJQUFJL3dCLEVBQU1oUSxLQUFLc0YsSUFBSXJNLEtBQUswQyxFQUFHb2xDLEVBQUtwbEMsR0FBSXFFLEtBQUtzRixJQUFJck0sS0FBS2dYLEVBQUc4d0IsRUFBSzl3QixHQUNuRSxFQU9BMUssSUFBSyxTQUFVdzdCLEdBQ2IsT0FBTyxJQUFJL3dCLEVBQU1oUSxLQUFLdUYsSUFBSXRNLEtBQUswQyxFQUFHb2xDLEVBQUtwbEMsR0FBSXFFLEtBQUt1RixJQUFJdE0sS0FBS2dYLEVBQUc4d0IsRUFBSzl3QixHQUNuRSxFQU1BalgsU0FBVSxXQUNSLE9BQU9DLEtBQUswQyxFQUFJLElBQU0xQyxLQUFLZ1gsQ0FDN0IsRUFRQTh4QixNQUFPLFNBQVVwbUMsRUFBR3NVLEdBR2xCLE9BRkFoWCxLQUFLMEMsRUFBSUEsRUFDVDFDLEtBQUtnWCxFQUFJQSxFQUNGaFgsSUFDVCxFQU9BK29DLEtBQU0sU0FBVXJtQyxHQUVkLE9BREExQyxLQUFLMEMsRUFBSUEsRUFDRjFDLElBQ1QsRUFPQWdwQyxLQUFNLFNBQVVoeUIsR0FFZCxPQURBaFgsS0FBS2dYLEVBQUlBLEVBQ0ZoWCxJQUNULEVBT0FpcEMsYUFBYyxTQUFVbkIsR0FHdEIsT0FGQTluQyxLQUFLMEMsRUFBSW9sQyxFQUFLcGxDLEVBQ2QxQyxLQUFLZ1gsRUFBSTh3QixFQUFLOXdCLEVBQ1BoWCxJQUNULEVBTUFrcEMsS0FBTSxTQUFVcEIsR0FDZCxJQUFJcGxDLEVBQUkxQyxLQUFLMEMsRUFDVHNVLEVBQUloWCxLQUFLZ1gsRUFDYmhYLEtBQUswQyxFQUFJb2xDLEVBQUtwbEMsRUFDZDFDLEtBQUtnWCxFQUFJOHdCLEVBQUs5d0IsRUFDZDh3QixFQUFLcGxDLEVBQUlBLEVBQ1RvbEMsRUFBSzl3QixFQUFJQSxDQUNYLEVBTUF0SyxNQUFPLFdBQ0wsT0FBTyxJQUFJcUssRUFBTS9XLEtBQUswQyxFQUFHMUMsS0FBS2dYLEVBQ2hDLEdBR0gsQ0FoVkQsQ0FnVm9DcFgsR0FHcEMsU0FBVTJMLEdBRVIsYUFHQSxJQUFJc0IsRUFBU3RCLEVBQU9zQixTQUFXdEIsRUFBT3NCLE9BQVMsQ0FBRSxHQWFqRCxTQUFTczhCLEVBQWFDLEdBQ3BCcHBDLEtBQUtvcEMsT0FBU0EsRUFDZHBwQyxLQUFLd1ksT0FBUyxFQUNoQixDQWRJM0wsRUFBT3M4QixhQUNUdDhCLEVBQU9ncUIsS0FBSywyQ0FlZGhxQixFQUFPczhCLGFBQWVBLEVBRXRCdDhCLEVBQU9zOEIsYUFBYXJtQyxVQUF3RCxDQUUxRW9DLFlBQWFpa0MsRUFRYkUsWUFBYSxTQUFVenlCLEdBRXJCLE9BREE1VyxLQUFLd1ksT0FBTy9ZLEtBQUttWCxHQUNWNVcsSUFDVCxFQVFBc3BDLGFBQWMsU0FBVTl3QixHQUV0QixPQURBeFksS0FBS3dZLE9BQVN4WSxLQUFLd1ksT0FBT25ZLE9BQU9tWSxHQUMxQnhZLElBQ1QsR0FhRjZNLEVBQU9zOEIsYUFBYUksa0JBQW9CLFNBQVVDLEVBQUlDLEVBQUlDLEVBQUlDLEdBQzVELElBQUloakIsRUFDQWlqQixHQUFPRCxFQUFHam5DLEVBQUlnbkMsRUFBR2huQyxJQUFNOG1DLEVBQUd4eUIsRUFBSTB5QixFQUFHMXlCLElBQU0yeUIsRUFBRzN5QixFQUFJMHlCLEVBQUcxeUIsSUFBTXd5QixFQUFHOW1DLEVBQUlnbkMsRUFBR2huQyxHQUNqRW1uQyxHQUFPSixFQUFHL21DLEVBQUk4bUMsRUFBRzltQyxJQUFNOG1DLEVBQUd4eUIsRUFBSTB5QixFQUFHMXlCLElBQU15eUIsRUFBR3p5QixFQUFJd3lCLEVBQUd4eUIsSUFBTXd5QixFQUFHOW1DLEVBQUlnbkMsRUFBR2huQyxHQUNqRW9uQyxHQUFNSCxFQUFHM3lCLEVBQUkweUIsRUFBRzF5QixJQUFNeXlCLEVBQUcvbUMsRUFBSThtQyxFQUFHOW1DLElBQU1pbkMsRUFBR2puQyxFQUFJZ25DLEVBQUdobkMsSUFBTSttQyxFQUFHenlCLEVBQUl3eUIsRUFBR3h5QixHQUNwRSxHQUFXLElBQVA4eUIsRUFBVSxDQUNaLElBQUlDLEVBQUtILEVBQU1FLEVBQ1hFLEVBQUtILEVBQU1DLEVBQ1gsR0FBS0MsR0FBTUEsR0FBTSxHQUFLLEdBQUtDLEdBQU1BLEdBQU0sR0FDekNyakIsRUFBUyxJQUFJd2lCLEVBQWEsaUJBQ25CRSxZQUFZLElBQUl4OEIsRUFBT2tLLE1BQU15eUIsRUFBRzltQyxFQUFJcW5DLEdBQU1OLEVBQUcvbUMsRUFBSThtQyxFQUFHOW1DLEdBQUk4bUMsRUFBR3h5QixFQUFJK3lCLEdBQU1OLEVBQUd6eUIsRUFBSXd5QixFQUFHeHlCLEtBR3RGMlAsRUFBUyxJQUFJd2lCLENBRWpCLE1BR0l4aUIsRUFBUyxJQUFJd2lCLEVBREgsSUFBUlMsR0FBcUIsSUFBUkMsRUFDVyxhQUdBLFlBRzlCLE9BQU9sakIsQ0FDVCxFQVlBOVosRUFBT3M4QixhQUFhYyxxQkFBdUIsU0FBU1QsRUFBSUMsRUFBSWp4QixHQUMxRCxJQUVJa3hCLEVBQUlDLEVBQUlPLEVBQU8xcEMsRUFGZm1tQixFQUFTLElBQUl3aUIsRUFDYjdvQyxFQUFTa1ksRUFBT2xZLE9BR3BCLElBQUtFLEVBQUksRUFBR0EsRUFBSUYsRUFBUUUsSUFDdEJrcEMsRUFBS2x4QixFQUFPaFksR0FDWm1wQyxFQUFLbnhCLEdBQVFoWSxFQUFJLEdBQUtGLEdBQ3RCNHBDLEVBQVFmLEVBQWFJLGtCQUFrQkMsRUFBSUMsRUFBSUMsRUFBSUMsR0FFbkRoakIsRUFBTzJpQixhQUFhWSxFQUFNMXhCLFFBSzVCLE9BSEltTyxFQUFPbk8sT0FBT2xZLE9BQVMsSUFDekJxbUIsRUFBT3lpQixPQUFTLGdCQUVYemlCLENBQ1QsRUFTQTlaLEVBQU9zOEIsYUFBYWdCLHdCQUEwQixTQUFVQyxFQUFTQyxHQUMvRCxJQUM2QjdwQyxFQUR6Qm1tQixFQUFTLElBQUl3aUIsRUFDYjdvQyxFQUFTOHBDLEVBQVE5cEMsT0FFckIsSUFBS0UsRUFBSSxFQUFHQSxFQUFJRixFQUFRRSxJQUFLLENBQzNCLElBQUlncEMsRUFBS1ksRUFBUTVwQyxHQUNiaXBDLEVBQUtXLEdBQVM1cEMsRUFBSSxHQUFLRixHQUN2QjRwQyxFQUFRZixFQUFhYyxxQkFBcUJULEVBQUlDLEVBQUlZLEdBRXREMWpCLEVBQU8yaUIsYUFBYVksRUFBTTF4QixPQUM1QixDQUlBLE9BSEltTyxFQUFPbk8sT0FBT2xZLE9BQVMsSUFDekJxbUIsRUFBT3lpQixPQUFTLGdCQUVYemlCLENBQ1QsRUFVQTlaLEVBQU9zOEIsYUFBYW1CLDBCQUE0QixTQUFVOXhCLEVBQVEreEIsRUFBSUMsR0FDcEUsSUFBSW4rQixFQUFNaytCLEVBQUdsK0IsSUFBSW0rQixHQUNibCtCLEVBQU1pK0IsRUFBR2orQixJQUFJaytCLEdBQ2JDLEVBQVcsSUFBSTU5QixFQUFPa0ssTUFBTXpLLEVBQUk1SixFQUFHMkosRUFBSTJLLEdBQ3ZDMHpCLEVBQWEsSUFBSTc5QixFQUFPa0ssTUFBTTFLLEVBQUkzSixFQUFHNEosRUFBSTBLLEdBQ3pDMnpCLEVBQVN4QixFQUFhYyxxQkFBcUI1OUIsRUFBS28rQixFQUFVanlCLEdBQzFEb3lCLEVBQVN6QixFQUFhYyxxQkFBcUJRLEVBQVVuK0IsRUFBS2tNLEdBQzFEcXlCLEVBQVMxQixFQUFhYyxxQkFBcUIzOUIsRUFBS28rQixFQUFZbHlCLEdBQzVEc3lCLEVBQVMzQixFQUFhYyxxQkFBcUJTLEVBQVlyK0IsRUFBS21NLEdBQzVEbU8sRUFBUyxJQUFJd2lCLEVBVWpCLE9BUkF4aUIsRUFBTzJpQixhQUFhcUIsRUFBT255QixRQUMzQm1PLEVBQU8yaUIsYUFBYXNCLEVBQU9weUIsUUFDM0JtTyxFQUFPMmlCLGFBQWF1QixFQUFPcnlCLFFBQzNCbU8sRUFBTzJpQixhQUFhd0IsRUFBT3R5QixRQUV2Qm1PLEVBQU9uTyxPQUFPbFksT0FBUyxJQUN6QnFtQixFQUFPeWlCLE9BQVMsZ0JBRVh6aUIsQ0FDVCxFQUVELENBM0tELENBMktvQy9tQixHQUdwQyxTQUFVMkwsR0FFUixhQUVBLElBQUlzQixFQUFTdEIsRUFBT3NCLFNBQVd0QixFQUFPc0IsT0FBUyxDQUFFLEdBaUJqRCxTQUFTNnRCLEVBQU1MLEdBQ1JBLEVBSUhyNkIsS0FBSytxQyxpQkFBaUIxUSxHQUh0QnI2QixLQUFLZ3JDLFVBQVUsQ0FBQyxFQUFHLEVBQUcsRUFBRyxHQUs3QixDQXFiQSxTQUFTQyxFQUFRN3hCLEVBQUdtSyxFQUFHMUosR0FPckIsT0FOSUEsRUFBSSxJQUNOQSxHQUFLLEdBRUhBLEVBQUksSUFDTkEsR0FBSyxHQUVIQSxFQUFJLEVBQUksRUFDSFQsRUFBYyxHQUFUbUssRUFBSW5LLEdBQVNTLEVBRXZCQSxFQUFJLEdBQ0MwSixFQUVMMUosRUFBSSxFQUFJLEVBQ0hULEdBQUttSyxFQUFJbkssSUFBTSxFQUFJLEVBQUlTLEdBQUssRUFFOUJULENBQ1QsQ0E1ZEl2TSxFQUFPNnRCLE1BQ1Q3dEIsRUFBT2dxQixLQUFLLHFDQXVCZGhxQixFQUFPNnRCLE1BQVFBLEVBRWY3dEIsRUFBTzZ0QixNQUFNNTNCLFVBQWlELENBTTVEaW9DLGlCQUFrQixTQUFTMVEsR0FDekIsSUFBSTkzQixFQUVBODNCLEtBQVNLLEVBQU13USxlQUNqQjdRLEVBQVFLLEVBQU13USxhQUFhN1EsSUFHZixnQkFBVkEsSUFDRjkzQixFQUFTLENBQUMsSUFBSyxJQUFLLElBQUssSUFHdEJBLElBQ0hBLEVBQVNtNEIsRUFBTXlRLGNBQWM5USxJQUUxQjkzQixJQUNIQSxFQUFTbTRCLEVBQU0wUSxjQUFjL1EsSUFFMUI5M0IsSUFDSEEsRUFBU200QixFQUFNMlEsY0FBY2hSLElBRTFCOTNCLElBRUhBLEVBQVMsQ0FBQyxFQUFHLEVBQUcsRUFBRyxJQUVqQkEsR0FDRnZDLEtBQUtnckMsVUFBVXpvQyxFQUVuQixFQVVBK29DLFVBQVcsU0FBUzl3QixFQUFHdFAsRUFBR3dNLEdBQ3hCOEMsR0FBSyxJQUFLdFAsR0FBSyxJQUFLd00sR0FBSyxJQUV6QixJQUFJNEwsRUFBRzNLLEVBQUdnSSxFQUNOclUsRUFBTU8sRUFBT3dGLEtBQUtDLE1BQU1oRyxJQUFJLENBQUNrTyxFQUFHdFAsRUFBR3dNLElBQ25DckwsRUFBTVEsRUFBT3dGLEtBQUtDLE1BQU1qRyxJQUFJLENBQUNtTyxFQUFHdFAsRUFBR3dNLElBSXZDLEdBRkFpSixHQUFLclUsRUFBTUQsR0FBTyxFQUVkQyxJQUFRRCxFQUNWaVgsRUFBSTNLLEVBQUksTUFFTCxDQUNILElBQUlxZSxFQUFJMXFCLEVBQU1ELEVBRWQsT0FEQXNNLEVBQUlnSSxFQUFJLEdBQU1xVyxHQUFLLEVBQUkxcUIsRUFBTUQsR0FBTzJxQixHQUFLMXFCLEVBQU1ELEdBQ3ZDQyxHQUNOLEtBQUtrTyxFQUNIOEksR0FBS3BZLEVBQUl3TSxHQUFLc2YsR0FBSzlyQixFQUFJd00sRUFBSSxFQUFJLEdBQy9CLE1BQ0YsS0FBS3hNLEVBQ0hvWSxHQUFLNUwsRUFBSThDLEdBQUt3YyxFQUFJLEVBQ2xCLE1BQ0YsS0FBS3RmLEVBQ0g0TCxHQUFLOUksRUFBSXRQLEdBQUs4ckIsRUFBSSxFQUd0QjFULEdBQUssQ0FDUCxDQUVBLE1BQU8sQ0FDTHZjLEtBQUt3a0MsTUFBVSxJQUFKam9CLEdBQ1h2YyxLQUFLd2tDLE1BQVUsSUFBSjV5QixHQUNYNVIsS0FBS3drQyxNQUFVLElBQUo1cUIsR0FFZixFQU1BZ2EsVUFBVyxXQUNULE9BQU8zNkIsS0FBS3dyQyxPQUNkLEVBTUFSLFVBQVcsU0FBU3pvQyxHQUNsQnZDLEtBQUt3ckMsUUFBVWpwQyxDQUNqQixFQU1Ba3BDLE1BQU8sV0FDTCxJQUFJbHBDLEVBQVN2QyxLQUFLMjZCLFlBQ2xCLE1BQU8sT0FBU3A0QixFQUFPLEdBQUssSUFBTUEsRUFBTyxHQUFLLElBQU1BLEVBQU8sR0FBSyxHQUNsRSxFQU1Ba2lDLE9BQVEsV0FDTixJQUFJbGlDLEVBQVN2QyxLQUFLMjZCLFlBQ2xCLE1BQU8sUUFBVXA0QixFQUFPLEdBQUssSUFBTUEsRUFBTyxHQUFLLElBQU1BLEVBQU8sR0FBSyxJQUFNQSxFQUFPLEdBQUssR0FDckYsRUFNQW1wQyxNQUFPLFdBQ0wsSUFBSW5wQyxFQUFTdkMsS0FBSzI2QixZQUNkZ1IsRUFBTTNyQyxLQUFLc3JDLFVBQVUvb0MsRUFBTyxHQUFJQSxFQUFPLEdBQUlBLEVBQU8sSUFFdEQsTUFBTyxPQUFTb3BDLEVBQUksR0FBSyxJQUFNQSxFQUFJLEdBQUssS0FBT0EsRUFBSSxHQUFLLElBQzFELEVBTUFDLE9BQVEsV0FDTixJQUFJcnBDLEVBQVN2QyxLQUFLMjZCLFlBQ2RnUixFQUFNM3JDLEtBQUtzckMsVUFBVS9vQyxFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxJQUV0RCxNQUFPLFFBQVVvcEMsRUFBSSxHQUFLLElBQU1BLEVBQUksR0FBSyxLQUFPQSxFQUFJLEdBQUssS0FBT3BwQyxFQUFPLEdBQUssR0FDOUUsRUFNQXNwQyxNQUFPLFdBQ0wsSUFBK0JyeEIsRUFBR3RQLEVBQUd3TSxFQUFqQ25WLEVBQVN2QyxLQUFLMjZCLFlBV2xCLE9BUkFuZ0IsRUFBa0IsS0FEbEJBLEVBQUlqWSxFQUFPLEdBQUd4QyxTQUFTLEtBQ2hCTyxPQUFpQixJQUFNa2EsRUFBS0EsRUFHbkN0UCxFQUFrQixLQURsQkEsRUFBSTNJLEVBQU8sR0FBR3hDLFNBQVMsS0FDaEJPLE9BQWlCLElBQU00SyxFQUFLQSxFQUduQ3dNLEVBQWtCLEtBRGxCQSxFQUFJblYsRUFBTyxHQUFHeEMsU0FBUyxLQUNoQk8sT0FBaUIsSUFBTW9YLEVBQUtBLEVBRTVCOEMsRUFBRWlCLGNBQWdCdlEsRUFBRXVRLGNBQWdCL0QsRUFBRStELGFBQy9DLEVBTUFxd0IsT0FBUSxXQUNOLElBQStCcjBCLEVBQTNCbFYsRUFBU3ZDLEtBQUsyNkIsWUFNbEIsT0FGQWxqQixFQUFrQixLQURsQkEsR0FEQUEsRUFBSTFRLEtBQUt3a0MsTUFBa0IsSUFBWmhwQyxFQUFPLEtBQ2hCeEMsU0FBUyxLQUNSTyxPQUFpQixJQUFNbVgsRUFBS0EsRUFFNUJ6WCxLQUFLNnJDLFFBQVVwMEIsRUFBRWdFLGFBQzFCLEVBTUErb0IsU0FBVSxXQUNSLE9BQU94a0MsS0FBSzI2QixZQUFZLEVBQzFCLEVBT0E0SixTQUFVLFNBQVNsc0IsR0FDakIsSUFBSTlWLEVBQVN2QyxLQUFLMjZCLFlBR2xCLE9BRkFwNEIsRUFBTyxHQUFLOFYsRUFDWnJZLEtBQUtnckMsVUFBVXpvQyxHQUNSdkMsSUFDVCxFQU1BK3JDLFlBQWEsV0FDWCxJQUFJeHBDLEVBQVN2QyxLQUFLMjZCLFlBQ2RxUixFQUFVNVcsVUFBc0IsR0FBWjd5QixFQUFPLEdBQXVCLElBQVpBLEVBQU8sR0FBd0IsSUFBWkEsRUFBTyxJQUFXb0ssUUFBUSxHQUFJLElBQ3ZGcy9CLEVBQWUxcEMsRUFBTyxHQUUxQixPQURBdkMsS0FBS2dyQyxVQUFVLENBQUNnQixFQUFTQSxFQUFTQSxFQUFTQyxJQUNwQ2pzQyxJQUNULEVBT0Frc0MsYUFBYyxTQUFTQyxHQUNyQixJQUFJNXBDLEVBQVN2QyxLQUFLMjZCLFlBQ2RxUixHQUF1QixHQUFaenBDLEVBQU8sR0FBdUIsSUFBWkEsRUFBTyxHQUF3QixJQUFaQSxFQUFPLElBQVdvSyxRQUFRLEdBQzFFcy9CLEVBQWUxcEMsRUFBTyxHQU0xQixPQUpBNHBDLEVBQVlBLEdBQWEsSUFFekJILEVBQVdweEIsT0FBT294QixHQUFXcHhCLE9BQU91eEIsR0FBYyxFQUFJLElBQ3REbnNDLEtBQUtnckMsVUFBVSxDQUFDZ0IsRUFBU0EsRUFBU0EsRUFBU0MsSUFDcENqc0MsSUFDVCxFQU9Bb3NDLFlBQWEsU0FBU0MsR0FDZEEsYUFBc0IzUixJQUMxQjJSLEVBQWEsSUFBSTNSLEVBQU0yUixJQUd6QixJQUkwQzdyQyxFQUp0Q21tQixFQUFTLEdBQ1R0TyxFQUFRclksS0FBS3drQyxXQUViamlDLEVBQVN2QyxLQUFLMjZCLFlBQ2QyUixFQUFjRCxFQUFXMVIsWUFFN0IsSUFBS242QixFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFDakJtbUIsRUFBT2xuQixLQUFLc0gsS0FBS3drQyxNQUFtQixHQUFaaHBDLEVBQU8vQixHQUxoQixHQUswQzhyQyxFQUFZOXJDLEtBS3ZFLE9BRkFtbUIsRUFBTyxHQUFLdE8sRUFDWnJZLEtBQUtnckMsVUFBVXJrQixHQUNSM21CLElBQ1QsR0FVRjZNLEVBQU82dEIsTUFBTTZSLE9BQVMsb0lBUXRCMS9CLEVBQU82dEIsTUFBTThSLE9BQVMsZ0dBUXRCMy9CLEVBQU82dEIsTUFBTStSLE1BQVEseURBU3JCNS9CLEVBQU82dEIsTUFBTXdRLGFBQWUsQ0FDMUJ3QixVQUFzQixVQUN0QkMsYUFBc0IsVUFDdEJDLEtBQXNCLFVBQ3RCQyxXQUFzQixVQUN0QkMsTUFBc0IsVUFDdEJDLE1BQXNCLFVBQ3RCQyxPQUFzQixVQUN0QkMsTUFBc0IsVUFDdEJDLGVBQXNCLFVBQ3RCQyxLQUFzQixVQUN0QkMsV0FBc0IsVUFDdEJDLE1BQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMsVUFBc0IsVUFDdEJDLFdBQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMsTUFBc0IsVUFDdEJDLGVBQXNCLFVBQ3RCQyxTQUFzQixVQUN0QkMsUUFBc0IsVUFDdEJDLEtBQXNCLFVBQ3RCQyxTQUFzQixVQUN0QkMsU0FBc0IsVUFDdEJDLGNBQXNCLFVBQ3RCQyxTQUFzQixVQUN0QkMsU0FBc0IsVUFDdEJDLFVBQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMsWUFBc0IsVUFDdEJDLGVBQXNCLFVBQ3RCQyxXQUFzQixVQUN0QkMsV0FBc0IsVUFDdEJDLFFBQXNCLFVBQ3RCQyxXQUFzQixVQUN0QkMsYUFBc0IsVUFDdEJDLGNBQXNCLFVBQ3RCQyxjQUFzQixVQUN0QkMsY0FBc0IsVUFDdEJDLGNBQXNCLFVBQ3RCQyxXQUFzQixVQUN0QkMsU0FBc0IsVUFDdEJDLFlBQXNCLFVBQ3RCQyxRQUFzQixVQUN0QkMsUUFBc0IsVUFDdEJDLFdBQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMsWUFBc0IsVUFDdEJDLFlBQXNCLFVBQ3RCQyxRQUFzQixVQUN0QkMsVUFBc0IsVUFDdEJDLFdBQXNCLFVBQ3RCQyxLQUFzQixVQUN0QkMsVUFBc0IsVUFDdEJDLEtBQXNCLFVBQ3RCQyxLQUFzQixVQUN0QkMsTUFBc0IsVUFDdEJDLFlBQXNCLFVBQ3RCQyxTQUFzQixVQUN0QkMsUUFBc0IsVUFDdEJDLFVBQXNCLFVBQ3RCQyxPQUFzQixVQUN0QkMsTUFBc0IsVUFDdEJDLE1BQXNCLFVBQ3RCQyxTQUFzQixVQUN0QkMsY0FBc0IsVUFDdEJDLFVBQXNCLFVBQ3RCQyxhQUFzQixVQUN0QkMsVUFBc0IsVUFDdEJDLFdBQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMscUJBQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMsVUFBc0IsVUFDdEJDLFdBQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMsWUFBc0IsVUFDdEJDLGNBQXNCLFVBQ3RCQyxhQUFzQixVQUN0QkMsZUFBc0IsVUFDdEJDLGVBQXNCLFVBQ3RCQyxlQUFzQixVQUN0QkMsWUFBc0IsVUFDdEJDLEtBQXNCLFVBQ3RCQyxVQUFzQixVQUN0QkMsTUFBc0IsVUFDdEJD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QU0sT0FBTyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sTUFBTSxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sTUFBTSxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxNQUFNLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE1BQU0sTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sTUFBTSxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxPQUFPLEtBQUssQ0FBQyxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sTUFBTSxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sTUFBTSxNQUFNLE9BQU8sS0FBSyxDQUFDLE1BQU0sT0FBTyxLQUFLLENBQUMsTUFBTSxRQUFRMlQsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE9BQU8sTUFBTSxDQUFDLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsS0FBSyxDQUFDLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLFFBQVEwZ0MsRUFBRSxDQUFDLEtB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R0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUtuSyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHaW1ILEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFBSVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsS0FBS3Z2RyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssU0FBU3VTLEVBQUU1USxFQUFFaFQs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QUMsT0FBTyxHQUFHZ1QsR0FBRyxNQUFNVyxHQUFHQSxFQUFFNmlHLEtBQUt4akcsRUFBRWdxSCxHQUFHM29GLElBQUlyaEMsQ0FBQyxDQUFDLElBQUk2cEgsR0FBRyxHQUFHaFksR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sTUFBTSxPQUFPLE9BQU8sT0FBTyxRQUFRLFFBQVEsUUFBUSxRQUFRLFVBQVVpWSxHQUFHLEdBQUdxYSxHQUFHLEdBQUdDLEdBQUcsRUFBRUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVB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R0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLEdBQUcsS0FBS2dELEdBQUcsQ0FBQyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssTUFBTXhoQyxHQUFHLEVBQUVtb0MsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBS0MsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBS0YsR0FBRyxLQUFLTSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUkyQixHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUc5QixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLFFBQVE2QixHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxJQUFJLElBQUksSUFBSSxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsRUFBRSxJQUFJLElBQUksSUFBSSxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxFQUFFLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsRUFBRSxJQUFJLElBQUksSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsRUFBRSxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLENBQUMsSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUcsSUFBSSxJQUFJLEVBQUUsRUFBRSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLElBQUksSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxJQUFJLEdBQUcsRUFBRSxNQUFNOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxRQUFRRSxHQUFH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QUssS0FBSyxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLElBQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxNQUFNLElBQUksTUFBTSxNQUFNLElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FBSyxLQUFLLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLEtBQUssSUFBSSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFLLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLEtBQUssTUFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLE1BQU0sTUFBTSxNQUFNLE1BQU0sS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxNQUFNLE1BQU0sTUFBTSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElB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TUFFSSxNQUFNbEIsRUFBTSxJQUFJLFNBQWEsQ0FDekJvbkMsVUFBVyxNQUVYM3FCLE1BQU0sZ0VBQ042RixPQUFRLENBQUMsVUFBVyxTQUNwQmtQLEtBQU0sR0FDTmh3QixNQUFLLElBRVR4QixFQUFJMHlLLFdBQVcsSUFBSSx1QkFBOEIsYUFDakQxeUssRUFBSTB5SyxXQUFXLElBQUksS0FBb0IsQ0FDbkM3SSxTQUFVLFFBQ1ZHLGdCQUFpQixjQUNqQkUsT0FBUSxTQUNSbjZKLElBQUssU0FDTHE2SixXQUFXLEVBQ1hDLGVBQWUsRUFDZkssTUFBTyxPQUNQLFlBQ1AsRUFwQkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9jc3Mvc3R5bGVzLmNzcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvZXM2LXByb21pc2UvZGlzdC9lczYtcHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9mYWJyaWMvZGlzdC9mYWJyaWMuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvZmlsZS1zYXZlci9kaXN0L0ZpbGVTYXZlci5taW4uanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvanMtbG9hZGluZy1vdmVybGF5L2Rpc3QvanMtbG9hZGluZy1vdmVybGF5Lm1pbi5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9ub2RlX21vZHVsZXMvZmZsYXRlL2VzbS9icm93c2VyLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL2pzcGRmL2Rpc3QvanNwZGYuZXMubWluLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvY3Jvc3NoYWlyLW1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvZXhwb3J0LWNvbnRyb2wudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbG9jYWwvZGUudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbG9jYWwvZW4udHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbG9jYWwvZmkudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbG9jYWwvZnIudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbG9jYWwvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbG9jYWwvc3YudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbG9jYWwvdmkudHMiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9saWIvbWFwLWdlbmVyYXRvci50cyIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL2xpYi9wcmludGFibGUtYXJlYS1tYW5hZ2VyLnRzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0L2V4dGVybmFsIHZhciBcIm1hcGJveGdsXCIiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0L3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL0B3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9Ad2F0ZXJnaXMvbWFwYm94LWdsLWV4cG9ydC8uL2Nzcy9zdHlsZXMuY3NzP2U4MWEiLCJ3ZWJwYWNrOi8vQHdhdGVyZ2lzL21hcGJveC1nbC1leHBvcnQvLi9leGFtcGxlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcIkB3YXRlcmdpcy9tYXBib3gtZ2wtZXhwb3J0OlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9XG5cdDtcblx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTtcblx0c2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpO1xuXHRzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpO1xuXHRuZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbn07IiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PVVURi04LDxzdmcgaWQ9XFxcIkNhcGFfMVxcXCIgZW5hYmxlLWJhY2tncm91bmQ9XFxcIm5ldyAwIDAgNTEyIDUxMlxcXCIgaGVpZ2h0PVxcXCI1MTJcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIiB3aWR0aD1cXFwiNTEyXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxnPjxwYXRoIGQ9XFxcIm00MjIuNSA5OXYtMjRjMC00MS4zNTUtMzMuNjQ1LTc1LTc1LTc1aC0xODRjLTQxLjM1NSAwLTc1IDMzLjY0NS03NSA3NXYyNHpcXFwiLz48cGF0aCBkPVxcXCJtMTE4LjUgMzE5djEyMiAyNiAxNWMwIDE2LjU2OCAxMy40MzEgMzAgMzAgMzBoMjE0YzE2LjU2OSAwIDMwLTEzLjQzMiAzMC0zMHYtMTUtMjYtMTIyem0xNzcgMTI4aC04MGMtOC4yODQgMC0xNS02LjcxNi0xNS0xNXM2LjcxNi0xNSAxNS0xNWg4MGM4LjI4NCAwIDE1IDYuNzE2IDE1IDE1cy02LjcxNiAxNS0xNSAxNXptMC02NGgtODBjLTguMjg0IDAtMTUtNi43MTYtMTUtMTVzNi43MTYtMTUgMTUtMTVoODBjOC4yODQgMCAxNSA2LjcxNiAxNSAxNXMtNi43MTYgMTUtMTUgMTV6XFxcIi8+PHBhdGggZD1cXFwibTQzNi41IDEyOWgtMzYxYy00MS4zNTUgMC03NSAzMy42NDUtNzUgNzV2MTIwYzAgNDEuMzU1IDMzLjY0NSA3NSA3NSA3NWgxM3YtODBoLTljLTguMjg0IDAtMTUtNi43MTYtMTUtMTVzNi43MTYtMTUgMTUtMTVoMjQgMzA0IDI0YzguMjg0IDAgMTUgNi43MTYgMTUgMTVzLTYuNzE2IDE1LTE1IDE1aC05djgwaDE0YzQxLjM1NSAwIDc1LTMzLjY0NSA3NS03NXYtMTIwYzAtNDEuMzU1LTMzLjY0NS03NS03NS03NXptLTMwOSA5NGgtNDhjLTguMjg0IDAtMTUtNi43MTYtMTUtMTVzNi43MTYtMTUgMTUtMTVoNDhjOC4yODQgMCAxNSA2LjcxNiAxNSAxNXMtNi43MTYgMTUtMTUgMTV6XFxcIi8+PC9nPjwvc3ZnPlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tYXBib3hnbC1leHBvcnQtbGlzdFxcbntcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1hcGJveGdsLWN0cmwtZ3JvdXAgLm1hcGJveGdsLWV4cG9ydC1saXN0IGJ1dHRvblxcbntcXG4gICAgYmFja2dyb3VuZDogbm9uZTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICAgIHBhZGRpbmc6IDhweCA4cHggNnB4O1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogYXV0bztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubWFwYm94Z2wtZXhwb3J0LWxpc3QgYnV0dG9uLmFjdGl2ZVxcbntcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5tYXBib3hnbC1leHBvcnQtbGlzdCBidXR0b246aG92ZXJcXG57XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxufVxcblxcbi5tYXBib3hnbC1leHBvcnQtbGlzdCBidXR0b24gKyBidXR0b25cXG57XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1xcbn1cXG5cXG4ubWFwYm94Z2wtZXhwb3J0LWNvbnRyb2xcXG57IFxcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogNzAlO1xcbn1cXG5cXG4vKlxcbiAqIEhpZGUgaGlnaC1yZXMgbWFwIHJlbmRlcmluZ1xcbiovXFxuLmhpZGRlbi1tYXAge1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBoZWlnaHQ6IDA7XFxuICAgIHdpZHRoOiAwO1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL2Nzcy9zdHlsZXMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOztJQUVJLGFBQWE7QUFDakI7O0FBRUE7O0lBRUksZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixlQUFlO0lBQ2YsY0FBYztJQUNkLGVBQWU7SUFDZixvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0FBQ3RCOztBQUVBOztJQUVJLGlCQUFpQjtBQUNyQjs7QUFFQTs7SUFFSSxxQ0FBcUM7QUFDekM7O0FBRUE7O0lBRUksMEJBQTBCO0FBQzlCOztBQUVBOztJQUVJLG1EQUEyNEI7SUFDMzRCLDJCQUEyQjtJQUMzQiw0QkFBNEI7SUFDNUIsb0JBQW9CO0FBQ3hCOztBQUVBOztDQUVDO0FBQ0Q7SUFDSSxnQkFBZ0I7SUFDaEIsU0FBUztJQUNULFFBQVE7SUFDUixlQUFlO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tYXBib3hnbC1leHBvcnQtbGlzdFxcbntcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1hcGJveGdsLWN0cmwtZ3JvdXAgLm1hcGJveGdsLWV4cG9ydC1saXN0IGJ1dHRvblxcbntcXG4gICAgYmFja2dyb3VuZDogbm9uZTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBmb250LXNpemU6IDE0cHg7XFxuICAgIHBhZGRpbmc6IDhweCA4cHggNnB4O1xcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogYXV0bztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubWFwYm94Z2wtZXhwb3J0LWxpc3QgYnV0dG9uLmFjdGl2ZVxcbntcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcblxcbi5tYXBib3hnbC1leHBvcnQtbGlzdCBidXR0b246aG92ZXJcXG57XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4wNSk7XFxufVxcblxcbi5tYXBib3hnbC1leHBvcnQtbGlzdCBidXR0b24gKyBidXR0b25cXG57XFxuICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZGRkO1xcbn1cXG5cXG4ubWFwYm94Z2wtZXhwb3J0LWNvbnRyb2xcXG57IFxcbiAgICBiYWNrZ3JvdW5kOiB1cmwoJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PVVURi04LDxzdmcgaWQ9XFxcIkNhcGFfMVxcXCIgZW5hYmxlLWJhY2tncm91bmQ9XFxcIm5ldyAwIDAgNTEyIDUxMlxcXCIgaGVpZ2h0PVxcXCI1MTJcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MTIgNTEyXFxcIiB3aWR0aD1cXFwiNTEyXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiPjxnPjxwYXRoIGQ9XFxcIm00MjIuNSA5OXYtMjRjMC00MS4zNTUtMzMuNjQ1LTc1LTc1LTc1aC0xODRjLTQxLjM1NSAwLTc1IDMzLjY0NS03NSA3NXYyNHpcXFwiLz48cGF0aCBkPVxcXCJtMTE4LjUgMzE5djEyMiAyNiAxNWMwIDE2LjU2OCAxMy40MzEgMzAgMzAgMzBoMjE0YzE2LjU2OSAwIDMwLTEzLjQzMiAzMC0zMHYtMTUtMjYtMTIyem0xNzcgMTI4aC04MGMtOC4yODQgMC0xNS02LjcxNi0xNS0xNXM2LjcxNi0xNSAxNS0xNWg4MGM4LjI4NCAwIDE1IDYuNzE2IDE1IDE1cy02LjcxNiAxNS0xNSAxNXptMC02NGgtODBjLTguMjg0IDAtMTUtNi43MTYtMTUtMTVzNi43MTYtMTUgMTUtMTVoODBjOC4yODQgMCAxNSA2LjcxNiAxNSAxNXMtNi43MTYgMTUtMTUgMTV6XFxcIi8+PHBhdGggZD1cXFwibTQzNi41IDEyOWgtMzYxYy00MS4zNTUgMC03NSAzMy42NDUtNzUgNzV2MTIwYzAgNDEuMzU1IDMzLjY0NSA3NSA3NSA3NWgxM3YtODBoLTljLTguMjg0IDAtMTUtNi43MTYtMTUtMTVzNi43MTYtMTUgMTUtMTVoMjQgMzA0IDI0YzguMjg0IDAgMTUgNi43MTYgMTUgMTVzLTYuNzE2IDE1LTE1IDE1aC05djgwaDE0YzQxLjM1NSAwIDc1LTMzLjY0NSA3NS03NXYtMTIwYzAtNDEuMzU1LTMzLjY0NS03NS03NS03NXptLTMwOSA5NGgtNDhjLTguMjg0IDAtMTUtNi43MTYtMTUtMTVzNi43MTYtMTUgMTUtMTVoNDhjOC4yODQgMCAxNSA2LjcxNiAxNSAxNXMtNi43MTYgMTUtMTUgMTV6XFxcIi8+PC9nPjwvc3ZnPicpO1xcbiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxuICAgIGJhY2tncm91bmQtc2l6ZTogNzAlO1xcbn1cXG5cXG4vKlxcbiAqIEhpZGUgaGlnaC1yZXMgbWFwIHJlbmRlcmluZ1xcbiovXFxuLmhpZGRlbi1tYXAge1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgICBoZWlnaHQ6IDA7XFxuICAgIHdpZHRoOiAwO1xcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qIVxuICogQG92ZXJ2aWV3IGVzNi1wcm9taXNlIC0gYSB0aW55IGltcGxlbWVudGF0aW9uIG9mIFByb21pc2VzL0ErLlxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgKGMpIDIwMTQgWWVodWRhIEthdHosIFRvbSBEYWxlLCBTdGVmYW4gUGVubmVyIGFuZCBjb250cmlidXRvcnMgKENvbnZlcnNpb24gdG8gRVM2IEFQSSBieSBKYWtlIEFyY2hpYmFsZClcbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9zdGVmYW5wZW5uZXIvZXM2LXByb21pc2UvbWFzdGVyL0xJQ0VOU0VcbiAqIEB2ZXJzaW9uICAgdjQuMi44KzFlNjhkY2U2XG4gKi9cblxuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkVTNlByb21pc2UgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB4O1xuICByZXR1cm4geCAhPT0gbnVsbCAmJiAodHlwZSA9PT0gJ29iamVjdCcgfHwgdHlwZSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb24oeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XG59XG5cblxuXG52YXIgX2lzQXJyYXkgPSB2b2lkIDA7XG5pZiAoQXJyYXkuaXNBcnJheSkge1xuICBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG59IGVsc2Uge1xuICBfaXNBcnJheSA9IGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcbn1cblxudmFyIGlzQXJyYXkgPSBfaXNBcnJheTtcblxudmFyIGxlbiA9IDA7XG52YXIgdmVydHhOZXh0ID0gdm9pZCAwO1xudmFyIGN1c3RvbVNjaGVkdWxlckZuID0gdm9pZCAwO1xuXG52YXIgYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICBxdWV1ZVtsZW5dID0gY2FsbGJhY2s7XG4gIHF1ZXVlW2xlbiArIDFdID0gYXJnO1xuICBsZW4gKz0gMjtcbiAgaWYgKGxlbiA9PT0gMikge1xuICAgIC8vIElmIGxlbiBpcyAyLCB0aGF0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byBzY2hlZHVsZSBhbiBhc3luYyBmbHVzaC5cbiAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgIC8vIHdpbGwgYmUgcHJvY2Vzc2VkIGJ5IHRoaXMgZmx1c2ggdGhhdCB3ZSBhcmUgc2NoZWR1bGluZy5cbiAgICBpZiAoY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgIGN1c3RvbVNjaGVkdWxlckZuKGZsdXNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVGbHVzaCgpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2NoZWR1bGVyKHNjaGVkdWxlRm4pIHtcbiAgY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xufVxuXG5mdW5jdGlvbiBzZXRBc2FwKGFzYXBGbikge1xuICBhc2FwID0gYXNhcEZuO1xufVxuXG52YXIgYnJvd3NlcldpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdW5kZWZpbmVkO1xudmFyIGJyb3dzZXJHbG9iYWwgPSBicm93c2VyV2luZG93IHx8IHt9O1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gYnJvd3Nlckdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGJyb3dzZXJHbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBpc05vZGUgPSB0eXBlb2Ygc2VsZiA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuLy8gdGVzdCBmb3Igd2ViIHdvcmtlciBidXQgbm90IGluIElFMTBcbnZhciBpc1dvcmtlciA9IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGltcG9ydFNjcmlwdHMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCc7XG5cbi8vIG5vZGVcbmZ1bmN0aW9uIHVzZU5leHRUaWNrKCkge1xuICAvLyBub2RlIHZlcnNpb24gMC4xMC54IGRpc3BsYXlzIGEgZGVwcmVjYXRpb24gd2FybmluZyB3aGVuIG5leHRUaWNrIGlzIHVzZWQgcmVjdXJzaXZlbHlcbiAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jdWpvanMvd2hlbi9pc3N1ZXMvNDEwIGZvciBkZXRhaWxzXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICB9O1xufVxuXG4vLyB2ZXJ0eFxuZnVuY3Rpb24gdXNlVmVydHhUaW1lcigpIHtcbiAgaWYgKHR5cGVvZiB2ZXJ0eE5leHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZlcnR4TmV4dChmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG59XG5cbmZ1bmN0aW9uIHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gIHZhciBpdGVyYXRpb25zID0gMDtcbiAgdmFyIG9ic2VydmVyID0gbmV3IEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgbm9kZS5kYXRhID0gaXRlcmF0aW9ucyA9ICsraXRlcmF0aW9ucyAlIDI7XG4gIH07XG59XG5cbi8vIHdlYiB3b3JrZXJcbmZ1bmN0aW9uIHVzZU1lc3NhZ2VDaGFubmVsKCkge1xuICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZsdXNoO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiB1c2VTZXRUaW1lb3V0KCkge1xuICAvLyBTdG9yZSBzZXRUaW1lb3V0IHJlZmVyZW5jZSBzbyBlczYtcHJvbWlzZSB3aWxsIGJlIHVuYWZmZWN0ZWQgYnlcbiAgLy8gb3RoZXIgY29kZSBtb2RpZnlpbmcgc2V0VGltZW91dCAobGlrZSBzaW5vbi51c2VGYWtlVGltZXJzKCkpXG4gIHZhciBnbG9iYWxTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2xvYmFsU2V0VGltZW91dChmbHVzaCwgMSk7XG4gIH07XG59XG5cbnZhciBxdWV1ZSA9IG5ldyBBcnJheSgxMDAwKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG4gICAgdmFyIGFyZyA9IHF1ZXVlW2kgKyAxXTtcblxuICAgIGNhbGxiYWNrKGFyZyk7XG5cbiAgICBxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICBxdWV1ZVtpICsgMV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICBsZW4gPSAwO1xufVxuXG5mdW5jdGlvbiBhdHRlbXB0VmVydHgoKSB7XG4gIHRyeSB7XG4gICAgdmFyIHZlcnR4ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKS5yZXF1aXJlKCd2ZXJ0eCcpO1xuICAgIHZlcnR4TmV4dCA9IHZlcnR4LnJ1bk9uTG9vcCB8fCB2ZXJ0eC5ydW5PbkNvbnRleHQ7XG4gICAgcmV0dXJuIHVzZVZlcnR4VGltZXIoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB1c2VTZXRUaW1lb3V0KCk7XG4gIH1cbn1cblxudmFyIHNjaGVkdWxlRmx1c2ggPSB2b2lkIDA7XG4vLyBEZWNpZGUgd2hhdCBhc3luYyBtZXRob2QgdG8gdXNlIHRvIHRyaWdnZXJpbmcgcHJvY2Vzc2luZyBvZiBxdWV1ZWQgY2FsbGJhY2tzOlxuaWYgKGlzTm9kZSkge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlTmV4dFRpY2soKTtcbn0gZWxzZSBpZiAoQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU11dGF0aW9uT2JzZXJ2ZXIoKTtcbn0gZWxzZSBpZiAoaXNXb3JrZXIpIHtcbiAgc2NoZWR1bGVGbHVzaCA9IHVzZU1lc3NhZ2VDaGFubmVsKCk7XG59IGVsc2UgaWYgKGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICBzY2hlZHVsZUZsdXNoID0gYXR0ZW1wdFZlcnR4KCk7XG59IGVsc2Uge1xuICBzY2hlZHVsZUZsdXNoID0gdXNlU2V0VGltZW91dCgpO1xufVxuXG5mdW5jdGlvbiB0aGVuKG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzO1xuXG4gIHZhciBjaGlsZCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG5vb3ApO1xuXG4gIGlmIChjaGlsZFtQUk9NSVNFX0lEXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWFrZVByb21pc2UoY2hpbGQpO1xuICB9XG5cbiAgdmFyIF9zdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cblxuICBpZiAoX3N0YXRlKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzW19zdGF0ZSAtIDFdO1xuICAgIGFzYXAoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGludm9rZUNhbGxiYWNrKF9zdGF0ZSwgY2hpbGQsIGNhbGxiYWNrLCBwYXJlbnQuX3Jlc3VsdCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHBhcmVudCwgY2hpbGQsIG9uRnVsZmlsbG1lbnQsIG9uUmVqZWN0aW9uKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZDtcbn1cblxuLyoqXG4gIGBQcm9taXNlLnJlc29sdmVgIHJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCBiZWNvbWUgcmVzb2x2ZWQgd2l0aCB0aGVcbiAgcGFzc2VkIGB2YWx1ZWAuIEl0IGlzIHNob3J0aGFuZCBmb3IgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICByZXNvbHZlKDEpO1xuICB9KTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBJbnN0ZWFkIG9mIHdyaXRpbmcgdGhlIGFib3ZlLCB5b3VyIGNvZGUgbm93IHNpbXBseSBiZWNvbWVzIHRoZSBmb2xsb3dpbmc6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgxKTtcblxuICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgIC8vIHZhbHVlID09PSAxXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIHJlc29sdmVcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FueX0gdmFsdWUgdmFsdWUgdGhhdCB0aGUgcmV0dXJuZWQgcHJvbWlzZSB3aWxsIGJlIHJlc29sdmVkIHdpdGhcbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCB3aWxsIGJlY29tZSBmdWxmaWxsZWQgd2l0aCB0aGUgZ2l2ZW5cbiAgYHZhbHVlYFxuKi9cbmZ1bmN0aW9uIHJlc29sdmUkMShvYmplY3QpIHtcbiAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgdmFyIENvbnN0cnVjdG9yID0gdGhpcztcblxuICBpZiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gQ29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gb2JqZWN0O1xuICB9XG5cbiAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3Iobm9vcCk7XG4gIHJlc29sdmUocHJvbWlzZSwgb2JqZWN0KTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbnZhciBQUk9NSVNFX0lEID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxudmFyIFBFTkRJTkcgPSB2b2lkIDA7XG52YXIgRlVMRklMTEVEID0gMTtcbnZhciBSRUpFQ1RFRCA9IDI7XG5cbmZ1bmN0aW9uIHNlbGZGdWxmaWxsbWVudCgpIHtcbiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgY2Fubm90IHJlc29sdmUgYSBwcm9taXNlIHdpdGggaXRzZWxmXCIpO1xufVxuXG5mdW5jdGlvbiBjYW5ub3RSZXR1cm5Pd24oKSB7XG4gIHJldHVybiBuZXcgVHlwZUVycm9yKCdBIHByb21pc2VzIGNhbGxiYWNrIGNhbm5vdCByZXR1cm4gdGhhdCBzYW1lIHByb21pc2UuJyk7XG59XG5cbmZ1bmN0aW9uIHRyeVRoZW4odGhlbiQkMSwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICB0cnkge1xuICAgIHRoZW4kJDEuY2FsbCh2YWx1ZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbiQkMSkge1xuICBhc2FwKGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgIHZhciBlcnJvciA9IHRyeVRoZW4odGhlbiQkMSwgdGhlbmFibGUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgaWYgKHRoZW5hYmxlICE9PSB2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIGlmIChzZWFsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VhbGVkID0gdHJ1ZTtcblxuICAgICAgcmVqZWN0KHByb21pc2UsIHJlYXNvbik7XG4gICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgIGlmICghc2VhbGVkICYmIGVycm9yKSB7XG4gICAgICBzZWFsZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICB9XG4gIH0sIHByb21pc2UpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSkge1xuICBpZiAodGhlbmFibGUuX3N0YXRlID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICB9IGVsc2UgaWYgKHRoZW5hYmxlLl9zdGF0ZSA9PT0gUkVKRUNURUQpIHtcbiAgICByZWplY3QocHJvbWlzZSwgdGhlbmFibGUuX3Jlc3VsdCk7XG4gIH0gZWxzZSB7XG4gICAgc3Vic2NyaWJlKHRoZW5hYmxlLCB1bmRlZmluZWQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4kJDEpIHtcbiAgaWYgKG1heWJlVGhlbmFibGUuY29uc3RydWN0b3IgPT09IHByb21pc2UuY29uc3RydWN0b3IgJiYgdGhlbiQkMSA9PT0gdGhlbiAmJiBtYXliZVRoZW5hYmxlLmNvbnN0cnVjdG9yLnJlc29sdmUgPT09IHJlc29sdmUkMSkge1xuICAgIGhhbmRsZU93blRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUpO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGVuJCQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoZW4kJDEpKSB7XG4gICAgICBoYW5kbGVGb3JlaWduVGhlbmFibGUocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSwgdGhlbiQkMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmUocHJvbWlzZSwgdmFsdWUpIHtcbiAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgfSBlbHNlIGlmIChvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgIHZhciB0aGVuJCQxID0gdm9pZCAwO1xuICAgIHRyeSB7XG4gICAgICB0aGVuJCQxID0gdmFsdWUudGhlbjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCB2YWx1ZSwgdGhlbiQkMSk7XG4gIH0gZWxzZSB7XG4gICAgZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVibGlzaFJlamVjdGlvbihwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9vbmVycm9yKSB7XG4gICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICB9XG5cbiAgcHVibGlzaChwcm9taXNlKTtcbn1cblxuZnVuY3Rpb24gZnVsZmlsbChwcm9taXNlLCB2YWx1ZSkge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBwcm9taXNlLl9yZXN1bHQgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fc3RhdGUgPSBGVUxGSUxMRUQ7XG5cbiAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgIGFzYXAocHVibGlzaCwgcHJvbWlzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IFBFTkRJTkcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgcHJvbWlzZS5fc3RhdGUgPSBSRUpFQ1RFRDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gIGFzYXAocHVibGlzaFJlamVjdGlvbiwgcHJvbWlzZSk7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShwYXJlbnQsIGNoaWxkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbikge1xuICB2YXIgX3N1YnNjcmliZXJzID0gcGFyZW50Ll9zdWJzY3JpYmVycztcbiAgdmFyIGxlbmd0aCA9IF9zdWJzY3JpYmVycy5sZW5ndGg7XG5cblxuICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gIF9zdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gIF9zdWJzY3JpYmVyc1tsZW5ndGggKyBGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgX3N1YnNjcmliZXJzW2xlbmd0aCArIFJFSkVDVEVEXSA9IG9uUmVqZWN0aW9uO1xuXG4gIGlmIChsZW5ndGggPT09IDAgJiYgcGFyZW50Ll9zdGF0ZSkge1xuICAgIGFzYXAocHVibGlzaCwgcGFyZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwdWJsaXNoKHByb21pc2UpIHtcbiAgdmFyIHN1YnNjcmliZXJzID0gcHJvbWlzZS5fc3Vic2NyaWJlcnM7XG4gIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgaWYgKHN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjaGlsZCA9IHZvaWQgMCxcbiAgICAgIGNhbGxiYWNrID0gdm9pZCAwLFxuICAgICAgZGV0YWlsID0gcHJvbWlzZS5fcmVzdWx0O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgIGNhbGxiYWNrID0gc3Vic2NyaWJlcnNbaSArIHNldHRsZWRdO1xuXG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICBpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfVxuICB9XG5cbiAgcHJvbWlzZS5fc3Vic2NyaWJlcnMubGVuZ3RoID0gMDtcbn1cblxuZnVuY3Rpb24gaW52b2tlQ2FsbGJhY2soc2V0dGxlZCwgcHJvbWlzZSwgY2FsbGJhY2ssIGRldGFpbCkge1xuICB2YXIgaGFzQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKGNhbGxiYWNrKSxcbiAgICAgIHZhbHVlID0gdm9pZCAwLFxuICAgICAgZXJyb3IgPSB2b2lkIDAsXG4gICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuXG4gIGlmIChoYXNDYWxsYmFjaykge1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IGNhbGxiYWNrKGRldGFpbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc3VjY2VlZGVkID0gZmFsc2U7XG4gICAgICBlcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICByZWplY3QocHJvbWlzZSwgY2Fubm90UmV0dXJuT3duKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IGRldGFpbDtcbiAgfVxuXG4gIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gUEVORElORykge1xuICAgIC8vIG5vb3BcbiAgfSBlbHNlIGlmIChoYXNDYWxsYmFjayAmJiBzdWNjZWVkZWQpIHtcbiAgICByZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChzdWNjZWVkZWQgPT09IGZhbHNlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBGVUxGSUxMRUQpIHtcbiAgICBmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChzZXR0bGVkID09PSBSRUpFQ1RFRCkge1xuICAgIHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdGlhbGl6ZVByb21pc2UocHJvbWlzZSwgcmVzb2x2ZXIpIHtcbiAgdHJ5IHtcbiAgICByZXNvbHZlcihmdW5jdGlvbiByZXNvbHZlUHJvbWlzZSh2YWx1ZSkge1xuICAgICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24gcmVqZWN0UHJvbWlzZShyZWFzb24pIHtcbiAgICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmVqZWN0KHByb21pc2UsIGUpO1xuICB9XG59XG5cbnZhciBpZCA9IDA7XG5mdW5jdGlvbiBuZXh0SWQoKSB7XG4gIHJldHVybiBpZCsrO1xufVxuXG5mdW5jdGlvbiBtYWtlUHJvbWlzZShwcm9taXNlKSB7XG4gIHByb21pc2VbUFJPTUlTRV9JRF0gPSBpZCsrO1xuICBwcm9taXNlLl9zdGF0ZSA9IHVuZGVmaW5lZDtcbiAgcHJvbWlzZS5fcmVzdWx0ID0gdW5kZWZpbmVkO1xuICBwcm9taXNlLl9zdWJzY3JpYmVycyA9IFtdO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0aW9uRXJyb3IoKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xufVxuXG52YXIgRW51bWVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRW51bWVyYXRvcihDb25zdHJ1Y3RvciwgaW5wdXQpIHtcbiAgICB0aGlzLl9pbnN0YW5jZUNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuXG4gICAgaWYgKCF0aGlzLnByb21pc2VbUFJPTUlTRV9JRF0pIHtcbiAgICAgIG1ha2VQcm9taXNlKHRoaXMucHJvbWlzZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICB0aGlzLmxlbmd0aCA9IGlucHV0Lmxlbmd0aDtcbiAgICAgIHRoaXMuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgICAgdGhpcy5fcmVzdWx0ID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcblxuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZ1bGZpbGwodGhpcy5wcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmxlbmd0aCB8fCAwO1xuICAgICAgICB0aGlzLl9lbnVtZXJhdGUoaW5wdXQpO1xuICAgICAgICBpZiAodGhpcy5fcmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgZnVsZmlsbCh0aGlzLnByb21pc2UsIHRoaXMuX3Jlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KHRoaXMucHJvbWlzZSwgdmFsaWRhdGlvbkVycm9yKCkpO1xuICAgIH1cbiAgfVxuXG4gIEVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbiBfZW51bWVyYXRlKGlucHV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IHRoaXMuX3N0YXRlID09PSBQRU5ESU5HICYmIGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5fZWFjaEVudHJ5KGlucHV0W2ldLCBpKTtcbiAgICB9XG4gIH07XG5cbiAgRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uIF9lYWNoRW50cnkoZW50cnksIGkpIHtcbiAgICB2YXIgYyA9IHRoaXMuX2luc3RhbmNlQ29uc3RydWN0b3I7XG4gICAgdmFyIHJlc29sdmUkJDEgPSBjLnJlc29sdmU7XG5cblxuICAgIGlmIChyZXNvbHZlJCQxID09PSByZXNvbHZlJDEpIHtcbiAgICAgIHZhciBfdGhlbiA9IHZvaWQgMDtcbiAgICAgIHZhciBlcnJvciA9IHZvaWQgMDtcbiAgICAgIHZhciBkaWRFcnJvciA9IGZhbHNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgX3RoZW4gPSBlbnRyeS50aGVuO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBkaWRFcnJvciA9IHRydWU7XG4gICAgICAgIGVycm9yID0gZTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGVuID09PSB0aGVuICYmIGVudHJ5Ll9zdGF0ZSAhPT0gUEVORElORykge1xuICAgICAgICB0aGlzLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIF90aGVuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX3JlbWFpbmluZy0tO1xuICAgICAgICB0aGlzLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICAgIH0gZWxzZSBpZiAoYyA9PT0gUHJvbWlzZSQxKSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gbmV3IGMobm9vcCk7XG4gICAgICAgIGlmIChkaWRFcnJvcikge1xuICAgICAgICAgIHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBlbnRyeSwgX3RoZW4pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3dpbGxTZXR0bGVBdChuZXcgYyhmdW5jdGlvbiAocmVzb2x2ZSQkMSkge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlJCQxKGVudHJ5KTtcbiAgICAgICAgfSksIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl93aWxsU2V0dGxlQXQocmVzb2x2ZSQkMShlbnRyeSksIGkpO1xuICAgIH1cbiAgfTtcblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fc2V0dGxlZEF0ID0gZnVuY3Rpb24gX3NldHRsZWRBdChzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcblxuXG4gICAgaWYgKHByb21pc2UuX3N0YXRlID09PSBQRU5ESU5HKSB7XG4gICAgICB0aGlzLl9yZW1haW5pbmctLTtcblxuICAgICAgaWYgKHN0YXRlID09PSBSRUpFQ1RFRCkge1xuICAgICAgICByZWplY3QocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgZnVsZmlsbChwcm9taXNlLCB0aGlzLl9yZXN1bHQpO1xuICAgIH1cbiAgfTtcblxuICBFbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24gX3dpbGxTZXR0bGVBdChwcm9taXNlLCBpKSB7XG4gICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gICAgc3Vic2NyaWJlKHByb21pc2UsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZW51bWVyYXRvci5fc2V0dGxlZEF0KEZVTEZJTExFRCwgaSwgdmFsdWUpO1xuICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHJldHVybiBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoUkVKRUNURUQsIGksIHJlYXNvbik7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEVudW1lcmF0b3I7XG59KCk7XG5cbi8qKlxuICBgUHJvbWlzZS5hbGxgIGFjY2VwdHMgYW4gYXJyYXkgb2YgcHJvbWlzZXMsIGFuZCByZXR1cm5zIGEgbmV3IHByb21pc2Ugd2hpY2hcbiAgaXMgZnVsZmlsbGVkIHdpdGggYW4gYXJyYXkgb2YgZnVsZmlsbG1lbnQgdmFsdWVzIGZvciB0aGUgcGFzc2VkIHByb21pc2VzLCBvclxuICByZWplY3RlZCB3aXRoIHRoZSByZWFzb24gb2YgdGhlIGZpcnN0IHBhc3NlZCBwcm9taXNlIHRvIGJlIHJlamVjdGVkLiBJdCBjYXN0cyBhbGxcbiAgZWxlbWVudHMgb2YgdGhlIHBhc3NlZCBpdGVyYWJsZSB0byBwcm9taXNlcyBhcyBpdCBydW5zIHRoaXMgYWxnb3JpdGhtLlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZXNvbHZlKDIpO1xuICBsZXQgcHJvbWlzZTMgPSByZXNvbHZlKDMpO1xuICBsZXQgcHJvbWlzZXMgPSBbIHByb21pc2UxLCBwcm9taXNlMiwgcHJvbWlzZTMgXTtcblxuICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbihhcnJheSl7XG4gICAgLy8gVGhlIGFycmF5IGhlcmUgd291bGQgYmUgWyAxLCAyLCAzIF07XG4gIH0pO1xuICBgYGBcblxuICBJZiBhbnkgb2YgdGhlIGBwcm9taXNlc2AgZ2l2ZW4gdG8gYGFsbGAgYXJlIHJlamVjdGVkLCB0aGUgZmlyc3QgcHJvbWlzZVxuICB0aGF0IGlzIHJlamVjdGVkIHdpbGwgYmUgZ2l2ZW4gYXMgYW4gYXJndW1lbnQgdG8gdGhlIHJldHVybmVkIHByb21pc2VzJ3NcbiAgcmVqZWN0aW9uIGhhbmRsZXIuIEZvciBleGFtcGxlOlxuXG4gIEV4YW1wbGU6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBsZXQgcHJvbWlzZTEgPSByZXNvbHZlKDEpO1xuICBsZXQgcHJvbWlzZTIgPSByZWplY3QobmV3IEVycm9yKFwiMlwiKSk7XG4gIGxldCBwcm9taXNlMyA9IHJlamVjdChuZXcgRXJyb3IoXCIzXCIpKTtcbiAgbGV0IHByb21pc2VzID0gWyBwcm9taXNlMSwgcHJvbWlzZTIsIHByb21pc2UzIF07XG5cbiAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xuICAgIC8vIENvZGUgaGVyZSBuZXZlciBydW5zIGJlY2F1c2UgdGhlcmUgYXJlIHJlamVjdGVkIHByb21pc2VzIVxuICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgIC8vIGVycm9yLm1lc3NhZ2UgPT09IFwiMlwiXG4gIH0pO1xuICBgYGBcblxuICBAbWV0aG9kIGFsbFxuICBAc3RhdGljXG4gIEBwYXJhbSB7QXJyYXl9IGVudHJpZXMgYXJyYXkgb2YgcHJvbWlzZXNcbiAgQHBhcmFtIHtTdHJpbmd9IGxhYmVsIG9wdGlvbmFsIHN0cmluZyBmb3IgbGFiZWxpbmcgdGhlIHByb21pc2UuXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aGVuIGFsbCBgcHJvbWlzZXNgIGhhdmUgYmVlblxuICBmdWxmaWxsZWQsIG9yIHJlamVjdGVkIGlmIGFueSBvZiB0aGVtIGJlY29tZSByZWplY3RlZC5cbiAgQHN0YXRpY1xuKi9cbmZ1bmN0aW9uIGFsbChlbnRyaWVzKSB7XG4gIHJldHVybiBuZXcgRW51bWVyYXRvcih0aGlzLCBlbnRyaWVzKS5wcm9taXNlO1xufVxuXG4vKipcbiAgYFByb21pc2UucmFjZWAgcmV0dXJucyBhIG5ldyBwcm9taXNlIHdoaWNoIGlzIHNldHRsZWQgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZVxuICBmaXJzdCBwYXNzZWQgcHJvbWlzZSB0byBzZXR0bGUuXG5cbiAgRXhhbXBsZTpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlMSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmVzb2x2ZSgncHJvbWlzZSAxJyk7XG4gICAgfSwgMjAwKTtcbiAgfSk7XG5cbiAgbGV0IHByb21pc2UyID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDInKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyByZXN1bHQgPT09ICdwcm9taXNlIDInIGJlY2F1c2UgaXQgd2FzIHJlc29sdmVkIGJlZm9yZSBwcm9taXNlMVxuICAgIC8vIHdhcyByZXNvbHZlZC5cbiAgfSk7XG4gIGBgYFxuXG4gIGBQcm9taXNlLnJhY2VgIGlzIGRldGVybWluaXN0aWMgaW4gdGhhdCBvbmx5IHRoZSBzdGF0ZSBvZiB0aGUgZmlyc3RcbiAgc2V0dGxlZCBwcm9taXNlIG1hdHRlcnMuIEZvciBleGFtcGxlLCBldmVuIGlmIG90aGVyIHByb21pc2VzIGdpdmVuIHRvIHRoZVxuICBgcHJvbWlzZXNgIGFycmF5IGFyZ3VtZW50IGFyZSByZXNvbHZlZCwgYnV0IHRoZSBmaXJzdCBzZXR0bGVkIHByb21pc2UgaGFzXG4gIGJlY29tZSByZWplY3RlZCBiZWZvcmUgdGhlIG90aGVyIHByb21pc2VzIGJlY2FtZSBmdWxmaWxsZWQsIHRoZSByZXR1cm5lZFxuICBwcm9taXNlIHdpbGwgYmVjb21lIHJlamVjdGVkOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UxID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICByZXNvbHZlKCdwcm9taXNlIDEnKTtcbiAgICB9LCAyMDApO1xuICB9KTtcblxuICBsZXQgcHJvbWlzZTIgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgIHJlamVjdChuZXcgRXJyb3IoJ3Byb21pc2UgMicpKTtcbiAgICB9LCAxMDApO1xuICB9KTtcblxuICBQcm9taXNlLnJhY2UoW3Byb21pc2UxLCBwcm9taXNlMl0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBDb2RlIGhlcmUgbmV2ZXIgcnVuc1xuICB9LCBmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHJlYXNvbi5tZXNzYWdlID09PSAncHJvbWlzZSAyJyBiZWNhdXNlIHByb21pc2UgMiBiZWNhbWUgcmVqZWN0ZWQgYmVmb3JlXG4gICAgLy8gcHJvbWlzZSAxIGJlY2FtZSBmdWxmaWxsZWRcbiAgfSk7XG4gIGBgYFxuXG4gIEFuIGV4YW1wbGUgcmVhbC13b3JsZCB1c2UgY2FzZSBpcyBpbXBsZW1lbnRpbmcgdGltZW91dHM6XG5cbiAgYGBgamF2YXNjcmlwdFxuICBQcm9taXNlLnJhY2UoW2FqYXgoJ2Zvby5qc29uJyksIHRpbWVvdXQoNTAwMCldKVxuICBgYGBcblxuICBAbWV0aG9kIHJhY2VcbiAgQHN0YXRpY1xuICBAcGFyYW0ge0FycmF5fSBwcm9taXNlcyBhcnJheSBvZiBwcm9taXNlcyB0byBvYnNlcnZlXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX0gYSBwcm9taXNlIHdoaWNoIHNldHRsZXMgaW4gdGhlIHNhbWUgd2F5IGFzIHRoZSBmaXJzdCBwYXNzZWRcbiAgcHJvbWlzZSB0byBzZXR0bGUuXG4qL1xuZnVuY3Rpb24gcmFjZShlbnRyaWVzKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG5cbiAgaWYgKCFpc0FycmF5KGVudHJpZXMpKSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAoXywgcmVqZWN0KSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnJlc29sdmUoZW50cmllc1tpXSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICBgUHJvbWlzZS5yZWplY3RgIHJldHVybnMgYSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHBhc3NlZCBgcmVhc29uYC5cbiAgSXQgaXMgc2hvcnRoYW5kIGZvciB0aGUgZm9sbG93aW5nOlxuXG4gIGBgYGphdmFzY3JpcHRcbiAgbGV0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgIHJlamVjdChuZXcgRXJyb3IoJ1dIT09QUycpKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEluc3RlYWQgb2Ygd3JpdGluZyB0aGUgYWJvdmUsIHlvdXIgY29kZSBub3cgc2ltcGx5IGJlY29tZXMgdGhlIGZvbGxvd2luZzpcblxuICBgYGBqYXZhc2NyaXB0XG4gIGxldCBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdXSE9PUFMnKSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAvLyBDb2RlIGhlcmUgZG9lc24ndCBydW4gYmVjYXVzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZCFcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyByZWFzb24ubWVzc2FnZSA9PT0gJ1dIT09QUydcbiAgfSk7XG4gIGBgYFxuXG4gIEBtZXRob2QgcmVqZWN0XG4gIEBzdGF0aWNcbiAgQHBhcmFtIHtBbnl9IHJlYXNvbiB2YWx1ZSB0aGF0IHRoZSByZXR1cm5lZCBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aC5cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgcmVqZWN0ZWQgd2l0aCB0aGUgZ2l2ZW4gYHJlYXNvbmAuXG4qL1xuZnVuY3Rpb24gcmVqZWN0JDEocmVhc29uKSB7XG4gIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gIHZhciBwcm9taXNlID0gbmV3IENvbnN0cnVjdG9yKG5vb3ApO1xuICByZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgcmV0dXJuIHByb21pc2U7XG59XG5cbmZ1bmN0aW9uIG5lZWRzUmVzb2x2ZXIoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbn1cblxuZnVuY3Rpb24gbmVlZHNOZXcoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdQcm9taXNlJzogUGxlYXNlIHVzZSB0aGUgJ25ldycgb3BlcmF0b3IsIHRoaXMgb2JqZWN0IGNvbnN0cnVjdG9yIGNhbm5vdCBiZSBjYWxsZWQgYXMgYSBmdW5jdGlvbi5cIik7XG59XG5cbi8qKlxuICBQcm9taXNlIG9iamVjdHMgcmVwcmVzZW50IHRoZSBldmVudHVhbCByZXN1bHQgb2YgYW4gYXN5bmNocm9ub3VzIG9wZXJhdGlvbi4gVGhlXG4gIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsIHdoaWNoXG4gIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICB3aHkgdGhlIHByb21pc2UgY2Fubm90IGJlIGZ1bGZpbGxlZC5cblxuICBUZXJtaW5vbG9neVxuICAtLS0tLS0tLS0tLVxuXG4gIC0gYHByb21pc2VgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB3aXRoIGEgYHRoZW5gIG1ldGhvZCB3aG9zZSBiZWhhdmlvciBjb25mb3JtcyB0byB0aGlzIHNwZWNpZmljYXRpb24uXG4gIC0gYHRoZW5hYmxlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gdGhhdCBkZWZpbmVzIGEgYHRoZW5gIG1ldGhvZC5cbiAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAtIGBleGNlcHRpb25gIGlzIGEgdmFsdWUgdGhhdCBpcyB0aHJvd24gdXNpbmcgdGhlIHRocm93IHN0YXRlbWVudC5cbiAgLSBgcmVhc29uYCBpcyBhIHZhbHVlIHRoYXQgaW5kaWNhdGVzIHdoeSBhIHByb21pc2Ugd2FzIHJlamVjdGVkLlxuICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICBBIHByb21pc2UgY2FuIGJlIGluIG9uZSBvZiB0aHJlZSBzdGF0ZXM6IHBlbmRpbmcsIGZ1bGZpbGxlZCwgb3IgcmVqZWN0ZWQuXG5cbiAgUHJvbWlzZXMgdGhhdCBhcmUgZnVsZmlsbGVkIGhhdmUgYSBmdWxmaWxsbWVudCB2YWx1ZSBhbmQgYXJlIGluIHRoZSBmdWxmaWxsZWRcbiAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICByZWplY3RlZCBzdGF0ZS4gIEEgZnVsZmlsbG1lbnQgdmFsdWUgaXMgbmV2ZXIgYSB0aGVuYWJsZS5cblxuICBQcm9taXNlcyBjYW4gYWxzbyBiZSBzYWlkIHRvICpyZXNvbHZlKiBhIHZhbHVlLiAgSWYgdGhpcyB2YWx1ZSBpcyBhbHNvIGFcbiAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICBzZXR0bGVkIHN0YXRlLiAgU28gYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCByZWplY3RzIHdpbGxcbiAgaXRzZWxmIHJlamVjdCwgYW5kIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgZnVsZmlsbHMgd2lsbFxuICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gIEJhc2ljIFVzYWdlOlxuICAtLS0tLS0tLS0tLS1cblxuICBgYGBqc1xuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIC8vIG9uIHN1Y2Nlc3NcbiAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgIC8vIG9uIGZhaWx1cmVcbiAgICByZWplY3QocmVhc29uKTtcbiAgfSk7XG5cbiAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gb24gZnVsZmlsbG1lbnRcbiAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgLy8gb24gcmVqZWN0aW9uXG4gIH0pO1xuICBgYGBcblxuICBBZHZhbmNlZCBVc2FnZTpcbiAgLS0tLS0tLS0tLS0tLS0tXG5cbiAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICBgWE1MSHR0cFJlcXVlc3Rgcy5cblxuICBgYGBqc1xuICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVyO1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2dldEpTT046IGAnICsgdXJsICsgJ2AgZmFpbGVkIHdpdGggc3RhdHVzOiBbJyArIHRoaXMuc3RhdHVzICsgJ10nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0SlNPTignL3Bvc3RzLmpzb24nKS50aGVuKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAvLyBvbiBmdWxmaWxsbWVudFxuICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAvLyBvbiByZWplY3Rpb25cbiAgfSk7XG4gIGBgYFxuXG4gIFVubGlrZSBjYWxsYmFja3MsIHByb21pc2VzIGFyZSBncmVhdCBjb21wb3NhYmxlIHByaW1pdGl2ZXMuXG5cbiAgYGBganNcbiAgUHJvbWlzZS5hbGwoW1xuICAgIGdldEpTT04oJy9wb3N0cycpLFxuICAgIGdldEpTT04oJy9jb21tZW50cycpXG4gIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICB2YWx1ZXNbMF0gLy8gPT4gcG9zdHNKU09OXG4gICAgdmFsdWVzWzFdIC8vID0+IGNvbW1lbnRzSlNPTlxuXG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSk7XG4gIGBgYFxuXG4gIEBjbGFzcyBQcm9taXNlXG4gIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmVyXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQGNvbnN0cnVjdG9yXG4qL1xuXG52YXIgUHJvbWlzZSQxID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcm9taXNlKHJlc29sdmVyKSB7XG4gICAgdGhpc1tQUk9NSVNFX0lEXSA9IG5leHRJZCgpO1xuICAgIHRoaXMuX3Jlc3VsdCA9IHRoaXMuX3N0YXRlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N1YnNjcmliZXJzID0gW107XG5cbiAgICBpZiAobm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICAgIHR5cGVvZiByZXNvbHZlciAhPT0gJ2Z1bmN0aW9uJyAmJiBuZWVkc1Jlc29sdmVyKCk7XG4gICAgICB0aGlzIGluc3RhbmNlb2YgUHJvbWlzZSA/IGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKSA6IG5lZWRzTmV3KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gIFRoZSBwcmltYXJ5IHdheSBvZiBpbnRlcmFjdGluZyB3aXRoIGEgcHJvbWlzZSBpcyB0aHJvdWdoIGl0cyBgdGhlbmAgbWV0aG9kLFxuICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZVxuICByZWFzb24gd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24odXNlcil7XG4gICAgLy8gdXNlciBpcyBhdmFpbGFibGVcbiAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAvLyB1c2VyIGlzIHVuYXZhaWxhYmxlLCBhbmQgeW91IGFyZSBnaXZlbiB0aGUgcmVhc29uIHdoeVxuICB9KTtcbiAgYGBgXG4gICBDaGFpbmluZ1xuICAtLS0tLS0tLVxuICAgVGhlIHJldHVybiB2YWx1ZSBvZiBgdGhlbmAgaXMgaXRzZWxmIGEgcHJvbWlzZS4gIFRoaXMgc2Vjb25kLCAnZG93bnN0cmVhbSdcbiAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudFxuICBvciByZWplY3Rpb24gaGFuZGxlciwgb3IgcmVqZWN0ZWQgaWYgdGhlIGhhbmRsZXIgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiB1c2VyLm5hbWU7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gJ2RlZmF1bHQgbmFtZSc7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHVzZXJOYW1lKSB7XG4gICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgIC8vIHdpbGwgYmUgYCdkZWZhdWx0IG5hbWUnYFxuICB9KTtcbiAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdXNlciwgYnV0IHN0aWxsIHVuaGFwcHknKTtcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScpO1xuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIGlmIGBmaW5kVXNlcmAgZnVsZmlsbGVkLCBgcmVhc29uYCB3aWxsIGJlICdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScuXG4gICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gIH0pO1xuICBgYGBcbiAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICB0aHJvdyBuZXcgUGVkYWdvZ2ljYWxFeGNlcHRpb24oJ1Vwc3RyZWFtIGVycm9yJyk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gbmV2ZXIgcmVhY2hlZFxuICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIC8vIFRoZSBgUGVkZ2Fnb2NpYWxFeGNlcHRpb25gIGlzIHByb3BhZ2F0ZWQgYWxsIHRoZSB3YXkgZG93biB0byBoZXJlXG4gIH0pO1xuICBgYGBcbiAgIEFzc2ltaWxhdGlvblxuICAtLS0tLS0tLS0tLS1cbiAgIFNvbWV0aW1lcyB0aGUgdmFsdWUgeW91IHdhbnQgdG8gcHJvcGFnYXRlIHRvIGEgZG93bnN0cmVhbSBwcm9taXNlIGNhbiBvbmx5IGJlXG4gIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgZnVsZmlsbG1lbnQgb3IgcmVqZWN0aW9uIGhhbmRsZXIuIFRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCB0aGVuIGJlIHBlbmRpbmdcbiAgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXMgc2V0dGxlZC4gVGhpcyBpcyBjYWxsZWQgKmFzc2ltaWxhdGlvbiouXG4gICBgYGBqc1xuICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKGNvbW1lbnRzKSB7XG4gICAgLy8gVGhlIHVzZXIncyBjb21tZW50cyBhcmUgbm93IGF2YWlsYWJsZVxuICB9KTtcbiAgYGBgXG4gICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cbiAgIGBgYGpzXG4gIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgIHJldHVybiBmaW5kQ29tbWVudHNCeUF1dGhvcih1c2VyKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoY29tbWVudHMpIHtcbiAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIHJlamVjdHMsIHdlJ2xsIGhhdmUgdGhlIHJlYXNvbiBoZXJlXG4gIH0pO1xuICBgYGBcbiAgIFNpbXBsZSBFeGFtcGxlXG4gIC0tLS0tLS0tLS0tLS0tXG4gICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gICBgYGBqYXZhc2NyaXB0XG4gIGxldCByZXN1bHQ7XG4gICB0cnkge1xuICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAvLyBzdWNjZXNzXG4gIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgLy8gZmFpbHVyZVxuICB9XG4gIGBgYFxuICAgRXJyYmFjayBFeGFtcGxlXG4gICBgYGBqc1xuICBmaW5kUmVzdWx0KGZ1bmN0aW9uKHJlc3VsdCwgZXJyKXtcbiAgICBpZiAoZXJyKSB7XG4gICAgICAvLyBmYWlsdXJlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN1Y2Nlc3NcbiAgICB9XG4gIH0pO1xuICBgYGBcbiAgIFByb21pc2UgRXhhbXBsZTtcbiAgIGBgYGphdmFzY3JpcHRcbiAgZmluZFJlc3VsdCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KXtcbiAgICAvLyBzdWNjZXNzXG4gIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgLy8gZmFpbHVyZVxuICB9KTtcbiAgYGBgXG4gICBBZHZhbmNlZCBFeGFtcGxlXG4gIC0tLS0tLS0tLS0tLS0tXG4gICBTeW5jaHJvbm91cyBFeGFtcGxlXG4gICBgYGBqYXZhc2NyaXB0XG4gIGxldCBhdXRob3IsIGJvb2tzO1xuICAgdHJ5IHtcbiAgICBhdXRob3IgPSBmaW5kQXV0aG9yKCk7XG4gICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAvLyBzdWNjZXNzXG4gIH0gY2F0Y2gocmVhc29uKSB7XG4gICAgLy8gZmFpbHVyZVxuICB9XG4gIGBgYFxuICAgRXJyYmFjayBFeGFtcGxlXG4gICBgYGBqc1xuICAgZnVuY3Rpb24gZm91bmRCb29rcyhib29rcykge1xuICAgfVxuICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcbiAgIH1cbiAgIGZpbmRBdXRob3IoZnVuY3Rpb24oYXV0aG9yLCBlcnIpe1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgIC8vIGZhaWx1cmVcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmluZEJvb29rc0J5QXV0aG9yKGF1dGhvciwgZnVuY3Rpb24oYm9va3MsIGVycikge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAgICAgICBmYWlsdXJlKHJlYXNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgZmFpbHVyZShlcnIpO1xuICAgICAgfVxuICAgICAgLy8gc3VjY2Vzc1xuICAgIH1cbiAgfSk7XG4gIGBgYFxuICAgUHJvbWlzZSBFeGFtcGxlO1xuICAgYGBgamF2YXNjcmlwdFxuICBmaW5kQXV0aG9yKCkuXG4gICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgdGhlbihmdW5jdGlvbihib29rcyl7XG4gICAgICAvLyBmb3VuZCBib29rc1xuICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nXG4gIH0pO1xuICBgYGBcbiAgIEBtZXRob2QgdGhlblxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICBAcGFyYW0ge0Z1bmN0aW9ufSBvblJlamVjdGVkXG4gIFVzZWZ1bCBmb3IgdG9vbGluZy5cbiAgQHJldHVybiB7UHJvbWlzZX1cbiAgKi9cblxuICAvKipcbiAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICBhcyB0aGUgY2F0Y2ggYmxvY2sgb2YgYSB0cnkvY2F0Y2ggc3RhdGVtZW50LlxuICBgYGBqc1xuICBmdW5jdGlvbiBmaW5kQXV0aG9yKCl7XG4gIHRocm93IG5ldyBFcnJvcignY291bGRuJ3QgZmluZCB0aGF0IGF1dGhvcicpO1xuICB9XG4gIC8vIHN5bmNocm9ub3VzXG4gIHRyeSB7XG4gIGZpbmRBdXRob3IoKTtcbiAgfSBjYXRjaChyZWFzb24pIHtcbiAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgfVxuICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gIGZpbmRBdXRob3IoKS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICB9KTtcbiAgYGBgXG4gIEBtZXRob2QgY2F0Y2hcbiAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3Rpb25cbiAgVXNlZnVsIGZvciB0b29saW5nLlxuICBAcmV0dXJuIHtQcm9taXNlfVxuICAqL1xuXG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgfTtcblxuICAvKipcbiAgICBgZmluYWxseWAgd2lsbCBiZSBpbnZva2VkIHJlZ2FyZGxlc3Mgb2YgdGhlIHByb21pc2UncyBmYXRlIGp1c3QgYXMgbmF0aXZlXG4gICAgdHJ5L2NhdGNoL2ZpbmFsbHkgYmVoYXZlc1xuICBcbiAgICBTeW5jaHJvbm91cyBleGFtcGxlOlxuICBcbiAgICBgYGBqc1xuICAgIGZpbmRBdXRob3IoKSB7XG4gICAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQXV0aG9yKCk7XG4gICAgfVxuICBcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZpbmRBdXRob3IoKTsgLy8gc3VjY2VlZCBvciBmYWlsXG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgcmV0dXJuIGZpbmRPdGhlckF1dGhlcigpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBhbHdheXMgcnVuc1xuICAgICAgLy8gZG9lc24ndCBhZmZlY3QgdGhlIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgICBgYGBcbiAgXG4gICAgQXN5bmNocm9ub3VzIGV4YW1wbGU6XG4gIFxuICAgIGBgYGpzXG4gICAgZmluZEF1dGhvcigpLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICByZXR1cm4gZmluZE90aGVyQXV0aGVyKCk7XG4gICAgfSkuZmluYWxseShmdW5jdGlvbigpe1xuICAgICAgLy8gYXV0aG9yIHdhcyBlaXRoZXIgZm91bmQsIG9yIG5vdFxuICAgIH0pO1xuICAgIGBgYFxuICBcbiAgICBAbWV0aG9kIGZpbmFsbHlcbiAgICBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgIEByZXR1cm4ge1Byb21pc2V9XG4gICovXG5cblxuICBQcm9taXNlLnByb3RvdHlwZS5maW5hbGx5ID0gZnVuY3Rpb24gX2ZpbmFsbHkoY2FsbGJhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvcjtcblxuICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xuICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yLnJlc29sdmUoY2FsbGJhY2soKSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhyb3cgcmVhc29uO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oY2FsbGJhY2ssIGNhbGxiYWNrKTtcbiAgfTtcblxuICByZXR1cm4gUHJvbWlzZTtcbn0oKTtcblxuUHJvbWlzZSQxLnByb3RvdHlwZS50aGVuID0gdGhlbjtcblByb21pc2UkMS5hbGwgPSBhbGw7XG5Qcm9taXNlJDEucmFjZSA9IHJhY2U7XG5Qcm9taXNlJDEucmVzb2x2ZSA9IHJlc29sdmUkMTtcblByb21pc2UkMS5yZWplY3QgPSByZWplY3QkMTtcblByb21pc2UkMS5fc2V0U2NoZWR1bGVyID0gc2V0U2NoZWR1bGVyO1xuUHJvbWlzZSQxLl9zZXRBc2FwID0gc2V0QXNhcDtcblByb21pc2UkMS5fYXNhcCA9IGFzYXA7XG5cbi8qZ2xvYmFsIHNlbGYqL1xuZnVuY3Rpb24gcG9seWZpbGwoKSB7XG4gIHZhciBsb2NhbCA9IHZvaWQgMDtcblxuICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsb2NhbCA9IHNlbGY7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsIGZhaWxlZCBiZWNhdXNlIGdsb2JhbCBvYmplY3QgaXMgdW5hdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBQID0gbG9jYWwuUHJvbWlzZTtcblxuICBpZiAoUCkge1xuICAgIHZhciBwcm9taXNlVG9TdHJpbmcgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBwcm9taXNlVG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUC5yZXNvbHZlKCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNpbGVudGx5IGlnbm9yZWRcbiAgICB9XG5cbiAgICBpZiAocHJvbWlzZVRvU3RyaW5nID09PSAnW29iamVjdCBQcm9taXNlXScgJiYgIVAuY2FzdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGxvY2FsLlByb21pc2UgPSBQcm9taXNlJDE7XG59XG5cbi8vIFN0cmFuZ2UgY29tcGF0Li5cblByb21pc2UkMS5wb2x5ZmlsbCA9IHBvbHlmaWxsO1xuUHJvbWlzZSQxLlByb21pc2UgPSBQcm9taXNlJDE7XG5cbnJldHVybiBQcm9taXNlJDE7XG5cbn0pKSk7XG5cblxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lczYtcHJvbWlzZS5tYXBcbiIsIi8qIGJ1aWxkOiBgbm9kZSBidWlsZC5qcyBtb2R1bGVzPUFMTCBleGNsdWRlPWdlc3R1cmVzLGFjY2Vzc29ycyxlcmFzaW5nIHJlcXVpcmVqcyBtaW5pZmllcj11Z2xpZnlqc2AgKi9cbi8qISBGYWJyaWMuanMgQ29weXJpZ2h0IDIwMDgtMjAxNSwgUHJpbnRpbyAoSnVyaXkgWmF5dHNldiwgTWF4aW0gQ2hlcm55YWspICovXG5cbnZhciBmYWJyaWMgPSBmYWJyaWMgfHwgeyB2ZXJzaW9uOiAnNS4yLjEnIH07XG5pZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gIGV4cG9ydHMuZmFicmljID0gZmFicmljO1xufVxuLyogX0FNRF9TVEFSVF8gKi9cbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICBkZWZpbmUoW10sIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFicmljOyB9KTtcbn1cbi8qIF9BTURfRU5EXyAqL1xuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgaWYgKGRvY3VtZW50IGluc3RhbmNlb2YgKHR5cGVvZiBIVE1MRG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gSFRNTERvY3VtZW50IDogRG9jdW1lbnQpKSB7XG4gICAgZmFicmljLmRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gIH1cbiAgZWxzZSB7XG4gICAgZmFicmljLmRvY3VtZW50ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCcnKTtcbiAgfVxuICBmYWJyaWMud2luZG93ID0gd2luZG93O1xufVxuZWxzZSB7XG4gIC8vIGFzc3VtZSB3ZSdyZSBydW5uaW5nIHVuZGVyIG5vZGUuanMgd2hlbiBkb2N1bWVudC93aW5kb3cgYXJlIG5vdCBwcmVzZW50XG4gIHZhciBqc2RvbSA9IHJlcXVpcmUoJ2pzZG9tJyk7XG4gIHZhciB2aXJ0dWFsV2luZG93ID0gbmV3IGpzZG9tLkpTRE9NKFxuICAgIGRlY29kZVVSSUNvbXBvbmVudCgnJTNDIURPQ1RZUEUlMjBodG1sJTNFJTNDaHRtbCUzRSUzQ2hlYWQlM0UlM0MlMkZoZWFkJTNFJTNDYm9keSUzRSUzQyUyRmJvZHklM0UlM0MlMkZodG1sJTNFJyksXG4gICAge1xuICAgICAgZmVhdHVyZXM6IHtcbiAgICAgICAgRmV0Y2hFeHRlcm5hbFJlc291cmNlczogWydpbWcnXVxuICAgICAgfSxcbiAgICAgIHJlc291cmNlczogJ3VzYWJsZSdcbiAgICB9KS53aW5kb3c7XG4gIGZhYnJpYy5kb2N1bWVudCA9IHZpcnR1YWxXaW5kb3cuZG9jdW1lbnQ7XG4gIGZhYnJpYy5qc2RvbUltcGxGb3JXcmFwcGVyID0gcmVxdWlyZSgnanNkb20vbGliL2pzZG9tL2xpdmluZy9nZW5lcmF0ZWQvdXRpbHMnKS5pbXBsRm9yV3JhcHBlcjtcbiAgZmFicmljLm5vZGVDYW52YXMgPSByZXF1aXJlKCdqc2RvbS9saWIvanNkb20vdXRpbHMnKS5DYW52YXM7XG4gIGZhYnJpYy53aW5kb3cgPSB2aXJ0dWFsV2luZG93O1xuICBET01QYXJzZXIgPSBmYWJyaWMud2luZG93LkRPTVBhcnNlcjtcbn1cblxuLyoqXG4gKiBUcnVlIHdoZW4gaW4gZW52aXJvbm1lbnQgdGhhdCBzdXBwb3J0cyB0b3VjaCBldmVudHNcbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xuZmFicmljLmlzVG91Y2hTdXBwb3J0ZWQgPSAnb250b3VjaHN0YXJ0JyBpbiBmYWJyaWMud2luZG93IHx8ICdvbnRvdWNoc3RhcnQnIGluIGZhYnJpYy5kb2N1bWVudCB8fFxuICAoZmFicmljLndpbmRvdyAmJiBmYWJyaWMud2luZG93Lm5hdmlnYXRvciAmJiBmYWJyaWMud2luZG93Lm5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA+IDApO1xuXG4vKipcbiAqIFRydWUgd2hlbiBpbiBlbnZpcm9ubWVudCB0aGF0J3MgcHJvYmFibHkgTm9kZS5qc1xuICogQHR5cGUgYm9vbGVhblxuICovXG5mYWJyaWMuaXNMaWtlbHlOb2RlID0gdHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcblxuLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuLyoqXG4gKiBBdHRyaWJ1dGVzIHBhcnNlZCBmcm9tIGFsbCBTVkcgZWxlbWVudHNcbiAqIEB0eXBlIGFycmF5XG4gKi9cbmZhYnJpYy5TSEFSRURfQVRUUklCVVRFUyA9IFtcbiAgJ2Rpc3BsYXknLFxuICAndHJhbnNmb3JtJyxcbiAgJ2ZpbGwnLCAnZmlsbC1vcGFjaXR5JywgJ2ZpbGwtcnVsZScsXG4gICdvcGFjaXR5JyxcbiAgJ3N0cm9rZScsICdzdHJva2UtZGFzaGFycmF5JywgJ3N0cm9rZS1saW5lY2FwJywgJ3N0cm9rZS1kYXNob2Zmc2V0JyxcbiAgJ3N0cm9rZS1saW5lam9pbicsICdzdHJva2UtbWl0ZXJsaW1pdCcsXG4gICdzdHJva2Utb3BhY2l0eScsICdzdHJva2Utd2lkdGgnLFxuICAnaWQnLCAncGFpbnQtb3JkZXInLCAndmVjdG9yLWVmZmVjdCcsXG4gICdpbnN0YW50aWF0ZWRfYnlfdXNlJywgJ2NsaXAtcGF0aCcsXG5dO1xuLyogX0ZST01fU1ZHX0VORF8gKi9cblxuLyoqXG4gKiBQaXhlbCBwZXIgSW5jaCBhcyBhIGRlZmF1bHQgdmFsdWUgc2V0IHRvIDk2LiBDYW4gYmUgY2hhbmdlZCBmb3IgbW9yZSByZWFsaXN0aWMgY29udmVyc2lvbi5cbiAqL1xuZmFicmljLkRQSSA9IDk2O1xuZmFicmljLnJlTnVtID0gJyg/OlstK10/KD86XFxcXGQrfFxcXFxkKlxcXFwuXFxcXGQrKSg/OltlRV1bLStdP1xcXFxkKyk/KSc7XG5mYWJyaWMuY29tbWFXc3AgPSAnKD86XFxcXHMrLD9cXFxccyp8LFxcXFxzKiknO1xuZmFicmljLnJlUGF0aENvbW1hbmQgPSAvKFstK10/KChcXGQrXFwuXFxkKyl8KChcXGQrKXwoXFwuXFxkKykpKSg/OltlRV1bLStdP1xcZCspPykvaWc7XG5mYWJyaWMucmVOb25Xb3JkID0gL1sgXFxuXFwuLDshXFw/XFwtXS87XG5mYWJyaWMuZm9udFBhdGhzID0geyB9O1xuZmFicmljLmlNYXRyaXggPSBbMSwgMCwgMCwgMSwgMCwgMF07XG5mYWJyaWMuc3ZnTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG4vKipcbiAqIFBpeGVsIGxpbWl0IGZvciBjYWNoZSBjYW52YXNlcy4gMU1weCAsIDRNcHggc2hvdWxkIGJlIGZpbmUuXG4gKiBAc2luY2UgMS43LjE0XG4gKiBAdHlwZSBOdW1iZXJcbiAqIEBkZWZhdWx0XG4gKi9cbmZhYnJpYy5wZXJmTGltaXRTaXplVG90YWwgPSAyMDk3MTUyO1xuXG4vKipcbiAqIFBpeGVsIGxpbWl0IGZvciBjYWNoZSBjYW52YXNlcyB3aWR0aCBvciBoZWlnaHQuIElFIGZpeGVzIHRoZSBtYXhpbXVtIGF0IDUwMDBcbiAqIEBzaW5jZSAxLjcuMTRcbiAqIEB0eXBlIE51bWJlclxuICogQGRlZmF1bHRcbiAqL1xuZmFicmljLm1heENhY2hlU2lkZUxpbWl0ID0gNDA5NjtcblxuLyoqXG4gKiBMb3dlc3QgcGl4ZWwgbGltaXQgZm9yIGNhY2hlIGNhbnZhc2VzLCBzZXQgYXQgMjU2UFhcbiAqIEBzaW5jZSAxLjcuMTRcbiAqIEB0eXBlIE51bWJlclxuICogQGRlZmF1bHRcbiAqL1xuZmFicmljLm1pbkNhY2hlU2lkZUxpbWl0ID0gMjU2O1xuXG4vKipcbiAqIENhY2hlIE9iamVjdCBmb3Igd2lkdGhzIG9mIGNoYXJzIGluIHRleHQgcmVuZGVyaW5nLlxuICovXG5mYWJyaWMuY2hhcldpZHRoc0NhY2hlID0geyB9O1xuXG4vKipcbiAqIGlmIHdlYmdsIGlzIGVuYWJsZWQgYW5kIGF2YWlsYWJsZSwgdGV4dHVyZVNpemUgd2lsbCBkZXRlcm1pbmUgdGhlIHNpemVcbiAqIG9mIHRoZSBjYW52YXMgYmFja2VuZFxuICogQHNpbmNlIDIuMC4wXG4gKiBAdHlwZSBOdW1iZXJcbiAqIEBkZWZhdWx0XG4gKi9cbmZhYnJpYy50ZXh0dXJlU2l6ZSA9IDIwNDg7XG5cbi8qKlxuICogV2hlbiAndHJ1ZScsIHN0eWxlIGluZm9ybWF0aW9uIGlzIG5vdCByZXRhaW5lZCB3aGVuIGNvcHkvcGFzdGluZyB0ZXh0LCBtYWtpbmdcbiAqIHBhc3RlZCB0ZXh0IHVzZSBkZXN0aW5hdGlvbiBzdHlsZS5cbiAqIERlZmF1bHRzIHRvICdmYWxzZScuXG4gKiBAdHlwZSBCb29sZWFuXG4gKiBAZGVmYXVsdFxuICovXG5mYWJyaWMuZGlzYWJsZVN0eWxlQ29weVBhc3RlID0gZmFsc2U7XG5cbi8qKlxuICogRW5hYmxlIHdlYmdsIGZvciBmaWx0ZXJpbmcgcGljdHVyZSBpcyBhdmFpbGFibGVcbiAqIEEgZmlsdGVyaW5nIGJhY2tlbmQgd2lsbCBiZSBpbml0aWFsaXplZCwgdGhpcyB3aWxsIGJvdGggdGFrZSBtZW1vcnkgYW5kXG4gKiB0aW1lIHNpbmNlIGEgZGVmYXVsdCAyMDQ4eDIwNDggY2FudmFzIHdpbGwgYmUgY3JlYXRlZCBmb3IgdGhlIGdsIGNvbnRleHRcbiAqIEBzaW5jZSAyLjAuMFxuICogQHR5cGUgQm9vbGVhblxuICogQGRlZmF1bHRcbiAqL1xuZmFicmljLmVuYWJsZUdMRmlsdGVyaW5nID0gdHJ1ZTtcblxuLyoqXG4gKiBEZXZpY2UgUGl4ZWwgUmF0aW9cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvc2FmYXJpL2RvY3VtZW50YXRpb24vQXVkaW9WaWRlby9Db25jZXB0dWFsL0hUTUwtY2FudmFzLWd1aWRlL1NldHRpbmdVcHRoZUNhbnZhcy9TZXR0aW5nVXB0aGVDYW52YXMuaHRtbFxuICovXG5mYWJyaWMuZGV2aWNlUGl4ZWxSYXRpbyA9IGZhYnJpYy53aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmYWJyaWMud2luZG93LndlYmtpdERldmljZVBpeGVsUmF0aW8gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmFicmljLndpbmRvdy5tb3pEZXZpY2VQaXhlbFJhdGlvIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDE7XG4vKipcbiAqIEJyb3dzZXItc3BlY2lmaWMgY29uc3RhbnQgdG8gYWRqdXN0IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRC5zaGFkb3dCbHVyIHZhbHVlLFxuICogd2hpY2ggaXMgdW5pdGxlc3MgYW5kIG5vdCByZW5kZXJlZCBlcXVhbGx5IGFjcm9zcyBicm93c2Vycy5cbiAqXG4gKiBWYWx1ZXMgdGhhdCB3b3JrIHF1aXRlIHdlbGwgKGFzIG9mIE9jdG9iZXIgMjAxNykgYXJlOlxuICogLSBDaHJvbWU6IDEuNVxuICogLSBFZGdlOiAxLjc1XG4gKiAtIEZpcmVmb3g6IDAuOVxuICogLSBTYWZhcmk6IDAuOTVcbiAqXG4gKiBAc2luY2UgMi4wLjBcbiAqIEB0eXBlIE51bWJlclxuICogQGRlZmF1bHQgMVxuICovXG5mYWJyaWMuYnJvd3NlclNoYWRvd0JsdXJDb25zdGFudCA9IDE7XG5cbi8qKlxuICogVGhpcyBvYmplY3QgY29udGFpbnMgdGhlIHJlc3VsdCBvZiBhcmMgdG8gYmV6aWVyIGNvbnZlcnNpb24gZm9yIGZhc3RlciByZXRyaWV2aW5nIGlmIHRoZSBzYW1lIGFyYyBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgYWdhaW4uXG4gKiBJdCB3YXMgYW4gaW50ZXJuYWwgdmFyaWFibGUsIGlzIGFjY2Vzc2libGUgc2luY2UgdmVyc2lvbiAyLjMuNFxuICovXG5mYWJyaWMuYXJjVG9TZWdtZW50c0NhY2hlID0geyB9O1xuXG4vKipcbiAqIFRoaXMgb2JqZWN0IGtlZXBzIHRoZSByZXN1bHRzIG9mIHRoZSBib3VuZHNPZkN1cnZlIGNhbGN1bGF0aW9uIG1hcHBlZCBieSB0aGUgam9pbmVkIGFyZ3VtZW50cyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIGl0LlxuICogSXQgZG9lcyBzcGVlZCB1cCBjYWxjdWxhdGlvbiwgaWYgeW91IHBhcnNlIGFuZCBhZGQgYWx3YXlzIHRoZSBzYW1lIHBhdGhzLCBidXQgaW4gY2FzZSBvZiBoZWF2eSB1c2FnZSBvZiBmcmVlZHJhd2luZ1xuICogeW91IGRvIG5vdCBnZXQgYW55IHNwZWVkIGJlbmVmaXQgYW5kIHlvdSBnZXQgYSBiaWcgb2JqZWN0IGluIG1lbW9yeS5cbiAqIFRoZSBvYmplY3Qgd2FzIGEgcHJpdmF0ZSB2YXJpYWJsZSBiZWZvcmUsIHdoaWxlIG5vdyBpcyBhcHBlbmRlZCB0byB0aGUgbGliIHNvIHRoYXQgeW91IGhhdmUgYWNjZXNzIHRvIGl0IGFuZCB5b3VcbiAqIGNhbiBldmVudHVhbGx5IGNsZWFyIGl0LlxuICogSXQgd2FzIGFuIGludGVybmFsIHZhcmlhYmxlLCBpcyBhY2Nlc3NpYmxlIHNpbmNlIHZlcnNpb24gMi4zLjRcbiAqL1xuZmFicmljLmJvdW5kc09mQ3VydmVDYWNoZSA9IHsgfTtcblxuLyoqXG4gKiBJZiBkaXNhYmxlZCBib3VuZHNPZkN1cnZlQ2FjaGUgaXMgbm90IHVzZWQuIEZvciBhcHBzIHRoYXQgbWFrZSBoZWF2eSB1c2FnZSBvZiBwZW5jaWwgZHJhd2luZyBwcm9iYWJseSBkaXNhYmxpbmcgaXQgaXMgYmV0dGVyXG4gKiBAZGVmYXVsdCB0cnVlXG4gKi9cbmZhYnJpYy5jYWNoZXNCb3VuZHNPZkN1cnZlID0gdHJ1ZTtcblxuLyoqXG4gKiBTa2lwIHBlcmZvcm1hbmNlIHRlc3Rpbmcgb2Ygc2V0dXBHTENvbnRleHQgYW5kIGZvcmNlIHRoZSB1c2Ugb2YgcHV0SW1hZ2VEYXRhIHRoYXQgc2VlbXMgdG8gYmUgdGhlIG9uZSB0aGF0IHdvcmtzIGJlc3Qgb25cbiAqIENocm9tZSArIG9sZCBoYXJkd2FyZS4gaWYgeW91ciB1c2VycyBhcmUgZXhwZXJpZW5jaW5nIGVtcHR5IGltYWdlcyBhZnRlciBmaWx0ZXJpbmcgeW91IG1heSB0cnkgdG8gZm9yY2UgdGhpcyB0byB0cnVlXG4gKiB0aGlzIGhhcyB0byBiZSBzZXQgYmVmb3JlIGluc3RhbnRpYXRpbmcgdGhlIGZpbHRlcmluZyBiYWNrZW5kICggYmVmb3JlIGZpbHRlcmluZyB0aGUgZmlyc3QgaW1hZ2UgKVxuICogQHR5cGUgQm9vbGVhblxuICogQGRlZmF1bHQgZmFsc2VcbiAqL1xuZmFicmljLmZvcmNlR0xQdXRJbWFnZURhdGEgPSBmYWxzZTtcblxuZmFicmljLmluaXRGaWx0ZXJCYWNrZW5kID0gZnVuY3Rpb24oKSB7XG4gIGlmIChmYWJyaWMuZW5hYmxlR0xGaWx0ZXJpbmcgJiYgZmFicmljLmlzV2ViZ2xTdXBwb3J0ZWQgJiYgZmFicmljLmlzV2ViZ2xTdXBwb3J0ZWQoZmFicmljLnRleHR1cmVTaXplKSkge1xuICAgIGNvbnNvbGUubG9nKCdtYXggdGV4dHVyZSBzaXplOiAnICsgZmFicmljLm1heFRleHR1cmVTaXplKTtcbiAgICByZXR1cm4gKG5ldyBmYWJyaWMuV2ViZ2xGaWx0ZXJCYWNrZW5kKHsgdGlsZVNpemU6IGZhYnJpYy50ZXh0dXJlU2l6ZSB9KSk7XG4gIH1cbiAgZWxzZSBpZiAoZmFicmljLkNhbnZhczJkRmlsdGVyQmFja2VuZCkge1xuICAgIHJldHVybiAobmV3IGZhYnJpYy5DYW52YXMyZEZpbHRlckJhY2tlbmQoKSk7XG4gIH1cbn07XG5cblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgLy8gZW5zdXJlIGdsb2JhbGl0eSBldmVuIGlmIGVudGlyZSBsaWJyYXJ5IHdlcmUgZnVuY3Rpb24gd3JhcHBlZCAoYXMgaW4gTWV0ZW9yLmpzIHBhY2thZ2luZyBzeXN0ZW0pXG4gIHdpbmRvdy5mYWJyaWMgPSBmYWJyaWM7XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIGZ1bmN0aW9uIF9yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGV2ZW50TGlzdGVuZXIgPSB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXTtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgZXZlbnRMaXN0ZW5lcltldmVudExpc3RlbmVyLmluZGV4T2YoaGFuZGxlcildID0gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmFicmljLnV0aWwuYXJyYXkuZmlsbChldmVudExpc3RlbmVyLCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE9ic2VydmVzIHNwZWNpZmllZCBldmVudFxuICAgKiBAbWVtYmVyT2YgZmFicmljLk9ic2VydmFibGVcbiAgICogQGFsaWFzIG9uXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZXZlbnROYW1lIEV2ZW50IG5hbWUgKGVnLiAnYWZ0ZXI6cmVuZGVyJykgb3Igb2JqZWN0IHdpdGgga2V5L3ZhbHVlIHBhaXJzIChlZy4geydhZnRlcjpyZW5kZXInOiBoYW5kbGVyLCAnc2VsZWN0aW9uOmNsZWFyZWQnOiBoYW5kbGVyfSlcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBGdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGEgbm90aWZpY2F0aW9uIHdoZW4gYW4gZXZlbnQgb2YgdGhlIHNwZWNpZmllZCB0eXBlIG9jY3Vyc1xuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIG9uKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgIGlmICghdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnMgPSB7IH07XG4gICAgfVxuICAgIC8vIG9uZSBvYmplY3Qgd2l0aCBrZXkvdmFsdWUgcGFpcnMgd2FzIHBhc3NlZFxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIGV2ZW50TmFtZSkge1xuICAgICAgICB0aGlzLm9uKHByb3AsIGV2ZW50TmFtZVtwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSkge1xuICAgICAgICB0aGlzLl9fZXZlbnRMaXN0ZW5lcnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgdGhpcy5fX2V2ZW50TGlzdGVuZXJzW2V2ZW50TmFtZV0ucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmdW5jdGlvbiBfb25jZShldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICB2YXIgX2hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBoYW5kbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLm9mZihldmVudE5hbWUsIF9oYW5kbGVyKTtcbiAgICB9LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbihldmVudE5hbWUsIF9oYW5kbGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2UoZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gICAgLy8gb25lIG9iamVjdCB3aXRoIGtleS92YWx1ZSBwYWlycyB3YXMgcGFzc2VkXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gZXZlbnROYW1lKSB7XG4gICAgICAgIF9vbmNlLmNhbGwodGhpcywgcHJvcCwgZXZlbnROYW1lW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBfb25jZS5jYWxsKHRoaXMsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIGV2ZW50IG9ic2VydmluZyBmb3IgYSBwYXJ0aWN1bGFyIGV2ZW50IGhhbmRsZXIuIENhbGxpbmcgdGhpcyBtZXRob2RcbiAgICogd2l0aG91dCBhcmd1bWVudHMgcmVtb3ZlcyBhbGwgaGFuZGxlcnMgZm9yIGFsbCBldmVudHNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5PYnNlcnZhYmxlXG4gICAqIEBhbGlhcyBvZmZcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBldmVudE5hbWUgRXZlbnQgbmFtZSAoZWcuICdhZnRlcjpyZW5kZXInKSBvciBvYmplY3Qgd2l0aCBrZXkvdmFsdWUgcGFpcnMgKGVnLiB7J2FmdGVyOnJlbmRlcic6IGhhbmRsZXIsICdzZWxlY3Rpb246Y2xlYXJlZCc6IGhhbmRsZXJ9KVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIEZ1bmN0aW9uIHRvIGJlIGRlbGV0ZWQgZnJvbSBFdmVudExpc3RlbmVyc1xuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIG9mZihldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgICBpZiAoIXRoaXMuX19ldmVudExpc3RlbmVycykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gcmVtb3ZlIGFsbCBrZXkvdmFsdWUgcGFpcnMgKGV2ZW50IG5hbWUgLT4gZXZlbnQgaGFuZGxlcilcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZm9yIChldmVudE5hbWUgaW4gdGhpcy5fX2V2ZW50TGlzdGVuZXJzKSB7XG4gICAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gb25lIG9iamVjdCB3aXRoIGtleS92YWx1ZSBwYWlycyB3YXMgcGFzc2VkXG4gICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIgcHJvcCBpbiBldmVudE5hbWUpIHtcbiAgICAgICAgX3JlbW92ZUV2ZW50TGlzdGVuZXIuY2FsbCh0aGlzLCBwcm9wLCBldmVudE5hbWVbcHJvcF0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIF9yZW1vdmVFdmVudExpc3RlbmVyLmNhbGwodGhpcywgZXZlbnROYW1lLCBoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRmlyZXMgZXZlbnQgd2l0aCBhbiBvcHRpb25hbCBvcHRpb25zIG9iamVjdFxuICAgKiBAbWVtYmVyT2YgZmFicmljLk9ic2VydmFibGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50TmFtZSBFdmVudCBuYW1lIHRvIGZpcmVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIGZpcmUoZXZlbnROYW1lLCBvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLl9fZXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnNGb3JFdmVudCA9IHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdO1xuICAgIGlmICghbGlzdGVuZXJzRm9yRXZlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaXN0ZW5lcnNGb3JFdmVudC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbGlzdGVuZXJzRm9yRXZlbnRbaV0gJiYgbGlzdGVuZXJzRm9yRXZlbnRbaV0uY2FsbCh0aGlzLCBvcHRpb25zIHx8IHsgfSk7XG4gICAgfVxuICAgIHRoaXMuX19ldmVudExpc3RlbmVyc1tldmVudE5hbWVdID0gbGlzdGVuZXJzRm9yRXZlbnQuZmlsdGVyKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT09IGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBuYW1lc3BhY2UgZmFicmljLk9ic2VydmFibGVcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTIjZXZlbnRzfVxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2V2ZW50c3xFdmVudHMgZGVtb31cbiAgICovXG4gIGZhYnJpYy5PYnNlcnZhYmxlID0ge1xuICAgIGZpcmU6IGZpcmUsXG4gICAgb246IG9uLFxuICAgIG9uY2U6IG9uY2UsXG4gICAgb2ZmOiBvZmYsXG4gIH07XG59KSgpO1xuXG5cbi8qKlxuICogQG5hbWVzcGFjZSBmYWJyaWMuQ29sbGVjdGlvblxuICovXG5mYWJyaWMuQ29sbGVjdGlvbiA9IHtcblxuICBfb2JqZWN0czogW10sXG5cbiAgLyoqXG4gICAqIEFkZHMgb2JqZWN0cyB0byBjb2xsZWN0aW9uLCBDYW52YXMgb3IgR3JvdXAsIHRoZW4gcmVuZGVycyBjYW52YXNcbiAgICogKGlmIGByZW5kZXJPbkFkZFJlbW92ZWAgaXMgbm90IGBmYWxzZWApLlxuICAgKiBpbiBjYXNlIG9mIEdyb3VwIG5vIGNoYW5nZXMgdG8gYm91bmRpbmcgYm94IGFyZSBtYWRlLlxuICAgKiBPYmplY3RzIHNob3VsZCBiZSBpbnN0YW5jZXMgb2YgKG9yIGluaGVyaXQgZnJvbSkgZmFicmljLk9iamVjdFxuICAgKiBVc2Ugb2YgdGhpcyBmdW5jdGlvbiBpcyBoaWdobHkgZGlzY291cmFnZWQgZm9yIGdyb3Vwcy5cbiAgICogeW91IGNhbiBhZGQgYSBidW5jaCBvZiBvYmplY3RzIHdpdGggdGhlIGFkZCBtZXRob2QgYnV0IHRoZW4geW91IE5FRURcbiAgICogdG8gcnVuIGEgYWRkV2l0aFVwZGF0ZSBjYWxsIGZvciB0aGUgR3JvdXAgY2xhc3Mgb3IgcG9zaXRpb24vYmJveCB3aWxsIGJlIHdyb25nLlxuICAgKiBAcGFyYW0gey4uLmZhYnJpYy5PYmplY3R9IG9iamVjdCBaZXJvIG9yIG1vcmUgZmFicmljIGluc3RhbmNlc1xuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGFkZDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX29iamVjdHMucHVzaC5hcHBseSh0aGlzLl9vYmplY3RzLCBhcmd1bWVudHMpO1xuICAgIGlmICh0aGlzLl9vbk9iamVjdEFkZGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuX29uT2JqZWN0QWRkZWQoYXJndW1lbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW5kZXJPbkFkZFJlbW92ZSAmJiB0aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogSW5zZXJ0cyBhbiBvYmplY3QgaW50byBjb2xsZWN0aW9uIGF0IHNwZWNpZmllZCBpbmRleCwgdGhlbiByZW5kZXJzIGNhbnZhcyAoaWYgYHJlbmRlck9uQWRkUmVtb3ZlYCBpcyBub3QgYGZhbHNlYClcbiAgICogQW4gb2JqZWN0IHNob3VsZCBiZSBhbiBpbnN0YW5jZSBvZiAob3IgaW5oZXJpdCBmcm9tKSBmYWJyaWMuT2JqZWN0XG4gICAqIFVzZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIGhpZ2hseSBkaXNjb3VyYWdlZCBmb3IgZ3JvdXBzLlxuICAgKiB5b3UgY2FuIGFkZCBhIGJ1bmNoIG9mIG9iamVjdHMgd2l0aCB0aGUgaW5zZXJ0QXQgbWV0aG9kIGJ1dCB0aGVuIHlvdSBORUVEXG4gICAqIHRvIHJ1biBhIGFkZFdpdGhVcGRhdGUgY2FsbCBmb3IgdGhlIEdyb3VwIGNsYXNzIG9yIHBvc2l0aW9uL2Jib3ggd2lsbCBiZSB3cm9uZy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gaW5zZXJ0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBJbmRleCB0byBpbnNlcnQgb2JqZWN0IGF0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbm9uU3BsaWNpbmcgV2hlbiBgdHJ1ZWAsIG5vIHNwbGljaW5nIChzaGlmdGluZykgb2Ygb2JqZWN0cyBvY2N1cnNcbiAgICogQHJldHVybiB7U2VsZn0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBpbnNlcnRBdDogZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIG5vblNwbGljaW5nKSB7XG4gICAgdmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzO1xuICAgIGlmIChub25TcGxpY2luZykge1xuICAgICAgb2JqZWN0c1tpbmRleF0gPSBvYmplY3Q7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb2JqZWN0cy5zcGxpY2UoaW5kZXgsIDAsIG9iamVjdCk7XG4gICAgfVxuICAgIHRoaXMuX29uT2JqZWN0QWRkZWQgJiYgdGhpcy5fb25PYmplY3RBZGRlZChvYmplY3QpO1xuICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgb2JqZWN0cyBmcm9tIGEgY29sbGVjdGlvbiwgdGhlbiByZW5kZXJzIGNhbnZhcyAoaWYgYHJlbmRlck9uQWRkUmVtb3ZlYCBpcyBub3QgYGZhbHNlYClcbiAgICogQHBhcmFtIHsuLi5mYWJyaWMuT2JqZWN0fSBvYmplY3QgWmVybyBvciBtb3JlIGZhYnJpYyBpbnN0YW5jZXNcbiAgICogQHJldHVybiB7U2VsZn0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcbiAgICAgICAgaW5kZXgsIHNvbWV0aGluZ1JlbW92ZWQgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGluZGV4ID0gb2JqZWN0cy5pbmRleE9mKGFyZ3VtZW50c1tpXSk7XG5cbiAgICAgIC8vIG9ubHkgY2FsbCBvbk9iamVjdFJlbW92ZWQgaWYgYW4gb2JqZWN0IHdhcyBhY3R1YWxseSByZW1vdmVkXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgIHNvbWV0aGluZ1JlbW92ZWQgPSB0cnVlO1xuICAgICAgICBvYmplY3RzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMuX29uT2JqZWN0UmVtb3ZlZCAmJiB0aGlzLl9vbk9iamVjdFJlbW92ZWQoYXJndW1lbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHNvbWV0aGluZ1JlbW92ZWQgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGdpdmVuIGZ1bmN0aW9uIGZvciBlYWNoIG9iamVjdCBpbiB0aGlzIGdyb3VwXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqICAgICAgICAgICAgICAgICAgIENhbGxiYWNrIGludm9rZWQgd2l0aCBjdXJyZW50IG9iamVjdCBhcyBmaXJzdCBhcmd1bWVudCxcbiAgICogICAgICAgICAgICAgICAgICAgaW5kZXggLSBhcyBzZWNvbmQgYW5kIGFuIGFycmF5IG9mIGFsbCBvYmplY3RzIC0gYXMgdGhpcmQuXG4gICAqICAgICAgICAgICAgICAgICAgIENhbGxiYWNrIGlzIGludm9rZWQgaW4gYSBjb250ZXh0IG9mIEdsb2JhbCBPYmplY3QgKGUuZy4gYHdpbmRvd2ApXG4gICAqICAgICAgICAgICAgICAgICAgIHdoZW4gbm8gYGNvbnRleHRgIGFyZ3VtZW50IGlzIGdpdmVuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IENvbnRleHQgKGFrYSB0aGlzT2JqZWN0KVxuICAgKiBAcmV0dXJuIHtTZWxmfSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGZvckVhY2hPYmplY3Q6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgdmFyIG9iamVjdHMgPSB0aGlzLmdldE9iamVjdHMoKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY2FsbGJhY2suY2FsbChjb250ZXh0LCBvYmplY3RzW2ldLCBpLCBvYmplY3RzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgY2hpbGRyZW4gb2JqZWN0cyBvZiB0aGlzIGluc3RhbmNlXG4gICAqIFR5cGUgcGFyYW1ldGVyIGludHJvZHVjZWQgaW4gMS4zLjEwXG4gICAqIHNpbmNlIDIuMy41IHRoaXMgbWV0aG9kIHJldHVybiBhbHdheXMgYSBDT1BZIG9mIHRoZSBhcnJheTtcbiAgICogQHBhcmFtIHtTdHJpbmd9IFt0eXBlXSBXaGVuIHNwZWNpZmllZCwgb25seSBvYmplY3RzIG9mIHRoaXMgdHlwZSBhcmUgcmV0dXJuZWRcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBnZXRPYmplY3RzOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMuX29iamVjdHMuY29uY2F0KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9vYmplY3RzLmZpbHRlcihmdW5jdGlvbihvKSB7XG4gICAgICByZXR1cm4gby50eXBlID09PSB0eXBlO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG9iamVjdCBhdCBzcGVjaWZpZWQgaW5kZXhcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAqIEByZXR1cm4ge1NlbGZ9IHRoaXNBcmdcbiAgICovXG4gIGl0ZW06IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiB0aGlzLl9vYmplY3RzW2luZGV4XTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGNvbGxlY3Rpb24gY29udGFpbnMgbm8gb2JqZWN0c1xuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGNvbGxlY3Rpb24gaXMgZW1wdHlcbiAgICovXG4gIGlzRW1wdHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fb2JqZWN0cy5sZW5ndGggPT09IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaXplIG9mIGEgY29sbGVjdGlvbiAoaS5lOiBsZW5ndGggb2YgYW4gYXJyYXkgY29udGFpbmluZyBpdHMgb2JqZWN0cylcbiAgICogQHJldHVybiB7TnVtYmVyfSBDb2xsZWN0aW9uIHNpemVcbiAgICovXG4gIHNpemU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9vYmplY3RzLmxlbmd0aDtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIGNvbGxlY3Rpb24gY29udGFpbnMgYW4gb2JqZWN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNoZWNrIGFnYWluc3RcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZGVlcD1mYWxzZV0gYHRydWVgIHRvIGNoZWNrIGFsbCBkZXNjZW5kYW50cywgYGZhbHNlYCB0byBjaGVjayBvbmx5IGBfb2JqZWN0c2BcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIGNvbGxlY3Rpb24gY29udGFpbnMgYW4gb2JqZWN0XG4gICAqL1xuICBjb250YWluczogZnVuY3Rpb24gKG9iamVjdCwgZGVlcCkge1xuICAgIGlmICh0aGlzLl9vYmplY3RzLmluZGV4T2Yob2JqZWN0KSA+IC0xKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGVlcCkge1xuICAgICAgcmV0dXJuIHRoaXMuX29iamVjdHMuc29tZShmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqLmNvbnRhaW5zID09PSAnZnVuY3Rpb24nICYmIG9iai5jb250YWlucyhvYmplY3QsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBudW1iZXIgcmVwcmVzZW50YXRpb24gb2YgYSBjb2xsZWN0aW9uIGNvbXBsZXhpdHlcbiAgICogQHJldHVybiB7TnVtYmVyfSBjb21wbGV4aXR5XG4gICAqL1xuICBjb21wbGV4aXR5OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29iamVjdHMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBjdXJyZW50KSB7XG4gICAgICBtZW1vICs9IGN1cnJlbnQuY29tcGxleGl0eSA/IGN1cnJlbnQuY29tcGxleGl0eSgpIDogMDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH0sIDApO1xuICB9XG59O1xuXG5cbi8qKlxuICogQG5hbWVzcGFjZSBmYWJyaWMuQ29tbW9uTWV0aG9kc1xuICovXG5mYWJyaWMuQ29tbW9uTWV0aG9kcyA9IHtcblxuICAvKipcbiAgICogU2V0cyBvYmplY3QncyBwcm9wZXJ0aWVzIGZyb20gb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBfc2V0T3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xuICAgICAgdGhpcy5zZXQocHJvcCwgb3B0aW9uc1twcm9wXSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW2ZpbGxlcl0gT3B0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtwcm9wZXJ0eV0gcHJvcGVydHkgdG8gc2V0IHRoZSBHcmFkaWVudCB0b1xuICAgKi9cbiAgX2luaXRHcmFkaWVudDogZnVuY3Rpb24oZmlsbGVyLCBwcm9wZXJ0eSkge1xuICAgIGlmIChmaWxsZXIgJiYgZmlsbGVyLmNvbG9yU3RvcHMgJiYgIShmaWxsZXIgaW5zdGFuY2VvZiBmYWJyaWMuR3JhZGllbnQpKSB7XG4gICAgICB0aGlzLnNldChwcm9wZXJ0eSwgbmV3IGZhYnJpYy5HcmFkaWVudChmaWxsZXIpKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbZmlsbGVyXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge1N0cmluZ30gW3Byb3BlcnR5XSBwcm9wZXJ0eSB0byBzZXQgdGhlIFBhdHRlcm4gdG9cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBjYWxsYmFjayB0byBpbnZva2UgYWZ0ZXIgcGF0dGVybiBsb2FkXG4gICAqL1xuICBfaW5pdFBhdHRlcm46IGZ1bmN0aW9uKGZpbGxlciwgcHJvcGVydHksIGNhbGxiYWNrKSB7XG4gICAgaWYgKGZpbGxlciAmJiBmaWxsZXIuc291cmNlICYmICEoZmlsbGVyIGluc3RhbmNlb2YgZmFicmljLlBhdHRlcm4pKSB7XG4gICAgICB0aGlzLnNldChwcm9wZXJ0eSwgbmV3IGZhYnJpYy5QYXR0ZXJuKGZpbGxlciwgY2FsbGJhY2spKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zZXRPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgICB0aGlzLl9zZXQocHJvcCwgb2JqW3Byb3BdKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgcHJvcGVydHkgdG8gYSBnaXZlbiB2YWx1ZS4gV2hlbiBjaGFuZ2luZyBwb3NpdGlvbi9kaW1lbnNpb24gLXJlbGF0ZWQgcHJvcGVydGllcyAobGVmdCwgdG9wLCBzY2FsZSwgYW5nbGUsIGV0Yy4pIGBzZXRgIGRvZXMgbm90IHVwZGF0ZSBwb3NpdGlvbiBvZiBvYmplY3QncyBib3JkZXJzL2NvbnRyb2xzLiBJZiB5b3UgbmVlZCB0byB1cGRhdGUgdGhvc2UsIGNhbGwgYHNldENvb3JkcygpYC5cbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBrZXkgUHJvcGVydHkgbmFtZSBvciBvYmplY3QgKGlmIG9iamVjdCwgaXRlcmF0ZSBvdmVyIHRoZSBvYmplY3QgcHJvcGVydGllcylcbiAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IHZhbHVlIFByb3BlcnR5IHZhbHVlIChpZiBmdW5jdGlvbiwgdGhlIHZhbHVlIGlzIHBhc3NlZCBpbnRvIGl0IGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgYSBuZXcgb25lKVxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgdGhpcy5fc2V0T2JqZWN0KGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1trZXldID0gdmFsdWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgc3BlY2lmaWVkIHByb3BlcnR5IGZyb20gYHRydWVgIHRvIGBmYWxzZWAgb3IgZnJvbSBgZmFsc2VgIHRvIGB0cnVlYFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdG8gdG9nZ2xlXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgdG9nZ2xlOiBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KHByb3BlcnR5KTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHRoaXMuc2V0KHByb3BlcnR5LCAhdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQmFzaWMgZ2V0dGVyXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSBQcm9wZXJ0eSBuYW1lXG4gICAqIEByZXR1cm4geyp9IHZhbHVlIG9mIGEgcHJvcGVydHlcbiAgICovXG4gIGdldDogZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gIH1cbn07XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gIHZhciBzcXJ0ID0gTWF0aC5zcXJ0LFxuICAgICAgYXRhbjIgPSBNYXRoLmF0YW4yLFxuICAgICAgcG93ID0gTWF0aC5wb3csXG4gICAgICBQaUJ5MTgwID0gTWF0aC5QSSAvIDE4MCxcbiAgICAgIFBpQnkyID0gTWF0aC5QSSAvIDI7XG5cbiAgLyoqXG4gICAqIEBuYW1lc3BhY2UgZmFicmljLnV0aWxcbiAgICovXG4gIGZhYnJpYy51dGlsID0ge1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBjb3Mgb2YgYW4gYW5nbGUsIGF2b2lkaW5nIHJldHVybmluZyBmbG9hdHMgZm9yIGtub3duIHJlc3VsdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIHRoZSBhbmdsZSBpbiByYWRpYW5zIG9yIGluIGRlZ3JlZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBjb3M6IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHsgcmV0dXJuIDE7IH1cbiAgICAgIGlmIChhbmdsZSA8IDApIHtcbiAgICAgICAgLy8gY29zKGEpID0gY29zKC1hKVxuICAgICAgICBhbmdsZSA9IC1hbmdsZTtcbiAgICAgIH1cbiAgICAgIHZhciBhbmdsZVNsaWNlID0gYW5nbGUgLyBQaUJ5MjtcbiAgICAgIHN3aXRjaCAoYW5nbGVTbGljZSkge1xuICAgICAgICBjYXNlIDE6IGNhc2UgMzogcmV0dXJuIDA7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGguY29zKGFuZ2xlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBzaW4gb2YgYW4gYW5nbGUsIGF2b2lkaW5nIHJldHVybmluZyBmbG9hdHMgZm9yIGtub3duIHJlc3VsdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIHRoZSBhbmdsZSBpbiByYWRpYW5zIG9yIGluIGRlZ3JlZVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBzaW46IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHsgcmV0dXJuIDA7IH1cbiAgICAgIHZhciBhbmdsZVNsaWNlID0gYW5nbGUgLyBQaUJ5Miwgc2lnbiA9IDE7XG4gICAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICAgIC8vIHNpbigtYSkgPSAtc2luKGEpXG4gICAgICAgIHNpZ24gPSAtMTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoYW5nbGVTbGljZSkge1xuICAgICAgICBjYXNlIDE6IHJldHVybiBzaWduO1xuICAgICAgICBjYXNlIDI6IHJldHVybiAwO1xuICAgICAgICBjYXNlIDM6IHJldHVybiAtc2lnbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNYXRoLnNpbihhbmdsZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdmFsdWUgZnJvbSBhbiBhcnJheS5cbiAgICAgKiBQcmVzZW5jZSBvZiB2YWx1ZSAoYW5kIGl0cyBwb3NpdGlvbiBpbiBhbiBhcnJheSkgaXMgZGV0ZXJtaW5lZCB2aWEgYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gb3JpZ2luYWwgYXJyYXlcbiAgICAgKi9cbiAgICByZW1vdmVGcm9tQXJyYXk6IGZ1bmN0aW9uKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGlkeCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xuICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgYXJyYXkuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDIgc3BlY2lmaWVkIG9uZXMuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtaW4gbG93ZXIgbGltaXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWF4IHVwcGVyIGxpbWl0XG4gICAgICogQHJldHVybiB7TnVtYmVyfSByYW5kb20gdmFsdWUgKGJldHdlZW4gbWluIGFuZCBtYXgpXG4gICAgICovXG4gICAgZ2V0UmFuZG9tSW50OiBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgZGVncmVlcyB0byByYWRpYW5zLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVncmVlcyB2YWx1ZSBpbiBkZWdyZWVzXG4gICAgICogQHJldHVybiB7TnVtYmVyfSB2YWx1ZSBpbiByYWRpYW5zXG4gICAgICovXG4gICAgZGVncmVlc1RvUmFkaWFuczogZnVuY3Rpb24oZGVncmVlcykge1xuICAgICAgcmV0dXJuIGRlZ3JlZXMgKiBQaUJ5MTgwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIHJhZGlhbnMgdG8gZGVncmVlcy5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGlhbnMgdmFsdWUgaW4gcmFkaWFuc1xuICAgICAqIEByZXR1cm4ge051bWJlcn0gdmFsdWUgaW4gZGVncmVlc1xuICAgICAqL1xuICAgIHJhZGlhbnNUb0RlZ3JlZXM6IGZ1bmN0aW9uKHJhZGlhbnMpIHtcbiAgICAgIHJldHVybiByYWRpYW5zIC8gUGlCeTE4MDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBgcG9pbnRgIGFyb3VuZCBgb3JpZ2luYCB3aXRoIGByYWRpYW5zYFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgVGhlIHBvaW50IHRvIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBvcmlnaW4gVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaWFucyBUaGUgcmFkaWFucyBvZiB0aGUgYW5nbGUgZm9yIHRoZSByb3RhdGlvblxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gVGhlIG5ldyByb3RhdGVkIHBvaW50XG4gICAgICovXG4gICAgcm90YXRlUG9pbnQ6IGZ1bmN0aW9uKHBvaW50LCBvcmlnaW4sIHJhZGlhbnMpIHtcbiAgICAgIHZhciBuZXdQb2ludCA9IG5ldyBmYWJyaWMuUG9pbnQocG9pbnQueCAtIG9yaWdpbi54LCBwb2ludC55IC0gb3JpZ2luLnkpLFxuICAgICAgICAgIHYgPSBmYWJyaWMudXRpbC5yb3RhdGVWZWN0b3IobmV3UG9pbnQsIHJhZGlhbnMpO1xuICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuUG9pbnQodi54LCB2LnkpLmFkZEVxdWFscyhvcmlnaW4pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGB2ZWN0b3JgIHdpdGggYHJhZGlhbnNgXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB2ZWN0b3IgVGhlIHZlY3RvciB0byByb3RhdGUgKHggYW5kIHkpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGlhbnMgVGhlIHJhZGlhbnMgb2YgdGhlIGFuZ2xlIGZvciB0aGUgcm90YXRpb25cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBuZXcgcm90YXRlZCBwb2ludFxuICAgICAqL1xuICAgIHJvdGF0ZVZlY3RvcjogZnVuY3Rpb24odmVjdG9yLCByYWRpYW5zKSB7XG4gICAgICB2YXIgc2luID0gZmFicmljLnV0aWwuc2luKHJhZGlhbnMpLFxuICAgICAgICAgIGNvcyA9IGZhYnJpYy51dGlsLmNvcyhyYWRpYW5zKSxcbiAgICAgICAgICByeCA9IHZlY3Rvci54ICogY29zIC0gdmVjdG9yLnkgKiBzaW4sXG4gICAgICAgICAgcnkgPSB2ZWN0b3IueCAqIHNpbiArIHZlY3Rvci55ICogY29zO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcngsXG4gICAgICAgIHk6IHJ5XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdmV0b3IgZnJvbSBwb2ludHMgcmVwcmVzZW50ZWQgYXMgYSBwb2ludFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFBvaW50XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHhcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0geVxuICAgICAqXG4gICAgICogQHBhcmFtIHtQb2ludH0gZnJvbVxuICAgICAqIEBwYXJhbSB7UG9pbnR9IHRvXG4gICAgICogQHJldHVybnMge1BvaW50fSB2ZWN0b3JcbiAgICAgKi9cbiAgICBjcmVhdGVWZWN0b3I6IGZ1bmN0aW9uIChmcm9tLCB0bykge1xuICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuUG9pbnQodG8ueCAtIGZyb20ueCwgdG8ueSAtIGZyb20ueSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYW5nbGUgYmV0d2VlbiAyIHZlY3RvcnMgdXNpbmcgZG90IHByb2R1Y3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtQb2ludH0gYVxuICAgICAqIEBwYXJhbSB7UG9pbnR9IGJcbiAgICAgKiBAcmV0dXJucyB0aGUgYW5nbGUgaW4gcmFkaWFuIGJldHdlZW4gdGhlIHZlY3RvcnNcbiAgICAgKi9cbiAgICBjYWxjQW5nbGVCZXR3ZWVuVmVjdG9yczogZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBNYXRoLmFjb3MoKGEueCAqIGIueCArIGEueSAqIGIueSkgLyAoTWF0aC5oeXBvdChhLngsIGEueSkgKiBNYXRoLmh5cG90KGIueCwgYi55KSkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtQb2ludH0gdlxuICAgICAqIEByZXR1cm5zIHtQb2ludH0gdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgdW5pdCB2ZWN0b3Igb2YgcG9pbnRpbmcgdG8gdGhlIGRpcmVjdGlvbiBvZiBgdmBcbiAgICAgKi9cbiAgICBnZXRIYXRWZWN0b3I6IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gbmV3IGZhYnJpYy5Qb2ludCh2LngsIHYueSkubXVsdGlwbHkoMSAvIE1hdGguaHlwb3Qodi54LCB2LnkpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7UG9pbnR9IEFcbiAgICAgKiBAcGFyYW0ge1BvaW50fSBCXG4gICAgICogQHBhcmFtIHtQb2ludH0gQ1xuICAgICAqIEByZXR1cm5zIHt7IHZlY3RvcjogUG9pbnQsIGFuZ2xlOiBudW1iZXIgfX0gdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgYmlzZWN0b3Igb2YgQSBhbmQgQSdzIGFuZ2xlXG4gICAgICovXG4gICAgZ2V0QmlzZWN0b3I6IGZ1bmN0aW9uIChBLCBCLCBDKSB7XG4gICAgICB2YXIgQUIgPSBmYWJyaWMudXRpbC5jcmVhdGVWZWN0b3IoQSwgQiksIEFDID0gZmFicmljLnV0aWwuY3JlYXRlVmVjdG9yKEEsIEMpO1xuICAgICAgdmFyIGFscGhhID0gZmFicmljLnV0aWwuY2FsY0FuZ2xlQmV0d2VlblZlY3RvcnMoQUIsIEFDKTtcbiAgICAgIC8vICBjaGVjayBpZiBhbHBoYSBpcyByZWxhdGl2ZSB0byBBQi0+QkNcbiAgICAgIHZhciBybyA9IGZhYnJpYy51dGlsLmNhbGNBbmdsZUJldHdlZW5WZWN0b3JzKGZhYnJpYy51dGlsLnJvdGF0ZVZlY3RvcihBQiwgYWxwaGEpLCBBQyk7XG4gICAgICB2YXIgcGhpID0gYWxwaGEgKiAocm8gPT09IDAgPyAxIDogLTEpIC8gMjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZlY3RvcjogZmFicmljLnV0aWwuZ2V0SGF0VmVjdG9yKGZhYnJpYy51dGlsLnJvdGF0ZVZlY3RvcihBQiwgcGhpKSksXG4gICAgICAgIGFuZ2xlOiBhbHBoYVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvamVjdCBzdHJva2Ugd2lkdGggb24gcG9pbnRzIHJldHVybmluZyAyIHByb2plY3Rpb25zIGZvciBlYWNoIHBvaW50IGFzIGZvbGxvd3M6XG4gICAgICogLSBgbWl0ZXJgOiAyIHBvaW50cyBjb3JyZXNwb25kaW5nIHRvIHRoZSBvdXRlciBib3VuZGFyeSBhbmQgdGhlIGlubmVyIGJvdW5kYXJ5IG9mIHN0cm9rZS5cbiAgICAgKiAtIGBiZXZlbGA6IDIgcG9pbnRzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGJldmVsIGJvdW5kYXJpZXMsIHRhbmdlbnQgdG8gdGhlIGJpc2VjdG9yLlxuICAgICAqIC0gYHJvdW5kYDogc2FtZSBhcyBgYmV2ZWxgXG4gICAgICogVXNlZCB0byBjYWxjdWxhdGUgb2JqZWN0J3MgYm91bmRpbmcgYm94XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7UG9pbnRbXX0gcG9pbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5zdHJva2VXaWR0aFxuICAgICAqIEBwYXJhbSB7J21pdGVyJ3wnYmV2ZWwnfCdyb3VuZCd9IG9wdGlvbnMuc3Ryb2tlTGluZUpvaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5zdHJva2VNaXRlckxpbWl0IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL1NWRy9BdHRyaWJ1dGUvc3Ryb2tlLW1pdGVybGltaXRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuc3Ryb2tlVW5pZm9ybVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnNjYWxlWFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnNjYWxlWVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wZW5QYXRoXSB3aGV0aGVyIHRoZSBzaGFwZSBpcyBvcGVuIG9yIG5vdCwgYWZmZWN0cyB0aGUgY2FsY3VsYXRpb25zIG9mIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHNcbiAgICAgKiBAcmV0dXJucyB7ZmFicmljLlBvaW50W119IGFycmF5IG9mIHNpemUgMm4vNG4gb2YgYWxsIHN1c3BlY3RlZCBwb2ludHNcbiAgICAgKi9cbiAgICBwcm9qZWN0U3Ryb2tlT25Qb2ludHM6IGZ1bmN0aW9uIChwb2ludHMsIG9wdGlvbnMsIG9wZW5QYXRoKSB7XG4gICAgICB2YXIgY29vcmRzID0gW10sIHMgPSBvcHRpb25zLnN0cm9rZVdpZHRoIC8gMixcbiAgICAgICAgICBzdHJva2VVbmlmb3JtU2NhbGFyID0gb3B0aW9ucy5zdHJva2VVbmlmb3JtID9cbiAgICAgICAgICAgIG5ldyBmYWJyaWMuUG9pbnQoMSAvIG9wdGlvbnMuc2NhbGVYLCAxIC8gb3B0aW9ucy5zY2FsZVkpIDogbmV3IGZhYnJpYy5Qb2ludCgxLCAxKSxcbiAgICAgICAgICBnZXRTdHJva2VIYXRWZWN0b3IgPSBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdmFyIHNjYWxhciA9IHMgLyAoTWF0aC5oeXBvdCh2LngsIHYueSkpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuUG9pbnQodi54ICogc2NhbGFyICogc3Ryb2tlVW5pZm9ybVNjYWxhci54LCB2LnkgKiBzY2FsYXIgKiBzdHJva2VVbmlmb3JtU2NhbGFyLnkpO1xuICAgICAgICAgIH07XG4gICAgICBpZiAocG9pbnRzLmxlbmd0aCA8PSAxKSB7cmV0dXJuIGNvb3Jkczt9XG4gICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAocCwgaW5kZXgpIHtcbiAgICAgICAgdmFyIEEgPSBuZXcgZmFicmljLlBvaW50KHAueCwgcC55KSwgQiwgQztcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgQyA9IHBvaW50c1tpbmRleCArIDFdO1xuICAgICAgICAgIEIgPSBvcGVuUGF0aCA/IGdldFN0cm9rZUhhdFZlY3RvcihmYWJyaWMudXRpbC5jcmVhdGVWZWN0b3IoQywgQSkpLmFkZEVxdWFscyhBKSA6IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IHBvaW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgQiA9IHBvaW50c1tpbmRleCAtIDFdO1xuICAgICAgICAgIEMgPSBvcGVuUGF0aCA/IGdldFN0cm9rZUhhdFZlY3RvcihmYWJyaWMudXRpbC5jcmVhdGVWZWN0b3IoQiwgQSkpLmFkZEVxdWFscyhBKSA6IHBvaW50c1swXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBCID0gcG9pbnRzW2luZGV4IC0gMV07XG4gICAgICAgICAgQyA9IHBvaW50c1tpbmRleCArIDFdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiaXNlY3RvciA9IGZhYnJpYy51dGlsLmdldEJpc2VjdG9yKEEsIEIsIEMpLFxuICAgICAgICAgICAgYmlzZWN0b3JWZWN0b3IgPSBiaXNlY3Rvci52ZWN0b3IsXG4gICAgICAgICAgICBhbHBoYSA9IGJpc2VjdG9yLmFuZ2xlLFxuICAgICAgICAgICAgc2NhbGFyLFxuICAgICAgICAgICAgbWl0ZXJWZWN0b3I7XG4gICAgICAgIGlmIChvcHRpb25zLnN0cm9rZUxpbmVKb2luID09PSAnbWl0ZXInKSB7XG4gICAgICAgICAgc2NhbGFyID0gLXMgLyBNYXRoLnNpbihhbHBoYSAvIDIpO1xuICAgICAgICAgIG1pdGVyVmVjdG9yID0gbmV3IGZhYnJpYy5Qb2ludChcbiAgICAgICAgICAgIGJpc2VjdG9yVmVjdG9yLnggKiBzY2FsYXIgKiBzdHJva2VVbmlmb3JtU2NhbGFyLngsXG4gICAgICAgICAgICBiaXNlY3RvclZlY3Rvci55ICogc2NhbGFyICogc3Ryb2tlVW5pZm9ybVNjYWxhci55XG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoTWF0aC5oeXBvdChtaXRlclZlY3Rvci54LCBtaXRlclZlY3Rvci55KSAvIHMgPD0gb3B0aW9ucy5zdHJva2VNaXRlckxpbWl0KSB7XG4gICAgICAgICAgICBjb29yZHMucHVzaChBLmFkZChtaXRlclZlY3RvcikpO1xuICAgICAgICAgICAgY29vcmRzLnB1c2goQS5zdWJ0cmFjdChtaXRlclZlY3RvcikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzY2FsYXIgPSAtcyAqIE1hdGguU1FSVDI7XG4gICAgICAgIG1pdGVyVmVjdG9yID0gbmV3IGZhYnJpYy5Qb2ludChcbiAgICAgICAgICBiaXNlY3RvclZlY3Rvci54ICogc2NhbGFyICogc3Ryb2tlVW5pZm9ybVNjYWxhci54LFxuICAgICAgICAgIGJpc2VjdG9yVmVjdG9yLnkgKiBzY2FsYXIgKiBzdHJva2VVbmlmb3JtU2NhbGFyLnlcbiAgICAgICAgKTtcbiAgICAgICAgY29vcmRzLnB1c2goQS5hZGQobWl0ZXJWZWN0b3IpKTtcbiAgICAgICAgY29vcmRzLnB1c2goQS5zdWJ0cmFjdChtaXRlclZlY3RvcikpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY29vcmRzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0cmFuc2Zvcm0gdCB0byBwb2ludCBwXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge2ZhYnJpYy5Qb2ludH0gcCBUaGUgcG9pbnQgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtICB7QXJyYXl9IHQgVGhlIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IFtpZ25vcmVPZmZzZXRdIEluZGljYXRlcyB0aGF0IHRoZSBvZmZzZXQgc2hvdWxkIG5vdCBiZSBhcHBsaWVkXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSBUaGUgdHJhbnNmb3JtZWQgcG9pbnRcbiAgICAgKi9cbiAgICB0cmFuc2Zvcm1Qb2ludDogZnVuY3Rpb24ocCwgdCwgaWdub3JlT2Zmc2V0KSB7XG4gICAgICBpZiAoaWdub3JlT2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgZmFicmljLlBvaW50KFxuICAgICAgICAgIHRbMF0gKiBwLnggKyB0WzJdICogcC55LFxuICAgICAgICAgIHRbMV0gKiBwLnggKyB0WzNdICogcC55XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IGZhYnJpYy5Qb2ludChcbiAgICAgICAgdFswXSAqIHAueCArIHRbMl0gKiBwLnkgKyB0WzRdLFxuICAgICAgICB0WzFdICogcC54ICsgdFszXSAqIHAueSArIHRbNV1cbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29vcmRpbmF0ZXMgb2YgcG9pbnRzJ3MgYm91bmRpbmcgcmVjdGFuZ2xlIChsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpXG4gICAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzIDQgcG9pbnRzIGFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gW3RyYW5zZm9ybV0gYW4gYXJyYXkgb2YgNiBudW1iZXJzIHJlcHJlc2VudGluZyBhIDJ4MyB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQgcHJvcGVydGllc1xuICAgICAqL1xuICAgIG1ha2VCb3VuZGluZ0JveEZyb21Qb2ludHM6IGZ1bmN0aW9uKHBvaW50cywgdHJhbnNmb3JtKSB7XG4gICAgICBpZiAodHJhbnNmb3JtKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgcG9pbnRzW2ldID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQocG9pbnRzW2ldLCB0cmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgeFBvaW50cyA9IFtwb2ludHNbMF0ueCwgcG9pbnRzWzFdLngsIHBvaW50c1syXS54LCBwb2ludHNbM10ueF0sXG4gICAgICAgICAgbWluWCA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbih4UG9pbnRzKSxcbiAgICAgICAgICBtYXhYID0gZmFicmljLnV0aWwuYXJyYXkubWF4KHhQb2ludHMpLFxuICAgICAgICAgIHdpZHRoID0gbWF4WCAtIG1pblgsXG4gICAgICAgICAgeVBvaW50cyA9IFtwb2ludHNbMF0ueSwgcG9pbnRzWzFdLnksIHBvaW50c1syXS55LCBwb2ludHNbM10ueV0sXG4gICAgICAgICAgbWluWSA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbih5UG9pbnRzKSxcbiAgICAgICAgICBtYXhZID0gZmFicmljLnV0aWwuYXJyYXkubWF4KHlQb2ludHMpLFxuICAgICAgICAgIGhlaWdodCA9IG1heFkgLSBtaW5ZO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBtaW5YLFxuICAgICAgICB0b3A6IG1pblksXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEludmVydCB0cmFuc2Zvcm1hdGlvbiB0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHQgVGhlIHRyYW5zZm9ybVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBUaGUgaW52ZXJ0ZWQgdHJhbnNmb3JtXG4gICAgICovXG4gICAgaW52ZXJ0VHJhbnNmb3JtOiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgYSA9IDEgLyAodFswXSAqIHRbM10gLSB0WzFdICogdFsyXSksXG4gICAgICAgICAgciA9IFthICogdFszXSwgLWEgKiB0WzFdLCAtYSAqIHRbMl0sIGEgKiB0WzBdXSxcbiAgICAgICAgICBvID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQoeyB4OiB0WzRdLCB5OiB0WzVdIH0sIHIsIHRydWUpO1xuICAgICAgcls0XSA9IC1vLng7XG4gICAgICByWzVdID0gLW8ueTtcbiAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBIHdyYXBwZXIgYXJvdW5kIE51bWJlciN0b0ZpeGVkLCB3aGljaCBjb250cmFyeSB0byBuYXRpdmUgbWV0aG9kIHJldHVybnMgbnVtYmVyLCBub3Qgc3RyaW5nLlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IG51bWJlciBudW1iZXIgdG8gb3BlcmF0ZSBvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmcmFjdGlvbkRpZ2l0cyBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIFwibGVhdmVcIlxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICB0b0ZpeGVkOiBmdW5jdGlvbihudW1iZXIsIGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChOdW1iZXIobnVtYmVyKS50b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGZyb20gYXR0cmlidXRlIHZhbHVlIHRvIHBpeGVsIHZhbHVlIGlmIGFwcGxpY2FibGUuXG4gICAgICogUmV0dXJucyBjb252ZXJ0ZWQgcGl4ZWxzIG9yIG9yaWdpbmFsIHZhbHVlIG5vdCBjb252ZXJ0ZWQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSB2YWx1ZSBudW1iZXIgdG8gb3BlcmF0ZSBvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBmb250U2l6ZVxuICAgICAqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9XG4gICAgICovXG4gICAgcGFyc2VVbml0OiBmdW5jdGlvbih2YWx1ZSwgZm9udFNpemUpIHtcbiAgICAgIHZhciB1bml0ID0gL1xcRHswLDJ9JC8uZXhlYyh2YWx1ZSksXG4gICAgICAgICAgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICBpZiAoIWZvbnRTaXplKSB7XG4gICAgICAgIGZvbnRTaXplID0gZmFicmljLlRleHQuREVGQVVMVF9TVkdfRk9OVF9TSVpFO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh1bml0WzBdKSB7XG4gICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICByZXR1cm4gbnVtYmVyICogZmFicmljLkRQSSAvIDI1LjQ7XG5cbiAgICAgICAgY2FzZSAnY20nOlxuICAgICAgICAgIHJldHVybiBudW1iZXIgKiBmYWJyaWMuRFBJIC8gMi41NDtcblxuICAgICAgICBjYXNlICdpbic6XG4gICAgICAgICAgcmV0dXJuIG51bWJlciAqIGZhYnJpYy5EUEk7XG5cbiAgICAgICAgY2FzZSAncHQnOlxuICAgICAgICAgIHJldHVybiBudW1iZXIgKiBmYWJyaWMuRFBJIC8gNzI7IC8vIG9yICogNCAvIDNcblxuICAgICAgICBjYXNlICdwYyc6XG4gICAgICAgICAgcmV0dXJuIG51bWJlciAqIGZhYnJpYy5EUEkgLyA3MiAqIDEyOyAvLyBvciAqIDE2XG5cbiAgICAgICAgY2FzZSAnZW0nOlxuICAgICAgICAgIHJldHVybiBudW1iZXIgKiBmb250U2l6ZTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHdoaWNoIGFsd2F5cyByZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgZmFsc2VGdW5jdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMga2xhc3MgXCJDbGFzc1wiIG9iamVjdCBvZiBnaXZlbiBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUeXBlIG9mIG9iamVjdCAoZWcuICdjaXJjbGUnKVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UgTmFtZXNwYWNlIHRvIGdldCBrbGFzcyBcIkNsYXNzXCIgb2JqZWN0IGZyb21cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGtsYXNzIFwiQ2xhc3NcIlxuICAgICAqL1xuICAgIGdldEtsYXNzOiBmdW5jdGlvbih0eXBlLCBuYW1lc3BhY2UpIHtcbiAgICAgIC8vIGNhcGl0YWxpemUgZmlyc3QgbGV0dGVyIG9ubHlcbiAgICAgIHR5cGUgPSBmYWJyaWMudXRpbC5zdHJpbmcuY2FtZWxpemUodHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLnJlc29sdmVOYW1lc3BhY2UobmFtZXNwYWNlKVt0eXBlXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhcnJheSBvZiBhdHRyaWJ1dGVzIGZvciBnaXZlbiBzdmcgdGhhdCBmYWJyaWMgcGFyc2VzXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVHlwZSBvZiBzdmcgZWxlbWVudCAoZWcuICdjaXJjbGUnKVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBzdHJpbmcgbmFtZXMgb2Ygc3VwcG9ydGVkIGF0dHJpYnV0ZXNcbiAgICAgKi9cbiAgICBnZXRTdmdBdHRyaWJ1dGVzOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IFtcbiAgICAgICAgJ2luc3RhbnRpYXRlZF9ieV91c2UnLFxuICAgICAgICAnc3R5bGUnLFxuICAgICAgICAnaWQnLFxuICAgICAgICAnY2xhc3MnXG4gICAgICBdO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2xpbmVhckdyYWRpZW50JzpcbiAgICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5jb25jYXQoWyd4MScsICd5MScsICd4MicsICd5MicsICdncmFkaWVudFVuaXRzJywgJ2dyYWRpZW50VHJhbnNmb3JtJ10pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyYWRpYWxHcmFkaWVudCc6XG4gICAgICAgICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMuY29uY2F0KFsnZ3JhZGllbnRVbml0cycsICdncmFkaWVudFRyYW5zZm9ybScsICdjeCcsICdjeScsICdyJywgJ2Z4JywgJ2Z5JywgJ2ZyJ10pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzdG9wJzpcbiAgICAgICAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5jb25jYXQoWydvZmZzZXQnLCAnc3RvcC1jb2xvcicsICdzdG9wLW9wYWNpdHknXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3Qgb2YgZ2l2ZW4gbmFtZXNwYWNlXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBOYW1lc3BhY2Ugc3RyaW5nIGUuZy4gJ2ZhYnJpYy5JbWFnZS5maWx0ZXInIG9yICdmYWJyaWMnXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgZm9yIGdpdmVuIG5hbWVzcGFjZSAoZGVmYXVsdCBmYWJyaWMpXG4gICAgICovXG4gICAgcmVzb2x2ZU5hbWVzcGFjZTogZnVuY3Rpb24obmFtZXNwYWNlKSB7XG4gICAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICByZXR1cm4gZmFicmljO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGFydHMgPSBuYW1lc3BhY2Uuc3BsaXQoJy4nKSxcbiAgICAgICAgICBsZW4gPSBwYXJ0cy5sZW5ndGgsIGksXG4gICAgICAgICAgb2JqID0gZ2xvYmFsIHx8IGZhYnJpYy53aW5kb3c7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBvYmogPSBvYmpbcGFydHNbaV1dO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBMb2FkcyBpbWFnZSBlbGVtZW50IGZyb20gZ2l2ZW4gdXJsIGFuZCBwYXNzZXMgaXQgdG8gYSBjYWxsYmFja1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVVJMIHJlcHJlc2VudGluZyBhbiBpbWFnZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrOyBpbnZva2VkIHdpdGggbG9hZGVkIGltYWdlXG4gICAgICogQHBhcmFtIHsqfSBbY29udGV4dF0gQ29udGV4dCB0byBpbnZva2UgY2FsbGJhY2sgaW5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2Nyb3NzT3JpZ2luXSBjcm9zc09yaWdpbiB2YWx1ZSB0byBzZXQgaW1hZ2UgZWxlbWVudCB0b1xuICAgICAqL1xuICAgIGxvYWRJbWFnZTogZnVuY3Rpb24odXJsLCBjYWxsYmFjaywgY29udGV4dCwgY3Jvc3NPcmlnaW4pIHtcbiAgICAgIGlmICghdXJsKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrLmNhbGwoY29udGV4dCwgdXJsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW1nID0gZmFicmljLnV0aWwuY3JlYXRlSW1hZ2UoKTtcblxuICAgICAgLyoqIEBpZ25vcmUgKi9cbiAgICAgIHZhciBvbkxvYWRDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChjb250ZXh0LCBpbWcsIGZhbHNlKTtcbiAgICAgICAgaW1nID0gaW1nLm9ubG9hZCA9IGltZy5vbmVycm9yID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGltZy5vbmxvYWQgPSBvbkxvYWRDYWxsYmFjaztcbiAgICAgIC8qKiBAaWdub3JlICovXG4gICAgICBpbWcub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmYWJyaWMubG9nKCdFcnJvciBsb2FkaW5nICcgKyBpbWcuc3JjKTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbChjb250ZXh0LCBudWxsLCB0cnVlKTtcbiAgICAgICAgaW1nID0gaW1nLm9ubG9hZCA9IGltZy5vbmVycm9yID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIC8vIGRhdGEtdXJscyBhcHBlYXIgdG8gYmUgYnVnZ3kgd2l0aCBjcm9zc09yaWdpblxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2thbmdheC9mYWJyaWMuanMvY29tbWl0L2QwYWJiOTBmMWNkNWM1ZWY5ZDJhOTRkM2ZiMjFhMjIzMzBkYTNlMGEjY29tbWl0Y29tbWVudC00NTEzNzY3XG4gICAgICAvLyBzZWUgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTMxNTE1MlxuICAgICAgLy8gICAgIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTkzNTA2OVxuICAgICAgLy8gY3Jvc3NPcmlnaW4gbnVsbCBpcyB0aGUgc2FtZSBhcyBub3Qgc2V0LlxuICAgICAgaWYgKHVybC5pbmRleE9mKCdkYXRhJykgIT09IDAgJiZcbiAgICAgICAgY3Jvc3NPcmlnaW4gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBjcm9zc09yaWdpbiAhPT0gbnVsbCkge1xuICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcbiAgICAgIH1cblxuICAgICAgLy8gSUUxMCAvIElFMTEtRml4OiBTVkcgY29udGVudHMgZnJvbSBkYXRhOiBVUklcbiAgICAgIC8vIHdpbGwgb25seSBiZSBhdmFpbGFibGUgaWYgdGhlIElNRyBpcyBwcmVzZW50XG4gICAgICAvLyBpbiB0aGUgRE9NIChhbmQgdmlzaWJsZSlcbiAgICAgIGlmICh1cmwuc3Vic3RyaW5nKDAsMTQpID09PSAnZGF0YTppbWFnZS9zdmcnKSB7XG4gICAgICAgIGltZy5vbmxvYWQgPSBudWxsO1xuICAgICAgICBmYWJyaWMudXRpbC5sb2FkSW1hZ2VJbkRvbShpbWcsIG9uTG9hZENhbGxiYWNrKTtcbiAgICAgIH1cblxuICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgU1ZHIGltYWdlIHdpdGggZGF0YTogVVJMIHRvIHRoZSBkb21cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW1nIEltYWdlIG9iamVjdCB3aXRoIGRhdGE6aW1hZ2Uvc3ZnIHNyY1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrOyBpbnZva2VkIHdpdGggbG9hZGVkIGltYWdlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBET00gZWxlbWVudCAoZGl2IGNvbnRhaW5pbmcgdGhlIFNWRyBpbWFnZSlcbiAgICAgKi9cbiAgICBsb2FkSW1hZ2VJbkRvbTogZnVuY3Rpb24oaW1nLCBvbkxvYWRDYWxsYmFjaykge1xuICAgICAgdmFyIGRpdiA9IGZhYnJpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRpdi5zdHlsZS53aWR0aCA9IGRpdi5zdHlsZS5oZWlnaHQgPSAnMXB4JztcbiAgICAgIGRpdi5zdHlsZS5sZWZ0ID0gZGl2LnN0eWxlLnRvcCA9ICctMTAwJSc7XG4gICAgICBkaXYuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgZGl2LmFwcGVuZENoaWxkKGltZyk7XG4gICAgICBmYWJyaWMuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmFwcGVuZENoaWxkKGRpdik7XG4gICAgICAvKipcbiAgICAgICAqIFdyYXAgaW4gZnVuY3Rpb24gdG86XG4gICAgICAgKiAgIDEuIENhbGwgZXhpc3RpbmcgY2FsbGJhY2tcbiAgICAgICAqICAgMi4gQ2xlYW51cCBET01cbiAgICAgICAqL1xuICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb25Mb2FkQ2FsbGJhY2soKTtcbiAgICAgICAgZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGl2KTtcbiAgICAgICAgZGl2ID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgY29ycmVzcG9uZGluZyBmYWJyaWMgaW5zdGFuY2VzIGZyb20gdGhlaXIgb2JqZWN0IHJlcHJlc2VudGF0aW9uc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvYmplY3RzIE9iamVjdHMgdG8gZW5saXZlblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFsbCBvYmplY3RzIGFyZSBjcmVhdGVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBOYW1lc3BhY2UgdG8gZ2V0IGtsYXNzIFwiQ2xhc3NcIiBvYmplY3QgZnJvbVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHJldml2ZXIgTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygb2JqZWN0IGVsZW1lbnRzLFxuICAgICAqIGNhbGxlZCBhZnRlciBlYWNoIGZhYnJpYyBvYmplY3QgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBlbmxpdmVuT2JqZWN0czogZnVuY3Rpb24ob2JqZWN0cywgY2FsbGJhY2ssIG5hbWVzcGFjZSwgcmV2aXZlcikge1xuICAgICAgb2JqZWN0cyA9IG9iamVjdHMgfHwgW107XG5cbiAgICAgIHZhciBlbmxpdmVuZWRPYmplY3RzID0gW10sXG4gICAgICAgICAgbnVtTG9hZGVkT2JqZWN0cyA9IDAsXG4gICAgICAgICAgbnVtVG90YWxPYmplY3RzID0gb2JqZWN0cy5sZW5ndGg7XG5cbiAgICAgIGZ1bmN0aW9uIG9uTG9hZGVkKCkge1xuICAgICAgICBpZiAoKytudW1Mb2FkZWRPYmplY3RzID09PSBudW1Ub3RhbE9iamVjdHMpIHtcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbmxpdmVuZWRPYmplY3RzLmZpbHRlcihmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgdW5kZWZpbmVkIG9iamVjdHMgKG9iamVjdHMgdGhhdCBnYXZlIGVycm9yKVxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFudW1Ub3RhbE9iamVjdHMpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW5saXZlbmVkT2JqZWN0cyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChvLCBpbmRleCkge1xuICAgICAgICAvLyBpZiBzcGFyc2UgYXJyYXlcbiAgICAgICAgaWYgKCFvIHx8ICFvLnR5cGUpIHtcbiAgICAgICAgICBvbkxvYWRlZCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2xhc3MgPSBmYWJyaWMudXRpbC5nZXRLbGFzcyhvLnR5cGUsIG5hbWVzcGFjZSk7XG4gICAgICAgIGtsYXNzLmZyb21PYmplY3QobywgZnVuY3Rpb24gKG9iaiwgZXJyb3IpIHtcbiAgICAgICAgICBlcnJvciB8fCAoZW5saXZlbmVkT2JqZWN0c1tpbmRleF0gPSBvYmopO1xuICAgICAgICAgIHJldml2ZXIgJiYgcmV2aXZlcihvLCBvYmosIGVycm9yKTtcbiAgICAgICAgICBvbkxvYWRlZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGNvcnJlc3BvbmRpbmcgZmFicmljIGluc3RhbmNlcyByZXNpZGluZyBpbiBhbiBvYmplY3QsIGUuZy4gYGNsaXBQYXRoYFxuICAgICAqIEBzZWUge0BsaW5rIGZhYnJpYy5PYmplY3QuRU5MSVZFTl9QUk9QU31cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0XSBhc3NpZ24gZW5saXZlZCBwcm9wcyB0byB0aGlzIG9iamVjdCAocGFzcyBudWxsIHRvIHNraXAgdGhpcylcbiAgICAgKiBAcGFyYW0geyhvYmplY3RzOmZhYnJpYy5PYmplY3RbXSkgPT4gdm9pZH0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBlbmxpdmVuT2JqZWN0RW5saXZhYmxlczogZnVuY3Rpb24gKG9iamVjdCwgY29udGV4dCwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBlbmxpdmVuUHJvcHMgPSBmYWJyaWMuT2JqZWN0LkVOTElWRU5fUFJPUFMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICEhb2JqZWN0W2tleV07IH0pO1xuICAgICAgZmFicmljLnV0aWwuZW5saXZlbk9iamVjdHMoZW5saXZlblByb3BzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvYmplY3Rba2V5XTsgfSksIGZ1bmN0aW9uIChlbmxpdmVkUHJvcHMpIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSB7fTtcbiAgICAgICAgZW5saXZlblByb3BzLmZvckVhY2goZnVuY3Rpb24gKGtleSwgaW5kZXgpIHtcbiAgICAgICAgICBvYmplY3RzW2tleV0gPSBlbmxpdmVkUHJvcHNbaW5kZXhdO1xuICAgICAgICAgIGNvbnRleHQgJiYgKGNvbnRleHRba2V5XSA9IGVubGl2ZWRQcm9wc1tpbmRleF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sob2JqZWN0cyk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuZCB3YWl0IGZvciBsb2FkaW5nIG9mIHBhdHRlcm5zXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdHRlcm5zIE9iamVjdHMgdG8gZW5saXZlblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFsbCBvYmplY3RzIGFyZSBjcmVhdGVkXG4gICAgICogY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgICAqL1xuICAgIGVubGl2ZW5QYXR0ZXJuczogZnVuY3Rpb24ocGF0dGVybnMsIGNhbGxiYWNrKSB7XG4gICAgICBwYXR0ZXJucyA9IHBhdHRlcm5zIHx8IFtdO1xuXG4gICAgICBmdW5jdGlvbiBvbkxvYWRlZCgpIHtcbiAgICAgICAgaWYgKCsrbnVtTG9hZGVkUGF0dGVybnMgPT09IG51bVBhdHRlcm5zKSB7XG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZW5saXZlbmVkUGF0dGVybnMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBlbmxpdmVuZWRQYXR0ZXJucyA9IFtdLFxuICAgICAgICAgIG51bUxvYWRlZFBhdHRlcm5zID0gMCxcbiAgICAgICAgICBudW1QYXR0ZXJucyA9IHBhdHRlcm5zLmxlbmd0aDtcblxuICAgICAgaWYgKCFudW1QYXR0ZXJucykge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhlbmxpdmVuZWRQYXR0ZXJucyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGF0dGVybnMuZm9yRWFjaChmdW5jdGlvbiAocCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHAgJiYgcC5zb3VyY2UpIHtcbiAgICAgICAgICBuZXcgZmFicmljLlBhdHRlcm4ocCwgZnVuY3Rpb24ocGF0dGVybikge1xuICAgICAgICAgICAgZW5saXZlbmVkUGF0dGVybnNbaW5kZXhdID0gcGF0dGVybjtcbiAgICAgICAgICAgIG9uTG9hZGVkKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZW5saXZlbmVkUGF0dGVybnNbaW5kZXhdID0gcDtcbiAgICAgICAgICBvbkxvYWRlZCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR3JvdXBzIFNWRyBlbGVtZW50cyAodXN1YWxseSB0aG9zZSByZXRyaWV2ZWQgZnJvbSBTVkcgZG9jdW1lbnQpXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGVsZW1lbnRzIFNWRyBlbGVtZW50cyB0byBncm91cFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBWYWx1ZSB0byBzZXQgc291cmNlUGF0aCB0b1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R8ZmFicmljLkdyb3VwfVxuICAgICAqL1xuICAgIGdyb3VwU1ZHRWxlbWVudHM6IGZ1bmN0aW9uKGVsZW1lbnRzLCBvcHRpb25zLCBwYXRoKSB7XG4gICAgICB2YXIgb2JqZWN0O1xuICAgICAgaWYgKGVsZW1lbnRzICYmIGVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZWxlbWVudHNbMF07XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy53aWR0aCAmJiBvcHRpb25zLmhlaWdodCkge1xuICAgICAgICAgIG9wdGlvbnMuY2VudGVyUG9pbnQgPSB7XG4gICAgICAgICAgICB4OiBvcHRpb25zLndpZHRoIC8gMixcbiAgICAgICAgICAgIHk6IG9wdGlvbnMuaGVpZ2h0IC8gMlxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIG9wdGlvbnMud2lkdGg7XG4gICAgICAgICAgZGVsZXRlIG9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBuZXcgZmFicmljLkdyb3VwKGVsZW1lbnRzLCBvcHRpb25zKTtcbiAgICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgb2JqZWN0LnNvdXJjZVBhdGggPSBwYXRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUG9wdWxhdGVzIGFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgb2YgYW5vdGhlciBvYmplY3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBTb3VyY2Ugb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm4ge0FycmF5fSBwcm9wZXJ0aWVzIFByb3BlcnRpZXMgbmFtZXMgdG8gaW5jbHVkZVxuICAgICAqL1xuICAgIHBvcHVsYXRlV2l0aFByb3BlcnRpZXM6IGZ1bmN0aW9uKHNvdXJjZSwgZGVzdGluYXRpb24sIHByb3BlcnRpZXMpIHtcbiAgICAgIGlmIChwcm9wZXJ0aWVzICYmIEFycmF5LmlzQXJyYXkocHJvcGVydGllcykpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAocHJvcGVydGllc1tpXSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnRpZXNbaV1dID0gc291cmNlW3Byb3BlcnRpZXNbaV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGNhbnZhcyBlbGVtZW50XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEByZXR1cm4ge0NhbnZhc0VsZW1lbnR9IGluaXRpYWxpemVkIGNhbnZhcyBlbGVtZW50XG4gICAgICovXG4gICAgY3JlYXRlQ2FudmFzRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFicmljLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2FudmFzIGVsZW1lbnQgdGhhdCBpcyBhIGNvcHkgb2YgYW5vdGhlciBhbmQgaXMgYWxzbyBwYWludGVkXG4gICAgICogQHBhcmFtIHtDYW52YXNFbGVtZW50fSBjYW52YXMgdG8gY29weSBzaXplIGFuZCBjb250ZW50IG9mXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEByZXR1cm4ge0NhbnZhc0VsZW1lbnR9IGluaXRpYWxpemVkIGNhbnZhcyBlbGVtZW50XG4gICAgICovXG4gICAgY29weUNhbnZhc0VsZW1lbnQ6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgdmFyIG5ld0NhbnZhcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgIG5ld0NhbnZhcy53aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgIG5ld0NhbnZhcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuICAgICAgbmV3Q2FudmFzLmdldENvbnRleHQoJzJkJykuZHJhd0ltYWdlKGNhbnZhcywgMCwgMCk7XG4gICAgICByZXR1cm4gbmV3Q2FudmFzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBzaW5jZSAyLjYuMCBtb3ZlZCBmcm9tIGNhbnZhcyBpbnN0YW5jZSB0byB1dGlsaXR5LlxuICAgICAqIEBwYXJhbSB7Q2FudmFzRWxlbWVudH0gY2FudmFzRWwgdG8gY29weSBzaXplIGFuZCBjb250ZW50IG9mXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZvcm1hdCAnanBlZycgb3IgJ3BuZycsIGluIHNvbWUgYnJvd3NlcnMgJ3dlYnAnIGlzIG9rIHRvb1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBxdWFsaXR5IDw9IDEgYW5kID4gMFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGRhdGEgdXJsXG4gICAgICovXG4gICAgdG9EYXRhVVJMOiBmdW5jdGlvbihjYW52YXNFbCwgZm9ybWF0LCBxdWFsaXR5KSB7XG4gICAgICByZXR1cm4gY2FudmFzRWwudG9EYXRhVVJMKCdpbWFnZS8nICsgZm9ybWF0LCBxdWFsaXR5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBpbWFnZSBlbGVtZW50ICh3b3JrcyBvbiBjbGllbnQgYW5kIG5vZGUpXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEByZXR1cm4ge0hUTUxJbWFnZUVsZW1lbnR9IEhUTUwgaW1hZ2UgZWxlbWVudFxuICAgICAqL1xuICAgIGNyZWF0ZUltYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWJyaWMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGx5IG1hdHJpeCBBIGJ5IG1hdHJpeCBCIHRvIG5lc3QgdHJhbnNmb3JtYXRpb25zXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge0FycmF5fSBhIEZpcnN0IHRyYW5zZm9ybU1hdHJpeFxuICAgICAqIEBwYXJhbSAge0FycmF5fSBiIFNlY29uZCB0cmFuc2Zvcm1NYXRyaXhcbiAgICAgKiBAcGFyYW0gIHtCb29sZWFufSBpczJ4MiBmbGFnIHRvIG11bHRpcGx5IG1hdHJpY2VzIGFzIDJ4MiBtYXRyaWNlc1xuICAgICAqIEByZXR1cm4ge0FycmF5fSBUaGUgcHJvZHVjdCBvZiB0aGUgdHdvIHRyYW5zZm9ybSBtYXRyaWNlc1xuICAgICAqL1xuICAgIG11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXM6IGZ1bmN0aW9uKGEsIGIsIGlzMngyKSB7XG4gICAgICAvLyBNYXRyaXggbXVsdGlwbHkgYSAqIGJcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGFbMF0gKiBiWzBdICsgYVsyXSAqIGJbMV0sXG4gICAgICAgIGFbMV0gKiBiWzBdICsgYVszXSAqIGJbMV0sXG4gICAgICAgIGFbMF0gKiBiWzJdICsgYVsyXSAqIGJbM10sXG4gICAgICAgIGFbMV0gKiBiWzJdICsgYVszXSAqIGJbM10sXG4gICAgICAgIGlzMngyID8gMCA6IGFbMF0gKiBiWzRdICsgYVsyXSAqIGJbNV0gKyBhWzRdLFxuICAgICAgICBpczJ4MiA/IDAgOiBhWzFdICogYls0XSArIGFbM10gKiBiWzVdICsgYVs1XVxuICAgICAgXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVjb21wb3NlcyBzdGFuZGFyZCAyeDMgbWF0cml4IGludG8gdHJhbnNmb3JtIGNvbXBvbmVudHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtICB7QXJyYXl9IGEgdHJhbnNmb3JtTWF0cml4XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDb21wb25lbnRzIG9mIHRyYW5zZm9ybVxuICAgICAqL1xuICAgIHFyRGVjb21wb3NlOiBmdW5jdGlvbihhKSB7XG4gICAgICB2YXIgYW5nbGUgPSBhdGFuMihhWzFdLCBhWzBdKSxcbiAgICAgICAgICBkZW5vbSA9IHBvdyhhWzBdLCAyKSArIHBvdyhhWzFdLCAyKSxcbiAgICAgICAgICBzY2FsZVggPSBzcXJ0KGRlbm9tKSxcbiAgICAgICAgICBzY2FsZVkgPSAoYVswXSAqIGFbM10gLSBhWzJdICogYVsxXSkgLyBzY2FsZVgsXG4gICAgICAgICAgc2tld1ggPSBhdGFuMihhWzBdICogYVsyXSArIGFbMV0gKiBhIFszXSwgZGVub20pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYW5nbGU6IGFuZ2xlIC8gUGlCeTE4MCxcbiAgICAgICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgICAgIHNjYWxlWTogc2NhbGVZLFxuICAgICAgICBza2V3WDogc2tld1ggLyBQaUJ5MTgwLFxuICAgICAgICBza2V3WTogMCxcbiAgICAgICAgdHJhbnNsYXRlWDogYVs0XSxcbiAgICAgICAgdHJhbnNsYXRlWTogYVs1XVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHRyYW5zZm9ybSBtYXRyaXggc3RhcnRpbmcgZnJvbSBhbiBvYmplY3Qgb2YgdGhlIHNhbWUga2luZCBvZlxuICAgICAqIHRoZSBvbmUgcmV0dXJuZWQgZnJvbSBxckRlY29tcG9zZSwgdXNlZnVsIGFsc28gaWYgeW91IHdhbnQgdG8gY2FsY3VsYXRlIHNvbWVcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgZnJvbSBhbiBvYmplY3QgdGhhdCBpcyBub3QgZW5saXZlZCB5ZXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5hbmdsZV0gYW5nbGUgaW4gZGVncmVlc1xuICAgICAqIEByZXR1cm4ge051bWJlcltdfSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICovXG4gICAgY2FsY1JvdGF0ZU1hdHJpeDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKCFvcHRpb25zLmFuZ2xlKSB7XG4gICAgICAgIHJldHVybiBmYWJyaWMuaU1hdHJpeC5jb25jYXQoKTtcbiAgICAgIH1cbiAgICAgIHZhciB0aGV0YSA9IGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMob3B0aW9ucy5hbmdsZSksXG4gICAgICAgICAgY29zID0gZmFicmljLnV0aWwuY29zKHRoZXRhKSxcbiAgICAgICAgICBzaW4gPSBmYWJyaWMudXRpbC5zaW4odGhldGEpO1xuICAgICAgcmV0dXJuIFtjb3MsIHNpbiwgLXNpbiwgY29zLCAwLCAwXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHRyYW5zZm9ybSBtYXRyaXggc3RhcnRpbmcgZnJvbSBhbiBvYmplY3Qgb2YgdGhlIHNhbWUga2luZCBvZlxuICAgICAqIHRoZSBvbmUgcmV0dXJuZWQgZnJvbSBxckRlY29tcG9zZSwgdXNlZnVsIGFsc28gaWYgeW91IHdhbnQgdG8gY2FsY3VsYXRlIHNvbWVcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbnMgZnJvbSBhbiBvYmplY3QgdGhhdCBpcyBub3QgZW5saXZlZCB5ZXQuXG4gICAgICogaXMgY2FsbGVkIERpbWVuc2lvbnNUcmFuc2Zvcm1NYXRyaXggYmVjYXVzZSB0aG9zZSBwcm9wZXJ0aWVzIGFyZSB0aGUgb25lIHRoYXQgaW5mbHVlbmNlXG4gICAgICogdGhlIHNpemUgb2YgdGhlIHJlc3VsdGluZyBib3ggb2YgdGhlIG9iamVjdC5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5zY2FsZVhdXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5zY2FsZVldXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gW29wdGlvbnMuZmxpcFhdXG4gICAgICogQHBhcmFtICB7Qm9vbGVhbn0gW29wdGlvbnMuZmxpcFldXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5za2V3WF1cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtvcHRpb25zLnNrZXdZXVxuICAgICAqIEByZXR1cm4ge051bWJlcltdfSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICovXG4gICAgY2FsY0RpbWVuc2lvbnNNYXRyaXg6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBzY2FsZVggPSB0eXBlb2Ygb3B0aW9ucy5zY2FsZVggPT09ICd1bmRlZmluZWQnID8gMSA6IG9wdGlvbnMuc2NhbGVYLFxuICAgICAgICAgIHNjYWxlWSA9IHR5cGVvZiBvcHRpb25zLnNjYWxlWSA9PT0gJ3VuZGVmaW5lZCcgPyAxIDogb3B0aW9ucy5zY2FsZVksXG4gICAgICAgICAgc2NhbGVNYXRyaXggPSBbXG4gICAgICAgICAgICBvcHRpb25zLmZsaXBYID8gLXNjYWxlWCA6IHNjYWxlWCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgb3B0aW9ucy5mbGlwWSA/IC1zY2FsZVkgOiBzY2FsZVksXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMF0sXG4gICAgICAgICAgbXVsdGlwbHkgPSBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzLFxuICAgICAgICAgIGRlZ3JlZXNUb1JhZGlhbnMgPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zO1xuICAgICAgaWYgKG9wdGlvbnMuc2tld1gpIHtcbiAgICAgICAgc2NhbGVNYXRyaXggPSBtdWx0aXBseShcbiAgICAgICAgICBzY2FsZU1hdHJpeCxcbiAgICAgICAgICBbMSwgMCwgTWF0aC50YW4oZGVncmVlc1RvUmFkaWFucyhvcHRpb25zLnNrZXdYKSksIDFdLFxuICAgICAgICAgIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuc2tld1kpIHtcbiAgICAgICAgc2NhbGVNYXRyaXggPSBtdWx0aXBseShcbiAgICAgICAgICBzY2FsZU1hdHJpeCxcbiAgICAgICAgICBbMSwgTWF0aC50YW4oZGVncmVlc1RvUmFkaWFucyhvcHRpb25zLnNrZXdZKSksIDAsIDFdLFxuICAgICAgICAgIHRydWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNjYWxlTWF0cml4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgdHJhbnNmb3JtIG1hdHJpeCBzdGFydGluZyBmcm9tIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBraW5kIG9mXG4gICAgICogdGhlIG9uZSByZXR1cm5lZCBmcm9tIHFyRGVjb21wb3NlLCB1c2VmdWwgYWxzbyBpZiB5b3Ugd2FudCB0byBjYWxjdWxhdGUgc29tZVxuICAgICAqIHRyYW5zZm9ybWF0aW9ucyBmcm9tIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBlbmxpdmVkIHlldFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtvcHRpb25zLmFuZ2xlXVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuc2NhbGVYXVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuc2NhbGVZXVxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IFtvcHRpb25zLmZsaXBYXVxuICAgICAqIEBwYXJhbSAge0Jvb2xlYW59IFtvcHRpb25zLmZsaXBZXVxuICAgICAqIEBwYXJhbSAge051bWJlcn0gW29wdGlvbnMuc2tld1hdXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy5za2V3WF1cbiAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IFtvcHRpb25zLnRyYW5zbGF0ZVhdXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSBbb3B0aW9ucy50cmFuc2xhdGVZXVxuICAgICAqIEByZXR1cm4ge051bWJlcltdfSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICovXG4gICAgY29tcG9zZU1hdHJpeDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIG1hdHJpeCA9IFsxLCAwLCAwLCAxLCBvcHRpb25zLnRyYW5zbGF0ZVggfHwgMCwgb3B0aW9ucy50cmFuc2xhdGVZIHx8IDBdLFxuICAgICAgICAgIG11bHRpcGx5ID0gZmFicmljLnV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcztcbiAgICAgIGlmIChvcHRpb25zLmFuZ2xlKSB7XG4gICAgICAgIG1hdHJpeCA9IG11bHRpcGx5KG1hdHJpeCwgZmFicmljLnV0aWwuY2FsY1JvdGF0ZU1hdHJpeChvcHRpb25zKSk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5zY2FsZVggIT09IDEgfHwgb3B0aW9ucy5zY2FsZVkgIT09IDEgfHxcbiAgICAgICAgICBvcHRpb25zLnNrZXdYIHx8IG9wdGlvbnMuc2tld1kgfHwgb3B0aW9ucy5mbGlwWCB8fCBvcHRpb25zLmZsaXBZKSB7XG4gICAgICAgIG1hdHJpeCA9IG11bHRpcGx5KG1hdHJpeCwgZmFicmljLnV0aWwuY2FsY0RpbWVuc2lvbnNNYXRyaXgob3B0aW9ucykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVzZXQgYW4gb2JqZWN0IHRyYW5zZm9ybSBzdGF0ZSB0byBuZXV0cmFsLiBUb3AgYW5kIGxlZnQgYXJlIG5vdCBhY2NvdW50ZWQgZm9yXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge2ZhYnJpYy5PYmplY3R9IHRhcmdldCBvYmplY3QgdG8gdHJhbnNmb3JtXG4gICAgICovXG4gICAgcmVzZXRPYmplY3RUcmFuc2Zvcm06IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHRhcmdldC5zY2FsZVggPSAxO1xuICAgICAgdGFyZ2V0LnNjYWxlWSA9IDE7XG4gICAgICB0YXJnZXQuc2tld1ggPSAwO1xuICAgICAgdGFyZ2V0LnNrZXdZID0gMDtcbiAgICAgIHRhcmdldC5mbGlwWCA9IGZhbHNlO1xuICAgICAgdGFyZ2V0LmZsaXBZID0gZmFsc2U7XG4gICAgICB0YXJnZXQucm90YXRlKDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeHRyYWN0IE9iamVjdCB0cmFuc2Zvcm0gdmFsdWVzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSAge2ZhYnJpYy5PYmplY3R9IHRhcmdldCBvYmplY3QgdG8gcmVhZCBmcm9tXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDb21wb25lbnRzIG9mIHRyYW5zZm9ybVxuICAgICAqL1xuICAgIHNhdmVPYmplY3RUcmFuc2Zvcm06IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNjYWxlWDogdGFyZ2V0LnNjYWxlWCxcbiAgICAgICAgc2NhbGVZOiB0YXJnZXQuc2NhbGVZLFxuICAgICAgICBza2V3WDogdGFyZ2V0LnNrZXdYLFxuICAgICAgICBza2V3WTogdGFyZ2V0LnNrZXdZLFxuICAgICAgICBhbmdsZTogdGFyZ2V0LmFuZ2xlLFxuICAgICAgICBsZWZ0OiB0YXJnZXQubGVmdCxcbiAgICAgICAgZmxpcFg6IHRhcmdldC5mbGlwWCxcbiAgICAgICAgZmxpcFk6IHRhcmdldC5mbGlwWSxcbiAgICAgICAgdG9wOiB0YXJnZXQudG9wXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgY29udGV4dCBoYXMgdHJhbnNwYXJlbnQgcGl4ZWxcbiAgICAgKiBhdCBzcGVjaWZpZWQgbG9jYXRpb24gKHRha2luZyB0b2xlcmFuY2UgaW50byBhY2NvdW50KVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggY29udGV4dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IHggY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IHkgY29vcmRpbmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0b2xlcmFuY2UgVG9sZXJhbmNlXG4gICAgICovXG4gICAgaXNUcmFuc3BhcmVudDogZnVuY3Rpb24oY3R4LCB4LCB5LCB0b2xlcmFuY2UpIHtcblxuICAgICAgLy8gSWYgdG9sZXJhbmNlIGlzID4gMCBhZGp1c3Qgc3RhcnQgY29vcmRzIHRvIHRha2UgaW50byBhY2NvdW50LlxuICAgICAgLy8gSWYgbW92ZXMgb2ZmIENhbnZhcyBmaXggdG8gMFxuICAgICAgaWYgKHRvbGVyYW5jZSA+IDApIHtcbiAgICAgICAgaWYgKHggPiB0b2xlcmFuY2UpIHtcbiAgICAgICAgICB4IC09IHRvbGVyYW5jZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA+IHRvbGVyYW5jZSkge1xuICAgICAgICAgIHkgLT0gdG9sZXJhbmNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHkgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBfaXNUcmFuc3BhcmVudCA9IHRydWUsIGksIHRlbXAsXG4gICAgICAgICAgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSh4LCB5LCAodG9sZXJhbmNlICogMikgfHwgMSwgKHRvbGVyYW5jZSAqIDIpIHx8IDEpLFxuICAgICAgICAgIGwgPSBpbWFnZURhdGEuZGF0YS5sZW5ndGg7XG5cbiAgICAgIC8vIFNwbGl0IGltYWdlIGRhdGEgLSBmb3IgdG9sZXJhbmNlID4gMSwgcGl4ZWxEYXRhU2l6ZSA9IDQ7XG4gICAgICBmb3IgKGkgPSAzOyBpIDwgbDsgaSArPSA0KSB7XG4gICAgICAgIHRlbXAgPSBpbWFnZURhdGEuZGF0YVtpXTtcbiAgICAgICAgX2lzVHJhbnNwYXJlbnQgPSB0ZW1wIDw9IDA7XG4gICAgICAgIGlmIChfaXNUcmFuc3BhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhazsgLy8gU3RvcCBpZiBjb2xvdXIgZm91bmRcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbWFnZURhdGEgPSBudWxsO1xuXG4gICAgICByZXR1cm4gX2lzVHJhbnNwYXJlbnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBhcnNlIHByZXNlcnZlQXNwZWN0UmF0aW8gYXR0cmlidXRlIGZyb20gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhdHRyaWJ1dGUgdG8gYmUgcGFyc2VkXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBhbiBvYmplY3QgY29udGFpbmluZyBhbGlnbiBhbmQgbWVldE9yU2xpY2UgYXR0cmlidXRlXG4gICAgICovXG4gICAgcGFyc2VQcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0cmlidXRlOiBmdW5jdGlvbihhdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBtZWV0T3JTbGljZSA9ICdtZWV0JywgYWxpZ25YID0gJ01pZCcsIGFsaWduWSA9ICdNaWQnLFxuICAgICAgICAgIGFzcGVjdFJhdGlvQXR0cnMgPSBhdHRyaWJ1dGUuc3BsaXQoJyAnKSwgYWxpZ247XG5cbiAgICAgIGlmIChhc3BlY3RSYXRpb0F0dHJzICYmIGFzcGVjdFJhdGlvQXR0cnMubGVuZ3RoKSB7XG4gICAgICAgIG1lZXRPclNsaWNlID0gYXNwZWN0UmF0aW9BdHRycy5wb3AoKTtcbiAgICAgICAgaWYgKG1lZXRPclNsaWNlICE9PSAnbWVldCcgJiYgbWVldE9yU2xpY2UgIT09ICdzbGljZScpIHtcbiAgICAgICAgICBhbGlnbiA9IG1lZXRPclNsaWNlO1xuICAgICAgICAgIG1lZXRPclNsaWNlID0gJ21lZXQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFzcGVjdFJhdGlvQXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgYWxpZ24gPSBhc3BlY3RSYXRpb0F0dHJzLnBvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvL2RpdmlkZSBhbGlnbiBpbiBhbGlnblggYW5kIGFsaWduWVxuICAgICAgYWxpZ25YID0gYWxpZ24gIT09ICdub25lJyA/IGFsaWduLnNsaWNlKDEsIDQpIDogJ25vbmUnO1xuICAgICAgYWxpZ25ZID0gYWxpZ24gIT09ICdub25lJyA/IGFsaWduLnNsaWNlKDUsIDgpIDogJ25vbmUnO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVldE9yU2xpY2U6IG1lZXRPclNsaWNlLFxuICAgICAgICBhbGlnblg6IGFsaWduWCxcbiAgICAgICAgYWxpZ25ZOiBhbGlnbllcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFyIGNoYXIgd2lkdGhzIGNhY2hlIGZvciB0aGUgZ2l2ZW4gZm9udCBmYW1pbHkgb3IgYWxsIHRoZSBjYWNoZSBpZiBub1xuICAgICAqIGZvbnRGYW1pbHkgaXMgc3BlY2lmaWVkLlxuICAgICAqIFVzZSBpdCBpZiB5b3Uga25vdyB5b3UgYXJlIGxvYWRpbmcgZm9udHMgaW4gYSBsYXp5IHdheSBhbmQgeW91IGFyZSBub3Qgd2FpdGluZ1xuICAgICAqIGZvciBjdXN0b20gZm9udHMgdG8gbG9hZCBwcm9wZXJseSB3aGVuIGFkZGluZyB0ZXh0IG9iamVjdHMgdG8gdGhlIGNhbnZhcy5cbiAgICAgKiBJZiBhIHRleHQgb2JqZWN0IGlzIGFkZGVkIHdoZW4gaXRzIG93biBmb250IGlzIG5vdCBsb2FkZWQgeWV0LCB5b3Ugd2lsbCBnZXQgd3JvbmdcbiAgICAgKiBtZWFzdXJlbWVudCBhbmQgc28gd3JvbmcgYm91bmRpbmcgYm94ZXMuXG4gICAgICogQWZ0ZXIgdGhlIGZvbnQgY2FjaGUgaXMgY2xlYXJlZCwgZWl0aGVyIGNoYW5nZSB0aGUgdGV4dE9iamVjdCB0ZXh0IGNvbnRlbnQgb3IgY2FsbFxuICAgICAqIGluaXREaW1lbnNpb25zKCkgdG8gdHJpZ2dlciBhIHJlY2FsY3VsYXRpb25cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2ZvbnRGYW1pbHldIGZvbnQgZmFtaWx5IHRvIGNsZWFyXG4gICAgICovXG4gICAgY2xlYXJGYWJyaWNGb250Q2FjaGU6IGZ1bmN0aW9uKGZvbnRGYW1pbHkpIHtcbiAgICAgIGZvbnRGYW1pbHkgPSAoZm9udEZhbWlseSB8fCAnJykudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghZm9udEZhbWlseSkge1xuICAgICAgICBmYWJyaWMuY2hhcldpZHRoc0NhY2hlID0geyB9O1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZmFicmljLmNoYXJXaWR0aHNDYWNoZVtmb250RmFtaWx5XSkge1xuICAgICAgICBkZWxldGUgZmFicmljLmNoYXJXaWR0aHNDYWNoZVtmb250RmFtaWx5XTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gY3VycmVudCBhc3BlY3QgcmF0aW8sIGRldGVybWluZXMgdGhlIG1heCB3aWR0aCBhbmQgaGVpZ2h0IHRoYXQgY2FuXG4gICAgICogcmVzcGVjdCB0aGUgdG90YWwgYWxsb3dlZCBhcmVhIGZvciB0aGUgY2FjaGUuXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFyIGFzcGVjdCByYXRpb1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtYXhpbXVtQXJlYSBNYXhpbXVtIGFyZWEgeW91IHdhbnQgdG8gYWNoaWV2ZVxuICAgICAqIEByZXR1cm4ge09iamVjdC54fSBMaW1pdGVkIGRpbWVuc2lvbnMgYnkgWFxuICAgICAqIEByZXR1cm4ge09iamVjdC55fSBMaW1pdGVkIGRpbWVuc2lvbnMgYnkgWVxuICAgICAqL1xuICAgIGxpbWl0RGltc0J5QXJlYTogZnVuY3Rpb24oYXIsIG1heGltdW1BcmVhKSB7XG4gICAgICB2YXIgcm91Z2hXaWR0aCA9IE1hdGguc3FydChtYXhpbXVtQXJlYSAqIGFyKSxcbiAgICAgICAgICBwZXJmTGltaXRTaXplWSA9IE1hdGguZmxvb3IobWF4aW11bUFyZWEgLyByb3VnaFdpZHRoKTtcbiAgICAgIHJldHVybiB7IHg6IE1hdGguZmxvb3Iocm91Z2hXaWR0aCksIHk6IHBlcmZMaW1pdFNpemVZIH07XG4gICAgfSxcblxuICAgIGNhcFZhbHVlOiBmdW5jdGlvbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbHVlLCBtYXgpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIHNjYWxlIGZvciB0aGUgb2JqZWN0IHNvdXJjZSB0byBmaXQgaW5zaWRlIHRoZSBvYmplY3QgZGVzdGluYXRpb24sXG4gICAgICoga2VlcGluZyBhc3BlY3QgcmF0aW8gaW50YWN0LlxuICAgICAqIHJlc3BlY3QgdGhlIHRvdGFsIGFsbG93ZWQgYXJlYSBmb3IgdGhlIGNhY2hlLlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0IHwgZmFicmljLk9iamVjdH0gc291cmNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNvdXJjZS5oZWlnaHQgbmF0dXJhbCB1bnNjYWxlZCBoZWlnaHQgb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzb3VyY2Uud2lkdGggbmF0dXJhbCB1bnNjYWxlZCB3aWR0aCBvZiB0aGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3QgfCBmYWJyaWMuT2JqZWN0fSBkZXN0aW5hdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZXN0aW5hdGlvbi5oZWlnaHQgbmF0dXJhbCB1bnNjYWxlZCBoZWlnaHQgb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZXN0aW5hdGlvbi53aWR0aCBuYXR1cmFsIHVuc2NhbGVkIHdpZHRoIG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHNjYWxlIGZhY3RvciB0byBhcHBseSB0byBzb3VyY2UgdG8gZml0IGludG8gZGVzdGluYXRpb25cbiAgICAgKi9cbiAgICBmaW5kU2NhbGVUb0ZpdDogZnVuY3Rpb24oc291cmNlLCBkZXN0aW5hdGlvbikge1xuICAgICAgcmV0dXJuIE1hdGgubWluKGRlc3RpbmF0aW9uLndpZHRoIC8gc291cmNlLndpZHRoLCBkZXN0aW5hdGlvbi5oZWlnaHQgLyBzb3VyY2UuaGVpZ2h0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmluZHMgdGhlIHNjYWxlIGZvciB0aGUgb2JqZWN0IHNvdXJjZSB0byBjb3ZlciBlbnRpcmVseSB0aGUgb2JqZWN0IGRlc3RpbmF0aW9uLFxuICAgICAqIGtlZXBpbmcgYXNwZWN0IHJhdGlvIGludGFjdC5cbiAgICAgKiByZXNwZWN0IHRoZSB0b3RhbCBhbGxvd2VkIGFyZWEgZm9yIHRoZSBjYWNoZS5cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdCB8IGZhYnJpYy5PYmplY3R9IHNvdXJjZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzb3VyY2UuaGVpZ2h0IG5hdHVyYWwgdW5zY2FsZWQgaGVpZ2h0IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc291cmNlLndpZHRoIG5hdHVyYWwgdW5zY2FsZWQgd2lkdGggb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0IHwgZmFicmljLk9iamVjdH0gZGVzdGluYXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVzdGluYXRpb24uaGVpZ2h0IG5hdHVyYWwgdW5zY2FsZWQgaGVpZ2h0IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVzdGluYXRpb24ud2lkdGggbmF0dXJhbCB1bnNjYWxlZCB3aWR0aCBvZiB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBzY2FsZSBmYWN0b3IgdG8gYXBwbHkgdG8gc291cmNlIHRvIGNvdmVyIGRlc3RpbmF0aW9uXG4gICAgICovXG4gICAgZmluZFNjYWxlVG9Db3ZlcjogZnVuY3Rpb24oc291cmNlLCBkZXN0aW5hdGlvbikge1xuICAgICAgcmV0dXJuIE1hdGgubWF4KGRlc3RpbmF0aW9uLndpZHRoIC8gc291cmNlLndpZHRoLCBkZXN0aW5hdGlvbi5oZWlnaHQgLyBzb3VyY2UuaGVpZ2h0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2l2ZW4gYW4gYXJyYXkgb2YgNiBudW1iZXIgcmV0dXJucyBzb21ldGhpbmcgbGlrZSBgXCJtYXRyaXgoLi4ubnVtYmVycylcImBcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm0gYW4gYXJyYXkgd2l0aCA2IG51bWJlcnNcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHRyYW5zZm9ybSBtYXRyaXggZm9yIHN2Z1xuICAgICAqIEByZXR1cm4ge09iamVjdC55fSBMaW1pdGVkIGRpbWVuc2lvbnMgYnkgWVxuICAgICAqL1xuICAgIG1hdHJpeFRvU1ZHOiBmdW5jdGlvbih0cmFuc2Zvcm0pIHtcbiAgICAgIHJldHVybiAnbWF0cml4KCcgKyB0cmFuc2Zvcm0ubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmYWJyaWMudXRpbC50b0ZpeGVkKHZhbHVlLCBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFMpO1xuICAgICAgfSkuam9pbignICcpICsgJyknO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnaXZlbiBhbiBvYmplY3QgYW5kIGEgdHJhbnNmb3JtLCBhcHBseSB0aGUgaW52ZXJzZSB0cmFuc2Zvcm0gdG8gdGhlIG9iamVjdCxcbiAgICAgKiB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gcmVtb3ZlIGZyb20gdGhhdCBvYmplY3QgdGhhdCB0cmFuc2Zvcm1hdGlvbiwgc28gdGhhdFxuICAgICAqIGFkZGVkIGluIGEgc3BhY2Ugd2l0aCB0aGUgcmVtb3ZlZCB0cmFuc2Zvcm0sIHRoZSBvYmplY3Qgd2lsbCBiZSB0aGUgc2FtZSBhcyBiZWZvcmUuXG4gICAgICogUmVtb3ZpbmcgZnJvbSBhbiBvYmplY3QgYSB0cmFuc2Zvcm0gdGhhdCBzY2FsZSBieSAyIGlzIGxpa2Ugc2NhbGluZyBpdCBieSAxLzIuXG4gICAgICogUmVtb3ZpbmcgZnJvbSBhbiBvYmplY3QgYSB0cmFuc2Zyb20gdGhhdCByb3RhdGUgYnkgMzBkZWcgaXMgbGlrZSByb3RhdGluZyBieSAzMGRlZ1xuICAgICAqIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG4gICAgICogVGhpcyB1dGlsIGlzIHVzZWQgdG8gYWRkIG9iamVjdHMgaW5zaWRlIHRyYW5zZm9ybWVkIGdyb3VwcyBvciBuZXN0ZWQgZ3JvdXBzLlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IHRoZSBvYmplY3QgeW91IHdhbnQgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtIHRoZSBkZXN0aW5hdGlvbiB0cmFuc2Zvcm1cbiAgICAgKi9cbiAgICByZW1vdmVUcmFuc2Zvcm1Gcm9tT2JqZWN0OiBmdW5jdGlvbihvYmplY3QsIHRyYW5zZm9ybSkge1xuICAgICAgdmFyIGludmVydGVkID0gZmFicmljLnV0aWwuaW52ZXJ0VHJhbnNmb3JtKHRyYW5zZm9ybSksXG4gICAgICAgICAgZmluYWxUcmFuc2Zvcm0gPSBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzKGludmVydGVkLCBvYmplY3QuY2FsY093bk1hdHJpeCgpKTtcbiAgICAgIGZhYnJpYy51dGlsLmFwcGx5VHJhbnNmb3JtVG9PYmplY3Qob2JqZWN0LCBmaW5hbFRyYW5zZm9ybSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGdpdmVuIGFuIG9iamVjdCBhbmQgYSB0cmFuc2Zvcm0sIGFwcGx5IHRoZSB0cmFuc2Zvcm0gdG8gdGhlIG9iamVjdC5cbiAgICAgKiB0aGlzIGlzIGVxdWl2YWxlbnQgdG8gY2hhbmdlIHRoZSBzcGFjZSB3aGVyZSB0aGUgb2JqZWN0IGlzIGRyYXduLlxuICAgICAqIEFkZGluZyB0byBhbiBvYmplY3QgYSB0cmFuc2Zvcm0gdGhhdCBzY2FsZSBieSAyIGlzIGxpa2Ugc2NhbGluZyBpdCBieSAyLlxuICAgICAqIFRoaXMgaXMgdXNlZCB3aGVuIHJlbW92aW5nIGFuIG9iamVjdCBmcm9tIGFuIGFjdGl2ZSBzZWxlY3Rpb24gZm9yIGV4YW1wbGUuXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgdGhlIG9iamVjdCB5b3Ugd2FudCB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm0gdGhlIGRlc3RpbmF0aW9uIHRyYW5zZm9ybVxuICAgICAqL1xuICAgIGFkZFRyYW5zZm9ybVRvT2JqZWN0OiBmdW5jdGlvbihvYmplY3QsIHRyYW5zZm9ybSkge1xuICAgICAgZmFicmljLnV0aWwuYXBwbHlUcmFuc2Zvcm1Ub09iamVjdChcbiAgICAgICAgb2JqZWN0LFxuICAgICAgICBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzKHRyYW5zZm9ybSwgb2JqZWN0LmNhbGNPd25NYXRyaXgoKSlcbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRpc2NhcmQgYW4gb2JqZWN0IHRyYW5zZm9ybSBzdGF0ZSBhbmQgYXBwbHkgdGhlIG9uZSBmcm9tIHRoZSBtYXRyaXguXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgdGhlIG9iamVjdCB5b3Ugd2FudCB0byB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0cmFuc2Zvcm0gdGhlIGRlc3RpbmF0aW9uIHRyYW5zZm9ybVxuICAgICAqL1xuICAgIGFwcGx5VHJhbnNmb3JtVG9PYmplY3Q6IGZ1bmN0aW9uKG9iamVjdCwgdHJhbnNmb3JtKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGZhYnJpYy51dGlsLnFyRGVjb21wb3NlKHRyYW5zZm9ybSksXG4gICAgICAgICAgY2VudGVyID0gbmV3IGZhYnJpYy5Qb2ludChvcHRpb25zLnRyYW5zbGF0ZVgsIG9wdGlvbnMudHJhbnNsYXRlWSk7XG4gICAgICBvYmplY3QuZmxpcFggPSBmYWxzZTtcbiAgICAgIG9iamVjdC5mbGlwWSA9IGZhbHNlO1xuICAgICAgb2JqZWN0LnNldCgnc2NhbGVYJywgb3B0aW9ucy5zY2FsZVgpO1xuICAgICAgb2JqZWN0LnNldCgnc2NhbGVZJywgb3B0aW9ucy5zY2FsZVkpO1xuICAgICAgb2JqZWN0LnNrZXdYID0gb3B0aW9ucy5za2V3WDtcbiAgICAgIG9iamVjdC5za2V3WSA9IG9wdGlvbnMuc2tld1k7XG4gICAgICBvYmplY3QuYW5nbGUgPSBvcHRpb25zLmFuZ2xlO1xuICAgICAgb2JqZWN0LnNldFBvc2l0aW9uQnlPcmlnaW4oY2VudGVyLCAnY2VudGVyJywgJ2NlbnRlcicpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnaXZlbiBhIHdpZHRoIGFuZCBoZWlnaHQsIHJldHVybiB0aGUgc2l6ZSBvZiB0aGUgYm91bmRpbmcgYm94XG4gICAgICogdGhhdCBjYW4gY29udGFpbnMgdGhlIGJveCB3aXRoIHdpZHRoL2hlaWdodCB3aXRoIGFwcGxpZWQgdHJhbnNmb3JtXG4gICAgICogZGVzY3JpYmVkIGluIG9wdGlvbnMuXG4gICAgICogVXNlIHRvIGNhbGN1bGF0ZSB0aGUgYm94ZXMgYXJvdW5kIG9iamVjdHMgZm9yIGNvbnRyb2xzLlxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnNjYWxlWFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnNjYWxlWVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnNrZXdYXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuc2tld1lcbiAgICAgKiBAcmV0dXJuIHtPYmplY3QueH0gd2lkdGggb2YgY29udGFpbmluZ1xuICAgICAqIEByZXR1cm4ge09iamVjdC55fSBoZWlnaHQgb2YgY29udGFpbmluZ1xuICAgICAqL1xuICAgIHNpemVBZnRlclRyYW5zZm9ybTogZnVuY3Rpb24od2lkdGgsIGhlaWdodCwgb3B0aW9ucykge1xuICAgICAgdmFyIGRpbVggPSB3aWR0aCAvIDIsIGRpbVkgPSBoZWlnaHQgLyAyLFxuICAgICAgICAgIHBvaW50cyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgeDogLWRpbVgsXG4gICAgICAgICAgICAgIHk6IC1kaW1ZXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB4OiBkaW1YLFxuICAgICAgICAgICAgICB5OiAtZGltWVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgeDogLWRpbVgsXG4gICAgICAgICAgICAgIHk6IGRpbVlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHg6IGRpbVgsXG4gICAgICAgICAgICAgIHk6IGRpbVlcbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IGZhYnJpYy51dGlsLmNhbGNEaW1lbnNpb25zTWF0cml4KG9wdGlvbnMpLFxuICAgICAgICAgIGJib3ggPSBmYWJyaWMudXRpbC5tYWtlQm91bmRpbmdCb3hGcm9tUG9pbnRzKHBvaW50cywgdHJhbnNmb3JtTWF0cml4KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IGJib3gud2lkdGgsXG4gICAgICAgIHk6IGJib3guaGVpZ2h0LFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIDIgY2xpcCBwYXRocyBpbnRvIG9uZSB2aXN1YWxseSBlcXVhbCBjbGlwIHBhdGhcbiAgICAgKlxuICAgICAqICoqSU1QT1JUQU5UKio6XFxcbiAgICAgKiBEb2VzICoqTk9UKiogY2xvbmUgdGhlIGFyZ3VtZW50cywgY2xvbmUgdGhlbSBwcm9pciBpZiBuZWNlc3NhcnkuXG4gICAgICpcbiAgICAgKiBDcmVhdGVzIGEgd3JhcHBlciAoZ3JvdXApIHRoYXQgY29udGFpbnMgb25lIGNsaXAgcGF0aCBhbmQgaXMgY2xpcHBlZCBieSB0aGUgb3RoZXIgc28gY29udGVudCBpcyBrZXB0IHdoZXJlIGJvdGggb3ZlcmxhcC5cbiAgICAgKiBVc2UgdGhpcyBtZXRob2QgaWYgYm90aCB0aGUgY2xpcCBwYXRocyBtYXkgaGF2ZSBuZXN0ZWQgY2xpcCBwYXRocyBvZiB0aGVpciBvd24sIHNvIGFzc2lnbmluZyBvbmUgdG8gdGhlIG90aGVyJ3MgY2xpcCBwYXRoIHByb3BlcnR5IGlzIG5vdCBwb3NzaWJsZS5cbiAgICAgKlxuICAgICAqIEluIG9yZGVyIHRvIGhhbmRsZSB0aGUgYGludmVydGVkYCBwcm9wZXJ0eSB3ZSBmb2xsb3cgbG9naWMgZGVzY3JpYmVkIGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XFxcbiAgICAgKiAqKigxKSoqIGJvdGggY2xpcCBwYXRocyBhcmUgaW52ZXJ0ZWQgLSB0aGUgY2xpcCBwYXRocyBwYXNzIHRoZSBpbnZlcnRlZCBwcm9wIHRvIHRoZSB3cmFwcGVyIGFuZCBsb29zZSBpdCB0aGVtc2VsdmVzLlxcXG4gICAgICogKiooMikqKiBvbmUgaXMgaW52ZXJ0ZWQgYW5kIHRoZSBvdGhlciBpc24ndCAtIHRoZSB3cmFwcGVyIHNob3VsZG4ndCBiZWNvbWUgaW52ZXJ0ZWQgYW5kIHRoZSBpbnZlcnRlZCBjbGlwIHBhdGggbXVzdCBjbGlwIHRoZSBub24gaW52ZXJ0ZWQgb25lIHRvIHByb2R1Y2UgYW4gaWRlbnRpY2FsIHZpc3VhbCBlZmZlY3QuXFxcbiAgICAgKiAqKigzKSoqIGJvdGggY2xpcCBwYXRocyBhcmUgbm90IGludmVydGVkIC0gd3JhcHBlciBhbmQgY2xpcCBwYXRocyByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAqXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBjMVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gYzJcbiAgICAgKiBAcmV0dXJucyB7ZmFicmljLk9iamVjdH0gbWVyZ2VkIGNsaXAgcGF0aFxuICAgICAqL1xuICAgIG1lcmdlQ2xpcFBhdGhzOiBmdW5jdGlvbiAoYzEsIGMyKSB7XG4gICAgICB2YXIgYSA9IGMxLCBiID0gYzI7XG4gICAgICBpZiAoYS5pbnZlcnRlZCAmJiAhYi5pbnZlcnRlZCkge1xuICAgICAgICAvLyAgY2FzZSAoMilcbiAgICAgICAgYSA9IGMyO1xuICAgICAgICBiID0gYzE7XG4gICAgICB9XG4gICAgICAvLyAgYGJgIGJlY29tZXMgYGFgJ3MgY2xpcCBwYXRoIHNvIHdlIHRyYW5zZm9ybSBgYmAgdG8gYGFgIGNvb3JkaW5hdGUgcGxhbmVcbiAgICAgIGZhYnJpYy51dGlsLmFwcGx5VHJhbnNmb3JtVG9PYmplY3QoXG4gICAgICAgIGIsXG4gICAgICAgIGZhYnJpYy51dGlsLm11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXMoXG4gICAgICAgICAgZmFicmljLnV0aWwuaW52ZXJ0VHJhbnNmb3JtKGEuY2FsY1RyYW5zZm9ybU1hdHJpeCgpKSxcbiAgICAgICAgICBiLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKVxuICAgICAgICApXG4gICAgICApO1xuICAgICAgLy8gIGFzc2lnbiB0aGUgYGludmVydGVkYCBwcm9wIHRvIHRoZSB3cmFwcGluZyBncm91cFxuICAgICAgdmFyIGludmVydGVkID0gYS5pbnZlcnRlZCAmJiBiLmludmVydGVkO1xuICAgICAgaWYgKGludmVydGVkKSB7XG4gICAgICAgIC8vICBjYXNlICgxKVxuICAgICAgICBhLmludmVydGVkID0gYi5pbnZlcnRlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuR3JvdXAoW2FdLCB7IGNsaXBQYXRoOiBiLCBpbnZlcnRlZDogaW52ZXJ0ZWQgfSk7XG4gICAgfSxcbiAgfTtcbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBfam9pbiA9IEFycmF5LnByb3RvdHlwZS5qb2luLFxuICAgICAgY29tbWFuZExlbmd0aHMgPSB7XG4gICAgICAgIG06IDIsXG4gICAgICAgIGw6IDIsXG4gICAgICAgIGg6IDEsXG4gICAgICAgIHY6IDEsXG4gICAgICAgIGM6IDYsXG4gICAgICAgIHM6IDQsXG4gICAgICAgIHE6IDQsXG4gICAgICAgIHQ6IDIsXG4gICAgICAgIGE6IDdcbiAgICAgIH0sXG4gICAgICByZXBlYXRlZENvbW1hbmRzID0ge1xuICAgICAgICBtOiAnbCcsXG4gICAgICAgIE06ICdMJ1xuICAgICAgfTtcbiAgZnVuY3Rpb24gc2VnbWVudFRvQmV6aWVyKHRoMiwgdGgzLCBjb3NUaCwgc2luVGgsIHJ4LCByeSwgY3gxLCBjeTEsIG1ULCBmcm9tWCwgZnJvbVkpIHtcbiAgICB2YXIgY29zdGgyID0gZmFicmljLnV0aWwuY29zKHRoMiksXG4gICAgICAgIHNpbnRoMiA9IGZhYnJpYy51dGlsLnNpbih0aDIpLFxuICAgICAgICBjb3N0aDMgPSBmYWJyaWMudXRpbC5jb3ModGgzKSxcbiAgICAgICAgc2ludGgzID0gZmFicmljLnV0aWwuc2luKHRoMyksXG4gICAgICAgIHRvWCA9IGNvc1RoICogcnggKiBjb3N0aDMgLSBzaW5UaCAqIHJ5ICogc2ludGgzICsgY3gxLFxuICAgICAgICB0b1kgPSBzaW5UaCAqIHJ4ICogY29zdGgzICsgY29zVGggKiByeSAqIHNpbnRoMyArIGN5MSxcbiAgICAgICAgY3AxWCA9IGZyb21YICsgbVQgKiAoIC1jb3NUaCAqIHJ4ICogc2ludGgyIC0gc2luVGggKiByeSAqIGNvc3RoMiksXG4gICAgICAgIGNwMVkgPSBmcm9tWSArIG1UICogKCAtc2luVGggKiByeCAqIHNpbnRoMiArIGNvc1RoICogcnkgKiBjb3N0aDIpLFxuICAgICAgICBjcDJYID0gdG9YICsgbVQgKiAoIGNvc1RoICogcnggKiBzaW50aDMgKyBzaW5UaCAqIHJ5ICogY29zdGgzKSxcbiAgICAgICAgY3AyWSA9IHRvWSArIG1UICogKCBzaW5UaCAqIHJ4ICogc2ludGgzIC0gY29zVGggKiByeSAqIGNvc3RoMyk7XG5cbiAgICByZXR1cm4gWydDJyxcbiAgICAgIGNwMVgsIGNwMVksXG4gICAgICBjcDJYLCBjcDJZLFxuICAgICAgdG9YLCB0b1lcbiAgICBdO1xuICB9XG5cbiAgLyogQWRhcHRlZCBmcm9tIGh0dHA6Ly9keHIubW96aWxsYS5vcmcvbW96aWxsYS1jZW50cmFsL3NvdXJjZS9jb250ZW50L3N2Zy9jb250ZW50L3NyYy9uc1NWR1BhdGhEYXRhUGFyc2VyLmNwcFxuICAgKiBieSBBbmRyZWEgQm9nYXp6aSBjb2RlIGlzIHVuZGVyIE1QTC4gaWYgeW91IGRvbid0IGhhdmUgYSBjb3B5IG9mIHRoZSBsaWNlbnNlIHlvdSBjYW4gdGFrZSBpdCBoZXJlXG4gICAqIGh0dHA6Ly9tb3ppbGxhLm9yZy9NUEwvMi4wL1xuICAgKi9cbiAgZnVuY3Rpb24gYXJjVG9TZWdtZW50cyh0b1gsIHRvWSwgcngsIHJ5LCBsYXJnZSwgc3dlZXAsIHJvdGF0ZVgpIHtcbiAgICB2YXIgUEkgPSBNYXRoLlBJLCB0aCA9IHJvdGF0ZVggKiBQSSAvIDE4MCxcbiAgICAgICAgc2luVGggPSBmYWJyaWMudXRpbC5zaW4odGgpLFxuICAgICAgICBjb3NUaCA9IGZhYnJpYy51dGlsLmNvcyh0aCksXG4gICAgICAgIGZyb21YID0gMCwgZnJvbVkgPSAwO1xuXG4gICAgcnggPSBNYXRoLmFicyhyeCk7XG4gICAgcnkgPSBNYXRoLmFicyhyeSk7XG5cbiAgICB2YXIgcHggPSAtY29zVGggKiB0b1ggKiAwLjUgLSBzaW5UaCAqIHRvWSAqIDAuNSxcbiAgICAgICAgcHkgPSAtY29zVGggKiB0b1kgKiAwLjUgKyBzaW5UaCAqIHRvWCAqIDAuNSxcbiAgICAgICAgcngyID0gcnggKiByeCwgcnkyID0gcnkgKiByeSwgcHkyID0gcHkgKiBweSwgcHgyID0gcHggKiBweCxcbiAgICAgICAgcGwgPSByeDIgKiByeTIgLSByeDIgKiBweTIgLSByeTIgKiBweDIsXG4gICAgICAgIHJvb3QgPSAwO1xuXG4gICAgaWYgKHBsIDwgMCkge1xuICAgICAgdmFyIHMgPSBNYXRoLnNxcnQoMSAtIHBsIC8gKHJ4MiAqIHJ5MikpO1xuICAgICAgcnggKj0gcztcbiAgICAgIHJ5ICo9IHM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcm9vdCA9IChsYXJnZSA9PT0gc3dlZXAgPyAtMS4wIDogMS4wKSAqXG4gICAgICAgICAgICAgIE1hdGguc3FydCggcGwgLyAocngyICogcHkyICsgcnkyICogcHgyKSk7XG4gICAgfVxuXG4gICAgdmFyIGN4ID0gcm9vdCAqIHJ4ICogcHkgLyByeSxcbiAgICAgICAgY3kgPSAtcm9vdCAqIHJ5ICogcHggLyByeCxcbiAgICAgICAgY3gxID0gY29zVGggKiBjeCAtIHNpblRoICogY3kgKyB0b1ggKiAwLjUsXG4gICAgICAgIGN5MSA9IHNpblRoICogY3ggKyBjb3NUaCAqIGN5ICsgdG9ZICogMC41LFxuICAgICAgICBtVGhldGEgPSBjYWxjVmVjdG9yQW5nbGUoMSwgMCwgKHB4IC0gY3gpIC8gcngsIChweSAtIGN5KSAvIHJ5KSxcbiAgICAgICAgZHRoZXRhID0gY2FsY1ZlY3RvckFuZ2xlKChweCAtIGN4KSAvIHJ4LCAocHkgLSBjeSkgLyByeSwgKC1weCAtIGN4KSAvIHJ4LCAoLXB5IC0gY3kpIC8gcnkpO1xuXG4gICAgaWYgKHN3ZWVwID09PSAwICYmIGR0aGV0YSA+IDApIHtcbiAgICAgIGR0aGV0YSAtPSAyICogUEk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN3ZWVwID09PSAxICYmIGR0aGV0YSA8IDApIHtcbiAgICAgIGR0aGV0YSArPSAyICogUEk7XG4gICAgfVxuXG4gICAgLy8gQ29udmVydCBpbnRvIGN1YmljIGJlemllciBzZWdtZW50cyA8PSA5MGRlZ1xuICAgIHZhciBzZWdtZW50cyA9IE1hdGguY2VpbChNYXRoLmFicyhkdGhldGEgLyBQSSAqIDIpKSxcbiAgICAgICAgcmVzdWx0ID0gW10sIG1EZWx0YSA9IGR0aGV0YSAvIHNlZ21lbnRzLFxuICAgICAgICBtVCA9IDggLyAzICogTWF0aC5zaW4obURlbHRhIC8gNCkgKiBNYXRoLnNpbihtRGVsdGEgLyA0KSAvIE1hdGguc2luKG1EZWx0YSAvIDIpLFxuICAgICAgICB0aDMgPSBtVGhldGEgKyBtRGVsdGE7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IHNlZ21lbnRUb0JlemllcihtVGhldGEsIHRoMywgY29zVGgsIHNpblRoLCByeCwgcnksIGN4MSwgY3kxLCBtVCwgZnJvbVgsIGZyb21ZKTtcbiAgICAgIGZyb21YID0gcmVzdWx0W2ldWzVdO1xuICAgICAgZnJvbVkgPSByZXN1bHRbaV1bNl07XG4gICAgICBtVGhldGEgPSB0aDM7XG4gICAgICB0aDMgKz0gbURlbHRhO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLypcbiAgICogUHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gY2FsY1ZlY3RvckFuZ2xlKHV4LCB1eSwgdngsIHZ5KSB7XG4gICAgdmFyIHRhID0gTWF0aC5hdGFuMih1eSwgdXgpLFxuICAgICAgICB0YiA9IE1hdGguYXRhbjIodnksIHZ4KTtcbiAgICBpZiAodGIgPj0gdGEpIHtcbiAgICAgIHJldHVybiB0YiAtIHRhO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiAyICogTWF0aC5QSSAtICh0YSAtIHRiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGJvdW5kaW5nIGJveCBvZiBhIGJlemllcmN1cnZlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4MCBzdGFydGluZyBwb2ludFxuICAgKiBAcGFyYW0ge051bWJlcn0geTBcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHgxIGZpcnN0IGNvbnRyb2wgcG9pbnRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkxXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4MiBzZWNvbmRvIGNvbnRyb2wgcG9pbnRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4MyBlbmQgb2YgYmV6aWVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5M1xuICAgKi9cbiAgLy8gdGFrZW4gZnJvbSBodHRwOi8vanNiaW4uY29tL2l2b21pcS81Ni9lZGl0ICBubyBjcmVkaXRzIGF2YWlsYWJsZSBmb3IgdGhhdC5cbiAgLy8gVE9ETzogY2FuIHdlIG5vcm1hbGl6ZSB0aGlzIHdpdGggdGhlIHN0YXJ0aW5nIHBvaW50cyBzZXQgYXQgMCBhbmQgdGhlbiB0cmFuc2xhdGVkIHRoZSBiYm94P1xuICBmdW5jdGlvbiBnZXRCb3VuZHNPZkN1cnZlKHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICAgIHZhciBhcmdzU3RyaW5nO1xuICAgIGlmIChmYWJyaWMuY2FjaGVzQm91bmRzT2ZDdXJ2ZSkge1xuICAgICAgYXJnc1N0cmluZyA9IF9qb2luLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIGlmIChmYWJyaWMuYm91bmRzT2ZDdXJ2ZUNhY2hlW2FyZ3NTdHJpbmddKSB7XG4gICAgICAgIHJldHVybiBmYWJyaWMuYm91bmRzT2ZDdXJ2ZUNhY2hlW2FyZ3NTdHJpbmddO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzcXJ0ID0gTWF0aC5zcXJ0LFxuICAgICAgICBtaW4gPSBNYXRoLm1pbiwgbWF4ID0gTWF0aC5tYXgsXG4gICAgICAgIGFicyA9IE1hdGguYWJzLCB0dmFsdWVzID0gW10sXG4gICAgICAgIGJvdW5kcyA9IFtbXSwgW11dLFxuICAgICAgICBhLCBiLCBjLCB0LCB0MSwgdDIsIGIyYWMsIHNxcnRiMmFjO1xuXG4gICAgYiA9IDYgKiB4MCAtIDEyICogeDEgKyA2ICogeDI7XG4gICAgYSA9IC0zICogeDAgKyA5ICogeDEgLSA5ICogeDIgKyAzICogeDM7XG4gICAgYyA9IDMgKiB4MSAtIDMgKiB4MDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjsgKytpKSB7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYiA9IDYgKiB5MCAtIDEyICogeTEgKyA2ICogeTI7XG4gICAgICAgIGEgPSAtMyAqIHkwICsgOSAqIHkxIC0gOSAqIHkyICsgMyAqIHkzO1xuICAgICAgICBjID0gMyAqIHkxIC0gMyAqIHkwO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWJzKGEpIDwgMWUtMTIpIHtcbiAgICAgICAgaWYgKGFicyhiKSA8IDFlLTEyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdCA9IC1jIC8gYjtcbiAgICAgICAgaWYgKDAgPCB0ICYmIHQgPCAxKSB7XG4gICAgICAgICAgdHZhbHVlcy5wdXNoKHQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYjJhYyA9IGIgKiBiIC0gNCAqIGMgKiBhO1xuICAgICAgaWYgKGIyYWMgPCAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc3FydGIyYWMgPSBzcXJ0KGIyYWMpO1xuICAgICAgdDEgPSAoLWIgKyBzcXJ0YjJhYykgLyAoMiAqIGEpO1xuICAgICAgaWYgKDAgPCB0MSAmJiB0MSA8IDEpIHtcbiAgICAgICAgdHZhbHVlcy5wdXNoKHQxKTtcbiAgICAgIH1cbiAgICAgIHQyID0gKC1iIC0gc3FydGIyYWMpIC8gKDIgKiBhKTtcbiAgICAgIGlmICgwIDwgdDIgJiYgdDIgPCAxKSB7XG4gICAgICAgIHR2YWx1ZXMucHVzaCh0Mik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHgsIHksIGogPSB0dmFsdWVzLmxlbmd0aCwgamxlbiA9IGosIG10O1xuICAgIHdoaWxlIChqLS0pIHtcbiAgICAgIHQgPSB0dmFsdWVzW2pdO1xuICAgICAgbXQgPSAxIC0gdDtcbiAgICAgIHggPSAobXQgKiBtdCAqIG10ICogeDApICsgKDMgKiBtdCAqIG10ICogdCAqIHgxKSArICgzICogbXQgKiB0ICogdCAqIHgyKSArICh0ICogdCAqIHQgKiB4Myk7XG4gICAgICBib3VuZHNbMF1bal0gPSB4O1xuXG4gICAgICB5ID0gKG10ICogbXQgKiBtdCAqIHkwKSArICgzICogbXQgKiBtdCAqIHQgKiB5MSkgKyAoMyAqIG10ICogdCAqIHQgKiB5MikgKyAodCAqIHQgKiB0ICogeTMpO1xuICAgICAgYm91bmRzWzFdW2pdID0geTtcbiAgICB9XG5cbiAgICBib3VuZHNbMF1bamxlbl0gPSB4MDtcbiAgICBib3VuZHNbMV1bamxlbl0gPSB5MDtcbiAgICBib3VuZHNbMF1bamxlbiArIDFdID0geDM7XG4gICAgYm91bmRzWzFdW2psZW4gKyAxXSA9IHkzO1xuICAgIHZhciByZXN1bHQgPSBbXG4gICAgICB7XG4gICAgICAgIHg6IG1pbi5hcHBseShudWxsLCBib3VuZHNbMF0pLFxuICAgICAgICB5OiBtaW4uYXBwbHkobnVsbCwgYm91bmRzWzFdKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgeDogbWF4LmFwcGx5KG51bGwsIGJvdW5kc1swXSksXG4gICAgICAgIHk6IG1heC5hcHBseShudWxsLCBib3VuZHNbMV0pXG4gICAgICB9XG4gICAgXTtcbiAgICBpZiAoZmFicmljLmNhY2hlc0JvdW5kc09mQ3VydmUpIHtcbiAgICAgIGZhYnJpYy5ib3VuZHNPZkN1cnZlQ2FjaGVbYXJnc1N0cmluZ10gPSByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYXJjIHRvIGEgYnVuY2ggb2YgYmV6aWVyIGN1cnZlc1xuICAgKiBAcGFyYW0ge051bWJlcn0gZnggc3RhcnRpbmcgcG9pbnQgeFxuICAgKiBAcGFyYW0ge051bWJlcn0gZnkgc3RhcnRpbmcgcG9pbnQgeVxuICAgKiBAcGFyYW0ge0FycmF5fSBjb29yZHMgQXJjIGNvbW1hbmRcbiAgICovXG4gIGZ1bmN0aW9uIGZyb21BcmNUb0JlemllcnMoZngsIGZ5LCBjb29yZHMpIHtcbiAgICB2YXIgcnggPSBjb29yZHNbMV0sXG4gICAgICAgIHJ5ID0gY29vcmRzWzJdLFxuICAgICAgICByb3QgPSBjb29yZHNbM10sXG4gICAgICAgIGxhcmdlID0gY29vcmRzWzRdLFxuICAgICAgICBzd2VlcCA9IGNvb3Jkc1s1XSxcbiAgICAgICAgdHggPSBjb29yZHNbNl0sXG4gICAgICAgIHR5ID0gY29vcmRzWzddLFxuICAgICAgICBzZWdzTm9ybSA9IGFyY1RvU2VnbWVudHModHggLSBmeCwgdHkgLSBmeSwgcngsIHJ5LCBsYXJnZSwgc3dlZXAsIHJvdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2Vnc05vcm0ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHNlZ3NOb3JtW2ldWzFdICs9IGZ4O1xuICAgICAgc2Vnc05vcm1baV1bMl0gKz0gZnk7XG4gICAgICBzZWdzTm9ybVtpXVszXSArPSBmeDtcbiAgICAgIHNlZ3NOb3JtW2ldWzRdICs9IGZ5O1xuICAgICAgc2Vnc05vcm1baV1bNV0gKz0gZng7XG4gICAgICBzZWdzTm9ybVtpXVs2XSArPSBmeTtcbiAgICB9XG4gICAgcmV0dXJuIHNlZ3NOb3JtO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHRha2UgYSBwYXJzZWQgU1ZHIHBhdGggYW5kIG1ha2UgaXQgc2ltcGxlciBmb3IgZmFicmljSlMgbG9naWMuXG4gICAqIHNpbXBsaWZpY2F0aW9uIGNvbnNpc3Qgb2Y6IG9ubHkgVVBQRVJDQVNFIGFic29sdXRlIGNvbW1hbmRzICggcmVsYXRpdmUgY29udmVydGVkIHRvIGFic29sdXRlIClcbiAgICogUyBjb252ZXJ0ZWQgaW4gQywgVCBjb252ZXJ0ZWQgaW4gUSwgQSBjb252ZXJ0ZWQgaW4gQy5cbiAgICogQHBhcmFtIHtBcnJheX0gcGF0aCB0aGUgYXJyYXkgb2YgY29tbWFuZHMgb2YgYSBwYXJzZWQgc3ZnIHBhdGggZm9yIGZhYnJpYy5QYXRoXG4gICAqIEByZXR1cm4ge0FycmF5fSB0aGUgc2ltcGxpZmllZCBhcnJheSBvZiBjb21tYW5kcyBvZiBhIHBhcnNlZCBzdmcgcGF0aCBmb3IgZmFicmljLlBhdGhcbiAgICovXG4gIGZ1bmN0aW9uIG1ha2VQYXRoU2ltcGxlcihwYXRoKSB7XG4gICAgLy8geCBhbmQgeSByZXByZXNlbnQgdGhlIGxhc3QgcG9pbnQgb2YgdGhlIHBhdGguIHRoZSBwcmV2aW91cyBjb21tYW5kIHBvaW50LlxuICAgIC8vIHdlIGFkZCB0aGVtIHRvIGVhY2ggcmVsYXRpdmUgY29tbWFuZCB0byBtYWtlIGl0IGFuIGFic29sdXRlIGNvbW1lbnQuXG4gICAgLy8gd2UgYWxzbyBzd2FwIHRoZSB2IFYgaCBIIHdpdGggTCwgYmVjYXVzZSBhcmUgZWFzaWVyIHRvIHRyYW5zZm9ybS5cbiAgICB2YXIgeCA9IDAsIHkgPSAwLCBsZW4gPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgLy8geDEgYW5kIHkxIHJlcHJlc2VudCB0aGUgbGFzdCBwb2ludCBvZiB0aGUgc3VicGF0aC4gdGhlIHN1YnBhdGggaXMgc3RhcnRlZCB3aXRoXG4gICAgICAgIC8vIG0gb3IgTSBjb21tYW5kLiBXaGVuIGEgeiBvciBaIGNvbW1hbmQgaXMgZHJhd24sIHggYW5kIHkgbmVlZCB0byBiZSByZXNldHRlZCB0b1xuICAgICAgICAvLyB0aGUgbGFzdCB4MSBhbmQgeTEuXG4gICAgICAgIHgxID0gMCwgeTEgPSAwLCBjdXJyZW50LCBpLCBjb252ZXJ0ZWQsXG4gICAgICAgIC8vIHByZXZpb3VzIHdpbGwgaG9zdCB0aGUgbGV0dGVyIG9mIHRoZSBwcmV2aW91cyBjb21tYW5kLCB0byBoYW5kbGUgUyBhbmQgVC5cbiAgICAgICAgLy8gY29udHJvbFggYW5kIGNvbnRyb2xZIHdpbGwgaG9zdCB0aGUgcHJldmlvdXMgcmVmbGVjdGVkIGNvbnRyb2wgcG9pbnRcbiAgICAgICAgZGVzdGluYXRpb25QYXRoID0gW10sIHByZXZpb3VzLCBjb250cm9sWCwgY29udHJvbFk7XG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjb252ZXJ0ZWQgPSBmYWxzZTtcbiAgICAgIGN1cnJlbnQgPSBwYXRoW2ldLnNsaWNlKDApO1xuICAgICAgc3dpdGNoIChjdXJyZW50WzBdKSB7IC8vIGZpcnN0IGxldHRlclxuICAgICAgICBjYXNlICdsJzogLy8gbGluZXRvLCByZWxhdGl2ZVxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnTCc7XG4gICAgICAgICAgY3VycmVudFsxXSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbMl0gKz0geTtcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzJdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdoJzogLy8gaG9yaXpvbnRhbCBsaW5ldG8sIHJlbGF0aXZlXG4gICAgICAgICAgY3VycmVudFsxXSArPSB4O1xuICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSAnSCc6XG4gICAgICAgICAgY3VycmVudFswXSA9ICdMJztcbiAgICAgICAgICBjdXJyZW50WzJdID0geTtcbiAgICAgICAgICB4ID0gY3VycmVudFsxXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndic6IC8vIHZlcnRpY2FsIGxpbmV0bywgcmVsYXRpdmVcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHk7XG4gICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlICdWJzpcbiAgICAgICAgICBjdXJyZW50WzBdID0gJ0wnO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzFdO1xuICAgICAgICAgIGN1cnJlbnRbMV0gPSB4O1xuICAgICAgICAgIGN1cnJlbnRbMl0gPSB5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdtJzogLy8gbW92ZVRvLCByZWxhdGl2ZVxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnTSc7XG4gICAgICAgICAgY3VycmVudFsxXSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbMl0gKz0geTtcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzJdO1xuICAgICAgICAgIHgxID0gY3VycmVudFsxXTtcbiAgICAgICAgICB5MSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2MnOiAvLyBiZXppZXJDdXJ2ZVRvLCByZWxhdGl2ZVxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnQyc7XG4gICAgICAgICAgY3VycmVudFsxXSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbMl0gKz0geTtcbiAgICAgICAgICBjdXJyZW50WzNdICs9IHg7XG4gICAgICAgICAgY3VycmVudFs0XSArPSB5O1xuICAgICAgICAgIGN1cnJlbnRbNV0gKz0geDtcbiAgICAgICAgICBjdXJyZW50WzZdICs9IHk7XG4gICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlICdDJzpcbiAgICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbM107XG4gICAgICAgICAgY29udHJvbFkgPSBjdXJyZW50WzRdO1xuICAgICAgICAgIHggPSBjdXJyZW50WzVdO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzZdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzJzogLy8gc2hvcnRoYW5kIGN1YmljIGJlemllckN1cnZlVG8sIHJlbGF0aXZlXG4gICAgICAgICAgY3VycmVudFswXSA9ICdTJztcbiAgICAgICAgICBjdXJyZW50WzFdICs9IHg7XG4gICAgICAgICAgY3VycmVudFsyXSArPSB5O1xuICAgICAgICAgIGN1cnJlbnRbM10gKz0geDtcbiAgICAgICAgICBjdXJyZW50WzRdICs9IHk7XG4gICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAvLyB3b3VsZCBiZSBzU2NDIGJ1dCBzaW5jZSB3ZSBhcmUgc3dhcHBpbmcgc1NjIGZvciBDLCB3ZSBjaGVjayBqdXN0IHRoYXQuXG4gICAgICAgICAgaWYgKHByZXZpb3VzID09PSAnQycpIHtcbiAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSByZWZsZWN0aW9uIG9mIHByZXZpb3VzIGNvbnRyb2wgcG9pbnRzXG4gICAgICAgICAgICBjb250cm9sWCA9IDIgKiB4IC0gY29udHJvbFg7XG4gICAgICAgICAgICBjb250cm9sWSA9IDIgKiB5IC0gY29udHJvbFk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcHJldmlvdXMgY29tbWFuZCBvciBpZiB0aGUgcHJldmlvdXMgY29tbWFuZCB3YXMgbm90IGEgQywgYywgUywgb3IgcyxcbiAgICAgICAgICAgIC8vIHRoZSBjb250cm9sIHBvaW50IGlzIGNvaW5jaWRlbnQgd2l0aCB0aGUgY3VycmVudCBwb2ludFxuICAgICAgICAgICAgY29udHJvbFggPSB4O1xuICAgICAgICAgICAgY29udHJvbFkgPSB5O1xuICAgICAgICAgIH1cbiAgICAgICAgICB4ID0gY3VycmVudFszXTtcbiAgICAgICAgICB5ID0gY3VycmVudFs0XTtcbiAgICAgICAgICBjdXJyZW50WzBdID0gJ0MnO1xuICAgICAgICAgIGN1cnJlbnRbNV0gPSBjdXJyZW50WzNdO1xuICAgICAgICAgIGN1cnJlbnRbNl0gPSBjdXJyZW50WzRdO1xuICAgICAgICAgIGN1cnJlbnRbM10gPSBjdXJyZW50WzFdO1xuICAgICAgICAgIGN1cnJlbnRbNF0gPSBjdXJyZW50WzJdO1xuICAgICAgICAgIGN1cnJlbnRbMV0gPSBjb250cm9sWDtcbiAgICAgICAgICBjdXJyZW50WzJdID0gY29udHJvbFk7XG4gICAgICAgICAgLy8gY3VycmVudFszXSBhbmQgY3VycmVudFs0XSBhcmUgTk9XIHRoZSBzZWNvbmQgY29udHJvbCBwb2ludC5cbiAgICAgICAgICAvLyB3ZSBrZWVwIGl0IGZvciB0aGUgbmV4dCByZWZsZWN0aW9uLlxuICAgICAgICAgIGNvbnRyb2xYID0gY3VycmVudFszXTtcbiAgICAgICAgICBjb250cm9sWSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3EnOiAvLyBxdWFkcmF0aWNDdXJ2ZVRvLCByZWxhdGl2ZVxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnUSc7XG4gICAgICAgICAgY3VycmVudFsxXSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbMl0gKz0geTtcbiAgICAgICAgICBjdXJyZW50WzNdICs9IHg7XG4gICAgICAgICAgY3VycmVudFs0XSArPSB5O1xuICAgICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgY29udHJvbFggPSBjdXJyZW50WzFdO1xuICAgICAgICAgIGNvbnRyb2xZID0gY3VycmVudFsyXTtcbiAgICAgICAgICB4ID0gY3VycmVudFszXTtcbiAgICAgICAgICB5ID0gY3VycmVudFs0XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndCc6IC8vIHNob3J0aGFuZCBxdWFkcmF0aWNDdXJ2ZVRvLCByZWxhdGl2ZVxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnVCc7XG4gICAgICAgICAgY3VycmVudFsxXSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbMl0gKz0geTtcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgIGlmIChwcmV2aW91cyA9PT0gJ1EnKSB7XG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgcmVmbGVjdGlvbiBvZiBwcmV2aW91cyBjb250cm9sIHBvaW50XG4gICAgICAgICAgICBjb250cm9sWCA9IDIgKiB4IC0gY29udHJvbFg7XG4gICAgICAgICAgICBjb250cm9sWSA9IDIgKiB5IC0gY29udHJvbFk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gcHJldmlvdXMgY29tbWFuZCBvciBpZiB0aGUgcHJldmlvdXMgY29tbWFuZCB3YXMgbm90IGEgUSwgcSwgVCBvciB0LFxuICAgICAgICAgICAgLy8gYXNzdW1lIHRoZSBjb250cm9sIHBvaW50IGlzIGNvaW5jaWRlbnQgd2l0aCB0aGUgY3VycmVudCBwb2ludFxuICAgICAgICAgICAgY29udHJvbFggPSB4O1xuICAgICAgICAgICAgY29udHJvbFkgPSB5O1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJyZW50WzBdID0gJ1EnO1xuICAgICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICAgIHkgPSBjdXJyZW50WzJdO1xuICAgICAgICAgIGN1cnJlbnRbMV0gPSBjb250cm9sWDtcbiAgICAgICAgICBjdXJyZW50WzJdID0gY29udHJvbFk7XG4gICAgICAgICAgY3VycmVudFszXSA9IHg7XG4gICAgICAgICAgY3VycmVudFs0XSA9IHk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgIGN1cnJlbnRbMF0gPSAnQSc7XG4gICAgICAgICAgY3VycmVudFs2XSArPSB4O1xuICAgICAgICAgIGN1cnJlbnRbN10gKz0geTtcbiAgICAgICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgIGNvbnZlcnRlZCA9IHRydWU7XG4gICAgICAgICAgZGVzdGluYXRpb25QYXRoID0gZGVzdGluYXRpb25QYXRoLmNvbmNhdChmcm9tQXJjVG9CZXppZXJzKHgsIHksIGN1cnJlbnQpKTtcbiAgICAgICAgICB4ID0gY3VycmVudFs2XTtcbiAgICAgICAgICB5ID0gY3VycmVudFs3XTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAneic6XG4gICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgIHggPSB4MTtcbiAgICAgICAgICB5ID0geTE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgICBpZiAoIWNvbnZlcnRlZCkge1xuICAgICAgICBkZXN0aW5hdGlvblBhdGgucHVzaChjdXJyZW50KTtcbiAgICAgIH1cbiAgICAgIHByZXZpb3VzID0gY3VycmVudFswXTtcbiAgICB9XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uUGF0aDtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsYyBsZW5ndGggZnJvbSBwb2ludCB4MSx5MSB0byB4Mix5MlxuICAgKiBAcGFyYW0ge051bWJlcn0geDEgc3RhcnRpbmcgcG9pbnQgeFxuICAgKiBAcGFyYW0ge051bWJlcn0geTEgc3RhcnRpbmcgcG9pbnQgeVxuICAgKiBAcGFyYW0ge051bWJlcn0geDIgc3RhcnRpbmcgcG9pbnQgeFxuICAgKiBAcGFyYW0ge051bWJlcn0geTIgc3RhcnRpbmcgcG9pbnQgeVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGxlbmd0aCBvZiBzZWdtZW50XG4gICAqL1xuICBmdW5jdGlvbiBjYWxjTGluZUxlbmd0aCh4MSwgeTEsIHgyLCB5Mikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoKHgyIC0geDEpICogKHgyIC0geDEpICsgKHkyIC0geTEpICogKHkyIC0geTEpKTtcbiAgfVxuXG4gIC8vIGZ1bmN0aW9ucyBmb3IgdGhlIEN1YmljIGJlaXplclxuICAvLyB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20va29udmFqcy9rb252YS9ibG9iLzcuMC41L3NyYy9zaGFwZXMvUGF0aC50cyNMMzUwXG4gIGZ1bmN0aW9uIENCMSh0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdDtcbiAgfVxuICBmdW5jdGlvbiBDQjIodCkge1xuICAgIHJldHVybiAzICogdCAqIHQgKiAoMSAtIHQpO1xuICB9XG4gIGZ1bmN0aW9uIENCMyh0KSB7XG4gICAgcmV0dXJuIDMgKiB0ICogKDEgLSB0KSAqICgxIC0gdCk7XG4gIH1cbiAgZnVuY3Rpb24gQ0I0KHQpIHtcbiAgICByZXR1cm4gKDEgLSB0KSAqICgxIC0gdCkgKiAoMSAtIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UG9pbnRPbkN1YmljQmV6aWVySXRlcmF0b3IocDF4LCBwMXksIHAyeCwgcDJ5LCBwM3gsIHAzeSwgcDR4LCBwNHkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ocGN0KSB7XG4gICAgICB2YXIgYzEgPSBDQjEocGN0KSwgYzIgPSBDQjIocGN0KSwgYzMgPSBDQjMocGN0KSwgYzQgPSBDQjQocGN0KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHA0eCAqIGMxICsgcDN4ICogYzIgKyBwMnggKiBjMyArIHAxeCAqIGM0LFxuICAgICAgICB5OiBwNHkgKiBjMSArIHAzeSAqIGMyICsgcDJ5ICogYzMgKyBwMXkgKiBjNFxuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFuZ2VudEN1YmljSXRlcmF0b3IocDF4LCBwMXksIHAyeCwgcDJ5LCBwM3gsIHAzeSwgcDR4LCBwNHkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHBjdCkge1xuICAgICAgdmFyIGludlQgPSAxIC0gcGN0LFxuICAgICAgICAgIHRhbmdlbnRYID0gKDMgKiBpbnZUICogaW52VCAqIChwMnggLSBwMXgpKSArICg2ICogaW52VCAqIHBjdCAqIChwM3ggLSBwMngpKSArXG4gICAgICAgICAgKDMgKiBwY3QgKiBwY3QgKiAocDR4IC0gcDN4KSksXG4gICAgICAgICAgdGFuZ2VudFkgPSAoMyAqIGludlQgKiBpbnZUICogKHAyeSAtIHAxeSkpICsgKDYgKiBpbnZUICogcGN0ICogKHAzeSAtIHAyeSkpICtcbiAgICAgICAgICAoMyAqIHBjdCAqIHBjdCAqIChwNHkgLSBwM3kpKTtcbiAgICAgIHJldHVybiBNYXRoLmF0YW4yKHRhbmdlbnRZLCB0YW5nZW50WCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFFCMSh0KSB7XG4gICAgcmV0dXJuIHQgKiB0O1xuICB9XG5cbiAgZnVuY3Rpb24gUUIyKHQpIHtcbiAgICByZXR1cm4gMiAqIHQgKiAoMSAtIHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gUUIzKHQpIHtcbiAgICByZXR1cm4gKDEgLSB0KSAqICgxIC0gdCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQb2ludE9uUXVhZHJhdGljQmV6aWVySXRlcmF0b3IocDF4LCBwMXksIHAyeCwgcDJ5LCBwM3gsIHAzeSkge1xuICAgIHJldHVybiBmdW5jdGlvbihwY3QpIHtcbiAgICAgIHZhciBjMSA9IFFCMShwY3QpLCBjMiA9IFFCMihwY3QpLCBjMyA9IFFCMyhwY3QpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcDN4ICogYzEgKyBwMnggKiBjMiArIHAxeCAqIGMzLFxuICAgICAgICB5OiBwM3kgKiBjMSArIHAyeSAqIGMyICsgcDF5ICogYzNcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhbmdlbnRRdWFkcmF0aWNJdGVyYXRvcihwMXgsIHAxeSwgcDJ4LCBwMnksIHAzeCwgcDN5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwY3QpIHtcbiAgICAgIHZhciBpbnZUID0gMSAtIHBjdCxcbiAgICAgICAgICB0YW5nZW50WCA9ICgyICogaW52VCAqIChwMnggLSBwMXgpKSArICgyICogcGN0ICogKHAzeCAtIHAyeCkpLFxuICAgICAgICAgIHRhbmdlbnRZID0gKDIgKiBpbnZUICogKHAyeSAtIHAxeSkpICsgKDIgKiBwY3QgKiAocDN5IC0gcDJ5KSk7XG4gICAgICByZXR1cm4gTWF0aC5hdGFuMih0YW5nZW50WSwgdGFuZ2VudFgpO1xuICAgIH07XG4gIH1cblxuXG4gIC8vIHRoaXMgd2lsbCBydW4gb3ZlciBhIHBhdGggc2VnbWVudCAoIGEgY3ViaWMgb3IgcXVhZHJhdGljIHNlZ21lbnQpIGFuZCBhcHByb3hpbWF0ZSBpdFxuICAvLyB3aXRoIDEwMCBzZWdlbW50cy4gVGhpcyB3aWxsIGdvb2QgZW5vdWdoIHRvIGNhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIHRoZSBjdXJ2ZVxuICBmdW5jdGlvbiBwYXRoSXRlcmF0b3IoaXRlcmF0b3IsIHgxLCB5MSkge1xuICAgIHZhciB0ZW1wUCA9IHsgeDogeDEsIHk6IHkxIH0sIHAsIHRtcExlbiA9IDAsIHBlcmM7XG4gICAgZm9yIChwZXJjID0gMTsgcGVyYyA8PSAxMDA7IHBlcmMgKz0gMSkge1xuICAgICAgcCA9IGl0ZXJhdG9yKHBlcmMgLyAxMDApO1xuICAgICAgdG1wTGVuICs9IGNhbGNMaW5lTGVuZ3RoKHRlbXBQLngsIHRlbXBQLnksIHAueCwgcC55KTtcbiAgICAgIHRlbXBQID0gcDtcbiAgICB9XG4gICAgcmV0dXJuIHRtcExlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlbiBhIHBhdGhJbmZvLCBhbmQgYSBkaXN0YW5jZSBpbiBwaXhlbHMsIGZpbmQgdGhlIHBlcmNlbnRhZ2UgZnJvbSAwIHRvIDFcbiAgICogdGhhdCBjb3JyZXNwb25kIHRvIHRoYXQgcGl4ZWxzIHJ1biBvdmVyIHRoZSBwYXRoLlxuICAgKiBUaGUgcGVyY2VudGFnZSB3aWxsIGJlIHRoZW4gdXNlZCB0byBmaW5kIHRoZSBjb3JyZWN0IHBvaW50IG9uIHRoZSBjYW52YXMgZm9yIHRoZSBwYXRoLlxuICAgKiBAcGFyYW0ge0FycmF5fSBzZWdJbmZvIGZhYnJpY0pTIGNvbGxlY3Rpb24gb2YgaW5mb3JtYXRpb24gb24gYSBwYXJzZWQgcGF0aFxuICAgKiBAcGFyYW0ge051bWJlcn0gZGlzdGFuY2UgZnJvbSBzdGFydGluZyBwb2ludCwgaW4gcGl4ZWxzLlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluZm8gb2JqZWN0IHdpdGggeCBhbmQgeSAoIHRoZSBwb2ludCBvbiBjYW52YXMgKSBhbmQgYW5nbGUsIHRoZSB0YW5nZW50IG9uIHRoYXQgcG9pbnQ7XG4gICAqL1xuICBmdW5jdGlvbiBmaW5kUGVyY2VudGFnZUZvckRpc3RhbmNlKHNlZ0luZm8sIGRpc3RhbmNlKSB7XG4gICAgdmFyIHBlcmMgPSAwLCB0bXBMZW4gPSAwLCBpdGVyYXRvciA9IHNlZ0luZm8uaXRlcmF0b3IsIHRlbXBQID0geyB4OiBzZWdJbmZvLngsIHk6IHNlZ0luZm8ueSB9LFxuICAgICAgICBwLCBuZXh0TGVuLCBuZXh0U3RlcCA9IDAuMDEsIGFuZ2xlRmluZGVyID0gc2VnSW5mby5hbmdsZUZpbmRlciwgbGFzdFBlcmM7XG4gICAgLy8gbmV4dFN0ZXAgPiAwLjAwMDEgY292ZXJzIDAuMDAwMTU2MjUgdGhhdCAxLzY0dGggb2YgMS8xMDBcbiAgICAvLyB0aGUgcGF0aFxuICAgIHdoaWxlICh0bXBMZW4gPCBkaXN0YW5jZSAmJiBuZXh0U3RlcCA+IDAuMDAwMSkge1xuICAgICAgcCA9IGl0ZXJhdG9yKHBlcmMpO1xuICAgICAgbGFzdFBlcmMgPSBwZXJjO1xuICAgICAgbmV4dExlbiA9IGNhbGNMaW5lTGVuZ3RoKHRlbXBQLngsIHRlbXBQLnksIHAueCwgcC55KTtcbiAgICAgIC8vIGNvbXBhcmUgdG1wTGVuIGVhY2ggY3ljbGUgd2l0aCBkaXN0YW5jZSwgZGVjaWRlIG5leHQgcGVyYyB0byB0ZXN0LlxuICAgICAgaWYgKChuZXh0TGVuICsgdG1wTGVuKSA+IGRpc3RhbmNlKSB7XG4gICAgICAgIC8vIHdlIGRpc2NhcmQgdGhpcyBzdGVwIGFuZCB3ZSBtYWtlIHNtYWxsZXIgc3RlcHMuXG4gICAgICAgIHBlcmMgLT0gbmV4dFN0ZXA7XG4gICAgICAgIG5leHRTdGVwIC89IDI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGVtcFAgPSBwO1xuICAgICAgICBwZXJjICs9IG5leHRTdGVwO1xuICAgICAgICB0bXBMZW4gKz0gbmV4dExlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcC5hbmdsZSA9IGFuZ2xlRmluZGVyKGxhc3RQZXJjKTtcbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSdW4gb3ZlciBhIHBhcnNlZCBhbmQgc2ltcGxpZmVkIHBhdGggYW5kIGV4dHJhYyBzb21lIGluZm9ybWF0aW9ucy5cbiAgICogaW5mb3JtYXRpb25zIGFyZSBsZW5ndGggb2YgZWFjaCBjb21tYW5kIGFuZCBzdGFydGluZyBwb2ludFxuICAgKiBAcGFyYW0ge0FycmF5fSBwYXRoIGZhYnJpY0pTIHBhcnNlZCBwYXRoIGNvbW1hbmRzXG4gICAqIEByZXR1cm4ge0FycmF5fSBwYXRoIGNvbW1hbmRzIGluZm9ybWF0aW9uc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0UGF0aFNlZ21lbnRzSW5mbyhwYXRoKSB7XG4gICAgdmFyIHRvdGFsTGVuZ3RoID0gMCwgbGVuID0gcGF0aC5sZW5ndGgsIGN1cnJlbnQsXG4gICAgICAgIC8veDIgYW5kIHkyIGFyZSB0aGUgY29vcmRzIG9mIHNlZ21lbnQgc3RhcnRcbiAgICAgICAgLy94MSBhbmQgeTEgYXJlIHRoZSBjb29yZHMgb2YgdGhlIGN1cnJlbnQgcG9pbnRcbiAgICAgICAgeDEgPSAwLCB5MSA9IDAsIHgyID0gMCwgeTIgPSAwLCBpbmZvID0gW10sIGl0ZXJhdG9yLCB0ZW1wSW5mbywgYW5nbGVGaW5kZXI7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgY3VycmVudCA9IHBhdGhbaV07XG4gICAgICB0ZW1wSW5mbyA9IHtcbiAgICAgICAgeDogeDEsXG4gICAgICAgIHk6IHkxLFxuICAgICAgICBjb21tYW5kOiBjdXJyZW50WzBdLFxuICAgICAgfTtcbiAgICAgIHN3aXRjaCAoY3VycmVudFswXSkgeyAvL2ZpcnN0IGxldHRlclxuICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICB0ZW1wSW5mby5sZW5ndGggPSAwO1xuICAgICAgICAgIHgyID0geDEgPSBjdXJyZW50WzFdO1xuICAgICAgICAgIHkyID0geTEgPSBjdXJyZW50WzJdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICB0ZW1wSW5mby5sZW5ndGggPSBjYWxjTGluZUxlbmd0aCh4MSwgeTEsIGN1cnJlbnRbMV0sIGN1cnJlbnRbMl0pO1xuICAgICAgICAgIHgxID0gY3VycmVudFsxXTtcbiAgICAgICAgICB5MSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgIGl0ZXJhdG9yID0gZ2V0UG9pbnRPbkN1YmljQmV6aWVySXRlcmF0b3IoXG4gICAgICAgICAgICB4MSxcbiAgICAgICAgICAgIHkxLFxuICAgICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICAgIGN1cnJlbnRbMl0sXG4gICAgICAgICAgICBjdXJyZW50WzNdLFxuICAgICAgICAgICAgY3VycmVudFs0XSxcbiAgICAgICAgICAgIGN1cnJlbnRbNV0sXG4gICAgICAgICAgICBjdXJyZW50WzZdXG4gICAgICAgICAgKTtcbiAgICAgICAgICBhbmdsZUZpbmRlciA9IGdldFRhbmdlbnRDdWJpY0l0ZXJhdG9yKFxuICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICB5MSxcbiAgICAgICAgICAgIGN1cnJlbnRbMV0sXG4gICAgICAgICAgICBjdXJyZW50WzJdLFxuICAgICAgICAgICAgY3VycmVudFszXSxcbiAgICAgICAgICAgIGN1cnJlbnRbNF0sXG4gICAgICAgICAgICBjdXJyZW50WzVdLFxuICAgICAgICAgICAgY3VycmVudFs2XVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGVtcEluZm8uaXRlcmF0b3IgPSBpdGVyYXRvcjtcbiAgICAgICAgICB0ZW1wSW5mby5hbmdsZUZpbmRlciA9IGFuZ2xlRmluZGVyO1xuICAgICAgICAgIHRlbXBJbmZvLmxlbmd0aCA9IHBhdGhJdGVyYXRvcihpdGVyYXRvciwgeDEsIHkxKTtcbiAgICAgICAgICB4MSA9IGN1cnJlbnRbNV07XG4gICAgICAgICAgeTEgPSBjdXJyZW50WzZdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICBpdGVyYXRvciA9IGdldFBvaW50T25RdWFkcmF0aWNCZXppZXJJdGVyYXRvcihcbiAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICBjdXJyZW50WzFdLFxuICAgICAgICAgICAgY3VycmVudFsyXSxcbiAgICAgICAgICAgIGN1cnJlbnRbM10sXG4gICAgICAgICAgICBjdXJyZW50WzRdXG4gICAgICAgICAgKTtcbiAgICAgICAgICBhbmdsZUZpbmRlciA9IGdldFRhbmdlbnRRdWFkcmF0aWNJdGVyYXRvcihcbiAgICAgICAgICAgIHgxLFxuICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICBjdXJyZW50WzFdLFxuICAgICAgICAgICAgY3VycmVudFsyXSxcbiAgICAgICAgICAgIGN1cnJlbnRbM10sXG4gICAgICAgICAgICBjdXJyZW50WzRdXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0ZW1wSW5mby5pdGVyYXRvciA9IGl0ZXJhdG9yO1xuICAgICAgICAgIHRlbXBJbmZvLmFuZ2xlRmluZGVyID0gYW5nbGVGaW5kZXI7XG4gICAgICAgICAgdGVtcEluZm8ubGVuZ3RoID0gcGF0aEl0ZXJhdG9yKGl0ZXJhdG9yLCB4MSwgeTEpO1xuICAgICAgICAgIHgxID0gY3VycmVudFszXTtcbiAgICAgICAgICB5MSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ1onOlxuICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgICAvLyB3ZSBhZGQgdGhvc2UgaW4gb3JkZXIgdG8gZWFzZSBjYWxjdWxhdGlvbnMgbGF0ZXJcbiAgICAgICAgICB0ZW1wSW5mby5kZXN0WCA9IHgyO1xuICAgICAgICAgIHRlbXBJbmZvLmRlc3RZID0geTI7XG4gICAgICAgICAgdGVtcEluZm8ubGVuZ3RoID0gY2FsY0xpbmVMZW5ndGgoeDEsIHkxLCB4MiwgeTIpO1xuICAgICAgICAgIHgxID0geDI7XG4gICAgICAgICAgeTEgPSB5MjtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRvdGFsTGVuZ3RoICs9IHRlbXBJbmZvLmxlbmd0aDtcbiAgICAgIGluZm8ucHVzaCh0ZW1wSW5mbyk7XG4gICAgfVxuICAgIGluZm8ucHVzaCh7IGxlbmd0aDogdG90YWxMZW5ndGgsIHg6IHgxLCB5OiB5MSB9KTtcbiAgICByZXR1cm4gaW5mbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBvaW50T25QYXRoKHBhdGgsIGRpc3RhbmNlLCBpbmZvcykge1xuICAgIGlmICghaW5mb3MpIHtcbiAgICAgIGluZm9zID0gZ2V0UGF0aFNlZ21lbnRzSW5mbyhwYXRoKTtcbiAgICB9XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlICgoZGlzdGFuY2UgLSBpbmZvc1tpXS5sZW5ndGggPiAwKSAmJiBpIDwgKGluZm9zLmxlbmd0aCAtIDIpKSB7XG4gICAgICBkaXN0YW5jZSAtPSBpbmZvc1tpXS5sZW5ndGg7XG4gICAgICBpKys7XG4gICAgfVxuICAgIC8vIHZhciBkaXN0YW5jZSA9IGluZm9zW2luZm9zLmxlbmd0aCAtIDFdICogcGVyYztcbiAgICB2YXIgc2VnSW5mbyA9IGluZm9zW2ldLCBzZWdQZXJjZW50ID0gZGlzdGFuY2UgLyBzZWdJbmZvLmxlbmd0aCxcbiAgICAgICAgY29tbWFuZCA9IHNlZ0luZm8uY29tbWFuZCwgc2VnbWVudCA9IHBhdGhbaV0sIGluZm87XG5cbiAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgICByZXR1cm4geyB4OiBzZWdJbmZvLngsIHk6IHNlZ0luZm8ueSwgYW5nbGU6IDAgfTtcbiAgICAgIGNhc2UgJ1onOlxuICAgICAgY2FzZSAneic6XG4gICAgICAgIGluZm8gPSBuZXcgZmFicmljLlBvaW50KHNlZ0luZm8ueCwgc2VnSW5mby55KS5sZXJwKFxuICAgICAgICAgIG5ldyBmYWJyaWMuUG9pbnQoc2VnSW5mby5kZXN0WCwgc2VnSW5mby5kZXN0WSksXG4gICAgICAgICAgc2VnUGVyY2VudFxuICAgICAgICApO1xuICAgICAgICBpbmZvLmFuZ2xlID0gTWF0aC5hdGFuMihzZWdJbmZvLmRlc3RZIC0gc2VnSW5mby55LCBzZWdJbmZvLmRlc3RYIC0gc2VnSW5mby54KTtcbiAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICBjYXNlICdMJzpcbiAgICAgICAgaW5mbyA9IG5ldyBmYWJyaWMuUG9pbnQoc2VnSW5mby54LCBzZWdJbmZvLnkpLmxlcnAoXG4gICAgICAgICAgbmV3IGZhYnJpYy5Qb2ludChzZWdtZW50WzFdLCBzZWdtZW50WzJdKSxcbiAgICAgICAgICBzZWdQZXJjZW50XG4gICAgICAgICk7XG4gICAgICAgIGluZm8uYW5nbGUgPSBNYXRoLmF0YW4yKHNlZ21lbnRbMl0gLSBzZWdJbmZvLnksIHNlZ21lbnRbMV0gLSBzZWdJbmZvLngpO1xuICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgIGNhc2UgJ0MnOlxuICAgICAgICByZXR1cm4gZmluZFBlcmNlbnRhZ2VGb3JEaXN0YW5jZShzZWdJbmZvLCBkaXN0YW5jZSk7XG4gICAgICBjYXNlICdRJzpcbiAgICAgICAgcmV0dXJuIGZpbmRQZXJjZW50YWdlRm9yRGlzdGFuY2Uoc2VnSW5mbywgZGlzdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFN0cmluZ1xuICAgKiBAcmV0dXJuIHsoc3RyaW5nfG51bWJlcilbXVtdfSBBbiBhcnJheSBvZiBTVkcgcGF0aCBjb21tYW5kc1xuICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Vc2FnZTwvY2FwdGlvbj5cbiAgICogcGFyc2VQYXRoKCdNIDMgNCBRIDMgNSAyIDEgNCAwIFEgOSAxMiAyIDEgNCAwJykgPT09IFtcbiAgICogICBbJ00nLCAzLCA0XSxcbiAgICogICBbJ1EnLCAzLCA1LCAyLCAxLCA0LCAwXSxcbiAgICogICBbJ1EnLCA5LCAxMiwgMiwgMSwgNCwgMF0sXG4gICAqIF07XG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZVBhdGgocGF0aFN0cmluZykge1xuICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgY29vcmRzID0gW10sXG4gICAgICAgIGN1cnJlbnRQYXRoLFxuICAgICAgICBwYXJzZWQsXG4gICAgICAgIHJlID0gZmFicmljLnJlUGF0aENvbW1hbmQsXG4gICAgICAgIHJOdW1iZXIgPSAnWy0rXT8oPzpcXFxcZCpcXFxcLlxcXFxkK3xcXFxcZCtcXFxcLj8pKD86W2VFXVstK10/XFxcXGQrKT9cXFxccyonLFxuICAgICAgICByTnVtYmVyQ29tbWFXc3AgPSAnKCcgKyByTnVtYmVyICsgJyknICsgZmFicmljLmNvbW1hV3NwLFxuICAgICAgICByRmxhZ0NvbW1hV3NwID0gJyhbMDFdKScgKyBmYWJyaWMuY29tbWFXc3AgKyAnPycsXG4gICAgICAgIHJBcmNTZXEgPSByTnVtYmVyQ29tbWFXc3AgKyAnPycgKyByTnVtYmVyQ29tbWFXc3AgKyAnPycgKyByTnVtYmVyQ29tbWFXc3AgKyByRmxhZ0NvbW1hV3NwICsgckZsYWdDb21tYVdzcCArXG4gICAgICAgICAgck51bWJlckNvbW1hV3NwICsgJz8oJyArIHJOdW1iZXIgKyAnKScsXG4gICAgICAgIHJlZ0FyY0FyZ3VtZW50U2VxdWVuY2UgPSBuZXcgUmVnRXhwKHJBcmNTZXEsICdnJyksXG4gICAgICAgIG1hdGNoLFxuICAgICAgICBjb29yZHNTdHIsXG4gICAgICAgIC8vIG9uZSBvZiBjb21tYW5kcyAobSxNLGwsTCxxLFEsYyxDLGV0Yy4pIGZvbGxvd2VkIGJ5IG5vbi1jb21tYW5kIGNoYXJhY3RlcnMgKGkuZS4gY29tbWFuZCB2YWx1ZXMpXG4gICAgICAgIHBhdGg7XG4gICAgaWYgKCFwYXRoU3RyaW5nIHx8ICFwYXRoU3RyaW5nLm1hdGNoKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBwYXRoID0gcGF0aFN0cmluZy5tYXRjaCgvW216bGh2Y3NxdGFdW15temxodmNzcXRhXSovZ2kpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGNvb3Jkc1BhcnNlZCwgbGVuID0gcGF0aC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY3VycmVudFBhdGggPSBwYXRoW2ldO1xuXG4gICAgICBjb29yZHNTdHIgPSBjdXJyZW50UGF0aC5zbGljZSgxKS50cmltKCk7XG4gICAgICBjb29yZHMubGVuZ3RoID0gMDtcblxuICAgICAgdmFyIGNvbW1hbmQgPSBjdXJyZW50UGF0aC5jaGFyQXQoMCk7XG4gICAgICBjb29yZHNQYXJzZWQgPSBbY29tbWFuZF07XG5cbiAgICAgIGlmIChjb21tYW5kLnRvTG93ZXJDYXNlKCkgPT09ICdhJykge1xuICAgICAgICAvLyBhcmNzIGhhdmUgc3BlY2lhbCBmbGFncyB0aGF0IGFwcGFyZW50bHkgZG9uJ3QgcmVxdWlyZSBzcGFjZXMgc28gaGFuZGxlIHNwZWNpYWxcbiAgICAgICAgZm9yICh2YXIgYXJnczsgKGFyZ3MgPSByZWdBcmNBcmd1bWVudFNlcXVlbmNlLmV4ZWMoY29vcmRzU3RyKSk7KSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBhcmdzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb29yZHMucHVzaChhcmdzW2pdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmUuZXhlYyhjb29yZHNTdHIpKSkge1xuICAgICAgICAgIGNvb3Jkcy5wdXNoKG1hdGNoWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgamxlbiA9IGNvb3Jkcy5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgICAgcGFyc2VkID0gcGFyc2VGbG9hdChjb29yZHNbal0pO1xuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZCkpIHtcbiAgICAgICAgICBjb29yZHNQYXJzZWQucHVzaChwYXJzZWQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBjb21tYW5kTGVuZ3RoID0gY29tbWFuZExlbmd0aHNbY29tbWFuZC50b0xvd2VyQ2FzZSgpXSxcbiAgICAgICAgICByZXBlYXRlZENvbW1hbmQgPSByZXBlYXRlZENvbW1hbmRzW2NvbW1hbmRdIHx8IGNvbW1hbmQ7XG5cbiAgICAgIGlmIChjb29yZHNQYXJzZWQubGVuZ3RoIC0gMSA+IGNvbW1hbmRMZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgayA9IDEsIGtsZW4gPSBjb29yZHNQYXJzZWQubGVuZ3RoOyBrIDwga2xlbjsgayArPSBjb21tYW5kTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goW2NvbW1hbmRdLmNvbmNhdChjb29yZHNQYXJzZWQuc2xpY2UoaywgayArIGNvbW1hbmRMZW5ndGgpKSk7XG4gICAgICAgICAgY29tbWFuZCA9IHJlcGVhdGVkQ29tbWFuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGNvb3Jkc1BhcnNlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICpcbiAgICogQ29udmVydHMgcG9pbnRzIHRvIGEgc21vb3RoIFNWRyBwYXRoXG4gICAqIEBwYXJhbSB7eyB4OiBudW1iZXIseTogbnVtYmVyIH1bXX0gcG9pbnRzIEFycmF5IG9mIHBvaW50c1xuICAgKiBAcGFyYW0ge251bWJlcn0gW2NvcnJlY3Rpb25dIEFwcGx5IGEgY29ycmVjdGlvbiB0byB0aGUgcGF0aCAodXN1YWxseSB3ZSB1c2UgYHdpZHRoIC8gMTAwMGApLiBJZiB2YWx1ZSBpcyB1bmRlZmluZWQgMCBpcyB1c2VkIGFzIHRoZSBjb3JyZWN0aW9uIHZhbHVlLlxuICAgKiBAcmV0dXJuIHsoc3RyaW5nfG51bWJlcilbXVtdfSBBbiBhcnJheSBvZiBTVkcgcGF0aCBjb21tYW5kc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U21vb3RoUGF0aEZyb21Qb2ludHMocG9pbnRzLCBjb3JyZWN0aW9uKSB7XG4gICAgdmFyIHBhdGggPSBbXSwgaSxcbiAgICAgICAgcDEgPSBuZXcgZmFicmljLlBvaW50KHBvaW50c1swXS54LCBwb2ludHNbMF0ueSksXG4gICAgICAgIHAyID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpLFxuICAgICAgICBsZW4gPSBwb2ludHMubGVuZ3RoLCBtdWx0U2lnblggPSAxLCBtdWx0U2lnblkgPSAwLCBtYW55UG9pbnRzID0gbGVuID4gMjtcbiAgICBjb3JyZWN0aW9uID0gY29ycmVjdGlvbiB8fCAwO1xuXG4gICAgaWYgKG1hbnlQb2ludHMpIHtcbiAgICAgIG11bHRTaWduWCA9IHBvaW50c1syXS54IDwgcDIueCA/IC0xIDogcG9pbnRzWzJdLnggPT09IHAyLnggPyAwIDogMTtcbiAgICAgIG11bHRTaWduWSA9IHBvaW50c1syXS55IDwgcDIueSA/IC0xIDogcG9pbnRzWzJdLnkgPT09IHAyLnkgPyAwIDogMTtcbiAgICB9XG4gICAgcGF0aC5wdXNoKFsnTScsIHAxLnggLSBtdWx0U2lnblggKiBjb3JyZWN0aW9uLCBwMS55IC0gbXVsdFNpZ25ZICogY29ycmVjdGlvbl0pO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKCFwMS5lcShwMikpIHtcbiAgICAgICAgdmFyIG1pZFBvaW50ID0gcDEubWlkUG9pbnRGcm9tKHAyKTtcbiAgICAgICAgLy8gcDEgaXMgb3VyIGJlemllciBjb250cm9sIHBvaW50XG4gICAgICAgIC8vIG1pZHBvaW50IGlzIG91ciBlbmRwb2ludFxuICAgICAgICAvLyBzdGFydCBwb2ludCBpcyBwKGktMSkgdmFsdWUuXG4gICAgICAgIHBhdGgucHVzaChbJ1EnLCBwMS54LCBwMS55LCBtaWRQb2ludC54LCBtaWRQb2ludC55XSk7XG4gICAgICB9XG4gICAgICBwMSA9IHBvaW50c1tpXTtcbiAgICAgIGlmICgoaSArIDEpIDwgcG9pbnRzLmxlbmd0aCkge1xuICAgICAgICBwMiA9IHBvaW50c1tpICsgMV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtYW55UG9pbnRzKSB7XG4gICAgICBtdWx0U2lnblggPSBwMS54ID4gcG9pbnRzW2kgLSAyXS54ID8gMSA6IHAxLnggPT09IHBvaW50c1tpIC0gMl0ueCA/IDAgOiAtMTtcbiAgICAgIG11bHRTaWduWSA9IHAxLnkgPiBwb2ludHNbaSAtIDJdLnkgPyAxIDogcDEueSA9PT0gcG9pbnRzW2kgLSAyXS55ID8gMCA6IC0xO1xuICAgIH1cbiAgICBwYXRoLnB1c2goWydMJywgcDEueCArIG11bHRTaWduWCAqIGNvcnJlY3Rpb24sIHAxLnkgKyBtdWx0U2lnblkgKiBjb3JyZWN0aW9uXSk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSBhIHBhdGggYnkgdHJhbnNmb3JtaW5nIGVhY2ggc2VnbWVudC5cbiAgICogaXQgaGFzIHRvIGJlIGEgc2ltcGxpZmllZCBwYXRoIG9yIGl0IHdvbid0IHdvcmsuXG4gICAqIFdBUk5JTkc6IHRoaXMgZGVwZW5kcyBmcm9tIHBhdGhPZmZzZXQgZm9yIGNvcnJlY3Qgb3BlcmF0aW9uXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggZmFicmljSlMgcGFyc2VkIGFuZCBzaW1wbGlmaWVkIHBhdGggY29tbWFuZHNcbiAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtIG1hdHJpeCB0aGF0IHJlcHJlc2VudCB0aGUgdHJhbnNmb3JtYXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IFtwYXRoT2Zmc2V0XSB0aGUgZmFicmljLlBhdGggcGF0aE9mZnNldFxuICAgKiBAcGFyYW0ge051bWJlcn0gcGF0aE9mZnNldC54XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwYXRoT2Zmc2V0LnlcbiAgICogQHJldHVybnMge0FycmF5fSB0aGUgdHJhbnNmb3JtZWQgcGF0aFxuICAgKi9cbiAgZnVuY3Rpb24gdHJhbnNmb3JtUGF0aChwYXRoLCB0cmFuc2Zvcm0sIHBhdGhPZmZzZXQpIHtcbiAgICBpZiAocGF0aE9mZnNldCkge1xuICAgICAgdHJhbnNmb3JtID0gZmFicmljLnV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyhcbiAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICBbMSwgMCwgMCwgMSwgLXBhdGhPZmZzZXQueCwgLXBhdGhPZmZzZXQueV1cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBwYXRoLm1hcChmdW5jdGlvbihwYXRoU2VnbWVudCkge1xuICAgICAgdmFyIG5ld1NlZ21lbnQgPSBwYXRoU2VnbWVudC5zbGljZSgwKSwgcG9pbnQgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgcGF0aFNlZ21lbnQubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgICAgIHBvaW50LnggPSBwYXRoU2VnbWVudFtpXTtcbiAgICAgICAgcG9pbnQueSA9IHBhdGhTZWdtZW50W2kgKyAxXTtcbiAgICAgICAgcG9pbnQgPSBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludChwb2ludCwgdHJhbnNmb3JtKTtcbiAgICAgICAgbmV3U2VnbWVudFtpXSA9IHBvaW50Lng7XG4gICAgICAgIG5ld1NlZ21lbnRbaSArIDFdID0gcG9pbnQueTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdTZWdtZW50O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEpvaW4gcGF0aCBjb21tYW5kcyB0byBnbyBiYWNrIHRvIHN2ZyBmb3JtYXRcbiAgICogQHBhcmFtIHtBcnJheX0gcGF0aERhdGEgZmFicmljSlMgcGFyc2VkIHBhdGggY29tbWFuZHNcbiAgICogQHJldHVybiB7U3RyaW5nfSBqb2luZWQgcGF0aCAnTSAwIDAgTCAyMCAzMCdcbiAgICovXG4gIGZhYnJpYy51dGlsLmpvaW5QYXRoID0gZnVuY3Rpb24ocGF0aERhdGEpIHtcbiAgICByZXR1cm4gcGF0aERhdGEubWFwKGZ1bmN0aW9uIChzZWdtZW50KSB7IHJldHVybiBzZWdtZW50LmpvaW4oJyAnKTsgfSkuam9pbignICcpO1xuICB9O1xuICBmYWJyaWMudXRpbC5wYXJzZVBhdGggPSBwYXJzZVBhdGg7XG4gIGZhYnJpYy51dGlsLm1ha2VQYXRoU2ltcGxlciA9IG1ha2VQYXRoU2ltcGxlcjtcbiAgZmFicmljLnV0aWwuZ2V0U21vb3RoUGF0aEZyb21Qb2ludHMgPSBnZXRTbW9vdGhQYXRoRnJvbVBvaW50cztcbiAgZmFicmljLnV0aWwuZ2V0UGF0aFNlZ21lbnRzSW5mbyA9IGdldFBhdGhTZWdtZW50c0luZm87XG4gIGZhYnJpYy51dGlsLmdldEJvdW5kc09mQ3VydmUgPSBnZXRCb3VuZHNPZkN1cnZlO1xuICBmYWJyaWMudXRpbC5nZXRQb2ludE9uUGF0aCA9IGdldFBvaW50T25QYXRoO1xuICBmYWJyaWMudXRpbC50cmFuc2Zvcm1QYXRoID0gdHJhbnNmb3JtUGF0aDtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuICAvKipcbiAgICogSW52b2tlcyBtZXRob2Qgb24gYWxsIGl0ZW1zIGluIGEgZ2l2ZW4gYXJyYXlcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmFycmF5XG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IEFycmF5IHRvIGl0ZXJhdGUgb3ZlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIE5hbWUgb2YgYSBtZXRob2QgdG8gaW52b2tlXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgZnVuY3Rpb24gaW52b2tlKGFycmF5LCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSwgcmVzdWx0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSBhcmdzLmxlbmd0aCA/IGFycmF5W2ldW21ldGhvZF0uYXBwbHkoYXJyYXlbaV0sIGFyZ3MpIDogYXJyYXlbaV1bbWV0aG9kXS5jYWxsKGFycmF5W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBtYXhpbXVtIHZhbHVlIGluIGFycmF5IChub3QgbmVjZXNzYXJpbHkgXCJmaXJzdFwiIG9uZSlcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmFycmF5XG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IEFycmF5IHRvIGl0ZXJhdGUgb3ZlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gYnlQcm9wZXJ0eVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gbWF4KGFycmF5LCBieVByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGZpbmQoYXJyYXksIGJ5UHJvcGVydHksIGZ1bmN0aW9uKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICByZXR1cm4gdmFsdWUxID49IHZhbHVlMjtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBtaW5pbXVtIHZhbHVlIGluIGFycmF5IChub3QgbmVjZXNzYXJpbHkgXCJmaXJzdFwiIG9uZSlcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmFycmF5XG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IEFycmF5IHRvIGl0ZXJhdGUgb3ZlclxuICAgKiBAcGFyYW0ge1N0cmluZ30gYnlQcm9wZXJ0eVxuICAgKiBAcmV0dXJuIHsqfVxuICAgKi9cbiAgZnVuY3Rpb24gbWluKGFycmF5LCBieVByb3BlcnR5KSB7XG4gICAgcmV0dXJuIGZpbmQoYXJyYXksIGJ5UHJvcGVydHksIGZ1bmN0aW9uKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICByZXR1cm4gdmFsdWUxIDwgdmFsdWUyO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBrID0gYXJyYXkubGVuZ3RoO1xuICAgIHdoaWxlIChrLS0pIHtcbiAgICAgIGFycmF5W2tdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gZmluZChhcnJheSwgYnlQcm9wZXJ0eSwgY29uZGl0aW9uKSB7XG4gICAgaWYgKCFhcnJheSB8fCBhcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IGFycmF5Lmxlbmd0aCAtIDEsXG4gICAgICAgIHJlc3VsdCA9IGJ5UHJvcGVydHkgPyBhcnJheVtpXVtieVByb3BlcnR5XSA6IGFycmF5W2ldO1xuICAgIGlmIChieVByb3BlcnR5KSB7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlmIChjb25kaXRpb24oYXJyYXlbaV1bYnlQcm9wZXJ0eV0sIHJlc3VsdCkpIHtcbiAgICAgICAgICByZXN1bHQgPSBhcnJheVtpXVtieVByb3BlcnR5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWYgKGNvbmRpdGlvbihhcnJheVtpXSwgcmVzdWx0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IGFycmF5W2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQG5hbWVzcGFjZSBmYWJyaWMudXRpbC5hcnJheVxuICAgKi9cbiAgZmFicmljLnV0aWwuYXJyYXkgPSB7XG4gICAgZmlsbDogZmlsbCxcbiAgICBpbnZva2U6IGludm9rZSxcbiAgICBtaW46IG1pbixcbiAgICBtYXg6IG1heFxuICB9O1xuXG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIENvcGllcyBhbGwgZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIG9uZSBqcyBvYmplY3QgdG8gYW5vdGhlclxuICAgKiB0aGlzIGRvZXMgbm90IGFuZCBjYW5ub3QgY29tcGV0ZSB3aXRoIGdlbmVyaWMgdXRpbHMuXG4gICAqIERvZXMgbm90IGNsb25lIG9yIGV4dGVuZCBmYWJyaWMuT2JqZWN0IHN1YmNsYXNzZXMuXG4gICAqIFRoaXMgaXMgbW9zdGx5IGZvciBpbnRlcm5hbCB1c2UgYW5kIGhhcyBleHRyYSBoYW5kbGluZyBmb3IgZmFicmljSlMgb2JqZWN0c1xuICAgKiBpdCBza2lwcyB0aGUgY2FudmFzIGFuZCBncm91cCBwcm9wZXJ0aWVzIGluIGRlZXAgY2xvbmluZy5cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLm9iamVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gZGVzdGluYXRpb24gV2hlcmUgdG8gY29weSB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFdoZXJlIHRvIGNvcHkgZnJvbVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtkZWVwXSBXaGV0aGVyIHRvIGV4dGVuZCBuZXN0ZWQgb2JqZWN0c1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGV4dGVuZChkZXN0aW5hdGlvbiwgc291cmNlLCBkZWVwKSB7XG4gICAgLy8gSlNjcmlwdCBEb250RW51bSBidWcgaXMgbm90IHRha2VuIGNhcmUgb2ZcbiAgICAvLyB0aGUgZGVlcCBjbG9uZSBpcyBmb3IgaW50ZXJuYWwgdXNlLCBpcyBub3QgbWVhbnQgdG8gYXZvaWRcbiAgICAvLyBqYXZhc2NyaXB0IHRyYXBzIG9yIGNsb25pbmcgaHRtbCBlbGVtZW50IG9yIHNlbGYgcmVmZXJlbmNlZCBvYmplY3RzLlxuICAgIGlmIChkZWVwKSB7XG4gICAgICBpZiAoIWZhYnJpYy5pc0xpa2VseU5vZGUgJiYgc291cmNlIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAvLyBhdm9pZCBjbG9uaW5nIGRlZXAgaW1hZ2VzLCBjYW52YXNlcyxcbiAgICAgICAgZGVzdGluYXRpb24gPSBzb3VyY2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBkZXN0aW5hdGlvbiA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc291cmNlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgZGVzdGluYXRpb25baV0gPSBleHRlbmQoeyB9LCBzb3VyY2VbaV0sIGRlZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzb3VyY2UgJiYgdHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKHByb3BlcnR5ID09PSAnY2FudmFzJyB8fCBwcm9wZXJ0eSA9PT0gJ2dyb3VwJykge1xuICAgICAgICAgICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gY2xvbmUgdGhpcyBwcm9wcyBhdCBhbGwuXG4gICAgICAgICAgICAvLyB3ZSB3YW50IHRvIGtlZXAgdGhlIGtleXMgaW4gdGhlIGNvcHlcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IGV4dGVuZCh7IH0sIHNvdXJjZVtwcm9wZXJ0eV0sIGRlZXApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIHRoaXMgc291bmRzIG9kZCBmb3IgYW4gZXh0ZW5kIGJ1dCBpcyBvayBmb3IgcmVjdXJzaXZlIHVzZVxuICAgICAgICBkZXN0aW5hdGlvbiA9IHNvdXJjZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgICAgZGVzdGluYXRpb25bcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gZW1wdHkgb2JqZWN0IGFuZCBjb3BpZXMgYWxsIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBhbm90aGVyIG9iamVjdCB0byBpdFxuICAgKiBUaGlzIG1ldGhvZCBpcyBtb3N0bHkgZm9yIGludGVybmFsIHVzZSwgYW5kIG5vdCBpbnRlbmRlZCBmb3IgZHVwbGljYXRpbmcgc2hhcGVzIGluIGNhbnZhcy4gXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5vYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2xvbmVcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZGVlcF0gV2hldGhlciB0byBjbG9uZSBuZXN0ZWQgb2JqZWN0c1xuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuXG4gIC8vVE9ETzogdGhpcyBmdW5jdGlvbiByZXR1cm4gYW4gZW1wdHkgb2JqZWN0IGlmIHlvdSB0cnkgdG8gY2xvbmUgbnVsbFxuICBmdW5jdGlvbiBjbG9uZShvYmplY3QsIGRlZXApIHtcbiAgICByZXR1cm4gZXh0ZW5kKHsgfSwgb2JqZWN0LCBkZWVwKTtcbiAgfVxuXG4gIC8qKiBAbmFtZXNwYWNlIGZhYnJpYy51dGlsLm9iamVjdCAqL1xuICBmYWJyaWMudXRpbC5vYmplY3QgPSB7XG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgY2xvbmU6IGNsb25lXG4gIH07XG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLnV0aWwsIGZhYnJpYy5PYnNlcnZhYmxlKTtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIC8qKlxuICAgKiBDYW1lbGl6ZXMgYSBzdHJpbmdcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLnN0cmluZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nIFN0cmluZyB0byBjYW1lbGl6ZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IENhbWVsaXplZCB2ZXJzaW9uIG9mIGEgc3RyaW5nXG4gICAqL1xuICBmdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLy0rKC4pPy9nLCBmdW5jdGlvbihtYXRjaCwgY2hhcmFjdGVyKSB7XG4gICAgICByZXR1cm4gY2hhcmFjdGVyID8gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCkgOiAnJztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYXBpdGFsaXplcyBhIHN0cmluZ1xuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuc3RyaW5nXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGNhcGl0YWxpemVcbiAgICogQHBhcmFtIHtCb29sZWFufSBbZmlyc3RMZXR0ZXJPbmx5XSBJZiB0cnVlIG9ubHkgZmlyc3QgbGV0dGVyIGlzIGNhcGl0YWxpemVkXG4gICAqIGFuZCBvdGhlciBsZXR0ZXJzIHN0YXkgdW50b3VjaGVkLCBpZiBmYWxzZSBmaXJzdCBsZXR0ZXIgaXMgY2FwaXRhbGl6ZWRcbiAgICogYW5kIG90aGVyIGxldHRlcnMgYXJlIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gQ2FwaXRhbGl6ZWQgdmVyc2lvbiBvZiBhIHN0cmluZ1xuICAgKi9cbiAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcsIGZpcnN0TGV0dGVyT25seSkge1xuICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgK1xuICAgICAgKGZpcnN0TGV0dGVyT25seSA/IHN0cmluZy5zbGljZSgxKSA6IHN0cmluZy5zbGljZSgxKS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFc2NhcGVzIFhNTCBpbiBhIHN0cmluZ1xuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuc3RyaW5nXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgU3RyaW5nIHRvIGVzY2FwZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IEVzY2FwZWQgdmVyc2lvbiBvZiBhIHN0cmluZ1xuICAgKi9cbiAgZnVuY3Rpb24gZXNjYXBlWG1sKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgICAgLnJlcGxhY2UoLycvZywgJyZhcG9zOycpXG4gICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpdmlkZSBhIHN0cmluZyBpbiB0aGUgdXNlciBwZXJjZWl2ZWQgc2luZ2xlIHVuaXRzXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5zdHJpbmdcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHRzdHJpbmcgU3RyaW5nIHRvIGVzY2FwZVxuICAgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgY29udGFpbmluZyB0aGUgZ3JhcGhlbWVzXG4gICAqL1xuICBmdW5jdGlvbiBncmFwaGVtZVNwbGl0KHRleHRzdHJpbmcpIHtcbiAgICB2YXIgaSA9IDAsIGNociwgZ3JhcGhlbWVzID0gW107XG4gICAgZm9yIChpID0gMCwgY2hyOyBpIDwgdGV4dHN0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKChjaHIgPSBnZXRXaG9sZUNoYXIodGV4dHN0cmluZywgaSkpID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGdyYXBoZW1lcy5wdXNoKGNocik7XG4gICAgfVxuICAgIHJldHVybiBncmFwaGVtZXM7XG4gIH1cblxuICAvLyB0YWtlbiBmcm9tIG1kbiBpbiB0aGUgY2hhckF0IGRvYyBwYWdlLlxuICBmdW5jdGlvbiBnZXRXaG9sZUNoYXIoc3RyLCBpKSB7XG4gICAgdmFyIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTtcblxuICAgIGlmIChpc05hTihjb2RlKSkge1xuICAgICAgcmV0dXJuICcnOyAvLyBQb3NpdGlvbiBub3QgZm91bmRcbiAgICB9XG4gICAgaWYgKGNvZGUgPCAweEQ4MDAgfHwgY29kZSA+IDB4REZGRikge1xuICAgICAgcmV0dXJuIHN0ci5jaGFyQXQoaSk7XG4gICAgfVxuXG4gICAgLy8gSGlnaCBzdXJyb2dhdGUgKGNvdWxkIGNoYW5nZSBsYXN0IGhleCB0byAweERCN0YgdG8gdHJlYXQgaGlnaCBwcml2YXRlXG4gICAgLy8gc3Vycm9nYXRlcyBhcyBzaW5nbGUgY2hhcmFjdGVycylcbiAgICBpZiAoMHhEODAwIDw9IGNvZGUgJiYgY29kZSA8PSAweERCRkYpIHtcbiAgICAgIGlmIChzdHIubGVuZ3RoIDw9IChpICsgMSkpIHtcbiAgICAgICAgdGhyb3cgJ0hpZ2ggc3Vycm9nYXRlIHdpdGhvdXQgZm9sbG93aW5nIGxvdyBzdXJyb2dhdGUnO1xuICAgICAgfVxuICAgICAgdmFyIG5leHQgPSBzdHIuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICBpZiAoMHhEQzAwID4gbmV4dCB8fCBuZXh0ID4gMHhERkZGKSB7XG4gICAgICAgIHRocm93ICdIaWdoIHN1cnJvZ2F0ZSB3aXRob3V0IGZvbGxvd2luZyBsb3cgc3Vycm9nYXRlJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHIuY2hhckF0KGkpICsgc3RyLmNoYXJBdChpICsgMSk7XG4gICAgfVxuICAgIC8vIExvdyBzdXJyb2dhdGUgKDB4REMwMCA8PSBjb2RlICYmIGNvZGUgPD0gMHhERkZGKVxuICAgIGlmIChpID09PSAwKSB7XG4gICAgICB0aHJvdyAnTG93IHN1cnJvZ2F0ZSB3aXRob3V0IHByZWNlZGluZyBoaWdoIHN1cnJvZ2F0ZSc7XG4gICAgfVxuICAgIHZhciBwcmV2ID0gc3RyLmNoYXJDb2RlQXQoaSAtIDEpO1xuXG4gICAgLy8gKGNvdWxkIGNoYW5nZSBsYXN0IGhleCB0byAweERCN0YgdG8gdHJlYXQgaGlnaCBwcml2YXRlXG4gICAgLy8gc3Vycm9nYXRlcyBhcyBzaW5nbGUgY2hhcmFjdGVycylcbiAgICBpZiAoMHhEODAwID4gcHJldiB8fCBwcmV2ID4gMHhEQkZGKSB7XG4gICAgICB0aHJvdyAnTG93IHN1cnJvZ2F0ZSB3aXRob3V0IHByZWNlZGluZyBoaWdoIHN1cnJvZ2F0ZSc7XG4gICAgfVxuICAgIC8vIFdlIGNhbiBwYXNzIG92ZXIgbG93IHN1cnJvZ2F0ZXMgbm93IGFzIHRoZSBzZWNvbmQgY29tcG9uZW50XG4gICAgLy8gaW4gYSBwYWlyIHdoaWNoIHdlIGhhdmUgYWxyZWFkeSBwcm9jZXNzZWRcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBTdHJpbmcgdXRpbGl0aWVzXG4gICAqIEBuYW1lc3BhY2UgZmFicmljLnV0aWwuc3RyaW5nXG4gICAqL1xuICBmYWJyaWMudXRpbC5zdHJpbmcgPSB7XG4gICAgY2FtZWxpemU6IGNhbWVsaXplLFxuICAgIGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG4gICAgZXNjYXBlWG1sOiBlc2NhcGVYbWwsXG4gICAgZ3JhcGhlbWVTcGxpdDogZ3JhcGhlbWVTcGxpdFxuICB9O1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLCBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24oKSB7IH0sXG5cbiAgICAgIElTX0RPTlRFTlVNX0JVR0dZID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBwIGluIHsgdG9TdHJpbmc6IDEgfSkge1xuICAgICAgICAgIGlmIChwID09PSAndG9TdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSkoKSxcblxuICAgICAgLyoqIEBpZ25vcmUgKi9cbiAgICAgIGFkZE1ldGhvZHMgPSBmdW5jdGlvbihrbGFzcywgc291cmNlLCBwYXJlbnQpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gc291cmNlKSB7XG5cbiAgICAgICAgICBpZiAocHJvcGVydHkgaW4ga2xhc3MucHJvdG90eXBlICYmXG4gICAgICAgICAgICAgIHR5cGVvZiBrbGFzcy5wcm90b3R5cGVbcHJvcGVydHldID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICAgIChzb3VyY2VbcHJvcGVydHldICsgJycpLmluZGV4T2YoJ2NhbGxTdXBlcicpID4gLTEpIHtcblxuICAgICAgICAgICAga2xhc3MucHJvdG90eXBlW3Byb3BlcnR5XSA9IChmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgc3VwZXJjbGFzcyA9IHRoaXMuY29uc3RydWN0b3Iuc3VwZXJjbGFzcztcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLnN1cGVyY2xhc3MgPSBwYXJlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0gc291cmNlW3Byb3BlcnR5XS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3Iuc3VwZXJjbGFzcyA9IHN1cGVyY2xhc3M7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkgIT09ICdpbml0aWFsaXplJykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pKHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBrbGFzcy5wcm90b3R5cGVbcHJvcGVydHldID0gc291cmNlW3Byb3BlcnR5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoSVNfRE9OVEVOVU1fQlVHR1kpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcbiAgICAgICAgICAgICAga2xhc3MucHJvdG90eXBlLnRvU3RyaW5nID0gc291cmNlLnRvU3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpIHtcbiAgICAgICAgICAgICAga2xhc3MucHJvdG90eXBlLnZhbHVlT2YgPSBzb3VyY2UudmFsdWVPZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgZnVuY3Rpb24gU3ViY2xhc3MoKSB7IH1cblxuICBmdW5jdGlvbiBjYWxsU3VwZXIobWV0aG9kTmFtZSkge1xuICAgIHZhciBwYXJlbnRNZXRob2QgPSBudWxsLFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBjbGltYiBwcm90b3R5cGUgY2hhaW4gdG8gZmluZCBtZXRob2Qgbm90IGVxdWFsIHRvIGNhbGxlZSdzIG1ldGhvZFxuICAgIHdoaWxlIChfdGhpcy5jb25zdHJ1Y3Rvci5zdXBlcmNsYXNzKSB7XG4gICAgICB2YXIgc3VwZXJDbGFzc01ldGhvZCA9IF90aGlzLmNvbnN0cnVjdG9yLnN1cGVyY2xhc3MucHJvdG90eXBlW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKF90aGlzW21ldGhvZE5hbWVdICE9PSBzdXBlckNsYXNzTWV0aG9kKSB7XG4gICAgICAgIHBhcmVudE1ldGhvZCA9IHN1cGVyQ2xhc3NNZXRob2Q7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBfdGhpcyA9IF90aGlzLmNvbnN0cnVjdG9yLnN1cGVyY2xhc3MucHJvdG90eXBlO1xuICAgIH1cblxuICAgIGlmICghcGFyZW50TWV0aG9kKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coJ3RyaWVkIHRvIGNhbGxTdXBlciAnICsgbWV0aG9kTmFtZSArICcsIG1ldGhvZCBub3QgZm91bmQgaW4gcHJvdG90eXBlIGNoYWluJywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChhcmd1bWVudHMubGVuZ3RoID4gMSlcbiAgICAgID8gcGFyZW50TWV0aG9kLmFwcGx5KHRoaXMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSlcbiAgICAgIDogcGFyZW50TWV0aG9kLmNhbGwodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZvciBjcmVhdGlvbiBvZiBcImNsYXNzZXNcIi5cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwYXJlbnRdIG9wdGlvbmFsIFwiQ2xhc3NcIiB0byBpbmhlcml0IGZyb21cbiAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHNoYXJlZCBieSBhbGwgaW5zdGFuY2VzIG9mIHRoaXMgY2xhc3NcbiAgICogICAgICAgICAgICAgICAgICAoYmUgY2FyZWZ1bCBtb2RpZnlpbmcgb2JqZWN0cyBkZWZpbmVkIGhlcmUgYXMgdGhpcyB3b3VsZCBhZmZlY3QgYWxsIGluc3RhbmNlcylcbiAgICovXG4gIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKCkge1xuICAgIHZhciBwYXJlbnQgPSBudWxsLFxuICAgICAgICBwcm9wZXJ0aWVzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0aWVzWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwYXJlbnQgPSBwcm9wZXJ0aWVzLnNoaWZ0KCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGtsYXNzKCkge1xuICAgICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAga2xhc3Muc3VwZXJjbGFzcyA9IHBhcmVudDtcbiAgICBrbGFzcy5zdWJjbGFzc2VzID0gW107XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBTdWJjbGFzcy5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlO1xuICAgICAga2xhc3MucHJvdG90eXBlID0gbmV3IFN1YmNsYXNzKCk7XG4gICAgICBwYXJlbnQuc3ViY2xhc3Nlcy5wdXNoKGtsYXNzKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHByb3BlcnRpZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGFkZE1ldGhvZHMoa2xhc3MsIHByb3BlcnRpZXNbaV0sIHBhcmVudCk7XG4gICAgfVxuICAgIGlmICgha2xhc3MucHJvdG90eXBlLmluaXRpYWxpemUpIHtcbiAgICAgIGtsYXNzLnByb3RvdHlwZS5pbml0aWFsaXplID0gZW1wdHlGdW5jdGlvbjtcbiAgICB9XG4gICAga2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0ga2xhc3M7XG4gICAga2xhc3MucHJvdG90eXBlLmNhbGxTdXBlciA9IGNhbGxTdXBlcjtcbiAgICByZXR1cm4ga2xhc3M7XG4gIH1cblxuICBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyA9IGNyZWF0ZUNsYXNzO1xufSkoKTtcblxuXG4oZnVuY3Rpb24gKCkge1xuICAvLyBzaW5jZSBpZTExIGNhbiB1c2UgYWRkRXZlbnRMaXN0ZW5lciBidXQgdGhleSBkbyBub3Qgc3VwcG9ydCBvcHRpb25zLCBpIG5lZWQgdG8gY2hlY2tcbiAgdmFyIGNvdWxkVXNlQXR0YWNoRXZlbnQgPSAhIWZhYnJpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5hdHRhY2hFdmVudCxcbiAgICAgIHRvdWNoRXZlbnRzID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGVuZCddO1xuICAvKipcbiAgICogQWRkcyBhbiBldmVudCBsaXN0ZW5lciB0byBhbiBlbGVtZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICovXG4gIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgZWxlbWVudCAmJiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyLCBjb3VsZFVzZUF0dGFjaEV2ZW50ID8gZmFsc2UgOiBvcHRpb25zKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBmcm9tIGFuIGVsZW1lbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudE5hbWVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgKi9cbiAgZmFicmljLnV0aWwucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbihlbGVtZW50LCBldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBlbGVtZW50ICYmIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGNvdWxkVXNlQXR0YWNoRXZlbnQgPyBmYWxzZSA6IG9wdGlvbnMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFRvdWNoSW5mbyhldmVudCkge1xuICAgIHZhciB0b3VjaFByb3AgPSBldmVudC5jaGFuZ2VkVG91Y2hlcztcbiAgICBpZiAodG91Y2hQcm9wICYmIHRvdWNoUHJvcFswXSkge1xuICAgICAgcmV0dXJuIHRvdWNoUHJvcFswXTtcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG5cbiAgZmFicmljLnV0aWwuZ2V0UG9pbnRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGVsZW1lbnQgPSBldmVudC50YXJnZXQsXG4gICAgICAgIHNjcm9sbCA9IGZhYnJpYy51dGlsLmdldFNjcm9sbExlZnRUb3AoZWxlbWVudCksXG4gICAgICAgIF9ldnQgPSBnZXRUb3VjaEluZm8oZXZlbnQpO1xuICAgIHJldHVybiB7XG4gICAgICB4OiBfZXZ0LmNsaWVudFggKyBzY3JvbGwubGVmdCxcbiAgICAgIHk6IF9ldnQuY2xpZW50WSArIHNjcm9sbC50b3BcbiAgICB9O1xuICB9O1xuXG4gIGZhYnJpYy51dGlsLmlzVG91Y2hFdmVudCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRvdWNoRXZlbnRzLmluZGV4T2YoZXZlbnQudHlwZSkgPiAtMSB8fCBldmVudC5wb2ludGVyVHlwZSA9PT0gJ3RvdWNoJztcbiAgfTtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uICgpIHtcblxuICAvKipcbiAgICogQ3Jvc3MtYnJvd3NlciB3cmFwcGVyIGZvciBzZXR0aW5nIGVsZW1lbnQncyBzdHlsZVxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVzXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBFbGVtZW50IHRoYXQgd2FzIHBhc3NlZCBhcyBhIGZpcnN0IGFyZ3VtZW50XG4gICAqL1xuICBmdW5jdGlvbiBzZXRTdHlsZShlbGVtZW50LCBzdHlsZXMpIHtcbiAgICB2YXIgZWxlbWVudFN0eWxlID0gZWxlbWVudC5zdHlsZTtcbiAgICBpZiAoIWVsZW1lbnRTdHlsZSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc3R5bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ICs9ICc7JyArIHN0eWxlcztcbiAgICAgIHJldHVybiBzdHlsZXMuaW5kZXhPZignb3BhY2l0eScpID4gLTFcbiAgICAgICAgPyBzZXRPcGFjaXR5KGVsZW1lbnQsIHN0eWxlcy5tYXRjaCgvb3BhY2l0eTpcXHMqKFxcZD9cXC4/XFxkKikvKVsxXSlcbiAgICAgICAgOiBlbGVtZW50O1xuICAgIH1cbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmIChwcm9wZXJ0eSA9PT0gJ29wYWNpdHknKSB7XG4gICAgICAgIHNldE9wYWNpdHkoZWxlbWVudCwgc3R5bGVzW3Byb3BlcnR5XSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRQcm9wZXJ0eSA9IChwcm9wZXJ0eSA9PT0gJ2Zsb2F0JyB8fCBwcm9wZXJ0eSA9PT0gJ2Nzc0Zsb2F0JylcbiAgICAgICAgICA/ICh0eXBlb2YgZWxlbWVudFN0eWxlLnN0eWxlRmxvYXQgPT09ICd1bmRlZmluZWQnID8gJ2Nzc0Zsb2F0JyA6ICdzdHlsZUZsb2F0JylcbiAgICAgICAgICA6IHByb3BlcnR5O1xuICAgICAgICBlbGVtZW50U3R5bGVbbm9ybWFsaXplZFByb3BlcnR5XSA9IHN0eWxlc1twcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgdmFyIHBhcnNlRWwgPSBmYWJyaWMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JyksXG4gICAgICBzdXBwb3J0c09wYWNpdHkgPSB0eXBlb2YgcGFyc2VFbC5zdHlsZS5vcGFjaXR5ID09PSAnc3RyaW5nJyxcbiAgICAgIHN1cHBvcnRzRmlsdGVycyA9IHR5cGVvZiBwYXJzZUVsLnN0eWxlLmZpbHRlciA9PT0gJ3N0cmluZycsXG4gICAgICByZU9wYWNpdHkgPSAvYWxwaGFcXHMqXFwoXFxzKm9wYWNpdHlcXHMqPVxccyooW15cXCldKylcXCkvLFxuXG4gICAgICAvKiogQGlnbm9yZSAqL1xuICAgICAgc2V0T3BhY2l0eSA9IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50OyB9O1xuXG4gIGlmIChzdXBwb3J0c09wYWNpdHkpIHtcbiAgICAvKiogQGlnbm9yZSAqL1xuICAgIHNldE9wYWNpdHkgPSBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZSkge1xuICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gdmFsdWU7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xuICB9XG4gIGVsc2UgaWYgKHN1cHBvcnRzRmlsdGVycykge1xuICAgIC8qKiBAaWdub3JlICovXG4gICAgc2V0T3BhY2l0eSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICB2YXIgZXMgPSBlbGVtZW50LnN0eWxlO1xuICAgICAgaWYgKGVsZW1lbnQuY3VycmVudFN0eWxlICYmICFlbGVtZW50LmN1cnJlbnRTdHlsZS5oYXNMYXlvdXQpIHtcbiAgICAgICAgZXMuem9vbSA9IDE7XG4gICAgICB9XG4gICAgICBpZiAocmVPcGFjaXR5LnRlc3QoZXMuZmlsdGVyKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID49IDAuOTk5OSA/ICcnIDogKCdhbHBoYShvcGFjaXR5PScgKyAodmFsdWUgKiAxMDApICsgJyknKTtcbiAgICAgICAgZXMuZmlsdGVyID0gZXMuZmlsdGVyLnJlcGxhY2UocmVPcGFjaXR5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZXMuZmlsdGVyICs9ICcgYWxwaGEob3BhY2l0eT0nICsgKHZhbHVlICogMTAwKSArICcpJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH07XG4gIH1cblxuICBmYWJyaWMudXRpbC5zZXRTdHlsZSA9IHNldFN0eWxlO1xuXG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICB2YXIgX3NsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuXG4gIC8qKlxuICAgKiBUYWtlcyBpZCBhbmQgcmV0dXJucyBhbiBlbGVtZW50IHdpdGggdGhhdCBpZCAoaWYgb25lIGV4aXN0cyBpbiBhIGRvY3VtZW50KVxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGlkXG4gICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fG51bGx9XG4gICAqL1xuICBmdW5jdGlvbiBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpZCA9PT0gJ3N0cmluZycgPyBmYWJyaWMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIDogaWQ7XG4gIH1cblxuICB2YXIgc2xpY2VDYW5Db252ZXJ0Tm9kZWxpc3RzLFxuICAgICAgLyoqXG4gICAgICAgKiBDb252ZXJ0cyBhbiBhcnJheS1saWtlIG9iamVjdCAoZS5nLiBhcmd1bWVudHMgb3IgTm9kZUxpc3QpIHRvIGFuIGFycmF5XG4gICAgICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhcnJheUxpa2VcbiAgICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAgICovXG4gICAgICB0b0FycmF5ID0gZnVuY3Rpb24oYXJyYXlMaWtlKSB7XG4gICAgICAgIHJldHVybiBfc2xpY2UuY2FsbChhcnJheUxpa2UsIDApO1xuICAgICAgfTtcblxuICB0cnkge1xuICAgIHNsaWNlQ2FuQ29udmVydE5vZGVsaXN0cyA9IHRvQXJyYXkoZmFicmljLmRvY3VtZW50LmNoaWxkTm9kZXMpIGluc3RhbmNlb2YgQXJyYXk7XG4gIH1cbiAgY2F0Y2ggKGVycikgeyB9XG5cbiAgaWYgKCFzbGljZUNhbkNvbnZlcnROb2RlbGlzdHMpIHtcbiAgICB0b0FycmF5ID0gZnVuY3Rpb24oYXJyYXlMaWtlKSB7XG4gICAgICB2YXIgYXJyID0gbmV3IEFycmF5KGFycmF5TGlrZS5sZW5ndGgpLCBpID0gYXJyYXlMaWtlLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgYXJyW2ldID0gYXJyYXlMaWtlW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgc3BlY2lmaWVkIGVsZW1lbnQgd2l0aCBzcGVjaWZpZWQgYXR0cmlidXRlc1xuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRhZ05hbWUgVHlwZSBvZiBhbiBlbGVtZW50IHRvIGNyZWF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdIEF0dHJpYnV0ZXMgdG8gc2V0IG9uIGFuIGVsZW1lbnRcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IE5ld2x5IGNyZWF0ZWQgZWxlbWVudFxuICAgKi9cbiAgZnVuY3Rpb24gbWFrZUVsZW1lbnQodGFnTmFtZSwgYXR0cmlidXRlcykge1xuICAgIHZhciBlbCA9IGZhYnJpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICAgIGZvciAodmFyIHByb3AgaW4gYXR0cmlidXRlcykge1xuICAgICAgaWYgKHByb3AgPT09ICdjbGFzcycpIHtcbiAgICAgICAgZWwuY2xhc3NOYW1lID0gYXR0cmlidXRlc1twcm9wXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHByb3AgPT09ICdmb3InKSB7XG4gICAgICAgIGVsLmh0bWxGb3IgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShwcm9wLCBhdHRyaWJ1dGVzW3Byb3BdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgY2xhc3MgdG8gYW4gZWxlbWVudFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGFkZCBjbGFzcyB0b1xuICAgKiBAcGFyYW0ge1N0cmluZ30gY2xhc3NOYW1lIENsYXNzIHRvIGFkZCB0byBhbiBlbGVtZW50XG4gICAqL1xuICBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICBpZiAoZWxlbWVudCAmJiAoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLmluZGV4T2YoJyAnICsgY2xhc3NOYW1lICsgJyAnKSA9PT0gLTEpIHtcbiAgICAgIGVsZW1lbnQuY2xhc3NOYW1lICs9IChlbGVtZW50LmNsYXNzTmFtZSA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV3JhcHMgZWxlbWVudCB3aXRoIGFub3RoZXIgZWxlbWVudFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHdyYXBcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudHxTdHJpbmd9IHdyYXBwZXIgRWxlbWVudCB0byB3cmFwIHdpdGhcbiAgICogQHBhcmFtIHtPYmplY3R9IFthdHRyaWJ1dGVzXSBBdHRyaWJ1dGVzIHRvIHNldCBvbiBhIHdyYXBwZXJcbiAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IHdyYXBwZXJcbiAgICovXG4gIGZ1bmN0aW9uIHdyYXBFbGVtZW50KGVsZW1lbnQsIHdyYXBwZXIsIGF0dHJpYnV0ZXMpIHtcbiAgICBpZiAodHlwZW9mIHdyYXBwZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICB3cmFwcGVyID0gbWFrZUVsZW1lbnQod3JhcHBlciwgYXR0cmlidXRlcyk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQod3JhcHBlciwgZWxlbWVudCk7XG4gICAgfVxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBlbGVtZW50IHNjcm9sbCBvZmZzZXRzXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gb3BlcmF0ZSBvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIGxlZnQvdG9wIHZhbHVlc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0U2Nyb2xsTGVmdFRvcChlbGVtZW50KSB7XG5cbiAgICB2YXIgbGVmdCA9IDAsXG4gICAgICAgIHRvcCA9IDAsXG4gICAgICAgIGRvY0VsZW1lbnQgPSBmYWJyaWMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICBib2R5ID0gZmFicmljLmRvY3VtZW50LmJvZHkgfHwge1xuICAgICAgICAgIHNjcm9sbExlZnQ6IDAsIHNjcm9sbFRvcDogMFxuICAgICAgICB9O1xuXG4gICAgLy8gV2hpbGUgbG9vcCBjaGVja3MgKGFuZCB0aGVuIHNldHMgZWxlbWVudCB0bykgLnBhcmVudE5vZGUgT1IgLmhvc3RcbiAgICAvLyAgdG8gYWNjb3VudCBmb3IgU2hhZG93RE9NLiBXZSBzdGlsbCB3YW50IHRvIHRyYXZlcnNlIHVwIG91dCBvZiBTaGFkb3dET00sXG4gICAgLy8gIGJ1dCB0aGUgLnBhcmVudE5vZGUgb2YgYSByb290IFNoYWRvd0RPTSBub2RlIHdpbGwgYWx3YXlzIGJlIG51bGwsIGluc3RlYWRcbiAgICAvLyAgaXQgc2hvdWxkIGJlIGFjY2Vzc2VkIHRocm91Z2ggLmhvc3QuIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNDc2NTUyOC80MzgzOTM4XG4gICAgd2hpbGUgKGVsZW1lbnQgJiYgKGVsZW1lbnQucGFyZW50Tm9kZSB8fCBlbGVtZW50Lmhvc3QpKSB7XG5cbiAgICAgIC8vIFNldCBlbGVtZW50IHRvIGVsZW1lbnQgcGFyZW50LCBvciAnaG9zdCcgaW4gY2FzZSBvZiBTaGFkb3dET01cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgfHwgZWxlbWVudC5ob3N0O1xuXG4gICAgICBpZiAoZWxlbWVudCA9PT0gZmFicmljLmRvY3VtZW50KSB7XG4gICAgICAgIGxlZnQgPSBib2R5LnNjcm9sbExlZnQgfHwgZG9jRWxlbWVudC5zY3JvbGxMZWZ0IHx8IDA7XG4gICAgICAgIHRvcCA9IGJvZHkuc2Nyb2xsVG9wIHx8ICBkb2NFbGVtZW50LnNjcm9sbFRvcCB8fCAwO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxlZnQgKz0gZWxlbWVudC5zY3JvbGxMZWZ0IHx8IDA7XG4gICAgICAgIHRvcCArPSBlbGVtZW50LnNjcm9sbFRvcCB8fCAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gMSAmJiBlbGVtZW50LnN0eWxlLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGxlZnQ6IGxlZnQsIHRvcDogdG9wIH07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBvZmZzZXQgZm9yIGEgZ2l2ZW4gZWxlbWVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBnZXQgb2Zmc2V0IGZvclxuICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIFwibGVmdFwiIGFuZCBcInRvcFwiIHByb3BlcnRpZXNcbiAgICovXG4gIGZ1bmN0aW9uIGdldEVsZW1lbnRPZmZzZXQoZWxlbWVudCkge1xuICAgIHZhciBkb2NFbGVtLFxuICAgICAgICBkb2MgPSBlbGVtZW50ICYmIGVsZW1lbnQub3duZXJEb2N1bWVudCxcbiAgICAgICAgYm94ID0geyBsZWZ0OiAwLCB0b3A6IDAgfSxcbiAgICAgICAgb2Zmc2V0ID0geyBsZWZ0OiAwLCB0b3A6IDAgfSxcbiAgICAgICAgc2Nyb2xsTGVmdFRvcCxcbiAgICAgICAgb2Zmc2V0QXR0cmlidXRlcyA9IHtcbiAgICAgICAgICBib3JkZXJMZWZ0V2lkdGg6ICdsZWZ0JyxcbiAgICAgICAgICBib3JkZXJUb3BXaWR0aDogICd0b3AnLFxuICAgICAgICAgIHBhZGRpbmdMZWZ0OiAgICAgJ2xlZnQnLFxuICAgICAgICAgIHBhZGRpbmdUb3A6ICAgICAgJ3RvcCdcbiAgICAgICAgfTtcblxuICAgIGlmICghZG9jKSB7XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIGZvciAodmFyIGF0dHIgaW4gb2Zmc2V0QXR0cmlidXRlcykge1xuICAgICAgb2Zmc2V0W29mZnNldEF0dHJpYnV0ZXNbYXR0cl1dICs9IHBhcnNlSW50KGdldEVsZW1lbnRTdHlsZShlbGVtZW50LCBhdHRyKSwgMTApIHx8IDA7XG4gICAgfVxuXG4gICAgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgaWYgKCB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgIT09ICd1bmRlZmluZWQnICkge1xuICAgICAgYm94ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICBzY3JvbGxMZWZ0VG9wID0gZ2V0U2Nyb2xsTGVmdFRvcChlbGVtZW50KTtcblxuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnRUb3AubGVmdCAtIChkb2NFbGVtLmNsaWVudExlZnQgfHwgMCkgKyBvZmZzZXQubGVmdCxcbiAgICAgIHRvcDogYm94LnRvcCArIHNjcm9sbExlZnRUb3AudG9wIC0gKGRvY0VsZW0uY2xpZW50VG9wIHx8IDApICArIG9mZnNldC50b3BcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgc3R5bGUgYXR0cmlidXRlIHZhbHVlIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIGdldCBzdHlsZSBhdHRyaWJ1dGUgZm9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyIFN0eWxlIGF0dHJpYnV0ZSB0byBnZXQgZm9yIGVsZW1lbnRcbiAgICogQHJldHVybiB7U3RyaW5nfSBTdHlsZSBhdHRyaWJ1dGUgdmFsdWUgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqL1xuICB2YXIgZ2V0RWxlbWVudFN0eWxlO1xuICBpZiAoZmFicmljLmRvY3VtZW50LmRlZmF1bHRWaWV3ICYmIGZhYnJpYy5kb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgZ2V0RWxlbWVudFN0eWxlID0gZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIHN0eWxlID0gZmFicmljLmRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gICAgICByZXR1cm4gc3R5bGUgPyBzdHlsZVthdHRyXSA6IHVuZGVmaW5lZDtcbiAgICB9O1xuICB9XG4gIGVsc2Uge1xuICAgIGdldEVsZW1lbnRTdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGVsZW1lbnQuc3R5bGVbYXR0cl07XG4gICAgICBpZiAoIXZhbHVlICYmIGVsZW1lbnQuY3VycmVudFN0eWxlKSB7XG4gICAgICAgIHZhbHVlID0gZWxlbWVudC5jdXJyZW50U3R5bGVbYXR0cl07XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlID0gZmFicmljLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICAgICAgc2VsZWN0UHJvcCA9ICd1c2VyU2VsZWN0JyBpbiBzdHlsZVxuICAgICAgICAgID8gJ3VzZXJTZWxlY3QnXG4gICAgICAgICAgOiAnTW96VXNlclNlbGVjdCcgaW4gc3R5bGVcbiAgICAgICAgICAgID8gJ01velVzZXJTZWxlY3QnXG4gICAgICAgICAgICA6ICdXZWJraXRVc2VyU2VsZWN0JyBpbiBzdHlsZVxuICAgICAgICAgICAgICA/ICdXZWJraXRVc2VyU2VsZWN0J1xuICAgICAgICAgICAgICA6ICdLaHRtbFVzZXJTZWxlY3QnIGluIHN0eWxlXG4gICAgICAgICAgICAgICAgPyAnS2h0bWxVc2VyU2VsZWN0J1xuICAgICAgICAgICAgICAgIDogJyc7XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBlbGVtZW50IHVuc2VsZWN0YWJsZVxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBtYWtlIHVuc2VsZWN0YWJsZVxuICAgICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBFbGVtZW50IHRoYXQgd2FzIHBhc3NlZCBpblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1ha2VFbGVtZW50VW5zZWxlY3RhYmxlKGVsZW1lbnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5vbnNlbGVjdHN0YXJ0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBlbGVtZW50Lm9uc2VsZWN0c3RhcnQgPSBmYWJyaWMudXRpbC5mYWxzZUZ1bmN0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdFByb3ApIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZVtzZWxlY3RQcm9wXSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnVuc2VsZWN0YWJsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWxlbWVudC51bnNlbGVjdGFibGUgPSAnb24nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWFrZXMgZWxlbWVudCBzZWxlY3RhYmxlXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIG1ha2Ugc2VsZWN0YWJsZVxuICAgICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBFbGVtZW50IHRoYXQgd2FzIHBhc3NlZCBpblxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1ha2VFbGVtZW50U2VsZWN0YWJsZShlbGVtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQub25zZWxlY3RzdGFydCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZWxlbWVudC5vbnNlbGVjdHN0YXJ0ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxlY3RQcm9wKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGVbc2VsZWN0UHJvcF0gPSAnJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBlbGVtZW50LnVuc2VsZWN0YWJsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWxlbWVudC51bnNlbGVjdGFibGUgPSAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGZhYnJpYy51dGlsLm1ha2VFbGVtZW50VW5zZWxlY3RhYmxlID0gbWFrZUVsZW1lbnRVbnNlbGVjdGFibGU7XG4gICAgZmFicmljLnV0aWwubWFrZUVsZW1lbnRTZWxlY3RhYmxlID0gbWFrZUVsZW1lbnRTZWxlY3RhYmxlO1xuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIGdldE5vZGVDYW52YXMoZWxlbWVudCkge1xuICAgIHZhciBpbXBsID0gZmFicmljLmpzZG9tSW1wbEZvcldyYXBwZXIoZWxlbWVudCk7XG4gICAgcmV0dXJuIGltcGwuX2NhbnZhcyB8fCBpbXBsLl9pbWFnZTtcbiAgfTtcblxuICBmdW5jdGlvbiBjbGVhblVwSnNkb21Ob2RlKGVsZW1lbnQpIHtcbiAgICBpZiAoIWZhYnJpYy5pc0xpa2VseU5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGltcGwgPSBmYWJyaWMuanNkb21JbXBsRm9yV3JhcHBlcihlbGVtZW50KTtcbiAgICBpZiAoaW1wbCkge1xuICAgICAgaW1wbC5faW1hZ2UgPSBudWxsO1xuICAgICAgaW1wbC5fY2FudmFzID0gbnVsbDtcbiAgICAgIC8vIHVuc3VyZSBpZiBuZWNlc3NhcnlcbiAgICAgIGltcGwuX2N1cnJlbnRTcmMgPSBudWxsO1xuICAgICAgaW1wbC5fYXR0cmlidXRlcyA9IG51bGw7XG4gICAgICBpbXBsLl9jbGFzc0xpc3QgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEltYWdlU21vb3RoaW5nKGN0eCwgdmFsdWUpIHtcbiAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCB8fCBjdHgud2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkXG4gICAgICB8fCBjdHgubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIHx8IGN0eC5tc0ltYWdlU21vb3RoaW5nRW5hYmxlZCB8fCBjdHgub0ltYWdlU21vb3RoaW5nRW5hYmxlZDtcbiAgICBjdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogc2V0SW1hZ2VTbW9vdGhpbmcgc2V0cyB0aGUgY29udGV4dCBpbWFnZVNtb290aGluZ0VuYWJsZWQgcHJvcGVydHkuXG4gICAqIFVzZWQgYnkgY2FudmFzIGFuZCBieSBJbWFnZU9iamVjdC5cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBzaW5jZSA0LjAuMFxuICAgKiBAcGFyYW0ge0hUTUxSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCB0byBzZXQgb25cbiAgICogQHBhcmFtIHtCb29sZWFufSB2YWx1ZSB0cnVlIG9yIGZhbHNlXG4gICAqL1xuICBmYWJyaWMudXRpbC5zZXRJbWFnZVNtb290aGluZyA9IHNldEltYWdlU21vb3RoaW5nO1xuICBmYWJyaWMudXRpbC5nZXRCeUlkID0gZ2V0QnlJZDtcbiAgZmFicmljLnV0aWwudG9BcnJheSA9IHRvQXJyYXk7XG4gIGZhYnJpYy51dGlsLmFkZENsYXNzID0gYWRkQ2xhc3M7XG4gIGZhYnJpYy51dGlsLm1ha2VFbGVtZW50ID0gbWFrZUVsZW1lbnQ7XG4gIGZhYnJpYy51dGlsLndyYXBFbGVtZW50ID0gd3JhcEVsZW1lbnQ7XG4gIGZhYnJpYy51dGlsLmdldFNjcm9sbExlZnRUb3AgPSBnZXRTY3JvbGxMZWZ0VG9wO1xuICBmYWJyaWMudXRpbC5nZXRFbGVtZW50T2Zmc2V0ID0gZ2V0RWxlbWVudE9mZnNldDtcbiAgZmFicmljLnV0aWwuZ2V0Tm9kZUNhbnZhcyA9IGdldE5vZGVDYW52YXM7XG4gIGZhYnJpYy51dGlsLmNsZWFuVXBKc2RvbU5vZGUgPSBjbGVhblVwSnNkb21Ob2RlO1xuXG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBhZGRQYXJhbVRvVXJsKHVybCwgcGFyYW0pIHtcbiAgICByZXR1cm4gdXJsICsgKC9cXD8vLnRlc3QodXJsKSA/ICcmJyA6ICc/JykgKyBwYXJhbTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Rm4oKSB7IH1cblxuICAvKipcbiAgICogQ3Jvc3MtYnJvd3NlciBhYnN0cmFjdGlvbiBmb3Igc2VuZGluZyBYTUxIdHRwUmVxdWVzdFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBVUkwgdG8gc2VuZCBYTUxIdHRwUmVxdWVzdCB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5tZXRob2Q9XCJHRVRcIl1cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnBhcmFtZXRlcnNdIHBhcmFtZXRlcnMgdG8gYXBwZW5kIHRvIHVybCBpbiBHRVQgb3IgaW4gYm9keVxuICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuYm9keV0gYm9keSB0byBzZW5kIHdpdGggUE9TVCBvciBQVVQgcmVxdWVzdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLm9uQ29tcGxldGUgQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gcmVxdWVzdCBpcyBjb21wbGV0ZWRcbiAgICogQHJldHVybiB7WE1MSHR0cFJlcXVlc3R9IHJlcXVlc3RcbiAgICovXG4gIGZ1bmN0aW9uIHJlcXVlc3QodXJsLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICB2YXIgbWV0aG9kID0gb3B0aW9ucy5tZXRob2QgPyBvcHRpb25zLm1ldGhvZC50b1VwcGVyQ2FzZSgpIDogJ0dFVCcsXG4gICAgICAgIG9uQ29tcGxldGUgPSBvcHRpb25zLm9uQ29tcGxldGUgfHwgZnVuY3Rpb24oKSB7IH0sXG4gICAgICAgIHhociA9IG5ldyBmYWJyaWMud2luZG93LlhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgIGJvZHkgPSBvcHRpb25zLmJvZHkgfHwgb3B0aW9ucy5wYXJhbWV0ZXJzO1xuXG4gICAgLyoqIEBpZ25vcmUgKi9cbiAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgb25Db21wbGV0ZSh4aHIpO1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHlGbjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgIGJvZHkgPSBudWxsO1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnBhcmFtZXRlcnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHVybCA9IGFkZFBhcmFtVG9VcmwodXJsLCBvcHRpb25zLnBhcmFtZXRlcnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcblxuICAgIGlmIChtZXRob2QgPT09ICdQT1NUJyB8fCBtZXRob2QgPT09ICdQVVQnKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIH1cblxuICAgIHhoci5zZW5kKGJvZHkpO1xuICAgIHJldHVybiB4aHI7XG4gIH1cblxuICBmYWJyaWMudXRpbC5yZXF1ZXN0ID0gcmVxdWVzdDtcbn0pKCk7XG5cblxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBgY29uc29sZS5sb2dgICh3aGVuIGF2YWlsYWJsZSlcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlc10gVmFsdWVzIHRvIGxvZ1xuICovXG5mYWJyaWMubG9nID0gY29uc29sZS5sb2c7XG5cbi8qKlxuICogV3JhcHBlciBhcm91bmQgYGNvbnNvbGUud2FybmAgKHdoZW4gYXZhaWxhYmxlKVxuICogQHBhcmFtIHsqfSBbdmFsdWVzXSBWYWx1ZXMgdG8gbG9nIGFzIGEgd2FybmluZ1xuICovXG5mYWJyaWMud2FybiA9IGNvbnNvbGUud2FybjtcblxuXG4oZnVuY3Rpb24gKCkge1xuXG4gIHZhciBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgY2xvbmUgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmU7XG5cbiAgLyoqXG4gICAqIEB0eXBlZGVmIHtPYmplY3R9IEFuaW1hdGlvbk9wdGlvbnNcbiAgICogQW5pbWF0aW9uIG9mIGEgdmFsdWUgb3IgbGlzdCBvZiB2YWx1ZXMuXG4gICAqIFdoZW4gdXNpbmcgbGlzdHMsIHRoaW5rIG9mIHNvbWV0aGluZyBsaWtlIHRoaXM6XG4gICAqIGZhYnJpYy51dGlsLmFuaW1hdGUoe1xuICAgKiAgIHN0YXJ0VmFsdWU6IFsxLCAyLCAzXSxcbiAgICogICBlbmRWYWx1ZTogWzIsIDQsIDZdLFxuICAgKiAgIG9uQ2hhbmdlOiBmdW5jdGlvbihbYSwgYiwgY10pIHtcbiAgICogICAgIGNhbnZhcy56b29tVG9Qb2ludCh7eDogYiwgeTogY30sIGEpXG4gICAqICAgICBjYW52YXMucmVuZGVyQWxsKClcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBAZXhhbXBsZVxuICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbb25DaGFuZ2VdIENhbGxiYWNrOyBpbnZva2VkIG9uIGV2ZXJ5IHZhbHVlIGNoYW5nZVxuICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbb25Db21wbGV0ZV0gQ2FsbGJhY2s7IGludm9rZWQgd2hlbiB2YWx1ZSBjaGFuZ2UgaXMgY29tcGxldGVkXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIE5vdGU6IHN0YXJ0VmFsdWUsIGVuZFZhbHVlLCBhbmQgYnlWYWx1ZSBtdXN0IG1hdGNoIHRoZSB0eXBlXG4gICAqIHZhciBhbmltYXRpb25PcHRpb25zID0geyBzdGFydFZhbHVlOiAwLCBlbmRWYWx1ZTogMSwgYnlWYWx1ZTogMC4yNSB9XG4gICAqIHZhciBhbmltYXRpb25PcHRpb25zID0geyBzdGFydFZhbHVlOiBbMCwgMV0sIGVuZFZhbHVlOiBbMSwgMl0sIGJ5VmFsdWU6IFswLjI1LCAwLjI1XSB9XG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVtYmVyW119IFtzdGFydFZhbHVlPTBdIFN0YXJ0aW5nIHZhbHVlXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVtYmVyW119IFtlbmRWYWx1ZT0xMDBdIEVuZGluZyB2YWx1ZVxuICAgKiBAcHJvcGVydHkge251bWJlciB8IG51bWJlcltdfSBbYnlWYWx1ZT0xMDBdIFZhbHVlIHRvIG1vZGlmeSB0aGUgcHJvcGVydHkgYnlcbiAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gW2Vhc2luZ10gRWFzaW5nIGZ1bmN0aW9uXG4gICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbZHVyYXRpb249NTAwXSBEdXJhdGlvbiBvZiBjaGFuZ2UgKGluIG1zKVxuICAgKiBAcHJvcGVydHkge0Z1bmN0aW9ufSBbYWJvcnRdIEFkZGl0aW9uYWwgZnVuY3Rpb24gd2l0aCBsb2dpYy4gSWYgcmV0dXJucyB0cnVlLCBhbmltYXRpb24gYWJvcnRzLlxuICAgKlxuICAgKiBAdHlwZWRlZiB7KCkgPT4gdm9pZH0gQ2FuY2VsRnVuY3Rpb25cbiAgICpcbiAgICogQHR5cGVkZWYge09iamVjdH0gQW5pbWF0aW9uQ3VycmVudFN0YXRlXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyIHwgbnVtYmVyW119IGN1cnJlbnRWYWx1ZSB2YWx1ZSBpbiByYW5nZSBbYHN0YXJ0VmFsdWVgLCBgZW5kVmFsdWVgXVxuICAgKiBAcHJvcGVydHkge251bWJlcn0gY29tcGxldGlvblJhdGUgdmFsdWUgaW4gcmFuZ2UgWzAsIDFdXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkdXJhdGlvblJhdGUgdmFsdWUgaW4gcmFuZ2UgWzAsIDFdXG4gICAqXG4gICAqIEB0eXBlZGVmIHsoQW5pbWF0aW9uT3B0aW9ucyAmIEFuaW1hdGlvbkN1cnJlbnRTdGF0ZSAmIHsgY2FuY2VsOiBDYW5jZWxGdW5jdGlvbiB9fSBBbmltYXRpb25Db250ZXh0XG4gICAqL1xuXG4gIC8qKlxuICAgKiBBcnJheSBob2xkaW5nIGFsbCBydW5uaW5nIGFuaW1hdGlvbnNcbiAgICogQG1lbWJlcm9mIGZhYnJpY1xuICAgKiBAdHlwZSB7QW5pbWF0aW9uQ29udGV4dFtdfVxuICAgKi9cbiAgdmFyIFJVTk5JTkdfQU5JTUFUSU9OUyA9IFtdO1xuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKFJVTk5JTkdfQU5JTUFUSU9OUywge1xuXG4gICAgLyoqXG4gICAgICogY2FuY2VsIGFsbCBydW5uaW5nIGFuaW1hdGlvbnMgYXQgdGhlIG5leHQgcmVxdWVzdEFuaW1GcmFtZVxuICAgICAqIEByZXR1cm5zIHtBbmltYXRpb25Db250ZXh0W119XG4gICAgICovXG4gICAgY2FuY2VsQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYW5pbWF0aW9ucyA9IHRoaXMuc3BsaWNlKDApO1xuICAgICAgYW5pbWF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhbmltYXRpb24pIHtcbiAgICAgICAgYW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYW5pbWF0aW9ucztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FuY2VsIGFsbCBydW5uaW5nIGFuaW1hdGlvbnMgYXR0YWNoZWQgdG8gY2FudmFzIGF0IHRoZSBuZXh0IHJlcXVlc3RBbmltRnJhbWVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5DYW52YXN9IGNhbnZhc1xuICAgICAqIEByZXR1cm5zIHtBbmltYXRpb25Db250ZXh0W119XG4gICAgICovXG4gICAgY2FuY2VsQnlDYW52YXM6IGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgIGlmICghY2FudmFzKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBjYW5jZWxsZWQgPSB0aGlzLmZpbHRlcihmdW5jdGlvbiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgYW5pbWF0aW9uLnRhcmdldCA9PT0gJ29iamVjdCcgJiYgYW5pbWF0aW9uLnRhcmdldC5jYW52YXMgPT09IGNhbnZhcztcbiAgICAgIH0pO1xuICAgICAgY2FuY2VsbGVkLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjYW5jZWxsZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbmNlbCBhbGwgcnVubmluZyBhbmltYXRpb25zIGZvciB0YXJnZXQgYXQgdGhlIG5leHQgcmVxdWVzdEFuaW1GcmFtZVxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0XG4gICAgICogQHJldHVybnMge0FuaW1hdGlvbkNvbnRleHRbXX1cbiAgICAgKi9cbiAgICBjYW5jZWxCeVRhcmdldDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgdmFyIGNhbmNlbGxlZCA9IHRoaXMuZmluZEFuaW1hdGlvbnNCeVRhcmdldCh0YXJnZXQpO1xuICAgICAgY2FuY2VsbGVkLmZvckVhY2goZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjYW5jZWxsZWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtDYW5jZWxGdW5jdGlvbn0gY2FuY2VsRnVuYyB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgYW5pbWF0ZVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgZmluZEFuaW1hdGlvbkluZGV4OiBmdW5jdGlvbiAoY2FuY2VsRnVuYykge1xuICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZih0aGlzLmZpbmRBbmltYXRpb24oY2FuY2VsRnVuYykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Q2FuY2VsRnVuY3Rpb259IGNhbmNlbEZ1bmMgdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGFuaW1hdGVcbiAgICAgKiBAcmV0dXJucyB7QW5pbWF0aW9uQ29udGV4dCB8IHVuZGVmaW5lZH0gYW5pbWF0aW9uJ3Mgb3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICBmaW5kQW5pbWF0aW9uOiBmdW5jdGlvbiAoY2FuY2VsRnVuYykge1xuICAgICAgcmV0dXJuIHRoaXMuZmluZChmdW5jdGlvbiAoYW5pbWF0aW9uKSB7XG4gICAgICAgIHJldHVybiBhbmltYXRpb24uY2FuY2VsID09PSBjYW5jZWxGdW5jO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB0YXJnZXQgdGhlIG9iamVjdCB0aGF0IGlzIGFzc2lnbmVkIHRvIHRoZSB0YXJnZXQgcHJvcGVydHkgb2YgdGhlIGFuaW1hdGlvbiBjb250ZXh0XG4gICAgICogQHJldHVybnMge0FuaW1hdGlvbkNvbnRleHRbXX0gYXJyYXkgb2YgYW5pbWF0aW9uIG9wdGlvbnMgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0YXJnZXRcbiAgICAgKi9cbiAgICBmaW5kQW5pbWF0aW9uc0J5VGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uLnRhcmdldCA9PT0gdGFyZ2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBub29wKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRFYXNpbmcodCwgYiwgYywgZCkge1xuICAgIHJldHVybiAtYyAqIE1hdGguY29zKHQgLyBkICogKE1hdGguUEkgLyAyKSkgKyBjICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHZhbHVlIGZyb20gb25lIHRvIGFub3RoZXIgd2l0aGluIGNlcnRhaW4gcGVyaW9kIG9mIHRpbWUsIGludm9raW5nIGNhbGxiYWNrcyBhcyB2YWx1ZSBpcyBiZWluZyBjaGFuZ2VkLlxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWxcbiAgICogQHBhcmFtIHtBbmltYXRpb25PcHRpb25zfSBbb3B0aW9uc10gQW5pbWF0aW9uIG9wdGlvbnNcbiAgICogQGV4YW1wbGVcbiAgICogLy8gTm90ZTogc3RhcnRWYWx1ZSwgZW5kVmFsdWUsIGFuZCBieVZhbHVlIG11c3QgbWF0Y2ggdGhlIHR5cGVcbiAgICogZmFicmljLnV0aWwuYW5pbWF0ZSh7IHN0YXJ0VmFsdWU6IDAsIGVuZFZhbHVlOiAxLCBieVZhbHVlOiAwLjI1IH0pXG4gICAqIGZhYnJpYy51dGlsLmFuaW1hdGUoeyBzdGFydFZhbHVlOiBbMCwgMV0sIGVuZFZhbHVlOiBbMSwgMl0sIGJ5VmFsdWU6IFswLjI1LCAwLjI1XSB9KVxuICAgKiBAcmV0dXJucyB7Q2FuY2VsRnVuY3Rpb259IGNhbmNlbCBmdW5jdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gYW5pbWF0ZShvcHRpb25zKSB7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICB2YXIgY2FuY2VsID0gZmFsc2UsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHJlbW92ZUZyb21SZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBmYWJyaWMucnVubmluZ0FuaW1hdGlvbnMuaW5kZXhPZihjb250ZXh0KTtcbiAgICAgICAgICByZXR1cm4gaW5kZXggPiAtMSAmJiBmYWJyaWMucnVubmluZ0FuaW1hdGlvbnMuc3BsaWNlKGluZGV4LCAxKVswXTtcbiAgICAgICAgfTtcblxuICAgIGNvbnRleHQgPSBleHRlbmQoY2xvbmUob3B0aW9ucyksIHtcbiAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICBjYW5jZWwgPSB0cnVlO1xuICAgICAgICByZXR1cm4gcmVtb3ZlRnJvbVJlZ2lzdHJ5KCk7XG4gICAgICB9LFxuICAgICAgY3VycmVudFZhbHVlOiAnc3RhcnRWYWx1ZScgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhcnRWYWx1ZSA6IDAsXG4gICAgICBjb21wbGV0aW9uUmF0ZTogMCxcbiAgICAgIGR1cmF0aW9uUmF0ZTogMFxuICAgIH0pO1xuICAgIGZhYnJpYy5ydW5uaW5nQW5pbWF0aW9ucy5wdXNoKGNvbnRleHQpO1xuXG4gICAgcmVxdWVzdEFuaW1GcmFtZShmdW5jdGlvbih0aW1lc3RhbXApIHtcbiAgICAgIHZhciBzdGFydCA9IHRpbWVzdGFtcCB8fCArbmV3IERhdGUoKSxcbiAgICAgICAgICBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gfHwgNTAwLFxuICAgICAgICAgIGZpbmlzaCA9IHN0YXJ0ICsgZHVyYXRpb24sIHRpbWUsXG4gICAgICAgICAgb25DaGFuZ2UgPSBvcHRpb25zLm9uQ2hhbmdlIHx8IG5vb3AsXG4gICAgICAgICAgYWJvcnQgPSBvcHRpb25zLmFib3J0IHx8IG5vb3AsXG4gICAgICAgICAgb25Db21wbGV0ZSA9IG9wdGlvbnMub25Db21wbGV0ZSB8fCBub29wLFxuICAgICAgICAgIGVhc2luZyA9IG9wdGlvbnMuZWFzaW5nIHx8IGRlZmF1bHRFYXNpbmcsXG4gICAgICAgICAgaXNNYW55ID0gJ3N0YXJ0VmFsdWUnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXJ0VmFsdWUubGVuZ3RoID4gMCA6IGZhbHNlLFxuICAgICAgICAgIHN0YXJ0VmFsdWUgPSAnc3RhcnRWYWx1ZScgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc3RhcnRWYWx1ZSA6IDAsXG4gICAgICAgICAgZW5kVmFsdWUgPSAnZW5kVmFsdWUnIGluIG9wdGlvbnMgPyBvcHRpb25zLmVuZFZhbHVlIDogMTAwLFxuICAgICAgICAgIGJ5VmFsdWUgPSBvcHRpb25zLmJ5VmFsdWUgfHwgKGlzTWFueSA/IHN0YXJ0VmFsdWUubWFwKGZ1bmN0aW9uKHZhbHVlLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5kVmFsdWVbaV0gLSBzdGFydFZhbHVlW2ldO1xuICAgICAgICAgIH0pIDogZW5kVmFsdWUgLSBzdGFydFZhbHVlKTtcblxuICAgICAgb3B0aW9ucy5vblN0YXJ0ICYmIG9wdGlvbnMub25TdGFydCgpO1xuXG4gICAgICAoZnVuY3Rpb24gdGljayh0aWNrdGltZSkge1xuICAgICAgICB0aW1lID0gdGlja3RpbWUgfHwgK25ldyBEYXRlKCk7XG4gICAgICAgIHZhciBjdXJyZW50VGltZSA9IHRpbWUgPiBmaW5pc2ggPyBkdXJhdGlvbiA6ICh0aW1lIC0gc3RhcnQpLFxuICAgICAgICAgICAgdGltZVBlcmMgPSBjdXJyZW50VGltZSAvIGR1cmF0aW9uLFxuICAgICAgICAgICAgY3VycmVudCA9IGlzTWFueSA/IHN0YXJ0VmFsdWUubWFwKGZ1bmN0aW9uKF92YWx1ZSwgaSkge1xuICAgICAgICAgICAgICByZXR1cm4gZWFzaW5nKGN1cnJlbnRUaW1lLCBzdGFydFZhbHVlW2ldLCBieVZhbHVlW2ldLCBkdXJhdGlvbik7XG4gICAgICAgICAgICB9KSA6IGVhc2luZyhjdXJyZW50VGltZSwgc3RhcnRWYWx1ZSwgYnlWYWx1ZSwgZHVyYXRpb24pLFxuICAgICAgICAgICAgdmFsdWVQZXJjID0gaXNNYW55ID8gTWF0aC5hYnMoKGN1cnJlbnRbMF0gLSBzdGFydFZhbHVlWzBdKSAvIGJ5VmFsdWVbMF0pXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoKGN1cnJlbnQgLSBzdGFydFZhbHVlKSAvIGJ5VmFsdWUpO1xuICAgICAgICAvLyAgdXBkYXRlIGNvbnRleHRcbiAgICAgICAgY29udGV4dC5jdXJyZW50VmFsdWUgPSBpc01hbnkgPyBjdXJyZW50LnNsaWNlKCkgOiBjdXJyZW50O1xuICAgICAgICBjb250ZXh0LmNvbXBsZXRpb25SYXRlID0gdmFsdWVQZXJjO1xuICAgICAgICBjb250ZXh0LmR1cmF0aW9uUmF0ZSA9IHRpbWVQZXJjO1xuICAgICAgICBpZiAoY2FuY2VsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhYm9ydChjdXJyZW50LCB2YWx1ZVBlcmMsIHRpbWVQZXJjKSkge1xuICAgICAgICAgIHJlbW92ZUZyb21SZWdpc3RyeSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZSA+IGZpbmlzaCkge1xuICAgICAgICAgIC8vICB1cGRhdGUgY29udGV4dFxuICAgICAgICAgIGNvbnRleHQuY3VycmVudFZhbHVlID0gaXNNYW55ID8gZW5kVmFsdWUuc2xpY2UoKSA6IGVuZFZhbHVlO1xuICAgICAgICAgIGNvbnRleHQuY29tcGxldGlvblJhdGUgPSAxO1xuICAgICAgICAgIGNvbnRleHQuZHVyYXRpb25SYXRlID0gMTtcbiAgICAgICAgICAvLyAgZXhlY3V0ZSBjYWxsYmFja3NcbiAgICAgICAgICBvbkNoYW5nZShpc01hbnkgPyBlbmRWYWx1ZS5zbGljZSgpIDogZW5kVmFsdWUsIDEsIDEpO1xuICAgICAgICAgIG9uQ29tcGxldGUoZW5kVmFsdWUsIDEsIDEpO1xuICAgICAgICAgIHJlbW92ZUZyb21SZWdpc3RyeSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBvbkNoYW5nZShjdXJyZW50LCB2YWx1ZVBlcmMsIHRpbWVQZXJjKTtcbiAgICAgICAgICByZXF1ZXN0QW5pbUZyYW1lKHRpY2spO1xuICAgICAgICB9XG4gICAgICB9KShzdGFydCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29udGV4dC5jYW5jZWw7XG4gIH1cblxuICB2YXIgX3JlcXVlc3RBbmltRnJhbWUgPSBmYWJyaWMud2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmYWJyaWMud2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmYWJyaWMud2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSAgICB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmYWJyaWMud2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmYWJyaWMud2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWJyaWMud2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgdmFyIF9jYW5jZWxBbmltRnJhbWUgPSBmYWJyaWMud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IGZhYnJpYy53aW5kb3cuY2xlYXJUaW1lb3V0O1xuXG4gIC8qKlxuICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYmFzZWQgb24gaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cbiAgICogSW4gb3JkZXIgdG8gZ2V0IGEgcHJlY2lzZSBzdGFydCB0aW1lLCBgcmVxdWVzdEFuaW1GcmFtZWAgc2hvdWxkIGJlIGNhbGxlZCBhcyBhbiBlbnRyeSBpbnRvIHRoZSBtZXRob2RcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZVxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgb3B0aW9uYWwgRWxlbWVudCB0byBhc3NvY2lhdGUgd2l0aCBhbmltYXRpb25cbiAgICovXG4gIGZ1bmN0aW9uIHJlcXVlc3RBbmltRnJhbWUoKSB7XG4gICAgcmV0dXJuIF9yZXF1ZXN0QW5pbUZyYW1lLmFwcGx5KGZhYnJpYy53aW5kb3csIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWxBbmltRnJhbWUoKSB7XG4gICAgcmV0dXJuIF9jYW5jZWxBbmltRnJhbWUuYXBwbHkoZmFicmljLndpbmRvdywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZhYnJpYy51dGlsLmFuaW1hdGUgPSBhbmltYXRlO1xuICBmYWJyaWMudXRpbC5yZXF1ZXN0QW5pbUZyYW1lID0gcmVxdWVzdEFuaW1GcmFtZTtcbiAgZmFicmljLnV0aWwuY2FuY2VsQW5pbUZyYW1lID0gY2FuY2VsQW5pbUZyYW1lO1xuICBmYWJyaWMucnVubmluZ0FuaW1hdGlvbnMgPSBSVU5OSU5HX0FOSU1BVElPTlM7XG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgLy8gQ2FsY3VsYXRlIGFuIGluLWJldHdlZW4gY29sb3IuIFJldHVybnMgYSBcInJnYmEoKVwiIHN0cmluZy5cbiAgLy8gQ3JlZGl0OiBFZHdpbiBNYXJ0aW4gPGVkd2luQGJpdHN0b3JtLm9yZz5cbiAgLy8gICAgICAgICBodHRwOi8vd3d3LmJpdHN0b3JtLm9yZy9qcXVlcnkvY29sb3ItYW5pbWF0aW9uL2pxdWVyeS5hbmltYXRlLWNvbG9ycy5qc1xuICBmdW5jdGlvbiBjYWxjdWxhdGVDb2xvcihiZWdpbiwgZW5kLCBwb3MpIHtcbiAgICB2YXIgY29sb3IgPSAncmdiYSgnXG4gICAgICAgICsgcGFyc2VJbnQoKGJlZ2luWzBdICsgcG9zICogKGVuZFswXSAtIGJlZ2luWzBdKSksIDEwKSArICcsJ1xuICAgICAgICArIHBhcnNlSW50KChiZWdpblsxXSArIHBvcyAqIChlbmRbMV0gLSBiZWdpblsxXSkpLCAxMCkgKyAnLCdcbiAgICAgICAgKyBwYXJzZUludCgoYmVnaW5bMl0gKyBwb3MgKiAoZW5kWzJdIC0gYmVnaW5bMl0pKSwgMTApO1xuXG4gICAgY29sb3IgKz0gJywnICsgKGJlZ2luICYmIGVuZCA/IHBhcnNlRmxvYXQoYmVnaW5bM10gKyBwb3MgKiAoZW5kWzNdIC0gYmVnaW5bM10pKSA6IDEpO1xuICAgIGNvbG9yICs9ICcpJztcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGUgY29sb3IgZnJvbSBvbmUgdG8gYW5vdGhlciB3aXRoaW4gY2VydGFpbiBwZXJpb2Qgb2YgdGltZSwgaW52b2tpbmcgY2FsbGJhY2tzIGFzIHZhbHVlIGlzIGJlaW5nIGNoYW5nZWQuXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbFxuICAgKiBAcGFyYW0ge1N0cmluZ30gZnJvbUNvbG9yIFRoZSBzdGFydGluZyBjb2xvciBpbiBoZXggb3IgcmdiKGEpIGZvcm1hdC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHRvQ29sb3IgVGhlIHN0YXJ0aW5nIGNvbG9yIGluIGhleCBvciByZ2IoYSkgZm9ybWF0LlxuICAgKiBAcGFyYW0ge051bWJlcn0gW2R1cmF0aW9uXSBEdXJhdGlvbiBvZiBjaGFuZ2UgKGluIG1zKS5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBBbmltYXRpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5vbkNoYW5nZV0gQ2FsbGJhY2s7IGludm9rZWQgb24gZXZlcnkgdmFsdWUgY2hhbmdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLm9uQ29tcGxldGVdIENhbGxiYWNrOyBpbnZva2VkIHdoZW4gdmFsdWUgY2hhbmdlIGlzIGNvbXBsZXRlZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5jb2xvckVhc2luZ10gRWFzaW5nIGZ1bmN0aW9uLiBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiBvbmx5IHRha2UgdHdvIGFyZ3VtZW50cyAoY3VycmVudFRpbWUsIGR1cmF0aW9uKS4gVGh1cyB0aGUgcmVndWxhciBhbmltYXRpb24gZWFzaW5nIGZ1bmN0aW9ucyBjYW5ub3QgYmUgdXNlZC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuYWJvcnRdIEFkZGl0aW9uYWwgZnVuY3Rpb24gd2l0aCBsb2dpYy4gSWYgcmV0dXJucyB0cnVlLCBvbkNvbXBsZXRlIGlzIGNhbGxlZC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBhYm9ydCBmdW5jdGlvblxuICAgKi9cbiAgZnVuY3Rpb24gYW5pbWF0ZUNvbG9yKGZyb21Db2xvciwgdG9Db2xvciwgZHVyYXRpb24sIG9wdGlvbnMpIHtcbiAgICB2YXIgc3RhcnRDb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IoZnJvbUNvbG9yKS5nZXRTb3VyY2UoKSxcbiAgICAgICAgZW5kQ29sb3IgPSBuZXcgZmFicmljLkNvbG9yKHRvQ29sb3IpLmdldFNvdXJjZSgpLFxuICAgICAgICBvcmlnaW5hbE9uQ29tcGxldGUgPSBvcHRpb25zLm9uQ29tcGxldGUsXG4gICAgICAgIG9yaWdpbmFsT25DaGFuZ2UgPSBvcHRpb25zLm9uQ2hhbmdlO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgcmV0dXJuIGZhYnJpYy51dGlsLmFuaW1hdGUoZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChvcHRpb25zLCB7XG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gfHwgNTAwLFxuICAgICAgc3RhcnRWYWx1ZTogc3RhcnRDb2xvcixcbiAgICAgIGVuZFZhbHVlOiBlbmRDb2xvcixcbiAgICAgIGJ5VmFsdWU6IGVuZENvbG9yLFxuICAgICAgZWFzaW5nOiBmdW5jdGlvbiAoY3VycmVudFRpbWUsIHN0YXJ0VmFsdWUsIGJ5VmFsdWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBwb3NWYWx1ZSA9IG9wdGlvbnMuY29sb3JFYXNpbmdcbiAgICAgICAgICA/IG9wdGlvbnMuY29sb3JFYXNpbmcoY3VycmVudFRpbWUsIGR1cmF0aW9uKVxuICAgICAgICAgIDogMSAtIE1hdGguY29zKGN1cnJlbnRUaW1lIC8gZHVyYXRpb24gKiAoTWF0aC5QSSAvIDIpKTtcbiAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZUNvbG9yKHN0YXJ0VmFsdWUsIGJ5VmFsdWUsIHBvc1ZhbHVlKTtcbiAgICAgIH0sXG4gICAgICAvLyBoYXMgdG8gdGFrZSBpbiBhY2NvdW50IGZvciBjb2xvciByZXN0b3Jpbmc7XG4gICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbihjdXJyZW50LCB2YWx1ZVBlcmMsIHRpbWVQZXJjKSB7XG4gICAgICAgIGlmIChvcmlnaW5hbE9uQ29tcGxldGUpIHtcbiAgICAgICAgICByZXR1cm4gb3JpZ2luYWxPbkNvbXBsZXRlKFxuICAgICAgICAgICAgY2FsY3VsYXRlQ29sb3IoZW5kQ29sb3IsIGVuZENvbG9yLCAwKSxcbiAgICAgICAgICAgIHZhbHVlUGVyYyxcbiAgICAgICAgICAgIHRpbWVQZXJjXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbihjdXJyZW50LCB2YWx1ZVBlcmMsIHRpbWVQZXJjKSB7XG4gICAgICAgIGlmIChvcmlnaW5hbE9uQ2hhbmdlKSB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE9uQ2hhbmdlKFxuICAgICAgICAgICAgICBjYWxjdWxhdGVDb2xvcihjdXJyZW50LCBjdXJyZW50LCAwKSxcbiAgICAgICAgICAgICAgdmFsdWVQZXJjLFxuICAgICAgICAgICAgICB0aW1lUGVyY1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3JpZ2luYWxPbkNoYW5nZShjdXJyZW50LCB2YWx1ZVBlcmMsIHRpbWVQZXJjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKTtcbiAgfVxuXG4gIGZhYnJpYy51dGlsLmFuaW1hdGVDb2xvciA9IGFuaW1hdGVDb2xvcjtcblxufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplKGEsIGMsIHAsIHMpIHtcbiAgICBpZiAoYSA8IE1hdGguYWJzKGMpKSB7XG4gICAgICBhID0gYztcbiAgICAgIHMgPSBwIC8gNDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvL2hhbmRsZSB0aGUgMC8wIGNhc2U6XG4gICAgICBpZiAoYyA9PT0gMCAmJiBhID09PSAwKSB7XG4gICAgICAgIHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzID0gcCAvICgyICogTWF0aC5QSSkgKiBNYXRoLmFzaW4oYyAvIGEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBhOiBhLCBjOiBjLCBwOiBwLCBzOiBzIH07XG4gIH1cblxuICBmdW5jdGlvbiBlbGFzdGljKG9wdHMsIHQsIGQpIHtcbiAgICByZXR1cm4gb3B0cy5hICpcbiAgICAgIE1hdGgucG93KDIsIDEwICogKHQgLT0gMSkpICpcbiAgICAgIE1hdGguc2luKCAodCAqIGQgLSBvcHRzLnMpICogKDIgKiBNYXRoLlBJKSAvIG9wdHMucCApO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1YmljIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRDdWJpYyh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqIHQgKyAxKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogQ3ViaWMgZWFzaW5nIGluIGFuZCBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbk91dEN1YmljKHQsIGIsIGMsIGQpIHtcbiAgICB0IC89IGQgLyAyO1xuICAgIGlmICh0IDwgMSkge1xuICAgICAgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIGMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKyAyKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogUXVhcnRpYyBlYXNpbmcgaW5cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJblF1YXJ0KHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCAqIHQgKiB0ICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWFydGljIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRRdWFydCh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIC1jICogKCh0ID0gdCAvIGQgLSAxKSAqIHQgKiB0ICogdCAtIDEpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBRdWFydGljIGVhc2luZyBpbiBhbmQgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5PdXRRdWFydCh0LCBiLCBjLCBkKSB7XG4gICAgdCAvPSBkIC8gMjtcbiAgICBpZiAodCA8IDEpIHtcbiAgICAgIHJldHVybiBjIC8gMiAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gLWMgLyAyICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMikgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1aW50aWMgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5RdWludCh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1aW50aWMgZWFzaW5nIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZU91dFF1aW50KHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gYyAqICgodCA9IHQgLyBkIC0gMSkgKiB0ICogdCAqIHQgKiB0ICsgMSkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIFF1aW50aWMgZWFzaW5nIGluIGFuZCBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbk91dFF1aW50KHQsIGIsIGMsIGQpIHtcbiAgICB0IC89IGQgLyAyO1xuICAgIGlmICh0IDwgMSkge1xuICAgICAgcmV0dXJuIGMgLyAyICogdCAqIHQgKiB0ICogdCAqIHQgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gYyAvIDIgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMikgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpbnVzb2lkYWwgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5TaW5lKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgKiBNYXRoLmNvcyh0IC8gZCAqIChNYXRoLlBJIC8gMikpICsgYyArIGI7XG4gIH1cblxuICAvKipcbiAgICogU2ludXNvaWRhbCBlYXNpbmcgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlT3V0U2luZSh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgKiBNYXRoLnNpbih0IC8gZCAqIChNYXRoLlBJIC8gMikpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW51c29pZGFsIGVhc2luZyBpbiBhbmQgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5PdXRTaW5lKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gLWMgLyAyICogKE1hdGguY29zKE1hdGguUEkgKiB0IC8gZCkgLSAxKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogRXhwb25lbnRpYWwgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5FeHBvKHQsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4gKHQgPT09IDApID8gYiA6IGMgKiBNYXRoLnBvdygyLCAxMCAqICh0IC8gZCAtIDEpKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogRXhwb25lbnRpYWwgZWFzaW5nIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZU91dEV4cG8odCwgYiwgYywgZCkge1xuICAgIHJldHVybiAodCA9PT0gZCkgPyBiICsgYyA6IGMgKiAoLU1hdGgucG93KDIsIC0xMCAqIHQgLyBkKSArIDEpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvbmVudGlhbCBlYXNpbmcgaW4gYW5kIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluT3V0RXhwbyh0LCBiLCBjLCBkKSB7XG4gICAgaWYgKHQgPT09IDApIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICBpZiAodCA9PT0gZCkge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICB0IC89IGQgLyAyO1xuICAgIGlmICh0IDwgMSkge1xuICAgICAgcmV0dXJuIGMgLyAyICogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSArIGI7XG4gICAgfVxuICAgIHJldHVybiBjIC8gMiAqICgtTWF0aC5wb3coMiwgLTEwICogLS10KSArIDIpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaXJjdWxhciBlYXNpbmcgaW5cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbkNpcmModCwgYiwgYywgZCkge1xuICAgIHJldHVybiAtYyAqIChNYXRoLnNxcnQoMSAtICh0IC89IGQpICogdCkgLSAxKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogQ2lyY3VsYXIgZWFzaW5nIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZU91dENpcmModCwgYiwgYywgZCkge1xuICAgIHJldHVybiBjICogTWF0aC5zcXJ0KDEgLSAodCA9IHQgLyBkIC0gMSkgKiB0KSArIGI7XG4gIH1cblxuICAvKipcbiAgICogQ2lyY3VsYXIgZWFzaW5nIGluIGFuZCBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbk91dENpcmModCwgYiwgYywgZCkge1xuICAgIHQgLz0gZCAvIDI7XG4gICAgaWYgKHQgPCAxKSB7XG4gICAgICByZXR1cm4gLWMgLyAyICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSkgKyBiO1xuICAgIH1cbiAgICByZXR1cm4gYyAvIDIgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEVsYXN0aWMgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5FbGFzdGljKHQsIGIsIGMsIGQpIHtcbiAgICB2YXIgcyA9IDEuNzAxNTgsIHAgPSAwLCBhID0gYztcbiAgICBpZiAodCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfVxuICAgIHQgLz0gZDtcbiAgICBpZiAodCA9PT0gMSkge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICBpZiAoIXApIHtcbiAgICAgIHAgPSBkICogMC4zO1xuICAgIH1cbiAgICB2YXIgb3B0cyA9IG5vcm1hbGl6ZShhLCBjLCBwLCBzKTtcbiAgICByZXR1cm4gLWVsYXN0aWMob3B0cywgdCwgZCkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEVsYXN0aWMgZWFzaW5nIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZU91dEVsYXN0aWModCwgYiwgYywgZCkge1xuICAgIHZhciBzID0gMS43MDE1OCwgcCA9IDAsIGEgPSBjO1xuICAgIGlmICh0ID09PSAwKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgdCAvPSBkO1xuICAgIGlmICh0ID09PSAxKSB7XG4gICAgICByZXR1cm4gYiArIGM7XG4gICAgfVxuICAgIGlmICghcCkge1xuICAgICAgcCA9IGQgKiAwLjM7XG4gICAgfVxuICAgIHZhciBvcHRzID0gbm9ybWFsaXplKGEsIGMsIHAsIHMpO1xuICAgIHJldHVybiBvcHRzLmEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0ICogZCAtIG9wdHMucykgKiAoMiAqIE1hdGguUEkpIC8gb3B0cy5wICkgKyBvcHRzLmMgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEVsYXN0aWMgZWFzaW5nIGluIGFuZCBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbk91dEVsYXN0aWModCwgYiwgYywgZCkge1xuICAgIHZhciBzID0gMS43MDE1OCwgcCA9IDAsIGEgPSBjO1xuICAgIGlmICh0ID09PSAwKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgdCAvPSBkIC8gMjtcbiAgICBpZiAodCA9PT0gMikge1xuICAgICAgcmV0dXJuIGIgKyBjO1xuICAgIH1cbiAgICBpZiAoIXApIHtcbiAgICAgIHAgPSBkICogKDAuMyAqIDEuNSk7XG4gICAgfVxuICAgIHZhciBvcHRzID0gbm9ybWFsaXplKGEsIGMsIHAsIHMpO1xuICAgIGlmICh0IDwgMSkge1xuICAgICAgcmV0dXJuIC0wLjUgKiBlbGFzdGljKG9wdHMsIHQsIGQpICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIG9wdHMuYSAqIE1hdGgucG93KDIsIC0xMCAqICh0IC09IDEpKSAqXG4gICAgICBNYXRoLnNpbigodCAqIGQgLSBvcHRzLnMpICogKDIgKiBNYXRoLlBJKSAvIG9wdHMucCApICogMC41ICsgb3B0cy5jICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCYWNrd2FyZHMgZWFzaW5nIGluXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5CYWNrKHQsIGIsIGMsIGQsIHMpIHtcbiAgICBpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzID0gMS43MDE1ODtcbiAgICB9XG4gICAgcmV0dXJuIGMgKiAodCAvPSBkKSAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSArIGI7XG4gIH1cblxuICAvKipcbiAgICogQmFja3dhcmRzIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRCYWNrKHQsIGIsIGMsIGQsIHMpIHtcbiAgICBpZiAocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzID0gMS43MDE1ODtcbiAgICB9XG4gICAgcmV0dXJuIGMgKiAoKHQgPSB0IC8gZCAtIDEpICogdCAqICgocyArIDEpICogdCArIHMpICsgMSkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEJhY2t3YXJkcyBlYXNpbmcgaW4gYW5kIG91dFxuICAgKiBAbWVtYmVyT2YgZmFicmljLnV0aWwuZWFzZVxuICAgKi9cbiAgZnVuY3Rpb24gZWFzZUluT3V0QmFjayh0LCBiLCBjLCBkLCBzKSB7XG4gICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcyA9IDEuNzAxNTg7XG4gICAgfVxuICAgIHQgLz0gZCAvIDI7XG4gICAgaWYgKHQgPCAxKSB7XG4gICAgICByZXR1cm4gYyAvIDIgKiAodCAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0IC0gcykpICsgYjtcbiAgICB9XG4gICAgcmV0dXJuIGMgLyAyICogKCh0IC09IDIpICogdCAqICgoKHMgKj0gKDEuNTI1KSkgKyAxKSAqIHQgKyBzKSArIDIpICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCb3VuY2luZyBlYXNpbmcgaW5cbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VJbkJvdW5jZSh0LCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGMgLSBlYXNlT3V0Qm91bmNlIChkIC0gdCwgMCwgYywgZCkgKyBiO1xuICB9XG5cbiAgLyoqXG4gICAqIEJvdW5jaW5nIGVhc2luZyBvdXRcbiAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZ1bmN0aW9uIGVhc2VPdXRCb3VuY2UodCwgYiwgYywgZCkge1xuICAgIGlmICgodCAvPSBkKSA8ICgxIC8gMi43NSkpIHtcbiAgICAgIHJldHVybiBjICogKDcuNTYyNSAqIHQgKiB0KSArIGI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHQgPCAoMiAvIDIuNzUpKSB7XG4gICAgICByZXR1cm4gYyAqICg3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIDAuNzUpICsgYjtcbiAgICB9XG4gICAgZWxzZSBpZiAodCA8ICgyLjUgLyAyLjc1KSkge1xuICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDIuMjUgLyAyLjc1KSkgKiB0ICsgMC45Mzc1KSArIGI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGMgKiAoNy41NjI1ICogKHQgLT0gKDIuNjI1IC8gMi43NSkpICogdCArIDAuOTg0Mzc1KSArIGI7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEJvdW5jaW5nIGVhc2luZyBpbiBhbmQgb3V0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAqL1xuICBmdW5jdGlvbiBlYXNlSW5PdXRCb3VuY2UodCwgYiwgYywgZCkge1xuICAgIGlmICh0IDwgZCAvIDIpIHtcbiAgICAgIHJldHVybiBlYXNlSW5Cb3VuY2UgKHQgKiAyLCAwLCBjLCBkKSAqIDAuNSArIGI7XG4gICAgfVxuICAgIHJldHVybiBlYXNlT3V0Qm91bmNlKHQgKiAyIC0gZCwgMCwgYywgZCkgKiAwLjUgKyBjICogMC41ICsgYjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFYXNpbmcgZnVuY3Rpb25zXG4gICAqIFNlZSA8YSBocmVmPVwiaHR0cDovL2dpem1hLmNvbS9lYXNpbmcvXCI+RWFzaW5nIEVxdWF0aW9ucyBieSBSb2JlcnQgUGVubmVyPC9hPlxuICAgKiBAbmFtZXNwYWNlIGZhYnJpYy51dGlsLmVhc2VcbiAgICovXG4gIGZhYnJpYy51dGlsLmVhc2UgPSB7XG5cbiAgICAvKipcbiAgICAgKiBRdWFkcmF0aWMgZWFzaW5nIGluXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICAgKi9cbiAgICBlYXNlSW5RdWFkOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICByZXR1cm4gYyAqICh0IC89IGQpICogdCArIGI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFF1YWRyYXRpYyBlYXNpbmcgb3V0XG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICAgKi9cbiAgICBlYXNlT3V0UXVhZDogZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIC1jICogKHQgLz0gZCkgKiAodCAtIDIpICsgYjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUXVhZHJhdGljIGVhc2luZyBpbiBhbmQgb3V0XG4gICAgICogQG1lbWJlck9mIGZhYnJpYy51dGlsLmVhc2VcbiAgICAgKi9cbiAgICBlYXNlSW5PdXRRdWFkOiBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICB0IC89IChkIC8gMik7XG4gICAgICBpZiAodCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIGMgLyAyICogdCAqIHQgKyBiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIC1jIC8gMiAqICgoLS10KSAqICh0IC0gMikgLSAxKSArIGI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEN1YmljIGVhc2luZyBpblxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMudXRpbC5lYXNlXG4gICAgICovXG4gICAgZWFzZUluQ3ViaWM6IGZ1bmN0aW9uKHQsIGIsIGMsIGQpIHtcbiAgICAgIHJldHVybiBjICogKHQgLz0gZCkgKiB0ICogdCArIGI7XG4gICAgfSxcblxuICAgIGVhc2VPdXRDdWJpYzogZWFzZU91dEN1YmljLFxuICAgIGVhc2VJbk91dEN1YmljOiBlYXNlSW5PdXRDdWJpYyxcbiAgICBlYXNlSW5RdWFydDogZWFzZUluUXVhcnQsXG4gICAgZWFzZU91dFF1YXJ0OiBlYXNlT3V0UXVhcnQsXG4gICAgZWFzZUluT3V0UXVhcnQ6IGVhc2VJbk91dFF1YXJ0LFxuICAgIGVhc2VJblF1aW50OiBlYXNlSW5RdWludCxcbiAgICBlYXNlT3V0UXVpbnQ6IGVhc2VPdXRRdWludCxcbiAgICBlYXNlSW5PdXRRdWludDogZWFzZUluT3V0UXVpbnQsXG4gICAgZWFzZUluU2luZTogZWFzZUluU2luZSxcbiAgICBlYXNlT3V0U2luZTogZWFzZU91dFNpbmUsXG4gICAgZWFzZUluT3V0U2luZTogZWFzZUluT3V0U2luZSxcbiAgICBlYXNlSW5FeHBvOiBlYXNlSW5FeHBvLFxuICAgIGVhc2VPdXRFeHBvOiBlYXNlT3V0RXhwbyxcbiAgICBlYXNlSW5PdXRFeHBvOiBlYXNlSW5PdXRFeHBvLFxuICAgIGVhc2VJbkNpcmM6IGVhc2VJbkNpcmMsXG4gICAgZWFzZU91dENpcmM6IGVhc2VPdXRDaXJjLFxuICAgIGVhc2VJbk91dENpcmM6IGVhc2VJbk91dENpcmMsXG4gICAgZWFzZUluRWxhc3RpYzogZWFzZUluRWxhc3RpYyxcbiAgICBlYXNlT3V0RWxhc3RpYzogZWFzZU91dEVsYXN0aWMsXG4gICAgZWFzZUluT3V0RWxhc3RpYzogZWFzZUluT3V0RWxhc3RpYyxcbiAgICBlYXNlSW5CYWNrOiBlYXNlSW5CYWNrLFxuICAgIGVhc2VPdXRCYWNrOiBlYXNlT3V0QmFjayxcbiAgICBlYXNlSW5PdXRCYWNrOiBlYXNlSW5PdXRCYWNrLFxuICAgIGVhc2VJbkJvdW5jZTogZWFzZUluQm91bmNlLFxuICAgIGVhc2VPdXRCb3VuY2U6IGVhc2VPdXRCb3VuY2UsXG4gICAgZWFzZUluT3V0Qm91bmNlOiBlYXNlSW5PdXRCb3VuY2VcbiAgfTtcblxufSkoKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBAbmFtZSBmYWJyaWNcbiAgICogQG5hbWVzcGFjZVxuICAgKi9cblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgY2xvbmUgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUsXG4gICAgICB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZCxcbiAgICAgIHBhcnNlVW5pdCA9IGZhYnJpYy51dGlsLnBhcnNlVW5pdCxcbiAgICAgIG11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXMgPSBmYWJyaWMudXRpbC5tdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzLFxuXG4gICAgICBzdmdWYWxpZFRhZ05hbWVzID0gWydwYXRoJywgJ2NpcmNsZScsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ2VsbGlwc2UnLCAncmVjdCcsICdsaW5lJyxcbiAgICAgICAgJ2ltYWdlJywgJ3RleHQnXSxcbiAgICAgIHN2Z1ZpZXdCb3hFbGVtZW50cyA9IFsnc3ltYm9sJywgJ2ltYWdlJywgJ21hcmtlcicsICdwYXR0ZXJuJywgJ3ZpZXcnLCAnc3ZnJ10sXG4gICAgICBzdmdJbnZhbGlkQW5jZXN0b3JzID0gWydwYXR0ZXJuJywgJ2RlZnMnLCAnc3ltYm9sJywgJ21ldGFkYXRhJywgJ2NsaXBQYXRoJywgJ21hc2snLCAnZGVzYyddLFxuICAgICAgc3ZnVmFsaWRQYXJlbnRzID0gWydzeW1ib2wnLCAnZycsICdhJywgJ3N2ZycsICdjbGlwUGF0aCcsICdkZWZzJ10sXG5cbiAgICAgIGF0dHJpYnV0ZXNNYXAgPSB7XG4gICAgICAgIGN4OiAgICAgICAgICAgICAgICAgICAnbGVmdCcsXG4gICAgICAgIHg6ICAgICAgICAgICAgICAgICAgICAnbGVmdCcsXG4gICAgICAgIHI6ICAgICAgICAgICAgICAgICAgICAncmFkaXVzJyxcbiAgICAgICAgY3k6ICAgICAgICAgICAgICAgICAgICd0b3AnLFxuICAgICAgICB5OiAgICAgICAgICAgICAgICAgICAgJ3RvcCcsXG4gICAgICAgIGRpc3BsYXk6ICAgICAgICAgICAgICAndmlzaWJsZScsXG4gICAgICAgIHZpc2liaWxpdHk6ICAgICAgICAgICAndmlzaWJsZScsXG4gICAgICAgIHRyYW5zZm9ybTogICAgICAgICAgICAndHJhbnNmb3JtTWF0cml4JyxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6ICAgICAgICdmaWxsT3BhY2l0eScsXG4gICAgICAgICdmaWxsLXJ1bGUnOiAgICAgICAgICAnZmlsbFJ1bGUnLFxuICAgICAgICAnZm9udC1mYW1pbHknOiAgICAgICAgJ2ZvbnRGYW1pbHknLFxuICAgICAgICAnZm9udC1zaXplJzogICAgICAgICAgJ2ZvbnRTaXplJyxcbiAgICAgICAgJ2ZvbnQtc3R5bGUnOiAgICAgICAgICdmb250U3R5bGUnLFxuICAgICAgICAnZm9udC13ZWlnaHQnOiAgICAgICAgJ2ZvbnRXZWlnaHQnLFxuICAgICAgICAnbGV0dGVyLXNwYWNpbmcnOiAgICAgJ2NoYXJTcGFjaW5nJyxcbiAgICAgICAgJ3BhaW50LW9yZGVyJzogICAgICAgICdwYWludEZpcnN0JyxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiAgICdzdHJva2VEYXNoQXJyYXknLFxuICAgICAgICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiAgJ3N0cm9rZURhc2hPZmZzZXQnLFxuICAgICAgICAnc3Ryb2tlLWxpbmVjYXAnOiAgICAgJ3N0cm9rZUxpbmVDYXAnLFxuICAgICAgICAnc3Ryb2tlLWxpbmVqb2luJzogICAgJ3N0cm9rZUxpbmVKb2luJyxcbiAgICAgICAgJ3N0cm9rZS1taXRlcmxpbWl0JzogICdzdHJva2VNaXRlckxpbWl0JyxcbiAgICAgICAgJ3N0cm9rZS1vcGFjaXR5JzogICAgICdzdHJva2VPcGFjaXR5JyxcbiAgICAgICAgJ3N0cm9rZS13aWR0aCc6ICAgICAgICdzdHJva2VXaWR0aCcsXG4gICAgICAgICd0ZXh0LWRlY29yYXRpb24nOiAgICAndGV4dERlY29yYXRpb24nLFxuICAgICAgICAndGV4dC1hbmNob3InOiAgICAgICAgJ3RleHRBbmNob3InLFxuICAgICAgICBvcGFjaXR5OiAgICAgICAgICAgICAgJ29wYWNpdHknLFxuICAgICAgICAnY2xpcC1wYXRoJzogICAgICAgICAgJ2NsaXBQYXRoJyxcbiAgICAgICAgJ2NsaXAtcnVsZSc6ICAgICAgICAgICdjbGlwUnVsZScsXG4gICAgICAgICd2ZWN0b3ItZWZmZWN0JzogICAgICAnc3Ryb2tlVW5pZm9ybScsXG4gICAgICAgICdpbWFnZS1yZW5kZXJpbmcnOiAgICAnaW1hZ2VTbW9vdGhpbmcnLFxuICAgICAgfSxcblxuICAgICAgY29sb3JBdHRyaWJ1dGVzID0ge1xuICAgICAgICBzdHJva2U6ICdzdHJva2VPcGFjaXR5JyxcbiAgICAgICAgZmlsbDogICAnZmlsbE9wYWNpdHknXG4gICAgICB9LFxuXG4gICAgICBmU2l6ZSA9ICdmb250LXNpemUnLCBjUGF0aCA9ICdjbGlwLXBhdGgnO1xuXG4gIGZhYnJpYy5zdmdWYWxpZFRhZ05hbWVzUmVnRXggPSBnZXRTdmdSZWdleChzdmdWYWxpZFRhZ05hbWVzKTtcbiAgZmFicmljLnN2Z1ZpZXdCb3hFbGVtZW50c1JlZ0V4ID0gZ2V0U3ZnUmVnZXgoc3ZnVmlld0JveEVsZW1lbnRzKTtcbiAgZmFicmljLnN2Z0ludmFsaWRBbmNlc3RvcnNSZWdFeCA9IGdldFN2Z1JlZ2V4KHN2Z0ludmFsaWRBbmNlc3RvcnMpO1xuICBmYWJyaWMuc3ZnVmFsaWRQYXJlbnRzUmVnRXggPSBnZXRTdmdSZWdleChzdmdWYWxpZFBhcmVudHMpO1xuXG4gIGZhYnJpYy5jc3NSdWxlcyA9IHsgfTtcbiAgZmFicmljLmdyYWRpZW50RGVmcyA9IHsgfTtcbiAgZmFicmljLmNsaXBQYXRocyA9IHsgfTtcblxuICBmdW5jdGlvbiBub3JtYWxpemVBdHRyKGF0dHIpIHtcbiAgICAvLyB0cmFuc2Zvcm0gYXR0cmlidXRlIG5hbWVzXG4gICAgaWYgKGF0dHIgaW4gYXR0cmlidXRlc01hcCkge1xuICAgICAgcmV0dXJuIGF0dHJpYnV0ZXNNYXBbYXR0cl07XG4gICAgfVxuICAgIHJldHVybiBhdHRyO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUoYXR0ciwgdmFsdWUsIHBhcmVudEF0dHJpYnV0ZXMsIGZvbnRTaXplKSB7XG4gICAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHZhbHVlKSwgcGFyc2VkO1xuXG4gICAgaWYgKChhdHRyID09PSAnZmlsbCcgfHwgYXR0ciA9PT0gJ3N0cm9rZScpICYmIHZhbHVlID09PSAnbm9uZScpIHtcbiAgICAgIHZhbHVlID0gJyc7XG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHIgPT09ICdzdHJva2VVbmlmb3JtJykge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PT0gJ25vbi1zY2FsaW5nLXN0cm9rZScpO1xuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAnc3Ryb2tlRGFzaEFycmF5Jykge1xuICAgICAgaWYgKHZhbHVlID09PSAnbm9uZScpIHtcbiAgICAgICAgdmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvLC9nLCAnICcpLnNwbGl0KC9cXHMrLykubWFwKHBhcnNlRmxvYXQpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAndHJhbnNmb3JtTWF0cml4Jykge1xuICAgICAgaWYgKHBhcmVudEF0dHJpYnV0ZXMgJiYgcGFyZW50QXR0cmlidXRlcy50cmFuc2Zvcm1NYXRyaXgpIHtcbiAgICAgICAgdmFsdWUgPSBtdWx0aXBseVRyYW5zZm9ybU1hdHJpY2VzKFxuICAgICAgICAgIHBhcmVudEF0dHJpYnV0ZXMudHJhbnNmb3JtTWF0cml4LCBmYWJyaWMucGFyc2VUcmFuc2Zvcm1BdHRyaWJ1dGUodmFsdWUpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGZhYnJpYy5wYXJzZVRyYW5zZm9ybUF0dHJpYnV0ZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHIgPT09ICd2aXNpYmxlJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZSAhPT0gJ25vbmUnICYmIHZhbHVlICE9PSAnaGlkZGVuJztcbiAgICAgIC8vIGRpc3BsYXk9bm9uZSBvbiBwYXJlbnQgZWxlbWVudCBhbHdheXMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGNoaWxkIGVsZW1lbnRcbiAgICAgIGlmIChwYXJlbnRBdHRyaWJ1dGVzICYmIHBhcmVudEF0dHJpYnV0ZXMudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0ciA9PT0gJ29wYWNpdHknKSB7XG4gICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgaWYgKHBhcmVudEF0dHJpYnV0ZXMgJiYgdHlwZW9mIHBhcmVudEF0dHJpYnV0ZXMub3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFsdWUgKj0gcGFyZW50QXR0cmlidXRlcy5vcGFjaXR5O1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChhdHRyID09PSAndGV4dEFuY2hvcicgLyogdGV4dC1hbmNob3IgKi8pIHtcbiAgICAgIHZhbHVlID0gdmFsdWUgPT09ICdzdGFydCcgPyAnbGVmdCcgOiB2YWx1ZSA9PT0gJ2VuZCcgPyAncmlnaHQnIDogJ2NlbnRlcic7XG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHIgPT09ICdjaGFyU3BhY2luZycpIHtcbiAgICAgIC8vIHBhcnNlVW5pdCByZXR1cm5zIHB4IGFuZCB3ZSBjb252ZXJ0IGl0IHRvIGVtXG4gICAgICBwYXJzZWQgPSBwYXJzZVVuaXQodmFsdWUsIGZvbnRTaXplKSAvIGZvbnRTaXplICogMTAwMDtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXR0ciA9PT0gJ3BhaW50Rmlyc3QnKSB7XG4gICAgICB2YXIgZmlsbEluZGV4ID0gdmFsdWUuaW5kZXhPZignZmlsbCcpO1xuICAgICAgdmFyIHN0cm9rZUluZGV4ID0gdmFsdWUuaW5kZXhPZignc3Ryb2tlJyk7XG4gICAgICB2YXIgdmFsdWUgPSAnZmlsbCc7XG4gICAgICBpZiAoZmlsbEluZGV4ID4gLTEgJiYgc3Ryb2tlSW5kZXggPiAtMSAmJiBzdHJva2VJbmRleCA8IGZpbGxJbmRleCkge1xuICAgICAgICB2YWx1ZSA9ICdzdHJva2UnO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZmlsbEluZGV4ID09PSAtMSAmJiBzdHJva2VJbmRleCA+IC0xKSB7XG4gICAgICAgIHZhbHVlID0gJ3N0cm9rZSc7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHIgPT09ICdocmVmJyB8fCBhdHRyID09PSAneGxpbms6aHJlZicgfHwgYXR0ciA9PT0gJ2ZvbnQnKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGF0dHIgPT09ICdpbWFnZVNtb290aGluZycpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT09ICdvcHRpbWl6ZVF1YWxpdHknKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBwYXJzZWQgPSBpc0FycmF5ID8gdmFsdWUubWFwKHBhcnNlVW5pdCkgOiBwYXJzZVVuaXQodmFsdWUsIGZvbnRTaXplKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCFpc0FycmF5ICYmIGlzTmFOKHBhcnNlZCkgPyB2YWx1ZSA6IHBhcnNlZCk7XG4gIH1cblxuICAvKipcbiAgICAqIEBwcml2YXRlXG4gICAgKi9cbiAgZnVuY3Rpb24gZ2V0U3ZnUmVnZXgoYXJyKSB7XG4gICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14oJyArIGFyci5qb2luKCd8JykgKyAnKVxcXFxiJywgJ2knKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlcyBBcnJheSBvZiBhdHRyaWJ1dGVzIHRvIHBhcnNlXG4gICAqL1xuICBmdW5jdGlvbiBfc2V0U3Ryb2tlRmlsbE9wYWNpdHkoYXR0cmlidXRlcykge1xuICAgIGZvciAodmFyIGF0dHIgaW4gY29sb3JBdHRyaWJ1dGVzKSB7XG5cbiAgICAgIGlmICh0eXBlb2YgYXR0cmlidXRlc1tjb2xvckF0dHJpYnV0ZXNbYXR0cl1dID09PSAndW5kZWZpbmVkJyB8fCBhdHRyaWJ1dGVzW2F0dHJdID09PSAnJykge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzW2F0dHJdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWZhYnJpYy5PYmplY3QucHJvdG90eXBlW2F0dHJdKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYXR0cmlidXRlc1thdHRyXSA9IGZhYnJpYy5PYmplY3QucHJvdG90eXBlW2F0dHJdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXR0cmlidXRlc1thdHRyXS5pbmRleE9mKCd1cmwoJykgPT09IDApIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IoYXR0cmlidXRlc1thdHRyXSk7XG4gICAgICBhdHRyaWJ1dGVzW2F0dHJdID0gY29sb3Iuc2V0QWxwaGEodG9GaXhlZChjb2xvci5nZXRBbHBoYSgpICogYXR0cmlidXRlc1tjb2xvckF0dHJpYnV0ZXNbYXR0cl1dLCAyKSkudG9SZ2JhKCk7XG4gICAgfVxuICAgIHJldHVybiBhdHRyaWJ1dGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBfZ2V0TXVsdGlwbGVOb2Rlcyhkb2MsIG5vZGVOYW1lcykge1xuICAgIHZhciBub2RlTmFtZSwgbm9kZUFycmF5ID0gW10sIG5vZGVMaXN0LCBpLCBsZW47XG4gICAgZm9yIChpID0gMCwgbGVuID0gbm9kZU5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBub2RlTmFtZSA9IG5vZGVOYW1lc1tpXTtcbiAgICAgIG5vZGVMaXN0ID0gZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKG5vZGVOYW1lKTtcbiAgICAgIG5vZGVBcnJheSA9IG5vZGVBcnJheS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobm9kZUxpc3QpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVBcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZXMgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHJldHVybmluZyBhbiBhcnJheSBvZiB2YWx1ZXNcbiAgICogQHN0YXRpY1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlVmFsdWUgU3RyaW5nIGNvbnRhaW5pbmcgYXR0cmlidXRlIHZhbHVlXG4gICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiA2IGVsZW1lbnRzIHJlcHJlc2VudGluZyB0cmFuc2Zvcm1hdGlvbiBtYXRyaXhcbiAgICovXG4gIGZhYnJpYy5wYXJzZVRyYW5zZm9ybUF0dHJpYnV0ZSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiByb3RhdGVNYXRyaXgobWF0cml4LCBhcmdzKSB7XG4gICAgICB2YXIgY29zID0gZmFicmljLnV0aWwuY29zKGFyZ3NbMF0pLCBzaW4gPSBmYWJyaWMudXRpbC5zaW4oYXJnc1swXSksXG4gICAgICAgICAgeCA9IDAsIHkgPSAwO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIHggPSBhcmdzWzFdO1xuICAgICAgICB5ID0gYXJnc1syXTtcbiAgICAgIH1cblxuICAgICAgbWF0cml4WzBdID0gY29zO1xuICAgICAgbWF0cml4WzFdID0gc2luO1xuICAgICAgbWF0cml4WzJdID0gLXNpbjtcbiAgICAgIG1hdHJpeFszXSA9IGNvcztcbiAgICAgIG1hdHJpeFs0XSA9IHggLSAoY29zICogeCAtIHNpbiAqIHkpO1xuICAgICAgbWF0cml4WzVdID0geSAtIChzaW4gKiB4ICsgY29zICogeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGVNYXRyaXgobWF0cml4LCBhcmdzKSB7XG4gICAgICB2YXIgbXVsdGlwbGllclggPSBhcmdzWzBdLFxuICAgICAgICAgIG11bHRpcGxpZXJZID0gKGFyZ3MubGVuZ3RoID09PSAyKSA/IGFyZ3NbMV0gOiBhcmdzWzBdO1xuXG4gICAgICBtYXRyaXhbMF0gPSBtdWx0aXBsaWVyWDtcbiAgICAgIG1hdHJpeFszXSA9IG11bHRpcGxpZXJZO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNrZXdNYXRyaXgobWF0cml4LCBhcmdzLCBwb3MpIHtcbiAgICAgIG1hdHJpeFtwb3NdID0gTWF0aC50YW4oZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyhhcmdzWzBdKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlTWF0cml4KG1hdHJpeCwgYXJncykge1xuICAgICAgbWF0cml4WzRdID0gYXJnc1swXTtcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBtYXRyaXhbNV0gPSBhcmdzWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlkZW50aXR5IG1hdHJpeFxuICAgIHZhciBpTWF0cml4ID0gZmFicmljLmlNYXRyaXgsXG5cbiAgICAgICAgLy8gPT0gYmVnaW4gdHJhbnNmb3JtIHJlZ2V4cFxuICAgICAgICBudW1iZXIgPSBmYWJyaWMucmVOdW0sXG5cbiAgICAgICAgY29tbWFXc3AgPSBmYWJyaWMuY29tbWFXc3AsXG5cbiAgICAgICAgc2tld1ggPSAnKD86KHNrZXdYKVxcXFxzKlxcXFwoXFxcXHMqKCcgKyBudW1iZXIgKyAnKVxcXFxzKlxcXFwpKScsXG5cbiAgICAgICAgc2tld1kgPSAnKD86KHNrZXdZKVxcXFxzKlxcXFwoXFxcXHMqKCcgKyBudW1iZXIgKyAnKVxcXFxzKlxcXFwpKScsXG5cbiAgICAgICAgcm90YXRlID0gJyg/Oihyb3RhdGUpXFxcXHMqXFxcXChcXFxccyooJyArIG51bWJlciArICcpKD86JyArXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hV3NwICsgJygnICsgbnVtYmVyICsgJyknICtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFXc3AgKyAnKCcgKyBudW1iZXIgKyAnKSk/XFxcXHMqXFxcXCkpJyxcblxuICAgICAgICBzY2FsZSA9ICcoPzooc2NhbGUpXFxcXHMqXFxcXChcXFxccyooJyArIG51bWJlciArICcpKD86JyArXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hV3NwICsgJygnICsgbnVtYmVyICsgJykpP1xcXFxzKlxcXFwpKScsXG5cbiAgICAgICAgdHJhbnNsYXRlID0gJyg/Oih0cmFuc2xhdGUpXFxcXHMqXFxcXChcXFxccyooJyArIG51bWJlciArICcpKD86JyArXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hV3NwICsgJygnICsgbnVtYmVyICsgJykpP1xcXFxzKlxcXFwpKScsXG5cbiAgICAgICAgbWF0cml4ID0gJyg/OihtYXRyaXgpXFxcXHMqXFxcXChcXFxccyonICtcbiAgICAgICAgICAgICAgICAgICcoJyArIG51bWJlciArICcpJyArIGNvbW1hV3NwICtcbiAgICAgICAgICAgICAgICAgICcoJyArIG51bWJlciArICcpJyArIGNvbW1hV3NwICtcbiAgICAgICAgICAgICAgICAgICcoJyArIG51bWJlciArICcpJyArIGNvbW1hV3NwICtcbiAgICAgICAgICAgICAgICAgICcoJyArIG51bWJlciArICcpJyArIGNvbW1hV3NwICtcbiAgICAgICAgICAgICAgICAgICcoJyArIG51bWJlciArICcpJyArIGNvbW1hV3NwICtcbiAgICAgICAgICAgICAgICAgICcoJyArIG51bWJlciArICcpJyArXG4gICAgICAgICAgICAgICAgICAnXFxcXHMqXFxcXCkpJyxcblxuICAgICAgICB0cmFuc2Zvcm0gPSAnKD86JyArXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeCArICd8JyArXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZSArICd8JyArXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlICsgJ3wnICtcbiAgICAgICAgICAgICAgICAgICAgcm90YXRlICsgJ3wnICtcbiAgICAgICAgICAgICAgICAgICAgc2tld1ggKyAnfCcgK1xuICAgICAgICAgICAgICAgICAgICBza2V3WSArXG4gICAgICAgICAgICAgICAgICAgICcpJyxcblxuICAgICAgICB0cmFuc2Zvcm1zID0gJyg/OicgKyB0cmFuc2Zvcm0gKyAnKD86JyArIGNvbW1hV3NwICsgJyonICsgdHJhbnNmb3JtICsgJykqJyArICcpJyxcblxuICAgICAgICB0cmFuc2Zvcm1MaXN0ID0gJ15cXFxccyooPzonICsgdHJhbnNmb3JtcyArICc/KVxcXFxzKiQnLFxuXG4gICAgICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9jb29yZHMuaHRtbCNUcmFuc2Zvcm1BdHRyaWJ1dGVcbiAgICAgICAgcmVUcmFuc2Zvcm1MaXN0ID0gbmV3IFJlZ0V4cCh0cmFuc2Zvcm1MaXN0KSxcbiAgICAgICAgLy8gPT0gZW5kIHRyYW5zZm9ybSByZWdleHBcblxuICAgICAgICByZVRyYW5zZm9ybSA9IG5ldyBSZWdFeHAodHJhbnNmb3JtLCAnZycpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGF0dHJpYnV0ZVZhbHVlKSB7XG5cbiAgICAgIC8vIHN0YXJ0IHdpdGggaWRlbnRpdHkgbWF0cml4XG4gICAgICB2YXIgbWF0cml4ID0gaU1hdHJpeC5jb25jYXQoKSxcbiAgICAgICAgICBtYXRyaWNlcyA9IFtdO1xuXG4gICAgICAvLyByZXR1cm4gaWYgbm8gYXJndW1lbnQgd2FzIGdpdmVuIG9yXG4gICAgICAvLyBhbiBhcmd1bWVudCBkb2VzIG5vdCBtYXRjaCB0cmFuc2Zvcm0gYXR0cmlidXRlIHJlZ2V4cFxuICAgICAgaWYgKCFhdHRyaWJ1dGVWYWx1ZSB8fCAoYXR0cmlidXRlVmFsdWUgJiYgIXJlVHJhbnNmb3JtTGlzdC50ZXN0KGF0dHJpYnV0ZVZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICAgIH1cblxuICAgICAgYXR0cmlidXRlVmFsdWUucmVwbGFjZShyZVRyYW5zZm9ybSwgZnVuY3Rpb24obWF0Y2gpIHtcblxuICAgICAgICB2YXIgbSA9IG5ldyBSZWdFeHAodHJhbnNmb3JtKS5leGVjKG1hdGNoKS5maWx0ZXIoZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgIC8vIG1hdGNoICE9PSAnJyAmJiBtYXRjaCAhPSBudWxsXG4gICAgICAgICAgICAgIHJldHVybiAoISFtYXRjaCk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9IG1bMV0sXG4gICAgICAgICAgICBhcmdzID0gbS5zbGljZSgyKS5tYXAocGFyc2VGbG9hdCk7XG5cbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICAgICAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgICAgICAgdHJhbnNsYXRlTWF0cml4KG1hdHJpeCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgICAgYXJnc1swXSA9IGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMoYXJnc1swXSk7XG4gICAgICAgICAgICByb3RhdGVNYXRyaXgobWF0cml4LCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICAgIHNjYWxlTWF0cml4KG1hdHJpeCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdza2V3WCc6XG4gICAgICAgICAgICBza2V3TWF0cml4KG1hdHJpeCwgYXJncywgMik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdza2V3WSc6XG4gICAgICAgICAgICBza2V3TWF0cml4KG1hdHJpeCwgYXJncywgMSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgICAgICAgbWF0cml4ID0gYXJncztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc25hcHNob3QgY3VycmVudCBtYXRyaXggaW50byBtYXRyaWNlcyBhcnJheVxuICAgICAgICBtYXRyaWNlcy5wdXNoKG1hdHJpeC5jb25jYXQoKSk7XG4gICAgICAgIC8vIHJlc2V0XG4gICAgICAgIG1hdHJpeCA9IGlNYXRyaXguY29uY2F0KCk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIGNvbWJpbmVkTWF0cml4ID0gbWF0cmljZXNbMF07XG4gICAgICB3aGlsZSAobWF0cmljZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBtYXRyaWNlcy5zaGlmdCgpO1xuICAgICAgICBjb21iaW5lZE1hdHJpeCA9IGZhYnJpYy51dGlsLm11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXMoY29tYmluZWRNYXRyaXgsIG1hdHJpY2VzWzBdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21iaW5lZE1hdHJpeDtcbiAgICB9O1xuICB9KSgpO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VTdHlsZVN0cmluZyhzdHlsZSwgb1N0eWxlKSB7XG4gICAgdmFyIGF0dHIsIHZhbHVlO1xuICAgIHN0eWxlLnJlcGxhY2UoLztcXHMqJC8sICcnKS5zcGxpdCgnOycpLmZvckVhY2goZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICB2YXIgcGFpciA9IGNodW5rLnNwbGl0KCc6Jyk7XG5cbiAgICAgIGF0dHIgPSBwYWlyWzBdLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFsdWUgPSAgcGFpclsxXS50cmltKCk7XG5cbiAgICAgIG9TdHlsZVthdHRyXSA9IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBwYXJzZVN0eWxlT2JqZWN0KHN0eWxlLCBvU3R5bGUpIHtcbiAgICB2YXIgYXR0ciwgdmFsdWU7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgaWYgKHR5cGVvZiBzdHlsZVtwcm9wXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGF0dHIgPSBwcm9wLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuXG4gICAgICBvU3R5bGVbYXR0cl0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGdldEdsb2JhbFN0eWxlc0ZvckVsZW1lbnQoZWxlbWVudCwgc3ZnVWlkKSB7XG4gICAgdmFyIHN0eWxlcyA9IHsgfTtcbiAgICBmb3IgKHZhciBydWxlIGluIGZhYnJpYy5jc3NSdWxlc1tzdmdVaWRdKSB7XG4gICAgICBpZiAoZWxlbWVudE1hdGNoZXNSdWxlKGVsZW1lbnQsIHJ1bGUuc3BsaXQoJyAnKSkpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gZmFicmljLmNzc1J1bGVzW3N2Z1VpZF1bcnVsZV0pIHtcbiAgICAgICAgICBzdHlsZXNbcHJvcGVydHldID0gZmFicmljLmNzc1J1bGVzW3N2Z1VpZF1bcnVsZV1bcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHlsZXM7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVzUnVsZShlbGVtZW50LCBzZWxlY3RvcnMpIHtcbiAgICB2YXIgZmlyc3RNYXRjaGluZywgcGFyZW50TWF0Y2hpbmcgPSB0cnVlO1xuICAgIC8vc3RhcnQgZnJvbSByaWdodG1vc3Qgc2VsZWN0b3IuXG4gICAgZmlyc3RNYXRjaGluZyA9IHNlbGVjdG9yTWF0Y2hlcyhlbGVtZW50LCBzZWxlY3RvcnMucG9wKCkpO1xuICAgIGlmIChmaXJzdE1hdGNoaW5nICYmIHNlbGVjdG9ycy5sZW5ndGgpIHtcbiAgICAgIHBhcmVudE1hdGNoaW5nID0gZG9lc1NvbWVQYXJlbnRNYXRjaChlbGVtZW50LCBzZWxlY3RvcnMpO1xuICAgIH1cbiAgICByZXR1cm4gZmlyc3RNYXRjaGluZyAmJiBwYXJlbnRNYXRjaGluZyAmJiAoc2VsZWN0b3JzLmxlbmd0aCA9PT0gMCk7XG4gIH1cblxuICBmdW5jdGlvbiBkb2VzU29tZVBhcmVudE1hdGNoKGVsZW1lbnQsIHNlbGVjdG9ycykge1xuICAgIHZhciBzZWxlY3RvciwgcGFyZW50TWF0Y2hpbmcgPSB0cnVlO1xuICAgIHdoaWxlIChlbGVtZW50LnBhcmVudE5vZGUgJiYgZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSAxICYmIHNlbGVjdG9ycy5sZW5ndGgpIHtcbiAgICAgIGlmIChwYXJlbnRNYXRjaGluZykge1xuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9ycy5wb3AoKTtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICBwYXJlbnRNYXRjaGluZyA9IHNlbGVjdG9yTWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcik7XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RvcnMubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBzZWxlY3Rvck1hdGNoZXMoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLFxuICAgICAgICBjbGFzc05hbWVzID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJyksXG4gICAgICAgIGlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2lkJyksIG1hdGNoZXIsIGk7XG4gICAgLy8gaSBjaGVjayBpZiBhIHNlbGVjdG9yIG1hdGNoZXMgc2xpY2luZyBhd2F5IHBhcnQgZnJvbSBpdC5cbiAgICAvLyBpZiBpIGdldCBlbXB0eSBzdHJpbmcgaSBzaG91bGQgbWF0Y2hcbiAgICBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnXicgKyBub2RlTmFtZSwgJ2knKTtcbiAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UobWF0Y2hlciwgJycpO1xuICAgIGlmIChpZCAmJiBzZWxlY3Rvci5sZW5ndGgpIHtcbiAgICAgIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCcjJyArIGlkICsgJyg/IVthLXpBLVpcXFxcLV0rKScsICdpJyk7XG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UobWF0Y2hlciwgJycpO1xuICAgIH1cbiAgICBpZiAoY2xhc3NOYW1lcyAmJiBzZWxlY3Rvci5sZW5ndGgpIHtcbiAgICAgIGNsYXNzTmFtZXMgPSBjbGFzc05hbWVzLnNwbGl0KCcgJyk7XG4gICAgICBmb3IgKGkgPSBjbGFzc05hbWVzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICBtYXRjaGVyID0gbmV3IFJlZ0V4cCgnXFxcXC4nICsgY2xhc3NOYW1lc1tpXSArICcoPyFbYS16QS1aXFxcXC1dKyknLCAnaScpO1xuICAgICAgICBzZWxlY3RvciA9IHNlbGVjdG9yLnJlcGxhY2UobWF0Y2hlciwgJycpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0b3IubGVuZ3RoID09PSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIHRvIHN1cHBvcnQgSUU4IG1pc3NpbmcgZ2V0RWxlbWVudEJ5SWQgb24gU1ZHZG9jdW1lbnQgYW5kIG9uIG5vZGUgeG1sRE9NXG4gICAqL1xuICBmdW5jdGlvbiBlbGVtZW50QnlJZChkb2MsIGlkKSB7XG4gICAgdmFyIGVsO1xuICAgIGRvYy5nZXRFbGVtZW50QnlJZCAmJiAoZWwgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoaWQpKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgIHJldHVybiBlbDtcbiAgICB9XG4gICAgdmFyIG5vZGUsIGksIGxlbiwgbm9kZWxpc3QgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBub2RlbGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbm9kZSA9IG5vZGVsaXN0W2ldO1xuICAgICAgaWYgKGlkID09PSBub2RlLmdldEF0dHJpYnV0ZSgnaWQnKSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlVXNlRGlyZWN0aXZlcyhkb2MpIHtcbiAgICB2YXIgbm9kZWxpc3QgPSBfZ2V0TXVsdGlwbGVOb2Rlcyhkb2MsIFsndXNlJywgJ3N2Zzp1c2UnXSksIGkgPSAwO1xuICAgIHdoaWxlIChub2RlbGlzdC5sZW5ndGggJiYgaSA8IG5vZGVsaXN0Lmxlbmd0aCkge1xuICAgICAgdmFyIGVsID0gbm9kZWxpc3RbaV0sXG4gICAgICAgICAgeGxpbmtBdHRyaWJ1dGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKSB8fCBlbC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKTtcblxuICAgICAgaWYgKHhsaW5rQXR0cmlidXRlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHhsaW5rID0geGxpbmtBdHRyaWJ1dGUuc2xpY2UoMSksXG4gICAgICAgICAgeCA9IGVsLmdldEF0dHJpYnV0ZSgneCcpIHx8IDAsXG4gICAgICAgICAgeSA9IGVsLmdldEF0dHJpYnV0ZSgneScpIHx8IDAsXG4gICAgICAgICAgZWwyID0gZWxlbWVudEJ5SWQoZG9jLCB4bGluaykuY2xvbmVOb2RlKHRydWUpLFxuICAgICAgICAgIGN1cnJlbnRUcmFucyA9IChlbDIuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKSB8fCAnJykgKyAnIHRyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknLFxuICAgICAgICAgIHBhcmVudE5vZGUsXG4gICAgICAgICAgb2xkTGVuZ3RoID0gbm9kZWxpc3QubGVuZ3RoLCBhdHRyLFxuICAgICAgICAgIGosXG4gICAgICAgICAgYXR0cnMsXG4gICAgICAgICAgbGVuLFxuICAgICAgICAgIG5hbWVzcGFjZSA9IGZhYnJpYy5zdmdOUztcblxuICAgICAgYXBwbHlWaWV3Ym94VHJhbnNmb3JtKGVsMik7XG4gICAgICBpZiAoL15zdmckL2kudGVzdChlbDIubm9kZU5hbWUpKSB7XG4gICAgICAgIHZhciBlbDMgPSBlbDIub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlLCAnZycpO1xuICAgICAgICBmb3IgKGogPSAwLCBhdHRycyA9IGVsMi5hdHRyaWJ1dGVzLCBsZW4gPSBhdHRycy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGF0dHIgPSBhdHRycy5pdGVtKGopO1xuICAgICAgICAgIGVsMy5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIGF0dHIubm9kZU5hbWUsIGF0dHIubm9kZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbDIuZmlyc3RDaGlsZCAhPSBudWxsXG4gICAgICAgIHdoaWxlIChlbDIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIGVsMy5hcHBlbmRDaGlsZChlbDIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWwyID0gZWwzO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGogPSAwLCBhdHRycyA9IGVsLmF0dHJpYnV0ZXMsIGxlbiA9IGF0dHJzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIGF0dHIgPSBhdHRycy5pdGVtKGopO1xuICAgICAgICBpZiAoYXR0ci5ub2RlTmFtZSA9PT0gJ3gnIHx8IGF0dHIubm9kZU5hbWUgPT09ICd5JyB8fFxuICAgICAgICAgIGF0dHIubm9kZU5hbWUgPT09ICd4bGluazpocmVmJyB8fCBhdHRyLm5vZGVOYW1lID09PSAnaHJlZicpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhdHRyLm5vZGVOYW1lID09PSAndHJhbnNmb3JtJykge1xuICAgICAgICAgIGN1cnJlbnRUcmFucyA9IGF0dHIubm9kZVZhbHVlICsgJyAnICsgY3VycmVudFRyYW5zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGVsMi5zZXRBdHRyaWJ1dGUoYXR0ci5ub2RlTmFtZSwgYXR0ci5ub2RlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsMi5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGN1cnJlbnRUcmFucyk7XG4gICAgICBlbDIuc2V0QXR0cmlidXRlKCdpbnN0YW50aWF0ZWRfYnlfdXNlJywgJzEnKTtcbiAgICAgIGVsMi5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICBwYXJlbnROb2RlID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGVsMiwgZWwpO1xuICAgICAgLy8gc29tZSBicm93c2VycyBkbyBub3Qgc2hvcnRlbiBub2RlbGlzdCBhZnRlciByZXBsYWNlQ2hpbGQgKElFOClcbiAgICAgIGlmIChub2RlbGlzdC5sZW5ndGggPT09IG9sZExlbmd0aCkge1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2Nvb3Jkcy5odG1sI1ZpZXdCb3hBdHRyaWJ1dGVcbiAgLy8gbWF0Y2hlcywgZS5nLjogKzE0LjU2ZS0xMiwgZXRjLlxuICB2YXIgcmVWaWV3Qm94QXR0clZhbHVlID0gbmV3IFJlZ0V4cChcbiAgICAnXicgK1xuICAgICdcXFxccyooJyArIGZhYnJpYy5yZU51bSArICcrKVxcXFxzKiw/JyArXG4gICAgJ1xcXFxzKignICsgZmFicmljLnJlTnVtICsgJyspXFxcXHMqLD8nICtcbiAgICAnXFxcXHMqKCcgKyBmYWJyaWMucmVOdW0gKyAnKylcXFxccyosPycgK1xuICAgICdcXFxccyooJyArIGZhYnJpYy5yZU51bSArICcrKVxcXFxzKicgK1xuICAgICckJ1xuICApO1xuXG4gIC8qKlxuICAgKiBBZGQgYSA8Zz4gZWxlbWVudCB0aGF0IGVudmVsb3AgYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCBtYWtlcyB0aGUgdmlld2JveCB0cmFuc2Zvcm1NYXRyaXggZGVzY2VuZCBvbiBhbGwgZWxlbWVudHNcbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5Vmlld2JveFRyYW5zZm9ybShlbGVtZW50KSB7XG4gICAgaWYgKCFmYWJyaWMuc3ZnVmlld0JveEVsZW1lbnRzUmVnRXgudGVzdChlbGVtZW50Lm5vZGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICB2YXIgdmlld0JveEF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgndmlld0JveCcpLFxuICAgICAgICBzY2FsZVggPSAxLFxuICAgICAgICBzY2FsZVkgPSAxLFxuICAgICAgICBtaW5YID0gMCxcbiAgICAgICAgbWluWSA9IDAsXG4gICAgICAgIHZpZXdCb3hXaWR0aCwgdmlld0JveEhlaWdodCwgbWF0cml4LCBlbCxcbiAgICAgICAgd2lkdGhBdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyksXG4gICAgICAgIGhlaWdodEF0dHIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaGVpZ2h0JyksXG4gICAgICAgIHggPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgneCcpIHx8IDAsXG4gICAgICAgIHkgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgneScpIHx8IDAsXG4gICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW8gPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycpIHx8ICcnLFxuICAgICAgICBtaXNzaW5nVmlld0JveCA9ICghdmlld0JveEF0dHIgfHwgISh2aWV3Qm94QXR0ciA9IHZpZXdCb3hBdHRyLm1hdGNoKHJlVmlld0JveEF0dHJWYWx1ZSkpKSxcbiAgICAgICAgbWlzc2luZ0RpbUF0dHIgPSAoIXdpZHRoQXR0ciB8fCAhaGVpZ2h0QXR0ciB8fCB3aWR0aEF0dHIgPT09ICcxMDAlJyB8fCBoZWlnaHRBdHRyID09PSAnMTAwJScpLFxuICAgICAgICB0b0JlUGFyc2VkID0gbWlzc2luZ1ZpZXdCb3ggJiYgbWlzc2luZ0RpbUF0dHIsXG4gICAgICAgIHBhcnNlZERpbSA9IHsgfSwgdHJhbnNsYXRlTWF0cml4ID0gJycsIHdpZHRoRGlmZiA9IDAsIGhlaWdodERpZmYgPSAwO1xuXG4gICAgcGFyc2VkRGltLndpZHRoID0gMDtcbiAgICBwYXJzZWREaW0uaGVpZ2h0ID0gMDtcbiAgICBwYXJzZWREaW0udG9CZVBhcnNlZCA9IHRvQmVQYXJzZWQ7XG5cbiAgICBpZiAobWlzc2luZ1ZpZXdCb3gpIHtcbiAgICAgIGlmICgoKHggfHwgeSkgJiYgZWxlbWVudC5wYXJlbnROb2RlICYmIGVsZW1lbnQucGFyZW50Tm9kZS5ub2RlTmFtZSAhPT0gJyNkb2N1bWVudCcpKSB7XG4gICAgICAgIHRyYW5zbGF0ZU1hdHJpeCA9ICcgdHJhbnNsYXRlKCcgKyBwYXJzZVVuaXQoeCkgKyAnICcgKyBwYXJzZVVuaXQoeSkgKyAnKSAnO1xuICAgICAgICBtYXRyaXggPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpIHx8ICcnKSArIHRyYW5zbGF0ZU1hdHJpeDtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIG1hdHJpeCk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd4Jyk7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCd5Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRvQmVQYXJzZWQpIHtcbiAgICAgIHJldHVybiBwYXJzZWREaW07XG4gICAgfVxuXG4gICAgaWYgKG1pc3NpbmdWaWV3Qm94KSB7XG4gICAgICBwYXJzZWREaW0ud2lkdGggPSBwYXJzZVVuaXQod2lkdGhBdHRyKTtcbiAgICAgIHBhcnNlZERpbS5oZWlnaHQgPSBwYXJzZVVuaXQoaGVpZ2h0QXR0cik7XG4gICAgICAvLyBzZXQgYSB0cmFuc2Zvcm0gZm9yIGVsZW1lbnRzIHRoYXQgaGF2ZSB4IHkgYW5kIGFyZSBpbm5lcihvbmx5KSBTVkdzXG4gICAgICByZXR1cm4gcGFyc2VkRGltO1xuICAgIH1cbiAgICBtaW5YID0gLXBhcnNlRmxvYXQodmlld0JveEF0dHJbMV0pO1xuICAgIG1pblkgPSAtcGFyc2VGbG9hdCh2aWV3Qm94QXR0clsyXSk7XG4gICAgdmlld0JveFdpZHRoID0gcGFyc2VGbG9hdCh2aWV3Qm94QXR0clszXSk7XG4gICAgdmlld0JveEhlaWdodCA9IHBhcnNlRmxvYXQodmlld0JveEF0dHJbNF0pO1xuICAgIHBhcnNlZERpbS5taW5YID0gbWluWDtcbiAgICBwYXJzZWREaW0ubWluWSA9IG1pblk7XG4gICAgcGFyc2VkRGltLnZpZXdCb3hXaWR0aCA9IHZpZXdCb3hXaWR0aDtcbiAgICBwYXJzZWREaW0udmlld0JveEhlaWdodCA9IHZpZXdCb3hIZWlnaHQ7XG4gICAgaWYgKCFtaXNzaW5nRGltQXR0cikge1xuICAgICAgcGFyc2VkRGltLndpZHRoID0gcGFyc2VVbml0KHdpZHRoQXR0cik7XG4gICAgICBwYXJzZWREaW0uaGVpZ2h0ID0gcGFyc2VVbml0KGhlaWdodEF0dHIpO1xuICAgICAgc2NhbGVYID0gcGFyc2VkRGltLndpZHRoIC8gdmlld0JveFdpZHRoO1xuICAgICAgc2NhbGVZID0gcGFyc2VkRGltLmhlaWdodCAvIHZpZXdCb3hIZWlnaHQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcGFyc2VkRGltLndpZHRoID0gdmlld0JveFdpZHRoO1xuICAgICAgcGFyc2VkRGltLmhlaWdodCA9IHZpZXdCb3hIZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCBpcyB0byBwcmVzZXJ2ZSBhc3BlY3QgcmF0aW9cbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvID0gZmFicmljLnV0aWwucGFyc2VQcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0cmlidXRlKHByZXNlcnZlQXNwZWN0UmF0aW8pO1xuICAgIGlmIChwcmVzZXJ2ZUFzcGVjdFJhdGlvLmFsaWduWCAhPT0gJ25vbmUnKSB7XG4gICAgICAvL3RyYW5zbGF0ZSBhbGwgY29udGFpbmVyIGZvciB0aGUgZWZmZWN0IG9mIE1pZCwgTWluLCBNYXhcbiAgICAgIGlmIChwcmVzZXJ2ZUFzcGVjdFJhdGlvLm1lZXRPclNsaWNlID09PSAnbWVldCcpIHtcbiAgICAgICAgc2NhbGVZID0gc2NhbGVYID0gKHNjYWxlWCA+IHNjYWxlWSA/IHNjYWxlWSA6IHNjYWxlWCk7XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBhZGRpdGlvbmFsIHRyYW5zbGF0aW9uIHRvIG1vdmUgdGhlIHZpZXdib3hcbiAgICAgIH1cbiAgICAgIGlmIChwcmVzZXJ2ZUFzcGVjdFJhdGlvLm1lZXRPclNsaWNlID09PSAnc2xpY2UnKSB7XG4gICAgICAgIHNjYWxlWSA9IHNjYWxlWCA9IChzY2FsZVggPiBzY2FsZVkgPyBzY2FsZVggOiBzY2FsZVkpO1xuICAgICAgICAvLyBjYWxjdWxhdGUgYWRkaXRpb25hbCB0cmFuc2xhdGlvbiB0byBtb3ZlIHRoZSB2aWV3Ym94XG4gICAgICB9XG4gICAgICB3aWR0aERpZmYgPSBwYXJzZWREaW0ud2lkdGggLSB2aWV3Qm94V2lkdGggKiBzY2FsZVg7XG4gICAgICBoZWlnaHREaWZmID0gcGFyc2VkRGltLmhlaWdodCAtIHZpZXdCb3hIZWlnaHQgKiBzY2FsZVg7XG4gICAgICBpZiAocHJlc2VydmVBc3BlY3RSYXRpby5hbGlnblggPT09ICdNaWQnKSB7XG4gICAgICAgIHdpZHRoRGlmZiAvPSAyO1xuICAgICAgfVxuICAgICAgaWYgKHByZXNlcnZlQXNwZWN0UmF0aW8uYWxpZ25ZID09PSAnTWlkJykge1xuICAgICAgICBoZWlnaHREaWZmIC89IDI7XG4gICAgICB9XG4gICAgICBpZiAocHJlc2VydmVBc3BlY3RSYXRpby5hbGlnblggPT09ICdNaW4nKSB7XG4gICAgICAgIHdpZHRoRGlmZiA9IDA7XG4gICAgICB9XG4gICAgICBpZiAocHJlc2VydmVBc3BlY3RSYXRpby5hbGlnblkgPT09ICdNaW4nKSB7XG4gICAgICAgIGhlaWdodERpZmYgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzY2FsZVggPT09IDEgJiYgc2NhbGVZID09PSAxICYmIG1pblggPT09IDAgJiYgbWluWSA9PT0gMCAmJiB4ID09PSAwICYmIHkgPT09IDApIHtcbiAgICAgIHJldHVybiBwYXJzZWREaW07XG4gICAgfVxuICAgIGlmICgoeCB8fCB5KSAmJiBlbGVtZW50LnBhcmVudE5vZGUubm9kZU5hbWUgIT09ICcjZG9jdW1lbnQnKSB7XG4gICAgICB0cmFuc2xhdGVNYXRyaXggPSAnIHRyYW5zbGF0ZSgnICsgcGFyc2VVbml0KHgpICsgJyAnICsgcGFyc2VVbml0KHkpICsgJykgJztcbiAgICB9XG5cbiAgICBtYXRyaXggPSB0cmFuc2xhdGVNYXRyaXggKyAnIG1hdHJpeCgnICsgc2NhbGVYICtcbiAgICAgICAgICAgICAgICAgICcgMCcgK1xuICAgICAgICAgICAgICAgICAgJyAwICcgK1xuICAgICAgICAgICAgICAgICAgc2NhbGVZICsgJyAnICtcbiAgICAgICAgICAgICAgICAgIChtaW5YICogc2NhbGVYICsgd2lkdGhEaWZmKSArICcgJyArXG4gICAgICAgICAgICAgICAgICAobWluWSAqIHNjYWxlWSArIGhlaWdodERpZmYpICsgJykgJztcbiAgICAvLyBzZWVtcyB1bnVzZWQuXG4gICAgLy8gcGFyc2VkRGltLnZpZXdib3hUcmFuc2Zvcm0gPSBmYWJyaWMucGFyc2VUcmFuc2Zvcm1BdHRyaWJ1dGUobWF0cml4KTtcbiAgICBpZiAoZWxlbWVudC5ub2RlTmFtZSA9PT0gJ3N2ZycpIHtcbiAgICAgIGVsID0gZWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmYWJyaWMuc3ZnTlMsICdnJyk7XG4gICAgICAvLyBlbGVtZW50LmZpcnN0Q2hpbGQgIT0gbnVsbFxuICAgICAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbC5hcHBlbmRDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChlbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZWwgPSBlbGVtZW50O1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCd4Jyk7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ3knKTtcbiAgICAgIG1hdHJpeCA9IGVsLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJykgKyBtYXRyaXg7XG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgbWF0cml4KTtcbiAgICByZXR1cm4gcGFyc2VkRGltO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzQW5jZXN0b3JXaXRoTm9kZU5hbWUoZWxlbWVudCwgbm9kZU5hbWUpIHtcbiAgICB3aGlsZSAoZWxlbWVudCAmJiAoZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZSkpIHtcbiAgICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lICYmIG5vZGVOYW1lLnRlc3QoZWxlbWVudC5ub2RlTmFtZS5yZXBsYWNlKCdzdmc6JywgJycpKVxuICAgICAgICAmJiAhZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2luc3RhbnRpYXRlZF9ieV91c2UnKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlcyBhbiBTVkcgZG9jdW1lbnQsIGNvbnZlcnRzIGl0IHRvIGFuIGFycmF5IG9mIGNvcnJlc3BvbmRpbmcgZmFicmljLiogaW5zdGFuY2VzIGFuZCBwYXNzZXMgdGhlbSB0byBhIGNhbGxiYWNrXG4gICAqIEBzdGF0aWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICogQHBhcmFtIHtTVkdEb2N1bWVudH0gZG9jIFNWRyBkb2N1bWVudCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBjYWxsIHdoZW4gcGFyc2luZyBpcyBmaW5pc2hlZDtcbiAgICogSXQncyBiZWluZyBwYXNzZWQgYW4gYXJyYXkgb2YgZWxlbWVudHMgKHBhcnNlZCBmcm9tIGEgZG9jdW1lbnQpLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2YgU1ZHIGVsZW1lbnRzLCBjYWxsZWQgYWZ0ZXIgZWFjaCBmYWJyaWMgb2JqZWN0IGNyZWF0ZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyc2luZ09wdGlvbnNdIG9wdGlvbnMgZm9yIHBhcnNpbmcgZG9jdW1lbnRcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtwYXJzaW5nT3B0aW9ucy5jcm9zc09yaWdpbl0gY3Jvc3NPcmlnaW4gc2V0dGluZ3NcbiAgICovXG4gIGZhYnJpYy5wYXJzZVNWR0RvY3VtZW50ID0gZnVuY3Rpb24oZG9jLCBjYWxsYmFjaywgcmV2aXZlciwgcGFyc2luZ09wdGlvbnMpIHtcbiAgICBpZiAoIWRvYykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBhcnNlVXNlRGlyZWN0aXZlcyhkb2MpO1xuXG4gICAgdmFyIHN2Z1VpZCA9ICBmYWJyaWMuT2JqZWN0Ll9fdWlkKyssIGksIGxlbixcbiAgICAgICAgb3B0aW9ucyA9IGFwcGx5Vmlld2JveFRyYW5zZm9ybShkb2MpLFxuICAgICAgICBkZXNjZW5kYW50cyA9IGZhYnJpYy51dGlsLnRvQXJyYXkoZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykpO1xuICAgIG9wdGlvbnMuY3Jvc3NPcmlnaW4gPSBwYXJzaW5nT3B0aW9ucyAmJiBwYXJzaW5nT3B0aW9ucy5jcm9zc09yaWdpbjtcbiAgICBvcHRpb25zLnN2Z1VpZCA9IHN2Z1VpZDtcblxuICAgIGlmIChkZXNjZW5kYW50cy5sZW5ndGggPT09IDAgJiYgZmFicmljLmlzTGlrZWx5Tm9kZSkge1xuICAgICAgLy8gd2UncmUgbGlrZWx5IGluIG5vZGUsIHdoZXJlIFwibzMteG1sXCIgbGlicmFyeSBmYWlscyB0byBnRUJUTihcIipcIilcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hamF4b3JnL25vZGUtbzMteG1sL2lzc3Vlcy8yMVxuICAgICAgZGVzY2VuZGFudHMgPSBkb2Muc2VsZWN0Tm9kZXMoJy8vKltuYW1lKC4pIT1cInN2Z1wiXScpO1xuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gZGVzY2VuZGFudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgYXJyW2ldID0gZGVzY2VuZGFudHNbaV07XG4gICAgICB9XG4gICAgICBkZXNjZW5kYW50cyA9IGFycjtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudHMgPSBkZXNjZW5kYW50cy5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcbiAgICAgIGFwcGx5Vmlld2JveFRyYW5zZm9ybShlbCk7XG4gICAgICByZXR1cm4gZmFicmljLnN2Z1ZhbGlkVGFnTmFtZXNSZWdFeC50ZXN0KGVsLm5vZGVOYW1lLnJlcGxhY2UoJ3N2ZzonLCAnJykpICYmXG4gICAgICAgICAgICAhaGFzQW5jZXN0b3JXaXRoTm9kZU5hbWUoZWwsIGZhYnJpYy5zdmdJbnZhbGlkQW5jZXN0b3JzUmVnRXgpOyAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvc3RydWN0Lmh0bWwjRGVmc0VsZW1lbnRcbiAgICB9KTtcbiAgICBpZiAoIWVsZW1lbnRzIHx8IChlbGVtZW50cyAmJiAhZWxlbWVudHMubGVuZ3RoKSkge1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soW10sIHt9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGNsaXBQYXRocyA9IHsgfTtcbiAgICBkZXNjZW5kYW50cy5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcbiAgICAgIHJldHVybiBlbC5ub2RlTmFtZS5yZXBsYWNlKCdzdmc6JywgJycpID09PSAnY2xpcFBhdGgnO1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgIHZhciBpZCA9IGVsLmdldEF0dHJpYnV0ZSgnaWQnKTtcbiAgICAgIGNsaXBQYXRoc1tpZF0gPSBmYWJyaWMudXRpbC50b0FycmF5KGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCcqJykpLmZpbHRlcihmdW5jdGlvbihlbCkge1xuICAgICAgICByZXR1cm4gZmFicmljLnN2Z1ZhbGlkVGFnTmFtZXNSZWdFeC50ZXN0KGVsLm5vZGVOYW1lLnJlcGxhY2UoJ3N2ZzonLCAnJykpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZmFicmljLmdyYWRpZW50RGVmc1tzdmdVaWRdID0gZmFicmljLmdldEdyYWRpZW50RGVmcyhkb2MpO1xuICAgIGZhYnJpYy5jc3NSdWxlc1tzdmdVaWRdID0gZmFicmljLmdldENTU1J1bGVzKGRvYyk7XG4gICAgZmFicmljLmNsaXBQYXRoc1tzdmdVaWRdID0gY2xpcFBhdGhzO1xuICAgIC8vIFByZWNlZGVuY2Ugb2YgcnVsZXM6ICAgc3R5bGUgPiBjbGFzcyA+IGF0dHJpYnV0ZVxuICAgIGZhYnJpYy5wYXJzZUVsZW1lbnRzKGVsZW1lbnRzLCBmdW5jdGlvbihpbnN0YW5jZXMsIGVsZW1lbnRzKSB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soaW5zdGFuY2VzLCBvcHRpb25zLCBlbGVtZW50cywgZGVzY2VuZGFudHMpO1xuICAgICAgICBkZWxldGUgZmFicmljLmdyYWRpZW50RGVmc1tzdmdVaWRdO1xuICAgICAgICBkZWxldGUgZmFicmljLmNzc1J1bGVzW3N2Z1VpZF07XG4gICAgICAgIGRlbGV0ZSBmYWJyaWMuY2xpcFBhdGhzW3N2Z1VpZF07XG4gICAgICB9XG4gICAgfSwgY2xvbmUob3B0aW9ucyksIHJldml2ZXIsIHBhcnNpbmdPcHRpb25zKTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWN1cnNpdmVseVBhcnNlR3JhZGllbnRzWGxpbmsoZG9jLCBncmFkaWVudCkge1xuICAgIHZhciBncmFkaWVudHNBdHRycyA9IFsnZ3JhZGllbnRUcmFuc2Zvcm0nLCAneDEnLCAneDInLCAneTEnLCAneTInLCAnZ3JhZGllbnRVbml0cycsICdjeCcsICdjeScsICdyJywgJ2Z4JywgJ2Z5J10sXG4gICAgICAgIHhsaW5rQXR0ciA9ICd4bGluazpocmVmJyxcbiAgICAgICAgeExpbmsgPSBncmFkaWVudC5nZXRBdHRyaWJ1dGUoeGxpbmtBdHRyKS5zbGljZSgxKSxcbiAgICAgICAgcmVmZXJlbmNlZEdyYWRpZW50ID0gZWxlbWVudEJ5SWQoZG9jLCB4TGluayk7XG4gICAgaWYgKHJlZmVyZW5jZWRHcmFkaWVudCAmJiByZWZlcmVuY2VkR3JhZGllbnQuZ2V0QXR0cmlidXRlKHhsaW5rQXR0cikpIHtcbiAgICAgIHJlY3Vyc2l2ZWx5UGFyc2VHcmFkaWVudHNYbGluayhkb2MsIHJlZmVyZW5jZWRHcmFkaWVudCk7XG4gICAgfVxuICAgIGdyYWRpZW50c0F0dHJzLmZvckVhY2goZnVuY3Rpb24oYXR0cikge1xuICAgICAgaWYgKHJlZmVyZW5jZWRHcmFkaWVudCAmJiAhZ3JhZGllbnQuaGFzQXR0cmlidXRlKGF0dHIpICYmIHJlZmVyZW5jZWRHcmFkaWVudC5oYXNBdHRyaWJ1dGUoYXR0cikpIHtcbiAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlKGF0dHIsIHJlZmVyZW5jZWRHcmFkaWVudC5nZXRBdHRyaWJ1dGUoYXR0cikpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghZ3JhZGllbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVmZXJlbmNlQ2xvbmUgPSByZWZlcmVuY2VkR3JhZGllbnQuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgd2hpbGUgKHJlZmVyZW5jZUNsb25lLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZ3JhZGllbnQuYXBwZW5kQ2hpbGQocmVmZXJlbmNlQ2xvbmUuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIGdyYWRpZW50LnJlbW92ZUF0dHJpYnV0ZSh4bGlua0F0dHIpO1xuICB9XG5cbiAgdmFyIHJlRm9udERlY2xhcmF0aW9uID0gbmV3IFJlZ0V4cChcbiAgICAnKG5vcm1hbHxpdGFsaWMpP1xcXFxzKihub3JtYWx8c21hbGwtY2Fwcyk/XFxcXHMqJyArXG4gICAgJyhub3JtYWx8Ym9sZHxib2xkZXJ8bGlnaHRlcnwxMDB8MjAwfDMwMHw0MDB8NTAwfDYwMHw3MDB8ODAwfDkwMCk/XFxcXHMqKCcgK1xuICAgICAgZmFicmljLnJlTnVtICtcbiAgICAnKD86cHh8Y218bW18ZW18cHR8cGN8aW4pKikoPzpcXFxcLyhub3JtYWx8JyArIGZhYnJpYy5yZU51bSArICcpKT9cXFxccysoLiopJyk7XG5cbiAgZXh0ZW5kKGZhYnJpYywge1xuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIHNob3J0IGZvbnQgZGVjbGFyYXRpb24sIGJ1aWxkaW5nIGFkZGluZyBpdHMgcHJvcGVydGllcyB0byBhIHN0eWxlIG9iamVjdFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIGZvbnQgZGVjbGFyYXRpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb1N0eWxlIGRlZmluaXRpb25cbiAgICAgKi9cbiAgICBwYXJzZUZvbnREZWNsYXJhdGlvbjogZnVuY3Rpb24odmFsdWUsIG9TdHlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gdmFsdWUubWF0Y2gocmVGb250RGVjbGFyYXRpb24pO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBmb250U3R5bGUgPSBtYXRjaFsxXSxcbiAgICAgICAgICAvLyBmb250IHZhcmlhbnQgaXMgbm90IHVzZWRcbiAgICAgICAgICAvLyBmb250VmFyaWFudCA9IG1hdGNoWzJdLFxuICAgICAgICAgIGZvbnRXZWlnaHQgPSBtYXRjaFszXSxcbiAgICAgICAgICBmb250U2l6ZSA9IG1hdGNoWzRdLFxuICAgICAgICAgIGxpbmVIZWlnaHQgPSBtYXRjaFs1XSxcbiAgICAgICAgICBmb250RmFtaWx5ID0gbWF0Y2hbNl07XG5cbiAgICAgIGlmIChmb250U3R5bGUpIHtcbiAgICAgICAgb1N0eWxlLmZvbnRTdHlsZSA9IGZvbnRTdHlsZTtcbiAgICAgIH1cbiAgICAgIGlmIChmb250V2VpZ2h0KSB7XG4gICAgICAgIG9TdHlsZS5mb250V2VpZ2h0ID0gaXNOYU4ocGFyc2VGbG9hdChmb250V2VpZ2h0KSkgPyBmb250V2VpZ2h0IDogcGFyc2VGbG9hdChmb250V2VpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGlmIChmb250U2l6ZSkge1xuICAgICAgICBvU3R5bGUuZm9udFNpemUgPSBwYXJzZVVuaXQoZm9udFNpemUpO1xuICAgICAgfVxuICAgICAgaWYgKGZvbnRGYW1pbHkpIHtcbiAgICAgICAgb1N0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5O1xuICAgICAgfVxuICAgICAgaWYgKGxpbmVIZWlnaHQpIHtcbiAgICAgICAgb1N0eWxlLmxpbmVIZWlnaHQgPSBsaW5lSGVpZ2h0ID09PSAnbm9ybWFsJyA/IDEgOiBsaW5lSGVpZ2h0O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYW4gU1ZHIGRvY3VtZW50LCByZXR1cm5pbmcgYWxsIG9mIHRoZSBncmFkaWVudCBkZWNsYXJhdGlvbnMgZm91bmQgaW4gaXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgICAqIEBwYXJhbSB7U1ZHRG9jdW1lbnR9IGRvYyBTVkcgZG9jdW1lbnQgdG8gcGFyc2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEdyYWRpZW50IGRlZmluaXRpb25zOyBrZXkgY29ycmVzcG9uZHMgdG8gZWxlbWVudCBpZCwgdmFsdWUgLS0gdG8gZ3JhZGllbnQgZGVmaW5pdGlvbiBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0R3JhZGllbnREZWZzOiBmdW5jdGlvbihkb2MpIHtcbiAgICAgIHZhciB0YWdBcnJheSA9IFtcbiAgICAgICAgICAgICdsaW5lYXJHcmFkaWVudCcsXG4gICAgICAgICAgICAncmFkaWFsR3JhZGllbnQnLFxuICAgICAgICAgICAgJ3N2ZzpsaW5lYXJHcmFkaWVudCcsXG4gICAgICAgICAgICAnc3ZnOnJhZGlhbEdyYWRpZW50J10sXG4gICAgICAgICAgZWxMaXN0ID0gX2dldE11bHRpcGxlTm9kZXMoZG9jLCB0YWdBcnJheSksXG4gICAgICAgICAgZWwsIGogPSAwLCBncmFkaWVudERlZnMgPSB7IH07XG4gICAgICBqID0gZWxMaXN0Lmxlbmd0aDtcbiAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgZWwgPSBlbExpc3Rbal07XG4gICAgICAgIGlmIChlbC5nZXRBdHRyaWJ1dGUoJ3hsaW5rOmhyZWYnKSkge1xuICAgICAgICAgIHJlY3Vyc2l2ZWx5UGFyc2VHcmFkaWVudHNYbGluayhkb2MsIGVsKTtcbiAgICAgICAgfVxuICAgICAgICBncmFkaWVudERlZnNbZWwuZ2V0QXR0cmlidXRlKCdpZCcpXSA9IGVsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdyYWRpZW50RGVmcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3Qgb2YgYXR0cmlidXRlcycgbmFtZS92YWx1ZSwgZ2l2ZW4gZWxlbWVudCBhbmQgYW4gYXJyYXkgb2YgYXR0cmlidXRlIG5hbWVzO1xuICAgICAqIFBhcnNlcyBwYXJlbnQgXCJnXCIgbm9kZXMgcmVjdXJzaXZlbHkgdXB3YXJkcy5cbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXR0cmlidXRlcyBBcnJheSBvZiBhdHRyaWJ1dGVzIHRvIHBhcnNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgY29udGFpbmluZyBwYXJzZWQgYXR0cmlidXRlcycgbmFtZXMvdmFsdWVzXG4gICAgICovXG4gICAgcGFyc2VBdHRyaWJ1dGVzOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyaWJ1dGVzLCBzdmdVaWQpIHtcblxuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlLFxuICAgICAgICAgIHBhcmVudEF0dHJpYnV0ZXMgPSB7IH0sXG4gICAgICAgICAgZm9udFNpemUsIHBhcmVudEZvbnRTaXplO1xuXG4gICAgICBpZiAodHlwZW9mIHN2Z1VpZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3ZnVWlkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3N2Z1VpZCcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgdGhlcmUncyBhIHBhcmVudCBjb250YWluZXIgKGBnYCBvciBgYWAgb3IgYHN5bWJvbGAgbm9kZSksIHBhcnNlIGl0cyBhdHRyaWJ1dGVzIHJlY3Vyc2l2ZWx5IHVwd2FyZHNcbiAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgZmFicmljLnN2Z1ZhbGlkUGFyZW50c1JlZ0V4LnRlc3QoZWxlbWVudC5wYXJlbnROb2RlLm5vZGVOYW1lKSkge1xuICAgICAgICBwYXJlbnRBdHRyaWJ1dGVzID0gZmFicmljLnBhcnNlQXR0cmlidXRlcyhlbGVtZW50LnBhcmVudE5vZGUsIGF0dHJpYnV0ZXMsIHN2Z1VpZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvd25BdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5yZWR1Y2UoZnVuY3Rpb24obWVtbywgYXR0cikge1xuICAgICAgICB2YWx1ZSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgICBpZiAodmFsdWUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIG1lbW9bYXR0cl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHsgfSk7XG4gICAgICAvLyBhZGQgdmFsdWVzIHBhcnNlZCBmcm9tIHN0eWxlLCB3aGljaCB0YWtlIHByZWNlZGVuY2Ugb3ZlciBhdHRyaWJ1dGVzXG4gICAgICAvLyAoc2VlOiBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvc3R5bGluZy5odG1sI1VzaW5nUHJlc2VudGF0aW9uQXR0cmlidXRlcylcbiAgICAgIHZhciBjc3NBdHRycyA9IGV4dGVuZChcbiAgICAgICAgZ2V0R2xvYmFsU3R5bGVzRm9yRWxlbWVudChlbGVtZW50LCBzdmdVaWQpLFxuICAgICAgICBmYWJyaWMucGFyc2VTdHlsZUF0dHJpYnV0ZShlbGVtZW50KVxuICAgICAgKTtcbiAgICAgIG93bkF0dHJpYnV0ZXMgPSBleHRlbmQoXG4gICAgICAgIG93bkF0dHJpYnV0ZXMsXG4gICAgICAgIGNzc0F0dHJzXG4gICAgICApO1xuICAgICAgaWYgKGNzc0F0dHJzW2NQYXRoXSkge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShjUGF0aCwgY3NzQXR0cnNbY1BhdGhdKTtcbiAgICAgIH1cbiAgICAgIGZvbnRTaXplID0gcGFyZW50Rm9udFNpemUgPSBwYXJlbnRBdHRyaWJ1dGVzLmZvbnRTaXplIHx8IGZhYnJpYy5UZXh0LkRFRkFVTFRfU1ZHX0ZPTlRfU0laRTtcbiAgICAgIGlmIChvd25BdHRyaWJ1dGVzW2ZTaXplXSkge1xuICAgICAgICAvLyBsb29rcyBsaWtlIHRoZSBtaW5pbXVtIHNob3VsZCBiZSA5cHggd2hlbiBkZWFsaW5nIHdpdGggZW1zLiB0aGlzIGlzIHdoYXQgbG9va3MgbGlrZSBpbiBicm93c2Vycy5cbiAgICAgICAgb3duQXR0cmlidXRlc1tmU2l6ZV0gPSBmb250U2l6ZSA9IHBhcnNlVW5pdChvd25BdHRyaWJ1dGVzW2ZTaXplXSwgcGFyZW50Rm9udFNpemUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbm9ybWFsaXplZEF0dHIsIG5vcm1hbGl6ZWRWYWx1ZSwgbm9ybWFsaXplZFN0eWxlID0ge307XG4gICAgICBmb3IgKHZhciBhdHRyIGluIG93bkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgbm9ybWFsaXplZEF0dHIgPSBub3JtYWxpemVBdHRyKGF0dHIpO1xuICAgICAgICBub3JtYWxpemVkVmFsdWUgPSBub3JtYWxpemVWYWx1ZShub3JtYWxpemVkQXR0ciwgb3duQXR0cmlidXRlc1thdHRyXSwgcGFyZW50QXR0cmlidXRlcywgZm9udFNpemUpO1xuICAgICAgICBub3JtYWxpemVkU3R5bGVbbm9ybWFsaXplZEF0dHJdID0gbm9ybWFsaXplZFZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKG5vcm1hbGl6ZWRTdHlsZSAmJiBub3JtYWxpemVkU3R5bGUuZm9udCkge1xuICAgICAgICBmYWJyaWMucGFyc2VGb250RGVjbGFyYXRpb24obm9ybWFsaXplZFN0eWxlLmZvbnQsIG5vcm1hbGl6ZWRTdHlsZSk7XG4gICAgICB9XG4gICAgICB2YXIgbWVyZ2VkQXR0cnMgPSBleHRlbmQocGFyZW50QXR0cmlidXRlcywgbm9ybWFsaXplZFN0eWxlKTtcbiAgICAgIHJldHVybiBmYWJyaWMuc3ZnVmFsaWRQYXJlbnRzUmVnRXgudGVzdChlbGVtZW50Lm5vZGVOYW1lKSA/IG1lcmdlZEF0dHJzIDogX3NldFN0cm9rZUZpbGxPcGFjaXR5KG1lcmdlZEF0dHJzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiBzdmcgZWxlbWVudHMgdG8gY29ycmVzcG9uZGluZyBmYWJyaWMuKiBpbnN0YW5jZXNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGVsZW1lbnRzIEFycmF5IG9mIGVsZW1lbnRzIHRvIHBhcnNlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQmVpbmcgcGFzc2VkIGFuIGFycmF5IG9mIGZhYnJpYyBpbnN0YW5jZXMgKHRyYW5zZm9ybWVkIGZyb20gU1ZHIGVsZW1lbnRzKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2YgU1ZHIGVsZW1lbnRzLCBjYWxsZWQgYWZ0ZXIgZWFjaCBmYWJyaWMgb2JqZWN0IGNyZWF0ZWQuXG4gICAgICovXG4gICAgcGFyc2VFbGVtZW50czogZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrLCBvcHRpb25zLCByZXZpdmVyLCBwYXJzaW5nT3B0aW9ucykge1xuICAgICAgbmV3IGZhYnJpYy5FbGVtZW50c1BhcnNlcihlbGVtZW50cywgY2FsbGJhY2ssIG9wdGlvbnMsIHJldml2ZXIsIHBhcnNpbmdPcHRpb25zKS5wYXJzZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgXCJzdHlsZVwiIGF0dHJpYnV0ZSwgcmV0dW5pbmcgYW4gb2JqZWN0IHdpdGggdmFsdWVzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICAgKiBAcGFyYW0ge1NWR0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBwYXJzZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0cyB3aXRoIHZhbHVlcyBwYXJzZWQgZnJvbSBzdHlsZSBhdHRyaWJ1dGUgb2YgYW4gZWxlbWVudFxuICAgICAqL1xuICAgIHBhcnNlU3R5bGVBdHRyaWJ1dGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHZhciBvU3R5bGUgPSB7IH0sXG4gICAgICAgICAgc3R5bGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnc3R5bGUnKTtcblxuICAgICAgaWYgKCFzdHlsZSkge1xuICAgICAgICByZXR1cm4gb1N0eWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXJzZVN0eWxlU3RyaW5nKHN0eWxlLCBvU3R5bGUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHBhcnNlU3R5bGVPYmplY3Qoc3R5bGUsIG9TdHlsZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvU3R5bGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyBcInBvaW50c1wiIGF0dHJpYnV0ZSwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHZhbHVlc1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBvaW50cyBwb2ludHMgYXR0cmlidXRlIHN0cmluZ1xuICAgICAqIEByZXR1cm4ge0FycmF5fSBhcnJheSBvZiBwb2ludHNcbiAgICAgKi9cbiAgICBwYXJzZVBvaW50c0F0dHJpYnV0ZTogZnVuY3Rpb24ocG9pbnRzKSB7XG5cbiAgICAgIC8vIHBvaW50cyBhdHRyaWJ1dGUgaXMgcmVxdWlyZWQgYW5kIG11c3Qgbm90IGJlIGVtcHR5XG4gICAgICBpZiAoIXBvaW50cykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gcmVwbGFjZSBjb21tYXMgd2l0aCB3aGl0ZXNwYWNlIGFuZCByZW1vdmUgYm9va2VuZGluZyB3aGl0ZXNwYWNlXG4gICAgICBwb2ludHMgPSBwb2ludHMucmVwbGFjZSgvLC9nLCAnICcpLnRyaW0oKTtcblxuICAgICAgcG9pbnRzID0gcG9pbnRzLnNwbGl0KC9cXHMrLyk7XG4gICAgICB2YXIgcGFyc2VkUG9pbnRzID0gW10sIGksIGxlbjtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgICAgIHBhcnNlZFBvaW50cy5wdXNoKHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KHBvaW50c1tpXSksXG4gICAgICAgICAgeTogcGFyc2VGbG9hdChwb2ludHNbaSArIDFdKVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gb2RkIG51bWJlciBvZiBwb2ludHMgaXMgYW4gZXJyb3JcbiAgICAgIC8vIGlmIChwYXJzZWRQb2ludHMubGVuZ3RoICUgMiAhPT0gMCkge1xuICAgICAgLy8gICByZXR1cm4gbnVsbDtcbiAgICAgIC8vIH1cblxuICAgICAgcmV0dXJuIHBhcnNlZFBvaW50cztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBDU1MgcnVsZXMgZm9yIGEgZ2l2ZW4gU1ZHIGRvY3VtZW50XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICAgKiBAcGFyYW0ge1NWR0RvY3VtZW50fSBkb2MgU1ZHIGRvY3VtZW50IHRvIHBhcnNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBDU1MgcnVsZXMgb2YgdGhpcyBkb2N1bWVudFxuICAgICAqL1xuICAgIGdldENTU1J1bGVzOiBmdW5jdGlvbihkb2MpIHtcbiAgICAgIHZhciBzdHlsZXMgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3N0eWxlJyksIGksIGxlbixcbiAgICAgICAgICBhbGxSdWxlcyA9IHsgfSwgcnVsZXM7XG5cbiAgICAgIC8vIHZlcnkgY3J1ZGUgcGFyc2luZyBvZiBzdHlsZSBjb250ZW50c1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gc3R5bGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBzdHlsZUNvbnRlbnRzID0gc3R5bGVzW2ldLnRleHRDb250ZW50O1xuXG4gICAgICAgIC8vIHJlbW92ZSBjb21tZW50c1xuICAgICAgICBzdHlsZUNvbnRlbnRzID0gc3R5bGVDb250ZW50cy5yZXBsYWNlKC9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvL2csICcnKTtcbiAgICAgICAgaWYgKHN0eWxlQ29udGVudHMudHJpbSgpID09PSAnJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlY292ZXJzIGFsbCB0aGUgcnVsZSBpbiB0aGlzIGZvcm0gYGJvZHkgeyBzdHlsZSBjb2RlLi4uIH1gXG4gICAgICAgIC8vIHJ1bGVzID0gc3R5bGVDb250ZW50cy5tYXRjaCgvW157XSpcXHtbXFxzXFxTXSo/XFx9L2cpO1xuICAgICAgICBydWxlcyA9IHN0eWxlQ29udGVudHMuc3BsaXQoJ30nKTtcbiAgICAgICAgLy8gcmVtb3ZlIGVtcHR5IHJ1bGVzLlxuICAgICAgICBydWxlcyA9IHJ1bGVzLmZpbHRlcihmdW5jdGlvbihydWxlKSB7IHJldHVybiBydWxlLnRyaW0oKTsgfSk7XG4gICAgICAgIC8vIGF0IHRoaXMgcG9pbnQgd2UgaGF2ZSBob3BlZnVsbHkgYW4gYXJyYXkgb2YgcnVsZXMgYGJvZHkgeyBzdHlsZSBjb2RlLi4uIGBcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xuICAgICAgICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uKHJ1bGUpIHtcblxuICAgICAgICAgIHZhciBtYXRjaCA9IHJ1bGUuc3BsaXQoJ3snKSxcbiAgICAgICAgICAgICAgcnVsZU9iaiA9IHsgfSwgZGVjbGFyYXRpb24gPSBtYXRjaFsxXS50cmltKCksXG4gICAgICAgICAgICAgIHByb3BlcnR5VmFsdWVQYWlycyA9IGRlY2xhcmF0aW9uLnNwbGl0KCc7JykuZmlsdGVyKGZ1bmN0aW9uKHBhaXIpIHsgcmV0dXJuIHBhaXIudHJpbSgpOyB9KTtcblxuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHByb3BlcnR5VmFsdWVQYWlycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhaXIgPSBwcm9wZXJ0eVZhbHVlUGFpcnNbaV0uc3BsaXQoJzonKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHBhaXJbMF0udHJpbSgpLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gcGFpclsxXS50cmltKCk7XG4gICAgICAgICAgICBydWxlT2JqW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBydWxlID0gbWF0Y2hbMF0udHJpbSgpO1xuICAgICAgICAgIHJ1bGUuc3BsaXQoJywnKS5mb3JFYWNoKGZ1bmN0aW9uKF9ydWxlKSB7XG4gICAgICAgICAgICBfcnVsZSA9IF9ydWxlLnJlcGxhY2UoL15zdmcvaSwgJycpLnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChfcnVsZSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsbFJ1bGVzW19ydWxlXSkge1xuICAgICAgICAgICAgICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGFsbFJ1bGVzW19ydWxlXSwgcnVsZU9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgYWxsUnVsZXNbX3J1bGVdID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKHJ1bGVPYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhbGxSdWxlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGFrZXMgdXJsIGNvcnJlc3BvbmRpbmcgdG8gYW4gU1ZHIGRvY3VtZW50LCBhbmQgcGFyc2VzIGl0IGludG8gYSBzZXQgb2YgZmFicmljIG9iamVjdHMuXG4gICAgICogTm90ZSB0aGF0IFNWRyBpcyBmZXRjaGVkIHZpYSBYTUxIdHRwUmVxdWVzdCwgc28gaXQgbmVlZHMgdG8gY29uZm9ybSB0byBTT1AgKFNhbWUgT3JpZ2luIFBvbGljeSlcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIFNWRyBlbGVtZW50cywgY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT2JqZWN0IGNvbnRhaW5pbmcgb3B0aW9ucyBmb3IgcGFyc2luZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5jcm9zc09yaWdpbl0gY3Jvc3NPcmlnaW4gY3Jvc3NPcmlnaW4gc2V0dGluZyB0byB1c2UgZm9yIGV4dGVybmFsIHJlc291cmNlc1xuICAgICAqL1xuICAgIGxvYWRTVkdGcm9tVVJMOiBmdW5jdGlvbih1cmwsIGNhbGxiYWNrLCByZXZpdmVyLCBvcHRpb25zKSB7XG5cbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKC9eXFxuXFxzKi8sICcnKS50cmltKCk7XG4gICAgICBuZXcgZmFicmljLnV0aWwucmVxdWVzdCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIG9uQ29tcGxldGUocikge1xuXG4gICAgICAgIHZhciB4bWwgPSByLnJlc3BvbnNlWE1MO1xuICAgICAgICBpZiAoIXhtbCB8fCAheG1sLmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZhYnJpYy5wYXJzZVNWR0RvY3VtZW50KHhtbC5kb2N1bWVudEVsZW1lbnQsIGZ1bmN0aW9uIChyZXN1bHRzLCBfb3B0aW9ucywgZWxlbWVudHMsIGFsbEVsZW1lbnRzKSB7XG4gICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzdWx0cywgX29wdGlvbnMsIGVsZW1lbnRzLCBhbGxFbGVtZW50cyk7XG4gICAgICAgIH0sIHJldml2ZXIsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBzdHJpbmcgY29ycmVzcG9uZGluZyB0byBhbiBTVkcgZG9jdW1lbnQsIGFuZCBwYXJzZXMgaXQgaW50byBhIHNldCBvZiBmYWJyaWMgb2JqZWN0c1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWNcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3RyaW5nXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2YgU1ZHIGVsZW1lbnRzLCBjYWxsZWQgYWZ0ZXIgZWFjaCBmYWJyaWMgb2JqZWN0IGNyZWF0ZWQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPYmplY3QgY29udGFpbmluZyBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNyb3NzT3JpZ2luXSBjcm9zc09yaWdpbiBjcm9zc09yaWdpbiBzZXR0aW5nIHRvIHVzZSBmb3IgZXh0ZXJuYWwgcmVzb3VyY2VzXG4gICAgICovXG4gICAgbG9hZFNWR0Zyb21TdHJpbmc6IGZ1bmN0aW9uKHN0cmluZywgY2FsbGJhY2ssIHJldml2ZXIsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBwYXJzZXIgPSBuZXcgZmFicmljLndpbmRvdy5ET01QYXJzZXIoKSxcbiAgICAgICAgICBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHN0cmluZy50cmltKCksICd0ZXh0L3htbCcpO1xuICAgICAgZmFicmljLnBhcnNlU1ZHRG9jdW1lbnQoZG9jLmRvY3VtZW50RWxlbWVudCwgZnVuY3Rpb24gKHJlc3VsdHMsIF9vcHRpb25zLCBlbGVtZW50cywgYWxsRWxlbWVudHMpIHtcbiAgICAgICAgY2FsbGJhY2socmVzdWx0cywgX29wdGlvbnMsIGVsZW1lbnRzLCBhbGxFbGVtZW50cyk7XG4gICAgICB9LCByZXZpdmVyLCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuZmFicmljLkVsZW1lbnRzUGFyc2VyID0gZnVuY3Rpb24oZWxlbWVudHMsIGNhbGxiYWNrLCBvcHRpb25zLCByZXZpdmVyLCBwYXJzaW5nT3B0aW9ucywgZG9jKSB7XG4gIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLnJldml2ZXIgPSByZXZpdmVyO1xuICB0aGlzLnN2Z1VpZCA9IChvcHRpb25zICYmIG9wdGlvbnMuc3ZnVWlkKSB8fCAwO1xuICB0aGlzLnBhcnNpbmdPcHRpb25zID0gcGFyc2luZ09wdGlvbnM7XG4gIHRoaXMucmVnZXhVcmwgPSAvXnVybFxcKFsnXCJdPyMoW14nXCJdKylbJ1wiXT9cXCkvZztcbiAgdGhpcy5kb2MgPSBkb2M7XG59O1xuXG4oZnVuY3Rpb24ocHJvdG8pIHtcbiAgcHJvdG8ucGFyc2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmluc3RhbmNlcyA9IG5ldyBBcnJheSh0aGlzLmVsZW1lbnRzLmxlbmd0aCk7XG4gICAgdGhpcy5udW1FbGVtZW50cyA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuICAgIHRoaXMuY3JlYXRlT2JqZWN0cygpO1xuICB9O1xuXG4gIHByb3RvLmNyZWF0ZU9iamVjdHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHRoaXMuZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50LCBpKSB7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnc3ZnVWlkJywgX3RoaXMuc3ZnVWlkKTtcbiAgICAgIF90aGlzLmNyZWF0ZU9iamVjdChlbGVtZW50LCBpKTtcbiAgICB9KTtcbiAgfTtcblxuICBwcm90by5maW5kVGFnID0gZnVuY3Rpb24oZWwpIHtcbiAgICByZXR1cm4gZmFicmljW2ZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplKGVsLnRhZ05hbWUucmVwbGFjZSgnc3ZnOicsICcnKSldO1xuICB9O1xuXG4gIHByb3RvLmNyZWF0ZU9iamVjdCA9IGZ1bmN0aW9uKGVsLCBpbmRleCkge1xuICAgIHZhciBrbGFzcyA9IHRoaXMuZmluZFRhZyhlbCk7XG4gICAgaWYgKGtsYXNzICYmIGtsYXNzLmZyb21FbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICBrbGFzcy5mcm9tRWxlbWVudChlbCwgdGhpcy5jcmVhdGVDYWxsYmFjayhpbmRleCwgZWwpLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICBmYWJyaWMubG9nKGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5jaGVja0lmRG9uZSgpO1xuICAgIH1cbiAgfTtcblxuICBwcm90by5jcmVhdGVDYWxsYmFjayA9IGZ1bmN0aW9uKGluZGV4LCBlbCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIF9vcHRpb25zO1xuICAgICAgX3RoaXMucmVzb2x2ZUdyYWRpZW50KG9iaiwgZWwsICdmaWxsJyk7XG4gICAgICBfdGhpcy5yZXNvbHZlR3JhZGllbnQob2JqLCBlbCwgJ3N0cm9rZScpO1xuICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIGZhYnJpYy5JbWFnZSAmJiBvYmouX29yaWdpbmFsRWxlbWVudCkge1xuICAgICAgICBfb3B0aW9ucyA9IG9iai5wYXJzZVByZXNlcnZlQXNwZWN0UmF0aW9BdHRyaWJ1dGUoZWwpO1xuICAgICAgfVxuICAgICAgb2JqLl9yZW1vdmVUcmFuc2Zvcm1NYXRyaXgoX29wdGlvbnMpO1xuICAgICAgX3RoaXMucmVzb2x2ZUNsaXBQYXRoKG9iaiwgZWwpO1xuICAgICAgX3RoaXMucmV2aXZlciAmJiBfdGhpcy5yZXZpdmVyKGVsLCBvYmopO1xuICAgICAgX3RoaXMuaW5zdGFuY2VzW2luZGV4XSA9IG9iajtcbiAgICAgIF90aGlzLmNoZWNrSWZEb25lKCk7XG4gICAgfTtcbiAgfTtcblxuICBwcm90by5leHRyYWN0UHJvcGVydHlEZWZpbml0aW9uID0gZnVuY3Rpb24ob2JqLCBwcm9wZXJ0eSwgc3RvcmFnZSkge1xuICAgIHZhciB2YWx1ZSA9IG9ialtwcm9wZXJ0eV0sIHJlZ2V4ID0gdGhpcy5yZWdleFVybDtcbiAgICBpZiAoIXJlZ2V4LnRlc3QodmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlZ2V4Lmxhc3RJbmRleCA9IDA7XG4gICAgdmFyIGlkID0gcmVnZXguZXhlYyh2YWx1ZSlbMV07XG4gICAgcmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gZmFicmljW3N0b3JhZ2VdW3RoaXMuc3ZnVWlkXVtpZF07XG4gIH07XG5cbiAgcHJvdG8ucmVzb2x2ZUdyYWRpZW50ID0gZnVuY3Rpb24ob2JqLCBlbCwgcHJvcGVydHkpIHtcbiAgICB2YXIgZ3JhZGllbnREZWYgPSB0aGlzLmV4dHJhY3RQcm9wZXJ0eURlZmluaXRpb24ob2JqLCBwcm9wZXJ0eSwgJ2dyYWRpZW50RGVmcycpO1xuICAgIGlmIChncmFkaWVudERlZikge1xuICAgICAgdmFyIG9wYWNpdHlBdHRyID0gZWwuZ2V0QXR0cmlidXRlKHByb3BlcnR5ICsgJy1vcGFjaXR5Jyk7XG4gICAgICB2YXIgZ3JhZGllbnQgPSBmYWJyaWMuR3JhZGllbnQuZnJvbUVsZW1lbnQoZ3JhZGllbnREZWYsIG9iaiwgb3BhY2l0eUF0dHIsIHRoaXMub3B0aW9ucyk7XG4gICAgICBvYmouc2V0KHByb3BlcnR5LCBncmFkaWVudCk7XG4gICAgfVxuICB9O1xuXG4gIHByb3RvLmNyZWF0ZUNsaXBQYXRoQ2FsbGJhY2sgPSBmdW5jdGlvbihvYmosIGNvbnRhaW5lcikge1xuICAgIHJldHVybiBmdW5jdGlvbihfbmV3T2JqKSB7XG4gICAgICBfbmV3T2JqLl9yZW1vdmVUcmFuc2Zvcm1NYXRyaXgoKTtcbiAgICAgIF9uZXdPYmouZmlsbFJ1bGUgPSBfbmV3T2JqLmNsaXBSdWxlO1xuICAgICAgY29udGFpbmVyLnB1c2goX25ld09iaik7XG4gICAgfTtcbiAgfTtcblxuICBwcm90by5yZXNvbHZlQ2xpcFBhdGggPSBmdW5jdGlvbihvYmosIHVzaW5nRWxlbWVudCkge1xuICAgIHZhciBjbGlwUGF0aCA9IHRoaXMuZXh0cmFjdFByb3BlcnR5RGVmaW5pdGlvbihvYmosICdjbGlwUGF0aCcsICdjbGlwUGF0aHMnKSxcbiAgICAgICAgZWxlbWVudCwga2xhc3MsIG9ialRyYW5zZm9ybUludiwgY29udGFpbmVyLCBnVHJhbnNmb3JtLCBvcHRpb25zO1xuICAgIGlmIChjbGlwUGF0aCkge1xuICAgICAgY29udGFpbmVyID0gW107XG4gICAgICBvYmpUcmFuc2Zvcm1JbnYgPSBmYWJyaWMudXRpbC5pbnZlcnRUcmFuc2Zvcm0ob2JqLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKSk7XG4gICAgICAvLyBtb3ZlIHRoZSBjbGlwUGF0aCB0YWcgYXMgc2libGluZyB0byB0aGUgcmVhbCBlbGVtZW50IHRoYXQgaXMgdXNpbmcgaXRcbiAgICAgIHZhciBjbGlwUGF0aFRhZyA9IGNsaXBQYXRoWzBdLnBhcmVudE5vZGU7XG4gICAgICB2YXIgY2xpcFBhdGhPd25lciA9IHVzaW5nRWxlbWVudDtcbiAgICAgIHdoaWxlIChjbGlwUGF0aE93bmVyLnBhcmVudE5vZGUgJiYgY2xpcFBhdGhPd25lci5nZXRBdHRyaWJ1dGUoJ2NsaXAtcGF0aCcpICE9PSBvYmouY2xpcFBhdGgpIHtcbiAgICAgICAgY2xpcFBhdGhPd25lciA9IGNsaXBQYXRoT3duZXIucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIGNsaXBQYXRoT3duZXIucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChjbGlwUGF0aFRhZyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsaXBQYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGVsZW1lbnQgPSBjbGlwUGF0aFtpXTtcbiAgICAgICAga2xhc3MgPSB0aGlzLmZpbmRUYWcoZWxlbWVudCk7XG4gICAgICAgIGtsYXNzLmZyb21FbGVtZW50KFxuICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgdGhpcy5jcmVhdGVDbGlwUGF0aENhbGxiYWNrKG9iaiwgY29udGFpbmVyKSxcbiAgICAgICAgICB0aGlzLm9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250YWluZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGNsaXBQYXRoID0gY29udGFpbmVyWzBdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNsaXBQYXRoID0gbmV3IGZhYnJpYy5Hcm91cChjb250YWluZXIpO1xuICAgICAgfVxuICAgICAgZ1RyYW5zZm9ybSA9IGZhYnJpYy51dGlsLm11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXMoXG4gICAgICAgIG9ialRyYW5zZm9ybUludixcbiAgICAgICAgY2xpcFBhdGguY2FsY1RyYW5zZm9ybU1hdHJpeCgpXG4gICAgICApO1xuICAgICAgaWYgKGNsaXBQYXRoLmNsaXBQYXRoKSB7XG4gICAgICAgIHRoaXMucmVzb2x2ZUNsaXBQYXRoKGNsaXBQYXRoLCBjbGlwUGF0aE93bmVyKTtcbiAgICAgIH1cbiAgICAgIHZhciBvcHRpb25zID0gZmFicmljLnV0aWwucXJEZWNvbXBvc2UoZ1RyYW5zZm9ybSk7XG4gICAgICBjbGlwUGF0aC5mbGlwWCA9IGZhbHNlO1xuICAgICAgY2xpcFBhdGguZmxpcFkgPSBmYWxzZTtcbiAgICAgIGNsaXBQYXRoLnNldCgnc2NhbGVYJywgb3B0aW9ucy5zY2FsZVgpO1xuICAgICAgY2xpcFBhdGguc2V0KCdzY2FsZVknLCBvcHRpb25zLnNjYWxlWSk7XG4gICAgICBjbGlwUGF0aC5hbmdsZSA9IG9wdGlvbnMuYW5nbGU7XG4gICAgICBjbGlwUGF0aC5za2V3WCA9IG9wdGlvbnMuc2tld1g7XG4gICAgICBjbGlwUGF0aC5za2V3WSA9IDA7XG4gICAgICBjbGlwUGF0aC5zZXRQb3NpdGlvbkJ5T3JpZ2luKHsgeDogb3B0aW9ucy50cmFuc2xhdGVYLCB5OiBvcHRpb25zLnRyYW5zbGF0ZVkgfSwgJ2NlbnRlcicsICdjZW50ZXInKTtcbiAgICAgIG9iai5jbGlwUGF0aCA9IGNsaXBQYXRoO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGlmIGNsaXAtcGF0aCBkb2VzIG5vdCByZXNvbHZlIHRvIGFueSBlbGVtZW50LCBkZWxldGUgdGhlIHByb3BlcnR5LlxuICAgICAgZGVsZXRlIG9iai5jbGlwUGF0aDtcbiAgICB9XG4gIH07XG5cbiAgcHJvdG8uY2hlY2tJZkRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoLS10aGlzLm51bUVsZW1lbnRzID09PSAwKSB7XG4gICAgICB0aGlzLmluc3RhbmNlcyA9IHRoaXMuaW5zdGFuY2VzLmZpbHRlcihmdW5jdGlvbihlbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCwgZXFlcWVxXG4gICAgICAgIHJldHVybiBlbCAhPSBudWxsO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNhbGxiYWNrKHRoaXMuaW5zdGFuY2VzLCB0aGlzLmVsZW1lbnRzKTtcbiAgICB9XG4gIH07XG59KShmYWJyaWMuRWxlbWVudHNQYXJzZXIucHJvdG90eXBlKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qIEFkYXB0YXRpb24gb2Ygd29yayBvZiBLZXZpbiBMaW5kc2V5IChrZXZpbkBrZXZsaW5kZXYuY29tKSAqL1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KTtcblxuICBpZiAoZmFicmljLlBvaW50KSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5Qb2ludCBpcyBhbHJlYWR5IGRlZmluZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBmYWJyaWMuUG9pbnQgPSBQb2ludDtcblxuICAvKipcbiAgICogUG9pbnQgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5Qb2ludFxuICAgKiBAbWVtYmVyT2YgZmFicmljXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge051bWJlcn0geFxuICAgKiBAcGFyYW0ge051bWJlcn0geVxuICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IHRoaXNBcmdcbiAgICovXG4gIGZ1bmN0aW9uIFBvaW50KHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cblxuICBQb2ludC5wcm90b3R5cGUgPSAvKiogQGxlbmRzIGZhYnJpYy5Qb2ludC5wcm90b3R5cGUgKi8ge1xuXG4gICAgdHlwZTogJ3BvaW50JyxcblxuICAgIGNvbnN0cnVjdG9yOiBQb2ludCxcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYW5vdGhlciBwb2ludCB0byB0aGlzIG9uZSBhbmQgcmV0dXJucyBhbm90aGVyIG9uZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSB0aGF0XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSBuZXcgUG9pbnQgaW5zdGFuY2Ugd2l0aCBhZGRlZCB2YWx1ZXNcbiAgICAgKi9cbiAgICBhZGQ6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHRoYXQueCwgdGhpcy55ICsgdGhhdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbm90aGVyIHBvaW50IHRvIHRoaXMgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgYWRkRXF1YWxzOiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgdGhpcy54ICs9IHRoYXQueDtcbiAgICAgIHRoaXMueSArPSB0aGF0Lnk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyB2YWx1ZSB0byB0aGlzIHBvaW50IGFuZCByZXR1cm5zIGEgbmV3IG9uZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IG5ldyBQb2ludCB3aXRoIGFkZGVkIHZhbHVlXG4gICAgICovXG4gICAgc2NhbGFyQWRkOiBmdW5jdGlvbiAoc2NhbGFyKSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCArIHNjYWxhciwgdGhpcy55ICsgc2NhbGFyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQWRkcyB2YWx1ZSB0byB0aGlzIHBvaW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxhclxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzY2FsYXJBZGRFcXVhbHM6IGZ1bmN0aW9uIChzY2FsYXIpIHtcbiAgICAgIHRoaXMueCArPSBzY2FsYXI7XG4gICAgICB0aGlzLnkgKz0gc2NhbGFyO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyBhbm90aGVyIHBvaW50IGZyb20gdGhpcyBwb2ludCBhbmQgcmV0dXJucyBhIG5ldyBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gbmV3IFBvaW50IG9iamVjdCB3aXRoIHN1YnRyYWN0ZWQgdmFsdWVzXG4gICAgICovXG4gICAgc3VidHJhY3Q6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAtIHRoYXQueCwgdGhpcy55IC0gdGhhdC55KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3RzIGFub3RoZXIgcG9pbnQgZnJvbSB0aGlzIHBvaW50XG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc3VidHJhY3RFcXVhbHM6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICB0aGlzLnggLT0gdGhhdC54O1xuICAgICAgdGhpcy55IC09IHRoYXQueTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdmFsdWUgZnJvbSB0aGlzIHBvaW50IGFuZCByZXR1cm5zIGEgbmV3IG9uZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgc2NhbGFyU3VidHJhY3Q6IGZ1bmN0aW9uIChzY2FsYXIpIHtcbiAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54IC0gc2NhbGFyLCB0aGlzLnkgLSBzY2FsYXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdmFsdWUgZnJvbSB0aGlzIHBvaW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxhclxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzY2FsYXJTdWJ0cmFjdEVxdWFsczogZnVuY3Rpb24gKHNjYWxhcikge1xuICAgICAgdGhpcy54IC09IHNjYWxhcjtcbiAgICAgIHRoaXMueSAtPSBzY2FsYXI7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGlzIHBvaW50IGJ5IGEgdmFsdWUgYW5kIHJldHVybnMgYSBuZXcgb25lXG4gICAgICogVE9ETzogcmVuYW1lIGluIHNjYWxhck11bHRpcGx5IGluIDIuMFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgbXVsdGlwbHk6IGZ1bmN0aW9uIChzY2FsYXIpIHtcbiAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICogc2NhbGFyLCB0aGlzLnkgKiBzY2FsYXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBsaWVzIHRoaXMgcG9pbnQgYnkgYSB2YWx1ZVxuICAgICAqIFRPRE86IHJlbmFtZSBpbiBzY2FsYXJNdWx0aXBseUVxdWFscyBpbiAyLjBcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIG11bHRpcGx5RXF1YWxzOiBmdW5jdGlvbiAoc2NhbGFyKSB7XG4gICAgICB0aGlzLnggKj0gc2NhbGFyO1xuICAgICAgdGhpcy55ICo9IHNjYWxhcjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEaXZpZGVzIHRoaXMgcG9pbnQgYnkgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIG5ldyBvbmVcbiAgICAgKiBUT0RPOiByZW5hbWUgaW4gc2NhbGFyRGl2aWRlIGluIDIuMFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgZGl2aWRlOiBmdW5jdGlvbiAoc2NhbGFyKSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMueCAvIHNjYWxhciwgdGhpcy55IC8gc2NhbGFyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB0aGlzIHBvaW50IGJ5IGEgdmFsdWVcbiAgICAgKiBUT0RPOiByZW5hbWUgaW4gc2NhbGFyRGl2aWRlRXF1YWxzIGluIDIuMFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZGl2aWRlRXF1YWxzOiBmdW5jdGlvbiAoc2NhbGFyKSB7XG4gICAgICB0aGlzLnggLz0gc2NhbGFyO1xuICAgICAgdGhpcy55IC89IHNjYWxhcjtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBwb2ludCBpcyBlcXVhbCB0byBhbm90aGVyIG9uZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSB0aGF0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBlcTogZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgIHJldHVybiAodGhpcy54ID09PSB0aGF0LnggJiYgdGhpcy55ID09PSB0aGF0LnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBwb2ludCBpcyBsZXNzIHRoYW4gYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgbHQ6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gKHRoaXMueCA8IHRoYXQueCAmJiB0aGlzLnkgPCB0aGF0LnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBwb2ludCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgbHRlOiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgcmV0dXJuICh0aGlzLnggPD0gdGhhdC54ICYmIHRoaXMueSA8PSB0aGF0LnkpO1xuICAgIH0sXG5cbiAgICAvKipcblxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHBvaW50IGlzIGdyZWF0ZXIgYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgZ3Q6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gKHRoaXMueCA+IHRoYXQueCAmJiB0aGlzLnkgPiB0aGF0LnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBwb2ludCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgZ3RlOiBmdW5jdGlvbiAodGhhdCkge1xuICAgICAgcmV0dXJuICh0aGlzLnggPj0gdGhhdC54ICYmIHRoaXMueSA+PSB0aGF0LnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG5ldyBwb2ludCB3aGljaCBpcyB0aGUgcmVzdWx0IG9mIGxpbmVhciBpbnRlcnBvbGF0aW9uIHdpdGggdGhpcyBvbmUgYW5kIGFub3RoZXIgb25lXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHRoYXRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdCAsIHBvc2l0aW9uIG9mIGludGVycG9sYXRpb24sIGJldHdlZW4gMCBhbmQgMSBkZWZhdWx0IDAuNVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICBsZXJwOiBmdW5jdGlvbiAodGhhdCwgdCkge1xuICAgICAgaWYgKHR5cGVvZiB0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0ID0gMC41O1xuICAgICAgfVxuICAgICAgdCA9IE1hdGgubWF4KE1hdGgubWluKDEsIHQpLCAwKTtcbiAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54ICsgKHRoYXQueCAtIHRoaXMueCkgKiB0LCB0aGlzLnkgKyAodGhhdC55IC0gdGhpcy55KSAqIHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGRpc3RhbmNlIGZyb20gdGhpcyBwb2ludCBhbmQgYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBkaXN0YW5jZUZyb206IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICB2YXIgZHggPSB0aGlzLnggLSB0aGF0LngsXG4gICAgICAgICAgZHkgPSB0aGlzLnkgLSB0aGF0Lnk7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcG9pbnQgYmV0d2VlbiB0aGlzIHBvaW50IGFuZCBhbm90aGVyIG9uZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSB0aGF0XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIG1pZFBvaW50RnJvbTogZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlcnAodGhhdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgcG9pbnQgd2hpY2ggaXMgdGhlIG1pbiBvZiB0aGlzIGFuZCBhbm90aGVyIG9uZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSB0aGF0XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIG1pbjogZnVuY3Rpb24gKHRoYXQpIHtcbiAgICAgIHJldHVybiBuZXcgUG9pbnQoTWF0aC5taW4odGhpcy54LCB0aGF0LngpLCBNYXRoLm1pbih0aGlzLnksIHRoYXQueSkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHBvaW50IHdoaWNoIGlzIHRoZSBtYXggb2YgdGhpcyBhbmQgYW5vdGhlciBvbmVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICBtYXg6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICByZXR1cm4gbmV3IFBvaW50KE1hdGgubWF4KHRoaXMueCwgdGhhdC54KSwgTWF0aC5tYXgodGhpcy55LCB0aGF0LnkpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwb2ludFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMueCArICcsJyArIHRoaXMueTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB4L3kgb2YgdGhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0WFk6IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICB0aGlzLnggPSB4O1xuICAgICAgdGhpcy55ID0geTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHggb2YgdGhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldFg6IGZ1bmN0aW9uICh4KSB7XG4gICAgICB0aGlzLnggPSB4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgeSBvZiB0aGlzIHBvaW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0WTogZnVuY3Rpb24gKHkpIHtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB4L3kgb2YgdGhpcyBwb2ludCBmcm9tIGFub3RoZXIgcG9pbnRcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZXRGcm9tUG9pbnQ6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICB0aGlzLnggPSB0aGF0Lng7XG4gICAgICB0aGlzLnkgPSB0aGF0Lnk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU3dhcHMgeC95IG9mIHRoaXMgcG9pbnQgYW5kIGFub3RoZXIgcG9pbnRcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gdGhhdFxuICAgICAqL1xuICAgIHN3YXA6IGZ1bmN0aW9uICh0aGF0KSB7XG4gICAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgICB5ID0gdGhpcy55O1xuICAgICAgdGhpcy54ID0gdGhhdC54O1xuICAgICAgdGhpcy55ID0gdGhhdC55O1xuICAgICAgdGhhdC54ID0geDtcbiAgICAgIHRoYXQueSA9IHk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBhIGNsb25lZCBpbnN0YW5jZSBvZiB0aGUgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLyogQWRhcHRhdGlvbiBvZiB3b3JrIG9mIEtldmluIExpbmRzZXkgKGtldmluQGtldmxpbmRldi5jb20pICovXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KTtcblxuICBpZiAoZmFicmljLkludGVyc2VjdGlvbikge1xuICAgIGZhYnJpYy53YXJuKCdmYWJyaWMuSW50ZXJzZWN0aW9uIGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcnNlY3Rpb24gY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbnRlcnNlY3Rpb25cbiAgICogQG1lbWJlck9mIGZhYnJpY1xuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGZ1bmN0aW9uIEludGVyc2VjdGlvbihzdGF0dXMpIHtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICB9XG5cbiAgZmFicmljLkludGVyc2VjdGlvbiA9IEludGVyc2VjdGlvbjtcblxuICBmYWJyaWMuSW50ZXJzZWN0aW9uLnByb3RvdHlwZSA9IC8qKiBAbGVuZHMgZmFicmljLkludGVyc2VjdGlvbi5wcm90b3R5cGUgKi8ge1xuXG4gICAgY29uc3RydWN0b3I6IEludGVyc2VjdGlvbixcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgYSBwb2ludCB0byBpbnRlcnNlY3Rpb25cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuSW50ZXJzZWN0aW9ufSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGFwcGVuZFBvaW50OiBmdW5jdGlvbiAocG9pbnQpIHtcbiAgICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGVuZHMgcG9pbnRzIHRvIGludGVyc2VjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50c1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5JbnRlcnNlY3Rpb259IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgYXBwZW5kUG9pbnRzOiBmdW5jdGlvbiAocG9pbnRzKSB7XG4gICAgICB0aGlzLnBvaW50cyA9IHRoaXMucG9pbnRzLmNvbmNhdChwb2ludHMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgb25lIGxpbmUgaW50ZXJzZWN0cyBhbm90aGVyXG4gICAqIFRPRE86IHJlbmFtZSBpbiBpbnRlcnNlY3RTZWdtZW50U2VnbWVudFxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBhMVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gYTJcbiAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGIxXG4gICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBiMlxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW50ZXJzZWN0aW9ufVxuICAgKi9cbiAgZmFicmljLkludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lTGluZSA9IGZ1bmN0aW9uIChhMSwgYTIsIGIxLCBiMikge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIHVhVCA9IChiMi54IC0gYjEueCkgKiAoYTEueSAtIGIxLnkpIC0gKGIyLnkgLSBiMS55KSAqIChhMS54IC0gYjEueCksXG4gICAgICAgIHViVCA9IChhMi54IC0gYTEueCkgKiAoYTEueSAtIGIxLnkpIC0gKGEyLnkgLSBhMS55KSAqIChhMS54IC0gYjEueCksXG4gICAgICAgIHVCID0gKGIyLnkgLSBiMS55KSAqIChhMi54IC0gYTEueCkgLSAoYjIueCAtIGIxLngpICogKGEyLnkgLSBhMS55KTtcbiAgICBpZiAodUIgIT09IDApIHtcbiAgICAgIHZhciB1YSA9IHVhVCAvIHVCLFxuICAgICAgICAgIHViID0gdWJUIC8gdUI7XG4gICAgICBpZiAoMCA8PSB1YSAmJiB1YSA8PSAxICYmIDAgPD0gdWIgJiYgdWIgPD0gMSkge1xuICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKCdJbnRlcnNlY3Rpb24nKTtcbiAgICAgICAgcmVzdWx0LmFwcGVuZFBvaW50KG5ldyBmYWJyaWMuUG9pbnQoYTEueCArIHVhICogKGEyLnggLSBhMS54KSwgYTEueSArIHVhICogKGEyLnkgLSBhMS55KSkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBpZiAodWFUID09PSAwIHx8IHViVCA9PT0gMCkge1xuICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKCdDb2luY2lkZW50Jyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbignUGFyYWxsZWwnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGxpbmUgaW50ZXJzZWN0cyBwb2x5Z29uXG4gICAqIFRPRE86IHJlbmFtZSBpbiBpbnRlcnNlY3RTZWdtZW50UG9seWdvblxuICAgKiBmaXggZGV0ZWN0aW9uIG9mIGNvaW5jaWRlbnRcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gYTFcbiAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGEyXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50c1xuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW50ZXJzZWN0aW9ufVxuICAgKi9cbiAgZmFicmljLkludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lUG9seWdvbiA9IGZ1bmN0aW9uKGExLCBhMiwgcG9pbnRzKSB7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBJbnRlcnNlY3Rpb24oKSxcbiAgICAgICAgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aCxcbiAgICAgICAgYjEsIGIyLCBpbnRlciwgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYjEgPSBwb2ludHNbaV07XG4gICAgICBiMiA9IHBvaW50c1soaSArIDEpICUgbGVuZ3RoXTtcbiAgICAgIGludGVyID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVMaW5lKGExLCBhMiwgYjEsIGIyKTtcblxuICAgICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlci5wb2ludHMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LnBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHQuc3RhdHVzID0gJ0ludGVyc2VjdGlvbic7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBwb2x5Z29uIGludGVyc2VjdHMgYW5vdGhlciBwb2x5Z29uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzMVxuICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHMyXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbnRlcnNlY3Rpb259XG4gICAqL1xuICBmYWJyaWMuSW50ZXJzZWN0aW9uLmludGVyc2VjdFBvbHlnb25Qb2x5Z29uID0gZnVuY3Rpb24gKHBvaW50czEsIHBvaW50czIpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEludGVyc2VjdGlvbigpLFxuICAgICAgICBsZW5ndGggPSBwb2ludHMxLmxlbmd0aCwgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGExID0gcG9pbnRzMVtpXSxcbiAgICAgICAgICBhMiA9IHBvaW50czFbKGkgKyAxKSAlIGxlbmd0aF0sXG4gICAgICAgICAgaW50ZXIgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24oYTEsIGEyLCBwb2ludHMyKTtcblxuICAgICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlci5wb2ludHMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LnBvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXN1bHQuc3RhdHVzID0gJ0ludGVyc2VjdGlvbic7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBwb2x5Z29uIGludGVyc2VjdHMgcmVjdGFuZ2xlXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzXG4gICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSByMVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcjJcbiAgICogQHJldHVybiB7ZmFicmljLkludGVyc2VjdGlvbn1cbiAgICovXG4gIGZhYnJpYy5JbnRlcnNlY3Rpb24uaW50ZXJzZWN0UG9seWdvblJlY3RhbmdsZSA9IGZ1bmN0aW9uIChwb2ludHMsIHIxLCByMikge1xuICAgIHZhciBtaW4gPSByMS5taW4ocjIpLFxuICAgICAgICBtYXggPSByMS5tYXgocjIpLFxuICAgICAgICB0b3BSaWdodCA9IG5ldyBmYWJyaWMuUG9pbnQobWF4LngsIG1pbi55KSxcbiAgICAgICAgYm90dG9tTGVmdCA9IG5ldyBmYWJyaWMuUG9pbnQobWluLngsIG1heC55KSxcbiAgICAgICAgaW50ZXIxID0gSW50ZXJzZWN0aW9uLmludGVyc2VjdExpbmVQb2x5Z29uKG1pbiwgdG9wUmlnaHQsIHBvaW50cyksXG4gICAgICAgIGludGVyMiA9IEludGVyc2VjdGlvbi5pbnRlcnNlY3RMaW5lUG9seWdvbih0b3BSaWdodCwgbWF4LCBwb2ludHMpLFxuICAgICAgICBpbnRlcjMgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24obWF4LCBib3R0b21MZWZ0LCBwb2ludHMpLFxuICAgICAgICBpbnRlcjQgPSBJbnRlcnNlY3Rpb24uaW50ZXJzZWN0TGluZVBvbHlnb24oYm90dG9tTGVmdCwgbWluLCBwb2ludHMpLFxuICAgICAgICByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9uKCk7XG5cbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyMS5wb2ludHMpO1xuICAgIHJlc3VsdC5hcHBlbmRQb2ludHMoaW50ZXIyLnBvaW50cyk7XG4gICAgcmVzdWx0LmFwcGVuZFBvaW50cyhpbnRlcjMucG9pbnRzKTtcbiAgICByZXN1bHQuYXBwZW5kUG9pbnRzKGludGVyNC5wb2ludHMpO1xuXG4gICAgaWYgKHJlc3VsdC5wb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0LnN0YXR1cyA9ICdJbnRlcnNlY3Rpb24nO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSk7XG5cbiAgaWYgKGZhYnJpYy5Db2xvcikge1xuICAgIGZhYnJpYy53YXJuKCdmYWJyaWMuQ29sb3IgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb2xvciBjbGFzc1xuICAgKiBUaGUgcHVycG9zZSBvZiB7QGxpbmsgZmFicmljLkNvbG9yfSBpcyB0byBhYnN0cmFjdCBhbmQgZW5jYXBzdWxhdGUgY29tbW9uIGNvbG9yIG9wZXJhdGlvbnM7XG4gICAqIHtAbGluayBmYWJyaWMuQ29sb3J9IGlzIGEgY29uc3RydWN0b3IgYW5kIGNyZWF0ZXMgaW5zdGFuY2VzIG9mIHtAbGluayBmYWJyaWMuQ29sb3J9IG9iamVjdHMuXG4gICAqXG4gICAqIEBjbGFzcyBmYWJyaWMuQ29sb3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbG9yIG9wdGlvbmFsIGluIGhleCBvciByZ2IoYSkgb3IgaHNsIGZvcm1hdCBvciBmcm9tIGtub3duIGNvbG9yIGxpc3RcbiAgICogQHJldHVybiB7ZmFicmljLkNvbG9yfSB0aGlzQXJnXG4gICAqIEB0dXRvcmlhbCB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mYWJyaWMtaW50cm8tcGFydC0yLyNjb2xvcnN9XG4gICAqL1xuICBmdW5jdGlvbiBDb2xvcihjb2xvcikge1xuICAgIGlmICghY29sb3IpIHtcbiAgICAgIHRoaXMuc2V0U291cmNlKFswLCAwLCAwLCAxXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5fdHJ5UGFyc2luZ0NvbG9yKGNvbG9yKTtcbiAgICB9XG4gIH1cblxuICBmYWJyaWMuQ29sb3IgPSBDb2xvcjtcblxuICBmYWJyaWMuQ29sb3IucHJvdG90eXBlID0gLyoqIEBsZW5kcyBmYWJyaWMuQ29sb3IucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd8QXJyYXl9IGNvbG9yIENvbG9yIHZhbHVlIHRvIHBhcnNlXG4gICAgICovXG4gICAgX3RyeVBhcnNpbmdDb2xvcjogZnVuY3Rpb24oY29sb3IpIHtcbiAgICAgIHZhciBzb3VyY2U7XG5cbiAgICAgIGlmIChjb2xvciBpbiBDb2xvci5jb2xvck5hbWVNYXApIHtcbiAgICAgICAgY29sb3IgPSBDb2xvci5jb2xvck5hbWVNYXBbY29sb3JdO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29sb3IgPT09ICd0cmFuc3BhcmVudCcpIHtcbiAgICAgICAgc291cmNlID0gWzI1NSwgMjU1LCAyNTUsIDBdO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBzb3VyY2UgPSBDb2xvci5zb3VyY2VGcm9tSGV4KGNvbG9yKTtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHNvdXJjZSA9IENvbG9yLnNvdXJjZUZyb21SZ2IoY29sb3IpO1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgc291cmNlID0gQ29sb3Iuc291cmNlRnJvbUhzbChjb2xvcik7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAvL2lmIGNvbG9yIGlzIG5vdCByZWNvZ25pemUgbGV0J3MgbWFrZSBibGFjayBhcyBjYW52YXMgZG9lc1xuICAgICAgICBzb3VyY2UgPSBbMCwgMCwgMCwgMV07XG4gICAgICB9XG4gICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgIHRoaXMuc2V0U291cmNlKHNvdXJjZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFkYXB0ZWQgZnJvbSA8YSBocmVmPVwiaHR0cHM6Ly9yYXdnaXRodWIuY29tL21qaWphY2tzb24vbWppamFja3Nvbi5naXRodWIuY29tL21hc3Rlci8yMDA4LzAyL3JnYi10by1oc2wtYW5kLXJnYi10by1oc3YtY29sb3ItbW9kZWwtY29udmVyc2lvbi1hbGdvcml0aG1zLWluLWphdmFzY3JpcHQuaHRtbFwiPmh0dHBzOi8vZ2l0aHViLmNvbS9tamlqYWNrc29uPC9hPlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHIgUmVkIGNvbG9yIHZhbHVlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGcgR3JlZW4gY29sb3IgdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYiBCbHVlIGNvbG9yIHZhbHVlXG4gICAgICogQHJldHVybiB7QXJyYXl9IEhzbCBjb2xvclxuICAgICAqL1xuICAgIF9yZ2JUb0hzbDogZnVuY3Rpb24ociwgZywgYikge1xuICAgICAgciAvPSAyNTU7IGcgLz0gMjU1OyBiIC89IDI1NTtcblxuICAgICAgdmFyIGgsIHMsIGwsXG4gICAgICAgICAgbWF4ID0gZmFicmljLnV0aWwuYXJyYXkubWF4KFtyLCBnLCBiXSksXG4gICAgICAgICAgbWluID0gZmFicmljLnV0aWwuYXJyYXkubWluKFtyLCBnLCBiXSk7XG5cbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBoID0gcyA9IDA7IC8vIGFjaHJvbWF0aWNcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgZzpcbiAgICAgICAgICAgIGggPSAoYiAtIHIpIC8gZCArIDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIGI6XG4gICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaCAvPSA2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW1xuICAgICAgICBNYXRoLnJvdW5kKGggKiAzNjApLFxuICAgICAgICBNYXRoLnJvdW5kKHMgKiAxMDApLFxuICAgICAgICBNYXRoLnJvdW5kKGwgKiAxMDApXG4gICAgICBdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHNvdXJjZSBvZiB0aGlzIGNvbG9yICh3aGVyZSBzb3VyY2UgaXMgYW4gYXJyYXkgcmVwcmVzZW50YXRpb247IGV4OiBbMjAwLCAyMDAsIDEwMCwgMV0pXG4gICAgICogQHJldHVybiB7QXJyYXl9XG4gICAgICovXG4gICAgZ2V0U291cmNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zb3VyY2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgc291cmNlIG9mIHRoaXMgY29sb3IgKHdoZXJlIHNvdXJjZSBpcyBhbiBhcnJheSByZXByZXNlbnRhdGlvbjsgZXg6IFsyMDAsIDIwMCwgMTAwLCAxXSlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzb3VyY2VcbiAgICAgKi9cbiAgICBzZXRTb3VyY2U6IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbG9yIHJlcHJlc2VudGF0aW9uIGluIFJHQiBmb3JtYXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IGV4OiByZ2IoMC0yNTUsMC0yNTUsMC0yNTUpXG4gICAgICovXG4gICAgdG9SZ2I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCk7XG4gICAgICByZXR1cm4gJ3JnYignICsgc291cmNlWzBdICsgJywnICsgc291cmNlWzFdICsgJywnICsgc291cmNlWzJdICsgJyknO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbG9yIHJlcHJlc2VudGF0aW9uIGluIFJHQkEgZm9ybWF0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBleDogcmdiYSgwLTI1NSwwLTI1NSwwLTI1NSwwLTEpXG4gICAgICovXG4gICAgdG9SZ2JhOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpO1xuICAgICAgcmV0dXJuICdyZ2JhKCcgKyBzb3VyY2VbMF0gKyAnLCcgKyBzb3VyY2VbMV0gKyAnLCcgKyBzb3VyY2VbMl0gKyAnLCcgKyBzb3VyY2VbM10gKyAnKSc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29sb3IgcmVwcmVzZW50YXRpb24gaW4gSFNMIGZvcm1hdFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gZXg6IGhzbCgwLTM2MCwwJS0xMDAlLDAlLTEwMCUpXG4gICAgICovXG4gICAgdG9Ic2w6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCksXG4gICAgICAgICAgaHNsID0gdGhpcy5fcmdiVG9Ic2woc291cmNlWzBdLCBzb3VyY2VbMV0sIHNvdXJjZVsyXSk7XG5cbiAgICAgIHJldHVybiAnaHNsKCcgKyBoc2xbMF0gKyAnLCcgKyBoc2xbMV0gKyAnJSwnICsgaHNsWzJdICsgJyUpJztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb2xvciByZXByZXNlbnRhdGlvbiBpbiBIU0xBIGZvcm1hdFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gZXg6IGhzbGEoMC0zNjAsMCUtMTAwJSwwJS0xMDAlLDAtMSlcbiAgICAgKi9cbiAgICB0b0hzbGE6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCksXG4gICAgICAgICAgaHNsID0gdGhpcy5fcmdiVG9Ic2woc291cmNlWzBdLCBzb3VyY2VbMV0sIHNvdXJjZVsyXSk7XG5cbiAgICAgIHJldHVybiAnaHNsYSgnICsgaHNsWzBdICsgJywnICsgaHNsWzFdICsgJyUsJyArIGhzbFsyXSArICclLCcgKyBzb3VyY2VbM10gKyAnKSc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29sb3IgcmVwcmVzZW50YXRpb24gaW4gSEVYIGZvcm1hdFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gZXg6IEZGNTU1NVxuICAgICAqL1xuICAgIHRvSGV4OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpLCByLCBnLCBiO1xuXG4gICAgICByID0gc291cmNlWzBdLnRvU3RyaW5nKDE2KTtcbiAgICAgIHIgPSAoci5sZW5ndGggPT09IDEpID8gKCcwJyArIHIpIDogcjtcblxuICAgICAgZyA9IHNvdXJjZVsxXS50b1N0cmluZygxNik7XG4gICAgICBnID0gKGcubGVuZ3RoID09PSAxKSA/ICgnMCcgKyBnKSA6IGc7XG5cbiAgICAgIGIgPSBzb3VyY2VbMl0udG9TdHJpbmcoMTYpO1xuICAgICAgYiA9IChiLmxlbmd0aCA9PT0gMSkgPyAoJzAnICsgYikgOiBiO1xuXG4gICAgICByZXR1cm4gci50b1VwcGVyQ2FzZSgpICsgZy50b1VwcGVyQ2FzZSgpICsgYi50b1VwcGVyQ2FzZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbG9yIHJlcHJlc2VudGF0aW9uIGluIEhFWEEgZm9ybWF0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBleDogRkY1NTU1Q0NcbiAgICAgKi9cbiAgICB0b0hleGE6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCksIGE7XG5cbiAgICAgIGEgPSBNYXRoLnJvdW5kKHNvdXJjZVszXSAqIDI1NSk7XG4gICAgICBhID0gYS50b1N0cmluZygxNik7XG4gICAgICBhID0gKGEubGVuZ3RoID09PSAxKSA/ICgnMCcgKyBhKSA6IGE7XG5cbiAgICAgIHJldHVybiB0aGlzLnRvSGV4KCkgKyBhLnRvVXBwZXJDYXNlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgdmFsdWUgb2YgYWxwaGEgY2hhbm5lbCBmb3IgdGhpcyBjb2xvclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gMC0xXG4gICAgICovXG4gICAgZ2V0QWxwaGE6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0U291cmNlKClbM107XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdmFsdWUgb2YgYWxwaGEgY2hhbm5lbCBmb3IgdGhpcyBjb2xvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbHBoYSBBbHBoYSB2YWx1ZSAwLTFcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBzZXRBbHBoYTogZnVuY3Rpb24oYWxwaGEpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpO1xuICAgICAgc291cmNlWzNdID0gYWxwaGE7XG4gICAgICB0aGlzLnNldFNvdXJjZShzb3VyY2UpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgY29sb3IgdG8gaXRzIGdyYXlzY2FsZSByZXByZXNlbnRhdGlvblxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Db2xvcn0gdGhpc0FyZ1xuICAgICAqL1xuICAgIHRvR3JheXNjYWxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB0aGlzLmdldFNvdXJjZSgpLFxuICAgICAgICAgIGF2ZXJhZ2UgPSBwYXJzZUludCgoc291cmNlWzBdICogMC4zICsgc291cmNlWzFdICogMC41OSArIHNvdXJjZVsyXSAqIDAuMTEpLnRvRml4ZWQoMCksIDEwKSxcbiAgICAgICAgICBjdXJyZW50QWxwaGEgPSBzb3VyY2VbM107XG4gICAgICB0aGlzLnNldFNvdXJjZShbYXZlcmFnZSwgYXZlcmFnZSwgYXZlcmFnZSwgY3VycmVudEFscGhhXSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBjb2xvciB0byBpdHMgYmxhY2sgYW5kIHdoaXRlIHJlcHJlc2VudGF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRocmVzaG9sZFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Db2xvcn0gdGhpc0FyZ1xuICAgICAqL1xuICAgIHRvQmxhY2tXaGl0ZTogZnVuY3Rpb24odGhyZXNob2xkKSB7XG4gICAgICB2YXIgc291cmNlID0gdGhpcy5nZXRTb3VyY2UoKSxcbiAgICAgICAgICBhdmVyYWdlID0gKHNvdXJjZVswXSAqIDAuMyArIHNvdXJjZVsxXSAqIDAuNTkgKyBzb3VyY2VbMl0gKiAwLjExKS50b0ZpeGVkKDApLFxuICAgICAgICAgIGN1cnJlbnRBbHBoYSA9IHNvdXJjZVszXTtcblxuICAgICAgdGhyZXNob2xkID0gdGhyZXNob2xkIHx8IDEyNztcblxuICAgICAgYXZlcmFnZSA9IChOdW1iZXIoYXZlcmFnZSkgPCBOdW1iZXIodGhyZXNob2xkKSkgPyAwIDogMjU1O1xuICAgICAgdGhpcy5zZXRTb3VyY2UoW2F2ZXJhZ2UsIGF2ZXJhZ2UsIGF2ZXJhZ2UsIGN1cnJlbnRBbHBoYV0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE92ZXJsYXlzIGNvbG9yIHdpdGggYW5vdGhlciBjb2xvclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfGZhYnJpYy5Db2xvcn0gb3RoZXJDb2xvclxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Db2xvcn0gdGhpc0FyZ1xuICAgICAqL1xuICAgIG92ZXJsYXlXaXRoOiBmdW5jdGlvbihvdGhlckNvbG9yKSB7XG4gICAgICBpZiAoIShvdGhlckNvbG9yIGluc3RhbmNlb2YgQ29sb3IpKSB7XG4gICAgICAgIG90aGVyQ29sb3IgPSBuZXcgQ29sb3Iob3RoZXJDb2xvcik7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICBhbHBoYSA9IHRoaXMuZ2V0QWxwaGEoKSxcbiAgICAgICAgICBvdGhlckFscGhhID0gMC41LFxuICAgICAgICAgIHNvdXJjZSA9IHRoaXMuZ2V0U291cmNlKCksXG4gICAgICAgICAgb3RoZXJTb3VyY2UgPSBvdGhlckNvbG9yLmdldFNvdXJjZSgpLCBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKE1hdGgucm91bmQoKHNvdXJjZVtpXSAqICgxIC0gb3RoZXJBbHBoYSkpICsgKG90aGVyU291cmNlW2ldICogb3RoZXJBbHBoYSkpKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0WzNdID0gYWxwaGE7XG4gICAgICB0aGlzLnNldFNvdXJjZShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZWdleCBtYXRjaGluZyBjb2xvciBpbiBSR0Igb3IgUkdCQSBmb3JtYXRzIChleDogcmdiKDAsIDAsIDApLCByZ2JhKDI1NSwgMTAwLCAxMCwgMC41KSwgcmdiYSggMjU1ICwgMTAwICwgMTAgLCAwLjUgKSwgcmdiKDEsMSwxKSwgcmdiYSgxMDAlLCA2MCUsIDEwJSwgMC41KSlcbiAgICogQHN0YXRpY1xuICAgKiBAZmllbGRcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgZmFicmljLkNvbG9yLnJlUkdCYSA9IC9ecmdiYT9cXChcXHMqKFxcZHsxLDN9KD86XFwuXFxkKyk/XFwlPylcXHMqLFxccyooXFxkezEsM30oPzpcXC5cXGQrKT9cXCU/KVxccyosXFxzKihcXGR7MSwzfSg/OlxcLlxcZCspP1xcJT8pXFxzKig/OlxccyosXFxzKigoPzpcXGQqXFwuP1xcZCspPylcXHMqKT9cXCkkL2k7XG5cbiAgLyoqXG4gICAqIFJlZ2V4IG1hdGNoaW5nIGNvbG9yIGluIEhTTCBvciBIU0xBIGZvcm1hdHMgKGV4OiBoc2woMjAwLCA4MCUsIDEwJSksIGhzbGEoMzAwLCA1MCUsIDgwJSwgMC41KSwgaHNsYSggMzAwICwgNTAlICwgODAlICwgMC41ICkpXG4gICAqIEBzdGF0aWNcbiAgICogQGZpZWxkXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuQ29sb3JcbiAgICovXG4gIGZhYnJpYy5Db2xvci5yZUhTTGEgPSAvXmhzbGE/XFwoXFxzKihcXGR7MSwzfSlcXHMqLFxccyooXFxkezEsM31cXCUpXFxzKixcXHMqKFxcZHsxLDN9XFwlKVxccyooPzpcXHMqLFxccyooXFxkKyg/OlxcLlxcZCspPylcXHMqKT9cXCkkL2k7XG5cbiAgLyoqXG4gICAqIFJlZ2V4IG1hdGNoaW5nIGNvbG9yIGluIEhFWCBmb3JtYXQgKGV4OiAjRkY1NTQ0Q0MsICNGRjU1NTUsIDAxMDE1NSwgYWZmKVxuICAgKiBAc3RhdGljXG4gICAqIEBmaWVsZFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqL1xuICBmYWJyaWMuQ29sb3IucmVIZXggPSAvXiM/KFswLTlhLWZdezh9fFswLTlhLWZdezZ9fFswLTlhLWZdezR9fFswLTlhLWZdezN9KSQvaTtcblxuICAvKipcbiAgICogTWFwIG9mIHRoZSAxNDggY29sb3IgbmFtZXMgd2l0aCBIRVggY29kZVxuICAgKiBAc3RhdGljXG4gICAqIEBmaWVsZFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBzZWU6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLyNzdmctY29sb3JcbiAgICovXG4gIGZhYnJpYy5Db2xvci5jb2xvck5hbWVNYXAgPSB7XG4gICAgYWxpY2VibHVlOiAgICAgICAgICAgICcjRjBGOEZGJyxcbiAgICBhbnRpcXVld2hpdGU6ICAgICAgICAgJyNGQUVCRDcnLFxuICAgIGFxdWE6ICAgICAgICAgICAgICAgICAnIzAwRkZGRicsXG4gICAgYXF1YW1hcmluZTogICAgICAgICAgICcjN0ZGRkQ0JyxcbiAgICBhenVyZTogICAgICAgICAgICAgICAgJyNGMEZGRkYnLFxuICAgIGJlaWdlOiAgICAgICAgICAgICAgICAnI0Y1RjVEQycsXG4gICAgYmlzcXVlOiAgICAgICAgICAgICAgICcjRkZFNEM0JyxcbiAgICBibGFjazogICAgICAgICAgICAgICAgJyMwMDAwMDAnLFxuICAgIGJsYW5jaGVkYWxtb25kOiAgICAgICAnI0ZGRUJDRCcsXG4gICAgYmx1ZTogICAgICAgICAgICAgICAgICcjMDAwMEZGJyxcbiAgICBibHVldmlvbGV0OiAgICAgICAgICAgJyM4QTJCRTInLFxuICAgIGJyb3duOiAgICAgICAgICAgICAgICAnI0E1MkEyQScsXG4gICAgYnVybHl3b29kOiAgICAgICAgICAgICcjREVCODg3JyxcbiAgICBjYWRldGJsdWU6ICAgICAgICAgICAgJyM1RjlFQTAnLFxuICAgIGNoYXJ0cmV1c2U6ICAgICAgICAgICAnIzdGRkYwMCcsXG4gICAgY2hvY29sYXRlOiAgICAgICAgICAgICcjRDI2OTFFJyxcbiAgICBjb3JhbDogICAgICAgICAgICAgICAgJyNGRjdGNTAnLFxuICAgIGNvcm5mbG93ZXJibHVlOiAgICAgICAnIzY0OTVFRCcsXG4gICAgY29ybnNpbGs6ICAgICAgICAgICAgICcjRkZGOERDJyxcbiAgICBjcmltc29uOiAgICAgICAgICAgICAgJyNEQzE0M0MnLFxuICAgIGN5YW46ICAgICAgICAgICAgICAgICAnIzAwRkZGRicsXG4gICAgZGFya2JsdWU6ICAgICAgICAgICAgICcjMDAwMDhCJyxcbiAgICBkYXJrY3lhbjogICAgICAgICAgICAgJyMwMDhCOEInLFxuICAgIGRhcmtnb2xkZW5yb2Q6ICAgICAgICAnI0I4ODYwQicsXG4gICAgZGFya2dyYXk6ICAgICAgICAgICAgICcjQTlBOUE5JyxcbiAgICBkYXJrZ3JleTogICAgICAgICAgICAgJyNBOUE5QTknLFxuICAgIGRhcmtncmVlbjogICAgICAgICAgICAnIzAwNjQwMCcsXG4gICAgZGFya2toYWtpOiAgICAgICAgICAgICcjQkRCNzZCJyxcbiAgICBkYXJrbWFnZW50YTogICAgICAgICAgJyM4QjAwOEInLFxuICAgIGRhcmtvbGl2ZWdyZWVuOiAgICAgICAnIzU1NkIyRicsXG4gICAgZGFya29yYW5nZTogICAgICAgICAgICcjRkY4QzAwJyxcbiAgICBkYXJrb3JjaGlkOiAgICAgICAgICAgJyM5OTMyQ0MnLFxuICAgIGRhcmtyZWQ6ICAgICAgICAgICAgICAnIzhCMDAwMCcsXG4gICAgZGFya3NhbG1vbjogICAgICAgICAgICcjRTk5NjdBJyxcbiAgICBkYXJrc2VhZ3JlZW46ICAgICAgICAgJyM4RkJDOEYnLFxuICAgIGRhcmtzbGF0ZWJsdWU6ICAgICAgICAnIzQ4M0Q4QicsXG4gICAgZGFya3NsYXRlZ3JheTogICAgICAgICcjMkY0RjRGJyxcbiAgICBkYXJrc2xhdGVncmV5OiAgICAgICAgJyMyRjRGNEYnLFxuICAgIGRhcmt0dXJxdW9pc2U6ICAgICAgICAnIzAwQ0VEMScsXG4gICAgZGFya3Zpb2xldDogICAgICAgICAgICcjOTQwMEQzJyxcbiAgICBkZWVwcGluazogICAgICAgICAgICAgJyNGRjE0OTMnLFxuICAgIGRlZXBza3libHVlOiAgICAgICAgICAnIzAwQkZGRicsXG4gICAgZGltZ3JheTogICAgICAgICAgICAgICcjNjk2OTY5JyxcbiAgICBkaW1ncmV5OiAgICAgICAgICAgICAgJyM2OTY5NjknLFxuICAgIGRvZGdlcmJsdWU6ICAgICAgICAgICAnIzFFOTBGRicsXG4gICAgZmlyZWJyaWNrOiAgICAgICAgICAgICcjQjIyMjIyJyxcbiAgICBmbG9yYWx3aGl0ZTogICAgICAgICAgJyNGRkZBRjAnLFxuICAgIGZvcmVzdGdyZWVuOiAgICAgICAgICAnIzIyOEIyMicsXG4gICAgZnVjaHNpYTogICAgICAgICAgICAgICcjRkYwMEZGJyxcbiAgICBnYWluc2Jvcm86ICAgICAgICAgICAgJyNEQ0RDREMnLFxuICAgIGdob3N0d2hpdGU6ICAgICAgICAgICAnI0Y4RjhGRicsXG4gICAgZ29sZDogICAgICAgICAgICAgICAgICcjRkZENzAwJyxcbiAgICBnb2xkZW5yb2Q6ICAgICAgICAgICAgJyNEQUE1MjAnLFxuICAgIGdyYXk6ICAgICAgICAgICAgICAgICAnIzgwODA4MCcsXG4gICAgZ3JleTogICAgICAgICAgICAgICAgICcjODA4MDgwJyxcbiAgICBncmVlbjogICAgICAgICAgICAgICAgJyMwMDgwMDAnLFxuICAgIGdyZWVueWVsbG93OiAgICAgICAgICAnI0FERkYyRicsXG4gICAgaG9uZXlkZXc6ICAgICAgICAgICAgICcjRjBGRkYwJyxcbiAgICBob3RwaW5rOiAgICAgICAgICAgICAgJyNGRjY5QjQnLFxuICAgIGluZGlhbnJlZDogICAgICAgICAgICAnI0NENUM1QycsXG4gICAgaW5kaWdvOiAgICAgICAgICAgICAgICcjNEIwMDgyJyxcbiAgICBpdm9yeTogICAgICAgICAgICAgICAgJyNGRkZGRjAnLFxuICAgIGtoYWtpOiAgICAgICAgICAgICAgICAnI0YwRTY4QycsXG4gICAgbGF2ZW5kZXI6ICAgICAgICAgICAgICcjRTZFNkZBJyxcbiAgICBsYXZlbmRlcmJsdXNoOiAgICAgICAgJyNGRkYwRjUnLFxuICAgIGxhd25ncmVlbjogICAgICAgICAgICAnIzdDRkMwMCcsXG4gICAgbGVtb25jaGlmZm9uOiAgICAgICAgICcjRkZGQUNEJyxcbiAgICBsaWdodGJsdWU6ICAgICAgICAgICAgJyNBREQ4RTYnLFxuICAgIGxpZ2h0Y29yYWw6ICAgICAgICAgICAnI0YwODA4MCcsXG4gICAgbGlnaHRjeWFuOiAgICAgICAgICAgICcjRTBGRkZGJyxcbiAgICBsaWdodGdvbGRlbnJvZHllbGxvdzogJyNGQUZBRDInLFxuICAgIGxpZ2h0Z3JheTogICAgICAgICAgICAnI0QzRDNEMycsXG4gICAgbGlnaHRncmV5OiAgICAgICAgICAgICcjRDNEM0QzJyxcbiAgICBsaWdodGdyZWVuOiAgICAgICAgICAgJyM5MEVFOTAnLFxuICAgIGxpZ2h0cGluazogICAgICAgICAgICAnI0ZGQjZDMScsXG4gICAgbGlnaHRzYWxtb246ICAgICAgICAgICcjRkZBMDdBJyxcbiAgICBsaWdodHNlYWdyZWVuOiAgICAgICAgJyMyMEIyQUEnLFxuICAgIGxpZ2h0c2t5Ymx1ZTogICAgICAgICAnIzg3Q0VGQScsXG4gICAgbGlnaHRzbGF0ZWdyYXk6ICAgICAgICcjNzc4ODk5JyxcbiAgICBsaWdodHNsYXRlZ3JleTogICAgICAgJyM3Nzg4OTknLFxuICAgIGxpZ2h0c3RlZWxibHVlOiAgICAgICAnI0IwQzRERScsXG4gICAgbGlnaHR5ZWxsb3c6ICAgICAgICAgICcjRkZGRkUwJyxcbiAgICBsaW1lOiAgICAgICAgICAgICAgICAgJyMwMEZGMDAnLFxuICAgIGxpbWVncmVlbjogICAgICAgICAgICAnIzMyQ0QzMicsXG4gICAgbGluZW46ICAgICAgICAgICAgICAgICcjRkFGMEU2JyxcbiAgICBtYWdlbnRhOiAgICAgICAgICAgICAgJyNGRjAwRkYnLFxuICAgIG1hcm9vbjogICAgICAgICAgICAgICAnIzgwMDAwMCcsXG4gICAgbWVkaXVtYXF1YW1hcmluZTogICAgICcjNjZDREFBJyxcbiAgICBtZWRpdW1ibHVlOiAgICAgICAgICAgJyMwMDAwQ0QnLFxuICAgIG1lZGl1bW9yY2hpZDogICAgICAgICAnI0JBNTVEMycsXG4gICAgbWVkaXVtcHVycGxlOiAgICAgICAgICcjOTM3MERCJyxcbiAgICBtZWRpdW1zZWFncmVlbjogICAgICAgJyMzQ0IzNzEnLFxuICAgIG1lZGl1bXNsYXRlYmx1ZTogICAgICAnIzdCNjhFRScsXG4gICAgbWVkaXVtc3ByaW5nZ3JlZW46ICAgICcjMDBGQTlBJyxcbiAgICBtZWRpdW10dXJxdW9pc2U6ICAgICAgJyM0OEQxQ0MnLFxuICAgIG1lZGl1bXZpb2xldHJlZDogICAgICAnI0M3MTU4NScsXG4gICAgbWlkbmlnaHRibHVlOiAgICAgICAgICcjMTkxOTcwJyxcbiAgICBtaW50Y3JlYW06ICAgICAgICAgICAgJyNGNUZGRkEnLFxuICAgIG1pc3R5cm9zZTogICAgICAgICAgICAnI0ZGRTRFMScsXG4gICAgbW9jY2FzaW46ICAgICAgICAgICAgICcjRkZFNEI1JyxcbiAgICBuYXZham93aGl0ZTogICAgICAgICAgJyNGRkRFQUQnLFxuICAgIG5hdnk6ICAgICAgICAgICAgICAgICAnIzAwMDA4MCcsXG4gICAgb2xkbGFjZTogICAgICAgICAgICAgICcjRkRGNUU2JyxcbiAgICBvbGl2ZTogICAgICAgICAgICAgICAgJyM4MDgwMDAnLFxuICAgIG9saXZlZHJhYjogICAgICAgICAgICAnIzZCOEUyMycsXG4gICAgb3JhbmdlOiAgICAgICAgICAgICAgICcjRkZBNTAwJyxcbiAgICBvcmFuZ2VyZWQ6ICAgICAgICAgICAgJyNGRjQ1MDAnLFxuICAgIG9yY2hpZDogICAgICAgICAgICAgICAnI0RBNzBENicsXG4gICAgcGFsZWdvbGRlbnJvZDogICAgICAgICcjRUVFOEFBJyxcbiAgICBwYWxlZ3JlZW46ICAgICAgICAgICAgJyM5OEZCOTgnLFxuICAgIHBhbGV0dXJxdW9pc2U6ICAgICAgICAnI0FGRUVFRScsXG4gICAgcGFsZXZpb2xldHJlZDogICAgICAgICcjREI3MDkzJyxcbiAgICBwYXBheWF3aGlwOiAgICAgICAgICAgJyNGRkVGRDUnLFxuICAgIHBlYWNocHVmZjogICAgICAgICAgICAnI0ZGREFCOScsXG4gICAgcGVydTogICAgICAgICAgICAgICAgICcjQ0Q4NTNGJyxcbiAgICBwaW5rOiAgICAgICAgICAgICAgICAgJyNGRkMwQ0InLFxuICAgIHBsdW06ICAgICAgICAgICAgICAgICAnI0REQTBERCcsXG4gICAgcG93ZGVyYmx1ZTogICAgICAgICAgICcjQjBFMEU2JyxcbiAgICBwdXJwbGU6ICAgICAgICAgICAgICAgJyM4MDAwODAnLFxuICAgIHJlYmVjY2FwdXJwbGU6ICAgICAgICAnIzY2MzM5OScsXG4gICAgcmVkOiAgICAgICAgICAgICAgICAgICcjRkYwMDAwJyxcbiAgICByb3N5YnJvd246ICAgICAgICAgICAgJyNCQzhGOEYnLFxuICAgIHJveWFsYmx1ZTogICAgICAgICAgICAnIzQxNjlFMScsXG4gICAgc2FkZGxlYnJvd246ICAgICAgICAgICcjOEI0NTEzJyxcbiAgICBzYWxtb246ICAgICAgICAgICAgICAgJyNGQTgwNzInLFxuICAgIHNhbmR5YnJvd246ICAgICAgICAgICAnI0Y0QTQ2MCcsXG4gICAgc2VhZ3JlZW46ICAgICAgICAgICAgICcjMkU4QjU3JyxcbiAgICBzZWFzaGVsbDogICAgICAgICAgICAgJyNGRkY1RUUnLFxuICAgIHNpZW5uYTogICAgICAgICAgICAgICAnI0EwNTIyRCcsXG4gICAgc2lsdmVyOiAgICAgICAgICAgICAgICcjQzBDMEMwJyxcbiAgICBza3libHVlOiAgICAgICAgICAgICAgJyM4N0NFRUInLFxuICAgIHNsYXRlYmx1ZTogICAgICAgICAgICAnIzZBNUFDRCcsXG4gICAgc2xhdGVncmF5OiAgICAgICAgICAgICcjNzA4MDkwJyxcbiAgICBzbGF0ZWdyZXk6ICAgICAgICAgICAgJyM3MDgwOTAnLFxuICAgIHNub3c6ICAgICAgICAgICAgICAgICAnI0ZGRkFGQScsXG4gICAgc3ByaW5nZ3JlZW46ICAgICAgICAgICcjMDBGRjdGJyxcbiAgICBzdGVlbGJsdWU6ICAgICAgICAgICAgJyM0NjgyQjQnLFxuICAgIHRhbjogICAgICAgICAgICAgICAgICAnI0QyQjQ4QycsXG4gICAgdGVhbDogICAgICAgICAgICAgICAgICcjMDA4MDgwJyxcbiAgICB0aGlzdGxlOiAgICAgICAgICAgICAgJyNEOEJGRDgnLFxuICAgIHRvbWF0bzogICAgICAgICAgICAgICAnI0ZGNjM0NycsXG4gICAgdHVycXVvaXNlOiAgICAgICAgICAgICcjNDBFMEQwJyxcbiAgICB2aW9sZXQ6ICAgICAgICAgICAgICAgJyNFRTgyRUUnLFxuICAgIHdoZWF0OiAgICAgICAgICAgICAgICAnI0Y1REVCMycsXG4gICAgd2hpdGU6ICAgICAgICAgICAgICAgICcjRkZGRkZGJyxcbiAgICB3aGl0ZXNtb2tlOiAgICAgICAgICAgJyNGNUY1RjUnLFxuICAgIHllbGxvdzogICAgICAgICAgICAgICAnI0ZGRkYwMCcsXG4gICAgeWVsbG93Z3JlZW46ICAgICAgICAgICcjOUFDRDMyJ1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gcFxuICAgKiBAcGFyYW0ge051bWJlcn0gcVxuICAgKiBAcGFyYW0ge051bWJlcn0gdFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICBpZiAodCA8IDApIHtcbiAgICAgIHQgKz0gMTtcbiAgICB9XG4gICAgaWYgKHQgPiAxKSB7XG4gICAgICB0IC09IDE7XG4gICAgfVxuICAgIGlmICh0IDwgMSAvIDYpIHtcbiAgICAgIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICAgIH1cbiAgICBpZiAodCA8IDEgLyAyKSB7XG4gICAgICByZXR1cm4gcTtcbiAgICB9XG4gICAgaWYgKHQgPCAyIC8gMykge1xuICAgICAgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5ldyBjb2xvciBvYmplY3QsIHdoZW4gZ2l2ZW4gYSBjb2xvciBpbiBSR0IgZm9ybWF0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuQ29sb3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbG9yIENvbG9yIHZhbHVlIGV4OiByZ2IoMC0yNTUsMC0yNTUsMC0yNTUpXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5Db2xvcn1cbiAgICovXG4gIGZhYnJpYy5Db2xvci5mcm9tUmdiID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgICByZXR1cm4gQ29sb3IuZnJvbVNvdXJjZShDb2xvci5zb3VyY2VGcm9tUmdiKGNvbG9yKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYXJyYXkgcmVwcmVzZW50YXRpb24gKGV4OiBbMTAwLCAxMDAsIDIwMCwgMV0pIG9mIGEgY29sb3IgdGhhdCdzIGluIFJHQiBvciBSR0JBIGZvcm1hdFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvciBDb2xvciB2YWx1ZSBleDogcmdiKDAtMjU1LDAtMjU1LDAtMjU1KSwgcmdiKDAlLTEwMCUsMCUtMTAwJSwwJS0xMDAlKVxuICAgKiBAcmV0dXJuIHtBcnJheX0gc291cmNlXG4gICAqL1xuICBmYWJyaWMuQ29sb3Iuc291cmNlRnJvbVJnYiA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgdmFyIG1hdGNoID0gY29sb3IubWF0Y2goQ29sb3IucmVSR0JhKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHZhciByID0gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSAvICgvJSQvLnRlc3QobWF0Y2hbMV0pID8gMTAwIDogMSkgKiAoLyUkLy50ZXN0KG1hdGNoWzFdKSA/IDI1NSA6IDEpLFxuICAgICAgICAgIGcgPSBwYXJzZUludChtYXRjaFsyXSwgMTApIC8gKC8lJC8udGVzdChtYXRjaFsyXSkgPyAxMDAgOiAxKSAqICgvJSQvLnRlc3QobWF0Y2hbMl0pID8gMjU1IDogMSksXG4gICAgICAgICAgYiA9IHBhcnNlSW50KG1hdGNoWzNdLCAxMCkgLyAoLyUkLy50ZXN0KG1hdGNoWzNdKSA/IDEwMCA6IDEpICogKC8lJC8udGVzdChtYXRjaFszXSkgPyAyNTUgOiAxKTtcblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcGFyc2VJbnQociwgMTApLFxuICAgICAgICBwYXJzZUludChnLCAxMCksXG4gICAgICAgIHBhcnNlSW50KGIsIDEwKSxcbiAgICAgICAgbWF0Y2hbNF0gPyBwYXJzZUZsb2F0KG1hdGNoWzRdKSA6IDFcbiAgICAgIF07XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5ldyBjb2xvciBvYmplY3QsIHdoZW4gZ2l2ZW4gYSBjb2xvciBpbiBSR0JBIGZvcm1hdFxuICAgKiBAc3RhdGljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvclxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9XG4gICAqL1xuICBmYWJyaWMuQ29sb3IuZnJvbVJnYmEgPSBDb2xvci5mcm9tUmdiO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5ldyBjb2xvciBvYmplY3QsIHdoZW4gZ2l2ZW4gYSBjb2xvciBpbiBIU0wgZm9ybWF0XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvciBDb2xvciB2YWx1ZSBleDogaHNsKDAtMjYwLDAlLTEwMCUsMCUtMTAwJSlcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Db2xvclxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9XG4gICAqL1xuICBmYWJyaWMuQ29sb3IuZnJvbUhzbCA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgcmV0dXJuIENvbG9yLmZyb21Tb3VyY2UoQ29sb3Iuc291cmNlRnJvbUhzbChjb2xvcikpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFycmF5IHJlcHJlc2VudGF0aW9uIChleDogWzEwMCwgMTAwLCAyMDAsIDFdKSBvZiBhIGNvbG9yIHRoYXQncyBpbiBIU0wgb3IgSFNMQSBmb3JtYXQuXG4gICAqIEFkYXB0ZWQgZnJvbSA8YSBocmVmPVwiaHR0cHM6Ly9yYXdnaXRodWIuY29tL21qaWphY2tzb24vbWppamFja3Nvbi5naXRodWIuY29tL21hc3Rlci8yMDA4LzAyL3JnYi10by1oc2wtYW5kLXJnYi10by1oc3YtY29sb3ItbW9kZWwtY29udmVyc2lvbi1hbGdvcml0aG1zLWluLWphdmFzY3JpcHQuaHRtbFwiPmh0dHBzOi8vZ2l0aHViLmNvbS9tamlqYWNrc29uPC9hPlxuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvciBDb2xvciB2YWx1ZSBleDogaHNsKDAtMzYwLDAlLTEwMCUsMCUtMTAwJSkgb3IgaHNsYSgwLTM2MCwwJS0xMDAlLDAlLTEwMCUsIDAtMSlcbiAgICogQHJldHVybiB7QXJyYXl9IHNvdXJjZVxuICAgKiBAc2VlIGh0dHA6Ly9odHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWNvbG9yLyNoc2wtY29sb3JcbiAgICovXG4gIGZhYnJpYy5Db2xvci5zb3VyY2VGcm9tSHNsID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgICB2YXIgbWF0Y2ggPSBjb2xvci5tYXRjaChDb2xvci5yZUhTTGEpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaCA9ICgoKHBhcnNlRmxvYXQobWF0Y2hbMV0pICUgMzYwKSArIDM2MCkgJSAzNjApIC8gMzYwLFxuICAgICAgICBzID0gcGFyc2VGbG9hdChtYXRjaFsyXSkgLyAoLyUkLy50ZXN0KG1hdGNoWzJdKSA/IDEwMCA6IDEpLFxuICAgICAgICBsID0gcGFyc2VGbG9hdChtYXRjaFszXSkgLyAoLyUkLy50ZXN0KG1hdGNoWzNdKSA/IDEwMCA6IDEpLFxuICAgICAgICByLCBnLCBiO1xuXG4gICAgaWYgKHMgPT09IDApIHtcbiAgICAgIHIgPSBnID0gYiA9IGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHEgPSBsIDw9IDAuNSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcyxcbiAgICAgICAgICBwID0gbCAqIDIgLSBxO1xuXG4gICAgICByID0gaHVlMnJnYihwLCBxLCBoICsgMSAvIDMpO1xuICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICBNYXRoLnJvdW5kKHIgKiAyNTUpLFxuICAgICAgTWF0aC5yb3VuZChnICogMjU1KSxcbiAgICAgIE1hdGgucm91bmQoYiAqIDI1NSksXG4gICAgICBtYXRjaFs0XSA/IHBhcnNlRmxvYXQobWF0Y2hbNF0pIDogMVxuICAgIF07XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbmV3IGNvbG9yIG9iamVjdCwgd2hlbiBnaXZlbiBhIGNvbG9yIGluIEhTTEEgZm9ybWF0XG4gICAqIEBzdGF0aWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuQ29sb3JcbiAgICogQHBhcmFtIHtTdHJpbmd9IGNvbG9yXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5Db2xvcn1cbiAgICovXG4gIGZhYnJpYy5Db2xvci5mcm9tSHNsYSA9IENvbG9yLmZyb21Ic2w7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbmV3IGNvbG9yIG9iamVjdCwgd2hlbiBnaXZlbiBhIGNvbG9yIGluIEhFWCBmb3JtYXRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvciBDb2xvciB2YWx1ZSBleDogRkY1NTU1XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5Db2xvcn1cbiAgICovXG4gIGZhYnJpYy5Db2xvci5mcm9tSGV4ID0gZnVuY3Rpb24oY29sb3IpIHtcbiAgICByZXR1cm4gQ29sb3IuZnJvbVNvdXJjZShDb2xvci5zb3VyY2VGcm9tSGV4KGNvbG9yKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYXJyYXkgcmVwcmVzZW50YXRpb24gKGV4OiBbMTAwLCAxMDAsIDIwMCwgMV0pIG9mIGEgY29sb3IgdGhhdCdzIGluIEhFWCBmb3JtYXRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBjb2xvciBleDogRkY1NTU1IG9yIEZGNTU0NENDIChSR0JhKVxuICAgKiBAcmV0dXJuIHtBcnJheX0gc291cmNlXG4gICAqL1xuICBmYWJyaWMuQ29sb3Iuc291cmNlRnJvbUhleCA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgaWYgKGNvbG9yLm1hdGNoKENvbG9yLnJlSGV4KSkge1xuICAgICAgdmFyIHZhbHVlID0gY29sb3Iuc2xpY2UoY29sb3IuaW5kZXhPZignIycpICsgMSksXG4gICAgICAgICAgaXNTaG9ydE5vdGF0aW9uID0gKHZhbHVlLmxlbmd0aCA9PT0gMyB8fCB2YWx1ZS5sZW5ndGggPT09IDQpLFxuICAgICAgICAgIGlzUkdCYSA9ICh2YWx1ZS5sZW5ndGggPT09IDggfHwgdmFsdWUubGVuZ3RoID09PSA0KSxcbiAgICAgICAgICByID0gaXNTaG9ydE5vdGF0aW9uID8gKHZhbHVlLmNoYXJBdCgwKSArIHZhbHVlLmNoYXJBdCgwKSkgOiB2YWx1ZS5zdWJzdHJpbmcoMCwgMiksXG4gICAgICAgICAgZyA9IGlzU2hvcnROb3RhdGlvbiA/ICh2YWx1ZS5jaGFyQXQoMSkgKyB2YWx1ZS5jaGFyQXQoMSkpIDogdmFsdWUuc3Vic3RyaW5nKDIsIDQpLFxuICAgICAgICAgIGIgPSBpc1Nob3J0Tm90YXRpb24gPyAodmFsdWUuY2hhckF0KDIpICsgdmFsdWUuY2hhckF0KDIpKSA6IHZhbHVlLnN1YnN0cmluZyg0LCA2KSxcbiAgICAgICAgICBhID0gaXNSR0JhID8gKGlzU2hvcnROb3RhdGlvbiA/ICh2YWx1ZS5jaGFyQXQoMykgKyB2YWx1ZS5jaGFyQXQoMykpIDogdmFsdWUuc3Vic3RyaW5nKDYsIDgpKSA6ICdGRic7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHBhcnNlSW50KHIsIDE2KSxcbiAgICAgICAgcGFyc2VJbnQoZywgMTYpLFxuICAgICAgICBwYXJzZUludChiLCAxNiksXG4gICAgICAgIHBhcnNlRmxvYXQoKHBhcnNlSW50KGEsIDE2KSAvIDI1NSkudG9GaXhlZCgyKSlcbiAgICAgIF07XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG5ldyBjb2xvciBvYmplY3QsIHdoZW4gZ2l2ZW4gY29sb3IgaW4gYXJyYXkgcmVwcmVzZW50YXRpb24gKGV4OiBbMjAwLCAxMDAsIDEwMCwgMC41XSlcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkNvbG9yXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZVxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ29sb3J9XG4gICAqL1xuICBmYWJyaWMuQ29sb3IuZnJvbVNvdXJjZSA9IGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgIHZhciBvQ29sb3IgPSBuZXcgQ29sb3IoKTtcbiAgICBvQ29sb3Iuc2V0U291cmNlKHNvdXJjZSk7XG4gICAgcmV0dXJuIG9Db2xvcjtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgc2NhbGVNYXAgPSBbJ2UnLCAnc2UnLCAncycsICdzdycsICd3JywgJ253JywgJ24nLCAnbmUnLCAnZSddLFxuICAgICAgc2tld01hcCA9IFsnbnMnLCAnbmVzdycsICdldycsICdud3NlJ10sXG4gICAgICBjb250cm9scyA9IHt9LFxuICAgICAgTEVGVCA9ICdsZWZ0JywgVE9QID0gJ3RvcCcsIFJJR0hUID0gJ3JpZ2h0JywgQk9UVE9NID0gJ2JvdHRvbScsIENFTlRFUiA9ICdjZW50ZXInLFxuICAgICAgb3Bwb3NpdGUgPSB7XG4gICAgICAgIHRvcDogQk9UVE9NLFxuICAgICAgICBib3R0b206IFRPUCxcbiAgICAgICAgbGVmdDogUklHSFQsXG4gICAgICAgIHJpZ2h0OiBMRUZULFxuICAgICAgICBjZW50ZXI6IENFTlRFUixcbiAgICAgIH0sIHJhZGlhbnNUb0RlZ3JlZXMgPSBmYWJyaWMudXRpbC5yYWRpYW5zVG9EZWdyZWVzLFxuICAgICAgc2lnbiA9IChNYXRoLnNpZ24gfHwgZnVuY3Rpb24oeCkgeyByZXR1cm4gKCh4ID4gMCkgLSAoeCA8IDApKSB8fCAreDsgfSk7XG5cbiAgLyoqXG4gICAqIENvbWJpbmUgY29udHJvbCBwb3NpdGlvbiBhbmQgb2JqZWN0IGFuZ2xlIHRvIGZpbmQgdGhlIGNvbnRyb2wgZGlyZWN0aW9uIGNvbXBhcmVkXG4gICAqIHRvIHRoZSBvYmplY3QgY2VudGVyLlxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGZhYnJpY09iamVjdCB0aGUgZmFicmljIG9iamVjdCBmb3Igd2hpY2ggd2UgYXJlIHJlbmRlcmluZyBjb250cm9sc1xuICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIHRoZSBjb250cm9sIGNsYXNzXG4gICAqIEByZXR1cm4ge051bWJlcn0gMCAtIDcgYSBxdWFkcmFudCBudW1iZXJcbiAgICovXG4gIGZ1bmN0aW9uIGZpbmRDb3JuZXJRdWFkcmFudChmYWJyaWNPYmplY3QsIGNvbnRyb2wpIHtcbiAgICB2YXIgY29ybmVyQW5nbGUgPSBmYWJyaWNPYmplY3QuYW5nbGUgKyByYWRpYW5zVG9EZWdyZWVzKE1hdGguYXRhbjIoY29udHJvbC55LCBjb250cm9sLngpKSArIDM2MDtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoY29ybmVyQW5nbGUgJSAzNjApIC8gNDUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlyZUV2ZW50KGV2ZW50TmFtZSwgb3B0aW9ucykge1xuICAgIHZhciB0YXJnZXQgPSBvcHRpb25zLnRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgIGNhbnZhcyA9IHRhcmdldC5jYW52YXMsXG4gICAgICAgIGNhbnZhc09wdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUob3B0aW9ucyk7XG4gICAgY2FudmFzT3B0aW9ucy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgY2FudmFzICYmIGNhbnZhcy5maXJlKCdvYmplY3Q6JyArIGV2ZW50TmFtZSwgY2FudmFzT3B0aW9ucyk7XG4gICAgdGFyZ2V0LmZpcmUoZXZlbnROYW1lLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNwZWN0IGV2ZW50IGFuZCBmYWJyaWNPYmplY3QgcHJvcGVydGllcyB0byB1bmRlcnN0YW5kIGlmIHRoZSBzY2FsaW5nIGFjdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgZnJvbSB0aGUgdXNlciBhY3Rpb25cbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIGZhYnJpYyBvYmplY3QgYWJvdXQgdG8gc2NhbGVcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzY2FsZSBpcyBwcm9wb3J0aW9uYWxcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxlSXNQcm9wb3J0aW9uYWwoZXZlbnREYXRhLCBmYWJyaWNPYmplY3QpIHtcbiAgICB2YXIgY2FudmFzID0gZmFicmljT2JqZWN0LmNhbnZhcywgdW5pU2NhbGVLZXkgPSBjYW52YXMudW5pU2NhbGVLZXksXG4gICAgICAgIHVuaWZvcm1Jc1RvZ2dsZWQgPSBldmVudERhdGFbdW5pU2NhbGVLZXldO1xuICAgIHJldHVybiAoY2FudmFzLnVuaWZvcm1TY2FsaW5nICYmICF1bmlmb3JtSXNUb2dnbGVkKSB8fFxuICAgICghY2FudmFzLnVuaWZvcm1TY2FsaW5nICYmIHVuaWZvcm1Jc1RvZ2dsZWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0cmFuc2Zvcm0gaXMgY2VudGVyZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSB0cmFuc2Zvcm0gZGF0YVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRyYW5zZm9ybSBpcyBjZW50ZXJlZFxuICAgKi9cbiAgZnVuY3Rpb24gaXNUcmFuc2Zvcm1DZW50ZXJlZCh0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtLm9yaWdpblggPT09IENFTlRFUiAmJiB0cmFuc2Zvcm0ub3JpZ2luWSA9PT0gQ0VOVEVSO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc3BlY3QgZmFicmljT2JqZWN0IHRvIHVuZGVyc3RhbmQgaWYgdGhlIGN1cnJlbnQgc2NhbGluZyBhY3Rpb24gaXMgYWxsb3dlZFxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGZhYnJpY09iamVjdCB0aGUgZmFicmljIG9iamVjdCBhYm91dCB0byBzY2FsZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gYnkgJ3gnIG9yICd5JyBvciAnJ1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNjYWxlUHJvcG9ydGlvbmFsbHkgdHJ1ZSBpZiB3ZSBhcmUgdHJ5aW5nIHRvIHNjYWxlIHByb3BvcnRpb25hbGx5XG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc2NhbGluZyBpcyBub3QgYWxsb3dlZCBhdCBjdXJyZW50IGNvbmRpdGlvbnNcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxpbmdJc0ZvcmJpZGRlbihmYWJyaWNPYmplY3QsIGJ5LCBzY2FsZVByb3BvcnRpb25hbGx5KSB7XG4gICAgdmFyIGxvY2tYID0gZmFicmljT2JqZWN0LmxvY2tTY2FsaW5nWCwgbG9ja1kgPSBmYWJyaWNPYmplY3QubG9ja1NjYWxpbmdZO1xuICAgIGlmIChsb2NrWCAmJiBsb2NrWSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghYnkgJiYgKGxvY2tYIHx8IGxvY2tZKSAmJiBzY2FsZVByb3BvcnRpb25hbGx5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGxvY2tYICYmIGJ5ID09PSAneCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAobG9ja1kgJiYgYnkgPT09ICd5Jykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiByZXR1cm4gdGhlIGNvcnJlY3QgY3Vyc29yIHN0eWxlIGZvciB0aGUgc2NhbGUgYWN0aW9uXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGNhdXNpbmcgdGhlIHNjYWxlXG4gICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgdGhlIGNvbnRyb2wgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoZSBhY3Rpb25cbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIGZhYnJpYyBvYmplY3QgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoZSBhY3Rpb25cbiAgICogQHJldHVybiB7U3RyaW5nfSBhIHZhbGlkIGNzcyBzdHJpbmcgZm9yIHRoZSBjdXJzb3JcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxlQ3Vyc29yU3R5bGVIYW5kbGVyKGV2ZW50RGF0YSwgY29udHJvbCwgZmFicmljT2JqZWN0KSB7XG4gICAgdmFyIG5vdEFsbG93ZWQgPSAnbm90LWFsbG93ZWQnLFxuICAgICAgICBzY2FsZVByb3BvcnRpb25hbGx5ID0gc2NhbGVJc1Byb3BvcnRpb25hbChldmVudERhdGEsIGZhYnJpY09iamVjdCksXG4gICAgICAgIGJ5ID0gJyc7XG4gICAgaWYgKGNvbnRyb2wueCAhPT0gMCAmJiBjb250cm9sLnkgPT09IDApIHtcbiAgICAgIGJ5ID0gJ3gnO1xuICAgIH1cbiAgICBlbHNlIGlmIChjb250cm9sLnggPT09IDAgJiYgY29udHJvbC55ICE9PSAwKSB7XG4gICAgICBieSA9ICd5JztcbiAgICB9XG4gICAgaWYgKHNjYWxpbmdJc0ZvcmJpZGRlbihmYWJyaWNPYmplY3QsIGJ5LCBzY2FsZVByb3BvcnRpb25hbGx5KSkge1xuICAgICAgcmV0dXJuIG5vdEFsbG93ZWQ7XG4gICAgfVxuICAgIHZhciBuID0gZmluZENvcm5lclF1YWRyYW50KGZhYnJpY09iamVjdCwgY29udHJvbCk7XG4gICAgcmV0dXJuIHNjYWxlTWFwW25dICsgJy1yZXNpemUnO1xuICB9XG5cbiAgLyoqXG4gICAqIHJldHVybiB0aGUgY29ycmVjdCBjdXJzb3Igc3R5bGUgZm9yIHRoZSBza2V3IGFjdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBjYXVzaW5nIHRoZSBzY2FsZVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIHRoZSBjb250cm9sIHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ30gYSB2YWxpZCBjc3Mgc3RyaW5nIGZvciB0aGUgY3Vyc29yXG4gICAqL1xuICBmdW5jdGlvbiBza2V3Q3Vyc29yU3R5bGVIYW5kbGVyKGV2ZW50RGF0YSwgY29udHJvbCwgZmFicmljT2JqZWN0KSB7XG4gICAgdmFyIG5vdEFsbG93ZWQgPSAnbm90LWFsbG93ZWQnO1xuICAgIGlmIChjb250cm9sLnggIT09IDAgJiYgZmFicmljT2JqZWN0LmxvY2tTa2V3aW5nWSkge1xuICAgICAgcmV0dXJuIG5vdEFsbG93ZWQ7XG4gICAgfVxuICAgIGlmIChjb250cm9sLnkgIT09IDAgJiYgZmFicmljT2JqZWN0LmxvY2tTa2V3aW5nWCkge1xuICAgICAgcmV0dXJuIG5vdEFsbG93ZWQ7XG4gICAgfVxuICAgIHZhciBuID0gZmluZENvcm5lclF1YWRyYW50KGZhYnJpY09iamVjdCwgY29udHJvbCkgJSA0O1xuICAgIHJldHVybiBza2V3TWFwW25dICsgJy1yZXNpemUnO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbWJpbmUgc2tldyBhbmQgc2NhbGUgc3R5bGUgaGFuZGxlcnMgdG8gY292ZXIgZmFicmljIHN0YW5kYXJkIHVzZSBjYXNlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGNhdXNpbmcgdGhlIHNjYWxlXG4gICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgdGhlIGNvbnRyb2wgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoZSBhY3Rpb25cbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIGZhYnJpYyBvYmplY3QgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoZSBhY3Rpb25cbiAgICogQHJldHVybiB7U3RyaW5nfSBhIHZhbGlkIGNzcyBzdHJpbmcgZm9yIHRoZSBjdXJzb3JcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxlU2tld0N1cnNvclN0eWxlSGFuZGxlcihldmVudERhdGEsIGNvbnRyb2wsIGZhYnJpY09iamVjdCkge1xuICAgIGlmIChldmVudERhdGFbZmFicmljT2JqZWN0LmNhbnZhcy5hbHRBY3Rpb25LZXldKSB7XG4gICAgICByZXR1cm4gY29udHJvbHMuc2tld0N1cnNvclN0eWxlSGFuZGxlcihldmVudERhdGEsIGNvbnRyb2wsIGZhYnJpY09iamVjdCk7XG4gICAgfVxuICAgIHJldHVybiBjb250cm9scy5zY2FsZUN1cnNvclN0eWxlSGFuZGxlcihldmVudERhdGEsIGNvbnRyb2wsIGZhYnJpY09iamVjdCk7XG4gIH1cblxuICAvKipcbiAgICogSW5zcGVjdCBldmVudCwgY29udHJvbCBhbmQgZmFicmljT2JqZWN0IHRvIHJldHVybiB0aGUgY29ycmVjdCBhY3Rpb24gbmFtZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBjYXVzaW5nIHRoZSBzY2FsZVxuICAgKiBAcGFyYW0ge2ZhYnJpYy5Db250cm9sfSBjb250cm9sIHRoZSBjb250cm9sIHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IHRoYXQgaXMgaW50ZXJlc3RlZCBpbiB0aGUgYWN0aW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ30gYW4gYWN0aW9uIG5hbWVcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxlT3JTa2V3QWN0aW9uTmFtZShldmVudERhdGEsIGNvbnRyb2wsIGZhYnJpY09iamVjdCkge1xuICAgIHZhciBpc0FsdGVybmF0aXZlID0gZXZlbnREYXRhW2ZhYnJpY09iamVjdC5jYW52YXMuYWx0QWN0aW9uS2V5XTtcbiAgICBpZiAoY29udHJvbC54ID09PSAwKSB7XG4gICAgICAvLyB0aGVuIGlzIHNjYWxlWSBvciBza2V3WFxuICAgICAgcmV0dXJuIGlzQWx0ZXJuYXRpdmUgPyAnc2tld1gnIDogJ3NjYWxlWSc7XG4gICAgfVxuICAgIGlmIChjb250cm9sLnkgPT09IDApIHtcbiAgICAgIC8vIHRoZW4gaXMgc2NhbGVZIG9yIHNrZXdYXG4gICAgICByZXR1cm4gaXNBbHRlcm5hdGl2ZSA/ICdza2V3WScgOiAnc2NhbGVYJztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmluZCB0aGUgY29ycmVjdCBzdHlsZSBmb3IgdGhlIGNvbnRyb2wgdGhhdCBpcyB1c2VkIGZvciByb3RhdGlvbi5cbiAgICogdGhpcyBmdW5jdGlvbiBpcyB2ZXJ5IHNpbXBsZSBhbmQgaXQganVzdCB0YWtlIGNhcmUgb2Ygbm90LWFsbG93ZWQgb3Igc3RhbmRhcmQgY3Vyc29yXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGNhdXNpbmcgdGhlIHNjYWxlXG4gICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgdGhlIGNvbnRyb2wgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoZSBhY3Rpb25cbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIGZhYnJpYyBvYmplY3QgdGhhdCBpcyBpbnRlcmVzdGVkIGluIHRoZSBhY3Rpb25cbiAgICogQHJldHVybiB7U3RyaW5nfSBhIHZhbGlkIGNzcyBzdHJpbmcgZm9yIHRoZSBjdXJzb3JcbiAgICovXG4gIGZ1bmN0aW9uIHJvdGF0aW9uU3R5bGVIYW5kbGVyKGV2ZW50RGF0YSwgY29udHJvbCwgZmFicmljT2JqZWN0KSB7XG4gICAgaWYgKGZhYnJpY09iamVjdC5sb2NrUm90YXRpb24pIHtcbiAgICAgIHJldHVybiAnbm90LWFsbG93ZWQnO1xuICAgIH1cbiAgICByZXR1cm4gY29udHJvbC5jdXJzb3JTdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbW1vbkV2ZW50SW5mbyhldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIHJldHVybiB7XG4gICAgICBlOiBldmVudERhdGEsXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIHBvaW50ZXI6IHtcbiAgICAgICAgeDogeCxcbiAgICAgICAgeTogeSxcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXAgYW4gYWN0aW9uIGhhbmRsZXIgd2l0aCBzYXZpbmcvcmVzdG9yaW5nIG9iamVjdCBwb3NpdGlvbiBvbiB0aGUgdHJhbnNmb3JtLlxuICAgKiB0aGlzIGlzIHRoZSBjb2RlIHRoYXQgcGVybWl0cyB0byBvYmplY3RzIHRvIGtlZXAgdGhlaXIgcG9zaXRpb24gd2hpbGUgdHJhbnNmb3JtaW5nLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhY3Rpb25IYW5kbGVyIHRoZSBmdW5jdGlvbiB0byB3cmFwXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHdpdGggYW4gYWN0aW9uIGhhbmRsZXIgc2lnbmF0dXJlXG4gICAqL1xuICBmdW5jdGlvbiB3cmFwV2l0aEZpeGVkQW5jaG9yKGFjdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0cmFuc2Zvcm0udGFyZ2V0LCBjZW50ZXJQb2ludCA9IHRhcmdldC5nZXRDZW50ZXJQb2ludCgpLFxuICAgICAgICAgIGNvbnN0cmFpbnQgPSB0YXJnZXQudHJhbnNsYXRlVG9PcmlnaW5Qb2ludChjZW50ZXJQb2ludCwgdHJhbnNmb3JtLm9yaWdpblgsIHRyYW5zZm9ybS5vcmlnaW5ZKSxcbiAgICAgICAgICBhY3Rpb25QZXJmb3JtZWQgPSBhY3Rpb25IYW5kbGVyKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgICAgIHRhcmdldC5zZXRQb3NpdGlvbkJ5T3JpZ2luKGNvbnN0cmFpbnQsIHRyYW5zZm9ybS5vcmlnaW5YLCB0cmFuc2Zvcm0ub3JpZ2luWSk7XG4gICAgICByZXR1cm4gYWN0aW9uUGVyZm9ybWVkO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogV3JhcCBhbiBhY3Rpb24gaGFuZGxlciB3aXRoIGZpcmluZyBhbiBldmVudCBpZiB0aGUgYWN0aW9uIGlzIHBlcmZvcm1lZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhY3Rpb25IYW5kbGVyIHRoZSBmdW5jdGlvbiB0byB3cmFwXG4gICAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIGZ1bmN0aW9uIHdpdGggYW4gYWN0aW9uIGhhbmRsZXIgc2lnbmF0dXJlXG4gICAqL1xuICBmdW5jdGlvbiB3cmFwV2l0aEZpcmVFdmVudChldmVudE5hbWUsIGFjdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICAgIHZhciBhY3Rpb25QZXJmb3JtZWQgPSBhY3Rpb25IYW5kbGVyKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgICAgIGlmIChhY3Rpb25QZXJmb3JtZWQpIHtcbiAgICAgICAgZmlyZUV2ZW50KGV2ZW50TmFtZSwgY29tbW9uRXZlbnRJbmZvKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWN0aW9uUGVyZm9ybWVkO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBhIHBvaW50IGRlc2NyaWJlZCBieSB4IGFuZCB5IGluIGEgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBvYmplY3RcbiAgICogYm91bmRpbmcgYm94LlxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5ZXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAqIEByZXR1cm4ge0ZhYnJpYy5Qb2ludH0gdGhlIG5vcm1hbGl6ZWQgcG9pbnRcbiAgICovXG4gIGZ1bmN0aW9uIGdldExvY2FsUG9pbnQodHJhbnNmb3JtLCBvcmlnaW5YLCBvcmlnaW5ZLCB4LCB5KSB7XG4gICAgdmFyIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgIGNvbnRyb2wgPSB0YXJnZXQuY29udHJvbHNbdHJhbnNmb3JtLmNvcm5lcl0sXG4gICAgICAgIHpvb20gPSB0YXJnZXQuY2FudmFzLmdldFpvb20oKSxcbiAgICAgICAgcGFkZGluZyA9IHRhcmdldC5wYWRkaW5nIC8gem9vbSxcbiAgICAgICAgbG9jYWxQb2ludCA9IHRhcmdldC50b0xvY2FsUG9pbnQobmV3IGZhYnJpYy5Qb2ludCh4LCB5KSwgb3JpZ2luWCwgb3JpZ2luWSk7XG4gICAgaWYgKGxvY2FsUG9pbnQueCA+PSBwYWRkaW5nKSB7XG4gICAgICBsb2NhbFBvaW50LnggLT0gcGFkZGluZztcbiAgICB9XG4gICAgaWYgKGxvY2FsUG9pbnQueCA8PSAtcGFkZGluZykge1xuICAgICAgbG9jYWxQb2ludC54ICs9IHBhZGRpbmc7XG4gICAgfVxuICAgIGlmIChsb2NhbFBvaW50LnkgPj0gcGFkZGluZykge1xuICAgICAgbG9jYWxQb2ludC55IC09IHBhZGRpbmc7XG4gICAgfVxuICAgIGlmIChsb2NhbFBvaW50LnkgPD0gcGFkZGluZykge1xuICAgICAgbG9jYWxQb2ludC55ICs9IHBhZGRpbmc7XG4gICAgfVxuICAgIGxvY2FsUG9pbnQueCAtPSBjb250cm9sLm9mZnNldFg7XG4gICAgbG9jYWxQb2ludC55IC09IGNvbnRyb2wub2Zmc2V0WTtcbiAgICByZXR1cm4gbG9jYWxQb2ludDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlY3QgaWYgdGhlIGZhYnJpYyBvYmplY3QgaXMgZmxpcHBlZCBvbiBvbmUgc2lkZS5cbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSB0YXJnZXRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBvbmUgZmxpcCwgYnV0IG5vdCB0d28uXG4gICAqL1xuICBmdW5jdGlvbiB0YXJnZXRIYXNPbmVGbGlwKHRhcmdldCkge1xuICAgIHJldHVybiB0YXJnZXQuZmxpcFggIT09IHRhcmdldC5mbGlwWTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNvbXBlbnNhdGUgdGhlIHNjYWxlIGZhY3RvciB3aGVuIHNrZXcgaXMgYXBwbGllZCBvbiBib3RoIGF4ZXNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBlbnNhdGVTY2FsZUZvclNrZXcodGFyZ2V0LCBvcHBvc2l0ZVNrZXcsIHNjYWxlVG9Db21wZW5zYXRlLCBheGlzLCByZWZlcmVuY2UpIHtcbiAgICBpZiAodGFyZ2V0W29wcG9zaXRlU2tld10gIT09IDApIHtcbiAgICAgIHZhciBuZXdEaW0gPSB0YXJnZXQuX2dldFRyYW5zZm9ybWVkRGltZW5zaW9ucygpW2F4aXNdO1xuICAgICAgdmFyIG5ld1ZhbHVlID0gcmVmZXJlbmNlIC8gbmV3RGltICogdGFyZ2V0W3NjYWxlVG9Db21wZW5zYXRlXTtcbiAgICAgIHRhcmdldC5zZXQoc2NhbGVUb0NvbXBlbnNhdGUsIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWN0aW9uIGhhbmRsZXIgZm9yIHNrZXdpbmcgb24gdGhlIFggYXhpc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gc2tld09iamVjdFgoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdHJhbnNmb3JtLnRhcmdldCxcbiAgICAgICAgLy8gZmluZCBob3cgYmlnIHRoZSBvYmplY3Qgd291bGQgYmUsIGlmIHRoZXJlIHdhcyBubyBza2V3WC4gdGFrZXMgaW4gYWNjb3VudCBzY2FsaW5nXG4gICAgICAgIGRpbU5vU2tldyA9IHRhcmdldC5fZ2V0VHJhbnNmb3JtZWREaW1lbnNpb25zKDAsIHRhcmdldC5za2V3WSksXG4gICAgICAgIGxvY2FsUG9pbnQgPSBnZXRMb2NhbFBvaW50KHRyYW5zZm9ybSwgdHJhbnNmb3JtLm9yaWdpblgsIHRyYW5zZm9ybS5vcmlnaW5ZLCB4LCB5KSxcbiAgICAgICAgLy8gdGhlIG1vdXNlIGlzIGluIHRoZSBjZW50ZXIgb2YgdGhlIG9iamVjdCwgYW5kIHdlIHdhbnQgaXQgdG8gc3RheSB0aGVyZS5cbiAgICAgICAgLy8gc28gdGhlIG9iamVjdCB3aWxsIGdyb3cgdHdpY2UgYXMgbXVjaCBhcyB0aGUgbW91c2UuXG4gICAgICAgIC8vIHRoaXMgbWFrZXMgdGhlIHNrZXcgZ3Jvd3RoIHRvIGxvY2FsUG9pbnQgKiAyIC0gZGltTm9Ta2V3LlxuICAgICAgICB0b3RhbFNrZXdTaXplID0gTWF0aC5hYnMobG9jYWxQb2ludC54ICogMikgLSBkaW1Ob1NrZXcueCxcbiAgICAgICAgY3VycmVudFNrZXcgPSB0YXJnZXQuc2tld1gsIG5ld1NrZXc7XG4gICAgaWYgKHRvdGFsU2tld1NpemUgPCAyKSB7XG4gICAgICAvLyBsZXQncyBtYWtlIGl0IGVhc3kgdG8gZ28gYmFjayB0byBwb3NpdGlvbiAwLlxuICAgICAgbmV3U2tldyA9IDA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgbmV3U2tldyA9IHJhZGlhbnNUb0RlZ3JlZXMoXG4gICAgICAgIE1hdGguYXRhbjIoKHRvdGFsU2tld1NpemUgLyB0YXJnZXQuc2NhbGVYKSwgKGRpbU5vU2tldy55IC8gdGFyZ2V0LnNjYWxlWSkpXG4gICAgICApO1xuICAgICAgLy8gbm93IHdlIGhhdmUgdG8gZmluZCB0aGUgc2lnbiBvZiB0aGUgc2tldy5cbiAgICAgIC8vIGl0IG1vc3RseSBkZXBlbmQgb24gdGhlIG9yaWdpbiBvZiB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgIGlmICh0cmFuc2Zvcm0ub3JpZ2luWCA9PT0gTEVGVCAmJiB0cmFuc2Zvcm0ub3JpZ2luWSA9PT0gQk9UVE9NKSB7XG4gICAgICAgIG5ld1NrZXcgPSAtbmV3U2tldztcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2Zvcm0ub3JpZ2luWCA9PT0gUklHSFQgJiYgdHJhbnNmb3JtLm9yaWdpblkgPT09IFRPUCkge1xuICAgICAgICBuZXdTa2V3ID0gLW5ld1NrZXc7XG4gICAgICB9XG4gICAgICBpZiAodGFyZ2V0SGFzT25lRmxpcCh0YXJnZXQpKSB7XG4gICAgICAgIG5ld1NrZXcgPSAtbmV3U2tldztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGhhc1NrZXdlZCA9IGN1cnJlbnRTa2V3ICE9PSBuZXdTa2V3O1xuICAgIGlmIChoYXNTa2V3ZWQpIHtcbiAgICAgIHZhciBkaW1CZWZvcmVTa2V3aW5nID0gdGFyZ2V0Ll9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKS55O1xuICAgICAgdGFyZ2V0LnNldCgnc2tld1gnLCBuZXdTa2V3KTtcbiAgICAgIGNvbXBlbnNhdGVTY2FsZUZvclNrZXcodGFyZ2V0LCAnc2tld1knLCAnc2NhbGVZJywgJ3knLCBkaW1CZWZvcmVTa2V3aW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc1NrZXdlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3Rpb24gaGFuZGxlciBmb3Igc2tld2luZyBvbiB0aGUgWSBheGlzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBza2V3T2JqZWN0WShldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIHZhciB0YXJnZXQgPSB0cmFuc2Zvcm0udGFyZ2V0LFxuICAgICAgICAvLyBmaW5kIGhvdyBiaWcgdGhlIG9iamVjdCB3b3VsZCBiZSwgaWYgdGhlcmUgd2FzIG5vIHNrZXdYLiB0YWtlcyBpbiBhY2NvdW50IHNjYWxpbmdcbiAgICAgICAgZGltTm9Ta2V3ID0gdGFyZ2V0Ll9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnModGFyZ2V0LnNrZXdYLCAwKSxcbiAgICAgICAgbG9jYWxQb2ludCA9IGdldExvY2FsUG9pbnQodHJhbnNmb3JtLCB0cmFuc2Zvcm0ub3JpZ2luWCwgdHJhbnNmb3JtLm9yaWdpblksIHgsIHkpLFxuICAgICAgICAvLyB0aGUgbW91c2UgaXMgaW4gdGhlIGNlbnRlciBvZiB0aGUgb2JqZWN0LCBhbmQgd2Ugd2FudCBpdCB0byBzdGF5IHRoZXJlLlxuICAgICAgICAvLyBzbyB0aGUgb2JqZWN0IHdpbGwgZ3JvdyB0d2ljZSBhcyBtdWNoIGFzIHRoZSBtb3VzZS5cbiAgICAgICAgLy8gdGhpcyBtYWtlcyB0aGUgc2tldyBncm93dGggdG8gbG9jYWxQb2ludCAqIDIgLSBkaW1Ob1NrZXcuXG4gICAgICAgIHRvdGFsU2tld1NpemUgPSBNYXRoLmFicyhsb2NhbFBvaW50LnkgKiAyKSAtIGRpbU5vU2tldy55LFxuICAgICAgICBjdXJyZW50U2tldyA9IHRhcmdldC5za2V3WSwgbmV3U2tldztcbiAgICBpZiAodG90YWxTa2V3U2l6ZSA8IDIpIHtcbiAgICAgIC8vIGxldCdzIG1ha2UgaXQgZWFzeSB0byBnbyBiYWNrIHRvIHBvc2l0aW9uIDAuXG4gICAgICBuZXdTa2V3ID0gMDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBuZXdTa2V3ID0gcmFkaWFuc1RvRGVncmVlcyhcbiAgICAgICAgTWF0aC5hdGFuMigodG90YWxTa2V3U2l6ZSAvIHRhcmdldC5zY2FsZVkpLCAoZGltTm9Ta2V3LnggLyB0YXJnZXQuc2NhbGVYKSlcbiAgICAgICk7XG4gICAgICAvLyBub3cgd2UgaGF2ZSB0byBmaW5kIHRoZSBzaWduIG9mIHRoZSBza2V3LlxuICAgICAgLy8gaXQgbW9zdGx5IGRlcGVuZCBvbiB0aGUgb3JpZ2luIG9mIHRyYW5zZm9ybWF0aW9uLlxuICAgICAgaWYgKHRyYW5zZm9ybS5vcmlnaW5YID09PSBMRUZUICYmIHRyYW5zZm9ybS5vcmlnaW5ZID09PSBCT1RUT00pIHtcbiAgICAgICAgbmV3U2tldyA9IC1uZXdTa2V3O1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zZm9ybS5vcmlnaW5YID09PSBSSUdIVCAmJiB0cmFuc2Zvcm0ub3JpZ2luWSA9PT0gVE9QKSB7XG4gICAgICAgIG5ld1NrZXcgPSAtbmV3U2tldztcbiAgICAgIH1cbiAgICAgIGlmICh0YXJnZXRIYXNPbmVGbGlwKHRhcmdldCkpIHtcbiAgICAgICAgbmV3U2tldyA9IC1uZXdTa2V3O1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaGFzU2tld2VkID0gY3VycmVudFNrZXcgIT09IG5ld1NrZXc7XG4gICAgaWYgKGhhc1NrZXdlZCkge1xuICAgICAgdmFyIGRpbUJlZm9yZVNrZXdpbmcgPSB0YXJnZXQuX2dldFRyYW5zZm9ybWVkRGltZW5zaW9ucygpLng7XG4gICAgICB0YXJnZXQuc2V0KCdza2V3WScsIG5ld1NrZXcpO1xuICAgICAgY29tcGVuc2F0ZVNjYWxlRm9yU2tldyh0YXJnZXQsICdza2V3WCcsICdzY2FsZVgnLCAneCcsIGRpbUJlZm9yZVNrZXdpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gaGFzU2tld2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyYXBwZWQgQWN0aW9uIGhhbmRsZXIgZm9yIHNrZXdpbmcgb24gdGhlIFkgYXhpcywgdGFrZXMgY2FyZSBvZiB0aGVcbiAgICogc2tldyBkaXJlY3Rpb24gYW5kIGRldGVybWluZSB0aGUgY29ycmVjdCB0cmFuc2Zvcm0gb3JpZ2luIGZvciB0aGUgYW5jaG9yIHBvaW50XG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKi9cbiAgZnVuY3Rpb24gc2tld0hhbmRsZXJYKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgLy8gc3RlcDEgZmlndXJlIG91dCBhbmQgY2hhbmdlIHRyYW5zZm9ybSBvcmlnaW4uXG4gICAgLy8gaWYgc2tld1ggPiAwIGFuZCBvcmlnaW5ZIGJvdHRvbSB3ZSBhbmNob3Igb24gcmlnaHRcbiAgICAvLyBpZiBza2V3WCA+IDAgYW5kIG9yaWdpblkgdG9wIHdlIGFuY2hvciBvbiBsZWZ0XG4gICAgLy8gaWYgc2tld1ggPCAwIGFuZCBvcmlnaW5ZIGJvdHRvbSB3ZSBhbmNob3Igb24gbGVmdFxuICAgIC8vIGlmIHNrZXdYIDwgMCBhbmQgb3JpZ2luWSB0b3Agd2UgYW5jaG9yIG9uIHJpZ2h0XG4gICAgLy8gaWYgc2tld1ggaXMgMCwgd2UgbG9vayBmb3IgbW91c2UgcG9zaXRpb24gdG8gdW5kZXJzdGFuZCB3aGVyZSBhcmUgd2UgZ29pbmcuXG4gICAgdmFyIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsIGN1cnJlbnRTa2V3ID0gdGFyZ2V0LnNrZXdYLCBvcmlnaW5YLCBvcmlnaW5ZID0gdHJhbnNmb3JtLm9yaWdpblk7XG4gICAgaWYgKHRhcmdldC5sb2NrU2tld2luZ1gpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRTa2V3ID09PSAwKSB7XG4gICAgICB2YXIgbG9jYWxQb2ludEZyb21DZW50ZXIgPSBnZXRMb2NhbFBvaW50KHRyYW5zZm9ybSwgQ0VOVEVSLCBDRU5URVIsIHgsIHkpO1xuICAgICAgaWYgKGxvY2FsUG9pbnRGcm9tQ2VudGVyLnggPiAwKSB7XG4gICAgICAgIC8vIHdlIGFyZSBwdWxsaW5nIHJpZ2h0LCBhbmNob3IgbGVmdDtcbiAgICAgICAgb3JpZ2luWCA9IExFRlQ7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gd2UgYXJlIHB1bGxpbmcgcmlnaHQsIGFuY2hvciByaWdodFxuICAgICAgICBvcmlnaW5YID0gUklHSFQ7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGN1cnJlbnRTa2V3ID4gMCkge1xuICAgICAgICBvcmlnaW5YID0gb3JpZ2luWSA9PT0gVE9QID8gTEVGVCA6IFJJR0hUO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRTa2V3IDwgMCkge1xuICAgICAgICBvcmlnaW5YID0gb3JpZ2luWSA9PT0gVE9QID8gUklHSFQgOiBMRUZUO1xuICAgICAgfVxuICAgICAgLy8gaXMgdGhlIG9iamVjdCBmbGlwcGVkIG9uIG9uZSBzaWRlIG9ubHk/IHN3YXAgdGhlIG9yaWdpbi5cbiAgICAgIGlmICh0YXJnZXRIYXNPbmVGbGlwKHRhcmdldCkpIHtcbiAgICAgICAgb3JpZ2luWCA9IG9yaWdpblggPT09IExFRlQgPyBSSUdIVCA6IExFRlQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gb25jZSB3ZSBoYXZlIHRoZSBvcmlnaW4sIHdlIGZpbmQgdGhlIGFuY2hvciBwb2ludFxuICAgIHRyYW5zZm9ybS5vcmlnaW5YID0gb3JpZ2luWDtcbiAgICB2YXIgZmluYWxIYW5kbGVyID0gd3JhcFdpdGhGaXJlRXZlbnQoJ3NrZXdpbmcnLCB3cmFwV2l0aEZpeGVkQW5jaG9yKHNrZXdPYmplY3RYKSk7XG4gICAgcmV0dXJuIGZpbmFsSGFuZGxlcihldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHBlZCBBY3Rpb24gaGFuZGxlciBmb3Igc2tld2luZyBvbiB0aGUgWSBheGlzLCB0YWtlcyBjYXJlIG9mIHRoZVxuICAgKiBza2V3IGRpcmVjdGlvbiBhbmQgZGV0ZXJtaW5lIHRoZSBjb3JyZWN0IHRyYW5zZm9ybSBvcmlnaW4gZm9yIHRoZSBhbmNob3IgcG9pbnRcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBkb2luZyB0aGUgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2Zvcm0gamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZyBhIHNlcmllcyBvZiBpbmZvcm1hdGlvbiBhcm91bmQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IGN1cnJlbnQgbW91c2UgeCBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgY3VycmVudCBtb3VzZSB5IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNvbWUgY2hhbmdlIGhhcHBlbmVkXG4gICAqL1xuICBmdW5jdGlvbiBza2V3SGFuZGxlclkoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICAvLyBzdGVwMSBmaWd1cmUgb3V0IGFuZCBjaGFuZ2UgdHJhbnNmb3JtIG9yaWdpbi5cbiAgICAvLyBpZiBza2V3WSA+IDAgYW5kIG9yaWdpblggbGVmdCB3ZSBhbmNob3Igb24gdG9wXG4gICAgLy8gaWYgc2tld1kgPiAwIGFuZCBvcmlnaW5YIHJpZ2h0IHdlIGFuY2hvciBvbiBib3R0b21cbiAgICAvLyBpZiBza2V3WSA8IDAgYW5kIG9yaWdpblggbGVmdCB3ZSBhbmNob3Igb24gYm90dG9tXG4gICAgLy8gaWYgc2tld1kgPCAwIGFuZCBvcmlnaW5YIHJpZ2h0IHdlIGFuY2hvciBvbiB0b3BcbiAgICAvLyBpZiBza2V3WSBpcyAwLCB3ZSBsb29rIGZvciBtb3VzZSBwb3NpdGlvbiB0byB1bmRlcnN0YW5kIHdoZXJlIGFyZSB3ZSBnb2luZy5cbiAgICB2YXIgdGFyZ2V0ID0gdHJhbnNmb3JtLnRhcmdldCwgY3VycmVudFNrZXcgPSB0YXJnZXQuc2tld1ksIG9yaWdpblksIG9yaWdpblggPSB0cmFuc2Zvcm0ub3JpZ2luWDtcbiAgICBpZiAodGFyZ2V0LmxvY2tTa2V3aW5nWSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFNrZXcgPT09IDApIHtcbiAgICAgIHZhciBsb2NhbFBvaW50RnJvbUNlbnRlciA9IGdldExvY2FsUG9pbnQodHJhbnNmb3JtLCBDRU5URVIsIENFTlRFUiwgeCwgeSk7XG4gICAgICBpZiAobG9jYWxQb2ludEZyb21DZW50ZXIueSA+IDApIHtcbiAgICAgICAgLy8gd2UgYXJlIHB1bGxpbmcgZG93biwgYW5jaG9yIHVwO1xuICAgICAgICBvcmlnaW5ZID0gVE9QO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIHdlIGFyZSBwdWxsaW5nIHVwLCBhbmNob3IgZG93blxuICAgICAgICBvcmlnaW5ZID0gQk9UVE9NO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmIChjdXJyZW50U2tldyA+IDApIHtcbiAgICAgICAgb3JpZ2luWSA9IG9yaWdpblggPT09IExFRlQgPyBUT1AgOiBCT1RUT007XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFNrZXcgPCAwKSB7XG4gICAgICAgIG9yaWdpblkgPSBvcmlnaW5YID09PSBMRUZUID8gQk9UVE9NIDogVE9QO1xuICAgICAgfVxuICAgICAgLy8gaXMgdGhlIG9iamVjdCBmbGlwcGVkIG9uIG9uZSBzaWRlIG9ubHk/IHN3YXAgdGhlIG9yaWdpbi5cbiAgICAgIGlmICh0YXJnZXRIYXNPbmVGbGlwKHRhcmdldCkpIHtcbiAgICAgICAgb3JpZ2luWSA9IG9yaWdpblkgPT09IFRPUCA/IEJPVFRPTSA6IFRPUDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBvbmNlIHdlIGhhdmUgdGhlIG9yaWdpbiwgd2UgZmluZCB0aGUgYW5jaG9yIHBvaW50XG4gICAgdHJhbnNmb3JtLm9yaWdpblkgPSBvcmlnaW5ZO1xuICAgIHZhciBmaW5hbEhhbmRsZXIgPSB3cmFwV2l0aEZpcmVFdmVudCgnc2tld2luZycsIHdyYXBXaXRoRml4ZWRBbmNob3Ioc2tld09iamVjdFkpKTtcbiAgICByZXR1cm4gZmluYWxIYW5kbGVyKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3Rpb24gaGFuZGxlciBmb3Igcm90YXRpb24gYW5kIHNuYXBwaW5nLCB3aXRob3V0IGFuY2hvciBwb2ludC5cbiAgICogTmVlZHMgdG8gYmUgd3JhcHBlZCB3aXRoIGB3cmFwV2l0aEZpeGVkQW5jaG9yYCB0byBiZSBlZmZlY3RpdmVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBkb2luZyB0aGUgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2Zvcm0gamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZyBhIHNlcmllcyBvZiBpbmZvcm1hdGlvbiBhcm91bmQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IGN1cnJlbnQgbW91c2UgeCBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgY3VycmVudCBtb3VzZSB5IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNvbWUgY2hhbmdlIGhhcHBlbmVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiByb3RhdGlvbldpdGhTbmFwcGluZyhldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIHZhciB0ID0gdHJhbnNmb3JtLFxuICAgICAgICB0YXJnZXQgPSB0LnRhcmdldCxcbiAgICAgICAgcGl2b3RQb2ludCA9IHRhcmdldC50cmFuc2xhdGVUb09yaWdpblBvaW50KHRhcmdldC5nZXRDZW50ZXJQb2ludCgpLCB0Lm9yaWdpblgsIHQub3JpZ2luWSk7XG5cbiAgICBpZiAodGFyZ2V0LmxvY2tSb3RhdGlvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsYXN0QW5nbGUgPSBNYXRoLmF0YW4yKHQuZXkgLSBwaXZvdFBvaW50LnksIHQuZXggLSBwaXZvdFBvaW50LngpLFxuICAgICAgICBjdXJBbmdsZSA9IE1hdGguYXRhbjIoeSAtIHBpdm90UG9pbnQueSwgeCAtIHBpdm90UG9pbnQueCksXG4gICAgICAgIGFuZ2xlID0gcmFkaWFuc1RvRGVncmVlcyhjdXJBbmdsZSAtIGxhc3RBbmdsZSArIHQudGhldGEpLFxuICAgICAgICBoYXNSb3RhdGVkID0gdHJ1ZTtcblxuICAgIGlmICh0YXJnZXQuc25hcEFuZ2xlID4gMCkge1xuICAgICAgdmFyIHNuYXBBbmdsZSAgPSB0YXJnZXQuc25hcEFuZ2xlLFxuICAgICAgICAgIHNuYXBUaHJlc2hvbGQgID0gdGFyZ2V0LnNuYXBUaHJlc2hvbGQgfHwgc25hcEFuZ2xlLFxuICAgICAgICAgIHJpZ2h0QW5nbGVMb2NrZWQgPSBNYXRoLmNlaWwoYW5nbGUgLyBzbmFwQW5nbGUpICogc25hcEFuZ2xlLFxuICAgICAgICAgIGxlZnRBbmdsZUxvY2tlZCA9IE1hdGguZmxvb3IoYW5nbGUgLyBzbmFwQW5nbGUpICogc25hcEFuZ2xlO1xuXG4gICAgICBpZiAoTWF0aC5hYnMoYW5nbGUgLSBsZWZ0QW5nbGVMb2NrZWQpIDwgc25hcFRocmVzaG9sZCkge1xuICAgICAgICBhbmdsZSA9IGxlZnRBbmdsZUxvY2tlZDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKE1hdGguYWJzKGFuZ2xlIC0gcmlnaHRBbmdsZUxvY2tlZCkgPCBzbmFwVGhyZXNob2xkKSB7XG4gICAgICAgIGFuZ2xlID0gcmlnaHRBbmdsZUxvY2tlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBub3JtYWxpemUgYW5nbGUgdG8gcG9zaXRpdmUgdmFsdWVcbiAgICBpZiAoYW5nbGUgPCAwKSB7XG4gICAgICBhbmdsZSA9IDM2MCArIGFuZ2xlO1xuICAgIH1cbiAgICBhbmdsZSAlPSAzNjA7XG5cbiAgICBoYXNSb3RhdGVkID0gdGFyZ2V0LmFuZ2xlICE9PSBhbmdsZTtcbiAgICB0YXJnZXQuYW5nbGUgPSBhbmdsZTtcbiAgICByZXR1cm4gaGFzUm90YXRlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBCYXNpYyBzY2FsaW5nIGxvZ2ljLCByZXVzZWQgd2l0aCBkaWZmZXJlbnQgY29uc3RyYWluIGZvciBzY2FsaW5nIFgsWSwgZnJlZWx5IG9yIGVxdWFsbHkuXG4gICAqIE5lZWRzIHRvIGJlIHdyYXBwZWQgd2l0aCBgd3JhcFdpdGhGaXhlZEFuY2hvcmAgdG8gYmUgZWZmZWN0aXZlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3Igc2NhbGluZ1xuICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5ieSAneCcsICd5JywgJ2VxdWFsbHknIG9yICcnIHRvIGluZGljYXRlIHR5cGUgb2Ygc2NhbGluZ1xuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNvbWUgY2hhbmdlIGhhcHBlbmVkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsZU9iamVjdChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciB0YXJnZXQgPSB0cmFuc2Zvcm0udGFyZ2V0LFxuICAgICAgICBsb2NrU2NhbGluZ1ggPSB0YXJnZXQubG9ja1NjYWxpbmdYLCBsb2NrU2NhbGluZ1kgPSB0YXJnZXQubG9ja1NjYWxpbmdZLFxuICAgICAgICBieSA9IG9wdGlvbnMuYnksIG5ld1BvaW50LCBzY2FsZVgsIHNjYWxlWSwgZGltLFxuICAgICAgICBzY2FsZVByb3BvcnRpb25hbGx5ID0gc2NhbGVJc1Byb3BvcnRpb25hbChldmVudERhdGEsIHRhcmdldCksXG4gICAgICAgIGZvcmJpZFNjYWxpbmcgPSBzY2FsaW5nSXNGb3JiaWRkZW4odGFyZ2V0LCBieSwgc2NhbGVQcm9wb3J0aW9uYWxseSksXG4gICAgICAgIHNpZ25YLCBzaWduWSwgZ2VzdHVyZVNjYWxlID0gdHJhbnNmb3JtLmdlc3R1cmVTY2FsZTtcblxuICAgIGlmIChmb3JiaWRTY2FsaW5nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChnZXN0dXJlU2NhbGUpIHtcbiAgICAgIHNjYWxlWCA9IHRyYW5zZm9ybS5zY2FsZVggKiBnZXN0dXJlU2NhbGU7XG4gICAgICBzY2FsZVkgPSB0cmFuc2Zvcm0uc2NhbGVZICogZ2VzdHVyZVNjYWxlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG5ld1BvaW50ID0gZ2V0TG9jYWxQb2ludCh0cmFuc2Zvcm0sIHRyYW5zZm9ybS5vcmlnaW5YLCB0cmFuc2Zvcm0ub3JpZ2luWSwgeCwgeSk7XG4gICAgICAvLyB1c2Ugb2Ygc2lnbjogV2UgdXNlIHNpZ24gdG8gZGV0ZWN0IGNoYW5nZSBvZiBkaXJlY3Rpb24gb2YgYW4gYWN0aW9uLiBzaWduIHVzdWFsbHkgY2hhbmdlIHdoZW5cbiAgICAgIC8vIHdlIGNyb3NzIHRoZSBvcmlnaW4gcG9pbnQgd2l0aCB0aGUgbW91c2UuIFNvIGEgc2NhbGUgZmxpcCBmb3IgZXhhbXBsZS4gVGhlcmUgaXMgYW4gaXNzdWUgd2hlbiBzY2FsaW5nXG4gICAgICAvLyBieSBjZW50ZXIgYW5kIHNjYWxpbmcgdXNpbmcgb25lIG1pZGRsZSBjb250cm9sICggZGVmYXVsdDogbXIsIG10LCBtbCwgbWIpLCB0aGUgbW91c2UgbW92ZW1lbnQgY2FuIGVhc2lseVxuICAgICAgLy8gY3Jvc3MgbWFueSB0aW1lIHRoZSBvcmlnaW4gcG9pbnQgYW5kIGZsaXAgdGhlIG9iamVjdC4gc28gd2UgbmVlZCBhIHdheSB0byBmaWx0ZXIgb3V0IHRoZSBub2lzZS5cbiAgICAgIC8vIFRoaXMgdGVybmFyeSBoZXJlIHNob3VsZCBiZSBvayB0byBmaWx0ZXIgb3V0IFggc2NhbGluZyB3aGVuIHdlIHdhbnQgWSBvbmx5IGFuZCB2aWNlIHZlcnNhLlxuICAgICAgc2lnblggPSBieSAhPT0gJ3knID8gc2lnbihuZXdQb2ludC54KSA6IDE7XG4gICAgICBzaWduWSA9IGJ5ICE9PSAneCcgPyBzaWduKG5ld1BvaW50LnkpIDogMTtcbiAgICAgIGlmICghdHJhbnNmb3JtLnNpZ25YKSB7XG4gICAgICAgIHRyYW5zZm9ybS5zaWduWCA9IHNpZ25YO1xuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc2Zvcm0uc2lnblkpIHtcbiAgICAgICAgdHJhbnNmb3JtLnNpZ25ZID0gc2lnblk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0YXJnZXQubG9ja1NjYWxpbmdGbGlwICYmXG4gICAgICAgICh0cmFuc2Zvcm0uc2lnblggIT09IHNpZ25YIHx8IHRyYW5zZm9ybS5zaWduWSAhPT0gc2lnblkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBkaW0gPSB0YXJnZXQuX2dldFRyYW5zZm9ybWVkRGltZW5zaW9ucygpO1xuICAgICAgLy8gbWlzc2luZyBkZXRlY3Rpb24gb2YgZmxpcCBhbmQgbG9naWMgdG8gc3dpdGNoIHRoZSBvcmlnaW5cbiAgICAgIGlmIChzY2FsZVByb3BvcnRpb25hbGx5ICYmICFieSkge1xuICAgICAgICAvLyB1bmlmb3JtIHNjYWxpbmdcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5hYnMobmV3UG9pbnQueCkgKyBNYXRoLmFicyhuZXdQb2ludC55KSxcbiAgICAgICAgICAgIG9yaWdpbmFsID0gdHJhbnNmb3JtLm9yaWdpbmFsLFxuICAgICAgICAgICAgb3JpZ2luYWxEaXN0YW5jZSA9IE1hdGguYWJzKGRpbS54ICogb3JpZ2luYWwuc2NhbGVYIC8gdGFyZ2V0LnNjYWxlWCkgK1xuICAgICAgICAgICAgICBNYXRoLmFicyhkaW0ueSAqIG9yaWdpbmFsLnNjYWxlWSAvIHRhcmdldC5zY2FsZVkpLFxuICAgICAgICAgICAgc2NhbGUgPSBkaXN0YW5jZSAvIG9yaWdpbmFsRGlzdGFuY2U7XG4gICAgICAgIHNjYWxlWCA9IG9yaWdpbmFsLnNjYWxlWCAqIHNjYWxlO1xuICAgICAgICBzY2FsZVkgPSBvcmlnaW5hbC5zY2FsZVkgKiBzY2FsZTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzY2FsZVggPSBNYXRoLmFicyhuZXdQb2ludC54ICogdGFyZ2V0LnNjYWxlWCAvIGRpbS54KTtcbiAgICAgICAgc2NhbGVZID0gTWF0aC5hYnMobmV3UG9pbnQueSAqIHRhcmdldC5zY2FsZVkgLyBkaW0ueSk7XG4gICAgICB9XG4gICAgICAvLyBpZiB3ZSBhcmUgc2NhbGluZyBieSBjZW50ZXIsIHdlIG5lZWQgdG8gZG91YmxlIHRoZSBzY2FsZVxuICAgICAgaWYgKGlzVHJhbnNmb3JtQ2VudGVyZWQodHJhbnNmb3JtKSkge1xuICAgICAgICBzY2FsZVggKj0gMjtcbiAgICAgICAgc2NhbGVZICo9IDI7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNmb3JtLnNpZ25YICE9PSBzaWduWCAmJiBieSAhPT0gJ3knKSB7XG4gICAgICAgIHRyYW5zZm9ybS5vcmlnaW5YID0gb3Bwb3NpdGVbdHJhbnNmb3JtLm9yaWdpblhdO1xuICAgICAgICBzY2FsZVggKj0gLTE7XG4gICAgICAgIHRyYW5zZm9ybS5zaWduWCA9IHNpZ25YO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zZm9ybS5zaWduWSAhPT0gc2lnblkgJiYgYnkgIT09ICd4Jykge1xuICAgICAgICB0cmFuc2Zvcm0ub3JpZ2luWSA9IG9wcG9zaXRlW3RyYW5zZm9ybS5vcmlnaW5ZXTtcbiAgICAgICAgc2NhbGVZICo9IC0xO1xuICAgICAgICB0cmFuc2Zvcm0uc2lnblkgPSBzaWduWTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gbWluU2NhbGUgaXMgdGFrZW4gYXJlIGluIHRoZSBzZXR0ZXIuXG4gICAgdmFyIG9sZFNjYWxlWCA9IHRhcmdldC5zY2FsZVgsIG9sZFNjYWxlWSA9IHRhcmdldC5zY2FsZVk7XG4gICAgaWYgKCFieSkge1xuICAgICAgIWxvY2tTY2FsaW5nWCAmJiB0YXJnZXQuc2V0KCdzY2FsZVgnLCBzY2FsZVgpO1xuICAgICAgIWxvY2tTY2FsaW5nWSAmJiB0YXJnZXQuc2V0KCdzY2FsZVknLCBzY2FsZVkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIC8vIGZvcmJpZGRlbiBjYXNlcyBhbHJlYWR5IGhhbmRsZWQgb24gdG9wIGhlcmUuXG4gICAgICBieSA9PT0gJ3gnICYmIHRhcmdldC5zZXQoJ3NjYWxlWCcsIHNjYWxlWCk7XG4gICAgICBieSA9PT0gJ3knICYmIHRhcmdldC5zZXQoJ3NjYWxlWScsIHNjYWxlWSk7XG4gICAgfVxuICAgIHJldHVybiBvbGRTY2FsZVggIT09IHRhcmdldC5zY2FsZVggfHwgb2xkU2NhbGVZICE9PSB0YXJnZXQuc2NhbGVZO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyaWMgc2NhbGluZyBsb2dpYywgdG8gc2NhbGUgZnJvbSBjb3JuZXJzIGVpdGhlciBlcXVhbGx5IG9yIGZyZWVseS5cbiAgICogTmVlZHMgdG8gYmUgd3JhcHBlZCB3aXRoIGB3cmFwV2l0aEZpeGVkQW5jaG9yYCB0byBiZSBlZmZlY3RpdmVcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIGphdmFzY3JpcHQgZXZlbnQgdGhhdCBpcyBkb2luZyB0aGUgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2Zvcm0gamF2YXNjcmlwdCBvYmplY3QgY29udGFpbmluZyBhIHNlcmllcyBvZiBpbmZvcm1hdGlvbiBhcm91bmQgdGhlIGN1cnJlbnQgdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IGN1cnJlbnQgbW91c2UgeCBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgY3VycmVudCBtb3VzZSB5IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHNvbWUgY2hhbmdlIGhhcHBlbmVkXG4gICAqL1xuICBmdW5jdGlvbiBzY2FsZU9iamVjdEZyb21Db3JuZXIoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICByZXR1cm4gc2NhbGVPYmplY3QoZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxpbmcgbG9naWMgZm9yIHRoZSBYIGF4aXMuXG4gICAqIE5lZWRzIHRvIGJlIHdyYXBwZWQgd2l0aCBgd3JhcFdpdGhGaXhlZEFuY2hvcmAgdG8gYmUgZWZmZWN0aXZlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKi9cbiAgZnVuY3Rpb24gc2NhbGVPYmplY3RYKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgcmV0dXJuIHNjYWxlT2JqZWN0KGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5ICwgeyBieTogJ3gnIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxpbmcgbG9naWMgZm9yIHRoZSBZIGF4aXMuXG4gICAqIE5lZWRzIHRvIGJlIHdyYXBwZWQgd2l0aCBgd3JhcFdpdGhGaXhlZEFuY2hvcmAgdG8gYmUgZWZmZWN0aXZlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKi9cbiAgZnVuY3Rpb24gc2NhbGVPYmplY3RZKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgcmV0dXJuIHNjYWxlT2JqZWN0KGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5ICwgeyBieTogJ3knIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXBvc2VkIGFjdGlvbiBoYW5kbGVyIHRvIGVpdGhlciBzY2FsZSBZIG9yIHNrZXcgWFxuICAgKiBOZWVkcyB0byBiZSB3cmFwcGVkIHdpdGggYHdyYXBXaXRoRml4ZWRBbmNob3JgIHRvIGJlIGVmZmVjdGl2ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc29tZSBjaGFuZ2UgaGFwcGVuZWRcbiAgICovXG4gIGZ1bmN0aW9uIHNjYWxpbmdZT3JTa2V3aW5nWChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSkge1xuICAgIC8vIG9rIHNvbWUgc2FmZXR5IG5lZWRlZCBoZXJlLlxuICAgIGlmIChldmVudERhdGFbdHJhbnNmb3JtLnRhcmdldC5jYW52YXMuYWx0QWN0aW9uS2V5XSkge1xuICAgICAgcmV0dXJuIGNvbnRyb2xzLnNrZXdIYW5kbGVyWChldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gICAgfVxuICAgIHJldHVybiBjb250cm9scy5zY2FsaW5nWShldmVudERhdGEsIHRyYW5zZm9ybSwgeCwgeSk7XG4gIH1cblxuICAvKipcbiAgICogQ29tcG9zZWQgYWN0aW9uIGhhbmRsZXIgdG8gZWl0aGVyIHNjYWxlIFggb3Igc2tldyBZXG4gICAqIE5lZWRzIHRvIGJlIHdyYXBwZWQgd2l0aCBgd3JhcFdpdGhGaXhlZEFuY2hvcmAgdG8gYmUgZWZmZWN0aXZlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBzb21lIGNoYW5nZSBoYXBwZW5lZFxuICAgKi9cbiAgZnVuY3Rpb24gc2NhbGluZ1hPclNrZXdpbmdZKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgLy8gb2sgc29tZSBzYWZldHkgbmVlZGVkIGhlcmUuXG4gICAgaWYgKGV2ZW50RGF0YVt0cmFuc2Zvcm0udGFyZ2V0LmNhbnZhcy5hbHRBY3Rpb25LZXldKSB7XG4gICAgICByZXR1cm4gY29udHJvbHMuc2tld0hhbmRsZXJZKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRyb2xzLnNjYWxpbmdYKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBY3Rpb24gaGFuZGxlciB0byBjaGFuZ2UgdGV4dGJveCB3aWR0aFxuICAgKiBOZWVkcyB0byBiZSB3cmFwcGVkIHdpdGggYHdyYXBXaXRoRml4ZWRBbmNob3JgIHRvIGJlIGVmZmVjdGl2ZVxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgamF2YXNjcmlwdCBldmVudCB0aGF0IGlzIGRvaW5nIHRoZSB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtPYmplY3R9IHRyYW5zZm9ybSBqYXZhc2NyaXB0IG9iamVjdCBjb250YWluaW5nIGEgc2VyaWVzIG9mIGluZm9ybWF0aW9uIGFyb3VuZCB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHggY3VycmVudCBtb3VzZSB4IHBvc2l0aW9uLCBjYW52YXMgbm9ybWFsaXplZFxuICAgKiBAcGFyYW0ge251bWJlcn0geSBjdXJyZW50IG1vdXNlIHkgcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgc29tZSBjaGFuZ2UgaGFwcGVuZWRcbiAgICovXG4gIGZ1bmN0aW9uIGNoYW5nZVdpZHRoKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgdmFyIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsIGxvY2FsUG9pbnQgPSBnZXRMb2NhbFBvaW50KHRyYW5zZm9ybSwgdHJhbnNmb3JtLm9yaWdpblgsIHRyYW5zZm9ybS5vcmlnaW5ZLCB4LCB5KSxcbiAgICAgICAgc3Ryb2tlUGFkZGluZyA9IHRhcmdldC5zdHJva2VXaWR0aCAvICh0YXJnZXQuc3Ryb2tlVW5pZm9ybSA/IHRhcmdldC5zY2FsZVggOiAxKSxcbiAgICAgICAgbXVsdGlwbGllciA9IGlzVHJhbnNmb3JtQ2VudGVyZWQodHJhbnNmb3JtKSA/IDIgOiAxLFxuICAgICAgICBvbGRXaWR0aCA9IHRhcmdldC53aWR0aCxcbiAgICAgICAgbmV3V2lkdGggPSBNYXRoLmFicyhsb2NhbFBvaW50LnggKiBtdWx0aXBsaWVyIC8gdGFyZ2V0LnNjYWxlWCkgLSBzdHJva2VQYWRkaW5nO1xuICAgIHRhcmdldC5zZXQoJ3dpZHRoJywgTWF0aC5tYXgobmV3V2lkdGgsIDApKTtcbiAgICByZXR1cm4gb2xkV2lkdGggIT09IG5ld1dpZHRoO1xuICB9XG5cbiAgLyoqXG4gICAqIEFjdGlvbiBoYW5kbGVyXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSBqYXZhc2NyaXB0IGV2ZW50IHRoYXQgaXMgZG9pbmcgdGhlIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtIGphdmFzY3JpcHQgb2JqZWN0IGNvbnRhaW5pbmcgYSBzZXJpZXMgb2YgaW5mb3JtYXRpb24gYXJvdW5kIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge251bWJlcn0geCBjdXJyZW50IG1vdXNlIHggcG9zaXRpb24sIGNhbnZhcyBub3JtYWxpemVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IGN1cnJlbnQgbW91c2UgeSBwb3NpdGlvbiwgY2FudmFzIG5vcm1hbGl6ZWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgdHJhbnNsYXRpb24gb2NjdXJyZWRcbiAgICovXG4gIGZ1bmN0aW9uIGRyYWdIYW5kbGVyKGV2ZW50RGF0YSwgdHJhbnNmb3JtLCB4LCB5KSB7XG4gICAgdmFyIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgIG5ld0xlZnQgPSB4IC0gdHJhbnNmb3JtLm9mZnNldFgsXG4gICAgICAgIG5ld1RvcCA9IHkgLSB0cmFuc2Zvcm0ub2Zmc2V0WSxcbiAgICAgICAgbW92ZVggPSAhdGFyZ2V0LmdldCgnbG9ja01vdmVtZW50WCcpICYmIHRhcmdldC5sZWZ0ICE9PSBuZXdMZWZ0LFxuICAgICAgICBtb3ZlWSA9ICF0YXJnZXQuZ2V0KCdsb2NrTW92ZW1lbnRZJykgJiYgdGFyZ2V0LnRvcCAhPT0gbmV3VG9wO1xuICAgIG1vdmVYICYmIHRhcmdldC5zZXQoJ2xlZnQnLCBuZXdMZWZ0KTtcbiAgICBtb3ZlWSAmJiB0YXJnZXQuc2V0KCd0b3AnLCBuZXdUb3ApO1xuICAgIGlmIChtb3ZlWCB8fCBtb3ZlWSkge1xuICAgICAgZmlyZUV2ZW50KCdtb3ZpbmcnLCBjb21tb25FdmVudEluZm8oZXZlbnREYXRhLCB0cmFuc2Zvcm0sIHgsIHkpKTtcbiAgICB9XG4gICAgcmV0dXJuIG1vdmVYIHx8IG1vdmVZO1xuICB9XG5cbiAgY29udHJvbHMuc2NhbGVDdXJzb3JTdHlsZUhhbmRsZXIgPSBzY2FsZUN1cnNvclN0eWxlSGFuZGxlcjtcbiAgY29udHJvbHMuc2tld0N1cnNvclN0eWxlSGFuZGxlciA9IHNrZXdDdXJzb3JTdHlsZUhhbmRsZXI7XG4gIGNvbnRyb2xzLnNjYWxlU2tld0N1cnNvclN0eWxlSGFuZGxlciA9IHNjYWxlU2tld0N1cnNvclN0eWxlSGFuZGxlcjtcbiAgY29udHJvbHMucm90YXRpb25XaXRoU25hcHBpbmcgPSB3cmFwV2l0aEZpcmVFdmVudCgncm90YXRpbmcnLCB3cmFwV2l0aEZpeGVkQW5jaG9yKHJvdGF0aW9uV2l0aFNuYXBwaW5nKSk7XG4gIGNvbnRyb2xzLnNjYWxpbmdFcXVhbGx5ID0gd3JhcFdpdGhGaXJlRXZlbnQoJ3NjYWxpbmcnLCB3cmFwV2l0aEZpeGVkQW5jaG9yKCBzY2FsZU9iamVjdEZyb21Db3JuZXIpKTtcbiAgY29udHJvbHMuc2NhbGluZ1ggPSB3cmFwV2l0aEZpcmVFdmVudCgnc2NhbGluZycsIHdyYXBXaXRoRml4ZWRBbmNob3Ioc2NhbGVPYmplY3RYKSk7XG4gIGNvbnRyb2xzLnNjYWxpbmdZID0gd3JhcFdpdGhGaXJlRXZlbnQoJ3NjYWxpbmcnLCB3cmFwV2l0aEZpeGVkQW5jaG9yKHNjYWxlT2JqZWN0WSkpO1xuICBjb250cm9scy5zY2FsaW5nWU9yU2tld2luZ1ggPSBzY2FsaW5nWU9yU2tld2luZ1g7XG4gIGNvbnRyb2xzLnNjYWxpbmdYT3JTa2V3aW5nWSA9IHNjYWxpbmdYT3JTa2V3aW5nWTtcbiAgY29udHJvbHMuY2hhbmdlV2lkdGggPSB3cmFwV2l0aEZpcmVFdmVudCgncmVzaXppbmcnLCB3cmFwV2l0aEZpeGVkQW5jaG9yKGNoYW5nZVdpZHRoKSk7XG4gIGNvbnRyb2xzLnNrZXdIYW5kbGVyWCA9IHNrZXdIYW5kbGVyWDtcbiAgY29udHJvbHMuc2tld0hhbmRsZXJZID0gc2tld0hhbmRsZXJZO1xuICBjb250cm9scy5kcmFnSGFuZGxlciA9IGRyYWdIYW5kbGVyO1xuICBjb250cm9scy5zY2FsZU9yU2tld0FjdGlvbk5hbWUgPSBzY2FsZU9yU2tld0FjdGlvbk5hbWU7XG4gIGNvbnRyb2xzLnJvdGF0aW9uU3R5bGVIYW5kbGVyID0gcm90YXRpb25TdHlsZUhhbmRsZXI7XG4gIGNvbnRyb2xzLmZpcmVFdmVudCA9IGZpcmVFdmVudDtcbiAgY29udHJvbHMud3JhcFdpdGhGaXhlZEFuY2hvciA9IHdyYXBXaXRoRml4ZWRBbmNob3I7XG4gIGNvbnRyb2xzLndyYXBXaXRoRmlyZUV2ZW50ID0gd3JhcFdpdGhGaXJlRXZlbnQ7XG4gIGNvbnRyb2xzLmdldExvY2FsUG9pbnQgPSBnZXRMb2NhbFBvaW50O1xuICBmYWJyaWMuY29udHJvbHNVdGlscyA9IGNvbnRyb2xzO1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBkZWdyZWVzVG9SYWRpYW5zID0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyxcbiAgICAgIGNvbnRyb2xzID0gZmFicmljLmNvbnRyb2xzVXRpbHM7XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIHJvdW5kIGNvbnRyb2wsIGFzIHBlciBmYWJyaWMgZmVhdHVyZXMuXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgd3JpdHRlbiB0byByZXNwZWN0IG9iamVjdCBwcm9wZXJ0aWVzIGxpa2UgdHJhbnNwYXJlbnRDb3JuZXJzLCBjb3JuZXJTaXplXG4gICAqIGNvcm5lckNvbG9yLCBjb3JuZXJTdHJva2VDb2xvclxuICAgKiBwbHVzIHRoZSBhZGRpdGlvbiBvZiBvZmZzZXRZIGFuZCBvZmZzZXRYLlxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IGNvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IHggY29vcmRpbmF0ZSB3aGVyZSB0aGUgY29udHJvbCBjZW50ZXIgc2hvdWxkIGJlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgeSBjb29yZGluYXRlIHdoZXJlIHRoZSBjb250cm9sIGNlbnRlciBzaG91bGQgYmVcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlT3ZlcnJpZGUgb3ZlcnJpZGUgZm9yIGZhYnJpYy5PYmplY3QgY29udHJvbHMgc3R5bGVcbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3QgdGhlIGZhYnJpYyBvYmplY3QgZm9yIHdoaWNoIHdlIGFyZSByZW5kZXJpbmcgY29udHJvbHNcbiAgICovXG4gIGZ1bmN0aW9uIHJlbmRlckNpcmNsZUNvbnRyb2wgKGN0eCwgbGVmdCwgdG9wLCBzdHlsZU92ZXJyaWRlLCBmYWJyaWNPYmplY3QpIHtcbiAgICBzdHlsZU92ZXJyaWRlID0gc3R5bGVPdmVycmlkZSB8fCB7fTtcbiAgICB2YXIgeFNpemUgPSB0aGlzLnNpemVYIHx8IHN0eWxlT3ZlcnJpZGUuY29ybmVyU2l6ZSB8fCBmYWJyaWNPYmplY3QuY29ybmVyU2l6ZSxcbiAgICAgICAgeVNpemUgPSB0aGlzLnNpemVZIHx8IHN0eWxlT3ZlcnJpZGUuY29ybmVyU2l6ZSB8fCBmYWJyaWNPYmplY3QuY29ybmVyU2l6ZSxcbiAgICAgICAgdHJhbnNwYXJlbnRDb3JuZXJzID0gdHlwZW9mIHN0eWxlT3ZlcnJpZGUudHJhbnNwYXJlbnRDb3JuZXJzICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgc3R5bGVPdmVycmlkZS50cmFuc3BhcmVudENvcm5lcnMgOiBmYWJyaWNPYmplY3QudHJhbnNwYXJlbnRDb3JuZXJzLFxuICAgICAgICBtZXRob2ROYW1lID0gdHJhbnNwYXJlbnRDb3JuZXJzID8gJ3N0cm9rZScgOiAnZmlsbCcsXG4gICAgICAgIHN0cm9rZSA9ICF0cmFuc3BhcmVudENvcm5lcnMgJiYgKHN0eWxlT3ZlcnJpZGUuY29ybmVyU3Ryb2tlQ29sb3IgfHwgZmFicmljT2JqZWN0LmNvcm5lclN0cm9rZUNvbG9yKSxcbiAgICAgICAgbXlMZWZ0ID0gbGVmdCxcbiAgICAgICAgbXlUb3AgPSB0b3AsIHNpemU7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZmlsbFN0eWxlID0gc3R5bGVPdmVycmlkZS5jb3JuZXJDb2xvciB8fCBmYWJyaWNPYmplY3QuY29ybmVyQ29sb3I7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGVPdmVycmlkZS5jb3JuZXJTdHJva2VDb2xvciB8fCBmYWJyaWNPYmplY3QuY29ybmVyU3Ryb2tlQ29sb3I7XG4gICAgLy8gYXMgc29vbiBhcyBmYWJyaWMgcmVhY3QgdjUsIHJlbW92ZSBpZTExLCB1c2UgcHJvcGVyIGVsbGlwc2UgY29kZS5cbiAgICBpZiAoeFNpemUgPiB5U2l6ZSkge1xuICAgICAgc2l6ZSA9IHhTaXplO1xuICAgICAgY3R4LnNjYWxlKDEuMCwgeVNpemUgLyB4U2l6ZSk7XG4gICAgICBteVRvcCA9IHRvcCAqIHhTaXplIC8geVNpemU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHlTaXplID4geFNpemUpIHtcbiAgICAgIHNpemUgPSB5U2l6ZTtcbiAgICAgIGN0eC5zY2FsZSh4U2l6ZSAvIHlTaXplLCAxLjApO1xuICAgICAgbXlMZWZ0ID0gbGVmdCAqIHlTaXplIC8geFNpemU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgc2l6ZSA9IHhTaXplO1xuICAgIH1cbiAgICAvLyB0aGlzIGlzIHN0aWxsIHdyb25nXG4gICAgY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmMobXlMZWZ0LCBteVRvcCwgc2l6ZSAvIDIsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSk7XG4gICAgY3R4W21ldGhvZE5hbWVdKCk7XG4gICAgaWYgKHN0cm9rZSkge1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIHNxdWFyZSBjb250cm9sLCBhcyBwZXIgZmFicmljIGZlYXR1cmVzLlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHdyaXR0ZW4gdG8gcmVzcGVjdCBvYmplY3QgcHJvcGVydGllcyBsaWtlIHRyYW5zcGFyZW50Q29ybmVycywgY29ybmVyU2l6ZVxuICAgKiBjb3JuZXJDb2xvciwgY29ybmVyU3Ryb2tlQ29sb3JcbiAgICogcGx1cyB0aGUgYWRkaXRpb24gb2Ygb2Zmc2V0WSBhbmQgb2Zmc2V0WC5cbiAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBvblxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVmdCB4IGNvb3JkaW5hdGUgd2hlcmUgdGhlIGNvbnRyb2wgY2VudGVyIHNob3VsZCBiZVxuICAgKiBAcGFyYW0ge051bWJlcn0gdG9wIHkgY29vcmRpbmF0ZSB3aGVyZSB0aGUgY29udHJvbCBjZW50ZXIgc2hvdWxkIGJlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZU92ZXJyaWRlIG92ZXJyaWRlIGZvciBmYWJyaWMuT2JqZWN0IGNvbnRyb2xzIHN0eWxlXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IHRoZSBmYWJyaWMgb2JqZWN0IGZvciB3aGljaCB3ZSBhcmUgcmVuZGVyaW5nIGNvbnRyb2xzXG4gICAqL1xuICBmdW5jdGlvbiByZW5kZXJTcXVhcmVDb250cm9sKGN0eCwgbGVmdCwgdG9wLCBzdHlsZU92ZXJyaWRlLCBmYWJyaWNPYmplY3QpIHtcbiAgICBzdHlsZU92ZXJyaWRlID0gc3R5bGVPdmVycmlkZSB8fCB7fTtcbiAgICB2YXIgeFNpemUgPSB0aGlzLnNpemVYIHx8IHN0eWxlT3ZlcnJpZGUuY29ybmVyU2l6ZSB8fCBmYWJyaWNPYmplY3QuY29ybmVyU2l6ZSxcbiAgICAgICAgeVNpemUgPSB0aGlzLnNpemVZIHx8IHN0eWxlT3ZlcnJpZGUuY29ybmVyU2l6ZSB8fCBmYWJyaWNPYmplY3QuY29ybmVyU2l6ZSxcbiAgICAgICAgdHJhbnNwYXJlbnRDb3JuZXJzID0gdHlwZW9mIHN0eWxlT3ZlcnJpZGUudHJhbnNwYXJlbnRDb3JuZXJzICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgc3R5bGVPdmVycmlkZS50cmFuc3BhcmVudENvcm5lcnMgOiBmYWJyaWNPYmplY3QudHJhbnNwYXJlbnRDb3JuZXJzLFxuICAgICAgICBtZXRob2ROYW1lID0gdHJhbnNwYXJlbnRDb3JuZXJzID8gJ3N0cm9rZScgOiAnZmlsbCcsXG4gICAgICAgIHN0cm9rZSA9ICF0cmFuc3BhcmVudENvcm5lcnMgJiYgKFxuICAgICAgICAgIHN0eWxlT3ZlcnJpZGUuY29ybmVyU3Ryb2tlQ29sb3IgfHwgZmFicmljT2JqZWN0LmNvcm5lclN0cm9rZUNvbG9yXG4gICAgICAgICksIHhTaXplQnkyID0geFNpemUgLyAyLCB5U2l6ZUJ5MiA9IHlTaXplIC8gMjtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBzdHlsZU92ZXJyaWRlLmNvcm5lckNvbG9yIHx8IGZhYnJpY09iamVjdC5jb3JuZXJDb2xvcjtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBzdHlsZU92ZXJyaWRlLmNvcm5lclN0cm9rZUNvbG9yIHx8IGZhYnJpY09iamVjdC5jb3JuZXJTdHJva2VDb2xvcjtcbiAgICAvLyB0aGlzIGlzIHN0aWxsIHdyb25nXG4gICAgY3R4LmxpbmVXaWR0aCA9IDE7XG4gICAgY3R4LnRyYW5zbGF0ZShsZWZ0LCB0b3ApO1xuICAgIGN0eC5yb3RhdGUoZGVncmVlc1RvUmFkaWFucyhmYWJyaWNPYmplY3QuYW5nbGUpKTtcbiAgICAvLyB0aGlzIGRvZXMgbm90IHdvcmssIGFuZCBmaXhlZCB3aXRoICggJiYgKSBkb2VzIG5vdCBtYWtlIHNlbnNlLlxuICAgIC8vIHRvIGhhdmUgcmVhbCB0cmFuc3BhcmVudCBjb3JuZXJzIHdlIG5lZWQgdGhlIGNvbnRyb2xzIG9uIHVwcGVyQ2FudmFzXG4gICAgLy8gdHJhbnNwYXJlbnRDb3JuZXJzIHx8IGN0eC5jbGVhclJlY3QoLXhTaXplQnkyLCAteVNpemVCeTIsIHhTaXplLCB5U2l6ZSk7XG4gICAgY3R4W21ldGhvZE5hbWUgKyAnUmVjdCddKC14U2l6ZUJ5MiwgLXlTaXplQnkyLCB4U2l6ZSwgeVNpemUpO1xuICAgIGlmIChzdHJva2UpIHtcbiAgICAgIGN0eC5zdHJva2VSZWN0KC14U2l6ZUJ5MiwgLXlTaXplQnkyLCB4U2l6ZSwgeVNpemUpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgY29udHJvbHMucmVuZGVyQ2lyY2xlQ29udHJvbCA9IHJlbmRlckNpcmNsZUNvbnRyb2w7XG4gIGNvbnRyb2xzLnJlbmRlclNxdWFyZUNvbnRyb2wgPSByZW5kZXJTcXVhcmVDb250cm9sO1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSk7XG5cbiAgZnVuY3Rpb24gQ29udHJvbChvcHRpb25zKSB7XG4gICAgZm9yICh2YXIgaSBpbiBvcHRpb25zKSB7XG4gICAgICB0aGlzW2ldID0gb3B0aW9uc1tpXTtcbiAgICB9XG4gIH1cblxuICBmYWJyaWMuQ29udHJvbCA9IENvbnRyb2w7XG5cbiAgZmFicmljLkNvbnRyb2wucHJvdG90eXBlID0gLyoqIEBsZW5kcyBmYWJyaWMuQ29udHJvbC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICoga2VlcCB0cmFjayBvZiBjb250cm9sIHZpc2liaWxpdHkuXG4gICAgICogbWFpbmx5IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgICAqIGlmIHlvdSBkbyBub3Qgd2FudCB0byBzZWUgYSBjb250cm9sLCB5b3UgY2FuIHJlbW92ZSBpdFxuICAgICAqIGZyb20gdGhlIGNvbnRyb2xzZXQuXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIHZpc2libGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIHRoZSBhY3Rpb24gdGhhdCB0aGUgY29udHJvbCB3aWxsIGxpa2VseSBleGVjdXRlLlxuICAgICAqIFRoaXMgaXMgb3B0aW9uYWwuIEZhYnJpY0pTIHVzZXMgdG8gaWRlbnRpZnkgd2hhdCB0aGUgdXNlciBpcyBkb2luZyBmb3Igc29tZVxuICAgICAqIGV4dHJhIG9wdGltaXphdGlvbnMuIElmIHlvdSBhcmUgd3JpdGluZyBhIGN1c3RvbSBjb250cm9sIGFuZCB5b3Ugd2FudCB0byBrbm93XG4gICAgICogc29tZXdoZXJlIGVsc2UgaW4gdGhlIGNvZGUgd2hhdCBpcyBnb2luZyBvbiwgeW91IGNhbiB1c2UgdGhpcyBzdHJpbmcgaGVyZS5cbiAgICAgKiB5b3UgY2FuIGFsc28gcHJvdmlkZSBhIGN1c3RvbSBnZXRBY3Rpb25OYW1lIGlmIHlvdXIgY29udHJvbCBydW4gbXVsdGlwbGUgYWN0aW9uc1xuICAgICAqIGRlcGVuZGluZyBvbiBzb21lIGV4dGVybmFsIHN0YXRlLlxuICAgICAqIGRlZmF1bHQgdG8gc2NhbGUgc2luY2UgaXMgdGhlIG1vc3QgY29tbW9uLCB1c2VkIG9uIDQgY29ybmVycyBieSBkZWZhdWx0XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAZGVmYXVsdCAnc2NhbGUnXG4gICAgICovXG4gICAgYWN0aW9uTmFtZTogJ3NjYWxlJyxcblxuICAgIC8qKlxuICAgICAqIERyYXdpbmcgYW5nbGUgb2YgdGhlIGNvbnRyb2wuXG4gICAgICogTk9UIHVzZWQgZm9yIG5vdywgYnV0IG5hbWUgbWFya2VkIGFzIG5lZWRlZCBmb3IgaW50ZXJuYWwgbG9naWNcbiAgICAgKiBleGFtcGxlOiB0byByZXVzZSB0aGUgc2FtZSBkcmF3aW5nIGZ1bmN0aW9uIGZvciBkaWZmZXJlbnQgcm90YXRlZCBjb250cm9sc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIGFuZ2xlOiAwLFxuXG4gICAgLyoqXG4gICAgICogUmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGNvbnRyb2wuIFhcbiAgICAgKiAwLDAgaXMgdGhlIGNlbnRlciBvZiB0aGUgT2JqZWN0LCB3aGlsZSAtMC41IChsZWZ0KSBvciAwLjUgKHJpZ2h0KSBhcmUgdGhlIGV4dHJlbWl0aWVzXG4gICAgICogb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB4OiAwLFxuXG4gICAgLyoqXG4gICAgICogUmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGNvbnRyb2wuIFlcbiAgICAgKiAwLDAgaXMgdGhlIGNlbnRlciBvZiB0aGUgT2JqZWN0LCB3aGlsZSAtMC41ICh0b3ApIG9yIDAuNSAoYm90dG9tKSBhcmUgdGhlIGV4dHJlbWl0aWVzXG4gICAgICogb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB5OiAwLFxuXG4gICAgLyoqXG4gICAgICogSG9yaXpvbnRhbCBvZmZzZXQgb2YgdGhlIGNvbnRyb2wgZnJvbSB0aGUgZGVmaW5lZCBwb3NpdGlvbi4gSW4gcGl4ZWxzXG4gICAgICogUG9zaXRpdmUgb2Zmc2V0IG1vdmVzIHRoZSBjb250cm9sIHRvIHRoZSByaWdodCwgbmVnYXRpdmUgdG8gdGhlIGxlZnQuXG4gICAgICogSXQgdXNlZCB3aGVuIHlvdSB3YW50IHRvIGhhdmUgcG9zaXRpb24gb2YgY29udHJvbCB0aGF0IGRvZXMgbm90IHNjYWxlIHdpdGhcbiAgICAgKiB0aGUgYm91bmRpbmcgYm94LiBFeGFtcGxlOiByb3RhdGlvbiBjb250cm9sIGlzIHBsYWNlZCBhdCB4OjAsIHk6IDAuNSBvblxuICAgICAqIHRoZSBib3VuZGluZGJveCwgd2l0aCBhbiBvZmZzZXQgb2YgMzAgcGl4ZWxzIHZlcnRpY2FsbHkuIFRob3NlIDMwIHBpeGVscyB3aWxsXG4gICAgICogc3RheSAzMCBwaXhlbHMgbm8gbWF0dGVyIGhvdyB0aGUgb2JqZWN0IGlzIGJpZy4gQW5vdGhlciBleGFtcGxlIGlzIGhhdmluZyAyXG4gICAgICogY29udHJvbHMgaW4gdGhlIGNvcm5lciwgdGhhdCBzdGF5IGluIHRoZSBzYW1lIHBvc2l0aW9uIHdoZW4gdGhlIG9iamVjdCBzY2FsZS5cbiAgICAgKiBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIG9mZnNldFg6IDAsXG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBvZmZzZXQgb2YgdGhlIGNvbnRyb2wgZnJvbSB0aGUgZGVmaW5lZCBwb3NpdGlvbi4gSW4gcGl4ZWxzXG4gICAgICogUG9zaXRpdmUgb2Zmc2V0IG1vdmVzIHRoZSBjb250cm9sIHRvIHRoZSBib3R0b20sIG5lZ2F0aXZlIHRvIHRoZSB0b3AuXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgb2Zmc2V0WTogMCxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxlbmd0aCBvZiB0aGUgY29udHJvbC4gSWYgbnVsbCwgZGVmYXVsdHMgdG8gb2JqZWN0J3MgY29ybmVyU2l6ZS5cbiAgICAgKiBFeHBlY3RzIGJvdGggc2l6ZVggYW5kIHNpemVZIHRvIGJlIHNldCB3aGVuIHNldC5cbiAgICAgKiBAdHlwZSB7P051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgc2l6ZVg6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWlnaHQgb2YgdGhlIGNvbnRyb2wuIElmIG51bGwsIGRlZmF1bHRzIHRvIG9iamVjdCdzIGNvcm5lclNpemUuXG4gICAgICogRXhwZWN0cyBib3RoIHNpemVYIGFuZCBzaXplWSB0byBiZSBzZXQgd2hlbiBzZXQuXG4gICAgICogQHR5cGUgez9OdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIHNpemVZOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGVuZ3RoIG9mIHRoZSB0b3VjaCBhcmVhIG9mIHRoZSBjb250cm9sLiBJZiBudWxsLCBkZWZhdWx0cyB0byBvYmplY3QncyB0b3VjaENvcm5lclNpemUuXG4gICAgICogRXhwZWN0cyBib3RoIHRvdWNoU2l6ZVggYW5kIHRvdWNoU2l6ZVkgdG8gYmUgc2V0IHdoZW4gc2V0LlxuICAgICAqIEB0eXBlIHs/TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICB0b3VjaFNpemVYOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSB0b3VjaCBhcmVhIG9mIHRoZSBjb250cm9sLiBJZiBudWxsLCBkZWZhdWx0cyB0byBvYmplY3QncyB0b3VjaENvcm5lclNpemUuXG4gICAgICogRXhwZWN0cyBib3RoIHRvdWNoU2l6ZVggYW5kIHRvdWNoU2l6ZVkgdG8gYmUgc2V0IHdoZW4gc2V0LlxuICAgICAqIEB0eXBlIHs/TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICB0b3VjaFNpemVZOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQ3NzIGN1cnNvciBzdHlsZSB0byBkaXNwbGF5IHdoZW4gdGhlIGNvbnRyb2wgaXMgaG92ZXJlZC5cbiAgICAgKiBpZiB0aGUgbWV0aG9kIGBjdXJzb3JTdHlsZUhhbmRsZXJgIGlzIHByb3ZpZGVkLCB0aGlzIHByb3BlcnR5IGlzIGlnbm9yZWQuXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAZGVmYXVsdCAnY3Jvc3NoYWlyJ1xuICAgICAqL1xuICAgIGN1cnNvclN0eWxlOiAnY3Jvc3NoYWlyJyxcblxuICAgIC8qKlxuICAgICAqIElmIGNvbnRyb2xzIGhhcyBhbiBvZmZzZXRZIG9yIG9mZnNldFgsIGRyYXcgYSBsaW5lIHRoYXQgY29ubmVjdHNcbiAgICAgKiB0aGUgY29udHJvbCB0byB0aGUgYm91bmRpbmcgYm94XG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICB3aXRoQ29ubmVjdGlvbjogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udHJvbCBhY3Rpb25IYW5kbGVyLCBwcm92aWRlIG9uZSB0byBoYW5kbGUgYWN0aW9uICggY29udHJvbCBiZWluZyBtb3ZlZCApXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIHRoZSBuYXRpdmUgbW91c2UgZXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtRGF0YSBwcm9wZXJ0aWVzIG9mIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IHggcG9zaXRpb24gb2YgdGhlIGN1cnNvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IHkgcG9zaXRpb24gb2YgdGhlIGN1cnNvclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIGFjdGlvbi9ldmVudCBtb2RpZmllZCB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24oLyogZXZlbnREYXRhLCB0cmFuc2Zvcm1EYXRhLCB4LCB5ICovKSB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udHJvbCBoYW5kbGVyIGZvciBtb3VzZSBkb3duLCBwcm92aWRlIG9uZSB0byBoYW5kbGUgbW91c2UgZG93biBvbiBjb250cm9sXG4gICAgICogQHBhcmFtIHtFdmVudH0gZXZlbnREYXRhIHRoZSBuYXRpdmUgbW91c2UgZXZlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHJhbnNmb3JtRGF0YSBwcm9wZXJ0aWVzIG9mIHRoZSBjdXJyZW50IHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB4IHggcG9zaXRpb24gb2YgdGhlIGN1cnNvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB5IHkgcG9zaXRpb24gb2YgdGhlIGN1cnNvclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIGFjdGlvbi9ldmVudCBtb2RpZmllZCB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgbW91c2VEb3duSGFuZGxlcjogZnVuY3Rpb24oLyogZXZlbnREYXRhLCB0cmFuc2Zvcm1EYXRhLCB4LCB5ICovKSB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29udHJvbCBtb3VzZVVwSGFuZGxlciwgcHJvdmlkZSBvbmUgdG8gaGFuZGxlIGFuIGVmZmVjdCBvbiBtb3VzZSB1cC5cbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIG5hdGl2ZSBtb3VzZSBldmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0cmFuc2Zvcm1EYXRhIHByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHggeCBwb3NpdGlvbiBvZiB0aGUgY3Vyc29yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgeSBwb3NpdGlvbiBvZiB0aGUgY3Vyc29yXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgYWN0aW9uL2V2ZW50IG1vZGlmaWVkIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBtb3VzZVVwSGFuZGxlcjogZnVuY3Rpb24oLyogZXZlbnREYXRhLCB0cmFuc2Zvcm1EYXRhLCB4LCB5ICovKSB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbnRyb2wgYWN0aW9uSGFuZGxlclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgbmF0aXZlIG1vdXNlIGV2ZW50XG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3Qgb24gd2hpY2ggdGhlIGNvbnRyb2wgaXMgZGlzcGxheWVkXG4gICAgICogQHBhcmFtIHtmYWJyaWMuQ29udHJvbH0gY29udHJvbCBjb250cm9sIGZvciB3aGljaCB0aGUgYWN0aW9uIGhhbmRsZXIgaXMgYmVpbmcgYXNrZWRcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGFjdGlvbiBoYW5kbGVyXG4gICAgICovXG4gICAgZ2V0QWN0aW9uSGFuZGxlcjogZnVuY3Rpb24oLyogZXZlbnREYXRhLCBmYWJyaWNPYmplY3QsIGNvbnRyb2wgKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLmFjdGlvbkhhbmRsZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udHJvbCBtb3VzZURvd24gaGFuZGxlclxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgbmF0aXZlIG1vdXNlIGV2ZW50XG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBmYWJyaWNPYmplY3Qgb24gd2hpY2ggdGhlIGNvbnRyb2wgaXMgZGlzcGxheWVkXG4gICAgICogQHBhcmFtIHtmYWJyaWMuQ29udHJvbH0gY29udHJvbCBjb250cm9sIGZvciB3aGljaCB0aGUgYWN0aW9uIGhhbmRsZXIgaXMgYmVpbmcgYXNrZWRcbiAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gdGhlIGFjdGlvbiBoYW5kbGVyXG4gICAgICovXG4gICAgZ2V0TW91c2VEb3duSGFuZGxlcjogZnVuY3Rpb24oLyogZXZlbnREYXRhLCBmYWJyaWNPYmplY3QsIGNvbnRyb2wgKi8pIHtcbiAgICAgIHJldHVybiB0aGlzLm1vdXNlRG93bkhhbmRsZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udHJvbCBtb3VzZVVwIGhhbmRsZXJcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIG5hdGl2ZSBtb3VzZSBldmVudFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gZmFicmljT2JqZWN0IG9uIHdoaWNoIHRoZSBjb250cm9sIGlzIGRpc3BsYXllZFxuICAgICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgY29udHJvbCBmb3Igd2hpY2ggdGhlIGFjdGlvbiBoYW5kbGVyIGlzIGJlaW5nIGFza2VkXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBhY3Rpb24gaGFuZGxlclxuICAgICAqL1xuICAgIGdldE1vdXNlVXBIYW5kbGVyOiBmdW5jdGlvbigvKiBldmVudERhdGEsIGZhYnJpY09iamVjdCwgY29udHJvbCAqLykge1xuICAgICAgcmV0dXJuIHRoaXMubW91c2VVcEhhbmRsZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udHJvbCBjdXJzb3JTdHlsZSBmb3IgY3NzIHVzaW5nIGN1cnNvclN0eWxlLiBJZiB5b3UgbmVlZCBhIG1vcmUgZWxhYm9yYXRlXG4gICAgICogZnVuY3Rpb24geW91IGNhbiBwYXNzIG9uZSBpbiB0aGUgY29uc3RydWN0b3JcbiAgICAgKiB0aGUgY3Vyc29yU3R5bGUgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudERhdGEgdGhlIG5hdGl2ZSBtb3VzZSBldmVudFxuICAgICAqIEBwYXJhbSB7ZmFicmljLkNvbnRyb2x9IGNvbnRyb2wgdGhlIGN1cnJlbnQgY29udHJvbCAoIGxpa2VseSB0aGlzKVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IG9uIHdoaWNoIHRoZSBjb250cm9sIGlzIGRpc3BsYXllZFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBjdXJzb3JTdHlsZUhhbmRsZXI6IGZ1bmN0aW9uKGV2ZW50RGF0YSwgY29udHJvbCAvKiBmYWJyaWNPYmplY3QgKi8pIHtcbiAgICAgIHJldHVybiBjb250cm9sLmN1cnNvclN0eWxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhY3Rpb24gbmFtZS4gVGhlIGJhc2ljIGltcGxlbWVudGF0aW9uIGp1c3QgcmV0dXJuIHRoZSBhY3Rpb25OYW1lIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50RGF0YSB0aGUgbmF0aXZlIG1vdXNlIGV2ZW50XG4gICAgICogQHBhcmFtIHtmYWJyaWMuQ29udHJvbH0gY29udHJvbCB0aGUgY3VycmVudCBjb250cm9sICggbGlrZWx5IHRoaXMpXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3Qgb24gd2hpY2ggdGhlIGNvbnRyb2wgaXMgZGlzcGxheWVkXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldEFjdGlvbk5hbWU6IGZ1bmN0aW9uKGV2ZW50RGF0YSwgY29udHJvbCAvKiBmYWJyaWNPYmplY3QgKi8pIHtcbiAgICAgIHJldHVybiBjb250cm9sLmFjdGlvbk5hbWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29udHJvbHMgdmlzaWJpbGl0eVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IG9uIHdoaWNoIHRoZSBjb250cm9sIGlzIGRpc3BsYXllZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250cm9sS2V5IGtleSB3aGVyZSB0aGUgY29udHJvbCBpcyBtZW1vcml6ZWQgb24gdGhlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXRWaXNpYmlsaXR5OiBmdW5jdGlvbihmYWJyaWNPYmplY3QsIGNvbnRyb2xLZXkpIHtcbiAgICAgIHZhciBvYmplY3RWaXNpYmlsaXR5ID0gZmFicmljT2JqZWN0Ll9jb250cm9sc1Zpc2liaWxpdHk7XG4gICAgICBpZiAob2JqZWN0VmlzaWJpbGl0eSAmJiB0eXBlb2Ygb2JqZWN0VmlzaWJpbGl0eVtjb250cm9sS2V5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdFZpc2liaWxpdHlbY29udHJvbEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy52aXNpYmxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGNvbnRyb2xzIHZpc2liaWxpdHlcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZpc2liaWxpdHkgZm9yIHRoZSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxuICAgICAqL1xuICAgIHNldFZpc2liaWxpdHk6IGZ1bmN0aW9uKHZpc2liaWxpdHkgLyogbmFtZSwgZmFicmljT2JqZWN0ICovKSB7XG4gICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmlsaXR5O1xuICAgIH0sXG5cblxuICAgIHBvc2l0aW9uSGFuZGxlcjogZnVuY3Rpb24oZGltLCBmaW5hbE1hdHJpeCAvKiwgZmFicmljT2JqZWN0LCBjdXJyZW50Q29udHJvbCAqLykge1xuICAgICAgdmFyIHBvaW50ID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQoe1xuICAgICAgICB4OiB0aGlzLnggKiBkaW0ueCArIHRoaXMub2Zmc2V0WCxcbiAgICAgICAgeTogdGhpcy55ICogZGltLnkgKyB0aGlzLm9mZnNldFkgfSwgZmluYWxNYXRyaXgpO1xuICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb29yZHMgZm9yIHRoaXMgY29udHJvbCBiYXNlZCBvbiBvYmplY3QgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvYmplY3RBbmdsZSBhbmdsZSBmcm9tIHRoZSBmYWJyaWMgb2JqZWN0IGhvbGRpbmcgdGhlIGNvbnRyb2xcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb2JqZWN0Q29ybmVyU2l6ZSBjb3JuZXJTaXplIGZyb20gdGhlIGZhYnJpYyBvYmplY3QgaG9sZGluZyB0aGUgY29udHJvbCAob3IgdG91Y2hDb3JuZXJTaXplIGlmXG4gICAgICogICBpc1RvdWNoIGlzIHRydWUpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNlbnRlclggeCBjb29yZGluYXRlIHdoZXJlIHRoZSBjb250cm9sIGNlbnRlciBzaG91bGQgYmVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2VudGVyWSB5IGNvb3JkaW5hdGUgd2hlcmUgdGhlIGNvbnRyb2wgY2VudGVyIHNob3VsZCBiZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNUb3VjaCB0cnVlIGlmIHRvdWNoIGNvcm5lciwgZmFsc2UgaWYgbm9ybWFsIGNvcm5lclxuICAgICAqL1xuICAgIGNhbGNDb3JuZXJDb29yZHM6IGZ1bmN0aW9uKG9iamVjdEFuZ2xlLCBvYmplY3RDb3JuZXJTaXplLCBjZW50ZXJYLCBjZW50ZXJZLCBpc1RvdWNoKSB7XG4gICAgICB2YXIgY29zSGFsZk9mZnNldCxcbiAgICAgICAgICBzaW5IYWxmT2Zmc2V0LFxuICAgICAgICAgIGNvc0hhbGZPZmZzZXRDb21wLFxuICAgICAgICAgIHNpbkhhbGZPZmZzZXRDb21wLFxuICAgICAgICAgIHhTaXplID0gKGlzVG91Y2gpID8gdGhpcy50b3VjaFNpemVYIDogdGhpcy5zaXplWCxcbiAgICAgICAgICB5U2l6ZSA9IChpc1RvdWNoKSA/IHRoaXMudG91Y2hTaXplWSA6IHRoaXMuc2l6ZVk7XG4gICAgICBpZiAoeFNpemUgJiYgeVNpemUgJiYgeFNpemUgIT09IHlTaXplKSB7XG4gICAgICAgIC8vIGhhbmRsZSByZWN0YW5ndWxhciBjb3JuZXJzXG4gICAgICAgIHZhciBjb250cm9sVHJpYW5nbGVBbmdsZSA9IE1hdGguYXRhbjIoeVNpemUsIHhTaXplKTtcbiAgICAgICAgdmFyIGNvcm5lckh5cG90ZW51c2UgPSBNYXRoLnNxcnQoeFNpemUgKiB4U2l6ZSArIHlTaXplICogeVNpemUpIC8gMjtcbiAgICAgICAgdmFyIG5ld1RoZXRhID0gY29udHJvbFRyaWFuZ2xlQW5nbGUgLSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zKG9iamVjdEFuZ2xlKTtcbiAgICAgICAgdmFyIG5ld1RoZXRhQ29tcCA9IE1hdGguUEkgLyAyIC0gY29udHJvbFRyaWFuZ2xlQW5nbGUgLSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zKG9iamVjdEFuZ2xlKTtcbiAgICAgICAgY29zSGFsZk9mZnNldCA9IGNvcm5lckh5cG90ZW51c2UgKiBmYWJyaWMudXRpbC5jb3MobmV3VGhldGEpO1xuICAgICAgICBzaW5IYWxmT2Zmc2V0ID0gY29ybmVySHlwb3RlbnVzZSAqIGZhYnJpYy51dGlsLnNpbihuZXdUaGV0YSk7XG4gICAgICAgIC8vIHVzZSBjb21wbGVtZW50YXJ5IGFuZ2xlIGZvciB0d28gY29ybmVyc1xuICAgICAgICBjb3NIYWxmT2Zmc2V0Q29tcCA9IGNvcm5lckh5cG90ZW51c2UgKiBmYWJyaWMudXRpbC5jb3MobmV3VGhldGFDb21wKTtcbiAgICAgICAgc2luSGFsZk9mZnNldENvbXAgPSBjb3JuZXJIeXBvdGVudXNlICogZmFicmljLnV0aWwuc2luKG5ld1RoZXRhQ29tcCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gaGFuZGxlIHNxdWFyZSBjb3JuZXJzXG4gICAgICAgIC8vIHVzZSBkZWZhdWx0IG9iamVjdCBjb3JuZXIgc2l6ZSB1bmxlc3Mgc2l6ZSBpcyBkZWZpbmVkXG4gICAgICAgIHZhciBjb3JuZXJTaXplID0gKHhTaXplICYmIHlTaXplKSA/IHhTaXplIDogb2JqZWN0Q29ybmVyU2l6ZTtcbiAgICAgICAgLyogMC43MDcxMDY3ODEyIHN0YW5kcyBmb3Igc3FydCgyKS8yICovXG4gICAgICAgIGNvcm5lckh5cG90ZW51c2UgPSBjb3JuZXJTaXplICogMC43MDcxMDY3ODEyO1xuICAgICAgICAvLyBjb21wbGVtZW50YXJ5IGFuZ2xlcyBhcmUgZXF1YWwgc2luY2UgdGhleSdyZSBib3RoIDQ1IGRlZ3JlZXNcbiAgICAgICAgdmFyIG5ld1RoZXRhID0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyg0NSAtIG9iamVjdEFuZ2xlKTtcbiAgICAgICAgY29zSGFsZk9mZnNldCA9IGNvc0hhbGZPZmZzZXRDb21wID0gY29ybmVySHlwb3RlbnVzZSAqIGZhYnJpYy51dGlsLmNvcyhuZXdUaGV0YSk7XG4gICAgICAgIHNpbkhhbGZPZmZzZXQgPSBzaW5IYWxmT2Zmc2V0Q29tcCA9IGNvcm5lckh5cG90ZW51c2UgKiBmYWJyaWMudXRpbC5zaW4obmV3VGhldGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0bDoge1xuICAgICAgICAgIHg6IGNlbnRlclggLSBzaW5IYWxmT2Zmc2V0Q29tcCxcbiAgICAgICAgICB5OiBjZW50ZXJZIC0gY29zSGFsZk9mZnNldENvbXAsXG4gICAgICAgIH0sXG4gICAgICAgIHRyOiB7XG4gICAgICAgICAgeDogY2VudGVyWCArIGNvc0hhbGZPZmZzZXQsXG4gICAgICAgICAgeTogY2VudGVyWSAtIHNpbkhhbGZPZmZzZXQsXG4gICAgICAgIH0sXG4gICAgICAgIGJsOiB7XG4gICAgICAgICAgeDogY2VudGVyWCAtIGNvc0hhbGZPZmZzZXQsXG4gICAgICAgICAgeTogY2VudGVyWSArIHNpbkhhbGZPZmZzZXQsXG4gICAgICAgIH0sXG4gICAgICAgIGJyOiB7XG4gICAgICAgICAgeDogY2VudGVyWCArIHNpbkhhbGZPZmZzZXRDb21wLFxuICAgICAgICAgIHk6IGNlbnRlclkgKyBjb3NIYWxmT2Zmc2V0Q29tcCxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICogUmVuZGVyIGZ1bmN0aW9uIGZvciB0aGUgY29udHJvbC5cbiAgICAqIFdoZW4gdGhpcyBmdW5jdGlvbiBydW5zIHRoZSBjb250ZXh0IGlzIHVuc2NhbGVkLiB1bnJvdGF0ZS4gSnVzdCByZXRpbmEgc2NhbGVkLlxuICAgICogYWxsIHRoZSBmdW5jdGlvbnMgd2lsbCBoYXZlIHRvIHRyYW5zbGF0ZSB0byB0aGUgcG9pbnQgbGVmdCx0b3AgYmVmb3JlIHN0YXJ0aW5nIERyYXdpbmdcbiAgICAqIGlmIHRoZXkgd2FudCB0byBkcmF3IGEgY29udHJvbCB3aGVyZSB0aGUgcG9zaXRpb24gaXMgZGV0ZWN0ZWQuXG4gICAgKiBsZWZ0IGFuZCB0b3AgYXJlIHRoZSByZXN1bHQgb2YgdGhlIHBvc2l0aW9uSGFuZGxlciBmdW5jdGlvblxuICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCB0aGUgY29udGV4dCB3aGVyZSB0aGUgY29udHJvbCB3aWxsIGJlIGRyYXduXG4gICAgKiBAcGFyYW0ge051bWJlcn0gbGVmdCBwb3NpdGlvbiBvZiB0aGUgY2FudmFzIHdoZXJlIHdlIGFyZSBhYm91dCB0byByZW5kZXIgdGhlIGNvbnRyb2wuXG4gICAgKiBAcGFyYW0ge051bWJlcn0gdG9wIHBvc2l0aW9uIG9mIHRoZSBjYW52YXMgd2hlcmUgd2UgYXJlIGFib3V0IHRvIHJlbmRlciB0aGUgY29udHJvbC5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZU92ZXJyaWRlXG4gICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IGZhYnJpY09iamVjdCB0aGUgb2JqZWN0IHdoZXJlIHRoZSBjb250cm9sIGlzIGFib3V0IHRvIGJlIHJlbmRlcmVkXG4gICAgKi9cbiAgICByZW5kZXI6IGZ1bmN0aW9uKGN0eCwgbGVmdCwgdG9wLCBzdHlsZU92ZXJyaWRlLCBmYWJyaWNPYmplY3QpIHtcbiAgICAgIHN0eWxlT3ZlcnJpZGUgPSBzdHlsZU92ZXJyaWRlIHx8IHt9O1xuICAgICAgc3dpdGNoIChzdHlsZU92ZXJyaWRlLmNvcm5lclN0eWxlIHx8IGZhYnJpY09iamVjdC5jb3JuZXJTdHlsZSkge1xuICAgICAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgICAgIGZhYnJpYy5jb250cm9sc1V0aWxzLnJlbmRlckNpcmNsZUNvbnRyb2wuY2FsbCh0aGlzLCBjdHgsIGxlZnQsIHRvcCwgc3R5bGVPdmVycmlkZSwgZmFicmljT2JqZWN0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmYWJyaWMuY29udHJvbHNVdGlscy5yZW5kZXJTcXVhcmVDb250cm9sLmNhbGwodGhpcywgY3R4LCBsZWZ0LCB0b3AsIHN0eWxlT3ZlcnJpZGUsIGZhYnJpY09iamVjdCk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICAvKiBfRlJPTV9TVkdfU1RBUlRfICovXG4gIGZ1bmN0aW9uIGdldENvbG9yU3RvcChlbCwgbXVsdGlwbGllcikge1xuICAgIHZhciBzdHlsZSA9IGVsLmdldEF0dHJpYnV0ZSgnc3R5bGUnKSxcbiAgICAgICAgb2Zmc2V0ID0gZWwuZ2V0QXR0cmlidXRlKCdvZmZzZXQnKSB8fCAwLFxuICAgICAgICBjb2xvciwgY29sb3JBbHBoYSwgb3BhY2l0eSwgaTtcblxuICAgIC8vIGNvbnZlcnQgcGVyY2VudHMgdG8gYWJzb2x1dGUgdmFsdWVzXG4gICAgb2Zmc2V0ID0gcGFyc2VGbG9hdChvZmZzZXQpIC8gKC8lJC8udGVzdChvZmZzZXQpID8gMTAwIDogMSk7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IDwgMCA/IDAgOiBvZmZzZXQgPiAxID8gMSA6IG9mZnNldDtcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIHZhciBrZXlWYWx1ZVBhaXJzID0gc3R5bGUuc3BsaXQoL1xccyo7XFxzKi8pO1xuXG4gICAgICBpZiAoa2V5VmFsdWVQYWlyc1trZXlWYWx1ZVBhaXJzLmxlbmd0aCAtIDFdID09PSAnJykge1xuICAgICAgICBrZXlWYWx1ZVBhaXJzLnBvcCgpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSBrZXlWYWx1ZVBhaXJzLmxlbmd0aDsgaS0tOyApIHtcblxuICAgICAgICB2YXIgc3BsaXQgPSBrZXlWYWx1ZVBhaXJzW2ldLnNwbGl0KC9cXHMqOlxccyovKSxcbiAgICAgICAgICAgIGtleSA9IHNwbGl0WzBdLnRyaW0oKSxcbiAgICAgICAgICAgIHZhbHVlID0gc3BsaXRbMV0udHJpbSgpO1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdzdG9wLWNvbG9yJykge1xuICAgICAgICAgIGNvbG9yID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnc3RvcC1vcGFjaXR5Jykge1xuICAgICAgICAgIG9wYWNpdHkgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY29sb3IpIHtcbiAgICAgIGNvbG9yID0gZWwuZ2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJykgfHwgJ3JnYigwLDAsMCknO1xuICAgIH1cbiAgICBpZiAoIW9wYWNpdHkpIHtcbiAgICAgIG9wYWNpdHkgPSBlbC5nZXRBdHRyaWJ1dGUoJ3N0b3Atb3BhY2l0eScpO1xuICAgIH1cblxuICAgIGNvbG9yID0gbmV3IGZhYnJpYy5Db2xvcihjb2xvcik7XG4gICAgY29sb3JBbHBoYSA9IGNvbG9yLmdldEFscGhhKCk7XG4gICAgb3BhY2l0eSA9IGlzTmFOKHBhcnNlRmxvYXQob3BhY2l0eSkpID8gMSA6IHBhcnNlRmxvYXQob3BhY2l0eSk7XG4gICAgb3BhY2l0eSAqPSBjb2xvckFscGhhICogbXVsdGlwbGllcjtcblxuICAgIHJldHVybiB7XG4gICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgIGNvbG9yOiBjb2xvci50b1JnYigpLFxuICAgICAgb3BhY2l0eTogb3BhY2l0eVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRMaW5lYXJDb29yZHMoZWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDE6IGVsLmdldEF0dHJpYnV0ZSgneDEnKSB8fCAwLFxuICAgICAgeTE6IGVsLmdldEF0dHJpYnV0ZSgneTEnKSB8fCAwLFxuICAgICAgeDI6IGVsLmdldEF0dHJpYnV0ZSgneDInKSB8fCAnMTAwJScsXG4gICAgICB5MjogZWwuZ2V0QXR0cmlidXRlKCd5MicpIHx8IDBcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmFkaWFsQ29vcmRzKGVsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHgxOiBlbC5nZXRBdHRyaWJ1dGUoJ2Z4JykgfHwgZWwuZ2V0QXR0cmlidXRlKCdjeCcpIHx8ICc1MCUnLFxuICAgICAgeTE6IGVsLmdldEF0dHJpYnV0ZSgnZnknKSB8fCBlbC5nZXRBdHRyaWJ1dGUoJ2N5JykgfHwgJzUwJScsXG4gICAgICByMTogMCxcbiAgICAgIHgyOiBlbC5nZXRBdHRyaWJ1dGUoJ2N4JykgfHwgJzUwJScsXG4gICAgICB5MjogZWwuZ2V0QXR0cmlidXRlKCdjeScpIHx8ICc1MCUnLFxuICAgICAgcjI6IGVsLmdldEF0dHJpYnV0ZSgncicpIHx8ICc1MCUnXG4gICAgfTtcbiAgfVxuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG4gIHZhciBjbG9uZSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZTtcblxuICAvKipcbiAgICogR3JhZGllbnQgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5HcmFkaWVudFxuICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMiNncmFkaWVudHN9XG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5HcmFkaWVudCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLkdyYWRpZW50ID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoLyoqIEBsZW5kcyBmYWJyaWMuR3JhZGllbnQucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEhvcml6b250YWwgb2Zmc2V0IGZvciBhbGlnbmluZyBncmFkaWVudHMgY29taW5nIGZyb20gU1ZHIHdoZW4gb3V0c2lkZSBwYXRoZ3JvdXBzXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIG9mZnNldFg6IDAsXG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBvZmZzZXQgZm9yIGFsaWduaW5nIGdyYWRpZW50cyBjb21pbmcgZnJvbSBTVkcgd2hlbiBvdXRzaWRlIHBhdGhncm91cHNcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgb2Zmc2V0WTogMCxcblxuICAgIC8qKlxuICAgICAqIEEgdHJhbnNmb3JtIG1hdHJpeCB0byBhcHBseSB0byB0aGUgZ3JhZGllbnQgYmVmb3JlIHBhaW50aW5nLlxuICAgICAqIEltcG9ydGVkIGZyb20gc3ZnIGdyYWRpZW50cywgaXMgbm90IGFwcGxpZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2Zvcm0gaW4gdGhlIGNlbnRlci5cbiAgICAgKiBCZWZvcmUgdGhpcyB0cmFuc2Zvcm0gaXMgYXBwbGllZCwgdGhlIG9yaWdpbiBwb2ludCBpcyBhdCB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBvYmplY3RcbiAgICAgKiBwbHVzIHRoZSBhZGRpdGlvbiBvZiBvZmZzZXRZIGFuZCBvZmZzZXRYLlxuICAgICAqIEB0eXBlIE51bWJlcltdXG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGdyYWRpZW50VHJhbnNmb3JtOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogY29vcmRpbmF0ZXMgdW5pdHMgZm9yIGNvb3Jkcy5cbiAgICAgKiBJZiBgcGl4ZWxzYCwgdGhlIG51bWJlciBvZiBjb29yZHMgYXJlIGluIHRoZSBzYW1lIHVuaXQgb2Ygd2lkdGggLyBoZWlnaHQuXG4gICAgICogSWYgc2V0IGFzIGBwZXJjZW50YWdlYCB0aGUgY29vcmRzIGFyZSBzdGlsbCBhIG51bWJlciwgYnV0IDEgbWVhbnMgMTAwJSBvZiB3aWR0aFxuICAgICAqIGZvciB0aGUgWCBhbmQgMTAwJSBvZiB0aGUgaGVpZ2h0IGZvciB0aGUgeS4gSXQgY2FuIGJlIGJpZ2dlciB0aGFuIDEgYW5kIG5lZ2F0aXZlLlxuICAgICAqIGFsbG93ZWQgdmFsdWVzIHBpeGVscyBvciBwZXJjZW50YWdlLlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0ICdwaXhlbHMnXG4gICAgICovXG4gICAgZ3JhZGllbnRVbml0czogJ3BpeGVscycsXG5cbiAgICAvKipcbiAgICAgKiBHcmFkaWVudCB0eXBlIGxpbmVhciBvciByYWRpYWxcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdCAncGl4ZWxzJ1xuICAgICAqL1xuICAgIHR5cGU6ICdsaW5lYXInLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdCB3aXRoIHR5cGUsIGNvb3JkcywgZ3JhZGllbnRVbml0cyBhbmQgY29sb3JTdG9wc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy50eXBlXSBncmFkaWVudCB0eXBlIGxpbmVhciBvciByYWRpYWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuZ3JhZGllbnRVbml0c10gZ3JhZGllbnQgdW5pdHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMub2Zmc2V0WF0gU1ZHIGltcG9ydCBjb21wYXRpYmlsaXR5XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLm9mZnNldFldIFNWRyBpbXBvcnQgY29tcGF0aWJpbGl0eVxuICAgICAqIEBwYXJhbSB7T2JqZWN0W119IG9wdGlvbnMuY29sb3JTdG9wcyBjb250YWlucyB0aGUgY29sb3JzdG9wcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5jb29yZHMgY29udGFpbnMgdGhlIGNvb3JkcyBvZiB0aGUgZ3JhZGllbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29vcmRzLngxXSBYIGNvb3JkaWFudGUgb2YgdGhlIGZpcnN0IHBvaW50IGZvciBsaW5lYXIgb3Igb2YgdGhlIGZvY2FsIHBvaW50IGZvciByYWRpYWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29vcmRzLnkxXSBZIGNvb3JkaWFudGUgb2YgdGhlIGZpcnN0IHBvaW50IGZvciBsaW5lYXIgb3Igb2YgdGhlIGZvY2FsIHBvaW50IGZvciByYWRpYWxcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuY29vcmRzLngyXSBYIGNvb3JkaWFudGUgb2YgdGhlIHNlY29uZCBwb2ludCBmb3IgbGluZWFyIG9yIG9mIHRoZSBjZW50ZXIgcG9pbnQgZm9yIHJhZGlhbFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb29yZHMueTJdIFkgY29vcmRpYW50ZSBvZiB0aGUgc2Vjb25kIHBvaW50IGZvciBsaW5lYXIgb3Igb2YgdGhlIGNlbnRlciBwb2ludCBmb3IgcmFkaWFsXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmNvb3Jkcy5yMV0gb25seSBmb3IgcmFkaWFsIGdyYWRpZW50LCByYWRpdXMgb2YgdGhlIGlubmVyIGNpcmNsZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb29yZHMucjJdIG9ubHkgZm9yIHJhZGlhbCBncmFkaWVudCwgcmFkaXVzIG9mIHRoZSBleHRlcm5hbCBjaXJjbGVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JhZGllbnR9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0geyB9KTtcbiAgICAgIG9wdGlvbnMuY29vcmRzIHx8IChvcHRpb25zLmNvb3JkcyA9IHsgfSk7XG5cbiAgICAgIHZhciBjb29yZHMsIF90aGlzID0gdGhpcztcblxuICAgICAgLy8gc2V0cyBldmVyeXRoaW5nLCB0aGVuIGNvb3JkcyBhbmQgY29sb3JzdG9wcyBnZXQgc2V0cyBhZ2FpblxuICAgICAgT2JqZWN0LmtleXMob3B0aW9ucykuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgX3RoaXNbb3B0aW9uXSA9IG9wdGlvbnNbb3B0aW9uXTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5pZCkge1xuICAgICAgICB0aGlzLmlkICs9ICdfJyArIGZhYnJpYy5PYmplY3QuX191aWQrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmlkID0gZmFicmljLk9iamVjdC5fX3VpZCsrO1xuICAgICAgfVxuXG4gICAgICBjb29yZHMgPSB7XG4gICAgICAgIHgxOiBvcHRpb25zLmNvb3Jkcy54MSB8fCAwLFxuICAgICAgICB5MTogb3B0aW9ucy5jb29yZHMueTEgfHwgMCxcbiAgICAgICAgeDI6IG9wdGlvbnMuY29vcmRzLngyIHx8IDAsXG4gICAgICAgIHkyOiBvcHRpb25zLmNvb3Jkcy55MiB8fCAwXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy50eXBlID09PSAncmFkaWFsJykge1xuICAgICAgICBjb29yZHMucjEgPSBvcHRpb25zLmNvb3Jkcy5yMSB8fCAwO1xuICAgICAgICBjb29yZHMucjIgPSBvcHRpb25zLmNvb3Jkcy5yMiB8fCAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvb3JkcyA9IGNvb3JkcztcbiAgICAgIHRoaXMuY29sb3JTdG9wcyA9IG9wdGlvbnMuY29sb3JTdG9wcy5zbGljZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFub3RoZXIgY29sb3JTdG9wXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbG9yU3RvcCBPYmplY3Qgd2l0aCBvZmZzZXQgYW5kIGNvbG9yXG4gICAgICogQHJldHVybiB7ZmFicmljLkdyYWRpZW50fSB0aGlzQXJnXG4gICAgICovXG4gICAgYWRkQ29sb3JTdG9wOiBmdW5jdGlvbihjb2xvclN0b3BzKSB7XG4gICAgICBmb3IgKHZhciBwb3NpdGlvbiBpbiBjb2xvclN0b3BzKSB7XG4gICAgICAgIHZhciBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IoY29sb3JTdG9wc1twb3NpdGlvbl0pO1xuICAgICAgICB0aGlzLmNvbG9yU3RvcHMucHVzaCh7XG4gICAgICAgICAgb2Zmc2V0OiBwYXJzZUZsb2F0KHBvc2l0aW9uKSxcbiAgICAgICAgICBjb2xvcjogY29sb3IudG9SZ2IoKSxcbiAgICAgICAgICBvcGFjaXR5OiBjb2xvci5nZXRBbHBoYSgpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGEgZ3JhZGllbnRcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICB2YXIgb2JqZWN0ID0ge1xuICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgIGNvb3JkczogdGhpcy5jb29yZHMsXG4gICAgICAgIGNvbG9yU3RvcHM6IHRoaXMuY29sb3JTdG9wcyxcbiAgICAgICAgb2Zmc2V0WDogdGhpcy5vZmZzZXRYLFxuICAgICAgICBvZmZzZXRZOiB0aGlzLm9mZnNldFksXG4gICAgICAgIGdyYWRpZW50VW5pdHM6IHRoaXMuZ3JhZGllbnRVbml0cyxcbiAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm06IHRoaXMuZ3JhZGllbnRUcmFuc2Zvcm0gPyB0aGlzLmdyYWRpZW50VHJhbnNmb3JtLmNvbmNhdCgpIDogdGhpcy5ncmFkaWVudFRyYW5zZm9ybVxuICAgICAgfTtcbiAgICAgIGZhYnJpYy51dGlsLnBvcHVsYXRlV2l0aFByb3BlcnRpZXModGhpcywgb2JqZWN0LCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFNWRyByZXByZXNlbnRhdGlvbiBvZiBhbiBncmFkaWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhIGdyYWRpZW50IGZvclxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gU1ZHIHJlcHJlc2VudGF0aW9uIG9mIGFuIGdyYWRpZW50IChsaW5lYXIvcmFkaWFsKVxuICAgICAqL1xuICAgIHRvU1ZHOiBmdW5jdGlvbihvYmplY3QsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBjb29yZHMgPSBjbG9uZSh0aGlzLmNvb3JkcywgdHJ1ZSksIGksIGxlbiwgb3B0aW9ucyA9IG9wdGlvbnMgfHwge30sXG4gICAgICAgICAgbWFya3VwLCBjb21tb25BdHRyaWJ1dGVzLCBjb2xvclN0b3BzID0gY2xvbmUodGhpcy5jb2xvclN0b3BzLCB0cnVlKSxcbiAgICAgICAgICBuZWVkc1N3YXAgPSBjb29yZHMucjEgPiBjb29yZHMucjIsXG4gICAgICAgICAgdHJhbnNmb3JtID0gdGhpcy5ncmFkaWVudFRyYW5zZm9ybSA/IHRoaXMuZ3JhZGllbnRUcmFuc2Zvcm0uY29uY2F0KCkgOiBmYWJyaWMuaU1hdHJpeC5jb25jYXQoKSxcbiAgICAgICAgICBvZmZzZXRYID0gLXRoaXMub2Zmc2V0WCwgb2Zmc2V0WSA9IC10aGlzLm9mZnNldFksXG4gICAgICAgICAgd2l0aFZpZXdwb3J0ID0gISFvcHRpb25zLmFkZGl0aW9uYWxUcmFuc2Zvcm0sXG4gICAgICAgICAgZ3JhZGllbnRVbml0cyA9IHRoaXMuZ3JhZGllbnRVbml0cyA9PT0gJ3BpeGVscycgPyAndXNlclNwYWNlT25Vc2UnIDogJ29iamVjdEJvdW5kaW5nQm94JztcbiAgICAgIC8vIGNvbG9yU3RvcHMgbXVzdCBiZSBzb3J0ZWQgYXNjZW5kaW5nXG4gICAgICBjb2xvclN0b3BzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gYS5vZmZzZXQgLSBiLm9mZnNldDtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZ3JhZGllbnRVbml0cyA9PT0gJ29iamVjdEJvdW5kaW5nQm94Jykge1xuICAgICAgICBvZmZzZXRYIC89IG9iamVjdC53aWR0aDtcbiAgICAgICAgb2Zmc2V0WSAvPSBvYmplY3QuaGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9mZnNldFggKz0gb2JqZWN0LndpZHRoIC8gMjtcbiAgICAgICAgb2Zmc2V0WSArPSBvYmplY3QuaGVpZ2h0IC8gMjtcbiAgICAgIH1cbiAgICAgIGlmIChvYmplY3QudHlwZSA9PT0gJ3BhdGgnICYmIHRoaXMuZ3JhZGllbnRVbml0cyAhPT0gJ3BlcmNlbnRhZ2UnKSB7XG4gICAgICAgIG9mZnNldFggLT0gb2JqZWN0LnBhdGhPZmZzZXQueDtcbiAgICAgICAgb2Zmc2V0WSAtPSBvYmplY3QucGF0aE9mZnNldC55O1xuICAgICAgfVxuXG5cbiAgICAgIHRyYW5zZm9ybVs0XSAtPSBvZmZzZXRYO1xuICAgICAgdHJhbnNmb3JtWzVdIC09IG9mZnNldFk7XG5cbiAgICAgIGNvbW1vbkF0dHJpYnV0ZXMgPSAnaWQ9XCJTVkdJRF8nICsgdGhpcy5pZCArXG4gICAgICAgICAgICAgICAgICAgICAnXCIgZ3JhZGllbnRVbml0cz1cIicgKyBncmFkaWVudFVuaXRzICsgJ1wiJztcbiAgICAgIGNvbW1vbkF0dHJpYnV0ZXMgKz0gJyBncmFkaWVudFRyYW5zZm9ybT1cIicgKyAod2l0aFZpZXdwb3J0ID9cbiAgICAgICAgb3B0aW9ucy5hZGRpdGlvbmFsVHJhbnNmb3JtICsgJyAnIDogJycpICsgZmFicmljLnV0aWwubWF0cml4VG9TVkcodHJhbnNmb3JtKSArICdcIiAnO1xuXG4gICAgICBpZiAodGhpcy50eXBlID09PSAnbGluZWFyJykge1xuICAgICAgICBtYXJrdXAgPSBbXG4gICAgICAgICAgJzxsaW5lYXJHcmFkaWVudCAnLFxuICAgICAgICAgIGNvbW1vbkF0dHJpYnV0ZXMsXG4gICAgICAgICAgJyB4MT1cIicsIGNvb3Jkcy54MSxcbiAgICAgICAgICAnXCIgeTE9XCInLCBjb29yZHMueTEsXG4gICAgICAgICAgJ1wiIHgyPVwiJywgY29vcmRzLngyLFxuICAgICAgICAgICdcIiB5Mj1cIicsIGNvb3Jkcy55MixcbiAgICAgICAgICAnXCI+XFxuJ1xuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09PSAncmFkaWFsJykge1xuICAgICAgICAvLyBzdmcgcmFkaWFsIGdyYWRpZW50IGhhcyBqdXN0IDEgcmFkaXVzLiB0aGUgYmlnZ2VzdC5cbiAgICAgICAgbWFya3VwID0gW1xuICAgICAgICAgICc8cmFkaWFsR3JhZGllbnQgJyxcbiAgICAgICAgICBjb21tb25BdHRyaWJ1dGVzLFxuICAgICAgICAgICcgY3g9XCInLCBuZWVkc1N3YXAgPyBjb29yZHMueDEgOiBjb29yZHMueDIsXG4gICAgICAgICAgJ1wiIGN5PVwiJywgbmVlZHNTd2FwID8gY29vcmRzLnkxIDogY29vcmRzLnkyLFxuICAgICAgICAgICdcIiByPVwiJywgbmVlZHNTd2FwID8gY29vcmRzLnIxIDogY29vcmRzLnIyLFxuICAgICAgICAgICdcIiBmeD1cIicsIG5lZWRzU3dhcCA/IGNvb3Jkcy54MiA6IGNvb3Jkcy54MSxcbiAgICAgICAgICAnXCIgZnk9XCInLCBuZWVkc1N3YXAgPyBjb29yZHMueTIgOiBjb29yZHMueTEsXG4gICAgICAgICAgJ1wiPlxcbidcbiAgICAgICAgXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3JhZGlhbCcpIHtcbiAgICAgICAgaWYgKG5lZWRzU3dhcCkge1xuICAgICAgICAgIC8vIHN2ZyBnb2VzIGZyb20gaW50ZXJuYWwgdG8gZXh0ZXJuYWwgcmFkaXVzLiBpZiByYWRpdXMgYXJlIGludmVydGVkLCBzd2FwIGNvbG9yIHN0b3BzLlxuICAgICAgICAgIGNvbG9yU3RvcHMgPSBjb2xvclN0b3BzLmNvbmNhdCgpO1xuICAgICAgICAgIGNvbG9yU3RvcHMucmV2ZXJzZSgpO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGNvbG9yU3RvcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGNvbG9yU3RvcHNbaV0ub2Zmc2V0ID0gMSAtIGNvbG9yU3RvcHNbaV0ub2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbWluUmFkaXVzID0gTWF0aC5taW4oY29vcmRzLnIxLCBjb29yZHMucjIpO1xuICAgICAgICBpZiAobWluUmFkaXVzID4gMCkge1xuICAgICAgICAgIC8vIGkgaGF2ZSB0byBzaGlmdCBhbGwgY29sb3JTdG9wcyBhbmQgYWRkIG5ldyBvbmUgaW4gMC5cbiAgICAgICAgICB2YXIgbWF4UmFkaXVzID0gTWF0aC5tYXgoY29vcmRzLnIxLCBjb29yZHMucjIpLFxuICAgICAgICAgICAgICBwZXJjZW50YWdlU2hpZnQgPSBtaW5SYWRpdXMgLyBtYXhSYWRpdXM7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gY29sb3JTdG9wcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgY29sb3JTdG9wc1tpXS5vZmZzZXQgKz0gcGVyY2VudGFnZVNoaWZ0ICogKDEgLSBjb2xvclN0b3BzW2ldLm9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGNvbG9yU3RvcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGNvbG9yU3RvcCA9IGNvbG9yU3RvcHNbaV07XG4gICAgICAgIG1hcmt1cC5wdXNoKFxuICAgICAgICAgICc8c3RvcCAnLFxuICAgICAgICAgICdvZmZzZXQ9XCInLCAoY29sb3JTdG9wLm9mZnNldCAqIDEwMCkgKyAnJScsXG4gICAgICAgICAgJ1wiIHN0eWxlPVwic3RvcC1jb2xvcjonLCBjb2xvclN0b3AuY29sb3IsXG4gICAgICAgICAgKHR5cGVvZiBjb2xvclN0b3Aub3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgPyAnO3N0b3Atb3BhY2l0eTogJyArIGNvbG9yU3RvcC5vcGFjaXR5IDogJzsnKSxcbiAgICAgICAgICAnXCIvPlxcbidcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgbWFya3VwLnB1c2goKHRoaXMudHlwZSA9PT0gJ2xpbmVhcicgPyAnPC9saW5lYXJHcmFkaWVudD5cXG4nIDogJzwvcmFkaWFsR3JhZGllbnQ+XFxuJykpO1xuXG4gICAgICByZXR1cm4gbWFya3VwLmpvaW4oJycpO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIENhbnZhc0dyYWRpZW50XG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEByZXR1cm4ge0NhbnZhc0dyYWRpZW50fVxuICAgICAqL1xuICAgIHRvTGl2ZTogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgZ3JhZGllbnQsIGNvb3JkcyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZSh0aGlzLmNvb3JkcyksIGksIGxlbjtcblxuICAgICAgaWYgKCF0aGlzLnR5cGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50eXBlID09PSAnbGluZWFyJykge1xuICAgICAgICBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudChcbiAgICAgICAgICBjb29yZHMueDEsIGNvb3Jkcy55MSwgY29vcmRzLngyLCBjb29yZHMueTIpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy50eXBlID09PSAncmFkaWFsJykge1xuICAgICAgICBncmFkaWVudCA9IGN0eC5jcmVhdGVSYWRpYWxHcmFkaWVudChcbiAgICAgICAgICBjb29yZHMueDEsIGNvb3Jkcy55MSwgY29vcmRzLnIxLCBjb29yZHMueDIsIGNvb3Jkcy55MiwgY29vcmRzLnIyKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gdGhpcy5jb2xvclN0b3BzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjb2xvciA9IHRoaXMuY29sb3JTdG9wc1tpXS5jb2xvcixcbiAgICAgICAgICAgIG9wYWNpdHkgPSB0aGlzLmNvbG9yU3RvcHNbaV0ub3BhY2l0eSxcbiAgICAgICAgICAgIG9mZnNldCA9IHRoaXMuY29sb3JTdG9wc1tpXS5vZmZzZXQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcGFjaXR5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGNvbG9yID0gbmV3IGZhYnJpYy5Db2xvcihjb2xvcikuc2V0QWxwaGEob3BhY2l0eSkudG9SZ2JhKCk7XG4gICAgICAgIH1cbiAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKG9mZnNldCwgY29sb3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ3JhZGllbnQ7XG4gICAgfVxuICB9KTtcblxuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5HcmFkaWVudCwge1xuXG4gICAgLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5HcmFkaWVudH0gaW5zdGFuY2UgZnJvbSBhbiBTVkcgZWxlbWVudFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLkdyYWRpZW50XG4gICAgICogQHBhcmFtIHtTVkdHcmFkaWVudEVsZW1lbnR9IGVsIFNWRyBncmFkaWVudCBlbGVtZW50XG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcGFjaXR5QXR0ciBBIGZpbGwtb3BhY2l0eSBvciBzdHJva2Utb3BhY2l0eSBhdHRyaWJ1dGUgdG8gbXVsdGlwbHkgdG8gZWFjaCBzdG9wJ3Mgb3BhY2l0eS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3ZnT3B0aW9ucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgc2l6ZSBvZiB0aGUgU1ZHIGluIG9yZGVyIHRvIHBhcnNlIGNvcnJlY3RseSBncmFkaWVudHNcbiAgICAgKiB0aGF0IHVzZXMgZ3JhZGllbnRVbml0cyBhcyAndXNlclNwYWNlT25Vc2UnIGFuZCBwZXJjZW50YWdlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdC5udW1iZXJ9IHZpZXdCb3hXaWR0aCB3aWR0aCBwYXJ0IG9mIHRoZSB2aWV3Qm94IGF0dHJpYnV0ZSBvbiBzdmdcbiAgICAgKiBAcGFyYW0ge09iamVjdC5udW1iZXJ9IHZpZXdCb3hIZWlnaHQgaGVpZ2h0IHBhcnQgb2YgdGhlIHZpZXdCb3ggYXR0cmlidXRlIG9uIHN2Z1xuICAgICAqIEBwYXJhbSB7T2JqZWN0Lm51bWJlcn0gd2lkdGggd2lkdGggcGFydCBvZiB0aGUgc3ZnIHRhZyBpZiB2aWV3Qm94IGlzIG5vdCBzcGVjaWZpZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdC5udW1iZXJ9IGhlaWdodCBoZWlnaHQgcGFydCBvZiB0aGUgc3ZnIHRhZyBpZiB2aWV3Qm94IGlzIG5vdCBzcGVjaWZpZWRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JhZGllbnR9IEdyYWRpZW50IGluc3RhbmNlXG4gICAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvcHNlcnZlcnMuaHRtbCNMaW5lYXJHcmFkaWVudEVsZW1lbnRcbiAgICAgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9wc2VydmVycy5odG1sI1JhZGlhbEdyYWRpZW50RWxlbWVudFxuICAgICAqL1xuICAgIGZyb21FbGVtZW50OiBmdW5jdGlvbihlbCwgaW5zdGFuY2UsIG9wYWNpdHlBdHRyLCBzdmdPcHRpb25zKSB7XG4gICAgICAvKipcbiAgICAgICAqICBAZXhhbXBsZTpcbiAgICAgICAqXG4gICAgICAgKiAgPGxpbmVhckdyYWRpZW50IGlkPVwibGluZWFyR3JhZDFcIj5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3RvcC1jb2xvcj1cIndoaXRlXCIvPlxuICAgICAgICogICAgPHN0b3Agb2Zmc2V0PVwiMTAwJVwiIHN0b3AtY29sb3I9XCJibGFja1wiLz5cbiAgICAgICAqICA8L2xpbmVhckdyYWRpZW50PlxuICAgICAgICpcbiAgICAgICAqICBPUlxuICAgICAgICpcbiAgICAgICAqICA8bGluZWFyR3JhZGllbnQgaWQ9XCJsaW5lYXJHcmFkMlwiPlxuICAgICAgICogICAgPHN0b3Agb2Zmc2V0PVwiMFwiIHN0eWxlPVwic3RvcC1jb2xvcjpyZ2IoMjU1LDI1NSwyNTUpXCIvPlxuICAgICAgICogICAgPHN0b3Agb2Zmc2V0PVwiMVwiIHN0eWxlPVwic3RvcC1jb2xvcjpyZ2IoMCwwLDApXCIvPlxuICAgICAgICogIDwvbGluZWFyR3JhZGllbnQ+XG4gICAgICAgKlxuICAgICAgICogIE9SXG4gICAgICAgKlxuICAgICAgICogIDxyYWRpYWxHcmFkaWVudCBpZD1cInJhZGlhbEdyYWQxXCI+XG4gICAgICAgKiAgICA8c3RvcCBvZmZzZXQ9XCIwJVwiIHN0b3AtY29sb3I9XCJ3aGl0ZVwiIHN0b3Atb3BhY2l0eT1cIjFcIiAvPlxuICAgICAgICogICAgPHN0b3Agb2Zmc2V0PVwiNTAlXCIgc3RvcC1jb2xvcj1cImJsYWNrXCIgc3RvcC1vcGFjaXR5PVwiMC41XCIgLz5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdG9wLWNvbG9yPVwid2hpdGVcIiBzdG9wLW9wYWNpdHk9XCIxXCIgLz5cbiAgICAgICAqICA8L3JhZGlhbEdyYWRpZW50PlxuICAgICAgICpcbiAgICAgICAqICBPUlxuICAgICAgICpcbiAgICAgICAqICA8cmFkaWFsR3JhZGllbnQgaWQ9XCJyYWRpYWxHcmFkMlwiPlxuICAgICAgICogICAgPHN0b3Agb2Zmc2V0PVwiMFwiIHN0b3AtY29sb3I9XCJyZ2IoMjU1LDI1NSwyNTUpXCIgLz5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjAuNVwiIHN0b3AtY29sb3I9XCJyZ2IoMCwwLDApXCIgLz5cbiAgICAgICAqICAgIDxzdG9wIG9mZnNldD1cIjFcIiBzdG9wLWNvbG9yPVwicmdiKDI1NSwyNTUsMjU1KVwiIC8+XG4gICAgICAgKiAgPC9yYWRpYWxHcmFkaWVudD5cbiAgICAgICAqXG4gICAgICAgKi9cblxuICAgICAgdmFyIG11bHRpcGxpZXIgPSBwYXJzZUZsb2F0KG9wYWNpdHlBdHRyKSAvICgvJSQvLnRlc3Qob3BhY2l0eUF0dHIpID8gMTAwIDogMSk7XG4gICAgICBtdWx0aXBsaWVyID0gbXVsdGlwbGllciA8IDAgPyAwIDogbXVsdGlwbGllciA+IDEgPyAxIDogbXVsdGlwbGllcjtcbiAgICAgIGlmIChpc05hTihtdWx0aXBsaWVyKSkge1xuICAgICAgICBtdWx0aXBsaWVyID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbG9yU3RvcEVscyA9IGVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdG9wJyksXG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBncmFkaWVudFVuaXRzID0gZWwuZ2V0QXR0cmlidXRlKCdncmFkaWVudFVuaXRzJykgPT09ICd1c2VyU3BhY2VPblVzZScgP1xuICAgICAgICAgICAgJ3BpeGVscycgOiAncGVyY2VudGFnZScsXG4gICAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm0gPSBlbC5nZXRBdHRyaWJ1dGUoJ2dyYWRpZW50VHJhbnNmb3JtJykgfHwgJycsXG4gICAgICAgICAgY29sb3JTdG9wcyA9IFtdLFxuICAgICAgICAgIGNvb3JkcywgaSwgb2Zmc2V0WCA9IDAsIG9mZnNldFkgPSAwLFxuICAgICAgICAgIHRyYW5zZm9ybU1hdHJpeDtcbiAgICAgIGlmIChlbC5ub2RlTmFtZSA9PT0gJ2xpbmVhckdyYWRpZW50JyB8fCBlbC5ub2RlTmFtZSA9PT0gJ0xJTkVBUkdSQURJRU5UJykge1xuICAgICAgICB0eXBlID0gJ2xpbmVhcic7XG4gICAgICAgIGNvb3JkcyA9IGdldExpbmVhckNvb3JkcyhlbCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdHlwZSA9ICdyYWRpYWwnO1xuICAgICAgICBjb29yZHMgPSBnZXRSYWRpYWxDb29yZHMoZWwpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSBjb2xvclN0b3BFbHMubGVuZ3RoOyBpLS07ICkge1xuICAgICAgICBjb2xvclN0b3BzLnB1c2goZ2V0Q29sb3JTdG9wKGNvbG9yU3RvcEVsc1tpXSwgbXVsdGlwbGllcikpO1xuICAgICAgfVxuXG4gICAgICB0cmFuc2Zvcm1NYXRyaXggPSBmYWJyaWMucGFyc2VUcmFuc2Zvcm1BdHRyaWJ1dGUoZ3JhZGllbnRUcmFuc2Zvcm0pO1xuXG4gICAgICBfX2NvbnZlcnRQZXJjZW50VW5pdHNUb1ZhbHVlcyhpbnN0YW5jZSwgY29vcmRzLCBzdmdPcHRpb25zLCBncmFkaWVudFVuaXRzKTtcblxuICAgICAgaWYgKGdyYWRpZW50VW5pdHMgPT09ICdwaXhlbHMnKSB7XG4gICAgICAgIG9mZnNldFggPSAtaW5zdGFuY2UubGVmdDtcbiAgICAgICAgb2Zmc2V0WSA9IC1pbnN0YW5jZS50b3A7XG4gICAgICB9XG5cbiAgICAgIHZhciBncmFkaWVudCA9IG5ldyBmYWJyaWMuR3JhZGllbnQoe1xuICAgICAgICBpZDogZWwuZ2V0QXR0cmlidXRlKCdpZCcpLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBjb29yZHM6IGNvb3JkcyxcbiAgICAgICAgY29sb3JTdG9wczogY29sb3JTdG9wcyxcbiAgICAgICAgZ3JhZGllbnRVbml0czogZ3JhZGllbnRVbml0cyxcbiAgICAgICAgZ3JhZGllbnRUcmFuc2Zvcm06IHRyYW5zZm9ybU1hdHJpeCxcbiAgICAgICAgb2Zmc2V0WDogb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WTogb2Zmc2V0WSxcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZ3JhZGllbnQ7XG4gICAgfVxuICAgIC8qIF9GUk9NX1NWR19FTkRfICovXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gX19jb252ZXJ0UGVyY2VudFVuaXRzVG9WYWx1ZXMoaW5zdGFuY2UsIG9wdGlvbnMsIHN2Z09wdGlvbnMsIGdyYWRpZW50VW5pdHMpIHtcbiAgICB2YXIgcHJvcFZhbHVlLCBmaW5hbFZhbHVlO1xuICAgIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgcHJvcFZhbHVlID0gb3B0aW9uc1twcm9wXTtcbiAgICAgIGlmIChwcm9wVmFsdWUgPT09ICdJbmZpbml0eScpIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChwcm9wVmFsdWUgPT09ICctSW5maW5pdHknKSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSAwO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSBwYXJzZUZsb2F0KG9wdGlvbnNbcHJvcF0sIDEwKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnICYmIC9eKFxcZCtcXC5cXGQrKSV8KFxcZCspJSQvLnRlc3QocHJvcFZhbHVlKSkge1xuICAgICAgICAgIGZpbmFsVmFsdWUgKj0gMC4wMTtcbiAgICAgICAgICBpZiAoZ3JhZGllbnRVbml0cyA9PT0gJ3BpeGVscycpIHtcbiAgICAgICAgICAgIC8vIHRoZW4gd2UgbmVlZCB0byBmaXggdGhvc2UgcGVyY2VudGFnZXMgaGVyZSBpbiBzdmcgcGFyc2luZ1xuICAgICAgICAgICAgaWYgKHByb3AgPT09ICd4MScgfHwgcHJvcCA9PT0gJ3gyJyB8fCBwcm9wID09PSAncjInKSB7XG4gICAgICAgICAgICAgIGZpbmFsVmFsdWUgKj0gc3ZnT3B0aW9ucy52aWV3Qm94V2lkdGggfHwgc3ZnT3B0aW9ucy53aWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAneTEnIHx8IHByb3AgPT09ICd5MicpIHtcbiAgICAgICAgICAgICAgZmluYWxWYWx1ZSAqPSBzdmdPcHRpb25zLnZpZXdCb3hIZWlnaHQgfHwgc3ZnT3B0aW9ucy5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcHRpb25zW3Byb3BdID0gZmluYWxWYWx1ZTtcbiAgICB9KTtcbiAgfVxufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZDtcblxuICAvKipcbiAgICogUGF0dGVybiBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlBhdHRlcm5cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9wYXR0ZXJuc3xQYXR0ZXJuIGRlbW99XG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZHluYW1pYy1wYXR0ZXJuc3xEeW5hbWljUGF0dGVybiBkZW1vfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuUGF0dGVybiNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cblxuXG4gIGZhYnJpYy5QYXR0ZXJuID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoLyoqIEBsZW5kcyBmYWJyaWMuUGF0dGVybi5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogUmVwZWF0IHByb3BlcnR5IG9mIGEgcGF0dGVybiAob25lIG9mIHJlcGVhdCwgcmVwZWF0LXgsIHJlcGVhdC15IG9yIG5vLXJlcGVhdClcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHJlcGVhdDogJ3JlcGVhdCcsXG5cbiAgICAvKipcbiAgICAgKiBQYXR0ZXJuIGhvcml6b250YWwgb2Zmc2V0IGZyb20gb2JqZWN0J3MgbGVmdC90b3AgY29ybmVyXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBvZmZzZXRYOiAwLFxuXG4gICAgLyoqXG4gICAgICogUGF0dGVybiB2ZXJ0aWNhbCBvZmZzZXQgZnJvbSBvYmplY3QncyBsZWZ0L3RvcCBjb3JuZXJcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG9mZnNldFk6IDAsXG5cbiAgICAvKipcbiAgICAgKiBjcm9zc09yaWdpbiB2YWx1ZSAob25lIG9mIFwiXCIsIFwiYW5vbnltb3VzXCIsIFwidXNlLWNyZWRlbnRpYWxzXCIpXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0hUTUwvQ09SU19zZXR0aW5nc19hdHRyaWJ1dGVzXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjcm9zc09yaWdpbjogJycsXG5cbiAgICAvKipcbiAgICAgKiB0cmFuc2Zvcm0gbWF0cml4IHRvIGNoYW5nZSB0aGUgcGF0dGVybiwgaW1wb3J0ZWQgZnJvbSBzdmdzLlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwYXR0ZXJuVHJhbnNmb3JtOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBmdW5jdGlvbiB0byBpbnZva2UgYWZ0ZXIgY2FsbGJhY2sgaW5pdC5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUGF0dGVybn0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0geyB9KTtcblxuICAgICAgdGhpcy5pZCA9IGZhYnJpYy5PYmplY3QuX191aWQrKztcbiAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIGlmICghb3B0aW9ucy5zb3VyY2UgfHwgKG9wdGlvbnMuc291cmNlICYmIHR5cGVvZiBvcHRpb25zLnNvdXJjZSAhPT0gJ3N0cmluZycpKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHRoaXMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gaW1nIHNyYyBzdHJpbmdcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBmYWJyaWMudXRpbC5jcmVhdGVJbWFnZSgpO1xuICAgICAgICBmYWJyaWMudXRpbC5sb2FkSW1hZ2Uob3B0aW9ucy5zb3VyY2UsIGZ1bmN0aW9uKGltZywgaXNFcnJvcikge1xuICAgICAgICAgIF90aGlzLnNvdXJjZSA9IGltZztcbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhfdGhpcywgaXNFcnJvcik7XG4gICAgICAgIH0sIG51bGwsIHRoaXMuY3Jvc3NPcmlnaW4pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhIHBhdHRlcm5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYSBwYXR0ZXJuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBOVU1fRlJBQ1RJT05fRElHSVRTID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTLFxuICAgICAgICAgIHNvdXJjZSwgb2JqZWN0O1xuXG4gICAgICAvLyA8aW1nPiBlbGVtZW50XG4gICAgICBpZiAodHlwZW9mIHRoaXMuc291cmNlLnNyYyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc291cmNlID0gdGhpcy5zb3VyY2Uuc3JjO1xuICAgICAgfVxuICAgICAgLy8gPGNhbnZhcz4gZWxlbWVudFxuICAgICAgZWxzZSBpZiAodHlwZW9mIHRoaXMuc291cmNlID09PSAnb2JqZWN0JyAmJiB0aGlzLnNvdXJjZS50b0RhdGFVUkwpIHtcbiAgICAgICAgc291cmNlID0gdGhpcy5zb3VyY2UudG9EYXRhVVJMKCk7XG4gICAgICB9XG5cbiAgICAgIG9iamVjdCA9IHtcbiAgICAgICAgdHlwZTogJ3BhdHRlcm4nLFxuICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgcmVwZWF0OiB0aGlzLnJlcGVhdCxcbiAgICAgICAgY3Jvc3NPcmlnaW46IHRoaXMuY3Jvc3NPcmlnaW4sXG4gICAgICAgIG9mZnNldFg6IHRvRml4ZWQodGhpcy5vZmZzZXRYLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgb2Zmc2V0WTogdG9GaXhlZCh0aGlzLm9mZnNldFksIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICBwYXR0ZXJuVHJhbnNmb3JtOiB0aGlzLnBhdHRlcm5UcmFuc2Zvcm0gPyB0aGlzLnBhdHRlcm5UcmFuc2Zvcm0uY29uY2F0KCkgOiBudWxsXG4gICAgICB9O1xuICAgICAgZmFicmljLnV0aWwucG9wdWxhdGVXaXRoUHJvcGVydGllcyh0aGlzLCBvYmplY3QsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgU1ZHIHJlcHJlc2VudGF0aW9uIG9mIGEgcGF0dGVyblxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBTVkcgcmVwcmVzZW50YXRpb24gb2YgYSBwYXR0ZXJuXG4gICAgICovXG4gICAgdG9TVkc6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHBhdHRlcm5Tb3VyY2UgPSB0eXBlb2YgdGhpcy5zb3VyY2UgPT09ICdmdW5jdGlvbicgPyB0aGlzLnNvdXJjZSgpIDogdGhpcy5zb3VyY2UsXG4gICAgICAgICAgcGF0dGVybldpZHRoID0gcGF0dGVyblNvdXJjZS53aWR0aCAvIG9iamVjdC53aWR0aCxcbiAgICAgICAgICBwYXR0ZXJuSGVpZ2h0ID0gcGF0dGVyblNvdXJjZS5oZWlnaHQgLyBvYmplY3QuaGVpZ2h0LFxuICAgICAgICAgIHBhdHRlcm5PZmZzZXRYID0gdGhpcy5vZmZzZXRYIC8gb2JqZWN0LndpZHRoLFxuICAgICAgICAgIHBhdHRlcm5PZmZzZXRZID0gdGhpcy5vZmZzZXRZIC8gb2JqZWN0LmhlaWdodCxcbiAgICAgICAgICBwYXR0ZXJuSW1nU3JjID0gJyc7XG4gICAgICBpZiAodGhpcy5yZXBlYXQgPT09ICdyZXBlYXQteCcgfHwgdGhpcy5yZXBlYXQgPT09ICduby1yZXBlYXQnKSB7XG4gICAgICAgIHBhdHRlcm5IZWlnaHQgPSAxO1xuICAgICAgICBpZiAocGF0dGVybk9mZnNldFkpIHtcbiAgICAgICAgICBwYXR0ZXJuSGVpZ2h0ICs9IE1hdGguYWJzKHBhdHRlcm5PZmZzZXRZKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMucmVwZWF0ID09PSAncmVwZWF0LXknIHx8IHRoaXMucmVwZWF0ID09PSAnbm8tcmVwZWF0Jykge1xuICAgICAgICBwYXR0ZXJuV2lkdGggPSAxO1xuICAgICAgICBpZiAocGF0dGVybk9mZnNldFgpIHtcbiAgICAgICAgICBwYXR0ZXJuV2lkdGggKz0gTWF0aC5hYnMocGF0dGVybk9mZnNldFgpO1xuICAgICAgICB9XG5cbiAgICAgIH1cbiAgICAgIGlmIChwYXR0ZXJuU291cmNlLnNyYykge1xuICAgICAgICBwYXR0ZXJuSW1nU3JjID0gcGF0dGVyblNvdXJjZS5zcmM7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChwYXR0ZXJuU291cmNlLnRvRGF0YVVSTCkge1xuICAgICAgICBwYXR0ZXJuSW1nU3JjID0gcGF0dGVyblNvdXJjZS50b0RhdGFVUkwoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICc8cGF0dGVybiBpZD1cIlNWR0lEXycgKyB0aGlzLmlkICtcbiAgICAgICAgICAgICAgICAgICAgJ1wiIHg9XCInICsgcGF0dGVybk9mZnNldFggK1xuICAgICAgICAgICAgICAgICAgICAnXCIgeT1cIicgKyBwYXR0ZXJuT2Zmc2V0WSArXG4gICAgICAgICAgICAgICAgICAgICdcIiB3aWR0aD1cIicgKyBwYXR0ZXJuV2lkdGggK1xuICAgICAgICAgICAgICAgICAgICAnXCIgaGVpZ2h0PVwiJyArIHBhdHRlcm5IZWlnaHQgKyAnXCI+XFxuJyArXG4gICAgICAgICAgICAgICAnPGltYWdlIHg9XCIwXCIgeT1cIjBcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICcgd2lkdGg9XCInICsgcGF0dGVyblNvdXJjZS53aWR0aCArXG4gICAgICAgICAgICAgICAgICAgICAgJ1wiIGhlaWdodD1cIicgKyBwYXR0ZXJuU291cmNlLmhlaWdodCArXG4gICAgICAgICAgICAgICAgICAgICAgJ1wiIHhsaW5rOmhyZWY9XCInICsgcGF0dGVybkltZ1NyYyArXG4gICAgICAgICAgICAgICAnXCI+PC9pbWFnZT5cXG4nICtcbiAgICAgICAgICAgICAnPC9wYXR0ZXJuPlxcbic7XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cblxuICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gb3B0aW9ucykge1xuICAgICAgICB0aGlzW3Byb3BdID0gb3B0aW9uc1twcm9wXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBDYW52YXNQYXR0ZXJuXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIGNyZWF0ZSBwYXR0ZXJuXG4gICAgICogQHJldHVybiB7Q2FudmFzUGF0dGVybn1cbiAgICAgKi9cbiAgICB0b0xpdmU6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgLy8gaWYgdGhlIGltYWdlIGZhaWxlZCB0byBsb2FkLCByZXR1cm4sIGFuZCBhbGxvdyByZXN0IHRvIGNvbnRpbnVlIGxvYWRpbmdcbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgLy8gaWYgYW4gaW1hZ2VcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlLnNyYyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKCFzb3VyY2UuY29tcGxldGUpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZS5uYXR1cmFsV2lkdGggPT09IDAgfHwgc291cmNlLm5hdHVyYWxIZWlnaHQgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdHguY3JlYXRlUGF0dGVybihzb3VyY2UsIHRoaXMucmVwZWF0KTtcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIHRvRml4ZWQgPSBmYWJyaWMudXRpbC50b0ZpeGVkO1xuXG4gIGlmIChmYWJyaWMuU2hhZG93KSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5TaGFkb3cgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaGFkb3cgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5TaGFkb3dcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9zaGFkb3dzfFNoYWRvdyBkZW1vfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuU2hhZG93I2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuU2hhZG93ID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoLyoqIEBsZW5kcyBmYWJyaWMuU2hhZG93LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBTaGFkb3cgY29sb3JcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNvbG9yOiAncmdiKDAsMCwwKScsXG5cbiAgICAvKipcbiAgICAgKiBTaGFkb3cgYmx1clxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqL1xuICAgIGJsdXI6IDAsXG5cbiAgICAvKipcbiAgICAgKiBTaGFkb3cgaG9yaXpvbnRhbCBvZmZzZXRcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG9mZnNldFg6IDAsXG5cbiAgICAvKipcbiAgICAgKiBTaGFkb3cgdmVydGljYWwgb2Zmc2V0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBvZmZzZXRZOiAwLFxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgc2hhZG93IHNob3VsZCBhZmZlY3Qgc3Ryb2tlIG9wZXJhdGlvbnNcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBhZmZlY3RTdHJva2U6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdG9PYmplY3Qgc2hvdWxkIGluY2x1ZGUgZGVmYXVsdCB2YWx1ZXNcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBpbmNsdWRlRGVmYXVsdFZhbHVlczogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYGZhbHNlYCwgdGhlIHNoYWRvdyB3aWxsIHNjYWxlIHdpdGggdGhlIG9iamVjdC5cbiAgICAgKiBXaGVuIGB0cnVlYCwgdGhlIHNoYWRvdydzIG9mZnNldFgsIG9mZnNldFksIGFuZCBibHVyIHdpbGwgbm90IGJlIGFmZmVjdGVkIGJ5IHRoZSBvYmplY3QncyBzY2FsZS5cbiAgICAgKiBkZWZhdWx0IHRvIGZhbHNlXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbm9uU2NhbGluZzogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0IHdpdGggYW55IG9mIGNvbG9yLCBibHVyLCBvZmZzZXRYLCBvZmZzZXRZIHByb3BlcnRpZXMgb3Igc3RyaW5nIChlLmcuIFwicmdiYSgwLDAsMCwwLjIpIDJweCAycHggMTBweFwiKVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5TaGFkb3d9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3B0aW9ucyA9IHRoaXMuX3BhcnNlU2hhZG93KG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpc1twcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaWQgPSBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHNoYWRvdyBTaGFkb3cgdmFsdWUgdG8gcGFyc2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFNoYWRvdyBvYmplY3Qgd2l0aCBjb2xvciwgb2Zmc2V0WCwgb2Zmc2V0WSBhbmQgYmx1clxuICAgICAqL1xuICAgIF9wYXJzZVNoYWRvdzogZnVuY3Rpb24oc2hhZG93KSB7XG4gICAgICB2YXIgc2hhZG93U3RyID0gc2hhZG93LnRyaW0oKSxcbiAgICAgICAgICBvZmZzZXRzQW5kQmx1ciA9IGZhYnJpYy5TaGFkb3cucmVPZmZzZXRzQW5kQmx1ci5leGVjKHNoYWRvd1N0cikgfHwgW10sXG4gICAgICAgICAgY29sb3IgPSBzaGFkb3dTdHIucmVwbGFjZShmYWJyaWMuU2hhZG93LnJlT2Zmc2V0c0FuZEJsdXIsICcnKSB8fCAncmdiKDAsMCwwKSc7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbG9yOiBjb2xvci50cmltKCksXG4gICAgICAgIG9mZnNldFg6IHBhcnNlRmxvYXQob2Zmc2V0c0FuZEJsdXJbMV0sIDEwKSB8fCAwLFxuICAgICAgICBvZmZzZXRZOiBwYXJzZUZsb2F0KG9mZnNldHNBbmRCbHVyWzJdLCAxMCkgfHwgMCxcbiAgICAgICAgYmx1cjogcGFyc2VGbG9hdChvZmZzZXRzQW5kQmx1clszXSwgMTApIHx8IDBcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2Nzcy10ZXh0LWRlY29yLTMvI3RleHQtc2hhZG93XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBSZXR1cm5zIENTUzMgdGV4dC1zaGFkb3cgZGVjbGFyYXRpb25cbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW3RoaXMub2Zmc2V0WCwgdGhpcy5vZmZzZXRZLCB0aGlzLmJsdXIsIHRoaXMuY29sb3JdLmpvaW4oJ3B4ICcpO1xuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgU1ZHIHJlcHJlc2VudGF0aW9uIG9mIGEgc2hhZG93XG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFNWRyByZXByZXNlbnRhdGlvbiBvZiBhIHNoYWRvd1xuICAgICAqL1xuICAgIHRvU1ZHOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBmQm94WCA9IDQwLCBmQm94WSA9IDQwLCBOVU1fRlJBQ1RJT05fRElHSVRTID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTLFxuICAgICAgICAgIG9mZnNldCA9IGZhYnJpYy51dGlsLnJvdGF0ZVZlY3RvcihcbiAgICAgICAgICAgIHsgeDogdGhpcy5vZmZzZXRYLCB5OiB0aGlzLm9mZnNldFkgfSxcbiAgICAgICAgICAgIGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMoLW9iamVjdC5hbmdsZSkpLFxuICAgICAgICAgIEJMVVJfQk9YID0gMjAsIGNvbG9yID0gbmV3IGZhYnJpYy5Db2xvcih0aGlzLmNvbG9yKTtcblxuICAgICAgaWYgKG9iamVjdC53aWR0aCAmJiBvYmplY3QuaGVpZ2h0KSB7XG4gICAgICAgIC8vaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL2ZpbHRlcnMuaHRtbCNGaWx0ZXJFZmZlY3RzUmVnaW9uXG4gICAgICAgIC8vIHdlIGFkZCBzb21lIGV4dHJhIHNwYWNlIHRvIGZpbHRlciBib3ggdG8gY29udGFpbiB0aGUgYmx1ciAoIDIwIClcbiAgICAgICAgZkJveFggPSB0b0ZpeGVkKChNYXRoLmFicyhvZmZzZXQueCkgKyB0aGlzLmJsdXIpIC8gb2JqZWN0LndpZHRoLCBOVU1fRlJBQ1RJT05fRElHSVRTKSAqIDEwMCArIEJMVVJfQk9YO1xuICAgICAgICBmQm94WSA9IHRvRml4ZWQoKE1hdGguYWJzKG9mZnNldC55KSArIHRoaXMuYmx1cikgLyBvYmplY3QuaGVpZ2h0LCBOVU1fRlJBQ1RJT05fRElHSVRTKSAqIDEwMCArIEJMVVJfQk9YO1xuICAgICAgfVxuICAgICAgaWYgKG9iamVjdC5mbGlwWCkge1xuICAgICAgICBvZmZzZXQueCAqPSAtMTtcbiAgICAgIH1cbiAgICAgIGlmIChvYmplY3QuZmxpcFkpIHtcbiAgICAgICAgb2Zmc2V0LnkgKj0gLTE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgICc8ZmlsdGVyIGlkPVwiU1ZHSURfJyArIHRoaXMuaWQgKyAnXCIgeT1cIi0nICsgZkJveFkgKyAnJVwiIGhlaWdodD1cIicgKyAoMTAwICsgMiAqIGZCb3hZKSArICclXCIgJyArXG4gICAgICAgICAgJ3g9XCItJyArIGZCb3hYICsgJyVcIiB3aWR0aD1cIicgKyAoMTAwICsgMiAqIGZCb3hYKSArICclXCIgJyArICc+XFxuJyArXG4gICAgICAgICAgJ1xcdDxmZUdhdXNzaWFuQmx1ciBpbj1cIlNvdXJjZUFscGhhXCIgc3RkRGV2aWF0aW9uPVwiJyArXG4gICAgICAgICAgICB0b0ZpeGVkKHRoaXMuYmx1ciA/IHRoaXMuYmx1ciAvIDIgOiAwLCBOVU1fRlJBQ1RJT05fRElHSVRTKSArICdcIj48L2ZlR2F1c3NpYW5CbHVyPlxcbicgK1xuICAgICAgICAgICdcXHQ8ZmVPZmZzZXQgZHg9XCInICsgdG9GaXhlZChvZmZzZXQueCwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgK1xuICAgICAgICAgICdcIiBkeT1cIicgKyB0b0ZpeGVkKG9mZnNldC55LCBOVU1fRlJBQ1RJT05fRElHSVRTKSArICdcIiByZXN1bHQ9XCJvQmx1clwiID48L2ZlT2Zmc2V0PlxcbicgK1xuICAgICAgICAgICdcXHQ8ZmVGbG9vZCBmbG9vZC1jb2xvcj1cIicgKyBjb2xvci50b1JnYigpICsgJ1wiIGZsb29kLW9wYWNpdHk9XCInICsgY29sb3IuZ2V0QWxwaGEoKSArICdcIi8+XFxuJyArXG4gICAgICAgICAgJ1xcdDxmZUNvbXBvc2l0ZSBpbjI9XCJvQmx1clwiIG9wZXJhdG9yPVwiaW5cIiAvPlxcbicgK1xuICAgICAgICAgICdcXHQ8ZmVNZXJnZT5cXG4nICtcbiAgICAgICAgICAgICdcXHRcXHQ8ZmVNZXJnZU5vZGU+PC9mZU1lcmdlTm9kZT5cXG4nICtcbiAgICAgICAgICAgICdcXHRcXHQ8ZmVNZXJnZU5vZGUgaW49XCJTb3VyY2VHcmFwaGljXCI+PC9mZU1lcmdlTm9kZT5cXG4nICtcbiAgICAgICAgICAnXFx0PC9mZU1lcmdlPlxcbicgK1xuICAgICAgICAnPC9maWx0ZXI+XFxuJyk7XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGEgc2hhZG93XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYSBzaGFkb3cgaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5pbmNsdWRlRGVmYXVsdFZhbHVlcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICAgIGJsdXI6IHRoaXMuYmx1cixcbiAgICAgICAgICBvZmZzZXRYOiB0aGlzLm9mZnNldFgsXG4gICAgICAgICAgb2Zmc2V0WTogdGhpcy5vZmZzZXRZLFxuICAgICAgICAgIGFmZmVjdFN0cm9rZTogdGhpcy5hZmZlY3RTdHJva2UsXG4gICAgICAgICAgbm9uU2NhbGluZzogdGhpcy5ub25TY2FsaW5nXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB2YXIgb2JqID0geyB9LCBwcm90byA9IGZhYnJpYy5TaGFkb3cucHJvdG90eXBlO1xuXG4gICAgICBbJ2NvbG9yJywgJ2JsdXInLCAnb2Zmc2V0WCcsICdvZmZzZXRZJywgJ2FmZmVjdFN0cm9rZScsICdub25TY2FsaW5nJ10uZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIGlmICh0aGlzW3Byb3BdICE9PSBwcm90b1twcm9wXSkge1xuICAgICAgICAgIG9ialtwcm9wXSA9IHRoaXNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpO1xuXG4gICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJlZ2V4IG1hdGNoaW5nIHNoYWRvdyBvZmZzZXRYLCBvZmZzZXRZIGFuZCBibHVyIChleDogXCIycHggMnB4IDEwcHggcmdiYSgwLDAsMCwwLjIpXCIsIFwicmdiKDAsMjU1LDApIDJweCAycHhcIilcbiAgICogQHN0YXRpY1xuICAgKiBAZmllbGRcbiAgICogQG1lbWJlck9mIGZhYnJpYy5TaGFkb3dcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG4gIGZhYnJpYy5TaGFkb3cucmVPZmZzZXRzQW5kQmx1ciA9IC8oPzpcXHN8XikoLT9cXGQrKD86XFwuXFxkKik/KD86cHgpPyg/Olxccz98JCkpPygtP1xcZCsoPzpcXC5cXGQqKT8oPzpweCk/KD86XFxzP3wkKSk/KFxcZCsoPzpcXC5cXGQqKT8oPzpweCk/KT8oPzpcXHM/fCQpKD86JHxcXHMpLztcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbiAoKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGlmIChmYWJyaWMuU3RhdGljQ2FudmFzKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5TdGF0aWNDYW52YXMgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGFsaWFzZXMgZm9yIGZhc3RlciByZXNvbHV0aW9uXG4gIHZhciBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgZ2V0RWxlbWVudE9mZnNldCA9IGZhYnJpYy51dGlsLmdldEVsZW1lbnRPZmZzZXQsXG4gICAgICByZW1vdmVGcm9tQXJyYXkgPSBmYWJyaWMudXRpbC5yZW1vdmVGcm9tQXJyYXksXG4gICAgICB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZCxcbiAgICAgIHRyYW5zZm9ybVBvaW50ID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQsXG4gICAgICBpbnZlcnRUcmFuc2Zvcm0gPSBmYWJyaWMudXRpbC5pbnZlcnRUcmFuc2Zvcm0sXG4gICAgICBnZXROb2RlQ2FudmFzID0gZmFicmljLnV0aWwuZ2V0Tm9kZUNhbnZhcyxcbiAgICAgIGNyZWF0ZUNhbnZhc0VsZW1lbnQgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50LFxuXG4gICAgICBDQU5WQVNfSU5JVF9FUlJPUiA9IG5ldyBFcnJvcignQ291bGQgbm90IGluaXRpYWxpemUgYGNhbnZhc2AgZWxlbWVudCcpO1xuXG4gIC8qKlxuICAgKiBTdGF0aWMgY2FudmFzIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuU3RhdGljQ2FudmFzXG4gICAqIEBtaXhlcyBmYWJyaWMuQ29sbGVjdGlvblxuICAgKiBAbWl4ZXMgZmFicmljLk9ic2VydmFibGVcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9zdGF0aWNfY2FudmFzfFN0YXRpY0NhbnZhcyBkZW1vfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuU3RhdGljQ2FudmFzI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBmaXJlcyBiZWZvcmU6cmVuZGVyXG4gICAqIEBmaXJlcyBhZnRlcjpyZW5kZXJcbiAgICogQGZpcmVzIGNhbnZhczpjbGVhcmVkXG4gICAqIEBmaXJlcyBvYmplY3Q6YWRkZWRcbiAgICogQGZpcmVzIG9iamVjdDpyZW1vdmVkXG4gICAqL1xuICBmYWJyaWMuU3RhdGljQ2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkNvbW1vbk1ldGhvZHMsIC8qKiBAbGVuZHMgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50IHwgU3RyaW5nfSBlbCAmbHQ7Y2FudmFzPiBlbGVtZW50IHRvIGluaXRpYWxpemUgaW5zdGFuY2Ugb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgdGhpcy5yZW5kZXJBbmRSZXNldEJvdW5kID0gdGhpcy5yZW5kZXJBbmRSZXNldC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsQm91bmQgPSB0aGlzLnJlcXVlc3RSZW5kZXJBbGwuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX2luaXRTdGF0aWMoZWwsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBCYWNrZ3JvdW5kIGNvbG9yIG9mIGNhbnZhcyBpbnN0YW5jZS5cbiAgICAgKiBTaG91bGQgYmUgc2V0IHZpYSB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNzZXRCYWNrZ3JvdW5kQ29sb3J9LlxuICAgICAqIEB0eXBlIHsoU3RyaW5nfGZhYnJpYy5QYXR0ZXJuKX1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJhY2tncm91bmRDb2xvcjogJycsXG5cbiAgICAvKipcbiAgICAgKiBCYWNrZ3JvdW5kIGltYWdlIG9mIGNhbnZhcyBpbnN0YW5jZS5cbiAgICAgKiBzaW5jZSAyLjQuMCBpbWFnZSBjYWNoaW5nIGlzIGFjdGl2ZSwgcGxlYXNlIHdoZW4gcHV0dGluZyBhbiBpbWFnZSBhcyBiYWNrZ3JvdW5kLCBhZGQgdG8gdGhlXG4gICAgICogY2FudmFzIHByb3BlcnR5IGEgcmVmZXJlbmNlIHRvIHRoZSBjYW52YXMgaXQgaXMgb24uIE90aGVyd2lzZSB0aGUgaW1hZ2UgY2Fubm90IGRldGVjdCB0aGUgem9vbVxuICAgICAqIHZhbGUuIEFzIGFuIGFsdGVybmF0aXZlIHlvdSBjYW4gZGlzYWJsZSBpbWFnZSBvYmplY3RDYWNoaW5nXG4gICAgICogQHR5cGUgZmFicmljLkltYWdlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBPdmVybGF5IGNvbG9yIG9mIGNhbnZhcyBpbnN0YW5jZS5cbiAgICAgKiBTaG91bGQgYmUgc2V0IHZpYSB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNzZXRPdmVybGF5Q29sb3J9XG4gICAgICogQHNpbmNlIDEuMy45XG4gICAgICogQHR5cGUgeyhTdHJpbmd8ZmFicmljLlBhdHRlcm4pfVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgb3ZlcmxheUNvbG9yOiAnJyxcblxuICAgIC8qKlxuICAgICAqIE92ZXJsYXkgaW1hZ2Ugb2YgY2FudmFzIGluc3RhbmNlLlxuICAgICAqIHNpbmNlIDIuNC4wIGltYWdlIGNhY2hpbmcgaXMgYWN0aXZlLCBwbGVhc2Ugd2hlbiBwdXR0aW5nIGFuIGltYWdlIGFzIG92ZXJsYXksIGFkZCB0byB0aGVcbiAgICAgKiBjYW52YXMgcHJvcGVydHkgYSByZWZlcmVuY2UgdG8gdGhlIGNhbnZhcyBpdCBpcyBvbi4gT3RoZXJ3aXNlIHRoZSBpbWFnZSBjYW5ub3QgZGV0ZWN0IHRoZSB6b29tXG4gICAgICogdmFsZS4gQXMgYW4gYWx0ZXJuYXRpdmUgeW91IGNhbiBkaXNhYmxlIGltYWdlIG9iamVjdENhY2hpbmdcbiAgICAgKiBAdHlwZSBmYWJyaWMuSW1hZ2VcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG92ZXJsYXlJbWFnZTogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRvT2JqZWN0L3RvRGF0YWxlc3NPYmplY3Qgc2hvdWxkIGluY2x1ZGUgZGVmYXVsdCB2YWx1ZXNcbiAgICAgKiBpZiBzZXQgdG8gZmFsc2UsIHRha2VzIHByZWNlZGVuY2Ugb3ZlciB0aGUgb2JqZWN0IHZhbHVlLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGluY2x1ZGVEZWZhdWx0VmFsdWVzOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgb2JqZWN0cycgc3RhdGUgc2hvdWxkIGJlIHNhdmVkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3RhdGVmdWw6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIge0BsaW5rIGZhYnJpYy5Db2xsZWN0aW9uLmFkZH0sIHtAbGluayBmYWJyaWMuQ29sbGVjdGlvbi5pbnNlcnRBdH0gYW5kIHtAbGluayBmYWJyaWMuQ29sbGVjdGlvbi5yZW1vdmV9LFxuICAgICAqIHtAbGluayBmYWJyaWMuU3RhdGljQ2FudmFzLm1vdmVUb30sIHtAbGluayBmYWJyaWMuU3RhdGljQ2FudmFzLmNsZWFyfSBhbmQgbWFueSBtb3JlLCBzaG91bGQgYWxzbyByZS1yZW5kZXIgY2FudmFzLlxuICAgICAqIERpc2FibGluZyB0aGlzIG9wdGlvbiB3aWxsIG5vdCBnaXZlIGEgcGVyZm9ybWFuY2UgYm9vc3Qgd2hlbiBhZGRpbmcvcmVtb3ZpbmcgYSBsb3Qgb2Ygb2JqZWN0cyB0by9mcm9tIGNhbnZhcyBhdCBvbmNlXG4gICAgICogc2luY2UgdGhlIHJlbmRlcnMgYXJlIHF1ZXF1ZWQgYW5kIGV4ZWN1dGVkIG9uZSBwZXIgZnJhbWUuXG4gICAgICogRGlzYWJsaW5nIGlzIHN1Z2dlc3RlZCBhbnl3YXkgYW5kIG1hbmFnaW5nIHRoZSByZW5kZXJzIG9mIHRoZSBhcHAgbWFudWFsbHkgaXMgbm90IGEgYmlnIGVmZm9ydCAoIGNhbnZhcy5yZXF1ZXN0UmVuZGVyQWxsKCkgKVxuICAgICAqIExlZnQgZGVmYXVsdCB0byB0cnVlIHRvIGRvIG5vdCBicmVhayBkb2N1bWVudGF0aW9uIGFuZCBvbGQgYXBwLCBmaWRkbGVzLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHJlbmRlck9uQWRkUmVtb3ZlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgb2JqZWN0IGNvbnRyb2xzIChib3JkZXJzL2NvbnRyb2xzKSBhcmUgcmVuZGVyZWQgYWJvdmUgb3ZlcmxheSBpbWFnZVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNvbnRyb2xzQWJvdmVPdmVybGF5OiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBicm93c2VyIGNhbiBiZSBzY3JvbGxlZCB3aGVuIHVzaW5nIGEgdG91Y2hzY3JlZW4gYW5kIGRyYWdnaW5nIG9uIHRoZSBjYW52YXNcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBhbGxvd1RvdWNoU2Nyb2xsaW5nOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoaXMgY2FudmFzIHdpbGwgdXNlIGltYWdlIHNtb290aGluZywgdGhpcyBpcyBvbiBieSBkZWZhdWx0IGluIGJyb3dzZXJzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaW1hZ2VTbW9vdGhpbmdFbmFibGVkOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHRyYW5zZm9ybWF0aW9uIChhIENhbnZhcyAyRCBBUEkgdHJhbnNmb3JtIG1hdHJpeCkgd2hpY2ggZm9jdXNlcyB0aGUgdmlld3BvcnRcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPkRlZmF1bHQgdHJhbnNmb3JtPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybSA9IFsxLCAwLCAwLCAxLCAwLCAwXTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TY2FsZSBieSA3MCUgYW5kIHRyYW5zbGF0ZSB0b3dhcmQgYm90dG9tLXJpZ2h0IGJ5IDUwLCB3aXRob3V0IHNrZXdpbmc8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtID0gWzAuNywgMCwgMCwgMC43LCA1MCwgNTBdO1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdmlld3BvcnRUcmFuc2Zvcm06IGZhYnJpYy5pTWF0cml4LmNvbmNhdCgpLFxuXG4gICAgLyoqXG4gICAgICogaWYgc2V0IHRvIGZhbHNlIGJhY2tncm91bmQgaW1hZ2UgaXMgbm90IGFmZmVjdGVkIGJ5IHZpZXdwb3J0IHRyYW5zZm9ybVxuICAgICAqIEBzaW5jZSAxLjYuM1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJhY2tncm91bmRWcHQ6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBpZiBzZXQgdG8gZmFsc2Ugb3Zlcmx5YSBpbWFnZSBpcyBub3QgYWZmZWN0ZWQgYnkgdmlld3BvcnQgdHJhbnNmb3JtXG4gICAgICogQHNpbmNlIDEuNi4zXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgb3ZlcmxheVZwdDogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgY2FudmFzIGlzIHNjYWxlZCBieSBkZXZpY2VQaXhlbFJhdGlvIGZvciBiZXR0ZXIgcmVuZGVyaW5nIG9uIHJldGluYSBzY3JlZW5zXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZW5hYmxlUmV0aW5hU2NhbGluZzogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlIGNhbnZhcyBlbGVtZW50IGV4dGVuc2lvbiBvdmVyIGRlc2lnblxuICAgICAqIHByb3BlcnRpZXMgYXJlIHRsLHRyLGJsLGJyLlxuICAgICAqIGlmIGNhbnZhcyBpcyBub3Qgem9vbWVkL3Bhbm5lZCB0aG9zZSBwb2ludHMgYXJlIHRoZSBmb3VyIGNvcm5lciBvZiBjYW52YXNcbiAgICAgKiBpZiBjYW52YXMgaXMgdmlld3BvcnRUcmFuc2Zvcm1lZCB5b3UgdGhvc2UgcG9pbnRzIGluZGljYXRlIHRoZSBleHRlbnNpb25cbiAgICAgKiBvZiBjYW52YXMgZWxlbWVudCBpbiBwbGFpbiB1bnRyYXNmb3JtZWQgY29vcmRpbmF0ZXNcbiAgICAgKiBUaGUgY29vcmRpbmF0ZXMgZ2V0IHVwZGF0ZWQgd2l0aCBAbWV0aG9kIGNhbGNWaWV3cG9ydEJvdW5kYXJpZXMuXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlXG4gICAgICovXG4gICAgdnB0Q29vcmRzOiB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBCYXNlZCBvbiB2cHRDb29yZHMgYW5kIG9iamVjdC5hQ29vcmRzLCBza2lwIHJlbmRlcmluZyBvZiBvYmplY3RzIHRoYXRcbiAgICAgKiBhcmUgbm90IGluY2x1ZGVkIGluIGN1cnJlbnQgdmlld3BvcnQuXG4gICAgICogTWF5IGdyZWF0bHkgaGVscCBpbiBhcHBsaWNhdGlvbnMgd2l0aCBjcm93ZGVkIGNhbnZhcyBhbmQgdXNlIG9mIHpvb20vcGFuXG4gICAgICogSWYgT25lIG9mIHRoZSBjb3JuZXIgb2YgdGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgb2JqZWN0IGlzIG9uIHRoZSBjYW52YXNcbiAgICAgKiB0aGUgb2JqZWN0cyBnZXQgcmVuZGVyZWQuXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2tpcE9mZnNjcmVlbjogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIGEgZmFicmljT2JqZWN0IHRoYXQsIHdpdGhvdXQgc3Ryb2tlIGRlZmluZSBhIGNsaXBwaW5nIGFyZWEgd2l0aCB0aGVpciBzaGFwZS4gZmlsbGVkIGluIGJsYWNrXG4gICAgICogdGhlIGNsaXBQYXRoIG9iamVjdCBnZXRzIHVzZWQgd2hlbiB0aGUgY2FudmFzIGhhcyByZW5kZXJlZCwgYW5kIHRoZSBjb250ZXh0IGlzIHBsYWNlZCBpbiB0aGVcbiAgICAgKiB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhcy5cbiAgICAgKiBjbGlwUGF0aCB3aWxsIGNsaXAgYXdheSBjb250cm9scywgaWYgeW91IGRvIG5vdCB3YW50IHRoaXMgdG8gaGFwcGVuIHVzZSBjb250cm9sc0Fib3ZlT3ZlcmxheSA9IHRydWVcbiAgICAgKiBAdHlwZSBmYWJyaWMuT2JqZWN0XG4gICAgICovXG4gICAgY2xpcFBhdGg6IHVuZGVmaW5lZCxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudCB8IFN0cmluZ30gZWwgJmx0O2NhbnZhcz4gZWxlbWVudCB0byBpbml0aWFsaXplIGluc3RhbmNlIG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIF9pbml0U3RhdGljOiBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgICAgdmFyIGNiID0gdGhpcy5yZXF1ZXN0UmVuZGVyQWxsQm91bmQ7XG4gICAgICB0aGlzLl9vYmplY3RzID0gW107XG4gICAgICB0aGlzLl9jcmVhdGVMb3dlckNhbnZhcyhlbCk7XG4gICAgICB0aGlzLl9pbml0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIC8vIG9ubHkgaW5pdGlhbGl6ZSByZXRpbmEgc2NhbGluZyBvbmNlXG4gICAgICBpZiAoIXRoaXMuaW50ZXJhY3RpdmUpIHtcbiAgICAgICAgdGhpcy5faW5pdFJldGluYVNjYWxpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMub3ZlcmxheUltYWdlKSB7XG4gICAgICAgIHRoaXMuc2V0T3ZlcmxheUltYWdlKG9wdGlvbnMub3ZlcmxheUltYWdlLCBjYik7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5iYWNrZ3JvdW5kSW1hZ2UpIHtcbiAgICAgICAgdGhpcy5zZXRCYWNrZ3JvdW5kSW1hZ2Uob3B0aW9ucy5iYWNrZ3JvdW5kSW1hZ2UsIGNiKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmJhY2tncm91bmRDb2xvcikge1xuICAgICAgICB0aGlzLnNldEJhY2tncm91bmRDb2xvcihvcHRpb25zLmJhY2tncm91bmRDb2xvciwgY2IpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMub3ZlcmxheUNvbG9yKSB7XG4gICAgICAgIHRoaXMuc2V0T3ZlcmxheUNvbG9yKG9wdGlvbnMub3ZlcmxheUNvbG9yLCBjYik7XG4gICAgICB9XG4gICAgICB0aGlzLmNhbGNPZmZzZXQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaXNSZXRpbmFTY2FsaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZmFicmljLmRldmljZVBpeGVsUmF0aW8gPiAxICYmIHRoaXMuZW5hYmxlUmV0aW5hU2NhbGluZyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7TnVtYmVyfSByZXRpbmFTY2FsaW5nIGlmIGFwcGxpZWQsIG90aGVyd2lzZSAxO1xuICAgICAqL1xuICAgIGdldFJldGluYVNjYWxpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lzUmV0aW5hU2NhbGluZygpID8gTWF0aC5tYXgoMSwgZmFicmljLmRldmljZVBpeGVsUmF0aW8pIDogMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdFJldGluYVNjYWxpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLl9pc1JldGluYVNjYWxpbmcoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgc2NhbGVSYXRpbyA9IGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgdGhpcy5fX2luaXRSZXRpbmFTY2FsaW5nKHNjYWxlUmF0aW8sIHRoaXMubG93ZXJDYW52YXNFbCwgdGhpcy5jb250ZXh0Q29udGFpbmVyKTtcbiAgICAgIGlmICh0aGlzLnVwcGVyQ2FudmFzRWwpIHtcbiAgICAgICAgdGhpcy5fX2luaXRSZXRpbmFTY2FsaW5nKHNjYWxlUmF0aW8sIHRoaXMudXBwZXJDYW52YXNFbCwgdGhpcy5jb250ZXh0VG9wKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX19pbml0UmV0aW5hU2NhbGluZzogZnVuY3Rpb24oc2NhbGVSYXRpbywgY2FudmFzLCBjb250ZXh0KSB7XG4gICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMud2lkdGggKiBzY2FsZVJhdGlvKTtcbiAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0ICogc2NhbGVSYXRpbyk7XG4gICAgICBjb250ZXh0LnNjYWxlKHNjYWxlUmF0aW8sIHNjYWxlUmF0aW8pO1xuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgY2FudmFzIGVsZW1lbnQgb2Zmc2V0IHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudFxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGFsc28gYXR0YWNoZWQgYXMgXCJyZXNpemVcIiBldmVudCBoYW5kbGVyIG9mIHdpbmRvd1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IGluc3RhbmNlXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGNhbGNPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX29mZnNldCA9IGdldEVsZW1lbnRPZmZzZXQodGhpcy5sb3dlckNhbnZhc0VsKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHtAbGluayBmYWJyaWMuU3RhdGljQ2FudmFzI292ZXJsYXlJbWFnZXxvdmVybGF5IGltYWdlfSBmb3IgdGhpcyBjYW52YXNcbiAgICAgKiBAcGFyYW0geyhmYWJyaWMuSW1hZ2V8U3RyaW5nKX0gaW1hZ2UgZmFicmljLkltYWdlIGluc3RhbmNlIG9yIFVSTCBvZiBhbiBpbWFnZSB0byBzZXQgb3ZlcmxheSB0b1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrIHRvIGludm9rZSB3aGVuIGltYWdlIGlzIGxvYWRlZCBhbmQgc2V0IGFzIGFuIG92ZXJsYXlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbmFsIG9wdGlvbnMgdG8gc2V0IGZvciB0aGUge0BsaW5rIGZhYnJpYy5JbWFnZXxvdmVybGF5IGltYWdlfS5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZmFicmljanMvTW56SFQvfGpzRmlkZGxlIGRlbW99XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Tm9ybWFsIG92ZXJsYXlJbWFnZSB3aXRoIGxlZnQvdG9wID0gMDwvY2FwdGlvbj5cbiAgICAgKiBjYW52YXMuc2V0T3ZlcmxheUltYWdlKCdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9qYWlsX2NlbGxfYmFycy5wbmcnLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwge1xuICAgICAqICAgLy8gTmVlZGVkIHRvIHBvc2l0aW9uIG92ZXJsYXlJbWFnZSBhdCAwLzBcbiAgICAgKiAgIG9yaWdpblg6ICdsZWZ0JyxcbiAgICAgKiAgIG9yaWdpblk6ICd0b3AnXG4gICAgICogfSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+b3ZlcmxheUltYWdlIHdpdGggZGlmZmVyZW50IHByb3BlcnRpZXM8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldE92ZXJsYXlJbWFnZSgnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvamFpbF9jZWxsX2JhcnMucG5nJywgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcyksIHtcbiAgICAgKiAgIG9wYWNpdHk6IDAuNSxcbiAgICAgKiAgIGFuZ2xlOiA0NSxcbiAgICAgKiAgIGxlZnQ6IDQwMCxcbiAgICAgKiAgIHRvcDogNDAwLFxuICAgICAqICAgb3JpZ2luWDogJ2xlZnQnLFxuICAgICAqICAgb3JpZ2luWTogJ3RvcCdcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TdHJldGNoZWQgb3ZlcmxheUltYWdlICMxIC0gd2lkdGgvaGVpZ2h0IGNvcnJlc3BvbmQgdG8gY2FudmFzIHdpZHRoL2hlaWdodDwvY2FwdGlvbj5cbiAgICAgKiBmYWJyaWMuSW1hZ2UuZnJvbVVSTCgnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvamFpbF9jZWxsX2JhcnMucG5nJywgZnVuY3Rpb24oaW1nLCBpc0Vycm9yKSB7XG4gICAgICogICAgaW1nLnNldCh7d2lkdGg6IGNhbnZhcy53aWR0aCwgaGVpZ2h0OiBjYW52YXMuaGVpZ2h0LCBvcmlnaW5YOiAnbGVmdCcsIG9yaWdpblk6ICd0b3AnfSk7XG4gICAgICogICAgY2FudmFzLnNldE92ZXJsYXlJbWFnZShpbWcsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TdHJldGNoZWQgb3ZlcmxheUltYWdlICMyIC0gd2lkdGgvaGVpZ2h0IGNvcnJlc3BvbmQgdG8gY2FudmFzIHdpZHRoL2hlaWdodDwvY2FwdGlvbj5cbiAgICAgKiBjYW52YXMuc2V0T3ZlcmxheUltYWdlKCdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9qYWlsX2NlbGxfYmFycy5wbmcnLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwge1xuICAgICAqICAgd2lkdGg6IGNhbnZhcy53aWR0aCxcbiAgICAgKiAgIGhlaWdodDogY2FudmFzLmhlaWdodCxcbiAgICAgKiAgIC8vIE5lZWRlZCB0byBwb3NpdGlvbiBvdmVybGF5SW1hZ2UgYXQgMC8wXG4gICAgICogICBvcmlnaW5YOiAnbGVmdCcsXG4gICAgICogICBvcmlnaW5ZOiAndG9wJ1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPm92ZXJsYXlJbWFnZSBsb2FkZWQgZnJvbSBjcm9zcy1vcmlnaW48L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldE92ZXJsYXlJbWFnZSgnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvamFpbF9jZWxsX2JhcnMucG5nJywgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcyksIHtcbiAgICAgKiAgIG9wYWNpdHk6IDAuNSxcbiAgICAgKiAgIGFuZ2xlOiA0NSxcbiAgICAgKiAgIGxlZnQ6IDQwMCxcbiAgICAgKiAgIHRvcDogNDAwLFxuICAgICAqICAgb3JpZ2luWDogJ2xlZnQnLFxuICAgICAqICAgb3JpZ2luWTogJ3RvcCcsXG4gICAgICogICBjcm9zc09yaWdpbjogJ2Fub255bW91cydcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBzZXRPdmVybGF5SW1hZ2U6IGZ1bmN0aW9uIChpbWFnZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fc2V0QmdPdmVybGF5SW1hZ2UoJ292ZXJsYXlJbWFnZScsIGltYWdlLCBjYWxsYmFjaywgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMge0BsaW5rIGZhYnJpYy5TdGF0aWNDYW52YXMjYmFja2dyb3VuZEltYWdlfGJhY2tncm91bmQgaW1hZ2V9IGZvciB0aGlzIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7KGZhYnJpYy5JbWFnZXxTdHJpbmcpfSBpbWFnZSBmYWJyaWMuSW1hZ2UgaW5zdGFuY2Ugb3IgVVJMIG9mIGFuIGltYWdlIHRvIHNldCBiYWNrZ3JvdW5kIHRvXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gaW1hZ2UgaXMgbG9hZGVkIGFuZCBzZXQgYXMgYmFja2dyb3VuZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgb3B0aW9ucyB0byBzZXQgZm9yIHRoZSB7QGxpbmsgZmFicmljLkltYWdlfGJhY2tncm91bmQgaW1hZ2V9LlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICogQHNlZSB7QGxpbmsgaHR0cDovL2pzZmlkZGxlLm5ldC9kam5yOG83YS8yOC98anNGaWRkbGUgZGVtb31cbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Ob3JtYWwgYmFja2dyb3VuZEltYWdlIHdpdGggbGVmdC90b3AgPSAwPC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRCYWNrZ3JvdW5kSW1hZ2UoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2hvbmV5X2ltX3N1YnRsZS5wbmcnLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwge1xuICAgICAqICAgLy8gTmVlZGVkIHRvIHBvc2l0aW9uIGJhY2tncm91bmRJbWFnZSBhdCAwLzBcbiAgICAgKiAgIG9yaWdpblg6ICdsZWZ0JyxcbiAgICAgKiAgIG9yaWdpblk6ICd0b3AnXG4gICAgICogfSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+YmFja2dyb3VuZEltYWdlIHdpdGggZGlmZmVyZW50IHByb3BlcnRpZXM8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldEJhY2tncm91bmRJbWFnZSgnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvaG9uZXlfaW1fc3VidGxlLnBuZycsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpLCB7XG4gICAgICogICBvcGFjaXR5OiAwLjUsXG4gICAgICogICBhbmdsZTogNDUsXG4gICAgICogICBsZWZ0OiA0MDAsXG4gICAgICogICB0b3A6IDQwMCxcbiAgICAgKiAgIG9yaWdpblg6ICdsZWZ0JyxcbiAgICAgKiAgIG9yaWdpblk6ICd0b3AnXG4gICAgICogfSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U3RyZXRjaGVkIGJhY2tncm91bmRJbWFnZSAjMSAtIHdpZHRoL2hlaWdodCBjb3JyZXNwb25kIHRvIGNhbnZhcyB3aWR0aC9oZWlnaHQ8L2NhcHRpb24+XG4gICAgICogZmFicmljLkltYWdlLmZyb21VUkwoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2hvbmV5X2ltX3N1YnRsZS5wbmcnLCBmdW5jdGlvbihpbWcsIGlzRXJyb3IpIHtcbiAgICAgKiAgICBpbWcuc2V0KHt3aWR0aDogY2FudmFzLndpZHRoLCBoZWlnaHQ6IGNhbnZhcy5oZWlnaHQsIG9yaWdpblg6ICdsZWZ0Jywgb3JpZ2luWTogJ3RvcCd9KTtcbiAgICAgKiAgICBjYW52YXMuc2V0QmFja2dyb3VuZEltYWdlKGltZywgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcykpO1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPlN0cmV0Y2hlZCBiYWNrZ3JvdW5kSW1hZ2UgIzIgLSB3aWR0aC9oZWlnaHQgY29ycmVzcG9uZCB0byBjYW52YXMgd2lkdGgvaGVpZ2h0PC9jYXB0aW9uPlxuICAgICAqIGNhbnZhcy5zZXRCYWNrZ3JvdW5kSW1hZ2UoJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2hvbmV5X2ltX3N1YnRsZS5wbmcnLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwge1xuICAgICAqICAgd2lkdGg6IGNhbnZhcy53aWR0aCxcbiAgICAgKiAgIGhlaWdodDogY2FudmFzLmhlaWdodCxcbiAgICAgKiAgIC8vIE5lZWRlZCB0byBwb3NpdGlvbiBiYWNrZ3JvdW5kSW1hZ2UgYXQgMC8wXG4gICAgICogICBvcmlnaW5YOiAnbGVmdCcsXG4gICAgICogICBvcmlnaW5ZOiAndG9wJ1xuICAgICAqIH0pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmJhY2tncm91bmRJbWFnZSBsb2FkZWQgZnJvbSBjcm9zcy1vcmlnaW48L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldEJhY2tncm91bmRJbWFnZSgnaHR0cDovL2ZhYnJpY2pzLmNvbS9hc3NldHMvaG9uZXlfaW1fc3VidGxlLnBuZycsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpLCB7XG4gICAgICogICBvcGFjaXR5OiAwLjUsXG4gICAgICogICBhbmdsZTogNDUsXG4gICAgICogICBsZWZ0OiA0MDAsXG4gICAgICogICB0b3A6IDQwMCxcbiAgICAgKiAgIG9yaWdpblg6ICdsZWZ0JyxcbiAgICAgKiAgIG9yaWdpblk6ICd0b3AnLFxuICAgICAqICAgY3Jvc3NPcmlnaW46ICdhbm9ueW1vdXMnXG4gICAgICogfSk7XG4gICAgICovXG4gICAgLy8gVE9ETzogZml4IHN0cmV0Y2hlZCBleGFtcGxlc1xuICAgIHNldEJhY2tncm91bmRJbWFnZTogZnVuY3Rpb24gKGltYWdlLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuX19zZXRCZ092ZXJsYXlJbWFnZSgnYmFja2dyb3VuZEltYWdlJywgaW1hZ2UsIGNhbGxiYWNrLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNvdmVybGF5Q29sb3J8Zm9yZWdyb3VuZCBjb2xvcn0gZm9yIHRoaXMgY2FudmFzXG4gICAgICogQHBhcmFtIHsoU3RyaW5nfGZhYnJpYy5QYXR0ZXJuKX0gb3ZlcmxheUNvbG9yIENvbG9yIG9yIHBhdHRlcm4gdG8gc2V0IGZvcmVncm91bmQgY29sb3IgdG9cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBmb3JlZ3JvdW5kIGNvbG9yIGlzIHNldFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICogQHNlZSB7QGxpbmsgaHR0cDovL2pzZmlkZGxlLm5ldC9mYWJyaWNqcy9wQjU1aC98anNGaWRkbGUgZGVtb31cbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Ob3JtYWwgb3ZlcmxheUNvbG9yIC0gY29sb3IgdmFsdWU8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldE92ZXJsYXlDb2xvcigncmdiYSgyNTUsIDczLCA2NCwgMC42KScsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5mYWJyaWMuUGF0dGVybiB1c2VkIGFzIG92ZXJsYXlDb2xvcjwvY2FwdGlvbj5cbiAgICAgKiBjYW52YXMuc2V0T3ZlcmxheUNvbG9yKHtcbiAgICAgKiAgIHNvdXJjZTogJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2VzY2hlcmVzcXVlX3N0ZS5wbmcnXG4gICAgICogfSwgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcykpO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmZhYnJpYy5QYXR0ZXJuIHVzZWQgYXMgb3ZlcmxheUNvbG9yIHdpdGggcmVwZWF0IGFuZCBvZmZzZXQ8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldE92ZXJsYXlDb2xvcih7XG4gICAgICogICBzb3VyY2U6ICdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9lc2NoZXJlc3F1ZV9zdGUucG5nJyxcbiAgICAgKiAgIHJlcGVhdDogJ3JlcGVhdCcsXG4gICAgICogICBvZmZzZXRYOiAyMDAsXG4gICAgICogICBvZmZzZXRZOiAxMDBcbiAgICAgKiB9LCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSk7XG4gICAgICovXG4gICAgc2V0T3ZlcmxheUNvbG9yOiBmdW5jdGlvbihvdmVybGF5Q29sb3IsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3NldEJnT3ZlcmxheUNvbG9yKCdvdmVybGF5Q29sb3InLCBvdmVybGF5Q29sb3IsIGNhbGxiYWNrKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNiYWNrZ3JvdW5kQ29sb3J8YmFja2dyb3VuZCBjb2xvcn0gZm9yIHRoaXMgY2FudmFzXG4gICAgICogQHBhcmFtIHsoU3RyaW5nfGZhYnJpYy5QYXR0ZXJuKX0gYmFja2dyb3VuZENvbG9yIENvbG9yIG9yIHBhdHRlcm4gdG8gc2V0IGJhY2tncm91bmQgY29sb3IgdG9cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBiYWNrZ3JvdW5kIGNvbG9yIGlzIHNldFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICogQHNlZSB7QGxpbmsgaHR0cDovL2pzZmlkZGxlLm5ldC9mYWJyaWNqcy9oWHp2ay98anNGaWRkbGUgZGVtb31cbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Ob3JtYWwgYmFja2dyb3VuZENvbG9yIC0gY29sb3IgdmFsdWU8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldEJhY2tncm91bmRDb2xvcigncmdiYSgyNTUsIDczLCA2NCwgMC42KScsIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5mYWJyaWMuUGF0dGVybiB1c2VkIGFzIGJhY2tncm91bmRDb2xvcjwvY2FwdGlvbj5cbiAgICAgKiBjYW52YXMuc2V0QmFja2dyb3VuZENvbG9yKHtcbiAgICAgKiAgIHNvdXJjZTogJ2h0dHA6Ly9mYWJyaWNqcy5jb20vYXNzZXRzL2VzY2hlcmVzcXVlX3N0ZS5wbmcnXG4gICAgICogfSwgY2FudmFzLnJlbmRlckFsbC5iaW5kKGNhbnZhcykpO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPmZhYnJpYy5QYXR0ZXJuIHVzZWQgYXMgYmFja2dyb3VuZENvbG9yIHdpdGggcmVwZWF0IGFuZCBvZmZzZXQ8L2NhcHRpb24+XG4gICAgICogY2FudmFzLnNldEJhY2tncm91bmRDb2xvcih7XG4gICAgICogICBzb3VyY2U6ICdodHRwOi8vZmFicmljanMuY29tL2Fzc2V0cy9lc2NoZXJlc3F1ZV9zdGUucG5nJyxcbiAgICAgKiAgIHJlcGVhdDogJ3JlcGVhdCcsXG4gICAgICogICBvZmZzZXRYOiAyMDAsXG4gICAgICogICBvZmZzZXRZOiAxMDBcbiAgICAgKiB9LCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSk7XG4gICAgICovXG4gICAgc2V0QmFja2dyb3VuZENvbG9yOiBmdW5jdGlvbihiYWNrZ3JvdW5kQ29sb3IsIGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3NldEJnT3ZlcmxheUNvbG9yKCdiYWNrZ3JvdW5kQ29sb3InLCBiYWNrZ3JvdW5kQ29sb3IsIGNhbGxiYWNrKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdG8gc2V0ICh7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNiYWNrZ3JvdW5kSW1hZ2V8YmFja2dyb3VuZEltYWdlfVxuICAgICAqIG9yIHtAbGluayBmYWJyaWMuU3RhdGljQ2FudmFzI292ZXJsYXlJbWFnZXxvdmVybGF5SW1hZ2V9KVxuICAgICAqIEBwYXJhbSB7KGZhYnJpYy5JbWFnZXxTdHJpbmd8bnVsbCl9IGltYWdlIGZhYnJpYy5JbWFnZSBpbnN0YW5jZSwgVVJMIG9mIGFuIGltYWdlIG9yIG51bGwgdG8gc2V0IGJhY2tncm91bmQgb3Igb3ZlcmxheSB0b1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGltYWdlIGlzIGxvYWRlZCBhbmQgc2V0IGFzIGJhY2tncm91bmQgb3Igb3ZlcmxheS4gVGhlIGZpcnN0IGFyZ3VtZW50IGlzIHRoZSBjcmVhdGVkIGltYWdlLCB0aGUgc2Vjb25kIGFyZ3VtZW50IGlzIGEgZmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgYW4gZXJyb3Igb2NjdXJyZWQgb3Igbm90LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uYWwgb3B0aW9ucyB0byBzZXQgZm9yIHRoZSB7QGxpbmsgZmFicmljLkltYWdlfGltYWdlfS5cbiAgICAgKi9cbiAgICBfX3NldEJnT3ZlcmxheUltYWdlOiBmdW5jdGlvbihwcm9wZXJ0eSwgaW1hZ2UsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGltYWdlID09PSAnc3RyaW5nJykge1xuICAgICAgICBmYWJyaWMudXRpbC5sb2FkSW1hZ2UoaW1hZ2UsIGZ1bmN0aW9uKGltZywgaXNFcnJvcikge1xuICAgICAgICAgIGlmIChpbWcpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBmYWJyaWMuSW1hZ2UoaW1nLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXNbcHJvcGVydHldID0gaW5zdGFuY2U7XG4gICAgICAgICAgICBpbnN0YW5jZS5jYW52YXMgPSB0aGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpbWcsIGlzRXJyb3IpO1xuICAgICAgICB9LCB0aGlzLCBvcHRpb25zICYmIG9wdGlvbnMuY3Jvc3NPcmlnaW4pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgJiYgaW1hZ2Uuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBpbWFnZTtcbiAgICAgICAgaW1hZ2UgJiYgKGltYWdlLmNhbnZhcyA9IHRoaXMpO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpbWFnZSwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdG8gc2V0ICh7QGxpbmsgZmFicmljLlN0YXRpY0NhbnZhcyNiYWNrZ3JvdW5kQ29sb3J8YmFja2dyb3VuZENvbG9yfVxuICAgICAqIG9yIHtAbGluayBmYWJyaWMuU3RhdGljQ2FudmFzI292ZXJsYXlDb2xvcnxvdmVybGF5Q29sb3J9KVxuICAgICAqIEBwYXJhbSB7KE9iamVjdHxTdHJpbmd8bnVsbCl9IGNvbG9yIE9iamVjdCB3aXRoIHBhdHRlcm4gaW5mb3JtYXRpb24sIGNvbG9yIHZhbHVlIG9yIG51bGxcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIGlzIGludm9rZWQgd2hlbiBjb2xvciBpcyBzZXRcbiAgICAgKi9cbiAgICBfX3NldEJnT3ZlcmxheUNvbG9yOiBmdW5jdGlvbihwcm9wZXJ0eSwgY29sb3IsIGNhbGxiYWNrKSB7XG4gICAgICB0aGlzW3Byb3BlcnR5XSA9IGNvbG9yO1xuICAgICAgdGhpcy5faW5pdEdyYWRpZW50KGNvbG9yLCBwcm9wZXJ0eSk7XG4gICAgICB0aGlzLl9pbml0UGF0dGVybihjb2xvciwgcHJvcGVydHksIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVDYW52YXNFbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHRocm93IENBTlZBU19JTklUX0VSUk9SO1xuICAgICAgfVxuICAgICAgaWYgKCFlbGVtZW50LnN0eWxlKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUgPSB7IH07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnQuZ2V0Q29udGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgQ0FOVkFTX0lOSVRfRVJST1I7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgX2luaXRPcHRpb25zOiBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgdmFyIGxvd2VyQ2FudmFzRWwgPSB0aGlzLmxvd2VyQ2FudmFzRWw7XG4gICAgICB0aGlzLl9zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICB0aGlzLndpZHRoID0gdGhpcy53aWR0aCB8fCBwYXJzZUludChsb3dlckNhbnZhc0VsLndpZHRoLCAxMCkgfHwgMDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgfHwgcGFyc2VJbnQobG93ZXJDYW52YXNFbC5oZWlnaHQsIDEwKSB8fCAwO1xuXG4gICAgICBpZiAoIXRoaXMubG93ZXJDYW52YXNFbC5zdHlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxvd2VyQ2FudmFzRWwud2lkdGggPSB0aGlzLndpZHRoO1xuICAgICAgbG93ZXJDYW52YXNFbC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgICAgbG93ZXJDYW52YXNFbC5zdHlsZS53aWR0aCA9IHRoaXMud2lkdGggKyAncHgnO1xuICAgICAgbG93ZXJDYW52YXNFbC5zdHlsZS5oZWlnaHQgPSB0aGlzLmhlaWdodCArICdweCc7XG5cbiAgICAgIHRoaXMudmlld3BvcnRUcmFuc2Zvcm0gPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtLnNsaWNlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBib3R0b20gY2FudmFzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBbY2FudmFzRWxdXG4gICAgICovXG4gICAgX2NyZWF0ZUxvd2VyQ2FudmFzOiBmdW5jdGlvbiAoY2FudmFzRWwpIHtcbiAgICAgIC8vIGNhbnZhc0VsID09PSAnSFRNTENhbnZhc0VsZW1lbnQnIGRvZXMgbm90IHdvcmsgb24ganNkb20vbm9kZVxuICAgICAgaWYgKGNhbnZhc0VsICYmIGNhbnZhc0VsLmdldENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5sb3dlckNhbnZhc0VsID0gY2FudmFzRWw7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5sb3dlckNhbnZhc0VsID0gZmFicmljLnV0aWwuZ2V0QnlJZChjYW52YXNFbCkgfHwgdGhpcy5fY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICBmYWJyaWMudXRpbC5hZGRDbGFzcyh0aGlzLmxvd2VyQ2FudmFzRWwsICdsb3dlci1jYW52YXMnKTtcbiAgICAgIHRoaXMuX29yaWdpbmFsQ2FudmFzU3R5bGUgPSB0aGlzLmxvd2VyQ2FudmFzRWwuc3R5bGU7XG4gICAgICBpZiAodGhpcy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICB0aGlzLl9hcHBseUNhbnZhc1N0eWxlKHRoaXMubG93ZXJDYW52YXNFbCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29udGV4dENvbnRhaW5lciA9IHRoaXMubG93ZXJDYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNhbnZhcyB3aWR0aCAoaW4gcHgpXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldFdpZHRoOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy53aWR0aDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjYW52YXMgaGVpZ2h0IChpbiBweClcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0SGVpZ2h0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5oZWlnaHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgd2lkdGggb2YgdGhpcyBjYW52YXMgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IHZhbHVlICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlIHRvIHNldCB3aWR0aCB0b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgW29wdGlvbnNdICAgICAgICAgICAgICAgICAgICAgT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59ICAgICAgIFtvcHRpb25zLmJhY2tzdG9yZU9ubHk9ZmFsc2VdIFNldCB0aGUgZ2l2ZW4gZGltZW5zaW9ucyBvbmx5IGFzIGNhbnZhcyBiYWNrc3RvcmUgZGltZW5zaW9uc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgICAgW29wdGlvbnMuY3NzT25seT1mYWxzZV0gICAgICAgU2V0IHRoZSBnaXZlbiBkaW1lbnNpb25zIG9ubHkgYXMgY3NzIGRpbWVuc2lvbnNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIHNldFdpZHRoOiBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldERpbWVuc2lvbnMoeyB3aWR0aDogdmFsdWUgfSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgaGVpZ2h0IG9mIHRoaXMgY2FudmFzIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSB2YWx1ZSAgICAgICAgICAgICAgICAgICAgICAgICBWYWx1ZSB0byBzZXQgaGVpZ2h0IHRvXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICBbb3B0aW9uc10gICAgICAgICAgICAgICAgICAgICBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgICAgW29wdGlvbnMuYmFja3N0b3JlT25seT1mYWxzZV0gU2V0IHRoZSBnaXZlbiBkaW1lbnNpb25zIG9ubHkgYXMgY2FudmFzIGJhY2tzdG9yZSBkaW1lbnNpb25zXG4gICAgICogQHBhcmFtIHtCb29sZWFufSAgICAgICBbb3B0aW9ucy5jc3NPbmx5PWZhbHNlXSAgICAgICBTZXQgdGhlIGdpdmVuIGRpbWVuc2lvbnMgb25seSBhcyBjc3MgZGltZW5zaW9uc1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IGluc3RhbmNlXG4gICAgICogQGNoYWluYWJsZSB0cnVlXG4gICAgICovXG4gICAgc2V0SGVpZ2h0OiBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldERpbWVuc2lvbnMoeyBoZWlnaHQ6IHZhbHVlIH0sIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGRpbWVuc2lvbnMgKHdpZHRoLCBoZWlnaHQpIG9mIHRoaXMgY2FudmFzIGluc3RhbmNlLiB3aGVuIG9wdGlvbnMuY3NzT25seSBmbGFnIGFjdGl2ZSB5b3Ugc2hvdWxkIGFsc28gc3VwcGx5IHRoZSB1bml0IG9mIG1lYXN1cmUgKHB4LyUvZW0pXG4gICAgICogQHBhcmFtIHtPYmplY3R9ICAgICAgICBkaW1lbnNpb25zICAgICAgICAgICAgICAgICAgICBPYmplY3Qgd2l0aCB3aWR0aC9oZWlnaHQgcHJvcGVydGllc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gW2RpbWVuc2lvbnMud2lkdGhdICAgICAgICAgICAgV2lkdGggb2YgY2FudmFzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IFtkaW1lbnNpb25zLmhlaWdodF0gICAgICAgICAgIEhlaWdodCBvZiBjYW52YXMgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSAgICAgICAgW29wdGlvbnNdICAgICAgICAgICAgICAgICAgICAgT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59ICAgICAgIFtvcHRpb25zLmJhY2tzdG9yZU9ubHk9ZmFsc2VdIFNldCB0aGUgZ2l2ZW4gZGltZW5zaW9ucyBvbmx5IGFzIGNhbnZhcyBiYWNrc3RvcmUgZGltZW5zaW9uc1xuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gICAgICAgW29wdGlvbnMuY3NzT25seT1mYWxzZV0gICAgICAgU2V0IHRoZSBnaXZlbiBkaW1lbnNpb25zIG9ubHkgYXMgY3NzIGRpbWVuc2lvbnNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uIChkaW1lbnNpb25zLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY3NzVmFsdWU7XG5cbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIGRpbWVuc2lvbnMpIHtcbiAgICAgICAgY3NzVmFsdWUgPSBkaW1lbnNpb25zW3Byb3BdO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5jc3NPbmx5KSB7XG4gICAgICAgICAgdGhpcy5fc2V0QmFja3N0b3JlRGltZW5zaW9uKHByb3AsIGRpbWVuc2lvbnNbcHJvcF0pO1xuICAgICAgICAgIGNzc1ZhbHVlICs9ICdweCc7XG4gICAgICAgICAgdGhpcy5oYXNMb3N0Q29udGV4dCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW9wdGlvbnMuYmFja3N0b3JlT25seSkge1xuICAgICAgICAgIHRoaXMuX3NldENzc0RpbWVuc2lvbihwcm9wLCBjc3NWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9pc0N1cnJlbnRseURyYXdpbmcpIHtcbiAgICAgICAgdGhpcy5mcmVlRHJhd2luZ0JydXNoICYmIHRoaXMuZnJlZURyYXdpbmdCcnVzaC5fc2V0QnJ1c2hTdHlsZXModGhpcy5jb250ZXh0VG9wKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2luaXRSZXRpbmFTY2FsaW5nKCk7XG4gICAgICB0aGlzLmNhbGNPZmZzZXQoKTtcblxuICAgICAgaWYgKCFvcHRpb25zLmNzc09ubHkpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZm9yIHNldHRpbmcgd2lkdGgvaGVpZ2h0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBwcm9wZXJ0eSAod2lkdGh8aGVpZ2h0KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSB2YWx1ZSB0byBzZXQgcHJvcGVydHkgdG9cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIF9zZXRCYWNrc3RvcmVEaW1lbnNpb246IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xuICAgICAgdGhpcy5sb3dlckNhbnZhc0VsW3Byb3BdID0gdmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLnVwcGVyQ2FudmFzRWwpIHtcbiAgICAgICAgdGhpcy51cHBlckNhbnZhc0VsW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNhY2hlQ2FudmFzRWwpIHtcbiAgICAgICAgdGhpcy5jYWNoZUNhbnZhc0VsW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXNbcHJvcF0gPSB2YWx1ZTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhlbHBlciBmb3Igc2V0dGluZyBjc3Mgd2lkdGgvaGVpZ2h0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcCBwcm9wZXJ0eSAod2lkdGh8aGVpZ2h0KVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSB2YWx1ZSB0byBzZXQgcHJvcGVydHkgdG9cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIF9zZXRDc3NEaW1lbnNpb246IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xuICAgICAgdGhpcy5sb3dlckNhbnZhc0VsLnN0eWxlW3Byb3BdID0gdmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLnVwcGVyQ2FudmFzRWwpIHtcbiAgICAgICAgdGhpcy51cHBlckNhbnZhc0VsLnN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLndyYXBwZXJFbCkge1xuICAgICAgICB0aGlzLndyYXBwZXJFbC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjYW52YXMgem9vbSBsZXZlbFxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRab29tOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy52aWV3cG9ydFRyYW5zZm9ybVswXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB2aWV3cG9ydCB0cmFuc2Zvcm1hdGlvbiBvZiB0aGlzIGNhbnZhcyBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZwdCBhIENhbnZhcyAyRCBBUEkgdHJhbnNmb3JtIG1hdHJpeFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IGluc3RhbmNlXG4gICAgICogQGNoYWluYWJsZSB0cnVlXG4gICAgICovXG4gICAgc2V0Vmlld3BvcnRUcmFuc2Zvcm06IGZ1bmN0aW9uICh2cHQpIHtcbiAgICAgIHZhciBhY3RpdmVPYmplY3QgPSB0aGlzLl9hY3RpdmVPYmplY3QsXG4gICAgICAgICAgYmFja2dyb3VuZE9iamVjdCA9IHRoaXMuYmFja2dyb3VuZEltYWdlLFxuICAgICAgICAgIG92ZXJsYXlPYmplY3QgPSB0aGlzLm92ZXJsYXlJbWFnZSxcbiAgICAgICAgICBvYmplY3QsIGksIGxlbjtcbiAgICAgIHRoaXMudmlld3BvcnRUcmFuc2Zvcm0gPSB2cHQ7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIG9iamVjdCA9IHRoaXMuX29iamVjdHNbaV07XG4gICAgICAgIG9iamVjdC5ncm91cCB8fCBvYmplY3Quc2V0Q29vcmRzKHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKGFjdGl2ZU9iamVjdCkge1xuICAgICAgICBhY3RpdmVPYmplY3Quc2V0Q29vcmRzKCk7XG4gICAgICB9XG4gICAgICBpZiAoYmFja2dyb3VuZE9iamVjdCkge1xuICAgICAgICBiYWNrZ3JvdW5kT2JqZWN0LnNldENvb3Jkcyh0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChvdmVybGF5T2JqZWN0KSB7XG4gICAgICAgIG92ZXJsYXlPYmplY3Quc2V0Q29vcmRzKHRydWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5jYWxjVmlld3BvcnRCb3VuZGFyaWVzKCk7XG4gICAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgem9vbSBsZXZlbCBvZiB0aGlzIGNhbnZhcyBpbnN0YW5jZSwgdGhlIHpvb20gY2VudGVyZWQgYXJvdW5kIHBvaW50XG4gICAgICogbWVhbmluZyB0aGF0IGZvbGxvd2luZyB6b29tIHRvIHBvaW50IHdpdGggdGhlIHNhbWUgcG9pbnQgd2lsbCBoYXZlIHRoZSB2aXN1YWxcbiAgICAgKiBlZmZlY3Qgb2YgdGhlIHpvb20gb3JpZ2luYXRpbmcgZnJvbSB0aGF0IHBvaW50LiBUaGUgcG9pbnQgd29uJ3QgbW92ZS5cbiAgICAgKiBJdCBoYXMgbm90aGluZyB0byBkbyB3aXRoIGNhbnZhcyBjZW50ZXIgb3IgdmlzdWFsIGNlbnRlciBvZiB0aGUgdmlld3BvcnQuXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHBvaW50IHRvIHpvb20gd2l0aCByZXNwZWN0IHRvXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIHRvIHNldCB6b29tIHRvLCBsZXNzIHRoYW4gMSB6b29tcyBvdXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIHpvb21Ub1BvaW50OiBmdW5jdGlvbiAocG9pbnQsIHZhbHVlKSB7XG4gICAgICAvLyBUT0RPOiBqdXN0IGNoYW5nZSB0aGUgc2NhbGUsIHByZXNlcnZlIG90aGVyIHRyYW5zZm9ybWF0aW9uc1xuICAgICAgdmFyIGJlZm9yZSA9IHBvaW50LCB2cHQgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtLnNsaWNlKDApO1xuICAgICAgcG9pbnQgPSB0cmFuc2Zvcm1Qb2ludChwb2ludCwgaW52ZXJ0VHJhbnNmb3JtKHRoaXMudmlld3BvcnRUcmFuc2Zvcm0pKTtcbiAgICAgIHZwdFswXSA9IHZhbHVlO1xuICAgICAgdnB0WzNdID0gdmFsdWU7XG4gICAgICB2YXIgYWZ0ZXIgPSB0cmFuc2Zvcm1Qb2ludChwb2ludCwgdnB0KTtcbiAgICAgIHZwdFs0XSArPSBiZWZvcmUueCAtIGFmdGVyLng7XG4gICAgICB2cHRbNV0gKz0gYmVmb3JlLnkgLSBhZnRlci55O1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Vmlld3BvcnRUcmFuc2Zvcm0odnB0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB6b29tIGxldmVsIG9mIHRoaXMgY2FudmFzIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIHRvIHNldCB6b29tIHRvLCBsZXNzIHRoYW4gMSB6b29tcyBvdXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGUgdHJ1ZVxuICAgICAqL1xuICAgIHNldFpvb206IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdGhpcy56b29tVG9Qb2ludChuZXcgZmFicmljLlBvaW50KDAsIDApLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFuIHZpZXdwb3J0IHNvIGFzIHRvIHBsYWNlIHBvaW50IGF0IHRvcCBsZWZ0IGNvcm5lciBvZiBjYW52YXNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgdG8gbW92ZSB0b1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IGluc3RhbmNlXG4gICAgICogQGNoYWluYWJsZSB0cnVlXG4gICAgICovXG4gICAgYWJzb2x1dGVQYW46IGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgdmFyIHZwdCA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm0uc2xpY2UoMCk7XG4gICAgICB2cHRbNF0gPSAtcG9pbnQueDtcbiAgICAgIHZwdFs1XSA9IC1wb2ludC55O1xuICAgICAgcmV0dXJuIHRoaXMuc2V0Vmlld3BvcnRUcmFuc2Zvcm0odnB0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFucyB2aWV3cG9pbnQgcmVsYXRpdmVseVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCAocG9zaXRpb24gdmVjdG9yKSB0byBtb3ZlIGJ5XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gaW5zdGFuY2VcbiAgICAgKiBAY2hhaW5hYmxlIHRydWVcbiAgICAgKi9cbiAgICByZWxhdGl2ZVBhbjogZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnNvbHV0ZVBhbihuZXcgZmFicmljLlBvaW50KFxuICAgICAgICAtcG9pbnQueCAtIHRoaXMudmlld3BvcnRUcmFuc2Zvcm1bNF0sXG4gICAgICAgIC1wb2ludC55IC0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybVs1XVxuICAgICAgKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgJmx0O2NhbnZhcz4gZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIHRoaXMgaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXRFbGVtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5sb3dlckNhbnZhc0VsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqIE9iamVjdCB0aGF0IHdhcyBhZGRlZFxuICAgICAqL1xuICAgIF9vbk9iamVjdEFkZGVkOiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHRoaXMuc3RhdGVmdWwgJiYgb2JqLnNldHVwU3RhdGUoKTtcbiAgICAgIG9iai5fc2V0KCdjYW52YXMnLCB0aGlzKTtcbiAgICAgIG9iai5zZXRDb29yZHMoKTtcbiAgICAgIHRoaXMuZmlyZSgnb2JqZWN0OmFkZGVkJywgeyB0YXJnZXQ6IG9iaiB9KTtcbiAgICAgIG9iai5maXJlKCdhZGRlZCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqIE9iamVjdCB0aGF0IHdhcyByZW1vdmVkXG4gICAgICovXG4gICAgX29uT2JqZWN0UmVtb3ZlZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICB0aGlzLmZpcmUoJ29iamVjdDpyZW1vdmVkJywgeyB0YXJnZXQ6IG9iaiB9KTtcbiAgICAgIG9iai5maXJlKCdyZW1vdmVkJyk7XG4gICAgICBkZWxldGUgb2JqLmNhbnZhcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHNwZWNpZmllZCBjb250ZXh0IG9mIGNhbnZhcyBlbGVtZW50XG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIGNsZWFyXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjbGVhckNvbnRleHQ6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb250ZXh0IG9mIGNhbnZhcyB3aGVyZSBvYmplY3RzIGFyZSBkcmF3blxuICAgICAqIEByZXR1cm4ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH1cbiAgICAgKi9cbiAgICBnZXRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0Q29udGFpbmVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIGNvbnRleHRzIChiYWNrZ3JvdW5kLCBtYWluLCB0b3ApIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5yZW1vdmUuYXBwbHkodGhpcywgdGhpcy5nZXRPYmplY3RzKCkpO1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPSBudWxsO1xuICAgICAgdGhpcy5vdmVybGF5SW1hZ2UgPSBudWxsO1xuICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSAnJztcbiAgICAgIHRoaXMub3ZlcmxheUNvbG9yID0gJyc7XG4gICAgICBpZiAodGhpcy5faGFzSVRleHRIYW5kbGVycykge1xuICAgICAgICB0aGlzLm9mZignbW91c2U6dXAnLCB0aGlzLl9tb3VzZVVwSVRleHRIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5faVRleHRJbnN0YW5jZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9oYXNJVGV4dEhhbmRsZXJzID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dCh0aGlzLmNvbnRleHRDb250YWluZXIpO1xuICAgICAgdGhpcy5maXJlKCdjYW52YXM6Y2xlYXJlZCcpO1xuICAgICAgdGhpcy5yZW5kZXJPbkFkZFJlbW92ZSAmJiB0aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZW5kZXJBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYW52YXNUb0RyYXdPbiA9IHRoaXMuY29udGV4dENvbnRhaW5lcjtcbiAgICAgIHRoaXMucmVuZGVyQ2FudmFzKGNhbnZhc1RvRHJhd09uLCB0aGlzLl9vYmplY3RzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGdW5jdGlvbiBjcmVhdGVkIHRvIGJlIGluc3RhbmNlIGJvdW5kIGF0IGluaXRpYWxpemF0aW9uXG4gICAgICogdXNlZCBpbiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcmVuZGVyaW5nXG4gICAgICogTGV0IHRoZSBmYWJyaWNKUyBjYWxsIGl0LiBJZiB5b3UgY2FsbCBpdCBtYW51YWxseSB5b3UgY291bGQgaGF2ZSBtb3JlXG4gICAgICogYW5pbWF0aW9uRnJhbWUgc3RhY2tpbmcgb24gdG8gb2YgZWFjaCBvdGhlclxuICAgICAqIGZvciBhbiBpbXBlcmF0aXZlIHJlbmRlcmluZywgdXNlIGNhbnZhcy5yZW5kZXJBbGxcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IGluc3RhbmNlXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHJlbmRlckFuZFJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaXNSZW5kZXJpbmcgPSAwO1xuICAgICAgdGhpcy5yZW5kZXJBbGwoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwZW5kIGEgcmVuZGVyQWxsIHJlcXVlc3QgdG8gbmV4dCBhbmltYXRpb24gZnJhbWUuXG4gICAgICogdW5sZXNzIG9uZSBpcyBhbHJlYWR5IGluIHByb2dyZXNzLCBpbiB0aGF0IGNhc2Ugbm90aGluZyBpcyBkb25lXG4gICAgICogYSBib29sZWFuIGZsYWcgd2lsbCBhdm9pZCBhcHBlbmRpbmcgbW9yZS5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZXF1ZXN0UmVuZGVyQWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZW5kZXJpbmcpIHtcbiAgICAgICAgdGhpcy5pc1JlbmRlcmluZyA9IGZhYnJpYy51dGlsLnJlcXVlc3RBbmltRnJhbWUodGhpcy5yZW5kZXJBbmRSZXNldEJvdW5kKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSA0IGNvcm5lciBvZiBjYW52YXMgd2l0aCBjdXJyZW50IHZpZXdwb3J0VHJhbnNmb3JtLlxuICAgICAqIGhlbHBzIHRvIGRldGVybWluYXRlIHdoZW4gYW4gb2JqZWN0IGlzIGluIHRoZSBjdXJyZW50IHJlbmRlcmluZyB2aWV3cG9ydCB1c2luZ1xuICAgICAqIG9iamVjdCBhYnNvbHV0ZSBjb29yZGluYXRlcyAoIGFDb29yZHMgKVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gcG9pbnRzLnRsXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGNhbGNWaWV3cG9ydEJvdW5kYXJpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvaW50cyA9IHsgfSwgd2lkdGggPSB0aGlzLndpZHRoLCBoZWlnaHQgPSB0aGlzLmhlaWdodCxcbiAgICAgICAgICBpVnB0ID0gaW52ZXJ0VHJhbnNmb3JtKHRoaXMudmlld3BvcnRUcmFuc2Zvcm0pO1xuICAgICAgcG9pbnRzLnRsID0gdHJhbnNmb3JtUG9pbnQoeyB4OiAwLCB5OiAwIH0sIGlWcHQpO1xuICAgICAgcG9pbnRzLmJyID0gdHJhbnNmb3JtUG9pbnQoeyB4OiB3aWR0aCwgeTogaGVpZ2h0IH0sIGlWcHQpO1xuICAgICAgcG9pbnRzLnRyID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludHMuYnIueCwgcG9pbnRzLnRsLnkpO1xuICAgICAgcG9pbnRzLmJsID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludHMudGwueCwgcG9pbnRzLmJyLnkpO1xuICAgICAgdGhpcy52cHRDb29yZHMgPSBwb2ludHM7XG4gICAgICByZXR1cm4gcG9pbnRzO1xuICAgIH0sXG5cbiAgICBjYW5jZWxSZXF1ZXN0ZWRSZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaXNSZW5kZXJpbmcpIHtcbiAgICAgICAgZmFicmljLnV0aWwuY2FuY2VsQW5pbUZyYW1lKHRoaXMuaXNSZW5kZXJpbmcpO1xuICAgICAgICB0aGlzLmlzUmVuZGVyaW5nID0gMDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBiYWNrZ3JvdW5kLCBvYmplY3RzLCBvdmVybGF5IGFuZCBjb250cm9scy5cbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gICAgICogQHBhcmFtIHtBcnJheX0gb2JqZWN0cyB0byByZW5kZXJcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZW5kZXJDYW52YXM6IGZ1bmN0aW9uKGN0eCwgb2JqZWN0cykge1xuICAgICAgdmFyIHYgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtLCBwYXRoID0gdGhpcy5jbGlwUGF0aDtcbiAgICAgIHRoaXMuY2FuY2VsUmVxdWVzdGVkUmVuZGVyKCk7XG4gICAgICB0aGlzLmNhbGNWaWV3cG9ydEJvdW5kYXJpZXMoKTtcbiAgICAgIHRoaXMuY2xlYXJDb250ZXh0KGN0eCk7XG4gICAgICBmYWJyaWMudXRpbC5zZXRJbWFnZVNtb290aGluZyhjdHgsIHRoaXMuaW1hZ2VTbW9vdGhpbmdFbmFibGVkKTtcbiAgICAgIHRoaXMuZmlyZSgnYmVmb3JlOnJlbmRlcicsIHsgY3R4OiBjdHgsIH0pO1xuICAgICAgdGhpcy5fcmVuZGVyQmFja2dyb3VuZChjdHgpO1xuXG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgLy9hcHBseSB2aWV3cG9ydCB0cmFuc2Zvcm0gb25jZSBmb3IgYWxsIHJlbmRlcmluZyBwcm9jZXNzXG4gICAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuICAgICAgdGhpcy5fcmVuZGVyT2JqZWN0cyhjdHgsIG9iamVjdHMpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIGlmICghdGhpcy5jb250cm9sc0Fib3ZlT3ZlcmxheSAmJiB0aGlzLmludGVyYWN0aXZlKSB7XG4gICAgICAgIHRoaXMuZHJhd0NvbnRyb2xzKGN0eCk7XG4gICAgICB9XG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICBwYXRoLmNhbnZhcyA9IHRoaXM7XG4gICAgICAgIC8vIG5lZWRlZCB0byBzZXR1cCBhIGNvdXBsZSBvZiB2YXJpYWJsZXNcbiAgICAgICAgcGF0aC5zaG91bGRDYWNoZSgpO1xuICAgICAgICBwYXRoLl90cmFuc2Zvcm1Eb25lID0gdHJ1ZTtcbiAgICAgICAgcGF0aC5yZW5kZXJDYWNoZSh7IGZvckNsaXBwaW5nOiB0cnVlIH0pO1xuICAgICAgICB0aGlzLmRyYXdDbGlwUGF0aE9uQ2FudmFzKGN0eCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZW5kZXJPdmVybGF5KGN0eCk7XG4gICAgICBpZiAodGhpcy5jb250cm9sc0Fib3ZlT3ZlcmxheSAmJiB0aGlzLmludGVyYWN0aXZlKSB7XG4gICAgICAgIHRoaXMuZHJhd0NvbnRyb2xzKGN0eCk7XG4gICAgICB9XG4gICAgICB0aGlzLmZpcmUoJ2FmdGVyOnJlbmRlcicsIHsgY3R4OiBjdHgsIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQYWludCB0aGUgY2FjaGVkIGNsaXBQYXRoIG9uIHRoZSBsb3dlckNhbnZhc0VsXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIGRyYXdDbGlwUGF0aE9uQ2FudmFzOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHZhciB2ID0gdGhpcy52aWV3cG9ydFRyYW5zZm9ybSwgcGF0aCA9IHRoaXMuY2xpcFBhdGg7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zZm9ybSh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdLCB2WzRdLCB2WzVdKTtcbiAgICAgIC8vIERFQlVHOiB1bmNvbW1lbnQgdGhpcyBsaW5lLCBjb21tZW50IHRoZSBmb2xsb3dpbmdcbiAgICAgIC8vIGN0eC5nbG9iYWxBbHBoYSA9IDAuNDtcbiAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24taW4nO1xuICAgICAgcGF0aC50cmFuc2Zvcm0oY3R4KTtcbiAgICAgIGN0eC5zY2FsZSgxIC8gcGF0aC56b29tWCwgMSAvIHBhdGguem9vbVkpO1xuICAgICAgY3R4LmRyYXdJbWFnZShwYXRoLl9jYWNoZUNhbnZhcywgLXBhdGguY2FjaGVUcmFuc2xhdGlvblgsIC1wYXRoLmNhY2hlVHJhbnNsYXRpb25ZKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9iamVjdHMgdG8gcmVuZGVyXG4gICAgICovXG4gICAgX3JlbmRlck9iamVjdHM6IGZ1bmN0aW9uKGN0eCwgb2JqZWN0cykge1xuICAgICAgdmFyIGksIGxlbjtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgb2JqZWN0c1tpXSAmJiBvYmplY3RzW2ldLnJlbmRlcihjdHgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHkgJ2JhY2tncm91bmQnIG9yICdvdmVybGF5J1xuICAgICAqL1xuICAgIF9yZW5kZXJCYWNrZ3JvdW5kT3JPdmVybGF5OiBmdW5jdGlvbihjdHgsIHByb3BlcnR5KSB7XG4gICAgICB2YXIgZmlsbCA9IHRoaXNbcHJvcGVydHkgKyAnQ29sb3InXSwgb2JqZWN0ID0gdGhpc1twcm9wZXJ0eSArICdJbWFnZSddLFxuICAgICAgICAgIHYgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtLCBuZWVkc1ZwdCA9IHRoaXNbcHJvcGVydHkgKyAnVnB0J107XG4gICAgICBpZiAoIWZpbGwgJiYgIW9iamVjdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZmlsbCkge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oMCwgMCk7XG4gICAgICAgIGN0eC5saW5lVG8odGhpcy53aWR0aCwgMCk7XG4gICAgICAgIGN0eC5saW5lVG8odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICBjdHgubGluZVRvKDAsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gZmlsbC50b0xpdmVcbiAgICAgICAgICA/IGZpbGwudG9MaXZlKGN0eCwgdGhpcylcbiAgICAgICAgICA6IGZpbGw7XG4gICAgICAgIGlmIChuZWVkc1ZwdCkge1xuICAgICAgICAgIGN0eC50cmFuc2Zvcm0odlswXSwgdlsxXSwgdlsyXSwgdlszXSwgdls0XSwgdls1XSk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnRyYW5zZm9ybSgxLCAwLCAwLCAxLCBmaWxsLm9mZnNldFggfHwgMCwgZmlsbC5vZmZzZXRZIHx8IDApO1xuICAgICAgICB2YXIgbSA9IGZpbGwuZ3JhZGllbnRUcmFuc2Zvcm0gfHwgZmlsbC5wYXR0ZXJuVHJhbnNmb3JtO1xuICAgICAgICBtICYmIGN0eC50cmFuc2Zvcm0obVswXSwgbVsxXSwgbVsyXSwgbVszXSwgbVs0XSwgbVs1XSk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgICBpZiAob2JqZWN0KSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGlmIChuZWVkc1ZwdCkge1xuICAgICAgICAgIGN0eC50cmFuc2Zvcm0odlswXSwgdlsxXSwgdlsyXSwgdlszXSwgdls0XSwgdls1XSk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnJlbmRlcihjdHgpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyQmFja2dyb3VuZDogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB0aGlzLl9yZW5kZXJCYWNrZ3JvdW5kT3JPdmVybGF5KGN0eCwgJ2JhY2tncm91bmQnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlck92ZXJsYXk6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdGhpcy5fcmVuZGVyQmFja2dyb3VuZE9yT3ZlcmxheShjdHgsICdvdmVybGF5Jyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29vcmRpbmF0ZXMgb2YgYSBjZW50ZXIgb2YgY2FudmFzLlxuICAgICAqIFJldHVybmVkIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIHRvcCBhbmQgbGVmdCBwcm9wZXJ0aWVzXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3Qgd2l0aCBcInRvcFwiIGFuZCBcImxlZnRcIiBudW1iZXIgdmFsdWVzXG4gICAgICogQGRlcHJlY2F0ZWQgbWlncmF0ZSB0byBgZ2V0Q2VudGVyUG9pbnRgXG4gICAgICovXG4gICAgZ2V0Q2VudGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHRoaXMuaGVpZ2h0IC8gMixcbiAgICAgICAgbGVmdDogdGhpcy53aWR0aCAvIDJcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29vcmRpbmF0ZXMgb2YgYSBjZW50ZXIgb2YgY2FudmFzLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gXG4gICAgICovXG4gICAgZ2V0Q2VudGVyUG9pbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgZmFicmljLlBvaW50KHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXJzIG9iamVjdCBob3Jpem9udGFsbHkgaW4gdGhlIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjZW50ZXIgaG9yaXpvbnRhbGx5XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqL1xuICAgIGNlbnRlck9iamVjdEg6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jZW50ZXJPYmplY3Qob2JqZWN0LCBuZXcgZmFicmljLlBvaW50KHRoaXMuZ2V0Q2VudGVyUG9pbnQoKS54LCBvYmplY3QuZ2V0Q2VudGVyUG9pbnQoKS55KSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENlbnRlcnMgb2JqZWN0IHZlcnRpY2FsbHkgaW4gdGhlIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjZW50ZXIgdmVydGljYWxseVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgY2VudGVyT2JqZWN0VjogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NlbnRlck9iamVjdChvYmplY3QsIG5ldyBmYWJyaWMuUG9pbnQob2JqZWN0LmdldENlbnRlclBvaW50KCkueCwgdGhpcy5nZXRDZW50ZXJQb2ludCgpLnkpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5IGluIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyIHZlcnRpY2FsbHkgYW5kIGhvcml6b250YWxseVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgY2VudGVyT2JqZWN0OiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBjZW50ZXIgPSB0aGlzLmdldENlbnRlclBvaW50KCk7XG4gICAgICByZXR1cm4gdGhpcy5fY2VudGVyT2JqZWN0KG9iamVjdCwgY2VudGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5IGluIHRoZSB2aWV3cG9ydFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjZW50ZXIgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICB2aWV3cG9ydENlbnRlck9iamVjdDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgdnBDZW50ZXIgPSB0aGlzLmdldFZwQ2VudGVyKCk7XG4gICAgICByZXR1cm4gdGhpcy5fY2VudGVyT2JqZWN0KG9iamVjdCwgdnBDZW50ZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXJzIG9iamVjdCBob3Jpem9udGFsbHkgaW4gdGhlIHZpZXdwb3J0LCBvYmplY3QudG9wIGlzIHVuY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjZW50ZXIgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICB2aWV3cG9ydENlbnRlck9iamVjdEg6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgdmFyIHZwQ2VudGVyID0gdGhpcy5nZXRWcENlbnRlcigpO1xuICAgICAgdGhpcy5fY2VudGVyT2JqZWN0KG9iamVjdCwgbmV3IGZhYnJpYy5Qb2ludCh2cENlbnRlci54LCBvYmplY3QuZ2V0Q2VudGVyUG9pbnQoKS55KSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgVmVydGljYWxseSBpbiB0aGUgdmlld3BvcnQsIG9iamVjdC50b3AgaXMgdW5jaGFuZ2VkXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNlbnRlciB2ZXJ0aWNhbGx5IGFuZCBob3Jpem9udGFsbHlcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHZpZXdwb3J0Q2VudGVyT2JqZWN0VjogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgdnBDZW50ZXIgPSB0aGlzLmdldFZwQ2VudGVyKCk7XG5cbiAgICAgIHJldHVybiB0aGlzLl9jZW50ZXJPYmplY3Qob2JqZWN0LCBuZXcgZmFicmljLlBvaW50KG9iamVjdC5nZXRDZW50ZXJQb2ludCgpLngsIHZwQ2VudGVyLnkpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBwb2ludCBpbiBjYW52YXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBjZW50ZXIgb2YgYWN0dWFsIHZpZXdwb3J0LlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH0gdnBDZW50ZXIsIHZpZXdwb3J0IGNlbnRlclxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBnZXRWcENlbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpLFxuICAgICAgICAgIGlWcHQgPSBpbnZlcnRUcmFuc2Zvcm0odGhpcy52aWV3cG9ydFRyYW5zZm9ybSk7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQoY2VudGVyLCBpVnB0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGNlbnRlciBDZW50ZXIgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIF9jZW50ZXJPYmplY3Q6IGZ1bmN0aW9uKG9iamVjdCwgY2VudGVyKSB7XG4gICAgICBvYmplY3Quc2V0UG9zaXRpb25CeU9yaWdpbihjZW50ZXIsICdjZW50ZXInLCAnY2VudGVyJyk7XG4gICAgICBvYmplY3Quc2V0Q29vcmRzKCk7XG4gICAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZGF0YWxlc3MgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBjYW52YXNcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7U3RyaW5nfSBqc29uIHN0cmluZ1xuICAgICAqL1xuICAgIHRvRGF0YWxlc3NKU09OOiBmdW5jdGlvbiAocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgcmV0dXJuIHRoaXMudG9EYXRhbGVzc09iamVjdChwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgY2FudmFzXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uIChwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdG9PYmplY3RNZXRob2QoJ3RvT2JqZWN0JywgcHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgZGF0YWxlc3Mgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvRGF0YWxlc3NPYmplY3Q6IGZ1bmN0aW9uIChwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdG9PYmplY3RNZXRob2QoJ3RvRGF0YWxlc3NPYmplY3QnLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdG9PYmplY3RNZXRob2Q6IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG5cbiAgICAgIHZhciBjbGlwUGF0aCA9IHRoaXMuY2xpcFBhdGgsIGRhdGEgPSB7XG4gICAgICAgIHZlcnNpb246IGZhYnJpYy52ZXJzaW9uLFxuICAgICAgICBvYmplY3RzOiB0aGlzLl90b09iamVjdHMobWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSksXG4gICAgICB9O1xuICAgICAgaWYgKGNsaXBQYXRoICYmICFjbGlwUGF0aC5leGNsdWRlRnJvbUV4cG9ydCkge1xuICAgICAgICBkYXRhLmNsaXBQYXRoID0gdGhpcy5fdG9PYmplY3QodGhpcy5jbGlwUGF0aCwgbWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICB9XG4gICAgICBleHRlbmQoZGF0YSwgdGhpcy5fX3NlcmlhbGl6ZUJnT3ZlcmxheShtZXRob2ROYW1lLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKSk7XG5cbiAgICAgIGZhYnJpYy51dGlsLnBvcHVsYXRlV2l0aFByb3BlcnRpZXModGhpcywgZGF0YSwgcHJvcGVydGllc1RvSW5jbHVkZSk7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF90b09iamVjdHM6IGZ1bmN0aW9uKG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vYmplY3RzLmZpbHRlcihmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuICFvYmplY3QuZXhjbHVkZUZyb21FeHBvcnQ7XG4gICAgICB9KS5tYXAoZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvT2JqZWN0KGluc3RhbmNlLCBtZXRob2ROYW1lLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF90b09iamVjdDogZnVuY3Rpb24oaW5zdGFuY2UsIG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBvcmlnaW5hbFZhbHVlO1xuXG4gICAgICBpZiAoIXRoaXMuaW5jbHVkZURlZmF1bHRWYWx1ZXMpIHtcbiAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IGluc3RhbmNlLmluY2x1ZGVEZWZhdWx0VmFsdWVzO1xuICAgICAgICBpbnN0YW5jZS5pbmNsdWRlRGVmYXVsdFZhbHVlcyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JqZWN0ID0gaW5zdGFuY2VbbWV0aG9kTmFtZV0ocHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICBpZiAoIXRoaXMuaW5jbHVkZURlZmF1bHRWYWx1ZXMpIHtcbiAgICAgICAgaW5zdGFuY2UuaW5jbHVkZURlZmF1bHRWYWx1ZXMgPSBvcmlnaW5hbFZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfX3NlcmlhbGl6ZUJnT3ZlcmxheTogZnVuY3Rpb24obWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIGRhdGEgPSB7fSwgYmdJbWFnZSA9IHRoaXMuYmFja2dyb3VuZEltYWdlLCBvdmVybGF5SW1hZ2UgPSB0aGlzLm92ZXJsYXlJbWFnZSxcbiAgICAgICAgICBiZ0NvbG9yID0gdGhpcy5iYWNrZ3JvdW5kQ29sb3IsIG92ZXJsYXlDb2xvciA9IHRoaXMub3ZlcmxheUNvbG9yO1xuXG4gICAgICBpZiAoYmdDb2xvciAmJiBiZ0NvbG9yLnRvT2JqZWN0KSB7XG4gICAgICAgIGlmICghYmdDb2xvci5leGNsdWRlRnJvbUV4cG9ydCkge1xuICAgICAgICAgIGRhdGEuYmFja2dyb3VuZCA9IGJnQ29sb3IudG9PYmplY3QocHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGJnQ29sb3IpIHtcbiAgICAgICAgZGF0YS5iYWNrZ3JvdW5kID0gYmdDb2xvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKG92ZXJsYXlDb2xvciAmJiBvdmVybGF5Q29sb3IudG9PYmplY3QpIHtcbiAgICAgICAgaWYgKCFvdmVybGF5Q29sb3IuZXhjbHVkZUZyb21FeHBvcnQpIHtcbiAgICAgICAgICBkYXRhLm92ZXJsYXkgPSBvdmVybGF5Q29sb3IudG9PYmplY3QocHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG92ZXJsYXlDb2xvcikge1xuICAgICAgICBkYXRhLm92ZXJsYXkgPSBvdmVybGF5Q29sb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChiZ0ltYWdlICYmICFiZ0ltYWdlLmV4Y2x1ZGVGcm9tRXhwb3J0KSB7XG4gICAgICAgIGRhdGEuYmFja2dyb3VuZEltYWdlID0gdGhpcy5fdG9PYmplY3QoYmdJbWFnZSwgbWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICB9XG4gICAgICBpZiAob3ZlcmxheUltYWdlICYmICFvdmVybGF5SW1hZ2UuZXhjbHVkZUZyb21FeHBvcnQpIHtcbiAgICAgICAgZGF0YS5vdmVybGF5SW1hZ2UgPSB0aGlzLl90b09iamVjdChvdmVybGF5SW1hZ2UsIG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGdldFN2Z1RyYW5zZm9ybSgpIHdpbGwgYXBwbHkgdGhlIFN0YXRpY0NhbnZhcy52aWV3cG9ydFRyYW5zZm9ybSB0byB0aGUgU1ZHIHRyYW5zZm9ybWF0aW9uLiBXaGVuIHRydWUsXG4gICAgICogYSB6b29tZWQgY2FudmFzIHdpbGwgdGhlbiBwcm9kdWNlIHpvb21lZCBTVkcgb3V0cHV0LlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN2Z1ZpZXdwb3J0VHJhbnNmb3JtYXRpb246IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIFNWRyByZXByZXNlbnRhdGlvbiBvZiBjYW52YXNcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0IGZvciBTVkcgb3V0cHV0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5zdXBwcmVzc1ByZWFtYmxlPWZhbHNlXSBJZiB0cnVlIHhtbCB0YWcgaXMgbm90IGluY2x1ZGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnZpZXdCb3hdIFNWRyB2aWV3Ym94IG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52aWV3Qm94LnhdIHgtY29vcmRpbmF0ZSBvZiB2aWV3Ym94XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnZpZXdCb3gueV0geS1jb29yZGluYXRlIG9mIHZpZXdib3hcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMudmlld0JveC53aWR0aF0gV2lkdGggb2Ygdmlld2JveFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52aWV3Qm94LmhlaWdodF0gSGVpZ2h0IG9mIHZpZXdib3hcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuZW5jb2Rpbmc9VVRGLThdIEVuY29kaW5nIG9mIFNWRyBvdXRwdXRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMud2lkdGhdIGRlc2lyZWQgd2lkdGggb2Ygc3ZnIHdpdGggb3Igd2l0aG91dCB1bml0c1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5oZWlnaHRdIGRlc2lyZWQgaGVpZ2h0IG9mIHN2ZyB3aXRoIG9yIHdpdGhvdXQgdW5pdHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygc3ZnIGVsZW1lbnRzLCBjYWxsZWQgYWZ0ZXIgZWFjaCBmYWJyaWMgb2JqZWN0IGNvbnZlcnRlZCBpbnRvIHN2ZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFNWRyBzdHJpbmdcbiAgICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMyNzZXJpYWxpemF0aW9ufVxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZmFicmljanMvalEzWlovfGpzRmlkZGxlIGRlbW99XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+Tm9ybWFsIFNWRyBvdXRwdXQ8L2NhcHRpb24+XG4gICAgICogdmFyIHN2ZyA9IGNhbnZhcy50b1NWRygpO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPlNWRyBvdXRwdXQgd2l0aG91dCBwcmVhbWJsZSAod2l0aG91dCAmbHQ7P3htbCAuLi8+KTwvY2FwdGlvbj5cbiAgICAgKiB2YXIgc3ZnID0gY2FudmFzLnRvU1ZHKHtzdXBwcmVzc1ByZWFtYmxlOiB0cnVlfSk7XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+U1ZHIG91dHB1dCB3aXRoIHZpZXdCb3ggYXR0cmlidXRlPC9jYXB0aW9uPlxuICAgICAqIHZhciBzdmcgPSBjYW52YXMudG9TVkcoe1xuICAgICAqICAgdmlld0JveDoge1xuICAgICAqICAgICB4OiAxMDAsXG4gICAgICogICAgIHk6IDEwMCxcbiAgICAgKiAgICAgd2lkdGg6IDIwMCxcbiAgICAgKiAgICAgaGVpZ2h0OiAzMDBcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TVkcgb3V0cHV0IHdpdGggZGlmZmVyZW50IGVuY29kaW5nIChkZWZhdWx0OiBVVEYtOCk8L2NhcHRpb24+XG4gICAgICogdmFyIHN2ZyA9IGNhbnZhcy50b1NWRyh7ZW5jb2Rpbmc6ICdJU08tODg1OS0xJ30pO1xuICAgICAqIEBleGFtcGxlIDxjYXB0aW9uPk1vZGlmeSBTVkcgb3V0cHV0IHdpdGggcmV2aXZlciBmdW5jdGlvbjwvY2FwdGlvbj5cbiAgICAgKiB2YXIgc3ZnID0gY2FudmFzLnRvU1ZHKG51bGwsIGZ1bmN0aW9uKHN2Zykge1xuICAgICAqICAgcmV0dXJuIHN2Zy5yZXBsYWNlKCdzdHJva2UtZGFzaGFycmF5OiA7IHN0cm9rZS1saW5lY2FwOiBidXR0OyBzdHJva2UtbGluZWpvaW46IG1pdGVyOyBzdHJva2UtbWl0ZXJsaW1pdDogMTA7ICcsICcnKTtcbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICB0b1NWRzogZnVuY3Rpb24ob3B0aW9ucywgcmV2aXZlcikge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG4gICAgICBvcHRpb25zLnJldml2ZXIgPSByZXZpdmVyO1xuICAgICAgdmFyIG1hcmt1cCA9IFtdO1xuXG4gICAgICB0aGlzLl9zZXRTVkdQcmVhbWJsZShtYXJrdXAsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5fc2V0U1ZHSGVhZGVyKG1hcmt1cCwgb3B0aW9ucyk7XG4gICAgICBpZiAodGhpcy5jbGlwUGF0aCkge1xuICAgICAgICBtYXJrdXAucHVzaCgnPGcgY2xpcC1wYXRoPVwidXJsKCMnICsgdGhpcy5jbGlwUGF0aC5jbGlwUGF0aElkICsgJylcIiA+XFxuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zZXRTVkdCZ092ZXJsYXlDb2xvcihtYXJrdXAsICdiYWNrZ3JvdW5kJyk7XG4gICAgICB0aGlzLl9zZXRTVkdCZ092ZXJsYXlJbWFnZShtYXJrdXAsICdiYWNrZ3JvdW5kSW1hZ2UnLCByZXZpdmVyKTtcbiAgICAgIHRoaXMuX3NldFNWR09iamVjdHMobWFya3VwLCByZXZpdmVyKTtcbiAgICAgIGlmICh0aGlzLmNsaXBQYXRoKSB7XG4gICAgICAgIG1hcmt1cC5wdXNoKCc8L2c+XFxuJyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zZXRTVkdCZ092ZXJsYXlDb2xvcihtYXJrdXAsICdvdmVybGF5Jyk7XG4gICAgICB0aGlzLl9zZXRTVkdCZ092ZXJsYXlJbWFnZShtYXJrdXAsICdvdmVybGF5SW1hZ2UnLCByZXZpdmVyKTtcblxuICAgICAgbWFya3VwLnB1c2goJzwvc3ZnPicpO1xuXG4gICAgICByZXR1cm4gbWFya3VwLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRTVkdQcmVhbWJsZTogZnVuY3Rpb24obWFya3VwLCBvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdXBwcmVzc1ByZWFtYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG1hcmt1cC5wdXNoKFxuICAgICAgICAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiJywgKG9wdGlvbnMuZW5jb2RpbmcgfHwgJ1VURi04JyksICdcIiBzdGFuZGFsb25lPVwibm9cIiA/PlxcbicsXG4gICAgICAgICc8IURPQ1RZUEUgc3ZnIFBVQkxJQyBcIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOXCIgJyxcbiAgICAgICAgJ1wiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkXCI+XFxuJ1xuICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0U1ZHSGVhZGVyOiBmdW5jdGlvbihtYXJrdXAsIG9wdGlvbnMpIHtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgdGhpcy53aWR0aCxcbiAgICAgICAgICBoZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCB0aGlzLmhlaWdodCxcbiAgICAgICAgICB2cHQsIHZpZXdCb3ggPSAndmlld0JveD1cIjAgMCAnICsgdGhpcy53aWR0aCArICcgJyArIHRoaXMuaGVpZ2h0ICsgJ1wiICcsXG4gICAgICAgICAgTlVNX0ZSQUNUSU9OX0RJR0lUUyA9IGZhYnJpYy5PYmplY3QuTlVNX0ZSQUNUSU9OX0RJR0lUUztcblxuICAgICAgaWYgKG9wdGlvbnMudmlld0JveCkge1xuICAgICAgICB2aWV3Qm94ID0gJ3ZpZXdCb3g9XCInICtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnZpZXdCb3gueCArICcgJyArXG4gICAgICAgICAgICAgICAgb3B0aW9ucy52aWV3Qm94LnkgKyAnICcgK1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudmlld0JveC53aWR0aCArICcgJyArXG4gICAgICAgICAgICAgICAgb3B0aW9ucy52aWV3Qm94LmhlaWdodCArICdcIiAnO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLnN2Z1ZpZXdwb3J0VHJhbnNmb3JtYXRpb24pIHtcbiAgICAgICAgICB2cHQgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtO1xuICAgICAgICAgIHZpZXdCb3ggPSAndmlld0JveD1cIicgK1xuICAgICAgICAgICAgICAgICAgdG9GaXhlZCgtdnB0WzRdIC8gdnB0WzBdLCBOVU1fRlJBQ1RJT05fRElHSVRTKSArICcgJyArXG4gICAgICAgICAgICAgICAgICB0b0ZpeGVkKC12cHRbNV0gLyB2cHRbM10sIE5VTV9GUkFDVElPTl9ESUdJVFMpICsgJyAnICtcbiAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy53aWR0aCAvIHZwdFswXSwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKyAnICcgK1xuICAgICAgICAgICAgICAgICAgdG9GaXhlZCh0aGlzLmhlaWdodCAvIHZwdFszXSwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKyAnXCIgJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtYXJrdXAucHVzaChcbiAgICAgICAgJzxzdmcgJyxcbiAgICAgICAgJ3htbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiAnLFxuICAgICAgICAneG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgJyxcbiAgICAgICAgJ3ZlcnNpb249XCIxLjFcIiAnLFxuICAgICAgICAnd2lkdGg9XCInLCB3aWR0aCwgJ1wiICcsXG4gICAgICAgICdoZWlnaHQ9XCInLCBoZWlnaHQsICdcIiAnLFxuICAgICAgICB2aWV3Qm94LFxuICAgICAgICAneG1sOnNwYWNlPVwicHJlc2VydmVcIj5cXG4nLFxuICAgICAgICAnPGRlc2M+Q3JlYXRlZCB3aXRoIEZhYnJpYy5qcyAnLCBmYWJyaWMudmVyc2lvbiwgJzwvZGVzYz5cXG4nLFxuICAgICAgICAnPGRlZnM+XFxuJyxcbiAgICAgICAgdGhpcy5jcmVhdGVTVkdGb250RmFjZXNNYXJrdXAoKSxcbiAgICAgICAgdGhpcy5jcmVhdGVTVkdSZWZFbGVtZW50c01hcmt1cCgpLFxuICAgICAgICB0aGlzLmNyZWF0ZVNWR0NsaXBQYXRoTWFya3VwKG9wdGlvbnMpLFxuICAgICAgICAnPC9kZWZzPlxcbidcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGNyZWF0ZVNWR0NsaXBQYXRoTWFya3VwOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgY2xpcFBhdGggPSB0aGlzLmNsaXBQYXRoO1xuICAgICAgaWYgKGNsaXBQYXRoKSB7XG4gICAgICAgIGNsaXBQYXRoLmNsaXBQYXRoSWQgPSAnQ0xJUFBBVEhfJyArIGZhYnJpYy5PYmplY3QuX191aWQrKztcbiAgICAgICAgcmV0dXJuICAnPGNsaXBQYXRoIGlkPVwiJyArIGNsaXBQYXRoLmNsaXBQYXRoSWQgKyAnXCIgPlxcbicgK1xuICAgICAgICAgIHRoaXMuY2xpcFBhdGgudG9DbGlwUGF0aFNWRyhvcHRpb25zLnJldml2ZXIpICtcbiAgICAgICAgICAnPC9jbGlwUGF0aD5cXG4nO1xuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG1hcmt1cCBjb250YWluaW5nIFNWRyByZWZlcmVuY2VkIGVsZW1lbnRzIGxpa2UgcGF0dGVybnMsIGdyYWRpZW50cyBldGMuXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGNyZWF0ZVNWR1JlZkVsZW1lbnRzTWFya3VwOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgICAgbWFya3VwID0gWydiYWNrZ3JvdW5kJywgJ292ZXJsYXknXS5tYXAoZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICAgICAgdmFyIGZpbGwgPSBfdGhpc1twcm9wICsgJ0NvbG9yJ107XG4gICAgICAgICAgICBpZiAoZmlsbCAmJiBmaWxsLnRvTGl2ZSkge1xuICAgICAgICAgICAgICB2YXIgc2hvdWxkVHJhbnNmb3JtID0gX3RoaXNbcHJvcCArICdWcHQnXSwgdnB0ID0gX3RoaXMudmlld3BvcnRUcmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgICBvYmplY3QgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBfdGhpcy53aWR0aCAvIChzaG91bGRUcmFuc2Zvcm0gPyB2cHRbMF0gOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBfdGhpcy5oZWlnaHQgLyAoc2hvdWxkVHJhbnNmb3JtID8gdnB0WzNdIDogMSlcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJldHVybiBmaWxsLnRvU1ZHKFxuICAgICAgICAgICAgICAgIG9iamVjdCxcbiAgICAgICAgICAgICAgICB7IGFkZGl0aW9uYWxUcmFuc2Zvcm06IHNob3VsZFRyYW5zZm9ybSA/IGZhYnJpYy51dGlsLm1hdHJpeFRvU1ZHKHZwdCkgOiAnJyB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICByZXR1cm4gbWFya3VwLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIG1hcmt1cCBjb250YWluaW5nIFNWRyBmb250IGZhY2VzLFxuICAgICAqIGZvbnQgVVJMcyBmb3IgZm9udCBmYWNlcyBtdXN0IGJlIGNvbGxlY3RlZCBieSBkZXZlbG9wZXJzXG4gICAgICogYW5kIGFyZSBub3QgZXh0cmFjdGVkIGZyb20gdGhlIERPTSBieSBmYWJyaWNqc1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IG9iamVjdHMgQXJyYXkgb2YgZmFicmljIG9iamVjdHNcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgY3JlYXRlU1ZHRm9udEZhY2VzTWFya3VwOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBtYXJrdXAgPSAnJywgZm9udExpc3QgPSB7IH0sIG9iaiwgZm9udEZhbWlseSxcbiAgICAgICAgICBzdHlsZSwgcm93LCByb3dJbmRleCwgX2NoYXIsIGNoYXJJbmRleCwgaSwgbGVuLFxuICAgICAgICAgIGZvbnRQYXRocyA9IGZhYnJpYy5mb250UGF0aHMsIG9iamVjdHMgPSBbXTtcblxuICAgICAgdGhpcy5fb2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIGFkZChvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0cy5wdXNoKG9iamVjdCk7XG4gICAgICAgIGlmIChvYmplY3QuX29iamVjdHMpIHtcbiAgICAgICAgICBvYmplY3QuX29iamVjdHMuZm9yRWFjaChhZGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBvYmogPSBvYmplY3RzW2ldO1xuICAgICAgICBmb250RmFtaWx5ID0gb2JqLmZvbnRGYW1pbHk7XG4gICAgICAgIGlmIChvYmoudHlwZS5pbmRleE9mKCd0ZXh0JykgPT09IC0xIHx8IGZvbnRMaXN0W2ZvbnRGYW1pbHldIHx8ICFmb250UGF0aHNbZm9udEZhbWlseV0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBmb250TGlzdFtmb250RmFtaWx5XSA9IHRydWU7XG4gICAgICAgIGlmICghb2JqLnN0eWxlcykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlID0gb2JqLnN0eWxlcztcbiAgICAgICAgZm9yIChyb3dJbmRleCBpbiBzdHlsZSkge1xuICAgICAgICAgIHJvdyA9IHN0eWxlW3Jvd0luZGV4XTtcbiAgICAgICAgICBmb3IgKGNoYXJJbmRleCBpbiByb3cpIHtcbiAgICAgICAgICAgIF9jaGFyID0gcm93W2NoYXJJbmRleF07XG4gICAgICAgICAgICBmb250RmFtaWx5ID0gX2NoYXIuZm9udEZhbWlseTtcbiAgICAgICAgICAgIGlmICghZm9udExpc3RbZm9udEZhbWlseV0gJiYgZm9udFBhdGhzW2ZvbnRGYW1pbHldKSB7XG4gICAgICAgICAgICAgIGZvbnRMaXN0W2ZvbnRGYW1pbHldID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiBpbiBmb250TGlzdCkge1xuICAgICAgICBtYXJrdXAgKz0gW1xuICAgICAgICAgICdcXHRcXHRAZm9udC1mYWNlIHtcXG4nLFxuICAgICAgICAgICdcXHRcXHRcXHRmb250LWZhbWlseTogXFwnJywgaiwgJ1xcJztcXG4nLFxuICAgICAgICAgICdcXHRcXHRcXHRzcmM6IHVybChcXCcnLCBmb250UGF0aHNbal0sICdcXCcpO1xcbicsXG4gICAgICAgICAgJ1xcdFxcdH1cXG4nXG4gICAgICAgIF0uam9pbignJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXJrdXApIHtcbiAgICAgICAgbWFya3VwID0gW1xuICAgICAgICAgICdcXHQ8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+JyxcbiAgICAgICAgICAnPCFbQ0RBVEFbXFxuJyxcbiAgICAgICAgICBtYXJrdXAsXG4gICAgICAgICAgJ11dPicsXG4gICAgICAgICAgJzwvc3R5bGU+XFxuJ1xuICAgICAgICBdLmpvaW4oJycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRTVkdPYmplY3RzOiBmdW5jdGlvbihtYXJrdXAsIHJldml2ZXIpIHtcbiAgICAgIHZhciBpbnN0YW5jZSwgaSwgbGVuLCBvYmplY3RzID0gdGhpcy5fb2JqZWN0cztcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaW5zdGFuY2UgPSBvYmplY3RzW2ldO1xuICAgICAgICBpZiAoaW5zdGFuY2UuZXhjbHVkZUZyb21FeHBvcnQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRTVkdPYmplY3QobWFya3VwLCBpbnN0YW5jZSwgcmV2aXZlcik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFNWR09iamVjdDogZnVuY3Rpb24obWFya3VwLCBpbnN0YW5jZSwgcmV2aXZlcikge1xuICAgICAgbWFya3VwLnB1c2goaW5zdGFuY2UudG9TVkcocmV2aXZlcikpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRTVkdCZ092ZXJsYXlJbWFnZTogZnVuY3Rpb24obWFya3VwLCBwcm9wZXJ0eSwgcmV2aXZlcikge1xuICAgICAgaWYgKHRoaXNbcHJvcGVydHldICYmICF0aGlzW3Byb3BlcnR5XS5leGNsdWRlRnJvbUV4cG9ydCAmJiB0aGlzW3Byb3BlcnR5XS50b1NWRykge1xuICAgICAgICBtYXJrdXAucHVzaCh0aGlzW3Byb3BlcnR5XS50b1NWRyhyZXZpdmVyKSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFNWR0JnT3ZlcmxheUNvbG9yOiBmdW5jdGlvbihtYXJrdXAsIHByb3BlcnR5KSB7XG4gICAgICB2YXIgZmlsbGVyID0gdGhpc1twcm9wZXJ0eSArICdDb2xvciddLCB2cHQgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtLCBmaW5hbFdpZHRoID0gdGhpcy53aWR0aCxcbiAgICAgICAgICBmaW5hbEhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgaWYgKCFmaWxsZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGZpbGxlci50b0xpdmUpIHtcbiAgICAgICAgdmFyIHJlcGVhdCA9IGZpbGxlci5yZXBlYXQsIGlWcHQgPSBmYWJyaWMudXRpbC5pbnZlcnRUcmFuc2Zvcm0odnB0KSwgc2hvdWxkSW52ZXJ0ID0gdGhpc1twcm9wZXJ0eSArICdWcHQnXSxcbiAgICAgICAgICAgIGFkZGl0aW9uYWxUcmFuc2Zvcm0gPSBzaG91bGRJbnZlcnQgPyBmYWJyaWMudXRpbC5tYXRyaXhUb1NWRyhpVnB0KSA6ICcnO1xuICAgICAgICBtYXJrdXAucHVzaChcbiAgICAgICAgICAnPHJlY3QgdHJhbnNmb3JtPVwiJyArIGFkZGl0aW9uYWxUcmFuc2Zvcm0gKyAnIHRyYW5zbGF0ZSgnLCBmaW5hbFdpZHRoIC8gMiwgJywnLCBmaW5hbEhlaWdodCAvIDIsICcpXCInLFxuICAgICAgICAgICcgeD1cIicsIGZpbGxlci5vZmZzZXRYIC0gZmluYWxXaWR0aCAvIDIsXG4gICAgICAgICAgJ1wiIHk9XCInLCBmaWxsZXIub2Zmc2V0WSAtIGZpbmFsSGVpZ2h0IC8gMiwgJ1wiICcsXG4gICAgICAgICAgJ3dpZHRoPVwiJyxcbiAgICAgICAgICAocmVwZWF0ID09PSAncmVwZWF0LXknIHx8IHJlcGVhdCA9PT0gJ25vLXJlcGVhdCdcbiAgICAgICAgICAgID8gZmlsbGVyLnNvdXJjZS53aWR0aFxuICAgICAgICAgICAgOiBmaW5hbFdpZHRoICksXG4gICAgICAgICAgJ1wiIGhlaWdodD1cIicsXG4gICAgICAgICAgKHJlcGVhdCA9PT0gJ3JlcGVhdC14JyB8fCByZXBlYXQgPT09ICduby1yZXBlYXQnXG4gICAgICAgICAgICA/IGZpbGxlci5zb3VyY2UuaGVpZ2h0XG4gICAgICAgICAgICA6IGZpbmFsSGVpZ2h0KSxcbiAgICAgICAgICAnXCIgZmlsbD1cInVybCgjU1ZHSURfJyArIGZpbGxlci5pZCArICcpXCInLFxuICAgICAgICAgICc+PC9yZWN0PlxcbidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBtYXJrdXAucHVzaChcbiAgICAgICAgICAnPHJlY3QgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiAnLFxuICAgICAgICAgICdmaWxsPVwiJywgZmlsbGVyLCAnXCInLFxuICAgICAgICAgICc+PC9yZWN0PlxcbidcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8qIF9UT19TVkdfRU5EXyAqL1xuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYW4gb2JqZWN0IG9yIHRoZSBvYmplY3RzIG9mIGEgbXVsdGlwbGUgc2VsZWN0aW9uXG4gICAgICogdG8gdGhlIGJvdHRvbSBvZiB0aGUgc3RhY2sgb2YgZHJhd24gb2JqZWN0c1xuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBzZW5kIHRvIGJhY2tcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNlbmRUb0JhY2s6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmICghb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIGFjdGl2ZVNlbGVjdGlvbiA9IHRoaXMuX2FjdGl2ZU9iamVjdCxcbiAgICAgICAgICBpLCBvYmosIG9ianM7XG4gICAgICBpZiAob2JqZWN0ID09PSBhY3RpdmVTZWxlY3Rpb24gJiYgb2JqZWN0LnR5cGUgPT09ICdhY3RpdmVTZWxlY3Rpb24nKSB7XG4gICAgICAgIG9ianMgPSBhY3RpdmVTZWxlY3Rpb24uX29iamVjdHM7XG4gICAgICAgIGZvciAoaSA9IG9ianMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgb2JqID0gb2Jqc1tpXTtcbiAgICAgICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqKTtcbiAgICAgICAgICB0aGlzLl9vYmplY3RzLnVuc2hpZnQob2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbW92ZUZyb21BcnJheSh0aGlzLl9vYmplY3RzLCBvYmplY3QpO1xuICAgICAgICB0aGlzLl9vYmplY3RzLnVuc2hpZnQob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYW4gb2JqZWN0IG9yIHRoZSBvYmplY3RzIG9mIGEgbXVsdGlwbGUgc2VsZWN0aW9uXG4gICAgICogdG8gdGhlIHRvcCBvZiB0aGUgc3RhY2sgb2YgZHJhd24gb2JqZWN0c1xuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBzZW5kXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBicmluZ1RvRnJvbnQ6IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICAgIGlmICghb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIGFjdGl2ZVNlbGVjdGlvbiA9IHRoaXMuX2FjdGl2ZU9iamVjdCxcbiAgICAgICAgICBpLCBvYmosIG9ianM7XG4gICAgICBpZiAob2JqZWN0ID09PSBhY3RpdmVTZWxlY3Rpb24gJiYgb2JqZWN0LnR5cGUgPT09ICdhY3RpdmVTZWxlY3Rpb24nKSB7XG4gICAgICAgIG9ianMgPSBhY3RpdmVTZWxlY3Rpb24uX29iamVjdHM7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvYmpzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgb2JqID0gb2Jqc1tpXTtcbiAgICAgICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqKTtcbiAgICAgICAgICB0aGlzLl9vYmplY3RzLnB1c2gob2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbW92ZUZyb21BcnJheSh0aGlzLl9vYmplY3RzLCBvYmplY3QpO1xuICAgICAgICB0aGlzLl9vYmplY3RzLnB1c2gob2JqZWN0KTtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYW4gb2JqZWN0IG9yIGEgc2VsZWN0aW9uIGRvd24gaW4gc3RhY2sgb2YgZHJhd24gb2JqZWN0c1xuICAgICAqIEFuIG9wdGlvbmFsIHBhcmFtZXRlciwgaW50ZXJzZWN0aW5nIGFsbG93cyB0byBtb3ZlIHRoZSBvYmplY3QgaW4gYmVoaW5kXG4gICAgICogdGhlIGZpcnN0IGludGVyc2VjdGluZyBvYmplY3QuIFdoZXJlIGludGVyc2VjdGlvbiBpcyBjYWxjdWxhdGVkIHdpdGhcbiAgICAgKiBib3VuZGluZyBib3guIElmIG5vIGludGVyc2VjdGlvbiBpcyBmb3VuZCwgdGhlcmUgd2lsbCBub3QgYmUgY2hhbmdlIGluIHRoZVxuICAgICAqIHN0YWNrLlxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBzZW5kXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbaW50ZXJzZWN0aW5nXSBJZiBgdHJ1ZWAsIHNlbmQgb2JqZWN0IGJlaGluZCBuZXh0IGxvd2VyIGludGVyc2VjdGluZyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNlbmRCYWNrd2FyZHM6IGZ1bmN0aW9uIChvYmplY3QsIGludGVyc2VjdGluZykge1xuICAgICAgaWYgKCFvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgYWN0aXZlU2VsZWN0aW9uID0gdGhpcy5fYWN0aXZlT2JqZWN0LFxuICAgICAgICAgIGksIG9iaiwgaWR4LCBuZXdJZHgsIG9ianMsIG9ianNNb3ZlZCA9IDA7XG5cbiAgICAgIGlmIChvYmplY3QgPT09IGFjdGl2ZVNlbGVjdGlvbiAmJiBvYmplY3QudHlwZSA9PT0gJ2FjdGl2ZVNlbGVjdGlvbicpIHtcbiAgICAgICAgb2JqcyA9IGFjdGl2ZVNlbGVjdGlvbi5fb2JqZWN0cztcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9ianMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBvYmogPSBvYmpzW2ldO1xuICAgICAgICAgIGlkeCA9IHRoaXMuX29iamVjdHMuaW5kZXhPZihvYmopO1xuICAgICAgICAgIGlmIChpZHggPiAwICsgb2Jqc01vdmVkKSB7XG4gICAgICAgICAgICBuZXdJZHggPSBpZHggLSAxO1xuICAgICAgICAgICAgcmVtb3ZlRnJvbUFycmF5KHRoaXMuX29iamVjdHMsIG9iaik7XG4gICAgICAgICAgICB0aGlzLl9vYmplY3RzLnNwbGljZShuZXdJZHgsIDAsIG9iaik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9ianNNb3ZlZCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWR4ID0gdGhpcy5fb2JqZWN0cy5pbmRleE9mKG9iamVjdCk7XG4gICAgICAgIGlmIChpZHggIT09IDApIHtcbiAgICAgICAgICAvLyBpZiBvYmplY3QgaXMgbm90IG9uIHRoZSBib3R0b20gb2Ygc3RhY2tcbiAgICAgICAgICBuZXdJZHggPSB0aGlzLl9maW5kTmV3TG93ZXJJbmRleChvYmplY3QsIGlkeCwgaW50ZXJzZWN0aW5nKTtcbiAgICAgICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqZWN0KTtcbiAgICAgICAgICB0aGlzLl9vYmplY3RzLnNwbGljZShuZXdJZHgsIDAsIG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmluZE5ld0xvd2VySW5kZXg6IGZ1bmN0aW9uKG9iamVjdCwgaWR4LCBpbnRlcnNlY3RpbmcpIHtcbiAgICAgIHZhciBuZXdJZHgsIGk7XG5cbiAgICAgIGlmIChpbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgbmV3SWR4ID0gaWR4O1xuXG4gICAgICAgIC8vIHRyYXZlcnNlIGRvd24gdGhlIHN0YWNrIGxvb2tpbmcgZm9yIHRoZSBuZWFyZXN0IGludGVyc2VjdGluZyBvYmplY3RcbiAgICAgICAgZm9yIChpID0gaWR4IC0gMTsgaSA+PSAwOyAtLWkpIHtcblxuICAgICAgICAgIHZhciBpc0ludGVyc2VjdGluZyA9IG9iamVjdC5pbnRlcnNlY3RzV2l0aE9iamVjdCh0aGlzLl9vYmplY3RzW2ldKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5pc0NvbnRhaW5lZFdpdGhpbk9iamVjdCh0aGlzLl9vYmplY3RzW2ldKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29iamVjdHNbaV0uaXNDb250YWluZWRXaXRoaW5PYmplY3Qob2JqZWN0KTtcblxuICAgICAgICAgIGlmIChpc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgbmV3SWR4ID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld0lkeCA9IGlkeCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdJZHg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGFuIG9iamVjdCBvciBhIHNlbGVjdGlvbiB1cCBpbiBzdGFjayBvZiBkcmF3biBvYmplY3RzXG4gICAgICogQW4gb3B0aW9uYWwgcGFyYW1ldGVyLCBpbnRlcnNlY3RpbmcgYWxsb3dzIHRvIG1vdmUgdGhlIG9iamVjdCBpbiBmcm9udFxuICAgICAqIG9mIHRoZSBmaXJzdCBpbnRlcnNlY3Rpbmcgb2JqZWN0LiBXaGVyZSBpbnRlcnNlY3Rpb24gaXMgY2FsY3VsYXRlZCB3aXRoXG4gICAgICogYm91bmRpbmcgYm94LiBJZiBubyBpbnRlcnNlY3Rpb24gaXMgZm91bmQsIHRoZXJlIHdpbGwgbm90IGJlIGNoYW5nZSBpbiB0aGVcbiAgICAgKiBzdGFjay5cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gc2VuZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ludGVyc2VjdGluZ10gSWYgYHRydWVgLCBzZW5kIG9iamVjdCBpbiBmcm9udCBvZiBuZXh0IHVwcGVyIGludGVyc2VjdGluZyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGJyaW5nRm9yd2FyZDogZnVuY3Rpb24gKG9iamVjdCwgaW50ZXJzZWN0aW5nKSB7XG4gICAgICBpZiAoIW9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHZhciBhY3RpdmVTZWxlY3Rpb24gPSB0aGlzLl9hY3RpdmVPYmplY3QsXG4gICAgICAgICAgaSwgb2JqLCBpZHgsIG5ld0lkeCwgb2Jqcywgb2Jqc01vdmVkID0gMDtcblxuICAgICAgaWYgKG9iamVjdCA9PT0gYWN0aXZlU2VsZWN0aW9uICYmIG9iamVjdC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJykge1xuICAgICAgICBvYmpzID0gYWN0aXZlU2VsZWN0aW9uLl9vYmplY3RzO1xuICAgICAgICBmb3IgKGkgPSBvYmpzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgIG9iaiA9IG9ianNbaV07XG4gICAgICAgICAgaWR4ID0gdGhpcy5fb2JqZWN0cy5pbmRleE9mKG9iaik7XG4gICAgICAgICAgaWYgKGlkeCA8IHRoaXMuX29iamVjdHMubGVuZ3RoIC0gMSAtIG9ianNNb3ZlZCkge1xuICAgICAgICAgICAgbmV3SWR4ID0gaWR4ICsgMTtcbiAgICAgICAgICAgIHJlbW92ZUZyb21BcnJheSh0aGlzLl9vYmplY3RzLCBvYmopO1xuICAgICAgICAgICAgdGhpcy5fb2JqZWN0cy5zcGxpY2UobmV3SWR4LCAwLCBvYmopO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmpzTW92ZWQrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlkeCA9IHRoaXMuX29iamVjdHMuaW5kZXhPZihvYmplY3QpO1xuICAgICAgICBpZiAoaWR4ICE9PSB0aGlzLl9vYmplY3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAvLyBpZiBvYmplY3QgaXMgbm90IG9uIHRvcCBvZiBzdGFjayAobGFzdCBpdGVtIGluIGFuIGFycmF5KVxuICAgICAgICAgIG5ld0lkeCA9IHRoaXMuX2ZpbmROZXdVcHBlckluZGV4KG9iamVjdCwgaWR4LCBpbnRlcnNlY3RpbmcpO1xuICAgICAgICAgIHJlbW92ZUZyb21BcnJheSh0aGlzLl9vYmplY3RzLCBvYmplY3QpO1xuICAgICAgICAgIHRoaXMuX29iamVjdHMuc3BsaWNlKG5ld0lkeCwgMCwgb2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5yZW5kZXJPbkFkZFJlbW92ZSAmJiB0aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9maW5kTmV3VXBwZXJJbmRleDogZnVuY3Rpb24ob2JqZWN0LCBpZHgsIGludGVyc2VjdGluZykge1xuICAgICAgdmFyIG5ld0lkeCwgaSwgbGVuO1xuXG4gICAgICBpZiAoaW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIG5ld0lkeCA9IGlkeDtcblxuICAgICAgICAvLyB0cmF2ZXJzZSB1cCB0aGUgc3RhY2sgbG9va2luZyBmb3IgdGhlIG5lYXJlc3QgaW50ZXJzZWN0aW5nIG9iamVjdFxuICAgICAgICBmb3IgKGkgPSBpZHggKyAxLCBsZW4gPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cbiAgICAgICAgICB2YXIgaXNJbnRlcnNlY3RpbmcgPSBvYmplY3QuaW50ZXJzZWN0c1dpdGhPYmplY3QodGhpcy5fb2JqZWN0c1tpXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaXNDb250YWluZWRXaXRoaW5PYmplY3QodGhpcy5fb2JqZWN0c1tpXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vYmplY3RzW2ldLmlzQ29udGFpbmVkV2l0aGluT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgICAgICBpZiAoaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICAgIG5ld0lkeCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBuZXdJZHggPSBpZHggKyAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3SWR4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBhbiBvYmplY3QgdG8gc3BlY2lmaWVkIGxldmVsIGluIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gc2VuZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBQb3NpdGlvbiB0byBtb3ZlIHRvXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBtb3ZlVG86IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4KSB7XG4gICAgICByZW1vdmVGcm9tQXJyYXkodGhpcy5fb2JqZWN0cywgb2JqZWN0KTtcbiAgICAgIHRoaXMuX29iamVjdHMuc3BsaWNlKGluZGV4LCAwLCBvYmplY3QpO1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhIGNhbnZhcyBlbGVtZW50IGFuZCBkaXNwb3NlIG9iamVjdHNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGNhbmNlbCBldmVudHVhbGx5IG9uZ29pbmcgcmVuZGVyc1xuICAgICAgaWYgKHRoaXMuaXNSZW5kZXJpbmcpIHtcbiAgICAgICAgZmFicmljLnV0aWwuY2FuY2VsQW5pbUZyYW1lKHRoaXMuaXNSZW5kZXJpbmcpO1xuICAgICAgICB0aGlzLmlzUmVuZGVyaW5nID0gMDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZm9yRWFjaE9iamVjdChmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0LmRpc3Bvc2UgJiYgb2JqZWN0LmRpc3Bvc2UoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fb2JqZWN0cyA9IFtdO1xuICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZEltYWdlICYmIHRoaXMuYmFja2dyb3VuZEltYWdlLmRpc3Bvc2UpIHtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5iYWNrZ3JvdW5kSW1hZ2UgPSBudWxsO1xuICAgICAgaWYgKHRoaXMub3ZlcmxheUltYWdlICYmIHRoaXMub3ZlcmxheUltYWdlLmRpc3Bvc2UpIHtcbiAgICAgICAgdGhpcy5vdmVybGF5SW1hZ2UuZGlzcG9zZSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5vdmVybGF5SW1hZ2UgPSBudWxsO1xuICAgICAgdGhpcy5faVRleHRJbnN0YW5jZXMgPSBudWxsO1xuICAgICAgdGhpcy5jb250ZXh0Q29udGFpbmVyID0gbnVsbDtcbiAgICAgIC8vIHJlc3RvcmUgY2FudmFzIHN0eWxlXG4gICAgICB0aGlzLmxvd2VyQ2FudmFzRWwuY2xhc3NMaXN0LnJlbW92ZSgnbG93ZXItY2FudmFzJyk7XG4gICAgICBmYWJyaWMudXRpbC5zZXRTdHlsZSh0aGlzLmxvd2VyQ2FudmFzRWwsIHRoaXMuX29yaWdpbmFsQ2FudmFzU3R5bGUpO1xuICAgICAgZGVsZXRlIHRoaXMuX29yaWdpbmFsQ2FudmFzU3R5bGU7XG4gICAgICAvLyByZXN0b3JlIGNhbnZhcyBzaXplIHRvIG9yaWdpbmFsIHNpemUgaW4gY2FzZSByZXRpbmEgc2NhbGluZyB3YXMgYXBwbGllZFxuICAgICAgdGhpcy5sb3dlckNhbnZhc0VsLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLndpZHRoKTtcbiAgICAgIHRoaXMubG93ZXJDYW52YXNFbC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KTtcbiAgICAgIGZhYnJpYy51dGlsLmNsZWFuVXBKc2RvbU5vZGUodGhpcy5sb3dlckNhbnZhc0VsKTtcbiAgICAgIHRoaXMubG93ZXJDYW52YXNFbCA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICcjPGZhYnJpYy5DYW52YXMgKCcgKyB0aGlzLmNvbXBsZXhpdHkoKSArICcpOiAnICtcbiAgICAgICAgICAgICAgICd7IG9iamVjdHM6ICcgKyB0aGlzLl9vYmplY3RzLmxlbmd0aCArICcgfT4nO1xuICAgIH1cbiAgfSk7XG5cbiAgZXh0ZW5kKGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLCBmYWJyaWMuT2JzZXJ2YWJsZSk7XG4gIGV4dGVuZChmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZSwgZmFicmljLkNvbGxlY3Rpb24pO1xuICBleHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUsIGZhYnJpYy5EYXRhVVJMRXhwb3J0ZXIpO1xuXG4gIGV4dGVuZChmYWJyaWMuU3RhdGljQ2FudmFzLCAvKiogQGxlbmRzIGZhYnJpYy5TdGF0aWNDYW52YXMgKi8ge1xuXG4gICAgLyoqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgRU1QVFlfSlNPTjogJ3tcIm9iamVjdHNcIjogW10sIFwiYmFja2dyb3VuZFwiOiBcIndoaXRlXCJ9JyxcblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgd2F5IHRvIGNoZWNrIHN1cHBvcnQgb2Ygc29tZSBvZiB0aGUgY2FudmFzIG1ldGhvZHNcbiAgICAgKiAoZWl0aGVyIHRob3NlIG9mIEhUTUxDYW52YXNFbGVtZW50IGl0c2VsZiwgb3IgcmVuZGVyaW5nIGNvbnRleHQpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kTmFtZSBNZXRob2QgdG8gY2hlY2sgc3VwcG9ydCBmb3I7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ291bGQgYmUgb25lIG9mIFwic2V0TGluZURhc2hcIlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW4gfCBudWxsfSBgdHJ1ZWAgaWYgbWV0aG9kIGlzIHN1cHBvcnRlZCAob3IgYXQgbGVhc3QgZXhpc3RzKSxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgYG51bGxgIGlmIGNhbnZhcyBlbGVtZW50IG9yIGNvbnRleHQgY2FuIG5vdCBiZSBpbml0aWFsaXplZFxuICAgICAqL1xuICAgIHN1cHBvcnRzOiBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGVsID0gY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuXG4gICAgICBpZiAoIWVsIHx8ICFlbC5nZXRDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgY3R4ID0gZWwuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGlmICghY3R4KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKG1ldGhvZE5hbWUpIHtcblxuICAgICAgICBjYXNlICdzZXRMaW5lRGFzaCc6XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBjdHguc2V0TGluZURhc2ggIT09ICd1bmRlZmluZWQnO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgY2FudmFzXG4gICAqIHRoaXMgYWxpYXMgaXMgcHJvdmlkZWQgYmVjYXVzZSBpZiB5b3UgY2FsbCBKU09OLnN0cmluZ2lmeSBvbiBhbiBpbnN0YW5jZSxcbiAgICogdGhlIHRvSlNPTiBvYmplY3Qgd2lsbCBiZSBpbnZva2VkIGlmIGl0IGV4aXN0cy5cbiAgICogSGF2aW5nIGEgdG9KU09OIG1ldGhvZCBtZWFucyB5b3UgY2FuIGRvIEpTT04uc3RyaW5naWZ5KG15Q2FudmFzKVxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEpTT04gY29tcGF0aWJsZSBvYmplY3RcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTMjc2VyaWFsaXphdGlvbn1cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2pzZmlkZGxlLm5ldC9mYWJyaWNqcy9wZWM4Ni98anNGaWRkbGUgZGVtb31cbiAgICogQGV4YW1wbGUgPGNhcHRpb24+SlNPTiB3aXRob3V0IGFkZGl0aW9uYWwgcHJvcGVydGllczwvY2FwdGlvbj5cbiAgICogdmFyIGpzb24gPSBjYW52YXMudG9KU09OKCk7XG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPkpTT04gd2l0aCBhZGRpdGlvbmFsIHByb3BlcnRpZXMgaW5jbHVkZWQ8L2NhcHRpb24+XG4gICAqIHZhciBqc29uID0gY2FudmFzLnRvSlNPTihbJ2xvY2tNb3ZlbWVudFgnLCAnbG9ja01vdmVtZW50WScsICdsb2NrUm90YXRpb24nLCAnbG9ja1NjYWxpbmdYJywgJ2xvY2tTY2FsaW5nWSddKTtcbiAgICogQGV4YW1wbGUgPGNhcHRpb24+SlNPTiB3aXRob3V0IGRlZmF1bHQgdmFsdWVzPC9jYXB0aW9uPlxuICAgKiBjYW52YXMuaW5jbHVkZURlZmF1bHRWYWx1ZXMgPSBmYWxzZTtcbiAgICogdmFyIGpzb24gPSBjYW52YXMudG9KU09OKCk7XG4gICAqL1xuICBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZS50b0pTT04gPSBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZS50b09iamVjdDtcblxuICBpZiAoZmFicmljLmlzTGlrZWx5Tm9kZSkge1xuICAgIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLmNyZWF0ZVBOR1N0cmVhbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGltcGwgPSBnZXROb2RlQ2FudmFzKHRoaXMubG93ZXJDYW52YXNFbCk7XG4gICAgICByZXR1cm4gaW1wbCAmJiBpbXBsLmNyZWF0ZVBOR1N0cmVhbSgpO1xuICAgIH07XG4gICAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUuY3JlYXRlSlBFR1N0cmVhbSA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICAgIHZhciBpbXBsID0gZ2V0Tm9kZUNhbnZhcyh0aGlzLmxvd2VyQ2FudmFzRWwpO1xuICAgICAgcmV0dXJuIGltcGwgJiYgaW1wbC5jcmVhdGVKUEVHU3RyZWFtKG9wdHMpO1xuICAgIH07XG4gIH1cbn0pKCk7XG5cblxuLyoqXG4gKiBCYXNlQnJ1c2ggY2xhc3NcbiAqIEBjbGFzcyBmYWJyaWMuQmFzZUJydXNoXG4gKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZyZWVkcmF3aW5nfEZyZWVkcmF3aW5nIGRlbW99XG4gKi9cbmZhYnJpYy5CYXNlQnJ1c2ggPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcygvKiogQGxlbmRzIGZhYnJpYy5CYXNlQnJ1c2gucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogQ29sb3Igb2YgYSBicnVzaFxuICAgKiBAdHlwZSBTdHJpbmdcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIGNvbG9yOiAncmdiKDAsIDAsIDApJyxcblxuICAvKipcbiAgICogV2lkdGggb2YgYSBicnVzaCwgaGFzIHRvIGJlIGEgTnVtYmVyLCBubyBzdHJpbmcgbGl0ZXJhbHNcbiAgICogQHR5cGUgTnVtYmVyXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICB3aWR0aDogMSxcblxuICAvKipcbiAgICogU2hhZG93IG9iamVjdCByZXByZXNlbnRpbmcgc2hhZG93IG9mIHRoaXMgc2hhcGUuXG4gICAqIDxiPkJhY2t3YXJkcyBpbmNvbXBhdGliaWxpdHkgbm90ZTo8L2I+IFRoaXMgcHJvcGVydHkgcmVwbGFjZXMgXCJzaGFkb3dDb2xvclwiIChTdHJpbmcpLCBcInNoYWRvd09mZnNldFhcIiAoTnVtYmVyKSxcbiAgICogXCJzaGFkb3dPZmZzZXRZXCIgKE51bWJlcikgYW5kIFwic2hhZG93Qmx1clwiIChOdW1iZXIpIHNpbmNlIHYxLjIuMTJcbiAgICogQHR5cGUgZmFicmljLlNoYWRvd1xuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgc2hhZG93OiBudWxsLFxuXG4gIC8qKlxuICAgKiBMaW5lIGVuZGluZ3Mgc3R5bGUgb2YgYSBicnVzaCAob25lIG9mIFwiYnV0dFwiLCBcInJvdW5kXCIsIFwic3F1YXJlXCIpXG4gICAqIEB0eXBlIFN0cmluZ1xuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgc3Ryb2tlTGluZUNhcDogJ3JvdW5kJyxcblxuICAvKipcbiAgICogQ29ybmVyIHN0eWxlIG9mIGEgYnJ1c2ggKG9uZSBvZiBcImJldmVsXCIsIFwicm91bmRcIiwgXCJtaXRlclwiKVxuICAgKiBAdHlwZSBTdHJpbmdcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHN0cm9rZUxpbmVKb2luOiAncm91bmQnLFxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIG1pdGVyIGxlbmd0aCAodXNlZCBmb3Igc3Ryb2tlTGluZUpvaW4gPSBcIm1pdGVyXCIpIG9mIGEgYnJ1c2gnc1xuICAgKiBAdHlwZSBOdW1iZXJcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIHN0cm9rZU1pdGVyTGltaXQ6ICAgICAgICAgMTAsXG5cbiAgLyoqXG4gICAqIFN0cm9rZSBEYXNoIEFycmF5LlxuICAgKiBAdHlwZSBBcnJheVxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgc3Ryb2tlRGFzaEFycmF5OiBudWxsLFxuXG4gIC8qKlxuICAgKiBXaGVuIGB0cnVlYCwgdGhlIGZyZWUgZHJhd2luZyBpcyBsaW1pdGVkIHRvIHRoZSB3aGl0ZWJvYXJkIHNpemUuIERlZmF1bHQgdG8gZmFsc2UuXG4gICAqIEB0eXBlIEJvb2xlYW5cbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgKi9cblxuICBsaW1pdGVkVG9DYW52YXNTaXplOiBmYWxzZSxcblxuXG4gIC8qKlxuICAgKiBTZXRzIGJydXNoIHN0eWxlc1xuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gICAqL1xuICBfc2V0QnJ1c2hTdHlsZXM6IGZ1bmN0aW9uIChjdHgpIHtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xuICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLndpZHRoO1xuICAgIGN0eC5saW5lQ2FwID0gdGhpcy5zdHJva2VMaW5lQ2FwO1xuICAgIGN0eC5taXRlckxpbWl0ID0gdGhpcy5zdHJva2VNaXRlckxpbWl0O1xuICAgIGN0eC5saW5lSm9pbiA9IHRoaXMuc3Ryb2tlTGluZUpvaW47XG4gICAgY3R4LnNldExpbmVEYXNoKHRoaXMuc3Ryb2tlRGFzaEFycmF5IHx8IFtdKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdHJhbnNmb3JtYXRpb24gb24gZ2l2ZW4gY29udGV4dFxuICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHQyZH0gY3R4IGNvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2F2ZUFuZFRyYW5zZm9ybTogZnVuY3Rpb24oY3R4KSB7XG4gICAgdmFyIHYgPSB0aGlzLmNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC50cmFuc2Zvcm0odlswXSwgdlsxXSwgdlsyXSwgdlszXSwgdls0XSwgdls1XSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYnJ1c2ggc2hhZG93IHN0eWxlc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3NldFNoYWRvdzogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnNoYWRvdykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjYW52YXMgPSB0aGlzLmNhbnZhcyxcbiAgICAgICAgc2hhZG93ID0gdGhpcy5zaGFkb3csXG4gICAgICAgIGN0eCA9IGNhbnZhcy5jb250ZXh0VG9wLFxuICAgICAgICB6b29tID0gY2FudmFzLmdldFpvb20oKTtcbiAgICBpZiAoY2FudmFzICYmIGNhbnZhcy5faXNSZXRpbmFTY2FsaW5nKCkpIHtcbiAgICAgIHpvb20gKj0gZmFicmljLmRldmljZVBpeGVsUmF0aW87XG4gICAgfVxuXG4gICAgY3R4LnNoYWRvd0NvbG9yID0gc2hhZG93LmNvbG9yO1xuICAgIGN0eC5zaGFkb3dCbHVyID0gc2hhZG93LmJsdXIgKiB6b29tO1xuICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gc2hhZG93Lm9mZnNldFggKiB6b29tO1xuICAgIGN0eC5zaGFkb3dPZmZzZXRZID0gc2hhZG93Lm9mZnNldFkgKiB6b29tO1xuICB9LFxuXG4gIG5lZWRzRnVsbFJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvbG9yID0gbmV3IGZhYnJpYy5Db2xvcih0aGlzLmNvbG9yKTtcbiAgICByZXR1cm4gY29sb3IuZ2V0QWxwaGEoKSA8IDEgfHwgISF0aGlzLnNoYWRvdztcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBicnVzaCBzaGFkb3cgc3R5bGVzXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcmVzZXRTaGFkb3c6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdHggPSB0aGlzLmNhbnZhcy5jb250ZXh0VG9wO1xuXG4gICAgY3R4LnNoYWRvd0NvbG9yID0gJyc7XG4gICAgY3R4LnNoYWRvd0JsdXIgPSBjdHguc2hhZG93T2Zmc2V0WCA9IGN0eC5zaGFkb3dPZmZzZXRZID0gMDtcbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2sgaXMgcG9pbnRlciBpcyBvdXRzaWRlIGNhbnZhcyBib3VuZGFyaWVzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAqIEBwcml2YXRlXG4gICovXG4gIF9pc091dFNpZGVDYW52YXM6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICByZXR1cm4gcG9pbnRlci54IDwgMCB8fCBwb2ludGVyLnggPiB0aGlzLmNhbnZhcy5nZXRXaWR0aCgpIHx8IHBvaW50ZXIueSA8IDAgfHwgcG9pbnRlci55ID4gdGhpcy5jYW52YXMuZ2V0SGVpZ2h0KCk7XG4gIH1cbn0pO1xuXG5cbihmdW5jdGlvbigpIHtcbiAgLyoqXG4gICAqIFBlbmNpbEJydXNoIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuUGVuY2lsQnJ1c2hcbiAgICogQGV4dGVuZHMgZmFicmljLkJhc2VCcnVzaFxuICAgKi9cbiAgZmFicmljLlBlbmNpbEJydXNoID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLkJhc2VCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuUGVuY2lsQnJ1c2gucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIERpc2NhcmQgcG9pbnRzIHRoYXQgYXJlIGxlc3MgdGhhbiBgZGVjaW1hdGVgIHBpeGVsIGRpc3RhbnQgZnJvbSBlYWNoIG90aGVyXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC40XG4gICAgICovXG4gICAgZGVjaW1hdGU6IDAuNCxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGEgc3RyYWlnaHQgbGluZSBiZXR3ZWVuIGxhc3QgcmVjb3JkZWQgcG9pbnQgdG8gY3VycmVudCBwb2ludGVyXG4gICAgICogVXNlZCBmb3IgYHNoaWZ0YCBmdW5jdGlvbmFsaXR5XG4gICAgICpcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBkcmF3U3RyYWlnaHRMaW5lOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCBtb2RpZmllciBrZXkgdGhhdCBtYWtlcyB0aGUgYnJ1c2ggZHJhdyBhIHN0cmFpZ2h0IGxpbmUuXG4gICAgICogSWYgYG51bGxgIG9yICdub25lJyBvciBhbnkgb3RoZXIgc3RyaW5nIHRoYXQgaXMgbm90IGEgbW9kaWZpZXIga2V5IHRoZSBmZWF0dXJlIGlzIGRpc2FibGVkLlxuICAgICAqIEB0eXBlIHsnYWx0S2V5JyB8ICdzaGlmdEtleScgfCAnY3RybEtleScgfCAnbm9uZScgfCB1bmRlZmluZWQgfCBudWxsfVxuICAgICAqL1xuICAgIHN0cmFpZ2h0TGluZUtleTogJ3NoaWZ0S2V5JyxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtmYWJyaWMuQ2FudmFzfSBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUGVuY2lsQnJ1c2h9IEluc3RhbmNlIG9mIGEgcGVuY2lsIGJydXNoXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICAgIHRoaXMuX3BvaW50cyA9IFtdO1xuICAgIH0sXG5cbiAgICBuZWVkc0Z1bGxSZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxTdXBlcignbmVlZHNGdWxsUmVuZGVyJykgfHwgdGhpcy5faGFzU3RyYWlnaHRMaW5lO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIGluc2lkZSBvbiBtb3VzZSBkb3duIGFuZCBtb3VzZSBtb3ZlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJcbiAgICAgKi9cbiAgICBfZHJhd1NlZ21lbnQ6IGZ1bmN0aW9uIChjdHgsIHAxLCBwMikge1xuICAgICAgdmFyIG1pZFBvaW50ID0gcDEubWlkUG9pbnRGcm9tKHAyKTtcbiAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHAxLngsIHAxLnksIG1pZFBvaW50LngsIG1pZFBvaW50LnkpO1xuICAgICAgcmV0dXJuIG1pZFBvaW50O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VkIG9uIG1vdXNlIGRvd25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgICAqL1xuICAgIG9uTW91c2VEb3duOiBmdW5jdGlvbihwb2ludGVyLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIXRoaXMuY2FudmFzLl9pc01haW5FdmVudChvcHRpb25zLmUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZHJhd1N0cmFpZ2h0TGluZSA9IG9wdGlvbnMuZVt0aGlzLnN0cmFpZ2h0TGluZUtleV07XG4gICAgICB0aGlzLl9wcmVwYXJlRm9yRHJhd2luZyhwb2ludGVyKTtcbiAgICAgIC8vIGNhcHR1cmUgY29vcmRpbmF0ZXMgaW1tZWRpYXRlbHlcbiAgICAgIC8vIHRoaXMgYWxsb3dzIHRvIGRyYXcgZG90cyAod2hlbiBtb3ZlbWVudCBuZXZlciBvY2N1cnMpXG4gICAgICB0aGlzLl9jYXB0dXJlRHJhd2luZ1BhdGgocG9pbnRlcik7XG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW52b2tlZCBvbiBtb3VzZSBtb3ZlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXJcbiAgICAgKi9cbiAgICBvbk1vdXNlTW92ZTogZnVuY3Rpb24ocG9pbnRlciwgb3B0aW9ucykge1xuICAgICAgaWYgKCF0aGlzLmNhbnZhcy5faXNNYWluRXZlbnQob3B0aW9ucy5lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmRyYXdTdHJhaWdodExpbmUgPSBvcHRpb25zLmVbdGhpcy5zdHJhaWdodExpbmVLZXldO1xuICAgICAgaWYgKHRoaXMubGltaXRlZFRvQ2FudmFzU2l6ZSA9PT0gdHJ1ZSAmJiB0aGlzLl9pc091dFNpZGVDYW52YXMocG9pbnRlcikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2NhcHR1cmVEcmF3aW5nUGF0aChwb2ludGVyKSAmJiB0aGlzLl9wb2ludHMubGVuZ3RoID4gMSkge1xuICAgICAgICBpZiAodGhpcy5uZWVkc0Z1bGxSZW5kZXIoKSkge1xuICAgICAgICAgIC8vIHJlZHJhdyBjdXJ2ZVxuICAgICAgICAgIC8vIGNsZWFyIHRvcCBjYW52YXNcbiAgICAgICAgICB0aGlzLmNhbnZhcy5jbGVhckNvbnRleHQodGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIHBvaW50cyA9IHRoaXMuX3BvaW50cywgbGVuZ3RoID0gcG9pbnRzLmxlbmd0aCwgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcDtcbiAgICAgICAgICAvLyBkcmF3IHRoZSBjdXJ2ZSB1cGRhdGVcbiAgICAgICAgICB0aGlzLl9zYXZlQW5kVHJhbnNmb3JtKGN0eCk7XG4gICAgICAgICAgaWYgKHRoaXMub2xkRW5kKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHRoaXMub2xkRW5kLngsIHRoaXMub2xkRW5kLnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm9sZEVuZCA9IHRoaXMuX2RyYXdTZWdtZW50KGN0eCwgcG9pbnRzW2xlbmd0aCAtIDJdLCBwb2ludHNbbGVuZ3RoIC0gMV0sIHRydWUpO1xuICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEludm9rZWQgb24gbW91c2UgdXBcbiAgICAgKi9cbiAgICBvbk1vdXNlVXA6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMuX2lzTWFpbkV2ZW50KG9wdGlvbnMuZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmRyYXdTdHJhaWdodExpbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMub2xkRW5kID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZmluYWxpemVBbmRBZGRQYXRoKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXIgQWN0dWFsIG1vdXNlIHBvc2l0aW9uIHJlbGF0ZWQgdG8gdGhlIGNhbnZhcy5cbiAgICAgKi9cbiAgICBfcHJlcGFyZUZvckRyYXdpbmc6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcblxuICAgICAgdmFyIHAgPSBuZXcgZmFicmljLlBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KTtcblxuICAgICAgdGhpcy5fcmVzZXQoKTtcbiAgICAgIHRoaXMuX2FkZFBvaW50KHApO1xuICAgICAgdGhpcy5jYW52YXMuY29udGV4dFRvcC5tb3ZlVG8ocC54LCBwLnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCBQb2ludCB0byBiZSBhZGRlZCB0byBwb2ludHMgYXJyYXlcbiAgICAgKi9cbiAgICBfYWRkUG9pbnQ6IGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICBpZiAodGhpcy5fcG9pbnRzLmxlbmd0aCA+IDEgJiYgcG9pbnQuZXEodGhpcy5fcG9pbnRzW3RoaXMuX3BvaW50cy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZHJhd1N0cmFpZ2h0TGluZSAmJiB0aGlzLl9wb2ludHMubGVuZ3RoID4gMSkge1xuICAgICAgICB0aGlzLl9oYXNTdHJhaWdodExpbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9wb2ludHMucG9wKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wb2ludHMucHVzaChwb2ludCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgcG9pbnRzIGFycmF5IGFuZCBzZXQgY29udGV4dFRvcCBjYW52YXMgc3R5bGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fcG9pbnRzID0gW107XG4gICAgICB0aGlzLl9zZXRCcnVzaFN0eWxlcyh0aGlzLmNhbnZhcy5jb250ZXh0VG9wKTtcbiAgICAgIHRoaXMuX3NldFNoYWRvdygpO1xuICAgICAgdGhpcy5faGFzU3RyYWlnaHRMaW5lID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXIgQWN0dWFsIG1vdXNlIHBvc2l0aW9uIHJlbGF0ZWQgdG8gdGhlIGNhbnZhcy5cbiAgICAgKi9cbiAgICBfY2FwdHVyZURyYXdpbmdQYXRoOiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgICB2YXIgcG9pbnRlclBvaW50ID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludGVyLngsIHBvaW50ZXIueSk7XG4gICAgICByZXR1cm4gdGhpcy5fYWRkUG9pbnQocG9pbnRlclBvaW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRHJhdyBhIHNtb290aCBwYXRoIG9uIHRoZSB0b3BDYW52YXMgdXNpbmcgcXVhZHJhdGljQ3VydmVUb1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IFtjdHhdXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgaSwgbGVuLFxuICAgICAgICAgIHAxID0gdGhpcy5fcG9pbnRzWzBdLFxuICAgICAgICAgIHAyID0gdGhpcy5fcG9pbnRzWzFdO1xuICAgICAgY3R4ID0gY3R4IHx8IHRoaXMuY2FudmFzLmNvbnRleHRUb3A7XG4gICAgICB0aGlzLl9zYXZlQW5kVHJhbnNmb3JtKGN0eCk7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAvL2lmIHdlIG9ubHkgaGF2ZSAyIHBvaW50cyBpbiB0aGUgcGF0aCBhbmQgdGhleSBhcmUgdGhlIHNhbWVcbiAgICAgIC8vaXQgbWVhbnMgdGhhdCB0aGUgdXNlciBvbmx5IGNsaWNrZWQgdGhlIGNhbnZhcyB3aXRob3V0IG1vdmluZyB0aGUgbW91c2VcbiAgICAgIC8vdGhlbiB3ZSBzaG91bGQgYmUgZHJhd2luZyBhIGRvdC4gQSBwYXRoIGlzbid0IGRyYXduIGJldHdlZW4gdHdvIGlkZW50aWNhbCBkb3RzXG4gICAgICAvL3RoYXQncyB3aHkgd2Ugc2V0IHRoZW0gYXBhcnQgYSBiaXRcbiAgICAgIGlmICh0aGlzLl9wb2ludHMubGVuZ3RoID09PSAyICYmIHAxLnggPT09IHAyLnggJiYgcDEueSA9PT0gcDIueSkge1xuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoIC8gMTAwMDtcbiAgICAgICAgcDEgPSBuZXcgZmFicmljLlBvaW50KHAxLngsIHAxLnkpO1xuICAgICAgICBwMiA9IG5ldyBmYWJyaWMuUG9pbnQocDIueCwgcDIueSk7XG4gICAgICAgIHAxLnggLT0gd2lkdGg7XG4gICAgICAgIHAyLnggKz0gd2lkdGg7XG4gICAgICB9XG4gICAgICBjdHgubW92ZVRvKHAxLngsIHAxLnkpO1xuXG4gICAgICBmb3IgKGkgPSAxLCBsZW4gPSB0aGlzLl9wb2ludHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgLy8gd2UgcGljayB0aGUgcG9pbnQgYmV0d2VlbiBwaSArIDEgJiBwaSArIDIgYXMgdGhlXG4gICAgICAgIC8vIGVuZCBwb2ludCBhbmQgcDEgYXMgb3VyIGNvbnRyb2wgcG9pbnQuXG4gICAgICAgIHRoaXMuX2RyYXdTZWdtZW50KGN0eCwgcDEsIHAyKTtcbiAgICAgICAgcDEgPSB0aGlzLl9wb2ludHNbaV07XG4gICAgICAgIHAyID0gdGhpcy5fcG9pbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIERyYXcgbGFzdCBsaW5lIGFzIGEgc3RyYWlnaHQgbGluZSB3aGlsZVxuICAgICAgLy8gd2Ugd2FpdCBmb3IgdGhlIG5leHQgcG9pbnQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGVcbiAgICAgIC8vIHRoZSBiZXppZXIgY29udHJvbCBwb2ludFxuICAgICAgY3R4LmxpbmVUbyhwMS54LCBwMS55KTtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHBvaW50cyB0byBTVkcgcGF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBvaW50cyBBcnJheSBvZiBwb2ludHNcbiAgICAgKiBAcmV0dXJuIHsoc3RyaW5nfG51bWJlcilbXVtdfSBTVkcgcGF0aCBjb21tYW5kc1xuICAgICAqL1xuICAgIGNvbnZlcnRQb2ludHNUb1NWR1BhdGg6IGZ1bmN0aW9uIChwb2ludHMpIHtcbiAgICAgIHZhciBjb3JyZWN0aW9uID0gdGhpcy53aWR0aCAvIDEwMDA7XG4gICAgICByZXR1cm4gZmFicmljLnV0aWwuZ2V0U21vb3RoUGF0aEZyb21Qb2ludHMocG9pbnRzLCBjb3JyZWN0aW9uKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKVtdW119IHBhdGhEYXRhIFNWRyBwYXRoIGNvbW1hbmRzXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgX2lzRW1wdHlTVkdQYXRoOiBmdW5jdGlvbiAocGF0aERhdGEpIHtcbiAgICAgIHZhciBwYXRoU3RyaW5nID0gZmFicmljLnV0aWwuam9pblBhdGgocGF0aERhdGEpO1xuICAgICAgcmV0dXJuIHBhdGhTdHJpbmcgPT09ICdNIDAgMCBRIDAgMCAwIDAgTCAwIDAnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGZhYnJpYy5QYXRoIG9iamVjdCB0byBhZGQgb24gY2FudmFzXG4gICAgICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcilbXVtdfSBwYXRoRGF0YSBQYXRoIGRhdGFcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUGF0aH0gUGF0aCB0byBhZGQgb24gY2FudmFzXG4gICAgICovXG4gICAgY3JlYXRlUGF0aDogZnVuY3Rpb24ocGF0aERhdGEpIHtcbiAgICAgIHZhciBwYXRoID0gbmV3IGZhYnJpYy5QYXRoKHBhdGhEYXRhLCB7XG4gICAgICAgIGZpbGw6IG51bGwsXG4gICAgICAgIHN0cm9rZTogdGhpcy5jb2xvcixcbiAgICAgICAgc3Ryb2tlV2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgIHN0cm9rZUxpbmVDYXA6IHRoaXMuc3Ryb2tlTGluZUNhcCxcbiAgICAgICAgc3Ryb2tlTWl0ZXJMaW1pdDogdGhpcy5zdHJva2VNaXRlckxpbWl0LFxuICAgICAgICBzdHJva2VMaW5lSm9pbjogdGhpcy5zdHJva2VMaW5lSm9pbixcbiAgICAgICAgc3Ryb2tlRGFzaEFycmF5OiB0aGlzLnN0cm9rZURhc2hBcnJheSxcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuc2hhZG93KSB7XG4gICAgICAgIHRoaXMuc2hhZG93LmFmZmVjdFN0cm9rZSA9IHRydWU7XG4gICAgICAgIHBhdGguc2hhZG93ID0gbmV3IGZhYnJpYy5TaGFkb3codGhpcy5zaGFkb3cpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVjaW1hdGUgcG9pbnRzIGFycmF5IHdpdGggdGhlIGRlY2ltYXRlIHZhbHVlXG4gICAgICovXG4gICAgZGVjaW1hdGVQb2ludHM6IGZ1bmN0aW9uKHBvaW50cywgZGlzdGFuY2UpIHtcbiAgICAgIGlmIChwb2ludHMubGVuZ3RoIDw9IDIpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICAgIH1cbiAgICAgIHZhciB6b29tID0gdGhpcy5jYW52YXMuZ2V0Wm9vbSgpLCBhZGp1c3RlZERpc3RhbmNlID0gTWF0aC5wb3coZGlzdGFuY2UgLyB6b29tLCAyKSxcbiAgICAgICAgICBpLCBsID0gcG9pbnRzLmxlbmd0aCAtIDEsIGxhc3RQb2ludCA9IHBvaW50c1swXSwgbmV3UG9pbnRzID0gW2xhc3RQb2ludF0sXG4gICAgICAgICAgY0Rpc3RhbmNlO1xuICAgICAgZm9yIChpID0gMTsgaSA8IGwgLSAxOyBpKyspIHtcbiAgICAgICAgY0Rpc3RhbmNlID0gTWF0aC5wb3cobGFzdFBvaW50LnggLSBwb2ludHNbaV0ueCwgMikgKyBNYXRoLnBvdyhsYXN0UG9pbnQueSAtIHBvaW50c1tpXS55LCAyKTtcbiAgICAgICAgaWYgKGNEaXN0YW5jZSA+PSBhZGp1c3RlZERpc3RhbmNlKSB7XG4gICAgICAgICAgbGFzdFBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgIG5ld1BvaW50cy5wdXNoKGxhc3RQb2ludCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogQWRkIHRoZSBsYXN0IHBvaW50IGZyb20gdGhlIG9yaWdpbmFsIGxpbmUgdG8gdGhlIGVuZCBvZiB0aGUgYXJyYXkuXG4gICAgICAgKiBUaGlzIGVuc3VyZXMgZGVjaW1hdGUgZG9lc24ndCBkZWxldGUgdGhlIGxhc3QgcG9pbnQgb24gdGhlIGxpbmUsIGFuZCBlbnN1cmVzIHRoZSBsaW5lIGlzID4gMSBwb2ludC5cbiAgICAgICAqL1xuICAgICAgbmV3UG9pbnRzLnB1c2gocG9pbnRzW2xdKTtcbiAgICAgIHJldHVybiBuZXdQb2ludHM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE9uIG1vdXNldXAgYWZ0ZXIgZHJhd2luZyB0aGUgcGF0aCBvbiBjb250ZXh0VG9wIGNhbnZhc1xuICAgICAqIHdlIHVzZSB0aGUgcG9pbnRzIGNhcHR1cmVkIHRvIGNyZWF0ZSBhbiBuZXcgZmFicmljIHBhdGggb2JqZWN0XG4gICAgICogYW5kIGFkZCBpdCB0byB0aGUgZmFicmljIGNhbnZhcy5cbiAgICAgKi9cbiAgICBfZmluYWxpemVBbmRBZGRQYXRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjdHggPSB0aGlzLmNhbnZhcy5jb250ZXh0VG9wO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgaWYgKHRoaXMuZGVjaW1hdGUpIHtcbiAgICAgICAgdGhpcy5fcG9pbnRzID0gdGhpcy5kZWNpbWF0ZVBvaW50cyh0aGlzLl9wb2ludHMsIHRoaXMuZGVjaW1hdGUpO1xuICAgICAgfVxuICAgICAgdmFyIHBhdGhEYXRhID0gdGhpcy5jb252ZXJ0UG9pbnRzVG9TVkdQYXRoKHRoaXMuX3BvaW50cyk7XG4gICAgICBpZiAodGhpcy5faXNFbXB0eVNWR1BhdGgocGF0aERhdGEpKSB7XG4gICAgICAgIC8vIGRvIG5vdCBjcmVhdGUgMCB3aWR0aC9oZWlnaHQgcGF0aHMsIGFzIHRoZXkgYXJlXG4gICAgICAgIC8vIHJlbmRlcmVkIGluY29uc2lzdGVudGx5IGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAvLyBGaXJlZm94IDQsIGZvciBleGFtcGxlLCByZW5kZXJzIGEgZG90LFxuICAgICAgICAvLyB3aGVyZWFzIENocm9tZSAxMCByZW5kZXJzIG5vdGhpbmdcbiAgICAgICAgdGhpcy5jYW52YXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXRoID0gdGhpcy5jcmVhdGVQYXRoKHBhdGhEYXRhKTtcbiAgICAgIHRoaXMuY2FudmFzLmNsZWFyQ29udGV4dCh0aGlzLmNhbnZhcy5jb250ZXh0VG9wKTtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ2JlZm9yZTpwYXRoOmNyZWF0ZWQnLCB7IHBhdGg6IHBhdGggfSk7XG4gICAgICB0aGlzLmNhbnZhcy5hZGQocGF0aCk7XG4gICAgICB0aGlzLmNhbnZhcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICBwYXRoLnNldENvb3JkcygpO1xuICAgICAgdGhpcy5fcmVzZXRTaGFkb3coKTtcblxuXG4gICAgICAvLyBmaXJlIGV2ZW50ICdwYXRoJyBjcmVhdGVkXG4gICAgICB0aGlzLmNhbnZhcy5maXJlKCdwYXRoOmNyZWF0ZWQnLCB7IHBhdGg6IHBhdGggfSk7XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cblxuLyoqXG4gKiBDaXJjbGVCcnVzaCBjbGFzc1xuICogQGNsYXNzIGZhYnJpYy5DaXJjbGVCcnVzaFxuICovXG5mYWJyaWMuQ2lyY2xlQnJ1c2ggPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuQmFzZUJydXNoLCAvKiogQGxlbmRzIGZhYnJpYy5DaXJjbGVCcnVzaC5wcm90b3R5cGUgKi8ge1xuXG4gIC8qKlxuICAgKiBXaWR0aCBvZiBhIGJydXNoXG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgd2lkdGg6IDEwLFxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge2ZhYnJpYy5DYW52YXN9IGNhbnZhc1xuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2lyY2xlQnJ1c2h9IEluc3RhbmNlIG9mIGEgY2lyY2xlIGJydXNoXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbihjYW52YXMpIHtcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIGluc2lkZSBvbiBtb3VzZSBkb3duIGFuZCBtb3VzZSBtb3ZlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAqL1xuICBkcmF3RG90OiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgdmFyIHBvaW50ID0gdGhpcy5hZGRQb2ludChwb2ludGVyKSxcbiAgICAgICAgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcDtcbiAgICB0aGlzLl9zYXZlQW5kVHJhbnNmb3JtKGN0eCk7XG4gICAgdGhpcy5kb3QoY3R4LCBwb2ludCk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfSxcblxuICBkb3Q6IGZ1bmN0aW9uKGN0eCwgcG9pbnQpIHtcbiAgICBjdHguZmlsbFN0eWxlID0gcG9pbnQuZmlsbDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyhwb2ludC54LCBwb2ludC55LCBwb2ludC5yYWRpdXMsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gbW91c2UgZG93blxuICAgKi9cbiAgb25Nb3VzZURvd246IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICB0aGlzLnBvaW50cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuY2FudmFzLmNsZWFyQ29udGV4dCh0aGlzLmNhbnZhcy5jb250ZXh0VG9wKTtcbiAgICB0aGlzLl9zZXRTaGFkb3coKTtcbiAgICB0aGlzLmRyYXdEb3QocG9pbnRlcik7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciB0aGUgZnVsbCBzdGF0ZSBvZiB0aGUgYnJ1c2hcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdHggID0gdGhpcy5jYW52YXMuY29udGV4dFRvcCwgaSwgbGVuLFxuICAgICAgICBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICB0aGlzLl9zYXZlQW5kVHJhbnNmb3JtKGN0eCk7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0aGlzLmRvdChjdHgsIHBvaW50c1tpXSk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gbW91c2UgbW92ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKi9cbiAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICBpZiAodGhpcy5saW1pdGVkVG9DYW52YXNTaXplID09PSB0cnVlICYmIHRoaXMuX2lzT3V0U2lkZUNhbnZhcyhwb2ludGVyKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWVkc0Z1bGxSZW5kZXIoKSkge1xuICAgICAgdGhpcy5jYW52YXMuY2xlYXJDb250ZXh0KHRoaXMuY2FudmFzLmNvbnRleHRUb3ApO1xuICAgICAgdGhpcy5hZGRQb2ludChwb2ludGVyKTtcbiAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuZHJhd0RvdChwb2ludGVyKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gbW91c2UgdXBcbiAgICovXG4gIG9uTW91c2VVcDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9yaWdpbmFsUmVuZGVyT25BZGRSZW1vdmUgPSB0aGlzLmNhbnZhcy5yZW5kZXJPbkFkZFJlbW92ZSwgaSwgbGVuO1xuICAgIHRoaXMuY2FudmFzLnJlbmRlck9uQWRkUmVtb3ZlID0gZmFsc2U7XG5cbiAgICB2YXIgY2lyY2xlcyA9IFtdO1xuXG4gICAgZm9yIChpID0gMCwgbGVuID0gdGhpcy5wb2ludHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBwb2ludCA9IHRoaXMucG9pbnRzW2ldLFxuICAgICAgICAgIGNpcmNsZSA9IG5ldyBmYWJyaWMuQ2lyY2xlKHtcbiAgICAgICAgICAgIHJhZGl1czogcG9pbnQucmFkaXVzLFxuICAgICAgICAgICAgbGVmdDogcG9pbnQueCxcbiAgICAgICAgICAgIHRvcDogcG9pbnQueSxcbiAgICAgICAgICAgIG9yaWdpblg6ICdjZW50ZXInLFxuICAgICAgICAgICAgb3JpZ2luWTogJ2NlbnRlcicsXG4gICAgICAgICAgICBmaWxsOiBwb2ludC5maWxsXG4gICAgICAgICAgfSk7XG5cbiAgICAgIHRoaXMuc2hhZG93ICYmIChjaXJjbGUuc2hhZG93ID0gbmV3IGZhYnJpYy5TaGFkb3codGhpcy5zaGFkb3cpKTtcblxuICAgICAgY2lyY2xlcy5wdXNoKGNpcmNsZSk7XG4gICAgfVxuICAgIHZhciBncm91cCA9IG5ldyBmYWJyaWMuR3JvdXAoY2lyY2xlcyk7XG4gICAgZ3JvdXAuY2FudmFzID0gdGhpcy5jYW52YXM7XG5cbiAgICB0aGlzLmNhbnZhcy5maXJlKCdiZWZvcmU6cGF0aDpjcmVhdGVkJywgeyBwYXRoOiBncm91cCB9KTtcbiAgICB0aGlzLmNhbnZhcy5hZGQoZ3JvdXApO1xuICAgIHRoaXMuY2FudmFzLmZpcmUoJ3BhdGg6Y3JlYXRlZCcsIHsgcGF0aDogZ3JvdXAgfSk7XG5cbiAgICB0aGlzLmNhbnZhcy5jbGVhckNvbnRleHQodGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgdGhpcy5fcmVzZXRTaGFkb3coKTtcbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJPbkFkZFJlbW92ZSA9IG9yaWdpbmFsUmVuZGVyT25BZGRSZW1vdmU7XG4gICAgdGhpcy5jYW52YXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRlclxuICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9IEp1c3QgYWRkZWQgcG9pbnRlciBwb2ludFxuICAgKi9cbiAgYWRkUG9pbnQ6IGZ1bmN0aW9uKHBvaW50ZXIpIHtcbiAgICB2YXIgcG9pbnRlclBvaW50ID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludGVyLngsIHBvaW50ZXIueSksXG5cbiAgICAgICAgY2lyY2xlUmFkaXVzID0gZmFicmljLnV0aWwuZ2V0UmFuZG9tSW50KFxuICAgICAgICAgIE1hdGgubWF4KDAsIHRoaXMud2lkdGggLSAyMCksIHRoaXMud2lkdGggKyAyMCkgLyAyLFxuXG4gICAgICAgIGNpcmNsZUNvbG9yID0gbmV3IGZhYnJpYy5Db2xvcih0aGlzLmNvbG9yKVxuICAgICAgICAgIC5zZXRBbHBoYShmYWJyaWMudXRpbC5nZXRSYW5kb21JbnQoMCwgMTAwKSAvIDEwMClcbiAgICAgICAgICAudG9SZ2JhKCk7XG5cbiAgICBwb2ludGVyUG9pbnQucmFkaXVzID0gY2lyY2xlUmFkaXVzO1xuICAgIHBvaW50ZXJQb2ludC5maWxsID0gY2lyY2xlQ29sb3I7XG5cbiAgICB0aGlzLnBvaW50cy5wdXNoKHBvaW50ZXJQb2ludCk7XG5cbiAgICByZXR1cm4gcG9pbnRlclBvaW50O1xuICB9XG59KTtcblxuXG4vKipcbiAqIFNwcmF5QnJ1c2ggY2xhc3NcbiAqIEBjbGFzcyBmYWJyaWMuU3ByYXlCcnVzaFxuICovXG5mYWJyaWMuU3ByYXlCcnVzaCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKCBmYWJyaWMuQmFzZUJydXNoLCAvKiogQGxlbmRzIGZhYnJpYy5TcHJheUJydXNoLnByb3RvdHlwZSAqLyB7XG5cbiAgLyoqXG4gICAqIFdpZHRoIG9mIGEgc3ByYXlcbiAgICogQHR5cGUgTnVtYmVyXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICB3aWR0aDogICAgICAgICAgICAgIDEwLFxuXG4gIC8qKlxuICAgKiBEZW5zaXR5IG9mIGEgc3ByYXkgKG51bWJlciBvZiBkb3RzIHBlciBjaHVuaylcbiAgICogQHR5cGUgTnVtYmVyXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBkZW5zaXR5OiAgICAgICAgICAgIDIwLFxuXG4gIC8qKlxuICAgKiBXaWR0aCBvZiBzcHJheSBkb3RzXG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgZG90V2lkdGg6ICAgICAgICAgICAxLFxuXG4gIC8qKlxuICAgKiBXaWR0aCB2YXJpYW5jZSBvZiBzcHJheSBkb3RzXG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgZG90V2lkdGhWYXJpYW5jZTogICAxLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9wYWNpdHkgb2YgYSBkb3Qgc2hvdWxkIGJlIHJhbmRvbVxuICAgKiBAdHlwZSBCb29sZWFuXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICByYW5kb21PcGFjaXR5OiAgICAgICAgZmFsc2UsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3ZlcmxhcHBpbmcgZG90cyAocmVjdGFuZ2xlcykgc2hvdWxkIGJlIHJlbW92ZWQgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKVxuICAgKiBAdHlwZSBCb29sZWFuXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICBvcHRpbWl6ZU92ZXJsYXBwaW5nOiAgdHJ1ZSxcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtmYWJyaWMuQ2FudmFzfSBjYW52YXNcbiAgICogQHJldHVybiB7ZmFicmljLlNwcmF5QnJ1c2h9IEluc3RhbmNlIG9mIGEgc3ByYXkgYnJ1c2hcbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgIHRoaXMuc3ByYXlDaHVua3MgPSBbXTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlZCBvbiBtb3VzZSBkb3duXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAqL1xuICBvbk1vdXNlRG93bjogZnVuY3Rpb24ocG9pbnRlcikge1xuICAgIHRoaXMuc3ByYXlDaHVua3MubGVuZ3RoID0gMDtcbiAgICB0aGlzLmNhbnZhcy5jbGVhckNvbnRleHQodGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgdGhpcy5fc2V0U2hhZG93KCk7XG5cbiAgICB0aGlzLmFkZFNwcmF5Q2h1bmsocG9pbnRlcik7XG4gICAgdGhpcy5yZW5kZXIodGhpcy5zcHJheUNodW5rUG9pbnRzKTtcbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlZCBvbiBtb3VzZSBtb3ZlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAqL1xuICBvbk1vdXNlTW92ZTogZnVuY3Rpb24ocG9pbnRlcikge1xuICAgIGlmICh0aGlzLmxpbWl0ZWRUb0NhbnZhc1NpemUgPT09IHRydWUgJiYgdGhpcy5faXNPdXRTaWRlQ2FudmFzKHBvaW50ZXIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuYWRkU3ByYXlDaHVuayhwb2ludGVyKTtcbiAgICB0aGlzLnJlbmRlcih0aGlzLnNwcmF5Q2h1bmtQb2ludHMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIG9uIG1vdXNlIHVwXG4gICAqL1xuICBvbk1vdXNlVXA6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvcmlnaW5hbFJlbmRlck9uQWRkUmVtb3ZlID0gdGhpcy5jYW52YXMucmVuZGVyT25BZGRSZW1vdmU7XG4gICAgdGhpcy5jYW52YXMucmVuZGVyT25BZGRSZW1vdmUgPSBmYWxzZTtcblxuICAgIHZhciByZWN0cyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLnNwcmF5Q2h1bmtzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgdmFyIHNwcmF5Q2h1bmsgPSB0aGlzLnNwcmF5Q2h1bmtzW2ldO1xuXG4gICAgICBmb3IgKHZhciBqID0gMCwgamxlbiA9IHNwcmF5Q2h1bmsubGVuZ3RoOyBqIDwgamxlbjsgaisrKSB7XG5cbiAgICAgICAgdmFyIHJlY3QgPSBuZXcgZmFicmljLlJlY3Qoe1xuICAgICAgICAgIHdpZHRoOiBzcHJheUNodW5rW2pdLndpZHRoLFxuICAgICAgICAgIGhlaWdodDogc3ByYXlDaHVua1tqXS53aWR0aCxcbiAgICAgICAgICBsZWZ0OiBzcHJheUNodW5rW2pdLnggKyAxLFxuICAgICAgICAgIHRvcDogc3ByYXlDaHVua1tqXS55ICsgMSxcbiAgICAgICAgICBvcmlnaW5YOiAnY2VudGVyJyxcbiAgICAgICAgICBvcmlnaW5ZOiAnY2VudGVyJyxcbiAgICAgICAgICBmaWxsOiB0aGlzLmNvbG9yXG4gICAgICAgIH0pO1xuICAgICAgICByZWN0cy5wdXNoKHJlY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGltaXplT3ZlcmxhcHBpbmcpIHtcbiAgICAgIHJlY3RzID0gdGhpcy5fZ2V0T3B0aW1pemVkUmVjdHMocmVjdHMpO1xuICAgIH1cblxuICAgIHZhciBncm91cCA9IG5ldyBmYWJyaWMuR3JvdXAocmVjdHMpO1xuICAgIHRoaXMuc2hhZG93ICYmIGdyb3VwLnNldCgnc2hhZG93JywgbmV3IGZhYnJpYy5TaGFkb3codGhpcy5zaGFkb3cpKTtcbiAgICB0aGlzLmNhbnZhcy5maXJlKCdiZWZvcmU6cGF0aDpjcmVhdGVkJywgeyBwYXRoOiBncm91cCB9KTtcbiAgICB0aGlzLmNhbnZhcy5hZGQoZ3JvdXApO1xuICAgIHRoaXMuY2FudmFzLmZpcmUoJ3BhdGg6Y3JlYXRlZCcsIHsgcGF0aDogZ3JvdXAgfSk7XG5cbiAgICB0aGlzLmNhbnZhcy5jbGVhckNvbnRleHQodGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgdGhpcy5fcmVzZXRTaGFkb3coKTtcbiAgICB0aGlzLmNhbnZhcy5yZW5kZXJPbkFkZFJlbW92ZSA9IG9yaWdpbmFsUmVuZGVyT25BZGRSZW1vdmU7XG4gICAgdGhpcy5jYW52YXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSByZWN0c1xuICAgKi9cbiAgX2dldE9wdGltaXplZFJlY3RzOiBmdW5jdGlvbihyZWN0cykge1xuXG4gICAgLy8gYXZvaWQgY3JlYXRpbmcgZHVwbGljYXRlIHJlY3RzIGF0IHRoZSBzYW1lIGNvb3JkaW5hdGVzXG4gICAgdmFyIHVuaXF1ZVJlY3RzID0geyB9LCBrZXksIGksIGxlbjtcblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlY3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSByZWN0c1tpXS5sZWZ0ICsgJycgKyByZWN0c1tpXS50b3A7XG4gICAgICBpZiAoIXVuaXF1ZVJlY3RzW2tleV0pIHtcbiAgICAgICAgdW5pcXVlUmVjdHNba2V5XSA9IHJlY3RzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgdW5pcXVlUmVjdHNBcnJheSA9IFtdO1xuICAgIGZvciAoa2V5IGluIHVuaXF1ZVJlY3RzKSB7XG4gICAgICB1bmlxdWVSZWN0c0FycmF5LnB1c2godW5pcXVlUmVjdHNba2V5XSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuaXF1ZVJlY3RzQXJyYXk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBuZXcgY2h1bmsgb2Ygc3ByYXkgYnJ1c2hcbiAgICovXG4gIHJlbmRlcjogZnVuY3Rpb24oc3ByYXlDaHVuaykge1xuICAgIHZhciBjdHggPSB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLCBpLCBsZW47XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XG5cbiAgICB0aGlzLl9zYXZlQW5kVHJhbnNmb3JtKGN0eCk7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBzcHJheUNodW5rLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgcG9pbnQgPSBzcHJheUNodW5rW2ldO1xuICAgICAgaWYgKHR5cGVvZiBwb2ludC5vcGFjaXR5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBwb2ludC5vcGFjaXR5O1xuICAgICAgfVxuICAgICAgY3R4LmZpbGxSZWN0KHBvaW50LngsIHBvaW50LnksIHBvaW50LndpZHRoLCBwb2ludC53aWR0aCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlbmRlciBhbGwgc3ByYXkgY2h1bmtzXG4gICAqL1xuICBfcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcCwgaSwgaWxlbjtcbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcblxuICAgIHRoaXMuX3NhdmVBbmRUcmFuc2Zvcm0oY3R4KTtcblxuICAgIGZvciAoaSA9IDAsIGlsZW4gPSB0aGlzLnNwcmF5Q2h1bmtzLmxlbmd0aDsgaSA8IGlsZW47IGkrKykge1xuICAgICAgdGhpcy5yZW5kZXIodGhpcy5zcHJheUNodW5rc1tpXSk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyXG4gICAqL1xuICBhZGRTcHJheUNodW5rOiBmdW5jdGlvbihwb2ludGVyKSB7XG4gICAgdGhpcy5zcHJheUNodW5rUG9pbnRzID0gW107XG5cbiAgICB2YXIgeCwgeSwgd2lkdGgsIHJhZGl1cyA9IHRoaXMud2lkdGggLyAyLCBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGVuc2l0eTsgaSsrKSB7XG5cbiAgICAgIHggPSBmYWJyaWMudXRpbC5nZXRSYW5kb21JbnQocG9pbnRlci54IC0gcmFkaXVzLCBwb2ludGVyLnggKyByYWRpdXMpO1xuICAgICAgeSA9IGZhYnJpYy51dGlsLmdldFJhbmRvbUludChwb2ludGVyLnkgLSByYWRpdXMsIHBvaW50ZXIueSArIHJhZGl1cyk7XG5cbiAgICAgIGlmICh0aGlzLmRvdFdpZHRoVmFyaWFuY2UpIHtcbiAgICAgICAgd2lkdGggPSBmYWJyaWMudXRpbC5nZXRSYW5kb21JbnQoXG4gICAgICAgICAgLy8gYm90dG9tIGNsYW1wIHdpZHRoIHRvIDFcbiAgICAgICAgICBNYXRoLm1heCgxLCB0aGlzLmRvdFdpZHRoIC0gdGhpcy5kb3RXaWR0aFZhcmlhbmNlKSxcbiAgICAgICAgICB0aGlzLmRvdFdpZHRoICsgdGhpcy5kb3RXaWR0aFZhcmlhbmNlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB3aWR0aCA9IHRoaXMuZG90V2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludCA9IG5ldyBmYWJyaWMuUG9pbnQoeCwgeSk7XG4gICAgICBwb2ludC53aWR0aCA9IHdpZHRoO1xuXG4gICAgICBpZiAodGhpcy5yYW5kb21PcGFjaXR5KSB7XG4gICAgICAgIHBvaW50Lm9wYWNpdHkgPSBmYWJyaWMudXRpbC5nZXRSYW5kb21JbnQoMCwgMTAwKSAvIDEwMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zcHJheUNodW5rUG9pbnRzLnB1c2gocG9pbnQpO1xuICAgIH1cblxuICAgIHRoaXMuc3ByYXlDaHVua3MucHVzaCh0aGlzLnNwcmF5Q2h1bmtQb2ludHMpO1xuICB9XG59KTtcblxuXG4vKipcbiAqIFBhdHRlcm5CcnVzaCBjbGFzc1xuICogQGNsYXNzIGZhYnJpYy5QYXR0ZXJuQnJ1c2hcbiAqIEBleHRlbmRzIGZhYnJpYy5CYXNlQnJ1c2hcbiAqL1xuZmFicmljLlBhdHRlcm5CcnVzaCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5QZW5jaWxCcnVzaCwgLyoqIEBsZW5kcyBmYWJyaWMuUGF0dGVybkJydXNoLnByb3RvdHlwZSAqLyB7XG5cbiAgZ2V0UGF0dGVyblNyYzogZnVuY3Rpb24oKSB7XG5cbiAgICB2YXIgZG90V2lkdGggPSAyMCxcbiAgICAgICAgZG90RGlzdGFuY2UgPSA1LFxuICAgICAgICBwYXR0ZXJuQ2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLFxuICAgICAgICBwYXR0ZXJuQ3R4ID0gcGF0dGVybkNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgcGF0dGVybkNhbnZhcy53aWR0aCA9IHBhdHRlcm5DYW52YXMuaGVpZ2h0ID0gZG90V2lkdGggKyBkb3REaXN0YW5jZTtcblxuICAgIHBhdHRlcm5DdHguZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcbiAgICBwYXR0ZXJuQ3R4LmJlZ2luUGF0aCgpO1xuICAgIHBhdHRlcm5DdHguYXJjKGRvdFdpZHRoIC8gMiwgZG90V2lkdGggLyAyLCBkb3RXaWR0aCAvIDIsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG4gICAgcGF0dGVybkN0eC5jbG9zZVBhdGgoKTtcbiAgICBwYXR0ZXJuQ3R4LmZpbGwoKTtcblxuICAgIHJldHVybiBwYXR0ZXJuQ2FudmFzO1xuICB9LFxuXG4gIGdldFBhdHRlcm5TcmNGdW5jdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFN0cmluZyh0aGlzLmdldFBhdHRlcm5TcmMpLnJlcGxhY2UoJ3RoaXMuY29sb3InLCAnXCInICsgdGhpcy5jb2xvciArICdcIicpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIFwicGF0dGVyblwiIGluc3RhbmNlIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHhcbiAgICovXG4gIGdldFBhdHRlcm46IGZ1bmN0aW9uKGN0eCkge1xuICAgIHJldHVybiBjdHguY3JlYXRlUGF0dGVybih0aGlzLnNvdXJjZSB8fCB0aGlzLmdldFBhdHRlcm5TcmMoKSwgJ3JlcGVhdCcpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGJydXNoIHN0eWxlc1xuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gICAqL1xuICBfc2V0QnJ1c2hTdHlsZXM6IGZ1bmN0aW9uKGN0eCkge1xuICAgIHRoaXMuY2FsbFN1cGVyKCdfc2V0QnJ1c2hTdHlsZXMnLCBjdHgpO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuZ2V0UGF0dGVybihjdHgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHBhdGhcbiAgICovXG4gIGNyZWF0ZVBhdGg6IGZ1bmN0aW9uKHBhdGhEYXRhKSB7XG4gICAgdmFyIHBhdGggPSB0aGlzLmNhbGxTdXBlcignY3JlYXRlUGF0aCcsIHBhdGhEYXRhKSxcbiAgICAgICAgdG9wTGVmdCA9IHBhdGguX2dldExlZnRUb3BDb29yZHMoKS5zY2FsYXJBZGQocGF0aC5zdHJva2VXaWR0aCAvIDIpO1xuXG4gICAgcGF0aC5zdHJva2UgPSBuZXcgZmFicmljLlBhdHRlcm4oe1xuICAgICAgc291cmNlOiB0aGlzLnNvdXJjZSB8fCB0aGlzLmdldFBhdHRlcm5TcmNGdW5jdGlvbigpLFxuICAgICAgb2Zmc2V0WDogLXRvcExlZnQueCxcbiAgICAgIG9mZnNldFk6IC10b3BMZWZ0LnlcbiAgICB9KTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfVxufSk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBnZXRQb2ludGVyID0gZmFicmljLnV0aWwuZ2V0UG9pbnRlcixcbiAgICAgIGRlZ3JlZXNUb1JhZGlhbnMgPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zLFxuICAgICAgaXNUb3VjaEV2ZW50ID0gZmFicmljLnV0aWwuaXNUb3VjaEV2ZW50O1xuXG4gIC8qKlxuICAgKiBDYW52YXMgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5DYW52YXNcbiAgICogQGV4dGVuZHMgZmFicmljLlN0YXRpY0NhbnZhc1xuICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMSNjYW52YXN9XG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5DYW52YXMjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICpcbiAgICogQGZpcmVzIG9iamVjdDptb2RpZmllZCBhdCB0aGUgZW5kIG9mIGEgdHJhbnNmb3JtIG9yIGFueSBjaGFuZ2Ugd2hlbiBzdGF0ZWZ1bGwgaXMgdHJ1ZVxuICAgKiBAZmlyZXMgb2JqZWN0OnJvdGF0aW5nIHdoaWxlIGFuIG9iamVjdCBpcyBiZWluZyByb3RhdGVkIGZyb20gdGhlIGNvbnRyb2xcbiAgICogQGZpcmVzIG9iamVjdDpzY2FsaW5nIHdoaWxlIGFuIG9iamVjdCBpcyBiZWluZyBzY2FsZWQgYnkgY29udHJvbHNcbiAgICogQGZpcmVzIG9iamVjdDptb3Zpbmcgd2hpbGUgYW4gb2JqZWN0IGlzIGJlaW5nIGRyYWdnZWRcbiAgICogQGZpcmVzIG9iamVjdDpza2V3aW5nIHdoaWxlIGFuIG9iamVjdCBpcyBiZWluZyBza2V3ZWQgZnJvbSB0aGUgY29udHJvbHNcbiAgICpcbiAgICogQGZpcmVzIGJlZm9yZTp0cmFuc2Zvcm0gYmVmb3JlIGEgdHJhbnNmb3JtIGlzIGlzIHN0YXJ0ZWRcbiAgICogQGZpcmVzIGJlZm9yZTpzZWxlY3Rpb246Y2xlYXJlZFxuICAgKiBAZmlyZXMgc2VsZWN0aW9uOmNsZWFyZWRcbiAgICogQGZpcmVzIHNlbGVjdGlvbjp1cGRhdGVkXG4gICAqIEBmaXJlcyBzZWxlY3Rpb246Y3JlYXRlZFxuICAgKlxuICAgKiBAZmlyZXMgcGF0aDpjcmVhdGVkIGFmdGVyIGEgZHJhd2luZyBvcGVyYXRpb24gZW5kcyBhbmQgdGhlIHBhdGggaXMgYWRkZWRcbiAgICogQGZpcmVzIG1vdXNlOmRvd25cbiAgICogQGZpcmVzIG1vdXNlOm1vdmVcbiAgICogQGZpcmVzIG1vdXNlOnVwXG4gICAqIEBmaXJlcyBtb3VzZTpkb3duOmJlZm9yZSAgb24gbW91c2UgZG93biwgYmVmb3JlIHRoZSBpbm5lciBmYWJyaWMgbG9naWMgcnVuc1xuICAgKiBAZmlyZXMgbW91c2U6bW92ZTpiZWZvcmUgb24gbW91c2UgbW92ZSwgYmVmb3JlIHRoZSBpbm5lciBmYWJyaWMgbG9naWMgcnVuc1xuICAgKiBAZmlyZXMgbW91c2U6dXA6YmVmb3JlIG9uIG1vdXNlIHVwLCBiZWZvcmUgdGhlIGlubmVyIGZhYnJpYyBsb2dpYyBydW5zXG4gICAqIEBmaXJlcyBtb3VzZTpvdmVyXG4gICAqIEBmaXJlcyBtb3VzZTpvdXRcbiAgICogQGZpcmVzIG1vdXNlOmRibGNsaWNrIHdoZW5ldmVyIGEgbmF0aXZlIGRibCBjbGljayBldmVudCBmaXJlcyBvbiB0aGUgY2FudmFzLlxuICAgKlxuICAgKiBAZmlyZXMgZHJhZ292ZXJcbiAgICogQGZpcmVzIGRyYWdlbnRlclxuICAgKiBAZmlyZXMgZHJhZ2xlYXZlXG4gICAqIEBmaXJlcyBkcm9wOmJlZm9yZSBiZWZvcmUgZHJvcCBldmVudC4gc2FtZSBuYXRpdmUgZXZlbnQuIFRoaXMgaXMgYWRkZWQgdG8gaGFuZGxlIGVkZ2UgY2FzZXNcbiAgICogQGZpcmVzIGRyb3BcbiAgICogQGZpcmVzIGFmdGVyOnJlbmRlciBhdCB0aGUgZW5kIG9mIHRoZSByZW5kZXIgcHJvY2VzcywgcmVjZWl2ZXMgdGhlIGNvbnRleHQgaW4gdGhlIGNhbGxiYWNrXG4gICAqIEBmaXJlcyBiZWZvcmU6cmVuZGVyIGF0IHN0YXJ0IHRoZSByZW5kZXIgcHJvY2VzcywgcmVjZWl2ZXMgdGhlIGNvbnRleHQgaW4gdGhlIGNhbGxiYWNrXG4gICAqXG4gICAqL1xuICBmYWJyaWMuQ2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLlN0YXRpY0NhbnZhcywgLyoqIEBsZW5kcyBmYWJyaWMuQ2FudmFzLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnQgfCBTdHJpbmd9IGVsICZsdDtjYW52YXM+IGVsZW1lbnQgdG8gaW5pdGlhbGl6ZSBpbnN0YW5jZSBvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG4gICAgICB0aGlzLnJlbmRlckFuZFJlc2V0Qm91bmQgPSB0aGlzLnJlbmRlckFuZFJlc2V0LmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnJlcXVlc3RSZW5kZXJBbGxCb3VuZCA9IHRoaXMucmVxdWVzdFJlbmRlckFsbC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5faW5pdFN0YXRpYyhlbCwgb3B0aW9ucyk7XG4gICAgICB0aGlzLl9pbml0SW50ZXJhY3RpdmUoKTtcbiAgICAgIHRoaXMuX2NyZWF0ZUNhY2hlQ2FudmFzKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgb2JqZWN0cyBjYW4gYmUgdHJhbnNmb3JtZWQgYnkgb25lIHNpZGUgKHVucHJvcG9ydGlvbmFsbHkpXG4gICAgICogd2hlbiBkcmFnZ2VkIG9uIHRoZSBjb3JuZXJzIHRoYXQgbm9ybWFsbHkgd291bGQgbm90IGRvIHRoYXQuXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICogQHNpbmNlIGZhYnJpYyA0LjAgLy8gY2hhbmdlZCBuYW1lIGFuZCBkZWZhdWx0IHZhbHVlXG4gICAgICovXG4gICAgdW5pZm9ybVNjYWxpbmc6ICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGljaCBrZXkgc3dpdGNoZXMgdW5pZm9ybSBzY2FsaW5nLlxuICAgICAqIHZhbHVlczogJ2FsdEtleScsICdzaGlmdEtleScsICdjdHJsS2V5Jy5cbiAgICAgKiBJZiBgbnVsbGAgb3IgJ25vbmUnIG9yIGFueSBvdGhlciBzdHJpbmcgdGhhdCBpcyBub3QgYSBtb2RpZmllciBrZXlcbiAgICAgKiBmZWF0dXJlIGlzIGRpc2FibGVkLlxuICAgICAqIHRvdGFsbHkgd3JvbmcgbmFtZWQuIHRoaXMgc291bmRzIGxpa2UgYHVuaWZvcm0gc2NhbGluZ2BcbiAgICAgKiBpZiBDYW52YXMudW5pZm9ybVNjYWxpbmcgaXMgdHJ1ZSwgcHJlc3NpbmcgdGhpcyB3aWxsIHNldCBpdCB0byBmYWxzZVxuICAgICAqIGFuZCB2aWNldmVyc2EuXG4gICAgICogQHNpbmNlIDEuNi4yXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB1bmlTY2FsZUtleTogICAgICAgICAgICdzaGlmdEtleScsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIG9iamVjdHMgdXNlIGNlbnRlciBwb2ludCBhcyB0aGUgb3JpZ2luIG9mIHNjYWxlIHRyYW5zZm9ybWF0aW9uLlxuICAgICAqIDxiPkJhY2t3YXJkcyBpbmNvbXBhdGliaWxpdHkgbm90ZTo8L2I+IFRoaXMgcHJvcGVydHkgcmVwbGFjZXMgXCJjZW50ZXJUcmFuc2Zvcm1cIiAoQm9vbGVhbikuXG4gICAgICogQHNpbmNlIDEuMy40XG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY2VudGVyZWRTY2FsaW5nOiAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIG9iamVjdHMgdXNlIGNlbnRlciBwb2ludCBhcyB0aGUgb3JpZ2luIG9mIHJvdGF0ZSB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHJlcGxhY2VzIFwiY2VudGVyVHJhbnNmb3JtXCIgKEJvb2xlYW4pLlxuICAgICAqIEBzaW5jZSAxLjMuNFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNlbnRlcmVkUm90YXRpb246ICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoaWNoIGtleSBlbmFibGUgY2VudGVyZWQgVHJhbnNmb3JtXG4gICAgICogdmFsdWVzOiAnYWx0S2V5JywgJ3NoaWZ0S2V5JywgJ2N0cmxLZXknLlxuICAgICAqIElmIGBudWxsYCBvciAnbm9uZScgb3IgYW55IG90aGVyIHN0cmluZyB0aGF0IGlzIG5vdCBhIG1vZGlmaWVyIGtleVxuICAgICAqIGZlYXR1cmUgaXMgZGlzYWJsZWQgZmVhdHVyZSBkaXNhYmxlZC5cbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNlbnRlcmVkS2V5OiAgICAgICAgICAgJ2FsdEtleScsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hpY2gga2V5IGVuYWJsZSBhbHRlcm5hdGUgYWN0aW9uIG9uIGNvcm5lclxuICAgICAqIHZhbHVlczogJ2FsdEtleScsICdzaGlmdEtleScsICdjdHJsS2V5Jy5cbiAgICAgKiBJZiBgbnVsbGAgb3IgJ25vbmUnIG9yIGFueSBvdGhlciBzdHJpbmcgdGhhdCBpcyBub3QgYSBtb2RpZmllciBrZXlcbiAgICAgKiBmZWF0dXJlIGlzIGRpc2FibGVkIGZlYXR1cmUgZGlzYWJsZWQuXG4gICAgICogQHNpbmNlIDEuNi4yXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBhbHRBY3Rpb25LZXk6ICAgICAgICAgICAnc2hpZnRLZXknLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgY2FudmFzIGlzIGludGVyYWN0aXZlLiBUaGlzIHByb3BlcnR5IHNob3VsZCBub3QgYmUgY2hhbmdlZC5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBpbnRlcmFjdGl2ZTogICAgICAgICAgICB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgZ3JvdXAgc2VsZWN0aW9uIHNob3VsZCBiZSBlbmFibGVkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0aW9uOiAgICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGljaCBrZXkgb3Iga2V5cyBlbmFibGUgbXVsdGlwbGUgY2xpY2sgc2VsZWN0aW9uXG4gICAgICogUGFzcyB2YWx1ZSBhcyBhIHN0cmluZyBvciBhcnJheSBvZiBzdHJpbmdzXG4gICAgICogdmFsdWVzOiAnYWx0S2V5JywgJ3NoaWZ0S2V5JywgJ2N0cmxLZXknLlxuICAgICAqIElmIGBudWxsYCBvciBlbXB0eSBvciBjb250YWluaW5nIGFueSBvdGhlciBzdHJpbmcgdGhhdCBpcyBub3QgYSBtb2RpZmllciBrZXlcbiAgICAgKiBmZWF0dXJlIGlzIGRpc2FibGVkLlxuICAgICAqIEBzaW5jZSAxLjYuMlxuICAgICAqIEB0eXBlIFN0cmluZ3xBcnJheVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0aW9uS2V5OiAgICAgICAgICAgJ3NoaWZ0S2V5JyxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGljaCBrZXkgZW5hYmxlIGFsdGVybmF0aXZlIHNlbGVjdGlvblxuICAgICAqIGluIGNhc2Ugb2YgdGFyZ2V0IG92ZXJsYXBwaW5nIHdpdGggYWN0aXZlIG9iamVjdFxuICAgICAqIHZhbHVlczogJ2FsdEtleScsICdzaGlmdEtleScsICdjdHJsS2V5Jy5cbiAgICAgKiBGb3IgYSBzZXJpZXMgb2YgcmVhc29uIHRoYXQgY29tZSBmcm9tIHRoZSBnZW5lcmFsIGV4cGVjdGF0aW9ucyBvbiBob3dcbiAgICAgKiB0aGluZ3Mgc2hvdWxkIHdvcmssIHRoaXMgZmVhdHVyZSB3b3JrcyBvbmx5IGZvciBwcmVzZXJ2ZU9iamVjdFN0YWNraW5nIHRydWUuXG4gICAgICogSWYgYG51bGxgIG9yICdub25lJyBvciBhbnkgb3RoZXIgc3RyaW5nIHRoYXQgaXMgbm90IGEgbW9kaWZpZXIga2V5XG4gICAgICogZmVhdHVyZSBpcyBkaXNhYmxlZC5cbiAgICAgKiBAc2luY2UgMS42LjVcbiAgICAgKiBAdHlwZSBudWxsfFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgYWx0U2VsZWN0aW9uS2V5OiAgICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIHNlbGVjdGlvblxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0aW9uQ29sb3I6ICAgICAgICAgJ3JnYmEoMTAwLCAxMDAsIDI1NSwgMC4zKScsIC8vIGJsdWVcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgZGFzaCBhcnJheSBwYXR0ZXJuXG4gICAgICogSWYgbm90IGVtcHR5IHRoZSBzZWxlY3Rpb24gYm9yZGVyIGlzIGRhc2hlZFxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICovXG4gICAgc2VsZWN0aW9uRGFzaEFycmF5OiAgICAgW10sXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiB0aGUgYm9yZGVyIG9mIHNlbGVjdGlvbiAodXN1YWxseSBzbGlnaHRseSBkYXJrZXIgdGhhbiBjb2xvciBvZiBzZWxlY3Rpb24gaXRzZWxmKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0aW9uQm9yZGVyQ29sb3I6ICAgJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG5cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiBhIGxpbmUgdXNlZCBpbiBvYmplY3QvZ3JvdXAgc2VsZWN0aW9uXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzZWxlY3Rpb25MaW5lV2lkdGg6ICAgICAxLFxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0IG9ubHkgc2hhcGVzIHRoYXQgYXJlIGZ1bGx5IGNvbnRhaW5lZCBpbiB0aGUgZHJhZ2dlZCBzZWxlY3Rpb24gcmVjdGFuZ2xlLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkZ1bGx5Q29udGFpbmVkOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY3Vyc29yIHZhbHVlIHVzZWQgd2hlbiBob3ZlcmluZyBvdmVyIGFuIG9iamVjdCBvbiBjYW52YXNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhvdmVyQ3Vyc29yOiAgICAgICAgICAgICdtb3ZlJyxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY3Vyc29yIHZhbHVlIHVzZWQgd2hlbiBtb3ZpbmcgYW4gb2JqZWN0IG9uIGNhbnZhc1xuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbW92ZUN1cnNvcjogICAgICAgICAgICAgJ21vdmUnLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjdXJzb3IgdmFsdWUgdXNlZCBmb3IgdGhlIGVudGlyZSBjYW52YXNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGRlZmF1bHRDdXJzb3I6ICAgICAgICAgICdkZWZhdWx0JyxcblxuICAgIC8qKlxuICAgICAqIEN1cnNvciB2YWx1ZSB1c2VkIGR1cmluZyBmcmVlIGRyYXdpbmdcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZyZWVEcmF3aW5nQ3Vyc29yOiAgICAgICdjcm9zc2hhaXInLFxuXG4gICAgLyoqXG4gICAgICogQ3Vyc29yIHZhbHVlIHVzZWQgZm9yIGRpc2FibGVkIGVsZW1lbnRzICggY29ybmVycyB3aXRoIGRpc2FibGVkIGFjdGlvbiApXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBub3RBbGxvd2VkQ3Vyc29yOiAgICAgICAgICdub3QtYWxsb3dlZCcsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IGVsZW1lbnQgY2xhc3MgdGhhdCdzIGdpdmVuIHRvIHdyYXBwZXIgKGRpdikgZWxlbWVudCBvZiBjYW52YXNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNvbnRhaW5lckNsYXNzOiAgICAgICAgICdjYW52YXMtY29udGFpbmVyJyxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgb2JqZWN0IGRldGVjdGlvbiBoYXBwZW5zIG9uIHBlci1waXhlbCBiYXNpcyByYXRoZXIgdGhhbiBvbiBwZXItYm91bmRpbmctYm94XG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGVyUGl4ZWxUYXJnZXRGaW5kOiAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgcGl4ZWxzIGFyb3VuZCB0YXJnZXQgcGl4ZWwgdG8gdG9sZXJhdGUgKGNvbnNpZGVyIGFjdGl2ZSkgZHVyaW5nIG9iamVjdCBkZXRlY3Rpb25cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRhcmdldEZpbmRUb2xlcmFuY2U6ICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIHRhcmdldCBkZXRlY3Rpb24gaXMgc2tpcHBlZC4gVGFyZ2V0IGRldGVjdGlvbiB3aWxsIHJldHVybiBhbHdheXMgdW5kZWZpbmVkLlxuICAgICAqIGNsaWNrIHNlbGVjdGlvbiB3b24ndCB3b3JrIGFueW1vcmUsIGV2ZW50cyB3aWxsIGZpcmUgd2l0aCBubyB0YXJnZXRzLlxuICAgICAqIGlmIHNvbWV0aGluZyBpcyBzZWxlY3RlZCBiZWZvcmUgc2V0dGluZyBpdCB0byB0cnVlLCBpdCB3aWxsIGJlIGRlc2VsZWN0ZWQgYXQgdGhlIGZpcnN0IGNsaWNrLlxuICAgICAqIGFyZWEgc2VsZWN0aW9uIHdpbGwgc3RpbGwgd29yay4gY2hlY2sgdGhlIGBzZWxlY3Rpb25gIHByb3BlcnR5IHRvby5cbiAgICAgKiBpZiB5b3UgZGVhY3RpdmF0ZSBib3RoLCB5b3Ugc2hvdWxkIGxvb2sgaW50byBzdGF0aWNDYW52YXMuXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2tpcFRhcmdldEZpbmQ6ICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIG1vdXNlIGV2ZW50cyBvbiBjYW52YXMgKG1vdXNlZG93bi9tb3VzZW1vdmUvbW91c2V1cCkgcmVzdWx0IGluIGZyZWUgZHJhd2luZy5cbiAgICAgKiBBZnRlciBtb3VzZWRvd24sIG1vdXNlbW92ZSBjcmVhdGVzIGEgc2hhcGUsXG4gICAgICogYW5kIHRoZW4gbW91c2V1cCBmaW5hbGl6ZXMgaXQgYW5kIGFkZHMgYW4gaW5zdGFuY2Ugb2YgYGZhYnJpYy5QYXRoYCBvbnRvIGNhbnZhcy5cbiAgICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtNCNmcmVlX2RyYXdpbmd9XG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaXNEcmF3aW5nTW9kZTogICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBvYmplY3RzIHNob3VsZCByZW1haW4gaW4gY3VycmVudCBzdGFjayBwb3NpdGlvbiB3aGVuIHNlbGVjdGVkLlxuICAgICAqIFdoZW4gZmFsc2Ugb2JqZWN0cyBhcmUgYnJvdWdodCB0byB0b3AgYW5kIHJlbmRlcmVkIGFzIHBhcnQgb2YgdGhlIHNlbGVjdGlvbiBncm91cFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHByZXNlcnZlT2JqZWN0U3RhY2tpbmc6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoZSBhbmdsZSB0aGF0IGFuIG9iamVjdCB3aWxsIGxvY2sgdG8gd2hpbGUgcm90YXRpbmcuXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQHNpbmNlIDEuNi43XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzbmFwQW5nbGU6IDAsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhlIGRpc3RhbmNlIGZyb20gdGhlIHNuYXBBbmdsZSB0aGUgcm90YXRpb24gd2lsbCBsb2NrIHRvIHRoZSBzbmFwQW5nbGUuXG4gICAgICogV2hlbiBgbnVsbGAsIHRoZSBzbmFwVGhyZXNob2xkIHdpbGwgZGVmYXVsdCB0byB0aGUgc25hcEFuZ2xlLlxuICAgICAqIEB0eXBlIG51bGx8TnVtYmVyXG4gICAgICogQHNpbmNlIDEuNi43XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzbmFwVGhyZXNob2xkOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSByaWdodCBjbGljayBvbiBjYW52YXMgY2FuIG91dHB1dCB0aGUgY29udGV4dCBtZW51IG9yIG5vdFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAc2luY2UgMS42LjVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0b3BDb250ZXh0TWVudTogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNhbnZhcyBjYW4gZmlyZSByaWdodCBjbGljayBldmVudHNcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQHNpbmNlIDEuNi41XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBmaXJlUmlnaHRDbGljazogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNhbnZhcyBjYW4gZmlyZSBtaWRkbGUgY2xpY2sgZXZlbnRzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBzaW5jZSAxLjcuOFxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZmlyZU1pZGRsZUNsaWNrOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEtlZXAgdHJhY2sgb2YgdGhlIHN1YlRhcmdldHMgZm9yIE1vdXNlIEV2ZW50c1xuICAgICAqIEB0eXBlIGZhYnJpYy5PYmplY3RbXVxuICAgICAqL1xuICAgIHRhcmdldHM6IFtdLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgb3B0aW9uIGlzIGVuYWJsZWQsIFBvaW50ZXJFdmVudCBpcyB1c2VkIGluc3RlYWQgb2YgTW91c2VFdmVudC5cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBlbmFibGVQb2ludGVyRXZlbnRzOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEtlZXAgdHJhY2sgb2YgdGhlIGhvdmVyZWQgdGFyZ2V0XG4gICAgICogQHR5cGUgZmFicmljLk9iamVjdFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hvdmVyZWRUYXJnZXQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBob2xkIHRoZSBsaXN0IG9mIG5lc3RlZCB0YXJnZXRzIGhvdmVyZWRcbiAgICAgKiBAdHlwZSBmYWJyaWMuT2JqZWN0W11cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9ob3ZlcmVkVGFyZ2V0czogW10sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0SW50ZXJhY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY3VycmVudFRyYW5zZm9ybSA9IG51bGw7XG4gICAgICB0aGlzLl9ncm91cFNlbGVjdG9yID0gbnVsbDtcbiAgICAgIHRoaXMuX2luaXRXcmFwcGVyRWxlbWVudCgpO1xuICAgICAgdGhpcy5fY3JlYXRlVXBwZXJDYW52YXMoKTtcbiAgICAgIHRoaXMuX2luaXRFdmVudExpc3RlbmVycygpO1xuXG4gICAgICB0aGlzLl9pbml0UmV0aW5hU2NhbGluZygpO1xuXG4gICAgICB0aGlzLmZyZWVEcmF3aW5nQnJ1c2ggPSBmYWJyaWMuUGVuY2lsQnJ1c2ggJiYgbmV3IGZhYnJpYy5QZW5jaWxCcnVzaCh0aGlzKTtcblxuICAgICAgdGhpcy5jYWxjT2Zmc2V0KCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERpdmlkZXMgb2JqZWN0cyBpbiB0d28gZ3JvdXBzLCBvbmUgdG8gcmVuZGVyIGltbWVkaWF0ZWx5XG4gICAgICogYW5kIG9uZSB0byByZW5kZXIgYXMgYWN0aXZlR3JvdXAuXG4gICAgICogQHJldHVybiB7QXJyYXl9IG9iamVjdHMgdG8gcmVuZGVyIGltbWVkaWF0ZWx5IGFuZCBwdXNoZXMgdGhlIG90aGVyIGluIHRoZSBhY3RpdmVHcm91cC5cbiAgICAgKi9cbiAgICBfY2hvb3NlT2JqZWN0c1RvUmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhY3RpdmVPYmplY3RzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCksXG4gICAgICAgICAgb2JqZWN0LCBvYmpzVG9SZW5kZXIsIGFjdGl2ZUdyb3VwT2JqZWN0cztcblxuICAgICAgaWYgKGFjdGl2ZU9iamVjdHMubGVuZ3RoID4gMCAmJiAhdGhpcy5wcmVzZXJ2ZU9iamVjdFN0YWNraW5nKSB7XG4gICAgICAgIG9ianNUb1JlbmRlciA9IFtdO1xuICAgICAgICBhY3RpdmVHcm91cE9iamVjdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBvYmplY3QgPSB0aGlzLl9vYmplY3RzW2ldO1xuICAgICAgICAgIGlmIChhY3RpdmVPYmplY3RzLmluZGV4T2Yob2JqZWN0KSA9PT0gLTEgKSB7XG4gICAgICAgICAgICBvYmpzVG9SZW5kZXIucHVzaChvYmplY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFjdGl2ZUdyb3VwT2JqZWN0cy5wdXNoKG9iamVjdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3RpdmVPYmplY3RzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmVPYmplY3QuX29iamVjdHMgPSBhY3RpdmVHcm91cE9iamVjdHM7XG4gICAgICAgIH1cbiAgICAgICAgb2Jqc1RvUmVuZGVyLnB1c2guYXBwbHkob2Jqc1RvUmVuZGVyLCBhY3RpdmVHcm91cE9iamVjdHMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9ianNUb1JlbmRlciA9IHRoaXMuX29iamVjdHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2Jqc1RvUmVuZGVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGJvdGggdGhlIHRvcCBjYW52YXMgYW5kIHRoZSBzZWNvbmRhcnkgY29udGFpbmVyIGNhbnZhcy5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZW5kZXJBbGw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRUb3BEaXJ0eSAmJiAhdGhpcy5fZ3JvdXBTZWxlY3RvciAmJiAhdGhpcy5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJDb250ZXh0KHRoaXMuY29udGV4dFRvcCk7XG4gICAgICAgIHRoaXMuY29udGV4dFRvcERpcnR5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5oYXNMb3N0Q29udGV4dCkge1xuICAgICAgICB0aGlzLnJlbmRlclRvcExheWVyKHRoaXMuY29udGV4dFRvcCk7XG4gICAgICAgIHRoaXMuaGFzTG9zdENvbnRleHQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBjYW52YXNUb0RyYXdPbiA9IHRoaXMuY29udGV4dENvbnRhaW5lcjtcbiAgICAgIHRoaXMucmVuZGVyQ2FudmFzKGNhbnZhc1RvRHJhd09uLCB0aGlzLl9jaG9vc2VPYmplY3RzVG9SZW5kZXIoKSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgcmVuZGVyVG9wTGF5ZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGlmICh0aGlzLmlzRHJhd2luZ01vZGUgJiYgdGhpcy5faXNDdXJyZW50bHlEcmF3aW5nKSB7XG4gICAgICAgIHRoaXMuZnJlZURyYXdpbmdCcnVzaCAmJiB0aGlzLmZyZWVEcmF3aW5nQnJ1c2guX3JlbmRlcigpO1xuICAgICAgICB0aGlzLmNvbnRleHRUb3BEaXJ0eSA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyB3ZSByZW5kZXIgdGhlIHRvcCBjb250ZXh0IC0gbGFzdCBvYmplY3RcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvbiAmJiB0aGlzLl9ncm91cFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuX2RyYXdTZWxlY3Rpb24oY3R4KTtcbiAgICAgICAgdGhpcy5jb250ZXh0VG9wRGlydHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIHJlbmRlciBvbmx5IHRoZSB0b3AgY2FudmFzLlxuICAgICAqIEFsc28gdXNlZCB0byByZW5kZXIgdGhlIGdyb3VwIHNlbGVjdGlvbiBib3guXG4gICAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICByZW5kZXJUb3A6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdHggPSB0aGlzLmNvbnRleHRUb3A7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dChjdHgpO1xuICAgICAgdGhpcy5yZW5kZXJUb3BMYXllcihjdHgpO1xuICAgICAgdGhpcy5maXJlKCdhZnRlcjpyZW5kZXInKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9ub3JtYWxpemVQb2ludGVyOiBmdW5jdGlvbiAob2JqZWN0LCBwb2ludGVyKSB7XG4gICAgICB2YXIgbSA9IG9iamVjdC5jYWxjVHJhbnNmb3JtTWF0cml4KCksXG4gICAgICAgICAgaW52ZXJ0ZWRNID0gZmFicmljLnV0aWwuaW52ZXJ0VHJhbnNmb3JtKG0pLFxuICAgICAgICAgIHZwdFBvaW50ZXIgPSB0aGlzLnJlc3RvcmVQb2ludGVyVnB0KHBvaW50ZXIpO1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50KHZwdFBvaW50ZXIsIGludmVydGVkTSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgaXMgdHJhbnNwYXJlbnQgYXQgYSBjZXJ0YWluIGxvY2F0aW9uXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSB0YXJnZXQgT2JqZWN0IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHggTGVmdCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHkgVG9wIGNvb3JkaW5hdGVcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzVGFyZ2V0VHJhbnNwYXJlbnQ6IGZ1bmN0aW9uICh0YXJnZXQsIHgsIHkpIHtcbiAgICAgIC8vIGluIGNhc2UgdGhlIHRhcmdldCBpcyB0aGUgYWN0aXZlT2JqZWN0LCB3ZSBjYW5ub3QgZXhlY3V0ZSB0aGlzIG9wdGltaXphdGlvblxuICAgICAgLy8gYmVjYXVzZSB3ZSBuZWVkIHRvIGRyYXcgY29udHJvbHMgdG9vLlxuICAgICAgaWYgKHRhcmdldC5zaG91bGRDYWNoZSgpICYmIHRhcmdldC5fY2FjaGVDYW52YXMgJiYgdGFyZ2V0ICE9PSB0aGlzLl9hY3RpdmVPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRQb2ludGVyID0gdGhpcy5fbm9ybWFsaXplUG9pbnRlcih0YXJnZXQsIHt4OiB4LCB5OiB5fSksXG4gICAgICAgICAgICB0YXJnZXRSZWxhdGl2ZVggPSBNYXRoLm1heCh0YXJnZXQuY2FjaGVUcmFuc2xhdGlvblggKyAobm9ybWFsaXplZFBvaW50ZXIueCAqIHRhcmdldC56b29tWCksIDApLFxuICAgICAgICAgICAgdGFyZ2V0UmVsYXRpdmVZID0gTWF0aC5tYXgodGFyZ2V0LmNhY2hlVHJhbnNsYXRpb25ZICsgKG5vcm1hbGl6ZWRQb2ludGVyLnkgKiB0YXJnZXQuem9vbVkpLCAwKTtcblxuICAgICAgICB2YXIgaXNUcmFuc3BhcmVudCA9IGZhYnJpYy51dGlsLmlzVHJhbnNwYXJlbnQoXG4gICAgICAgICAgdGFyZ2V0Ll9jYWNoZUNvbnRleHQsIE1hdGgucm91bmQodGFyZ2V0UmVsYXRpdmVYKSwgTWF0aC5yb3VuZCh0YXJnZXRSZWxhdGl2ZVkpLCB0aGlzLnRhcmdldEZpbmRUb2xlcmFuY2UpO1xuXG4gICAgICAgIHJldHVybiBpc1RyYW5zcGFyZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgY3R4ID0gdGhpcy5jb250ZXh0Q2FjaGUsXG4gICAgICAgICAgb3JpZ2luYWxDb2xvciA9IHRhcmdldC5zZWxlY3Rpb25CYWNrZ3JvdW5kQ29sb3IsIHYgPSB0aGlzLnZpZXdwb3J0VHJhbnNmb3JtO1xuXG4gICAgICB0YXJnZXQuc2VsZWN0aW9uQmFja2dyb3VuZENvbG9yID0gJyc7XG5cbiAgICAgIHRoaXMuY2xlYXJDb250ZXh0KGN0eCk7XG5cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuICAgICAgdGFyZ2V0LnJlbmRlcihjdHgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgdGFyZ2V0LnNlbGVjdGlvbkJhY2tncm91bmRDb2xvciA9IG9yaWdpbmFsQ29sb3I7XG5cbiAgICAgIHZhciBpc1RyYW5zcGFyZW50ID0gZmFicmljLnV0aWwuaXNUcmFuc3BhcmVudChcbiAgICAgICAgY3R4LCB4LCB5LCB0aGlzLnRhcmdldEZpbmRUb2xlcmFuY2UpO1xuXG4gICAgICByZXR1cm4gaXNUcmFuc3BhcmVudDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdGFrZXMgYW4gZXZlbnQgYW5kIGRldGVybWluZXMgaWYgc2VsZWN0aW9uIGtleSBoYXMgYmVlbiBwcmVzc2VkXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIF9pc1NlbGVjdGlvbktleVByZXNzZWQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBzZWxlY3Rpb25LZXlQcmVzc2VkID0gZmFsc2U7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc2VsZWN0aW9uS2V5KSkge1xuICAgICAgICBzZWxlY3Rpb25LZXlQcmVzc2VkID0gISF0aGlzLnNlbGVjdGlvbktleS5maW5kKGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gZVtrZXldID09PSB0cnVlOyB9KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzZWxlY3Rpb25LZXlQcmVzc2VkID0gZVt0aGlzLnNlbGVjdGlvbktleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZWxlY3Rpb25LZXlQcmVzc2VkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSB0YXJnZXRcbiAgICAgKi9cbiAgICBfc2hvdWxkQ2xlYXJTZWxlY3Rpb246IGZ1bmN0aW9uIChlLCB0YXJnZXQpIHtcbiAgICAgIHZhciBhY3RpdmVPYmplY3RzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCksXG4gICAgICAgICAgYWN0aXZlT2JqZWN0ID0gdGhpcy5fYWN0aXZlT2JqZWN0O1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICAhdGFyZ2V0XG4gICAgICAgIHx8XG4gICAgICAgICh0YXJnZXQgJiZcbiAgICAgICAgICBhY3RpdmVPYmplY3QgJiZcbiAgICAgICAgICBhY3RpdmVPYmplY3RzLmxlbmd0aCA+IDEgJiZcbiAgICAgICAgICBhY3RpdmVPYmplY3RzLmluZGV4T2YodGFyZ2V0KSA9PT0gLTEgJiZcbiAgICAgICAgICBhY3RpdmVPYmplY3QgIT09IHRhcmdldCAmJlxuICAgICAgICAgICF0aGlzLl9pc1NlbGVjdGlvbktleVByZXNzZWQoZSkpXG4gICAgICAgIHx8XG4gICAgICAgICh0YXJnZXQgJiYgIXRhcmdldC5ldmVudGVkKVxuICAgICAgICB8fFxuICAgICAgICAodGFyZ2V0ICYmXG4gICAgICAgICAgIXRhcmdldC5zZWxlY3RhYmxlICYmXG4gICAgICAgICAgYWN0aXZlT2JqZWN0ICYmXG4gICAgICAgICAgYWN0aXZlT2JqZWN0ICE9PSB0YXJnZXQpXG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjZW50ZXJlZFNjYWxpbmcgZnJvbSBvYmplY3QgY2FuJ3Qgb3ZlcnJpZGUgY2VudGVyZWRTY2FsaW5nIGZyb20gY2FudmFzLlxuICAgICAqIHRoaXMgc2hvdWxkIGJlIGZpeGVkLCBzaW5jZSBvYmplY3Qgc2V0dGluZyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgY2FudmFzLlxuICAgICAqIGFsc28gdGhpcyBzaG91bGQgYmUgc29tZXRoaW5nIHRoYXQgd2lsbCBiZSBtaWdyYXRlZCBpbiB0aGUgY29udHJvbCBwcm9wZXJ0aWVzLlxuICAgICAqIGFzIGFiaWxpdHkgdG8gZGVmaW5lIHRoZSBvcmlnaW4gb2YgdGhlIHRyYW5zZm9ybWF0aW9uIHRoYXQgdGhlIGNvbnRyb2wgcHJvdmlkZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gdGFyZ2V0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvblxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYWx0S2V5XG4gICAgICovXG4gICAgX3Nob3VsZENlbnRlclRyYW5zZm9ybTogZnVuY3Rpb24gKHRhcmdldCwgYWN0aW9uLCBhbHRLZXkpIHtcbiAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNlbnRlclRyYW5zZm9ybTtcblxuICAgICAgaWYgKGFjdGlvbiA9PT0gJ3NjYWxlJyB8fCBhY3Rpb24gPT09ICdzY2FsZVgnIHx8IGFjdGlvbiA9PT0gJ3NjYWxlWScgfHwgYWN0aW9uID09PSAncmVzaXppbmcnKSB7XG4gICAgICAgIGNlbnRlclRyYW5zZm9ybSA9IHRoaXMuY2VudGVyZWRTY2FsaW5nIHx8IHRhcmdldC5jZW50ZXJlZFNjYWxpbmc7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhY3Rpb24gPT09ICdyb3RhdGUnKSB7XG4gICAgICAgIGNlbnRlclRyYW5zZm9ybSA9IHRoaXMuY2VudGVyZWRSb3RhdGlvbiB8fCB0YXJnZXQuY2VudGVyZWRSb3RhdGlvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNlbnRlclRyYW5zZm9ybSA/ICFhbHRLZXkgOiBhbHRLZXk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHNob3VsZCBkaXNhcHBlYXIgYmVmb3JlIHJlbGVhc2UgNC4wXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0T3JpZ2luRnJvbUNvcm5lcjogZnVuY3Rpb24odGFyZ2V0LCBjb3JuZXIpIHtcbiAgICAgIHZhciBvcmlnaW4gPSB7XG4gICAgICAgIHg6IHRhcmdldC5vcmlnaW5YLFxuICAgICAgICB5OiB0YXJnZXQub3JpZ2luWVxuICAgICAgfTtcblxuICAgICAgaWYgKGNvcm5lciA9PT0gJ21sJyB8fCBjb3JuZXIgPT09ICd0bCcgfHwgY29ybmVyID09PSAnYmwnKSB7XG4gICAgICAgIG9yaWdpbi54ID0gJ3JpZ2h0JztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNvcm5lciA9PT0gJ21yJyB8fCBjb3JuZXIgPT09ICd0cicgfHwgY29ybmVyID09PSAnYnInKSB7XG4gICAgICAgIG9yaWdpbi54ID0gJ2xlZnQnO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29ybmVyID09PSAndGwnIHx8IGNvcm5lciA9PT0gJ210JyB8fCBjb3JuZXIgPT09ICd0cicpIHtcbiAgICAgICAgb3JpZ2luLnkgPSAnYm90dG9tJztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNvcm5lciA9PT0gJ2JsJyB8fCBjb3JuZXIgPT09ICdtYicgfHwgY29ybmVyID09PSAnYnInKSB7XG4gICAgICAgIG9yaWdpbi55ID0gJ3RvcCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3JpZ2luO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYWxyZWFkeVNlbGVjdGVkIHRydWUgaWYgdGFyZ2V0IGlzIGFscmVhZHkgc2VsZWN0ZWRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29ybmVyIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29ybmVyIG1sLCBtciwgdGwgLi4uXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IFt0YXJnZXRdIGluc2VydGVkIGJhY2sgdG8gaGVscCBvdmVycmlkaW5nLiBVbnVzZWRcbiAgICAgKi9cbiAgICBfZ2V0QWN0aW9uRnJvbUNvcm5lcjogZnVuY3Rpb24oYWxyZWFkeVNlbGVjdGVkLCBjb3JuZXIsIGUsIHRhcmdldCkge1xuICAgICAgaWYgKCFjb3JuZXIgfHwgIWFscmVhZHlTZWxlY3RlZCkge1xuICAgICAgICByZXR1cm4gJ2RyYWcnO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRyb2wgPSB0YXJnZXQuY29udHJvbHNbY29ybmVyXTtcbiAgICAgIHJldHVybiBjb250cm9sLmdldEFjdGlvbk5hbWUoZSwgY29udHJvbCwgdGFyZ2V0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gdGFyZ2V0XG4gICAgICovXG4gICAgX3NldHVwQ3VycmVudFRyYW5zZm9ybTogZnVuY3Rpb24gKGUsIHRhcmdldCwgYWxyZWFkeVNlbGVjdGVkKSB7XG4gICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpLCBjb3JuZXIgPSB0YXJnZXQuX19jb3JuZXIsXG4gICAgICAgICAgY29udHJvbCA9IHRhcmdldC5jb250cm9sc1tjb3JuZXJdLFxuICAgICAgICAgIGFjdGlvbkhhbmRsZXIgPSAoYWxyZWFkeVNlbGVjdGVkICYmIGNvcm5lcikgP1xuICAgICAgICAgICAgY29udHJvbC5nZXRBY3Rpb25IYW5kbGVyKGUsIHRhcmdldCwgY29udHJvbCkgOiBmYWJyaWMuY29udHJvbHNVdGlscy5kcmFnSGFuZGxlcixcbiAgICAgICAgICBhY3Rpb24gPSB0aGlzLl9nZXRBY3Rpb25Gcm9tQ29ybmVyKGFscmVhZHlTZWxlY3RlZCwgY29ybmVyLCBlLCB0YXJnZXQpLFxuICAgICAgICAgIG9yaWdpbiA9IHRoaXMuX2dldE9yaWdpbkZyb21Db3JuZXIodGFyZ2V0LCBjb3JuZXIpLFxuICAgICAgICAgIGFsdEtleSA9IGVbdGhpcy5jZW50ZXJlZEtleV0sXG4gICAgICAgICAgdHJhbnNmb3JtID0ge1xuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGFjdGlvbkhhbmRsZXI6IGFjdGlvbkhhbmRsZXIsXG4gICAgICAgICAgICBjb3JuZXI6IGNvcm5lcixcbiAgICAgICAgICAgIHNjYWxlWDogdGFyZ2V0LnNjYWxlWCxcbiAgICAgICAgICAgIHNjYWxlWTogdGFyZ2V0LnNjYWxlWSxcbiAgICAgICAgICAgIHNrZXdYOiB0YXJnZXQuc2tld1gsXG4gICAgICAgICAgICBza2V3WTogdGFyZ2V0LnNrZXdZLFxuICAgICAgICAgICAgLy8gdXNlZCBieSB0cmFuc2F0aW9uXG4gICAgICAgICAgICBvZmZzZXRYOiBwb2ludGVyLnggLSB0YXJnZXQubGVmdCxcbiAgICAgICAgICAgIG9mZnNldFk6IHBvaW50ZXIueSAtIHRhcmdldC50b3AsXG4gICAgICAgICAgICBvcmlnaW5YOiBvcmlnaW4ueCxcbiAgICAgICAgICAgIG9yaWdpblk6IG9yaWdpbi55LFxuICAgICAgICAgICAgZXg6IHBvaW50ZXIueCxcbiAgICAgICAgICAgIGV5OiBwb2ludGVyLnksXG4gICAgICAgICAgICBsYXN0WDogcG9pbnRlci54LFxuICAgICAgICAgICAgbGFzdFk6IHBvaW50ZXIueSxcbiAgICAgICAgICAgIC8vIHVuc3VyZSB0aGV5IGFyZSB1c2VmdWwgYW55bW9yZS5cbiAgICAgICAgICAgIC8vIGxlZnQ6IHRhcmdldC5sZWZ0LFxuICAgICAgICAgICAgLy8gdG9wOiB0YXJnZXQudG9wLFxuICAgICAgICAgICAgdGhldGE6IGRlZ3JlZXNUb1JhZGlhbnModGFyZ2V0LmFuZ2xlKSxcbiAgICAgICAgICAgIC8vIGVuZCBvZiB1bnN1cmVcbiAgICAgICAgICAgIHdpZHRoOiB0YXJnZXQud2lkdGggKiB0YXJnZXQuc2NhbGVYLFxuICAgICAgICAgICAgc2hpZnRLZXk6IGUuc2hpZnRLZXksXG4gICAgICAgICAgICBhbHRLZXk6IGFsdEtleSxcbiAgICAgICAgICAgIG9yaWdpbmFsOiBmYWJyaWMudXRpbC5zYXZlT2JqZWN0VHJhbnNmb3JtKHRhcmdldCksXG4gICAgICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMuX3Nob3VsZENlbnRlclRyYW5zZm9ybSh0YXJnZXQsIGFjdGlvbiwgYWx0S2V5KSkge1xuICAgICAgICB0cmFuc2Zvcm0ub3JpZ2luWCA9ICdjZW50ZXInO1xuICAgICAgICB0cmFuc2Zvcm0ub3JpZ2luWSA9ICdjZW50ZXInO1xuICAgICAgfVxuICAgICAgdHJhbnNmb3JtLm9yaWdpbmFsLm9yaWdpblggPSBvcmlnaW4ueDtcbiAgICAgIHRyYW5zZm9ybS5vcmlnaW5hbC5vcmlnaW5ZID0gb3JpZ2luLnk7XG4gICAgICB0aGlzLl9jdXJyZW50VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgdGhpcy5fYmVmb3JlVHJhbnNmb3JtKGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGN1cnNvciB0eXBlIG9mIHRoZSBjYW52YXMgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSBDdXJzb3IgdHlwZSBvZiB0aGUgY2FudmFzIGVsZW1lbnQuXG4gICAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXVpLyNjdXJzb3JcbiAgICAgKi9cbiAgICBzZXRDdXJzb3I6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgdGhpcy51cHBlckNhbnZhc0VsLnN0eWxlLmN1cnNvciA9IHZhbHVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggdG8gZHJhdyB0aGUgc2VsZWN0aW9uIG9uXG4gICAgICovXG4gICAgX2RyYXdTZWxlY3Rpb246IGZ1bmN0aW9uIChjdHgpIHtcbiAgICAgIHZhciBzZWxlY3RvciA9IHRoaXMuX2dyb3VwU2VsZWN0b3IsXG4gICAgICAgICAgdmlld3BvcnRTdGFydCA9IG5ldyBmYWJyaWMuUG9pbnQoc2VsZWN0b3IuZXgsIHNlbGVjdG9yLmV5KSxcbiAgICAgICAgICBzdGFydCA9IGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50KHZpZXdwb3J0U3RhcnQsIHRoaXMudmlld3BvcnRUcmFuc2Zvcm0pLFxuICAgICAgICAgIHZpZXdwb3J0RXh0ZW50ID0gbmV3IGZhYnJpYy5Qb2ludChzZWxlY3Rvci5leCArIHNlbGVjdG9yLmxlZnQsIHNlbGVjdG9yLmV5ICsgc2VsZWN0b3IudG9wKSxcbiAgICAgICAgICBleHRlbnQgPSBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludCh2aWV3cG9ydEV4dGVudCwgdGhpcy52aWV3cG9ydFRyYW5zZm9ybSksXG4gICAgICAgICAgbWluWCA9IE1hdGgubWluKHN0YXJ0LngsIGV4dGVudC54KSxcbiAgICAgICAgICBtaW5ZID0gTWF0aC5taW4oc3RhcnQueSwgZXh0ZW50LnkpLFxuICAgICAgICAgIG1heFggPSBNYXRoLm1heChzdGFydC54LCBleHRlbnQueCksXG4gICAgICAgICAgbWF4WSA9IE1hdGgubWF4KHN0YXJ0LnksIGV4dGVudC55KSxcbiAgICAgICAgICBzdHJva2VPZmZzZXQgPSB0aGlzLnNlbGVjdGlvbkxpbmVXaWR0aCAvIDI7XG5cbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvbkNvbG9yKSB7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnNlbGVjdGlvbkNvbG9yO1xuICAgICAgICBjdHguZmlsbFJlY3QobWluWCwgbWluWSwgbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbkxpbmVXaWR0aCB8fCAhdGhpcy5zZWxlY3Rpb25Cb3JkZXJDb2xvcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHgubGluZVdpZHRoID0gdGhpcy5zZWxlY3Rpb25MaW5lV2lkdGg7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnNlbGVjdGlvbkJvcmRlckNvbG9yO1xuXG4gICAgICBtaW5YICs9IHN0cm9rZU9mZnNldDtcbiAgICAgIG1pblkgKz0gc3Ryb2tlT2Zmc2V0O1xuICAgICAgbWF4WCAtPSBzdHJva2VPZmZzZXQ7XG4gICAgICBtYXhZIC09IHN0cm9rZU9mZnNldDtcbiAgICAgIC8vIHNlbGVjdGlvbiBib3JkZXJcbiAgICAgIGZhYnJpYy5PYmplY3QucHJvdG90eXBlLl9zZXRMaW5lRGFzaC5jYWxsKHRoaXMsIGN0eCwgdGhpcy5zZWxlY3Rpb25EYXNoQXJyYXkpO1xuICAgICAgY3R4LnN0cm9rZVJlY3QobWluWCwgbWluWSwgbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRoYXQgZGV0ZXJtaW5lcyB3aGF0IG9iamVjdCB3ZSBhcmUgY2xpY2tpbmcgb25cbiAgICAgKiB0aGUgc2tpcEdyb3VwIHBhcmFtZXRlciBpcyBmb3IgaW50ZXJuYWwgdXNlLCBpcyBuZWVkZWQgZm9yIHNoaWZ0K2NsaWNrIGFjdGlvblxuICAgICAqIDExLzA5LzIwMTggVE9ETzogd291bGQgYmUgY29vbCBpZiBmaW5kVGFyZ2V0IGNvdWxkIGRpc2Nlcm4gYmV0d2VlbiBiZWluZyBhIGZ1bGwgdGFyZ2V0XG4gICAgICogb3IgdGhlIG91dHNpZGUgcGFydCBvZiB0aGUgY29ybmVyLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgbW91c2UgZXZlbnRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNraXBHcm91cCB3aGVuIHRydWUsIGFjdGl2ZUdyb3VwIGlzIHNraXBwZWQgYW5kIG9ubHkgb2JqZWN0cyBhcmUgdHJhdmVyc2VkIHRocm91Z2hcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGUgdGFyZ2V0IGZvdW5kXG4gICAgICovXG4gICAgZmluZFRhcmdldDogZnVuY3Rpb24gKGUsIHNraXBHcm91cCkge1xuICAgICAgaWYgKHRoaXMuc2tpcFRhcmdldEZpbmQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWdub3JlWm9vbSA9IHRydWUsXG4gICAgICAgICAgcG9pbnRlciA9IHRoaXMuZ2V0UG9pbnRlcihlLCBpZ25vcmVab29tKSxcbiAgICAgICAgICBhY3RpdmVPYmplY3QgPSB0aGlzLl9hY3RpdmVPYmplY3QsXG4gICAgICAgICAgYU9iamVjdHMgPSB0aGlzLmdldEFjdGl2ZU9iamVjdHMoKSxcbiAgICAgICAgICBhY3RpdmVUYXJnZXQsIGFjdGl2ZVRhcmdldFN1YnMsXG4gICAgICAgICAgaXNUb3VjaCA9IGlzVG91Y2hFdmVudChlKSxcbiAgICAgICAgICBzaG91bGRMb29rRm9yQWN0aXZlID0gKGFPYmplY3RzLmxlbmd0aCA+IDEgJiYgIXNraXBHcm91cCkgfHwgYU9iamVjdHMubGVuZ3RoID09PSAxO1xuXG4gICAgICAvLyBmaXJzdCBjaGVjayBjdXJyZW50IGdyb3VwIChpZiBvbmUgZXhpc3RzKVxuICAgICAgLy8gYWN0aXZlIGdyb3VwIGRvZXMgbm90IGNoZWNrIHN1YiB0YXJnZXRzIGxpa2Ugbm9ybWFsIGdyb3Vwcy5cbiAgICAgIC8vIGlmIGFjdGl2ZSBncm91cCBqdXN0IGV4aXRzLlxuICAgICAgdGhpcy50YXJnZXRzID0gW107XG5cbiAgICAgIC8vIGlmIHdlIGhpdCB0aGUgY29ybmVyIG9mIGFuIGFjdGl2ZU9iamVjdCwgbGV0J3MgcmV0dXJuIHRoYXQuXG4gICAgICBpZiAoc2hvdWxkTG9va0ZvckFjdGl2ZSAmJiBhY3RpdmVPYmplY3QuX2ZpbmRUYXJnZXRDb3JuZXIocG9pbnRlciwgaXNUb3VjaCkpIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZU9iamVjdDtcbiAgICAgIH1cbiAgICAgIGlmIChhT2JqZWN0cy5sZW5ndGggPiAxICYmICFza2lwR3JvdXAgJiYgYWN0aXZlT2JqZWN0ID09PSB0aGlzLl9zZWFyY2hQb3NzaWJsZVRhcmdldHMoW2FjdGl2ZU9iamVjdF0sIHBvaW50ZXIpKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVPYmplY3Q7XG4gICAgICB9XG4gICAgICBpZiAoYU9iamVjdHMubGVuZ3RoID09PSAxICYmXG4gICAgICAgIGFjdGl2ZU9iamVjdCA9PT0gdGhpcy5fc2VhcmNoUG9zc2libGVUYXJnZXRzKFthY3RpdmVPYmplY3RdLCBwb2ludGVyKSkge1xuICAgICAgICBpZiAoIXRoaXMucHJlc2VydmVPYmplY3RTdGFja2luZykge1xuICAgICAgICAgIHJldHVybiBhY3RpdmVPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgYWN0aXZlVGFyZ2V0ID0gYWN0aXZlT2JqZWN0O1xuICAgICAgICAgIGFjdGl2ZVRhcmdldFN1YnMgPSB0aGlzLnRhcmdldHM7XG4gICAgICAgICAgdGhpcy50YXJnZXRzID0gW107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl9zZWFyY2hQb3NzaWJsZVRhcmdldHModGhpcy5fb2JqZWN0cywgcG9pbnRlcik7XG4gICAgICBpZiAoZVt0aGlzLmFsdFNlbGVjdGlvbktleV0gJiYgdGFyZ2V0ICYmIGFjdGl2ZVRhcmdldCAmJiB0YXJnZXQgIT09IGFjdGl2ZVRhcmdldCkge1xuICAgICAgICB0YXJnZXQgPSBhY3RpdmVUYXJnZXQ7XG4gICAgICAgIHRoaXMudGFyZ2V0cyA9IGFjdGl2ZVRhcmdldFN1YnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgcG9pbnQgaXMgaW5zaWRlIHRoZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwb2ludGVyXSB4LHkgb2JqZWN0IG9mIHBvaW50IGNvb3JkaW5hdGVzIHdlIHdhbnQgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmogT2JqZWN0IHRvIHRlc3QgYWdhaW5zdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbZ2xvYmFsUG9pbnRlcl0geCx5IG9iamVjdCBvZiBwb2ludCBjb29yZGluYXRlcyByZWxhdGl2ZSB0byBjYW52YXMgdXNlZCB0byBzZWFyY2ggcGVyIHBpeGVsIHRhcmdldC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHBvaW50IGlzIGNvbnRhaW5lZCB3aXRoaW4gYW4gYXJlYSBvZiBnaXZlbiBvYmplY3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jaGVja1RhcmdldDogZnVuY3Rpb24ocG9pbnRlciwgb2JqLCBnbG9iYWxQb2ludGVyKSB7XG4gICAgICBpZiAob2JqICYmXG4gICAgICAgICAgb2JqLnZpc2libGUgJiZcbiAgICAgICAgICBvYmouZXZlbnRlZCAmJlxuICAgICAgICAgIC8vIGh0dHA6Ly93d3cuZ2VvZy51YmMuY2EvY291cnNlcy9rbGluay9naXMubm90ZXMvbmNnaWEvdTMyLmh0bWxcbiAgICAgICAgICAvLyBodHRwOi8vaWRhdi51Y2RhdmlzLmVkdS9+b2tyZXlsb3MvVEFzaGlwL1NwcmluZzIwMDAvUG9pbnRJblBvbHlnb24uaHRtbFxuICAgICAgICAgIG9iai5jb250YWluc1BvaW50KHBvaW50ZXIpXG4gICAgICApIHtcbiAgICAgICAgaWYgKCh0aGlzLnBlclBpeGVsVGFyZ2V0RmluZCB8fCBvYmoucGVyUGl4ZWxUYXJnZXRGaW5kKSAmJiAhb2JqLmlzRWRpdGluZykge1xuICAgICAgICAgIHZhciBpc1RyYW5zcGFyZW50ID0gdGhpcy5pc1RhcmdldFRyYW5zcGFyZW50KG9iaiwgZ2xvYmFsUG9pbnRlci54LCBnbG9iYWxQb2ludGVyLnkpO1xuICAgICAgICAgIGlmICghaXNUcmFuc3BhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHVzZWQgdG8gc2VhcmNoIGluc2lkZSBvYmplY3RzIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHBvaW50ZXIgaW4gYm91bmRpbmcgYm94IG9yIHRoYXQgY29udGFpbnMgcG9pbnRlck9uQ2FudmFzIHdoZW4gcGFpbnRlZFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtvYmplY3RzXSBvYmplY3RzIGFycmF5IHRvIGxvb2sgaW50b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcG9pbnRlcl0geCx5IG9iamVjdCBvZiBwb2ludCBjb29yZGluYXRlcyB3ZSB3YW50IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCB0aGF0IGNvbnRhaW5zIHBvaW50ZXJcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZWFyY2hQb3NzaWJsZVRhcmdldHM6IGZ1bmN0aW9uKG9iamVjdHMsIHBvaW50ZXIpIHtcbiAgICAgIC8vIENhY2hlIGFsbCB0YXJnZXRzIHdoZXJlIHRoZWlyIGJvdW5kaW5nIGJveCBjb250YWlucyBwb2ludC5cbiAgICAgIHZhciB0YXJnZXQsIGkgPSBvYmplY3RzLmxlbmd0aCwgc3ViVGFyZ2V0O1xuICAgICAgLy8gRG8gbm90IGNoZWNrIGZvciBjdXJyZW50bHkgZ3JvdXBlZCBvYmplY3RzLCBzaW5jZSB3ZSBjaGVjayB0aGUgcGFyZW50IGdyb3VwIGl0c2VsZi5cbiAgICAgIC8vIHVudGlsIHdlIGNhbGwgdGhpcyBmdW5jdGlvbiBzcGVjaWZpY2FsbHkgdG8gc2VhcmNoIGluc2lkZSB0aGUgYWN0aXZlR3JvdXBcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIG9ialRvQ2hlY2sgPSBvYmplY3RzW2ldO1xuICAgICAgICB2YXIgcG9pbnRlclRvVXNlID0gb2JqVG9DaGVjay5ncm91cCA/XG4gICAgICAgICAgdGhpcy5fbm9ybWFsaXplUG9pbnRlcihvYmpUb0NoZWNrLmdyb3VwLCBwb2ludGVyKSA6IHBvaW50ZXI7XG4gICAgICAgIGlmICh0aGlzLl9jaGVja1RhcmdldChwb2ludGVyVG9Vc2UsIG9ialRvQ2hlY2ssIHBvaW50ZXIpKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gb2JqZWN0c1tpXTtcbiAgICAgICAgICBpZiAodGFyZ2V0LnN1YlRhcmdldENoZWNrICYmIHRhcmdldCBpbnN0YW5jZW9mIGZhYnJpYy5Hcm91cCkge1xuICAgICAgICAgICAgc3ViVGFyZ2V0ID0gdGhpcy5fc2VhcmNoUG9zc2libGVUYXJnZXRzKHRhcmdldC5fb2JqZWN0cywgcG9pbnRlcik7XG4gICAgICAgICAgICBzdWJUYXJnZXQgJiYgdGhpcy50YXJnZXRzLnB1c2goc3ViVGFyZ2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcG9pbnRlciBjb29yZGluYXRlcyB3aXRob3V0IHRoZSBlZmZlY3Qgb2YgdGhlIHZpZXdwb3J0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50ZXIgd2l0aCBcInhcIiBhbmQgXCJ5XCIgbnVtYmVyIHZhbHVlc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHdpdGggXCJ4XCIgYW5kIFwieVwiIG51bWJlciB2YWx1ZXNcbiAgICAgKi9cbiAgICByZXN0b3JlUG9pbnRlclZwdDogZnVuY3Rpb24ocG9pbnRlcikge1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50KFxuICAgICAgICBwb2ludGVyLFxuICAgICAgICBmYWJyaWMudXRpbC5pbnZlcnRUcmFuc2Zvcm0odGhpcy52aWV3cG9ydFRyYW5zZm9ybSlcbiAgICAgICk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcG9pbnRlciBjb29yZGluYXRlcyByZWxhdGl2ZSB0byBjYW52YXMuXG4gICAgICogQ2FuIHJldHVybiBjb29yZGluYXRlcyB3aXRoIG9yIHdpdGhvdXQgdmlld3BvcnRUcmFuc2Zvcm0uXG4gICAgICogaWdub3JlWm9vbSBmYWxzZSBnaXZlcyBiYWNrIGNvb3JkaW5hdGVzIHRoYXQgcmVwcmVzZW50XG4gICAgICogdGhlIHBvaW50IGNsaWNrZWQgb24gY2FudmFzIGVsZW1lbnQuXG4gICAgICogaWdub3JlWm9vbSB0cnVlIGdpdmVzIGJhY2sgY29vcmRpbmF0ZXMgYWZ0ZXIgYmVpbmcgcHJvY2Vzc2VkXG4gICAgICogYnkgdGhlIHZpZXdwb3J0VHJhbnNmb3JtICggc29ydCBvZiBjb29yZGluYXRlcyBvZiB3aGF0IGlzIGRpc3BsYXllZFxuICAgICAqIG9uIHRoZSBjYW52YXMgd2hlcmUgeW91IGFyZSBjbGlja2luZy5cbiAgICAgKiBpZ25vcmVab29tIHRydWUgPSBIVE1MRWxlbWVudCBjb29yZGluYXRlcyByZWxhdGl2ZSB0byB0b3AsbGVmdFxuICAgICAqIGlnbm9yZVpvb20gZmFsc2UsIGRlZmF1bHQgPSBmYWJyaWMgc3BhY2UgY29vcmRpbmF0ZXMsIHRoZSBzYW1lIHVzZWQgZm9yIHNoYXBlIHBvc2l0aW9uXG4gICAgICogVG8gaW50ZXJhY3Qgd2l0aCB5b3VyIHNoYXBlcyB0b3AgYW5kIGxlZnQgeW91IHdhbnQgdG8gdXNlIGlnbm9yZVpvb20gdHJ1ZVxuICAgICAqIG1vc3Qgb2YgdGhlIHRpbWUsIHdoaWxlIGlnbm9yZVpvb20gZmFsc2Ugd2lsbCBnaXZlIHlvdSBjb29yZGluYXRlc1xuICAgICAqIGNvbXBhdGlibGUgd2l0aCB0aGUgb2JqZWN0Lm9Db29yZHMgc3lzdGVtLlxuICAgICAqIG9mIHRoZSB0aW1lLlxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlnbm9yZVpvb21cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIFwieFwiIGFuZCBcInlcIiBudW1iZXIgdmFsdWVzXG4gICAgICovXG4gICAgZ2V0UG9pbnRlcjogZnVuY3Rpb24gKGUsIGlnbm9yZVpvb20pIHtcbiAgICAgIC8vIHJldHVybiBjYWNoZWQgdmFsdWVzIGlmIHdlIGFyZSBpbiB0aGUgZXZlbnQgcHJvY2Vzc2luZyBjaGFpblxuICAgICAgaWYgKHRoaXMuX2Fic29sdXRlUG9pbnRlciAmJiAhaWdub3JlWm9vbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWJzb2x1dGVQb2ludGVyO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3BvaW50ZXIgJiYgaWdub3JlWm9vbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9pbnRlcjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvaW50ZXIgPSBnZXRQb2ludGVyKGUpLFxuICAgICAgICAgIHVwcGVyQ2FudmFzRWwgPSB0aGlzLnVwcGVyQ2FudmFzRWwsXG4gICAgICAgICAgYm91bmRzID0gdXBwZXJDYW52YXNFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICBib3VuZHNXaWR0aCA9IGJvdW5kcy53aWR0aCB8fCAwLFxuICAgICAgICAgIGJvdW5kc0hlaWdodCA9IGJvdW5kcy5oZWlnaHQgfHwgMCxcbiAgICAgICAgICBjc3NTY2FsZTtcblxuICAgICAgaWYgKCFib3VuZHNXaWR0aCB8fCAhYm91bmRzSGVpZ2h0ICkge1xuICAgICAgICBpZiAoJ3RvcCcgaW4gYm91bmRzICYmICdib3R0b20nIGluIGJvdW5kcykge1xuICAgICAgICAgIGJvdW5kc0hlaWdodCA9IE1hdGguYWJzKCBib3VuZHMudG9wIC0gYm91bmRzLmJvdHRvbSApO1xuICAgICAgICB9XG4gICAgICAgIGlmICgncmlnaHQnIGluIGJvdW5kcyAmJiAnbGVmdCcgaW4gYm91bmRzKSB7XG4gICAgICAgICAgYm91bmRzV2lkdGggPSBNYXRoLmFicyggYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGNPZmZzZXQoKTtcbiAgICAgIHBvaW50ZXIueCA9IHBvaW50ZXIueCAtIHRoaXMuX29mZnNldC5sZWZ0O1xuICAgICAgcG9pbnRlci55ID0gcG9pbnRlci55IC0gdGhpcy5fb2Zmc2V0LnRvcDtcbiAgICAgIGlmICghaWdub3JlWm9vbSkge1xuICAgICAgICBwb2ludGVyID0gdGhpcy5yZXN0b3JlUG9pbnRlclZwdChwb2ludGVyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJldGluYVNjYWxpbmcgPSB0aGlzLmdldFJldGluYVNjYWxpbmcoKTtcbiAgICAgIGlmIChyZXRpbmFTY2FsaW5nICE9PSAxKSB7XG4gICAgICAgIHBvaW50ZXIueCAvPSByZXRpbmFTY2FsaW5nO1xuICAgICAgICBwb2ludGVyLnkgLz0gcmV0aW5hU2NhbGluZztcbiAgICAgIH1cblxuICAgICAgaWYgKGJvdW5kc1dpZHRoID09PSAwIHx8IGJvdW5kc0hlaWdodCA9PT0gMCkge1xuICAgICAgICAvLyBJZiBib3VuZHMgYXJlIG5vdCBhdmFpbGFibGUgKGkuZS4gbm90IHZpc2libGUpLCBkbyBub3QgYXBwbHkgc2NhbGUuXG4gICAgICAgIGNzc1NjYWxlID0geyB3aWR0aDogMSwgaGVpZ2h0OiAxIH07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY3NzU2NhbGUgPSB7XG4gICAgICAgICAgd2lkdGg6IHVwcGVyQ2FudmFzRWwud2lkdGggLyBib3VuZHNXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHVwcGVyQ2FudmFzRWwuaGVpZ2h0IC8gYm91bmRzSGVpZ2h0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHBvaW50ZXIueCAqIGNzc1NjYWxlLndpZHRoLFxuICAgICAgICB5OiBwb2ludGVyLnkgKiBjc3NTY2FsZS5oZWlnaHRcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHRocm93cyB7Q0FOVkFTX0lOSVRfRVJST1J9IElmIGNhbnZhcyBjYW4gbm90IGJlIGluaXRpYWxpemVkXG4gICAgICovXG4gICAgX2NyZWF0ZVVwcGVyQ2FudmFzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbG93ZXJDYW52YXNDbGFzcyA9IHRoaXMubG93ZXJDYW52YXNFbC5jbGFzc05hbWUucmVwbGFjZSgvXFxzKmxvd2VyLWNhbnZhc1xccyovLCAnJyksXG4gICAgICAgICAgbG93ZXJDYW52YXNFbCA9IHRoaXMubG93ZXJDYW52YXNFbCwgdXBwZXJDYW52YXNFbCA9IHRoaXMudXBwZXJDYW52YXNFbDtcblxuICAgICAgLy8gdGhlcmUgaXMgbm8gbmVlZCB0byBjcmVhdGUgYSBuZXcgdXBwZXJDYW52YXMgZWxlbWVudCBpZiB3ZSBoYXZlIGFscmVhZHkgb25lLlxuICAgICAgaWYgKHVwcGVyQ2FudmFzRWwpIHtcbiAgICAgICAgdXBwZXJDYW52YXNFbC5jbGFzc05hbWUgPSAnJztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB1cHBlckNhbnZhc0VsID0gdGhpcy5fY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgICB0aGlzLnVwcGVyQ2FudmFzRWwgPSB1cHBlckNhbnZhc0VsO1xuICAgICAgfVxuICAgICAgZmFicmljLnV0aWwuYWRkQ2xhc3ModXBwZXJDYW52YXNFbCwgJ3VwcGVyLWNhbnZhcyAnICsgbG93ZXJDYW52YXNDbGFzcyk7XG5cbiAgICAgIHRoaXMud3JhcHBlckVsLmFwcGVuZENoaWxkKHVwcGVyQ2FudmFzRWwpO1xuXG4gICAgICB0aGlzLl9jb3B5Q2FudmFzU3R5bGUobG93ZXJDYW52YXNFbCwgdXBwZXJDYW52YXNFbCk7XG4gICAgICB0aGlzLl9hcHBseUNhbnZhc1N0eWxlKHVwcGVyQ2FudmFzRWwpO1xuICAgICAgdGhpcy5jb250ZXh0VG9wID0gdXBwZXJDYW52YXNFbC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGNvbnRleHQgb2YgdG9wIGNhbnZhcyB3aGVyZSBpbnRlcmFjdGlvbnMgYXJlIGRyYXduXG4gICAgICogQHJldHVybnMge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH1cbiAgICAgKi9cbiAgICBnZXRUb3BDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250ZXh0VG9wO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVDYWNoZUNhbnZhczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jYWNoZUNhbnZhc0VsID0gdGhpcy5fY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgdGhpcy5jYWNoZUNhbnZhc0VsLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLndpZHRoKTtcbiAgICAgIHRoaXMuY2FjaGVDYW52YXNFbC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KTtcbiAgICAgIHRoaXMuY29udGV4dENhY2hlID0gdGhpcy5jYWNoZUNhbnZhc0VsLmdldENvbnRleHQoJzJkJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRXcmFwcGVyRWxlbWVudDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy53cmFwcGVyRWwgPSBmYWJyaWMudXRpbC53cmFwRWxlbWVudCh0aGlzLmxvd2VyQ2FudmFzRWwsICdkaXYnLCB7XG4gICAgICAgICdjbGFzcyc6IHRoaXMuY29udGFpbmVyQ2xhc3NcbiAgICAgIH0pO1xuICAgICAgZmFicmljLnV0aWwuc2V0U3R5bGUodGhpcy53cmFwcGVyRWwsIHtcbiAgICAgICAgd2lkdGg6IHRoaXMud2lkdGggKyAncHgnLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH0pO1xuICAgICAgZmFicmljLnV0aWwubWFrZUVsZW1lbnRVbnNlbGVjdGFibGUodGhpcy53cmFwcGVyRWwpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgY2FudmFzIGVsZW1lbnQgdG8gYXBwbHkgc3R5bGVzIG9uXG4gICAgICovXG4gICAgX2FwcGx5Q2FudmFzU3R5bGU6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoIHx8IGVsZW1lbnQud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQ7XG5cbiAgICAgIGZhYnJpYy51dGlsLnNldFN0eWxlKGVsZW1lbnQsIHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHdpZHRoOiB3aWR0aCArICdweCcsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0ICsgJ3B4JyxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICAndG91Y2gtYWN0aW9uJzogdGhpcy5hbGxvd1RvdWNoU2Nyb2xsaW5nID8gJ21hbmlwdWxhdGlvbicgOiAnbm9uZScsXG4gICAgICAgICctbXMtdG91Y2gtYWN0aW9uJzogdGhpcy5hbGxvd1RvdWNoU2Nyb2xsaW5nID8gJ21hbmlwdWxhdGlvbicgOiAnbm9uZSdcbiAgICAgIH0pO1xuICAgICAgZWxlbWVudC53aWR0aCA9IHdpZHRoO1xuICAgICAgZWxlbWVudC5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICBmYWJyaWMudXRpbC5tYWtlRWxlbWVudFVuc2VsZWN0YWJsZShlbGVtZW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29weSB0aGUgZW50aXJlIGlubGluZSBzdHlsZSBmcm9tIG9uZSBlbGVtZW50IChmcm9tRWwpIHRvIGFub3RoZXIgKHRvRWwpXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGZyb21FbCBFbGVtZW50IHN0eWxlIGlzIGNvcGllZCBmcm9tXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0b0VsIEVsZW1lbnQgY29waWVkIHN0eWxlIGlzIGFwcGxpZWQgdG9cbiAgICAgKi9cbiAgICBfY29weUNhbnZhc1N0eWxlOiBmdW5jdGlvbiAoZnJvbUVsLCB0b0VsKSB7XG4gICAgICB0b0VsLnN0eWxlLmNzc1RleHQgPSBmcm9tRWwuc3R5bGUuY3NzVGV4dDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb250ZXh0IG9mIGNhbnZhcyB3aGVyZSBvYmplY3Qgc2VsZWN0aW9uIGlzIGRyYXduXG4gICAgICogQHJldHVybiB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfVxuICAgICAqL1xuICAgIGdldFNlbGVjdGlvbkNvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFRvcDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyAmbHQ7Y2FudmFzPiBlbGVtZW50IG9uIHdoaWNoIG9iamVjdCBzZWxlY3Rpb24gaXMgZHJhd25cbiAgICAgKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXRTZWxlY3Rpb25FbGVtZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy51cHBlckNhbnZhc0VsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGN1cnJlbnRseSBhY3RpdmUgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gYWN0aXZlIG9iamVjdFxuICAgICAqL1xuICAgIGdldEFjdGl2ZU9iamVjdDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSBjdXJyZW50IHNlbGVjdGVkIG9iamVjdHNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSBhY3RpdmUgb2JqZWN0XG4gICAgICovXG4gICAgZ2V0QWN0aXZlT2JqZWN0czogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgaWYgKGFjdGl2ZS50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJyAmJiBhY3RpdmUuX29iamVjdHMpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aXZlLl9vYmplY3RzLnNsaWNlKDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbYWN0aXZlXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqIE9iamVjdCB0aGF0IHdhcyByZW1vdmVkXG4gICAgICovXG4gICAgX29uT2JqZWN0UmVtb3ZlZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAvLyByZW1vdmluZyBhY3RpdmUgb2JqZWN0IHNob3VsZCBmaXJlIFwic2VsZWN0aW9uOmNsZWFyZWRcIiBldmVudHNcbiAgICAgIGlmIChvYmogPT09IHRoaXMuX2FjdGl2ZU9iamVjdCkge1xuICAgICAgICB0aGlzLmZpcmUoJ2JlZm9yZTpzZWxlY3Rpb246Y2xlYXJlZCcsIHsgdGFyZ2V0OiBvYmogfSk7XG4gICAgICAgIHRoaXMuX2Rpc2NhcmRBY3RpdmVPYmplY3QoKTtcbiAgICAgICAgdGhpcy5maXJlKCdzZWxlY3Rpb246Y2xlYXJlZCcsIHsgdGFyZ2V0OiBvYmogfSk7XG4gICAgICAgIG9iai5maXJlKCdkZXNlbGVjdGVkJyk7XG4gICAgICB9XG4gICAgICBpZiAob2JqID09PSB0aGlzLl9ob3ZlcmVkVGFyZ2V0KXtcbiAgICAgICAgdGhpcy5faG92ZXJlZFRhcmdldCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXRzID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLmNhbGxTdXBlcignX29uT2JqZWN0UmVtb3ZlZCcsIG9iaik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQ29tcGFyZXMgdGhlIG9sZCBhY3RpdmVPYmplY3Qgd2l0aCB0aGUgY3VycmVudCBvbmUgYW5kIGZpcmVzIGNvcnJlY3QgZXZlbnRzXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmogb2xkIGFjdGl2ZU9iamVjdFxuICAgICAqL1xuICAgIF9maXJlU2VsZWN0aW9uRXZlbnRzOiBmdW5jdGlvbihvbGRPYmplY3RzLCBlKSB7XG4gICAgICB2YXIgc29tZXRoaW5nQ2hhbmdlZCA9IGZhbHNlLCBvYmplY3RzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCksXG4gICAgICAgICAgYWRkZWQgPSBbXSwgcmVtb3ZlZCA9IFtdO1xuICAgICAgb2xkT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9sZE9iamVjdCkge1xuICAgICAgICBpZiAob2JqZWN0cy5pbmRleE9mKG9sZE9iamVjdCkgPT09IC0xKSB7XG4gICAgICAgICAgc29tZXRoaW5nQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgb2xkT2JqZWN0LmZpcmUoJ2Rlc2VsZWN0ZWQnLCB7XG4gICAgICAgICAgICBlOiBlLFxuICAgICAgICAgICAgdGFyZ2V0OiBvbGRPYmplY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZW1vdmVkLnB1c2gob2xkT2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBvYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvbGRPYmplY3RzLmluZGV4T2Yob2JqZWN0KSA9PT0gLTEpIHtcbiAgICAgICAgICBzb21ldGhpbmdDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICBvYmplY3QuZmlyZSgnc2VsZWN0ZWQnLCB7XG4gICAgICAgICAgICBlOiBlLFxuICAgICAgICAgICAgdGFyZ2V0OiBvYmplY3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhZGRlZC5wdXNoKG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKG9sZE9iamVjdHMubGVuZ3RoID4gMCAmJiBvYmplY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc29tZXRoaW5nQ2hhbmdlZCAmJiB0aGlzLmZpcmUoJ3NlbGVjdGlvbjp1cGRhdGVkJywge1xuICAgICAgICAgIGU6IGUsXG4gICAgICAgICAgc2VsZWN0ZWQ6IGFkZGVkLFxuICAgICAgICAgIGRlc2VsZWN0ZWQ6IHJlbW92ZWQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob2JqZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZmlyZSgnc2VsZWN0aW9uOmNyZWF0ZWQnLCB7XG4gICAgICAgICAgZTogZSxcbiAgICAgICAgICBzZWxlY3RlZDogYWRkZWQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAob2xkT2JqZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuZmlyZSgnc2VsZWN0aW9uOmNsZWFyZWQnLCB7XG4gICAgICAgICAgZTogZSxcbiAgICAgICAgICBkZXNlbGVjdGVkOiByZW1vdmVkLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBnaXZlbiBvYmplY3QgYXMgdGhlIG9ubHkgYWN0aXZlIG9iamVjdCBvbiBjYW52YXNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gc2V0IGFzIGFuIGFjdGl2ZSBvbmVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgKHBhc3NlZCBhbG9uZyB3aGVuIGZpcmluZyBcIm9iamVjdDpzZWxlY3RlZFwiKVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0QWN0aXZlT2JqZWN0OiBmdW5jdGlvbiAob2JqZWN0LCBlKSB7XG4gICAgICB2YXIgY3VycmVudEFjdGl2ZXMgPSB0aGlzLmdldEFjdGl2ZU9iamVjdHMoKTtcbiAgICAgIHRoaXMuX3NldEFjdGl2ZU9iamVjdChvYmplY3QsIGUpO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkV2ZW50cyhjdXJyZW50QWN0aXZlcywgZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhpcyBpcyBhIHByaXZhdGUgbWV0aG9kIGZvciBub3cuXG4gICAgICogVGhpcyBpcyBzdXBwb3NlZCB0byBiZSBlcXVpdmFsZW50IHRvIHNldEFjdGl2ZU9iamVjdCBidXQgd2l0aG91dCBmaXJpbmdcbiAgICAgKiBhbnkgZXZlbnQuIFRoZXJlIGlzIGNvbW1pdG1lbnQgdG8gaGF2ZSB0aGlzIHN0YXkgdGhpcyB3YXkuXG4gICAgICogVGhpcyBpcyB0aGUgZnVuY3Rpb25hbCBwYXJ0IG9mIHNldEFjdGl2ZU9iamVjdC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdG8gc2V0IGFzIGFjdGl2ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtlXSBFdmVudCAocGFzc2VkIGFsb25nIHdoZW4gZmlyaW5nIFwib2JqZWN0OnNlbGVjdGVkXCIpXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgc2VsZWN0aW9uIGhhcHBlbmVkXG4gICAgICovXG4gICAgX3NldEFjdGl2ZU9iamVjdDogZnVuY3Rpb24ob2JqZWN0LCBlKSB7XG4gICAgICBpZiAodGhpcy5fYWN0aXZlT2JqZWN0ID09PSBvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9kaXNjYXJkQWN0aXZlT2JqZWN0KGUsIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG9iamVjdC5vblNlbGVjdCh7IGU6IGUgfSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5fYWN0aXZlT2JqZWN0ID0gb2JqZWN0O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBwcml2YXRlIG1ldGhvZCBmb3Igbm93LlxuICAgICAqIFRoaXMgaXMgc3VwcG9zZWQgdG8gYmUgZXF1aXZhbGVudCB0byBkaXNjYXJkQWN0aXZlT2JqZWN0IGJ1dCB3aXRob3V0IGZpcmluZ1xuICAgICAqIGFueSBldmVudHMuIFRoZXJlIGlzIGNvbW1pdG1lbnQgdG8gaGF2ZSB0aGlzIHN0YXkgdGhpcyB3YXkuXG4gICAgICogVGhpcyBpcyB0aGUgZnVuY3Rpb25hbCBwYXJ0IG9mIGRpc2NhcmRBY3RpdmVPYmplY3QuXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IChwYXNzZWQgYWxvbmcgd2hlbiBmaXJpbmcgXCJvYmplY3Q6ZGVzZWxlY3RlZFwiKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgdG8gc2V0IGFzIGFjdGl2ZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIHNlbGVjdGlvbiBoYXBwZW5lZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2Rpc2NhcmRBY3RpdmVPYmplY3Q6IGZ1bmN0aW9uKGUsIG9iamVjdCkge1xuICAgICAgdmFyIG9iaiA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgIGlmIChvYmopIHtcbiAgICAgICAgLy8gb25EZXNlbGVjdCByZXR1cm4gVFJVRSB0byBjYW5jZWwgc2VsZWN0aW9uO1xuICAgICAgICBpZiAob2JqLm9uRGVzZWxlY3QoeyBlOiBlLCBvYmplY3Q6IG9iamVjdCB9KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hY3RpdmVPYmplY3QgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERpc2NhcmRzIGN1cnJlbnRseSBhY3RpdmUgb2JqZWN0IGFuZCBmaXJlIGV2ZW50cy4gSWYgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSBmYWJyaWNcbiAgICAgKiBhcyBhIGNvbnNlcXVlbmNlIG9mIGEgbW91c2UgZXZlbnQsIHRoZSBldmVudCBpcyBwYXNzZWQgYXMgYSBwYXJhbWV0ZXIgYW5kXG4gICAgICogc2VudCB0byB0aGUgZmlyZSBmdW5jdGlvbiBmb3IgdGhlIGN1c3RvbSBldmVudHMuIFdoZW4gdXNlZCBhcyBhIG1ldGhvZCB0aGVcbiAgICAgKiBlIHBhcmFtIGRvZXMgbm90IGhhdmUgYW55IGFwcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7ZXZlbnR9IGVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGRpc2NhcmRBY3RpdmVPYmplY3Q6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgY3VycmVudEFjdGl2ZXMgPSB0aGlzLmdldEFjdGl2ZU9iamVjdHMoKSwgYWN0aXZlT2JqZWN0ID0gdGhpcy5nZXRBY3RpdmVPYmplY3QoKTtcbiAgICAgIGlmIChjdXJyZW50QWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5maXJlKCdiZWZvcmU6c2VsZWN0aW9uOmNsZWFyZWQnLCB7IHRhcmdldDogYWN0aXZlT2JqZWN0LCBlOiBlIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5fZGlzY2FyZEFjdGl2ZU9iamVjdChlKTtcbiAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25FdmVudHMoY3VycmVudEFjdGl2ZXMsIGUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhIGNhbnZhcyBlbGVtZW50IGFuZCByZW1vdmVzIGFsbCBldmVudCBsaXN0ZW5lcnNcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdGhpcy53cmFwcGVyRWw7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpO1xuICAgICAgd3JhcHBlci5yZW1vdmVDaGlsZCh0aGlzLnVwcGVyQ2FudmFzRWwpO1xuICAgICAgd3JhcHBlci5yZW1vdmVDaGlsZCh0aGlzLmxvd2VyQ2FudmFzRWwpO1xuICAgICAgdGhpcy5jb250ZXh0Q2FjaGUgPSBudWxsO1xuICAgICAgdGhpcy5jb250ZXh0VG9wID0gbnVsbDtcbiAgICAgIFsndXBwZXJDYW52YXNFbCcsICdjYWNoZUNhbnZhc0VsJ10uZm9yRWFjaCgoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBmYWJyaWMudXRpbC5jbGVhblVwSnNkb21Ob2RlKHRoaXNbZWxlbWVudF0pO1xuICAgICAgICB0aGlzW2VsZW1lbnRdID0gdW5kZWZpbmVkO1xuICAgICAgfSkuYmluZCh0aGlzKSk7XG4gICAgICBpZiAod3JhcHBlci5wYXJlbnROb2RlKSB7XG4gICAgICAgIHdyYXBwZXIucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodGhpcy5sb3dlckNhbnZhc0VsLCB0aGlzLndyYXBwZXJFbCk7XG4gICAgICB9XG4gICAgICBkZWxldGUgdGhpcy53cmFwcGVyRWw7XG4gICAgICBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBjb250ZXh0cyAoYmFja2dyb3VuZCwgbWFpbiwgdG9wKSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHRoaXMuZGlzY2FyZEFjdGl2ZUdyb3VwKCk7XG4gICAgICB0aGlzLmRpc2NhcmRBY3RpdmVPYmplY3QoKTtcbiAgICAgIHRoaXMuY2xlYXJDb250ZXh0KHRoaXMuY29udGV4dFRvcCk7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsU3VwZXIoJ2NsZWFyJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIG9iamVjdHMnIGNvbnRyb2xzIChib3JkZXJzL2NvbnRyb2xzKVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgY29udHJvbHMgb25cbiAgICAgKi9cbiAgICBkcmF3Q29udHJvbHM6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdmFyIGFjdGl2ZU9iamVjdCA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcblxuICAgICAgaWYgKGFjdGl2ZU9iamVjdCkge1xuICAgICAgICBhY3RpdmVPYmplY3QuX3JlbmRlckNvbnRyb2xzKGN0eCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3RvT2JqZWN0OiBmdW5jdGlvbihpbnN0YW5jZSwgbWV0aG9kTmFtZSwgcHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgLy9JZiB0aGUgb2JqZWN0IGlzIHBhcnQgb2YgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIGdyb3VwLCBpdCBzaG91bGRcbiAgICAgIC8vYmUgdHJhbnNmb3JtZWQgYXBwcm9wcmlhdGVseVxuICAgICAgLy9pLmUuIGl0IHNob3VsZCBiZSBzZXJpYWxpc2VkIGFzIGl0IHdvdWxkIGFwcGVhciBpZiB0aGUgc2VsZWN0aW9uIGdyb3VwXG4gICAgICAvL3dlcmUgdG8gYmUgZGVzdHJveWVkLlxuICAgICAgdmFyIG9yaWdpbmFsUHJvcGVydGllcyA9IHRoaXMuX3JlYWxpemVHcm91cFRyYW5zZm9ybU9uT2JqZWN0KGluc3RhbmNlKSxcbiAgICAgICAgICBvYmplY3QgPSB0aGlzLmNhbGxTdXBlcignX3RvT2JqZWN0JywgaW5zdGFuY2UsIG1ldGhvZE5hbWUsIHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgLy9VbmRvIHRoZSBkYW1hZ2Ugd2UgZGlkIGJ5IGNoYW5naW5nIGFsbCBvZiBpdHMgcHJvcGVydGllc1xuICAgICAgdGhpcy5fdW53aW5kR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdChpbnN0YW5jZSwgb3JpZ2luYWxQcm9wZXJ0aWVzKTtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlYWxpc2VzIGFuIG9iamVjdCdzIGdyb3VwIHRyYW5zZm9ybWF0aW9uIG9uIGl0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IFtpbnN0YW5jZV0gdGhlIG9iamVjdCB0byB0cmFuc2Zvcm0gKGdldHMgbXV0YXRlZClcbiAgICAgKiBAcmV0dXJucyB0aGUgb3JpZ2luYWwgdmFsdWVzIG9mIGluc3RhbmNlIHdoaWNoIHdlcmUgY2hhbmdlZFxuICAgICAqL1xuICAgIF9yZWFsaXplR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdDogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgIGlmIChpbnN0YW5jZS5ncm91cCAmJiBpbnN0YW5jZS5ncm91cC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJyAmJiB0aGlzLl9hY3RpdmVPYmplY3QgPT09IGluc3RhbmNlLmdyb3VwKSB7XG4gICAgICAgIHZhciBsYXlvdXRQcm9wcyA9IFsnYW5nbGUnLCAnZmxpcFgnLCAnZmxpcFknLCAnbGVmdCcsICdzY2FsZVgnLCAnc2NhbGVZJywgJ3NrZXdYJywgJ3NrZXdZJywgJ3RvcCddO1xuICAgICAgICAvL0NvcHkgYWxsIHRoZSBwb3NpdGlvbmFsbHkgcmVsZXZhbnQgcHJvcGVydGllcyBhY3Jvc3Mgbm93XG4gICAgICAgIHZhciBvcmlnaW5hbFZhbHVlcyA9IHt9O1xuICAgICAgICBsYXlvdXRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgICBvcmlnaW5hbFZhbHVlc1twcm9wXSA9IGluc3RhbmNlW3Byb3BdO1xuICAgICAgICB9KTtcbiAgICAgICAgZmFicmljLnV0aWwuYWRkVHJhbnNmb3JtVG9PYmplY3QoaW5zdGFuY2UsIHRoaXMuX2FjdGl2ZU9iamVjdC5jYWxjT3duTWF0cml4KCkpO1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxWYWx1ZXM7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlc3RvcmVzIHRoZSBjaGFuZ2VkIHByb3BlcnRpZXMgb2YgaW5zdGFuY2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gW2luc3RhbmNlXSB0aGUgb2JqZWN0IHRvIHVuLXRyYW5zZm9ybSAoZ2V0cyBtdXRhdGVkKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3JpZ2luYWxWYWx1ZXNdIHRoZSBvcmlnaW5hbCB2YWx1ZXMgb2YgaW5zdGFuY2UsIGFzIHJldHVybmVkIGJ5IF9yZWFsaXplR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdFxuICAgICAqL1xuICAgIF91bndpbmRHcm91cFRyYW5zZm9ybU9uT2JqZWN0OiBmdW5jdGlvbihpbnN0YW5jZSwgb3JpZ2luYWxWYWx1ZXMpIHtcbiAgICAgIGlmIChvcmlnaW5hbFZhbHVlcykge1xuICAgICAgICBpbnN0YW5jZS5zZXQob3JpZ2luYWxWYWx1ZXMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRTVkdPYmplY3Q6IGZ1bmN0aW9uKG1hcmt1cCwgaW5zdGFuY2UsIHJldml2ZXIpIHtcbiAgICAgIC8vSWYgdGhlIG9iamVjdCBpcyBpbiBhIHNlbGVjdGlvbiBncm91cCwgc2ltdWxhdGUgd2hhdCB3b3VsZCBoYXBwZW4gdG8gdGhhdFxuICAgICAgLy9vYmplY3Qgd2hlbiB0aGUgZ3JvdXAgaXMgZGVzZWxlY3RlZFxuICAgICAgdmFyIG9yaWdpbmFsUHJvcGVydGllcyA9IHRoaXMuX3JlYWxpemVHcm91cFRyYW5zZm9ybU9uT2JqZWN0KGluc3RhbmNlKTtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdfc2V0U1ZHT2JqZWN0JywgbWFya3VwLCBpbnN0YW5jZSwgcmV2aXZlcik7XG4gICAgICB0aGlzLl91bndpbmRHcm91cFRyYW5zZm9ybU9uT2JqZWN0KGluc3RhbmNlLCBvcmlnaW5hbFByb3BlcnRpZXMpO1xuICAgIH0sXG5cbiAgICBzZXRWaWV3cG9ydFRyYW5zZm9ybTogZnVuY3Rpb24gKHZwdCkge1xuICAgICAgaWYgKHRoaXMucmVuZGVyT25BZGRSZW1vdmUgJiYgdGhpcy5fYWN0aXZlT2JqZWN0ICYmIHRoaXMuX2FjdGl2ZU9iamVjdC5pc0VkaXRpbmcpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlT2JqZWN0LmNsZWFyQ29udGV4dFRvcCgpO1xuICAgICAgfVxuICAgICAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUuc2V0Vmlld3BvcnRUcmFuc2Zvcm0uY2FsbCh0aGlzLCB2cHQpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gY29weWluZyBzdGF0aWMgcHJvcGVydGllcyBtYW51YWxseSB0byB3b3JrIGFyb3VuZCBPcGVyYSdzIGJ1ZyxcbiAgLy8gd2hlcmUgXCJwcm90b3R5cGVcIiBwcm9wZXJ0eSBpcyBlbnVtZXJhYmxlIGFuZCBvdmVycmlkZXMgZXhpc3RpbmcgcHJvdG90eXBlXG4gIGZvciAodmFyIHByb3AgaW4gZmFicmljLlN0YXRpY0NhbnZhcykge1xuICAgIGlmIChwcm9wICE9PSAncHJvdG90eXBlJykge1xuICAgICAgZmFicmljLkNhbnZhc1twcm9wXSA9IGZhYnJpYy5TdGF0aWNDYW52YXNbcHJvcF07XG4gICAgfVxuICB9XG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICB2YXIgYWRkTGlzdGVuZXIgPSBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcixcbiAgICAgIHJlbW92ZUxpc3RlbmVyID0gZmFicmljLnV0aWwucmVtb3ZlTGlzdGVuZXIsXG4gICAgICBSSUdIVF9DTElDSyA9IDMsIE1JRERMRV9DTElDSyA9IDIsIExFRlRfQ0xJQ0sgPSAxLFxuICAgICAgYWRkRXZlbnRPcHRpb25zID0geyBwYXNzaXZlOiBmYWxzZSB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrQ2xpY2soZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gZS5idXR0b24gJiYgKGUuYnV0dG9uID09PSB2YWx1ZSAtIDEpO1xuICB9XG5cbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuQ2FudmFzLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBmYWJyaWMuQ2FudmFzLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBDb250YWlucyB0aGUgaWQgb2YgdGhlIHRvdWNoIGV2ZW50IHRoYXQgb3ducyB0aGUgZmFicmljIHRyYW5zZm9ybVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbWFpblRvdWNoSWQ6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIG1vdXNlIGxpc3RlbmVycyB0byBjYW52YXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9pbml0RXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGluIGNhc2Ugd2UgaW5pdGlhbGl6ZWQgdGhlIGNsYXNzIHR3aWNlLiBUaGlzIHNob3VsZCBub3QgaGFwcGVuIG5vcm1hbGx5XG4gICAgICAvLyBidXQgaW4gc29tZSBraW5kIG9mIGFwcGxpY2F0aW9ucyB3aGVyZSB0aGUgY2FudmFzIGVsZW1lbnQgbWF5IGJlIGNoYW5nZWRcbiAgICAgIC8vIHRoaXMgaXMgYSB3b3JrYXJvdW5kIHRvIGhhdmluZyBkb3VibGUgbGlzdGVuZXJzLlxuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIHRoaXMuX2JpbmRFdmVudHMoKTtcbiAgICAgIHRoaXMuYWRkT3JSZW1vdmUoYWRkTGlzdGVuZXIsICdhZGQnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIGFuIGV2ZW50IHByZWZpeCBwb2ludGVyIG9yIG1vdXNlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldEV2ZW50UHJlZml4OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5lbmFibGVQb2ludGVyRXZlbnRzID8gJ3BvaW50ZXInIDogJ21vdXNlJztcbiAgICB9LFxuXG4gICAgYWRkT3JSZW1vdmU6IGZ1bmN0aW9uKGZ1bmN0b3IsIGV2ZW50anNGdW5jdG9yKSB7XG4gICAgICB2YXIgY2FudmFzRWxlbWVudCA9IHRoaXMudXBwZXJDYW52YXNFbCxcbiAgICAgICAgICBldmVudFR5cGVQcmVmaXggPSB0aGlzLl9nZXRFdmVudFByZWZpeCgpO1xuICAgICAgZnVuY3RvcihmYWJyaWMud2luZG93LCAncmVzaXplJywgdGhpcy5fb25SZXNpemUpO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCBldmVudFR5cGVQcmVmaXggKyAnZG93bicsIHRoaXMuX29uTW91c2VEb3duKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ21vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ291dCcsIHRoaXMuX29uTW91c2VPdXQpO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCBldmVudFR5cGVQcmVmaXggKyAnZW50ZXInLCB0aGlzLl9vbk1vdXNlRW50ZXIpO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCAnd2hlZWwnLCB0aGlzLl9vbk1vdXNlV2hlZWwpO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCAnY29udGV4dG1lbnUnLCB0aGlzLl9vbkNvbnRleHRNZW51KTtcbiAgICAgIGZ1bmN0b3IoY2FudmFzRWxlbWVudCwgJ2RibGNsaWNrJywgdGhpcy5fb25Eb3VibGVDbGljayk7XG4gICAgICBmdW5jdG9yKGNhbnZhc0VsZW1lbnQsICdkcmFnb3ZlcicsIHRoaXMuX29uRHJhZ092ZXIpO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCAnZHJhZ2VudGVyJywgdGhpcy5fb25EcmFnRW50ZXIpO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCAnZHJhZ2xlYXZlJywgdGhpcy5fb25EcmFnTGVhdmUpO1xuICAgICAgZnVuY3RvcihjYW52YXNFbGVtZW50LCAnZHJvcCcsIHRoaXMuX29uRHJvcCk7XG4gICAgICBpZiAoIXRoaXMuZW5hYmxlUG9pbnRlckV2ZW50cykge1xuICAgICAgICBmdW5jdG9yKGNhbnZhc0VsZW1lbnQsICd0b3VjaHN0YXJ0JywgdGhpcy5fb25Ub3VjaFN0YXJ0LCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBldmVudGpzICE9PSAndW5kZWZpbmVkJyAmJiBldmVudGpzRnVuY3RvciBpbiBldmVudGpzKSB7XG4gICAgICAgIGV2ZW50anNbZXZlbnRqc0Z1bmN0b3JdKGNhbnZhc0VsZW1lbnQsICdnZXN0dXJlJywgdGhpcy5fb25HZXN0dXJlKTtcbiAgICAgICAgZXZlbnRqc1tldmVudGpzRnVuY3Rvcl0oY2FudmFzRWxlbWVudCwgJ2RyYWcnLCB0aGlzLl9vbkRyYWcpO1xuICAgICAgICBldmVudGpzW2V2ZW50anNGdW5jdG9yXShjYW52YXNFbGVtZW50LCAnb3JpZW50YXRpb24nLCB0aGlzLl9vbk9yaWVudGF0aW9uQ2hhbmdlKTtcbiAgICAgICAgZXZlbnRqc1tldmVudGpzRnVuY3Rvcl0oY2FudmFzRWxlbWVudCwgJ3NoYWtlJywgdGhpcy5fb25TaGFrZSk7XG4gICAgICAgIGV2ZW50anNbZXZlbnRqc0Z1bmN0b3JdKGNhbnZhc0VsZW1lbnQsICdsb25ncHJlc3MnLCB0aGlzLl9vbkxvbmdQcmVzcyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIHJlbW92ZUxpc3RlbmVyczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmFkZE9yUmVtb3ZlKHJlbW92ZUxpc3RlbmVyLCAncmVtb3ZlJyk7XG4gICAgICAvLyBpZiB5b3UgZGlzcG9zZSBvbiBhIG1vdXNlRG93biwgYmVmb3JlIG1vdXNlIHVwLCB5b3UgbmVlZCB0byBjbGVhbiBkb2N1bWVudCB0by4uLlxuICAgICAgdmFyIGV2ZW50VHlwZVByZWZpeCA9IHRoaXMuX2dldEV2ZW50UHJlZml4KCk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsIGV2ZW50VHlwZVByZWZpeCArICd1cCcsIHRoaXMuX29uTW91c2VVcCk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uVG91Y2hFbmQsIGFkZEV2ZW50T3B0aW9ucyk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsIGV2ZW50VHlwZVByZWZpeCArICdtb3ZlJywgdGhpcy5fb25Nb3VzZU1vdmUsIGFkZEV2ZW50T3B0aW9ucyk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5ldmVudHNCb3VuZCkge1xuICAgICAgICAvLyBmb3IgYW55IHJlYXNvbiB3ZSBwYXNzIGhlcmUgdHdpY2Ugd2UgZG8gbm90IHdhbnQgdG8gYmluZCBldmVudHMgdHdpY2UuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX29uTW91c2VEb3duID0gdGhpcy5fb25Nb3VzZURvd24uYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uVG91Y2hTdGFydCA9IHRoaXMuX29uVG91Y2hTdGFydC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Nb3VzZU1vdmUgPSB0aGlzLl9vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Nb3VzZVVwID0gdGhpcy5fb25Nb3VzZVVwLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vblRvdWNoRW5kID0gdGhpcy5fb25Ub3VjaEVuZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25SZXNpemUgPSB0aGlzLl9vblJlc2l6ZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25HZXN0dXJlID0gdGhpcy5fb25HZXN0dXJlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vbkRyYWcgPSB0aGlzLl9vbkRyYWcuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uU2hha2UgPSB0aGlzLl9vblNoYWtlLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vbkxvbmdQcmVzcyA9IHRoaXMuX29uTG9uZ1ByZXNzLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vbk9yaWVudGF0aW9uQ2hhbmdlID0gdGhpcy5fb25PcmllbnRhdGlvbkNoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Nb3VzZVdoZWVsID0gdGhpcy5fb25Nb3VzZVdoZWVsLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vbk1vdXNlT3V0ID0gdGhpcy5fb25Nb3VzZU91dC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Nb3VzZUVudGVyID0gdGhpcy5fb25Nb3VzZUVudGVyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vbkNvbnRleHRNZW51ID0gdGhpcy5fb25Db250ZXh0TWVudS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5fb25Eb3VibGVDbGljayA9IHRoaXMuX29uRG91YmxlQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX29uRHJhZ092ZXIgPSB0aGlzLl9vbkRyYWdPdmVyLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9vbkRyYWdFbnRlciA9IHRoaXMuX3NpbXBsZUV2ZW50SGFuZGxlci5iaW5kKHRoaXMsICdkcmFnZW50ZXInKTtcbiAgICAgIHRoaXMuX29uRHJhZ0xlYXZlID0gdGhpcy5fc2ltcGxlRXZlbnRIYW5kbGVyLmJpbmQodGhpcywgJ2RyYWdsZWF2ZScpO1xuICAgICAgdGhpcy5fb25Ecm9wID0gdGhpcy5fb25Ecm9wLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmV2ZW50c0JvdW5kID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgb2JqZWN0IGZpcmVkIG9uIEV2ZW50LmpzIGdlc3R1cmVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbc2VsZl0gSW5uZXIgRXZlbnQgb2JqZWN0XG4gICAgICovXG4gICAgX29uR2VzdHVyZTogZnVuY3Rpb24oZSwgc2VsZikge1xuICAgICAgdGhpcy5fX29uVHJhbnNmb3JtR2VzdHVyZSAmJiB0aGlzLl9fb25UcmFuc2Zvcm1HZXN0dXJlKGUsIHNlbGYpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtlXSBFdmVudCBvYmplY3QgZmlyZWQgb24gRXZlbnQuanMgZHJhZ1xuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtzZWxmXSBJbm5lciBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfb25EcmFnOiBmdW5jdGlvbihlLCBzZWxmKSB7XG4gICAgICB0aGlzLl9fb25EcmFnICYmIHRoaXMuX19vbkRyYWcoZSwgc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IG9iamVjdCBmaXJlZCBvbiB3aGVlbCBldmVudFxuICAgICAqL1xuICAgIF9vbk1vdXNlV2hlZWw6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuX19vbk1vdXNlV2hlZWwoZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2Vkb3duXG4gICAgICovXG4gICAgX29uTW91c2VPdXQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl9ob3ZlcmVkVGFyZ2V0O1xuICAgICAgdGhpcy5maXJlKCdtb3VzZTpvdXQnLCB7IHRhcmdldDogdGFyZ2V0LCBlOiBlIH0pO1xuICAgICAgdGhpcy5faG92ZXJlZFRhcmdldCA9IG51bGw7XG4gICAgICB0YXJnZXQgJiYgdGFyZ2V0LmZpcmUoJ21vdXNlb3V0JywgeyBlOiBlIH0pO1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5faG92ZXJlZFRhcmdldHMuZm9yRWFjaChmdW5jdGlvbihfdGFyZ2V0KXtcbiAgICAgICAgX3RoaXMuZmlyZSgnbW91c2U6b3V0JywgeyB0YXJnZXQ6IHRhcmdldCwgZTogZSB9KTtcbiAgICAgICAgX3RhcmdldCAmJiB0YXJnZXQuZmlyZSgnbW91c2VvdXQnLCB7IGU6IGUgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXRzID0gW107XG5cbiAgICAgIGlmICh0aGlzLl9pVGV4dEluc3RhbmNlcykge1xuICAgICAgICB0aGlzLl9pVGV4dEluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgIGlmIChvYmouaXNFZGl0aW5nKSB7XG4gICAgICAgICAgICBvYmouaGlkZGVuVGV4dGFyZWEuZm9jdXMoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZW50ZXJcbiAgICAgKi9cbiAgICBfb25Nb3VzZUVudGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAvLyBUaGlzIGZpbmQgdGFyZ2V0IGFuZCBjb25zZXF1ZW50ICdtb3VzZTpvdmVyJyBpcyB1c2VkIHRvXG4gICAgICAvLyBjbGVhciBvbGQgaW5zdGFuY2VzIG9uIGhvdmVyZWQgdGFyZ2V0LlxuICAgICAgLy8gY2FsbGluZyBmaW5kVGFyZ2V0IGhhcyB0aGUgc2lkZSBlZmZlY3Qgb2Yga2lsbGluZyB0YXJnZXQuX19jb3JuZXIuXG4gICAgICAvLyBhcyBhIHNob3J0IHRlcm0gZml4IHdlIGFyZSBub3QgZmlyaW5nIHRoaXMgaWYgd2UgYXJlIGN1cnJlbnRseSB0cmFuc2Zvcm1pbmcuXG4gICAgICAvLyBhcyBhIGxvbmcgdGVybSBmaXggd2UgbmVlZCB0byBzZXBhcmF0ZSB0aGUgYWN0aW9uIG9mIGZpbmRpbmcgYSB0YXJnZXQgd2l0aCB0aGVcbiAgICAgIC8vIHNpZGUgZWZmZWN0cyB3ZSBhZGRlZCB0byBpdC5cbiAgICAgIGlmICghdGhpcy5fY3VycmVudFRyYW5zZm9ybSAmJiAhdGhpcy5maW5kVGFyZ2V0KGUpKSB7XG4gICAgICAgIHRoaXMuZmlyZSgnbW91c2U6b3ZlcicsIHsgdGFyZ2V0OiBudWxsLCBlOiBlIH0pO1xuICAgICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faG92ZXJlZFRhcmdldHMgPSBbXTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgb2JqZWN0IGZpcmVkIG9uIEV2ZW50LmpzIG9yaWVudGF0aW9uIGNoYW5nZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtzZWxmXSBJbm5lciBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfb25PcmllbnRhdGlvbkNoYW5nZTogZnVuY3Rpb24oZSwgc2VsZikge1xuICAgICAgdGhpcy5fX29uT3JpZW50YXRpb25DaGFuZ2UgJiYgdGhpcy5fX29uT3JpZW50YXRpb25DaGFuZ2UoZSwgc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBFdmVudC5qcyBzaGFrZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtzZWxmXSBJbm5lciBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfb25TaGFrZTogZnVuY3Rpb24oZSwgc2VsZikge1xuICAgICAgdGhpcy5fX29uU2hha2UgJiYgdGhpcy5fX29uU2hha2UoZSwgc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gW2VdIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBFdmVudC5qcyBzaGFrZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IFtzZWxmXSBJbm5lciBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBfb25Mb25nUHJlc3M6IGZ1bmN0aW9uKGUsIHNlbGYpIHtcbiAgICAgIHRoaXMuX19vbkxvbmdQcmVzcyAmJiB0aGlzLl9fb25Mb25nUHJlc3MoZSwgc2VsZik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHByZXZlbnQgZGVmYXVsdCB0byBhbGxvdyBkcm9wIGV2ZW50IHRvIGJlIGZpcmVkXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbZV0gRXZlbnQgb2JqZWN0IGZpcmVkIG9uIEV2ZW50LmpzIHNoYWtlXG4gICAgICovXG4gICAgX29uRHJhZ092ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl9zaW1wbGVFdmVudEhhbmRsZXIoJ2RyYWdvdmVyJywgZSk7XG4gICAgICB0aGlzLl9maXJlRW50ZXJMZWF2ZUV2ZW50cyh0YXJnZXQsIGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBgZHJvcDpiZWZvcmVgIGlzIGEgYW4gZXZlbnQgdGhhdCBhbGxvdyB5b3UgdG8gc2NoZWR1bGUgbG9naWNcbiAgICAgKiBiZWZvcmUgdGhlIGBkcm9wYCBldmVudC4gUHJlZmVyIGBkcm9wYCBldmVudCBhbHdheXMsIGJ1dCBpZiB5b3UgbmVlZFxuICAgICAqIHRvIHJ1biBzb21lIGRyb3AtZGlzYWJsaW5nIGxvZ2ljIG9uIGFuIGV2ZW50LCBzaW5jZSB0aGVyZSBpcyBubyB3YXlcbiAgICAgKiB0byBoYW5kbGUgZXZlbnQgaGFuZGxlcnMgb3JkZXJpbmcsIHVzZSBgZHJvcDpiZWZvcmVgXG4gICAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgICAqL1xuICAgIF9vbkRyb3A6IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0aGlzLl9zaW1wbGVFdmVudEhhbmRsZXIoJ2Ryb3A6YmVmb3JlJywgZSk7XG4gICAgICByZXR1cm4gdGhpcy5fc2ltcGxlRXZlbnRIYW5kbGVyKCdkcm9wJywgZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2Vkb3duXG4gICAgICovXG4gICAgX29uQ29udGV4dE1lbnU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAodGhpcy5zdG9wQ29udGV4dE1lbnUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9vbkRvdWJsZUNsaWNrOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5fY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEoZSk7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnZGJsY2xpY2snKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSB0aGUgaWQgb2YgYW4gZXZlbnQuXG4gICAgICogcmV0dXJucyBlaXRoZXIgdGhlIHBvaW50ZXJJZCBvciB0aGUgaWRlbnRpZmllciBvciAwIGZvciB0aGUgbW91c2UgZXZlbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2dCBFdmVudCBvYmplY3RcbiAgICAgKi9cbiAgICBnZXRQb2ludGVySWQ6IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgdmFyIGNoYW5nZWRUb3VjaGVzID0gZXZ0LmNoYW5nZWRUb3VjaGVzO1xuXG4gICAgICBpZiAoY2hhbmdlZFRvdWNoZXMpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZWRUb3VjaGVzWzBdICYmIGNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmVuYWJsZVBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgcmV0dXJuIGV2dC5wb2ludGVySWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhbiBldmVudCBoYXMgdGhlIGlkIG9mIHRoZSBldmVudCB0aGF0IGlzIGNvbnNpZGVyZWQgbWFpblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtldnR9IGV2ZW50IEV2ZW50IG9iamVjdFxuICAgICAqL1xuICAgIF9pc01haW5FdmVudDogZnVuY3Rpb24oZXZ0KSB7XG4gICAgICBpZiAoZXZ0LmlzUHJpbWFyeSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChldnQuaXNQcmltYXJ5ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZXZ0LnR5cGUgPT09ICd0b3VjaGVuZCcgJiYgZXZ0LnRvdWNoZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGV2dC5jaGFuZ2VkVG91Y2hlcykge1xuICAgICAgICByZXR1cm4gZXZ0LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXIgPT09IHRoaXMubWFpblRvdWNoSWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBtb3VzZWRvd25cbiAgICAgKi9cbiAgICBfb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbihlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAodGhpcy5tYWluVG91Y2hJZCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLm1haW5Ub3VjaElkID0gdGhpcy5nZXRQb2ludGVySWQoZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9fb25Nb3VzZURvd24oZSk7XG4gICAgICB0aGlzLl9yZXNldFRyYW5zZm9ybUV2ZW50RGF0YSgpO1xuICAgICAgdmFyIGNhbnZhc0VsZW1lbnQgPSB0aGlzLnVwcGVyQ2FudmFzRWwsXG4gICAgICAgICAgZXZlbnRUeXBlUHJlZml4ID0gdGhpcy5fZ2V0RXZlbnRQcmVmaXgoKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy5fb25Ub3VjaEVuZCwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgJ3RvdWNobW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgLy8gVW5iaW5kIG1vdXNlZG93biB0byBwcmV2ZW50IGRvdWJsZSB0cmlnZ2VycyBmcm9tIHRvdWNoIGRldmljZXNcbiAgICAgIHJlbW92ZUxpc3RlbmVyKGNhbnZhc0VsZW1lbnQsIGV2ZW50VHlwZVByZWZpeCArICdkb3duJywgdGhpcy5fb25Nb3VzZURvd24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9vbk1vdXNlRG93bjogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuX19vbk1vdXNlRG93bihlKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKCk7XG4gICAgICB2YXIgY2FudmFzRWxlbWVudCA9IHRoaXMudXBwZXJDYW52YXNFbCxcbiAgICAgICAgICBldmVudFR5cGVQcmVmaXggPSB0aGlzLl9nZXRFdmVudFByZWZpeCgpO1xuICAgICAgcmVtb3ZlTGlzdGVuZXIoY2FudmFzRWxlbWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ21vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ3VwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgIGFkZExpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ21vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBtb3VzZWRvd25cbiAgICAgKi9cbiAgICBfb25Ub3VjaEVuZDogZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGFyZSBzdGlsbCB0b3VjaGVzIHN0b3AgaGVyZVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9fb25Nb3VzZVVwKGUpO1xuICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICAgIHRoaXMubWFpblRvdWNoSWQgPSBudWxsO1xuICAgICAgdmFyIGV2ZW50VHlwZVByZWZpeCA9IHRoaXMuX2dldEV2ZW50UHJlZml4KCk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uVG91Y2hFbmQsIGFkZEV2ZW50T3B0aW9ucyk7XG4gICAgICByZW1vdmVMaXN0ZW5lcihmYWJyaWMuZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgYWRkRXZlbnRPcHRpb25zKTtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAodGhpcy5fd2lsbEFkZE1vdXNlRG93bikge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fd2lsbEFkZE1vdXNlRG93bik7XG4gICAgICB9XG4gICAgICB0aGlzLl93aWxsQWRkTW91c2VEb3duID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2FpdCA0MDBtcyBiZWZvcmUgcmViaW5kaW5nIG1vdXNlZG93biB0byBwcmV2ZW50IGRvdWJsZSB0cmlnZ2Vyc1xuICAgICAgICAvLyBmcm9tIHRvdWNoIGRldmljZXNcbiAgICAgICAgYWRkTGlzdGVuZXIoX3RoaXMudXBwZXJDYW52YXNFbCwgZXZlbnRUeXBlUHJlZml4ICsgJ2Rvd24nLCBfdGhpcy5fb25Nb3VzZURvd24pO1xuICAgICAgICBfdGhpcy5fd2lsbEFkZE1vdXNlRG93biA9IDA7XG4gICAgICB9LCA0MDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNldXBcbiAgICAgKi9cbiAgICBfb25Nb3VzZVVwOiBmdW5jdGlvbiAoZSkge1xuICAgICAgdGhpcy5fX29uTW91c2VVcChlKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKCk7XG4gICAgICB2YXIgY2FudmFzRWxlbWVudCA9IHRoaXMudXBwZXJDYW52YXNFbCxcbiAgICAgICAgICBldmVudFR5cGVQcmVmaXggPSB0aGlzLl9nZXRFdmVudFByZWZpeCgpO1xuICAgICAgaWYgKHRoaXMuX2lzTWFpbkV2ZW50KGUpKSB7XG4gICAgICAgIHJlbW92ZUxpc3RlbmVyKGZhYnJpYy5kb2N1bWVudCwgZXZlbnRUeXBlUHJlZml4ICsgJ3VwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoZmFicmljLmRvY3VtZW50LCBldmVudFR5cGVQcmVmaXggKyAnbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgICBhZGRMaXN0ZW5lcihjYW52YXNFbGVtZW50LCBldmVudFR5cGVQcmVmaXggKyAnbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBhZGRFdmVudE9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlbW92ZVxuICAgICAqL1xuICAgIF9vbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICF0aGlzLmFsbG93VG91Y2hTY3JvbGxpbmcgJiYgZS5wcmV2ZW50RGVmYXVsdCAmJiBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9fb25Nb3VzZU1vdmUoZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX29uUmVzaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbGNPZmZzZXQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVjaWRlcyB3aGV0aGVyIHRoZSBjYW52YXMgc2hvdWxkIGJlIHJlZHJhd24gaW4gbW91c2V1cCBhbmQgbW91c2Vkb3duIGV2ZW50cy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcbiAgICAgKi9cbiAgICBfc2hvdWxkUmVuZGVyOiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgIHZhciBhY3RpdmVPYmplY3QgPSB0aGlzLl9hY3RpdmVPYmplY3Q7XG5cbiAgICAgIGlmIChcbiAgICAgICAgISFhY3RpdmVPYmplY3QgIT09ICEhdGFyZ2V0IHx8XG4gICAgICAgIChhY3RpdmVPYmplY3QgJiYgdGFyZ2V0ICYmIChhY3RpdmVPYmplY3QgIT09IHRhcmdldCkpXG4gICAgICApIHtcbiAgICAgICAgLy8gdGhpcyBjb3ZlcnM6IHN3aXRjaCBvZiB0YXJnZXQsIGZyb20gdGFyZ2V0IHRvIG5vIHRhcmdldCwgc2VsZWN0aW9uIG9mIHRhcmdldFxuICAgICAgICAvLyBtdWx0aVNlbGVjdGlvbiB3aXRoIGtleSBhbmQgbW91c2VcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhY3RpdmVPYmplY3QgJiYgYWN0aXZlT2JqZWN0LmlzRWRpdGluZykge1xuICAgICAgICAvLyBpZiB3ZSBtb3VzZSB1cC9kb3duIG92ZXIgYSBlZGl0aW5nIHRleHRib3ggYSBjdXJzb3IgY2hhbmdlLFxuICAgICAgICAvLyB0aGVyZSBpcyBubyBuZWVkIHRvIHJlIHJlbmRlclxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlZmluZXMgdGhlIGFjdGlvbnMgd2hlbiBtb3VzZSBpcyByZWxlYXNlZCBvbiBjYW52YXMuXG4gICAgICogVGhlIG1ldGhvZCByZXNldHMgdGhlIGN1cnJlbnRUcmFuc2Zvcm0gcGFyYW1ldGVycywgc3RvcmUgdGhlIGltYWdlIGNvcm5lclxuICAgICAqIHBvc2l0aW9uIGluIHRoZSBpbWFnZSBvYmplY3QgYW5kIHJlbmRlciB0aGUgY2FudmFzIG9uIHRvcC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNldXBcbiAgICAgKi9cbiAgICBfX29uTW91c2VVcDogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciB0YXJnZXQsIHRyYW5zZm9ybSA9IHRoaXMuX2N1cnJlbnRUcmFuc2Zvcm0sXG4gICAgICAgICAgZ3JvdXBTZWxlY3RvciA9IHRoaXMuX2dyb3VwU2VsZWN0b3IsIHNob3VsZFJlbmRlciA9IGZhbHNlLFxuICAgICAgICAgIGlzQ2xpY2sgPSAoIWdyb3VwU2VsZWN0b3IgfHwgKGdyb3VwU2VsZWN0b3IubGVmdCA9PT0gMCAmJiBncm91cFNlbGVjdG9yLnRvcCA9PT0gMCkpO1xuICAgICAgdGhpcy5fY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEoZSk7XG4gICAgICB0YXJnZXQgPSB0aGlzLl90YXJnZXQ7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAndXA6YmVmb3JlJyk7XG4gICAgICAvLyBpZiByaWdodC9taWRkbGUgY2xpY2sganVzdCBmaXJlIGV2ZW50cyBhbmQgcmV0dXJuXG4gICAgICAvLyB0YXJnZXQgdW5kZWZpbmVkIHdpbGwgbWFrZSB0aGUgX2hhbmRsZUV2ZW50IHNlYXJjaCB0aGUgdGFyZ2V0XG4gICAgICBpZiAoY2hlY2tDbGljayhlLCBSSUdIVF9DTElDSykpIHtcbiAgICAgICAgaWYgKHRoaXMuZmlyZVJpZ2h0Q2xpY2spIHtcbiAgICAgICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAndXAnLCBSSUdIVF9DTElDSywgaXNDbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2hlY2tDbGljayhlLCBNSURETEVfQ0xJQ0spKSB7XG4gICAgICAgIGlmICh0aGlzLmZpcmVNaWRkbGVDbGljaykge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICd1cCcsIE1JRERMRV9DTElDSywgaXNDbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0RyYXdpbmdNb2RlICYmIHRoaXMuX2lzQ3VycmVudGx5RHJhd2luZykge1xuICAgICAgICB0aGlzLl9vbk1vdXNlVXBJbkRyYXdpbmdNb2RlKGUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faXNNYWluRXZlbnQoZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICB0aGlzLl9maW5hbGl6ZUN1cnJlbnRUcmFuc2Zvcm0oZSk7XG4gICAgICAgIHNob3VsZFJlbmRlciA9IHRyYW5zZm9ybS5hY3Rpb25QZXJmb3JtZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzQ2xpY2spIHtcbiAgICAgICAgdmFyIHRhcmdldFdhc0FjdGl2ZSA9IHRhcmdldCA9PT0gdGhpcy5fYWN0aXZlT2JqZWN0O1xuICAgICAgICB0aGlzLl9tYXliZUdyb3VwT2JqZWN0cyhlKTtcbiAgICAgICAgaWYgKCFzaG91bGRSZW5kZXIpIHtcbiAgICAgICAgICBzaG91bGRSZW5kZXIgPSAoXG4gICAgICAgICAgICB0aGlzLl9zaG91bGRSZW5kZXIodGFyZ2V0KSB8fFxuICAgICAgICAgICAgKCF0YXJnZXRXYXNBY3RpdmUgJiYgdGFyZ2V0ID09PSB0aGlzLl9hY3RpdmVPYmplY3QpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGNvcm5lciwgcG9pbnRlcjtcbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgY29ybmVyID0gdGFyZ2V0Ll9maW5kVGFyZ2V0Q29ybmVyKFxuICAgICAgICAgIHRoaXMuZ2V0UG9pbnRlcihlLCB0cnVlKSxcbiAgICAgICAgICBmYWJyaWMudXRpbC5pc1RvdWNoRXZlbnQoZSlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRhcmdldC5zZWxlY3RhYmxlICYmIHRhcmdldCAhPT0gdGhpcy5fYWN0aXZlT2JqZWN0ICYmIHRhcmdldC5hY3RpdmVPbiA9PT0gJ3VwJykge1xuICAgICAgICAgIHRoaXMuc2V0QWN0aXZlT2JqZWN0KHRhcmdldCwgZSk7XG4gICAgICAgICAgc2hvdWxkUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgY29udHJvbCA9IHRhcmdldC5jb250cm9sc1tjb3JuZXJdLFxuICAgICAgICAgICAgICBtb3VzZVVwSGFuZGxlciA9IGNvbnRyb2wgJiYgY29udHJvbC5nZXRNb3VzZVVwSGFuZGxlcihlLCB0YXJnZXQsIGNvbnRyb2wpO1xuICAgICAgICAgIGlmIChtb3VzZVVwSGFuZGxlcikge1xuICAgICAgICAgICAgcG9pbnRlciA9IHRoaXMuZ2V0UG9pbnRlcihlKTtcbiAgICAgICAgICAgIG1vdXNlVXBIYW5kbGVyKGUsIHRyYW5zZm9ybSwgcG9pbnRlci54LCBwb2ludGVyLnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0YXJnZXQuaXNNb3ZpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHdlIGFyZSBlbmRpbmcgdXAgYSB0cmFuc2Zvcm0gb24gYSBkaWZmZXJlbnQgY29udHJvbCBvciBhIG5ldyBvYmplY3RcbiAgICAgIC8vIGZpcmUgdGhlIG9yaWdpbmFsIG1vdXNlIHVwIGZyb20gdGhlIGNvcm5lciB0aGF0IHN0YXJ0ZWQgdGhlIHRyYW5zZm9ybVxuICAgICAgaWYgKHRyYW5zZm9ybSAmJiAodHJhbnNmb3JtLnRhcmdldCAhPT0gdGFyZ2V0IHx8IHRyYW5zZm9ybS5jb3JuZXIgIT09IGNvcm5lcikpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsQ29udHJvbCA9IHRyYW5zZm9ybS50YXJnZXQgJiYgdHJhbnNmb3JtLnRhcmdldC5jb250cm9sc1t0cmFuc2Zvcm0uY29ybmVyXSxcbiAgICAgICAgICAgIG9yaWdpbmFsTW91c2VVcEhhbmRsZXIgPSBvcmlnaW5hbENvbnRyb2wgJiYgb3JpZ2luYWxDb250cm9sLmdldE1vdXNlVXBIYW5kbGVyKGUsIHRhcmdldCwgY29udHJvbCk7XG4gICAgICAgIHBvaW50ZXIgPSBwb2ludGVyIHx8IHRoaXMuZ2V0UG9pbnRlcihlKTtcbiAgICAgICAgb3JpZ2luYWxNb3VzZVVwSGFuZGxlciAmJiBvcmlnaW5hbE1vdXNlVXBIYW5kbGVyKGUsIHRyYW5zZm9ybSwgcG9pbnRlci54LCBwb2ludGVyLnkpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0Q3Vyc29yRnJvbUV2ZW50KGUsIHRhcmdldCk7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAndXAnLCBMRUZUX0NMSUNLLCBpc0NsaWNrKTtcbiAgICAgIHRoaXMuX2dyb3VwU2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fY3VycmVudFRyYW5zZm9ybSA9IG51bGw7XG4gICAgICAvLyByZXNldCB0aGUgdGFyZ2V0IGluZm9ybWF0aW9uIGFib3V0IHdoaWNoIGNvcm5lciBpcyBzZWxlY3RlZFxuICAgICAgdGFyZ2V0ICYmICh0YXJnZXQuX19jb3JuZXIgPSAwKTtcbiAgICAgIGlmIChzaG91bGRSZW5kZXIpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghaXNDbGljaykge1xuICAgICAgICB0aGlzLnJlbmRlclRvcCgpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEhhbmRsZSBldmVudCBmaXJpbmcgZm9yIHRhcmdldCBhbmQgc3VidGFyZ2V0c1xuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgZXZlbnQgZnJvbSBtb3VzZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFR5cGUgZXZlbnQgdG8gZmlyZSAodXAsIGRvd24gb3IgbW92ZSlcbiAgICAgKiBAcmV0dXJuIHtGYWJyaWMuT2JqZWN0fSB0YXJnZXQgcmV0dXJuIHRoZSB0aGUgdGFyZ2V0IGZvdW5kLCBmb3IgaW50ZXJuYWwgcmVhc29ucy5cbiAgICAgKi9cbiAgICBfc2ltcGxlRXZlbnRIYW5kbGVyOiBmdW5jdGlvbihldmVudFR5cGUsIGUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLmZpbmRUYXJnZXQoZSksXG4gICAgICAgICAgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyxcbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgZTogZSxcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgc3ViVGFyZ2V0czogdGFyZ2V0cyxcbiAgICAgICAgICB9O1xuICAgICAgdGhpcy5maXJlKGV2ZW50VHlwZSwgb3B0aW9ucyk7XG4gICAgICB0YXJnZXQgJiYgdGFyZ2V0LmZpcmUoZXZlbnRUeXBlLCBvcHRpb25zKTtcbiAgICAgIGlmICghdGFyZ2V0cykge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRhcmdldHNbaV0uZmlyZShldmVudFR5cGUsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBIYW5kbGUgZXZlbnQgZmlyaW5nIGZvciB0YXJnZXQgYW5kIHN1YnRhcmdldHNcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIGV2ZW50IGZyb20gbW91c2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRUeXBlIGV2ZW50IHRvIGZpcmUgKHVwLCBkb3duIG9yIG1vdmUpXG4gICAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSB0YXJnZXRPYmogcmVjZWl2aW5nIGV2ZW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtidXR0b25dIGJ1dHRvbiB1c2VkIGluIHRoZSBldmVudCAxID0gbGVmdCwgMiA9IG1pZGRsZSwgMyA9IHJpZ2h0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpc0NsaWNrIGZvciBsZWZ0IGJ1dHRvbiBvbmx5LCBpbmRpY2F0ZXMgdGhhdCB0aGUgbW91c2UgdXAgaGFwcGVuZWQgd2l0aG91dCBtb3ZlLlxuICAgICAqL1xuICAgIF9oYW5kbGVFdmVudDogZnVuY3Rpb24oZSwgZXZlbnRUeXBlLCBidXR0b24sIGlzQ2xpY2spIHtcbiAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQsXG4gICAgICAgICAgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyB8fCBbXSxcbiAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgZTogZSxcbiAgICAgICAgICAgIHRhcmdldDogdGFyZ2V0LFxuICAgICAgICAgICAgc3ViVGFyZ2V0czogdGFyZ2V0cyxcbiAgICAgICAgICAgIGJ1dHRvbjogYnV0dG9uIHx8IExFRlRfQ0xJQ0ssXG4gICAgICAgICAgICBpc0NsaWNrOiBpc0NsaWNrIHx8IGZhbHNlLFxuICAgICAgICAgICAgcG9pbnRlcjogdGhpcy5fcG9pbnRlcixcbiAgICAgICAgICAgIGFic29sdXRlUG9pbnRlcjogdGhpcy5fYWJzb2x1dGVQb2ludGVyLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0aGlzLl9jdXJyZW50VHJhbnNmb3JtXG4gICAgICAgICAgfTtcbiAgICAgIGlmIChldmVudFR5cGUgPT09ICd1cCcpIHtcbiAgICAgICAgb3B0aW9ucy5jdXJyZW50VGFyZ2V0ID0gdGhpcy5maW5kVGFyZ2V0KGUpO1xuICAgICAgICBvcHRpb25zLmN1cnJlbnRTdWJUYXJnZXRzID0gdGhpcy50YXJnZXRzO1xuICAgICAgfVxuICAgICAgdGhpcy5maXJlKCdtb3VzZTonICsgZXZlbnRUeXBlLCBvcHRpb25zKTtcbiAgICAgIHRhcmdldCAmJiB0YXJnZXQuZmlyZSgnbW91c2UnICsgZXZlbnRUeXBlLCBvcHRpb25zKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0YXJnZXRzW2ldLmZpcmUoJ21vdXNlJyArIGV2ZW50VHlwZSwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBzZW5kIHRoZSBtb3VzZSBldmVudCB0aGF0IGdlbmVyYXRlIHRoZSBmaW5hbGl6ZSBkb3duLCBzbyBpdCBjYW4gYmUgdXNlZCBpbiB0aGUgZXZlbnRcbiAgICAgKi9cbiAgICBfZmluYWxpemVDdXJyZW50VHJhbnNmb3JtOiBmdW5jdGlvbihlKSB7XG5cbiAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLl9jdXJyZW50VHJhbnNmb3JtLFxuICAgICAgICAgIHRhcmdldCA9IHRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGU6IGUsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgICAgYWN0aW9uOiB0cmFuc2Zvcm0uYWN0aW9uLFxuICAgICAgICAgIH07XG5cbiAgICAgIGlmICh0YXJnZXQuX3NjYWxpbmcpIHtcbiAgICAgICAgdGFyZ2V0Ll9zY2FsaW5nID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldC5zZXRDb29yZHMoKTtcblxuICAgICAgaWYgKHRyYW5zZm9ybS5hY3Rpb25QZXJmb3JtZWQgfHwgKHRoaXMuc3RhdGVmdWwgJiYgdGFyZ2V0Lmhhc1N0YXRlQ2hhbmdlZCgpKSkge1xuICAgICAgICB0aGlzLl9maXJlKCdtb2RpZmllZCcsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9vbk1vdXNlRG93bkluRHJhd2luZ01vZGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHRoaXMuX2lzQ3VycmVudGx5RHJhd2luZyA9IHRydWU7XG4gICAgICBpZiAodGhpcy5nZXRBY3RpdmVPYmplY3QoKSkge1xuICAgICAgICB0aGlzLmRpc2NhcmRBY3RpdmVPYmplY3QoZSkucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgfVxuICAgICAgdmFyIHBvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSk7XG4gICAgICB0aGlzLmZyZWVEcmF3aW5nQnJ1c2gub25Nb3VzZURvd24ocG9pbnRlciwgeyBlOiBlLCBwb2ludGVyOiBwb2ludGVyIH0pO1xuICAgICAgdGhpcy5faGFuZGxlRXZlbnQoZSwgJ2Rvd24nKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBtb3VzZW1vdmVcbiAgICAgKi9cbiAgICBfb25Nb3VzZU1vdmVJbkRyYXdpbmdNb2RlOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGhpcy5faXNDdXJyZW50bHlEcmF3aW5nKSB7XG4gICAgICAgIHZhciBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpO1xuICAgICAgICB0aGlzLmZyZWVEcmF3aW5nQnJ1c2gub25Nb3VzZU1vdmUocG9pbnRlciwgeyBlOiBlLCBwb2ludGVyOiBwb2ludGVyIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRDdXJzb3IodGhpcy5mcmVlRHJhd2luZ0N1cnNvcik7XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnbW92ZScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNldXBcbiAgICAgKi9cbiAgICBfb25Nb3VzZVVwSW5EcmF3aW5nTW9kZTogZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSk7XG4gICAgICB0aGlzLl9pc0N1cnJlbnRseURyYXdpbmcgPSB0aGlzLmZyZWVEcmF3aW5nQnJ1c2gub25Nb3VzZVVwKHsgZTogZSwgcG9pbnRlcjogcG9pbnRlciB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICd1cCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZXRob2QgdGhhdCBkZWZpbmVzIHRoZSBhY3Rpb25zIHdoZW4gbW91c2UgaXMgY2xpY2tlZCBvbiBjYW52YXMuXG4gICAgICogVGhlIG1ldGhvZCBpbml0cyB0aGUgY3VycmVudFRyYW5zZm9ybSBwYXJhbWV0ZXJzIGFuZCByZW5kZXJzIGFsbCB0aGVcbiAgICAgKiBjYW52YXMgc28gdGhlIGN1cnJlbnQgaW1hZ2UgY2FuIGJlIHBsYWNlZCBvbiB0aGUgdG9wIGNhbnZhcyBhbmQgdGhlIHJlc3RcbiAgICAgKiBpbiBvbiB0aGUgY29udGFpbmVyIG9uZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG1vdXNlZG93blxuICAgICAqL1xuICAgIF9fb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKSB7XG4gICAgICB0aGlzLl9jYWNoZVRyYW5zZm9ybUV2ZW50RGF0YShlKTtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICdkb3duOmJlZm9yZScpO1xuICAgICAgdmFyIHRhcmdldCA9IHRoaXMuX3RhcmdldDtcbiAgICAgIC8vIGlmIHJpZ2h0IGNsaWNrIGp1c3QgZmlyZSBldmVudHNcbiAgICAgIGlmIChjaGVja0NsaWNrKGUsIFJJR0hUX0NMSUNLKSkge1xuICAgICAgICBpZiAodGhpcy5maXJlUmlnaHRDbGljaykge1xuICAgICAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICdkb3duJywgUklHSFRfQ0xJQ0spO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoZWNrQ2xpY2soZSwgTUlERExFX0NMSUNLKSkge1xuICAgICAgICBpZiAodGhpcy5maXJlTWlkZGxlQ2xpY2spIHtcbiAgICAgICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnZG93bicsIE1JRERMRV9DTElDSyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAgIHRoaXMuX29uTW91c2VEb3duSW5EcmF3aW5nTW9kZShlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzTWFpbkV2ZW50KGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gaWdub3JlIGlmIHNvbWUgb2JqZWN0IGlzIGJlaW5nIHRyYW5zZm9ybWVkIGF0IHRoaXMgbW9tZW50XG4gICAgICBpZiAodGhpcy5fY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwb2ludGVyID0gdGhpcy5fcG9pbnRlcjtcbiAgICAgIC8vIHNhdmUgcG9pbnRlciBmb3IgY2hlY2sgaW4gX19vbk1vdXNlVXAgZXZlbnRcbiAgICAgIHRoaXMuX3ByZXZpb3VzUG9pbnRlciA9IHBvaW50ZXI7XG4gICAgICB2YXIgc2hvdWxkUmVuZGVyID0gdGhpcy5fc2hvdWxkUmVuZGVyKHRhcmdldCksXG4gICAgICAgICAgc2hvdWxkR3JvdXAgPSB0aGlzLl9zaG91bGRHcm91cChlLCB0YXJnZXQpO1xuICAgICAgaWYgKHRoaXMuX3Nob3VsZENsZWFyU2VsZWN0aW9uKGUsIHRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5kaXNjYXJkQWN0aXZlT2JqZWN0KGUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoc2hvdWxkR3JvdXApIHtcbiAgICAgICAgdGhpcy5faGFuZGxlR3JvdXBpbmcoZSwgdGFyZ2V0KTtcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy5fYWN0aXZlT2JqZWN0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb24gJiYgKCF0YXJnZXQgfHxcbiAgICAgICAgKCF0YXJnZXQuc2VsZWN0YWJsZSAmJiAhdGFyZ2V0LmlzRWRpdGluZyAmJiB0YXJnZXQgIT09IHRoaXMuX2FjdGl2ZU9iamVjdCkpKSB7XG4gICAgICAgIHRoaXMuX2dyb3VwU2VsZWN0b3IgPSB7XG4gICAgICAgICAgZXg6IHRoaXMuX2Fic29sdXRlUG9pbnRlci54LFxuICAgICAgICAgIGV5OiB0aGlzLl9hYnNvbHV0ZVBvaW50ZXIueSxcbiAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgbGVmdDogMFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHZhciBhbHJlYWR5U2VsZWN0ZWQgPSB0YXJnZXQgPT09IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgICAgaWYgKHRhcmdldC5zZWxlY3RhYmxlICYmIHRhcmdldC5hY3RpdmVPbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgdGhpcy5zZXRBY3RpdmVPYmplY3QodGFyZ2V0LCBlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ybmVyID0gdGFyZ2V0Ll9maW5kVGFyZ2V0Q29ybmVyKFxuICAgICAgICAgIHRoaXMuZ2V0UG9pbnRlcihlLCB0cnVlKSxcbiAgICAgICAgICBmYWJyaWMudXRpbC5pc1RvdWNoRXZlbnQoZSlcbiAgICAgICAgKTtcbiAgICAgICAgdGFyZ2V0Ll9fY29ybmVyID0gY29ybmVyO1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB0aGlzLl9hY3RpdmVPYmplY3QgJiYgKGNvcm5lciB8fCAhc2hvdWxkR3JvdXApKSB7XG4gICAgICAgICAgdGhpcy5fc2V0dXBDdXJyZW50VHJhbnNmb3JtKGUsIHRhcmdldCwgYWxyZWFkeVNlbGVjdGVkKTtcbiAgICAgICAgICB2YXIgY29udHJvbCA9IHRhcmdldC5jb250cm9sc1tjb3JuZXJdLFxuICAgICAgICAgICAgICBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpLFxuICAgICAgICAgICAgICBtb3VzZURvd25IYW5kbGVyID0gY29udHJvbCAmJiBjb250cm9sLmdldE1vdXNlRG93bkhhbmRsZXIoZSwgdGFyZ2V0LCBjb250cm9sKTtcbiAgICAgICAgICBpZiAobW91c2VEb3duSGFuZGxlcikge1xuICAgICAgICAgICAgbW91c2VEb3duSGFuZGxlcihlLCB0aGlzLl9jdXJyZW50VHJhbnNmb3JtLCBwb2ludGVyLngsIHBvaW50ZXIueSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9oYW5kbGVFdmVudChlLCAnZG93bicpO1xuICAgICAgLy8gd2UgbXVzdCByZW5kZXJBbGwgc28gdGhhdCB3ZSB1cGRhdGUgdGhlIHZpc3VhbHNcbiAgICAgIChzaG91bGRSZW5kZXIgfHwgc2hvdWxkR3JvdXApICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXNldCBjYWNoZSBmb3JtIGNvbW1vbiBpbmZvcm1hdGlvbiBuZWVkZWQgZHVyaW5nIGV2ZW50IHByb2Nlc3NpbmdcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZXNldFRyYW5zZm9ybUV2ZW50RGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fcG9pbnRlciA9IG51bGw7XG4gICAgICB0aGlzLl9hYnNvbHV0ZVBvaW50ZXIgPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWNoZSBjb21tb24gaW5mb3JtYXRpb24gbmVlZGVkIGR1cmluZyBldmVudCBwcm9jZXNzaW5nXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdCBmaXJlZCBvbiBldmVudFxuICAgICAqL1xuICAgIF9jYWNoZVRyYW5zZm9ybUV2ZW50RGF0YTogZnVuY3Rpb24oZSkge1xuICAgICAgLy8gcmVzZXQgaW4gb3JkZXIgdG8gYXZvaWQgc3RhbGUgY2FjaGluZ1xuICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICAgIHRoaXMuX3BvaW50ZXIgPSB0aGlzLmdldFBvaW50ZXIoZSwgdHJ1ZSk7XG4gICAgICB0aGlzLl9hYnNvbHV0ZVBvaW50ZXIgPSB0aGlzLnJlc3RvcmVQb2ludGVyVnB0KHRoaXMuX3BvaW50ZXIpO1xuICAgICAgdGhpcy5fdGFyZ2V0ID0gdGhpcy5fY3VycmVudFRyYW5zZm9ybSA/IHRoaXMuX2N1cnJlbnRUcmFuc2Zvcm0udGFyZ2V0IDogdGhpcy5maW5kVGFyZ2V0KGUpIHx8IG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2JlZm9yZVRyYW5zZm9ybTogZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHQgPSB0aGlzLl9jdXJyZW50VHJhbnNmb3JtO1xuICAgICAgdGhpcy5zdGF0ZWZ1bCAmJiB0LnRhcmdldC5zYXZlU3RhdGUoKTtcbiAgICAgIHRoaXMuZmlyZSgnYmVmb3JlOnRyYW5zZm9ybScsIHtcbiAgICAgICAgZTogZSxcbiAgICAgICAgdHJhbnNmb3JtOiB0LFxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlZmluZXMgdGhlIGFjdGlvbnMgd2hlbiBtb3VzZSBpcyBob3ZlcmluZyB0aGUgY2FudmFzLlxuICAgICAqIFRoZSBjdXJyZW50VHJhbnNmb3JtIHBhcmFtZXRlciB3aWxsIGRlZmluZSB3aGV0aGVyIHRoZSB1c2VyIGlzIHJvdGF0aW5nL3NjYWxpbmcvdHJhbnNsYXRpbmdcbiAgICAgKiBhbiBpbWFnZSBvciBuZWl0aGVyIG9mIHRoZW0gKG9ubHkgaG92ZXJpbmcpLiBBIGdyb3VwIHNlbGVjdGlvbiBpcyBhbHNvIHBvc3NpYmxlIGFuZCB3b3VsZCBjYW5jZWxcbiAgICAgKiBhbGwgYW55IG90aGVyIHR5cGUgb2YgYWN0aW9uLlxuICAgICAqIEluIGNhc2Ugb2YgYW4gaW1hZ2UgdHJhbnNmb3JtYXRpb24gb25seSB0aGUgdG9wIGNhbnZhcyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2Vtb3ZlXG4gICAgICovXG4gICAgX19vbk1vdXNlTW92ZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICdtb3ZlOmJlZm9yZScpO1xuICAgICAgdGhpcy5fY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEoZSk7XG4gICAgICB2YXIgdGFyZ2V0LCBwb2ludGVyO1xuXG4gICAgICBpZiAodGhpcy5pc0RyYXdpbmdNb2RlKSB7XG4gICAgICAgIHRoaXMuX29uTW91c2VNb3ZlSW5EcmF3aW5nTW9kZShlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzTWFpbkV2ZW50KGUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGdyb3VwU2VsZWN0b3IgPSB0aGlzLl9ncm91cFNlbGVjdG9yO1xuXG4gICAgICAvLyBXZSBpbml0aWFsbHkgY2xpY2tlZCBpbiBhbiBlbXB0eSBhcmVhLCBzbyB3ZSBkcmF3IGEgYm94IGZvciBtdWx0aXBsZSBzZWxlY3Rpb25cbiAgICAgIGlmIChncm91cFNlbGVjdG9yKSB7XG4gICAgICAgIHBvaW50ZXIgPSB0aGlzLl9hYnNvbHV0ZVBvaW50ZXI7XG5cbiAgICAgICAgZ3JvdXBTZWxlY3Rvci5sZWZ0ID0gcG9pbnRlci54IC0gZ3JvdXBTZWxlY3Rvci5leDtcbiAgICAgICAgZ3JvdXBTZWxlY3Rvci50b3AgPSBwb2ludGVyLnkgLSBncm91cFNlbGVjdG9yLmV5O1xuXG4gICAgICAgIHRoaXMucmVuZGVyVG9wKCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghdGhpcy5fY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICB0YXJnZXQgPSB0aGlzLmZpbmRUYXJnZXQoZSkgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5fc2V0Q3Vyc29yRnJvbUV2ZW50KGUsIHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2ZpcmVPdmVyT3V0RXZlbnRzKHRhcmdldCwgZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtT2JqZWN0KGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5faGFuZGxlRXZlbnQoZSwgJ21vdmUnKTtcbiAgICAgIHRoaXMuX3Jlc2V0VHJhbnNmb3JtRXZlbnREYXRhKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1hbmFnZSB0aGUgbW91c2VvdXQsIG1vdXNlb3ZlciBldmVudHMgZm9yIHRoZSBmYWJyaWMgb2JqZWN0IG9uIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0ge0ZhYnJpYy5PYmplY3R9IHRhcmdldCB0aGUgdGFyZ2V0IHdoZXJlIHRoZSB0YXJnZXQgZnJvbSB0aGUgbW91c2Vtb3ZlIGV2ZW50XG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2Vtb3ZlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmlyZU92ZXJPdXRFdmVudHM6IGZ1bmN0aW9uKHRhcmdldCwgZSkge1xuICAgICAgdmFyIF9ob3ZlcmVkVGFyZ2V0ID0gdGhpcy5faG92ZXJlZFRhcmdldCxcbiAgICAgICAgICBfaG92ZXJlZFRhcmdldHMgPSB0aGlzLl9ob3ZlcmVkVGFyZ2V0cywgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyxcbiAgICAgICAgICBsZW5ndGggPSBNYXRoLm1heChfaG92ZXJlZFRhcmdldHMubGVuZ3RoLCB0YXJnZXRzLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldCwgZSwge1xuICAgICAgICBvbGRUYXJnZXQ6IF9ob3ZlcmVkVGFyZ2V0LFxuICAgICAgICBldnRPdXQ6ICdtb3VzZW91dCcsXG4gICAgICAgIGNhbnZhc0V2dE91dDogJ21vdXNlOm91dCcsXG4gICAgICAgIGV2dEluOiAnbW91c2VvdmVyJyxcbiAgICAgICAgY2FudmFzRXZ0SW46ICdtb3VzZTpvdmVyJyxcbiAgICAgIH0pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldHNbaV0sIGUsIHtcbiAgICAgICAgICBvbGRUYXJnZXQ6IF9ob3ZlcmVkVGFyZ2V0c1tpXSxcbiAgICAgICAgICBldnRPdXQ6ICdtb3VzZW91dCcsXG4gICAgICAgICAgZXZ0SW46ICdtb3VzZW92ZXInLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IHRoaXMudGFyZ2V0cy5jb25jYXQoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWFuYWdlIHRoZSBkcmFnRW50ZXIsIGRyYWdMZWF2ZSBldmVudHMgZm9yIHRoZSBmYWJyaWMgb2JqZWN0cyBvbiB0aGUgY2FudmFzXG4gICAgICogQHBhcmFtIHtGYWJyaWMuT2JqZWN0fSB0YXJnZXQgdGhlIHRhcmdldCB3aGVyZSB0aGUgdGFyZ2V0IGZyb20gdGhlIG9uRHJhZyBldmVudFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkIG9uIG9uZHJhZ1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2ZpcmVFbnRlckxlYXZlRXZlbnRzOiBmdW5jdGlvbih0YXJnZXQsIGUpIHtcbiAgICAgIHZhciBfZHJhZ2dlZG92ZXJUYXJnZXQgPSB0aGlzLl9kcmFnZ2Vkb3ZlclRhcmdldCxcbiAgICAgICAgICBfaG92ZXJlZFRhcmdldHMgPSB0aGlzLl9ob3ZlcmVkVGFyZ2V0cywgdGFyZ2V0cyA9IHRoaXMudGFyZ2V0cyxcbiAgICAgICAgICBsZW5ndGggPSBNYXRoLm1heChfaG92ZXJlZFRhcmdldHMubGVuZ3RoLCB0YXJnZXRzLmxlbmd0aCk7XG5cbiAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldCwgZSwge1xuICAgICAgICBvbGRUYXJnZXQ6IF9kcmFnZ2Vkb3ZlclRhcmdldCxcbiAgICAgICAgZXZ0T3V0OiAnZHJhZ2xlYXZlJyxcbiAgICAgICAgZXZ0SW46ICdkcmFnZW50ZXInLFxuICAgICAgfSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzKHRhcmdldHNbaV0sIGUsIHtcbiAgICAgICAgICBvbGRUYXJnZXQ6IF9ob3ZlcmVkVGFyZ2V0c1tpXSxcbiAgICAgICAgICBldnRPdXQ6ICdkcmFnbGVhdmUnLFxuICAgICAgICAgIGV2dEluOiAnZHJhZ2VudGVyJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kcmFnZ2Vkb3ZlclRhcmdldCA9IHRhcmdldDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWFuYWdlIHRoZSBzeW50aGV0aWMgaW4vb3V0IGV2ZW50cyBmb3IgdGhlIGZhYnJpYyBvYmplY3RzIG9uIHRoZSBjYW52YXNcbiAgICAgKiBAcGFyYW0ge0ZhYnJpYy5PYmplY3R9IHRhcmdldCB0aGUgdGFyZ2V0IHdoZXJlIHRoZSB0YXJnZXQgZnJvbSB0aGUgc3VwcG9ydGVkIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0IGZpcmVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBjb25maWd1cmF0aW9uIGZvciB0aGUgZnVuY3Rpb24gdG8gd29ya1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWcudGFyZ2V0TmFtZSBwcm9wZXJ0eSBvbiB0aGUgY2FudmFzIHdoZXJlIHRoZSBvbGQgdGFyZ2V0IGlzIHN0b3JlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmNhbnZhc0V2dE91dF0gbmFtZSBvZiB0aGUgZXZlbnQgdG8gZmlyZSBhdCBjYW52YXMgbGV2ZWwgZm9yIG91dFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWcuZXZ0T3V0IG5hbWUgb2YgdGhlIGV2ZW50IHRvIGZpcmUgZm9yIG91dFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbY29uZmlnLmNhbnZhc0V2dEluXSBuYW1lIG9mIHRoZSBldmVudCB0byBmaXJlIGF0IGNhbnZhcyBsZXZlbCBmb3IgaW5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY29uZmlnLmV2dEluIG5hbWUgb2YgdGhlIGV2ZW50IHRvIGZpcmUgZm9yIGluXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmaXJlU3ludGhldGljSW5PdXRFdmVudHM6IGZ1bmN0aW9uKHRhcmdldCwgZSwgY29uZmlnKSB7XG4gICAgICB2YXIgaW5PcHQsIG91dE9wdCwgb2xkVGFyZ2V0ID0gY29uZmlnLm9sZFRhcmdldCwgb3V0RmlyZXMsIGluRmlyZXMsXG4gICAgICAgICAgdGFyZ2V0Q2hhbmdlZCA9IG9sZFRhcmdldCAhPT0gdGFyZ2V0LCBjYW52YXNFdnRJbiA9IGNvbmZpZy5jYW52YXNFdnRJbiwgY2FudmFzRXZ0T3V0ID0gY29uZmlnLmNhbnZhc0V2dE91dDtcbiAgICAgIGlmICh0YXJnZXRDaGFuZ2VkKSB7XG4gICAgICAgIGluT3B0ID0geyBlOiBlLCB0YXJnZXQ6IHRhcmdldCwgcHJldmlvdXNUYXJnZXQ6IG9sZFRhcmdldCB9O1xuICAgICAgICBvdXRPcHQgPSB7IGU6IGUsIHRhcmdldDogb2xkVGFyZ2V0LCBuZXh0VGFyZ2V0OiB0YXJnZXQgfTtcbiAgICAgIH1cbiAgICAgIGluRmlyZXMgPSB0YXJnZXQgJiYgdGFyZ2V0Q2hhbmdlZDtcbiAgICAgIG91dEZpcmVzID0gb2xkVGFyZ2V0ICYmIHRhcmdldENoYW5nZWQ7XG4gICAgICBpZiAob3V0RmlyZXMpIHtcbiAgICAgICAgY2FudmFzRXZ0T3V0ICYmIHRoaXMuZmlyZShjYW52YXNFdnRPdXQsIG91dE9wdCk7XG4gICAgICAgIG9sZFRhcmdldC5maXJlKGNvbmZpZy5ldnRPdXQsIG91dE9wdCk7XG4gICAgICB9XG4gICAgICBpZiAoaW5GaXJlcykge1xuICAgICAgICBjYW52YXNFdnRJbiAmJiB0aGlzLmZpcmUoY2FudmFzRXZ0SW4sIGluT3B0KTtcbiAgICAgICAgdGFyZ2V0LmZpcmUoY29uZmlnLmV2dEluLCBpbk9wdCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IGRlZmluZXMgYWN0aW9ucyB3aGVuIGFuIEV2ZW50IE1vdXNlIFdoZWVsXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3QgZmlyZWQgb24gbW91c2V1cFxuICAgICAqL1xuICAgIF9fb25Nb3VzZVdoZWVsOiBmdW5jdGlvbihlKSB7XG4gICAgICB0aGlzLl9jYWNoZVRyYW5zZm9ybUV2ZW50RGF0YShlKTtcbiAgICAgIHRoaXMuX2hhbmRsZUV2ZW50KGUsICd3aGVlbCcpO1xuICAgICAgdGhpcy5fcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IGZpcmVkIG9uIG1vdXNlbW92ZVxuICAgICAqL1xuICAgIF90cmFuc2Zvcm1PYmplY3Q6IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwb2ludGVyID0gdGhpcy5nZXRQb2ludGVyKGUpLFxuICAgICAgICAgIHRyYW5zZm9ybSA9IHRoaXMuX2N1cnJlbnRUcmFuc2Zvcm07XG5cbiAgICAgIHRyYW5zZm9ybS5yZXNldCA9IGZhbHNlO1xuICAgICAgdHJhbnNmb3JtLnNoaWZ0S2V5ID0gZS5zaGlmdEtleTtcbiAgICAgIHRyYW5zZm9ybS5hbHRLZXkgPSBlW3RoaXMuY2VudGVyZWRLZXldO1xuXG4gICAgICB0aGlzLl9wZXJmb3JtVHJhbnNmb3JtQWN0aW9uKGUsIHRyYW5zZm9ybSwgcG9pbnRlcik7XG4gICAgICB0cmFuc2Zvcm0uYWN0aW9uUGVyZm9ybWVkICYmIHRoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9wZXJmb3JtVHJhbnNmb3JtQWN0aW9uOiBmdW5jdGlvbihlLCB0cmFuc2Zvcm0sIHBvaW50ZXIpIHtcbiAgICAgIHZhciB4ID0gcG9pbnRlci54LFxuICAgICAgICAgIHkgPSBwb2ludGVyLnksXG4gICAgICAgICAgYWN0aW9uID0gdHJhbnNmb3JtLmFjdGlvbixcbiAgICAgICAgICBhY3Rpb25QZXJmb3JtZWQgPSBmYWxzZSxcbiAgICAgICAgICBhY3Rpb25IYW5kbGVyID0gdHJhbnNmb3JtLmFjdGlvbkhhbmRsZXI7XG4gICAgICAgICAgLy8gdGhpcyBvYmplY3QgY291bGQgYmUgY3JlYXRlZCBmcm9tIHRoZSBmdW5jdGlvbiBpbiB0aGUgY29udHJvbCBoYW5kbGVyc1xuXG5cbiAgICAgIGlmIChhY3Rpb25IYW5kbGVyKSB7XG4gICAgICAgIGFjdGlvblBlcmZvcm1lZCA9IGFjdGlvbkhhbmRsZXIoZSwgdHJhbnNmb3JtLCB4LCB5KTtcbiAgICAgIH1cbiAgICAgIGlmIChhY3Rpb24gPT09ICdkcmFnJyAmJiBhY3Rpb25QZXJmb3JtZWQpIHtcbiAgICAgICAgdHJhbnNmb3JtLnRhcmdldC5pc01vdmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc2V0Q3Vyc29yKHRyYW5zZm9ybS50YXJnZXQubW92ZUN1cnNvciB8fCB0aGlzLm1vdmVDdXJzb3IpO1xuICAgICAgfVxuICAgICAgdHJhbnNmb3JtLmFjdGlvblBlcmZvcm1lZCA9IHRyYW5zZm9ybS5hY3Rpb25QZXJmb3JtZWQgfHwgYWN0aW9uUGVyZm9ybWVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9maXJlOiBmYWJyaWMuY29udHJvbHNVdGlscy5maXJlRXZlbnQsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJzb3IgZGVwZW5kaW5nIG9uIHdoZXJlIHRoZSBjYW52YXMgaXMgYmVpbmcgaG92ZXJlZC5cbiAgICAgKiBOb3RlOiB2ZXJ5IGJ1Z2d5IGluIE9wZXJhXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IE9iamVjdCB0aGF0IHRoZSBtb3VzZSBpcyBob3ZlcmluZywgaWYgc28uXG4gICAgICovXG4gICAgX3NldEN1cnNvckZyb21FdmVudDogZnVuY3Rpb24gKGUsIHRhcmdldCkge1xuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5zZXRDdXJzb3IodGhpcy5kZWZhdWx0Q3Vyc29yKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGhvdmVyQ3Vyc29yID0gdGFyZ2V0LmhvdmVyQ3Vyc29yIHx8IHRoaXMuaG92ZXJDdXJzb3IsXG4gICAgICAgICAgYWN0aXZlU2VsZWN0aW9uID0gdGhpcy5fYWN0aXZlT2JqZWN0ICYmIHRoaXMuX2FjdGl2ZU9iamVjdC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJyA/XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVPYmplY3QgOiBudWxsLFxuICAgICAgICAgIC8vIG9ubHkgc2hvdyBwcm9wZXIgY29ybmVyIHdoZW4gZ3JvdXAgc2VsZWN0aW9uIGlzIG5vdCBhY3RpdmVcbiAgICAgICAgICBjb3JuZXIgPSAoIWFjdGl2ZVNlbGVjdGlvbiB8fCAhYWN0aXZlU2VsZWN0aW9uLmNvbnRhaW5zKHRhcmdldCkpXG4gICAgICAgICAgLy8gaGVyZSB3ZSBjYWxsIGZpbmRUYXJnZXRDb3JuZXIgYWx3YXlzIHdpdGggdW5kZWZpbmVkIGZvciB0aGUgdG91Y2ggcGFyYW1ldGVyLlxuICAgICAgICAgIC8vIHdlIGFzc3VtZSB0aGF0IGlmIHlvdSBhcmUgdXNpbmcgYSBjdXJzb3IgeW91IGRvIG5vdCBuZWVkIHRvIGludGVyYWN0IHdpdGhcbiAgICAgICAgICAvLyB0aGUgYmlnZ2VyIHRvdWNoIGFyZWEuXG4gICAgICAgICAgICAgICAgICAgICYmIHRhcmdldC5fZmluZFRhcmdldENvcm5lcih0aGlzLmdldFBvaW50ZXIoZSwgdHJ1ZSkpO1xuXG4gICAgICBpZiAoIWNvcm5lcikge1xuICAgICAgICBpZiAodGFyZ2V0LnN1YlRhcmdldENoZWNrKXtcbiAgICAgICAgICAvLyBob3ZlckN1cnNvciBzaG91bGQgY29tZSBmcm9tIHRvcC1tb3N0IHN1YlRhcmdldCxcbiAgICAgICAgICAvLyBzbyB3ZSB3YWxrIHRoZSBhcnJheSBiYWNrd2FyZHNcbiAgICAgICAgICB0aGlzLnRhcmdldHMuY29uY2F0KCkucmV2ZXJzZSgpLm1hcChmdW5jdGlvbihfdGFyZ2V0KXtcbiAgICAgICAgICAgIGhvdmVyQ3Vyc29yID0gX3RhcmdldC5ob3ZlckN1cnNvciB8fCBob3ZlckN1cnNvcjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEN1cnNvcihob3ZlckN1cnNvcik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRDdXJzb3IodGhpcy5nZXRDb3JuZXJDdXJzb3IoY29ybmVyLCB0YXJnZXQsIGUpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRDb3JuZXJDdXJzb3I6IGZ1bmN0aW9uKGNvcm5lciwgdGFyZ2V0LCBlKSB7XG4gICAgICB2YXIgY29udHJvbCA9IHRhcmdldC5jb250cm9sc1tjb3JuZXJdO1xuICAgICAgcmV0dXJuIGNvbnRyb2wuY3Vyc29yU3R5bGVIYW5kbGVyKGUsIGNvbnRyb2wsIHRhcmdldCk7XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBtaW4gPSBNYXRoLm1pbixcbiAgICAgIG1heCA9IE1hdGgubWF4O1xuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLkNhbnZhcy5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLkNhbnZhcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gdGFyZ2V0XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBfc2hvdWxkR3JvdXA6IGZ1bmN0aW9uKGUsIHRhcmdldCkge1xuICAgICAgdmFyIGFjdGl2ZU9iamVjdCA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgIHJldHVybiBhY3RpdmVPYmplY3QgJiYgdGhpcy5faXNTZWxlY3Rpb25LZXlQcmVzc2VkKGUpICYmIHRhcmdldCAmJiB0YXJnZXQuc2VsZWN0YWJsZSAmJiB0aGlzLnNlbGVjdGlvbiAmJlxuICAgICAgICAgICAgKGFjdGl2ZU9iamVjdCAhPT0gdGFyZ2V0IHx8IGFjdGl2ZU9iamVjdC50eXBlID09PSAnYWN0aXZlU2VsZWN0aW9uJykgJiYgIXRhcmdldC5vblNlbGVjdCh7IGU6IGUgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IHRhcmdldFxuICAgICAqL1xuICAgIF9oYW5kbGVHcm91cGluZzogZnVuY3Rpb24gKGUsIHRhcmdldCkge1xuICAgICAgdmFyIGFjdGl2ZU9iamVjdCA9IHRoaXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgIC8vIGF2b2lkIG11bHRpIHNlbGVjdCB3aGVuIHNoaWZ0IGNsaWNrIG9uIGEgY29ybmVyXG4gICAgICBpZiAoYWN0aXZlT2JqZWN0Ll9fY29ybmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0YXJnZXQgPT09IGFjdGl2ZU9iamVjdCkge1xuICAgICAgICAvLyBpZiBpdCdzIGEgZ3JvdXAsIGZpbmQgdGFyZ2V0IGFnYWluLCB1c2luZyBhY3RpdmVHcm91cCBvYmplY3RzXG4gICAgICAgIHRhcmdldCA9IHRoaXMuZmluZFRhcmdldChlLCB0cnVlKTtcbiAgICAgICAgLy8gaWYgZXZlbiBvYmplY3QgaXMgbm90IGZvdW5kIG9yIHdlIGFyZSBvbiBhY3RpdmVPYmplY3RDb3JuZXIsIGJhaWwgb3V0XG4gICAgICAgIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQuc2VsZWN0YWJsZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFjdGl2ZU9iamVjdCAmJiBhY3RpdmVPYmplY3QudHlwZSA9PT0gJ2FjdGl2ZVNlbGVjdGlvbicpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlQWN0aXZlU2VsZWN0aW9uKHRhcmdldCwgZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlQWN0aXZlU2VsZWN0aW9uKHRhcmdldCwgZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3VwZGF0ZUFjdGl2ZVNlbGVjdGlvbjogZnVuY3Rpb24odGFyZ2V0LCBlKSB7XG4gICAgICB2YXIgYWN0aXZlU2VsZWN0aW9uID0gdGhpcy5fYWN0aXZlT2JqZWN0LFxuICAgICAgICAgIGN1cnJlbnRBY3RpdmVPYmplY3RzID0gYWN0aXZlU2VsZWN0aW9uLl9vYmplY3RzLnNsaWNlKDApO1xuICAgICAgaWYgKGFjdGl2ZVNlbGVjdGlvbi5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICAgIGFjdGl2ZVNlbGVjdGlvbi5yZW1vdmVXaXRoVXBkYXRlKHRhcmdldCk7XG4gICAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXRzID0gdGhpcy50YXJnZXRzLmNvbmNhdCgpO1xuICAgICAgICBpZiAoYWN0aXZlU2VsZWN0aW9uLnNpemUoKSA9PT0gMSkge1xuICAgICAgICAgIC8vIGFjdGl2YXRlIGxhc3QgcmVtYWluaW5nIG9iamVjdFxuICAgICAgICAgIHRoaXMuX3NldEFjdGl2ZU9iamVjdChhY3RpdmVTZWxlY3Rpb24uaXRlbSgwKSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBhY3RpdmVTZWxlY3Rpb24uYWRkV2l0aFVwZGF0ZSh0YXJnZXQpO1xuICAgICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0ID0gYWN0aXZlU2VsZWN0aW9uO1xuICAgICAgICB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IHRoaXMudGFyZ2V0cy5jb25jYXQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25FdmVudHMoY3VycmVudEFjdGl2ZU9iamVjdHMsIGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVBY3RpdmVTZWxlY3Rpb246IGZ1bmN0aW9uKHRhcmdldCwgZSkge1xuICAgICAgdmFyIGN1cnJlbnRBY3RpdmVzID0gdGhpcy5nZXRBY3RpdmVPYmplY3RzKCksIGdyb3VwID0gdGhpcy5fY3JlYXRlR3JvdXAodGFyZ2V0KTtcbiAgICAgIHRoaXMuX2hvdmVyZWRUYXJnZXQgPSBncm91cDtcbiAgICAgIC8vIElTU1VFIDQxMTU6IHNob3VsZCB3ZSBjb25zaWRlciBzdWJUYXJnZXRzIGhlcmU/XG4gICAgICAvLyB0aGlzLl9ob3ZlcmVkVGFyZ2V0cyA9IFtdO1xuICAgICAgLy8gdGhpcy5faG92ZXJlZFRhcmdldHMgPSB0aGlzLnRhcmdldHMuY29uY2F0KCk7XG4gICAgICB0aGlzLl9zZXRBY3RpdmVPYmplY3QoZ3JvdXAsIGUpO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkV2ZW50cyhjdXJyZW50QWN0aXZlcywgZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICAgICAqL1xuICAgIF9jcmVhdGVHcm91cDogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICB2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG4gICAgICAgICAgaXNBY3RpdmVMb3dlciA9IG9iamVjdHMuaW5kZXhPZih0aGlzLl9hY3RpdmVPYmplY3QpIDwgb2JqZWN0cy5pbmRleE9mKHRhcmdldCksXG4gICAgICAgICAgZ3JvdXBPYmplY3RzID0gaXNBY3RpdmVMb3dlclxuICAgICAgICAgICAgPyBbdGhpcy5fYWN0aXZlT2JqZWN0LCB0YXJnZXRdXG4gICAgICAgICAgICA6IFt0YXJnZXQsIHRoaXMuX2FjdGl2ZU9iamVjdF07XG4gICAgICB0aGlzLl9hY3RpdmVPYmplY3QuaXNFZGl0aW5nICYmIHRoaXMuX2FjdGl2ZU9iamVjdC5leGl0RWRpdGluZygpO1xuICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuQWN0aXZlU2VsZWN0aW9uKGdyb3VwT2JqZWN0cywge1xuICAgICAgICBjYW52YXM6IHRoaXNcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgbW91c2UgZXZlbnRcbiAgICAgKi9cbiAgICBfZ3JvdXBTZWxlY3RlZE9iamVjdHM6IGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHZhciBncm91cCA9IHRoaXMuX2NvbGxlY3RPYmplY3RzKGUpLFxuICAgICAgICAgIGFHcm91cDtcblxuICAgICAgLy8gZG8gbm90IGNyZWF0ZSBncm91cCBmb3IgMSBlbGVtZW50IG9ubHlcbiAgICAgIGlmIChncm91cC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVPYmplY3QoZ3JvdXBbMF0sIGUpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZ3JvdXAubGVuZ3RoID4gMSkge1xuICAgICAgICBhR3JvdXAgPSBuZXcgZmFicmljLkFjdGl2ZVNlbGVjdGlvbihncm91cC5yZXZlcnNlKCksIHtcbiAgICAgICAgICBjYW52YXM6IHRoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0QWN0aXZlT2JqZWN0KGFHcm91cCwgZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NvbGxlY3RPYmplY3RzOiBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgZ3JvdXAgPSBbXSxcbiAgICAgICAgICBjdXJyZW50T2JqZWN0LFxuICAgICAgICAgIHgxID0gdGhpcy5fZ3JvdXBTZWxlY3Rvci5leCxcbiAgICAgICAgICB5MSA9IHRoaXMuX2dyb3VwU2VsZWN0b3IuZXksXG4gICAgICAgICAgeDIgPSB4MSArIHRoaXMuX2dyb3VwU2VsZWN0b3IubGVmdCxcbiAgICAgICAgICB5MiA9IHkxICsgdGhpcy5fZ3JvdXBTZWxlY3Rvci50b3AsXG4gICAgICAgICAgc2VsZWN0aW9uWDFZMSA9IG5ldyBmYWJyaWMuUG9pbnQobWluKHgxLCB4MiksIG1pbih5MSwgeTIpKSxcbiAgICAgICAgICBzZWxlY3Rpb25YMlkyID0gbmV3IGZhYnJpYy5Qb2ludChtYXgoeDEsIHgyKSwgbWF4KHkxLCB5MikpLFxuICAgICAgICAgIGFsbG93SW50ZXJzZWN0ID0gIXRoaXMuc2VsZWN0aW9uRnVsbHlDb250YWluZWQsXG4gICAgICAgICAgaXNDbGljayA9IHgxID09PSB4MiAmJiB5MSA9PT0geTI7XG4gICAgICAvLyB3ZSBpdGVyYXRlIHJldmVyc2Ugb3JkZXIgdG8gY29sbGVjdCB0b3AgZmlyc3QgaW4gY2FzZSBvZiBjbGljay5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaS0tOyApIHtcbiAgICAgICAgY3VycmVudE9iamVjdCA9IHRoaXMuX29iamVjdHNbaV07XG5cbiAgICAgICAgaWYgKCFjdXJyZW50T2JqZWN0IHx8ICFjdXJyZW50T2JqZWN0LnNlbGVjdGFibGUgfHwgIWN1cnJlbnRPYmplY3QudmlzaWJsZSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKChhbGxvd0ludGVyc2VjdCAmJiBjdXJyZW50T2JqZWN0LmludGVyc2VjdHNXaXRoUmVjdChzZWxlY3Rpb25YMVkxLCBzZWxlY3Rpb25YMlkyLCB0cnVlKSkgfHxcbiAgICAgICAgICAgIGN1cnJlbnRPYmplY3QuaXNDb250YWluZWRXaXRoaW5SZWN0KHNlbGVjdGlvblgxWTEsIHNlbGVjdGlvblgyWTIsIHRydWUpIHx8XG4gICAgICAgICAgICAoYWxsb3dJbnRlcnNlY3QgJiYgY3VycmVudE9iamVjdC5jb250YWluc1BvaW50KHNlbGVjdGlvblgxWTEsIG51bGwsIHRydWUpKSB8fFxuICAgICAgICAgICAgKGFsbG93SW50ZXJzZWN0ICYmIGN1cnJlbnRPYmplY3QuY29udGFpbnNQb2ludChzZWxlY3Rpb25YMlkyLCBudWxsLCB0cnVlKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgZ3JvdXAucHVzaChjdXJyZW50T2JqZWN0KTtcbiAgICAgICAgICAvLyBvbmx5IGFkZCBvbmUgb2JqZWN0IGlmIGl0J3MgYSBjbGlja1xuICAgICAgICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGdyb3VwLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cC5maWx0ZXIoZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuICFvYmplY3Qub25TZWxlY3QoeyBlOiBlIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9tYXliZUdyb3VwT2JqZWN0czogZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uICYmIHRoaXMuX2dyb3VwU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fZ3JvdXBTZWxlY3RlZE9iamVjdHMoZSk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldEN1cnNvcih0aGlzLmRlZmF1bHRDdXJzb3IpO1xuICAgICAgLy8gY2xlYXIgc2VsZWN0aW9uIGFuZCBjdXJyZW50IHRyYW5zZm9ybWF0aW9uXG4gICAgICB0aGlzLl9ncm91cFNlbGVjdG9yID0gbnVsbDtcbiAgICB9XG4gIH0pO1xuXG59KSgpO1xuXG5cbihmdW5jdGlvbiAoKSB7XG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRXhwb3J0cyBjYW52YXMgZWxlbWVudCB0byBhIGRhdGF1cmwgaW1hZ2UuIE5vdGUgdGhhdCB3aGVuIG11bHRpcGxpZXIgaXMgdXNlZCwgY3JvcHBpbmcgaXMgc2NhbGVkIGFwcHJvcHJpYXRlbHlcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmZvcm1hdD1wbmddIFRoZSBmb3JtYXQgb2YgdGhlIG91dHB1dCBpbWFnZS4gRWl0aGVyIFwianBlZ1wiIG9yIFwicG5nXCJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucXVhbGl0eT0xXSBRdWFsaXR5IGxldmVsICgwLi4xKS4gT25seSB1c2VkIGZvciBqcGVnLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tdWx0aXBsaWVyPTFdIE11bHRpcGxpZXIgdG8gc2NhbGUgYnksIHRvIGhhdmUgY29uc2lzdGVudFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5sZWZ0XSBDcm9wcGluZyBsZWZ0IG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnRvcF0gQ3JvcHBpbmcgdG9wIG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLndpZHRoXSBDcm9wcGluZyB3aWR0aC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmhlaWdodF0gQ3JvcHBpbmcgaGVpZ2h0LiBJbnRyb2R1Y2VkIGluIHYxLjIuMTRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZVJldGluYVNjYWxpbmddIEVuYWJsZSByZXRpbmEgc2NhbGluZyBmb3IgY2xvbmUgaW1hZ2UuIEludHJvZHVjZSBpbiAyLjAuMFxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gUmV0dXJucyBhIGRhdGE6IFVSTCBjb250YWluaW5nIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIG9iamVjdCBpbiB0aGUgZm9ybWF0IHNwZWNpZmllZCBieSBvcHRpb25zLmZvcm1hdFxuICAgICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvZmFicmljanMvTmZaVmIvfGpzRmlkZGxlIGRlbW99XG4gICAgICogQGV4YW1wbGUgPGNhcHRpb24+R2VuZXJhdGUganBlZyBkYXRhVVJMIHdpdGggbG93ZXIgcXVhbGl0eTwvY2FwdGlvbj5cbiAgICAgKiB2YXIgZGF0YVVSTCA9IGNhbnZhcy50b0RhdGFVUkwoe1xuICAgICAqICAgZm9ybWF0OiAnanBlZycsXG4gICAgICogICBxdWFsaXR5OiAwLjhcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5HZW5lcmF0ZSBjcm9wcGVkIHBuZyBkYXRhVVJMIChjbGlwcGluZyBvZiBjYW52YXMpPC9jYXB0aW9uPlxuICAgICAqIHZhciBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTCh7XG4gICAgICogICBmb3JtYXQ6ICdwbmcnLFxuICAgICAqICAgbGVmdDogMTAwLFxuICAgICAqICAgdG9wOiAxMDAsXG4gICAgICogICB3aWR0aDogMjAwLFxuICAgICAqICAgaGVpZ2h0OiAyMDBcbiAgICAgKiB9KTtcbiAgICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5HZW5lcmF0ZSBkb3VibGUgc2NhbGVkIHBuZyBkYXRhVVJMPC9jYXB0aW9uPlxuICAgICAqIHZhciBkYXRhVVJMID0gY2FudmFzLnRvRGF0YVVSTCh7XG4gICAgICogICBmb3JtYXQ6ICdwbmcnLFxuICAgICAqICAgbXVsdGlwbGllcjogMlxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIHRvRGF0YVVSTDogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuXG4gICAgICB2YXIgZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgfHwgJ3BuZycsXG4gICAgICAgICAgcXVhbGl0eSA9IG9wdGlvbnMucXVhbGl0eSB8fCAxLFxuICAgICAgICAgIG11bHRpcGxpZXIgPSAob3B0aW9ucy5tdWx0aXBsaWVyIHx8IDEpICogKG9wdGlvbnMuZW5hYmxlUmV0aW5hU2NhbGluZyA/IHRoaXMuZ2V0UmV0aW5hU2NhbGluZygpIDogMSksXG4gICAgICAgICAgY2FudmFzRWwgPSB0aGlzLnRvQ2FudmFzRWxlbWVudChtdWx0aXBsaWVyLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBmYWJyaWMudXRpbC50b0RhdGFVUkwoY2FudmFzRWwsIGZvcm1hdCwgcXVhbGl0eSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBIVE1MQ2FudmFzIGVsZW1lbnQgcGFpbnRlZCB3aXRoIHRoZSBjdXJyZW50IGNhbnZhcyBjb250ZW50LlxuICAgICAqIE5vIG5lZWQgdG8gcmVzaXplIHRoZSBhY3R1YWwgb25lIG9yIHJlcGFpbnQgaXQuXG4gICAgICogV2lsbCB0cmFuc2ZlciBvYmplY3Qgb3duZXJzaGlwIHRvIGEgbmV3IGNhbnZhcywgcGFpbnQgaXQsIGFuZCBzZXQgZXZlcnl0aGluZyBiYWNrLlxuICAgICAqIFRoaXMgaXMgYW4gaW50ZXJtZWRpYXJ5IHN0ZXAgdXNlZCB0byBnZXQgdG8gYSBkYXRhVXJsIGJ1dCBhbHNvIGl0IGlzIHVzZWZ1bCB0b1xuICAgICAqIGNyZWF0ZSBxdWljayBpbWFnZSBjb3BpZXMgb2YgYSBjYW52YXMgd2l0aG91dCBwYXNzaW5nIGZvciB0aGUgZGF0YVVybCBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW211bHRpcGxpZXJdIGEgem9vbSBmYWN0b3IuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjcm9wcGluZ10gQ3JvcHBpbmcgaW5mb3JtYXRpb25zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtjcm9wcGluZy5sZWZ0XSBDcm9wcGluZyBsZWZ0IG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Nyb3BwaW5nLnRvcF0gQ3JvcHBpbmcgdG9wIG9mZnNldC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Nyb3BwaW5nLndpZHRoXSBDcm9wcGluZyB3aWR0aC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2Nyb3BwaW5nLmhlaWdodF0gQ3JvcHBpbmcgaGVpZ2h0LlxuICAgICAqL1xuICAgIHRvQ2FudmFzRWxlbWVudDogZnVuY3Rpb24obXVsdGlwbGllciwgY3JvcHBpbmcpIHtcbiAgICAgIG11bHRpcGxpZXIgPSBtdWx0aXBsaWVyIHx8IDE7XG4gICAgICBjcm9wcGluZyA9IGNyb3BwaW5nIHx8IHsgfTtcbiAgICAgIHZhciBzY2FsZWRXaWR0aCA9IChjcm9wcGluZy53aWR0aCB8fCB0aGlzLndpZHRoKSAqIG11bHRpcGxpZXIsXG4gICAgICAgICAgc2NhbGVkSGVpZ2h0ID0gKGNyb3BwaW5nLmhlaWdodCB8fCB0aGlzLmhlaWdodCkgKiBtdWx0aXBsaWVyLFxuICAgICAgICAgIHpvb20gPSB0aGlzLmdldFpvb20oKSxcbiAgICAgICAgICBvcmlnaW5hbFdpZHRoID0gdGhpcy53aWR0aCxcbiAgICAgICAgICBvcmlnaW5hbEhlaWdodCA9IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgIG5ld1pvb20gPSB6b29tICogbXVsdGlwbGllcixcbiAgICAgICAgICB2cCA9IHRoaXMudmlld3BvcnRUcmFuc2Zvcm0sXG4gICAgICAgICAgdHJhbnNsYXRlWCA9ICh2cFs0XSAtIChjcm9wcGluZy5sZWZ0IHx8IDApKSAqIG11bHRpcGxpZXIsXG4gICAgICAgICAgdHJhbnNsYXRlWSA9ICh2cFs1XSAtIChjcm9wcGluZy50b3AgfHwgMCkpICogbXVsdGlwbGllcixcbiAgICAgICAgICBvcmlnaW5hbEludGVyYWN0aXZlID0gdGhpcy5pbnRlcmFjdGl2ZSxcbiAgICAgICAgICBuZXdWcCA9IFtuZXdab29tLCAwLCAwLCBuZXdab29tLCB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZXSxcbiAgICAgICAgICBvcmlnaW5hbFJldGluYSA9IHRoaXMuZW5hYmxlUmV0aW5hU2NhbGluZyxcbiAgICAgICAgICBjYW52YXNFbCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKSxcbiAgICAgICAgICBvcmlnaW5hbENvbnRleHRUb3AgPSB0aGlzLmNvbnRleHRUb3A7XG4gICAgICBjYW52YXNFbC53aWR0aCA9IHNjYWxlZFdpZHRoO1xuICAgICAgY2FudmFzRWwuaGVpZ2h0ID0gc2NhbGVkSGVpZ2h0O1xuICAgICAgdGhpcy5jb250ZXh0VG9wID0gbnVsbDtcbiAgICAgIHRoaXMuZW5hYmxlUmV0aW5hU2NhbGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5pbnRlcmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdGhpcy52aWV3cG9ydFRyYW5zZm9ybSA9IG5ld1ZwO1xuICAgICAgdGhpcy53aWR0aCA9IHNjYWxlZFdpZHRoO1xuICAgICAgdGhpcy5oZWlnaHQgPSBzY2FsZWRIZWlnaHQ7XG4gICAgICB0aGlzLmNhbGNWaWV3cG9ydEJvdW5kYXJpZXMoKTtcbiAgICAgIHRoaXMucmVuZGVyQ2FudmFzKGNhbnZhc0VsLmdldENvbnRleHQoJzJkJyksIHRoaXMuX29iamVjdHMpO1xuICAgICAgdGhpcy52aWV3cG9ydFRyYW5zZm9ybSA9IHZwO1xuICAgICAgdGhpcy53aWR0aCA9IG9yaWdpbmFsV2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IG9yaWdpbmFsSGVpZ2h0O1xuICAgICAgdGhpcy5jYWxjVmlld3BvcnRCb3VuZGFyaWVzKCk7XG4gICAgICB0aGlzLmludGVyYWN0aXZlID0gb3JpZ2luYWxJbnRlcmFjdGl2ZTtcbiAgICAgIHRoaXMuZW5hYmxlUmV0aW5hU2NhbGluZyA9IG9yaWdpbmFsUmV0aW5hO1xuICAgICAgdGhpcy5jb250ZXh0VG9wID0gb3JpZ2luYWxDb250ZXh0VG9wO1xuICAgICAgcmV0dXJuIGNhbnZhc0VsO1xuICAgIH0sXG4gIH0pO1xuXG59KSgpO1xuXG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUgKi8ge1xuICAvKipcbiAgICogUG9wdWxhdGVzIGNhbnZhcyB3aXRoIGRhdGEgZnJvbSB0aGUgc3BlY2lmaWVkIEpTT04uXG4gICAqIEpTT04gZm9ybWF0IG11c3QgY29uZm9ybSB0byB0aGUgb25lIG9mIHtAbGluayBmYWJyaWMuQ2FudmFzI3RvSlNPTn1cbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBqc29uIEpTT04gc3RyaW5nIG9yIG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjaywgaW52b2tlZCB3aGVuIGpzb24gaXMgcGFyc2VkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBjb3JyZXNwb25kaW5nIG9iamVjdHMgKGUuZzoge0BsaW5rIGZhYnJpYy5JbWFnZX0pXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBpbml0aWFsaXplZFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2YgSlNPTiBlbGVtZW50cywgY2FsbGVkIGFmdGVyIGVhY2ggZmFicmljIG9iamVjdCBjcmVhdGVkLlxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQ2FudmFzfSBpbnN0YW5jZVxuICAgKiBAY2hhaW5hYmxlXG4gICAqIEB0dXRvcmlhbCB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mYWJyaWMtaW50cm8tcGFydC0zI2Rlc2VyaWFsaXphdGlvbn1cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2pzZmlkZGxlLm5ldC9mYWJyaWNqcy9mbWdYdC98anNGaWRkbGUgZGVtb31cbiAgICogQGV4YW1wbGUgPGNhcHRpb24+bG9hZEZyb21KU09OPC9jYXB0aW9uPlxuICAgKiBjYW52YXMubG9hZEZyb21KU09OKGpzb24sIGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICogQGV4YW1wbGUgPGNhcHRpb24+bG9hZEZyb21KU09OIHdpdGggcmV2aXZlcjwvY2FwdGlvbj5cbiAgICogY2FudmFzLmxvYWRGcm9tSlNPTihqc29uLCBjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSwgZnVuY3Rpb24obywgb2JqZWN0KSB7XG4gICAqICAgLy8gYG9gID0ganNvbiBvYmplY3RcbiAgICogICAvLyBgb2JqZWN0YCA9IGZhYnJpYy5PYmplY3QgaW5zdGFuY2VcbiAgICogICAvLyAuLi4gZG8gc29tZSBzdHVmZiAuLi5cbiAgICogfSk7XG4gICAqL1xuICBsb2FkRnJvbUpTT046IGZ1bmN0aW9uIChqc29uLCBjYWxsYmFjaywgcmV2aXZlcikge1xuICAgIGlmICghanNvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHNlcmlhbGl6ZSBpZiBpdCB3YXNuJ3QgYWxyZWFkeVxuICAgIHZhciBzZXJpYWxpemVkID0gKHR5cGVvZiBqc29uID09PSAnc3RyaW5nJylcbiAgICAgID8gSlNPTi5wYXJzZShqc29uKVxuICAgICAgOiBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUoanNvbik7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICBjbGlwUGF0aCA9IHNlcmlhbGl6ZWQuY2xpcFBhdGgsXG4gICAgICAgIHJlbmRlck9uQWRkUmVtb3ZlID0gdGhpcy5yZW5kZXJPbkFkZFJlbW92ZTtcblxuICAgIHRoaXMucmVuZGVyT25BZGRSZW1vdmUgPSBmYWxzZTtcblxuICAgIGRlbGV0ZSBzZXJpYWxpemVkLmNsaXBQYXRoO1xuXG4gICAgdGhpcy5fZW5saXZlbk9iamVjdHMoc2VyaWFsaXplZC5vYmplY3RzLCBmdW5jdGlvbiAoZW5saXZlbmVkT2JqZWN0cykge1xuICAgICAgX3RoaXMuY2xlYXIoKTtcbiAgICAgIF90aGlzLl9zZXRCZ092ZXJsYXkoc2VyaWFsaXplZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY2xpcFBhdGgpIHtcbiAgICAgICAgICBfdGhpcy5fZW5saXZlbk9iamVjdHMoW2NsaXBQYXRoXSwgZnVuY3Rpb24gKGVubGl2ZW5lZENhbnZhc0NsaXApIHtcbiAgICAgICAgICAgIF90aGlzLmNsaXBQYXRoID0gZW5saXZlbmVkQ2FudmFzQ2xpcFswXTtcbiAgICAgICAgICAgIF90aGlzLl9fc2V0dXBDYW52YXMuY2FsbChfdGhpcywgc2VyaWFsaXplZCwgZW5saXZlbmVkT2JqZWN0cywgcmVuZGVyT25BZGRSZW1vdmUsIGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fX3NldHVwQ2FudmFzLmNhbGwoX3RoaXMsIHNlcmlhbGl6ZWQsIGVubGl2ZW5lZE9iamVjdHMsIHJlbmRlck9uQWRkUmVtb3ZlLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIHJldml2ZXIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2VyaWFsaXplZCBPYmplY3Qgd2l0aCBiYWNrZ3JvdW5kIGFuZCBvdmVybGF5IGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSB7QXJyYXl9IHJlc3RvcmVkIGNhbnZhcyBvYmplY3RzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhY2hlZCByZW5kZXJPbkFkZFJlbW92ZSBjYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBJbnZva2VkIGFmdGVyIGFsbCBiYWNrZ3JvdW5kIGFuZCBvdmVybGF5IGltYWdlcy9wYXR0ZXJucyBsb2FkZWRcbiAgICovXG4gIF9fc2V0dXBDYW52YXM6IGZ1bmN0aW9uKHNlcmlhbGl6ZWQsIGVubGl2ZW5lZE9iamVjdHMsIHJlbmRlck9uQWRkUmVtb3ZlLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgZW5saXZlbmVkT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKG9iaiwgaW5kZXgpIHtcbiAgICAgIC8vIHdlIHNwbGljZSB0aGUgYXJyYXkganVzdCBpbiBjYXNlIHNvbWUgY3VzdG9tIGNsYXNzZXMgcmVzdG9yZWQgZnJvbSBKU09OXG4gICAgICAvLyB3aWxsIGFkZCBtb3JlIG9iamVjdCB0byBjYW52YXMgYXQgY2FudmFzIGluaXQuXG4gICAgICBfdGhpcy5pbnNlcnRBdChvYmosIGluZGV4KTtcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlck9uQWRkUmVtb3ZlID0gcmVuZGVyT25BZGRSZW1vdmU7XG4gICAgLy8gcmVtb3ZlIHBhcnRzIGkgY2Fubm90IHNldCBhcyBvcHRpb25zXG4gICAgZGVsZXRlIHNlcmlhbGl6ZWQub2JqZWN0cztcbiAgICBkZWxldGUgc2VyaWFsaXplZC5iYWNrZ3JvdW5kSW1hZ2U7XG4gICAgZGVsZXRlIHNlcmlhbGl6ZWQub3ZlcmxheUltYWdlO1xuICAgIGRlbGV0ZSBzZXJpYWxpemVkLmJhY2tncm91bmQ7XG4gICAgZGVsZXRlIHNlcmlhbGl6ZWQub3ZlcmxheTtcbiAgICAvLyB0aGlzLl9pbml0T3B0aW9ucyBkb2VzIHRvbyBtYW55IHRoaW5ncyB0byBqdXN0XG4gICAgLy8gY2FsbCBpdC4gTm9ybWFsbHkgbG9hZGluZyBhbiBPYmplY3QgZnJvbSBKU09OXG4gICAgLy8gY3JlYXRlIHRoZSBPYmplY3QgaW5zdGFuY2UuIEhlcmUgdGhlIENhbnZhcyBpc1xuICAgIC8vIGFscmVhZHkgYW4gaW5zdGFuY2UgYW5kIHdlIGFyZSBqdXN0IGxvYWRpbmcgdGhpbmdzIG92ZXIgaXRcbiAgICB0aGlzLl9zZXRPcHRpb25zKHNlcmlhbGl6ZWQpO1xuICAgIHRoaXMucmVuZGVyQWxsKCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNlcmlhbGl6ZWQgT2JqZWN0IHdpdGggYmFja2dyb3VuZCBhbmQgb3ZlcmxheSBpbmZvcm1hdGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBJbnZva2VkIGFmdGVyIGFsbCBiYWNrZ3JvdW5kIGFuZCBvdmVybGF5IGltYWdlcy9wYXR0ZXJucyBsb2FkZWRcbiAgICovXG4gIF9zZXRCZ092ZXJsYXk6IGZ1bmN0aW9uKHNlcmlhbGl6ZWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGxvYWRlZCA9IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogZmFsc2UsXG4gICAgICBvdmVybGF5Q29sb3I6IGZhbHNlLFxuICAgICAgYmFja2dyb3VuZEltYWdlOiBmYWxzZSxcbiAgICAgIG92ZXJsYXlJbWFnZTogZmFsc2VcbiAgICB9O1xuXG4gICAgaWYgKCFzZXJpYWxpemVkLmJhY2tncm91bmRJbWFnZSAmJiAhc2VyaWFsaXplZC5vdmVybGF5SW1hZ2UgJiYgIXNlcmlhbGl6ZWQuYmFja2dyb3VuZCAmJiAhc2VyaWFsaXplZC5vdmVybGF5KSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjYklmTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGxvYWRlZC5iYWNrZ3JvdW5kSW1hZ2UgJiYgbG9hZGVkLm92ZXJsYXlJbWFnZSAmJiBsb2FkZWQuYmFja2dyb3VuZENvbG9yICYmIGxvYWRlZC5vdmVybGF5Q29sb3IpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5fX3NldEJnT3ZlcmxheSgnYmFja2dyb3VuZEltYWdlJywgc2VyaWFsaXplZC5iYWNrZ3JvdW5kSW1hZ2UsIGxvYWRlZCwgY2JJZkxvYWRlZCk7XG4gICAgdGhpcy5fX3NldEJnT3ZlcmxheSgnb3ZlcmxheUltYWdlJywgc2VyaWFsaXplZC5vdmVybGF5SW1hZ2UsIGxvYWRlZCwgY2JJZkxvYWRlZCk7XG4gICAgdGhpcy5fX3NldEJnT3ZlcmxheSgnYmFja2dyb3VuZENvbG9yJywgc2VyaWFsaXplZC5iYWNrZ3JvdW5kLCBsb2FkZWQsIGNiSWZMb2FkZWQpO1xuICAgIHRoaXMuX19zZXRCZ092ZXJsYXkoJ292ZXJsYXlDb2xvcicsIHNlcmlhbGl6ZWQub3ZlcmxheSwgbG9hZGVkLCBjYklmTG9hZGVkKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5IFByb3BlcnR5IHRvIHNldCAoYmFja2dyb3VuZEltYWdlLCBvdmVybGF5SW1hZ2UsIGJhY2tncm91bmRDb2xvciwgb3ZlcmxheUNvbG9yKVxuICAgKiBAcGFyYW0geyhPYmplY3R8U3RyaW5nKX0gdmFsdWUgVmFsdWUgdG8gc2V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBsb2FkZWQgU2V0IGxvYWRlZCBwcm9wZXJ0eSB0byB0cnVlIGlmIHByb3BlcnR5IGlzIHNldFxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FsbGJhY2sgQ2FsbGJhY2sgZnVuY3Rpb24gdG8gaW52b2tlIGFmdGVyIHByb3BlcnR5IGlzIHNldFxuICAgKi9cbiAgX19zZXRCZ092ZXJsYXk6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSwgbG9hZGVkLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICBsb2FkZWRbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb3BlcnR5ID09PSAnYmFja2dyb3VuZEltYWdlJyB8fCBwcm9wZXJ0eSA9PT0gJ292ZXJsYXlJbWFnZScpIHtcbiAgICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RzKFt2YWx1ZV0sIGZ1bmN0aW9uKGVubGl2ZWRPYmplY3Qpe1xuICAgICAgICBfdGhpc1twcm9wZXJ0eV0gPSBlbmxpdmVkT2JqZWN0WzBdO1xuICAgICAgICBsb2FkZWRbcHJvcGVydHldID0gdHJ1ZTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXNbJ3NldCcgKyBmYWJyaWMudXRpbC5zdHJpbmcuY2FwaXRhbGl6ZShwcm9wZXJ0eSwgdHJ1ZSldKHZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgbG9hZGVkW3Byb3BlcnR5XSA9IHRydWU7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IG9iamVjdHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdXG4gICAqL1xuICBfZW5saXZlbk9iamVjdHM6IGZ1bmN0aW9uIChvYmplY3RzLCBjYWxsYmFjaywgcmV2aXZlcikge1xuICAgIGlmICghb2JqZWN0cyB8fCBvYmplY3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soW10pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RzKG9iamVjdHMsIGZ1bmN0aW9uKGVubGl2ZW5lZE9iamVjdHMpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVubGl2ZW5lZE9iamVjdHMpO1xuICAgIH0sIG51bGwsIHJldml2ZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0XG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBfdG9EYXRhVVJMOiBmdW5jdGlvbiAoZm9ybWF0LCBjYWxsYmFjaykge1xuICAgIHRoaXMuY2xvbmUoZnVuY3Rpb24gKGNsb25lKSB7XG4gICAgICBjYWxsYmFjayhjbG9uZS50b0RhdGFVUkwoZm9ybWF0KSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG11bHRpcGxpZXJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIF90b0RhdGFVUkxXaXRoTXVsdGlwbGllcjogZnVuY3Rpb24gKGZvcm1hdCwgbXVsdGlwbGllciwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmNsb25lKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgY2FsbGJhY2soY2xvbmUudG9EYXRhVVJMV2l0aE11bHRpcGxpZXIoZm9ybWF0LCBtdWx0aXBsaWVyKSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENsb25lcyBjYW52YXMgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjYWxsYmFja10gUmVjZWl2ZXMgY2xvbmVkIGluc3RhbmNlIGFzIGEgZmlyc3QgYXJndW1lbnRcbiAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNdIEFycmF5IG9mIHByb3BlcnRpZXMgdG8gaW5jbHVkZSBpbiB0aGUgY2xvbmVkIGNhbnZhcyBhbmQgY2hpbGRyZW5cbiAgICovXG4gIGNsb25lOiBmdW5jdGlvbiAoY2FsbGJhY2ssIHByb3BlcnRpZXMpIHtcbiAgICB2YXIgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKHByb3BlcnRpZXMpKTtcbiAgICB0aGlzLmNsb25lV2l0aG91dERhdGEoZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgIGNsb25lLmxvYWRGcm9tSlNPTihkYXRhLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soY2xvbmUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENsb25lcyBjYW52YXMgaW5zdGFuY2Ugd2l0aG91dCBjbG9uaW5nIGV4aXN0aW5nIGRhdGEuXG4gICAqIFRoaXMgZXNzZW50aWFsbHkgY29waWVzIGNhbnZhcyBkaW1lbnNpb25zLCBjbGlwcGluZyBwcm9wZXJ0aWVzLCBldGMuXG4gICAqIGJ1dCBsZWF2ZXMgZGF0YSBlbXB0eSAoc28gdGhhdCB5b3UgY2FuIHBvcHVsYXRlIGl0IHdpdGggeW91ciBvd24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY2FsbGJhY2tdIFJlY2VpdmVzIGNsb25lZCBpbnN0YW5jZSBhcyBhIGZpcnN0IGFyZ3VtZW50XG4gICAqL1xuICBjbG9uZVdpdGhvdXREYXRhOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBlbCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcblxuICAgIGVsLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICBlbC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcblxuICAgIHZhciBjbG9uZSA9IG5ldyBmYWJyaWMuQ2FudmFzKGVsKTtcbiAgICBpZiAodGhpcy5iYWNrZ3JvdW5kSW1hZ2UpIHtcbiAgICAgIGNsb25lLnNldEJhY2tncm91bmRJbWFnZSh0aGlzLmJhY2tncm91bmRJbWFnZS5zcmMsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjbG9uZS5yZW5kZXJBbGwoKTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soY2xvbmUpO1xuICAgICAgfSk7XG4gICAgICBjbG9uZS5iYWNrZ3JvdW5kSW1hZ2VPcGFjaXR5ID0gdGhpcy5iYWNrZ3JvdW5kSW1hZ2VPcGFjaXR5O1xuICAgICAgY2xvbmUuYmFja2dyb3VuZEltYWdlU3RyZXRjaCA9IHRoaXMuYmFja2dyb3VuZEltYWdlU3RyZXRjaDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhjbG9uZSk7XG4gICAgfVxuICB9XG59KTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGV4dGVuZCA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQsXG4gICAgICBjbG9uZSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZSxcbiAgICAgIHRvRml4ZWQgPSBmYWJyaWMudXRpbC50b0ZpeGVkLFxuICAgICAgY2FwaXRhbGl6ZSA9IGZhYnJpYy51dGlsLnN0cmluZy5jYXBpdGFsaXplLFxuICAgICAgZGVncmVlc1RvUmFkaWFucyA9IGZhYnJpYy51dGlsLmRlZ3JlZXNUb1JhZGlhbnMsXG4gICAgICBvYmplY3RDYWNoaW5nID0gIWZhYnJpYy5pc0xpa2VseU5vZGUsXG4gICAgICBBTElBU0lOR19MSU1JVCA9IDI7XG5cbiAgaWYgKGZhYnJpYy5PYmplY3QpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUm9vdCBvYmplY3QgY2xhc3MgZnJvbSB3aGljaCBhbGwgMmQgc2hhcGUgY2xhc3NlcyBpbmhlcml0IGZyb21cbiAgICogQGNsYXNzIGZhYnJpYy5PYmplY3RcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTEjb2JqZWN0c31cbiAgICogQHNlZSB7QGxpbmsgZmFicmljLk9iamVjdCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKlxuICAgKiBAZmlyZXMgYWRkZWRcbiAgICogQGZpcmVzIHJlbW92ZWRcbiAgICpcbiAgICogQGZpcmVzIHNlbGVjdGVkXG4gICAqIEBmaXJlcyBkZXNlbGVjdGVkXG4gICAqIEBmaXJlcyBtb2RpZmllZFxuICAgKiBAZmlyZXMgbW9kaWZpZWRcbiAgICogQGZpcmVzIG1vdmVkXG4gICAqIEBmaXJlcyBzY2FsZWRcbiAgICogQGZpcmVzIHJvdGF0ZWRcbiAgICogQGZpcmVzIHNrZXdlZFxuICAgKlxuICAgKiBAZmlyZXMgcm90YXRpbmdcbiAgICogQGZpcmVzIHNjYWxpbmdcbiAgICogQGZpcmVzIG1vdmluZ1xuICAgKiBAZmlyZXMgc2tld2luZ1xuICAgKlxuICAgKiBAZmlyZXMgbW91c2Vkb3duXG4gICAqIEBmaXJlcyBtb3VzZXVwXG4gICAqIEBmaXJlcyBtb3VzZW92ZXJcbiAgICogQGZpcmVzIG1vdXNlb3V0XG4gICAqIEBmaXJlcyBtb3VzZXdoZWVsXG4gICAqIEBmaXJlcyBtb3VzZWRibGNsaWNrXG4gICAqXG4gICAqIEBmaXJlcyBkcmFnb3ZlclxuICAgKiBAZmlyZXMgZHJhZ2VudGVyXG4gICAqIEBmaXJlcyBkcmFnbGVhdmVcbiAgICogQGZpcmVzIGRyb3BcbiAgICovXG4gIGZhYnJpYy5PYmplY3QgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuQ29tbW9uTWV0aG9kcywgLyoqIEBsZW5kcyBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdCAocmVjdCwgY2lyY2xlLCBwYXRoLCBldGMuKS5cbiAgICAgKiBOb3RlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyBtZWFudCB0byBiZSByZWFkLW9ubHkgYW5kIG5vdCBtZWFudCB0byBiZSBtb2RpZmllZC5cbiAgICAgKiBJZiB5b3UgbW9kaWZ5LCBjZXJ0YWluIHBhcnRzIG9mIEZhYnJpYyAoc3VjaCBhcyBKU09OIGxvYWRpbmcpIHdvbid0IHdvcmsgY29ycmVjdGx5LlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogICAgICAgICAgICAgICAgICAgICAnb2JqZWN0JyxcblxuICAgIC8qKlxuICAgICAqIEhvcml6b250YWwgb3JpZ2luIG9mIHRyYW5zZm9ybWF0aW9uIG9mIGFuIG9iamVjdCAob25lIG9mIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwiY2VudGVyXCIpXG4gICAgICogU2VlIGh0dHA6Ly9qc2ZpZGRsZS5uZXQvMW93MDJnZWEvMjQ0LyBvbiBob3cgb3JpZ2luWC9vcmlnaW5ZIGFmZmVjdCBvYmplY3RzIGluIGdyb3Vwc1xuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgb3JpZ2luWDogICAgICAgICAgICAgICAgICAnbGVmdCcsXG5cbiAgICAvKipcbiAgICAgKiBWZXJ0aWNhbCBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb24gb2YgYW4gb2JqZWN0IChvbmUgb2YgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJjZW50ZXJcIilcbiAgICAgKiBTZWUgaHR0cDovL2pzZmlkZGxlLm5ldC8xb3cwMmdlYS8yNDQvIG9uIGhvdyBvcmlnaW5YL29yaWdpblkgYWZmZWN0IG9iamVjdHMgaW4gZ3JvdXBzXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBvcmlnaW5ZOiAgICAgICAgICAgICAgICAgICd0b3AnLFxuXG4gICAgLyoqXG4gICAgICogVG9wIHBvc2l0aW9uIG9mIGFuIG9iamVjdC4gTm90ZSB0aGF0IGJ5IGRlZmF1bHQgaXQncyByZWxhdGl2ZSB0byBvYmplY3QgdG9wLiBZb3UgY2FuIGNoYW5nZSB0aGlzIGJ5IHNldHRpbmcgb3JpZ2luWT17dG9wL2NlbnRlci9ib3R0b219XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0b3A6ICAgICAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBMZWZ0IHBvc2l0aW9uIG9mIGFuIG9iamVjdC4gTm90ZSB0aGF0IGJ5IGRlZmF1bHQgaXQncyByZWxhdGl2ZSB0byBvYmplY3QgbGVmdC4gWW91IGNhbiBjaGFuZ2UgdGhpcyBieSBzZXR0aW5nIG9yaWdpblg9e2xlZnQvY2VudGVyL3JpZ2h0fVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbGVmdDogICAgICAgICAgICAgICAgICAgICAwLFxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IHdpZHRoXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB3aWR0aDogICAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBPYmplY3QgaGVpZ2h0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBoZWlnaHQ6ICAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBPYmplY3Qgc2NhbGUgZmFjdG9yIChob3Jpem9udGFsKVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2NhbGVYOiAgICAgICAgICAgICAgICAgICAxLFxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IHNjYWxlIGZhY3RvciAodmVydGljYWwpXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzY2FsZVk6ICAgICAgICAgICAgICAgICAgIDEsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGFuIG9iamVjdCBpcyByZW5kZXJlZCBhcyBmbGlwcGVkIGhvcml6b250YWxseVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZsaXBYOiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIGFuIG9iamVjdCBpcyByZW5kZXJlZCBhcyBmbGlwcGVkIHZlcnRpY2FsbHlcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBmbGlwWTogICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogT3BhY2l0eSBvZiBhbiBvYmplY3RcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG9wYWNpdHk6ICAgICAgICAgICAgICAgICAgMSxcblxuICAgIC8qKlxuICAgICAqIEFuZ2xlIG9mIHJvdGF0aW9uIG9mIGFuIG9iamVjdCAoaW4gZGVncmVlcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGFuZ2xlOiAgICAgICAgICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIEFuZ2xlIG9mIHNrZXcgb24geCBheGVzIG9mIGFuIG9iamVjdCAoaW4gZGVncmVlcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNrZXdYOiAgICAgICAgICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIEFuZ2xlIG9mIHNrZXcgb24geSBheGVzIG9mIGFuIG9iamVjdCAoaW4gZGVncmVlcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNrZXdZOiAgICAgICAgICAgICAgICAgICAgMCxcblxuICAgIC8qKlxuICAgICAqIFNpemUgb2Ygb2JqZWN0J3MgY29udHJvbGxpbmcgY29ybmVycyAoaW4gcGl4ZWxzKVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY29ybmVyU2l6ZTogICAgICAgICAgICAgICAxMyxcblxuICAgIC8qKlxuICAgICAqIFNpemUgb2Ygb2JqZWN0J3MgY29udHJvbGxpbmcgY29ybmVycyB3aGVuIHRvdWNoIGludGVyYWN0aW9uIGlzIGRldGVjdGVkXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0b3VjaENvcm5lclNpemU6ICAgICAgICAgICAgICAgMjQsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHRydWUsIG9iamVjdCdzIGNvbnRyb2xsaW5nIGNvcm5lcnMgYXJlIHJlbmRlcmVkIGFzIHRyYW5zcGFyZW50IGluc2lkZSAoaS5lLiBzdHJva2UgaW5zdGVhZCBvZiBmaWxsKVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRyYW5zcGFyZW50Q29ybmVyczogICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY3Vyc29yIHZhbHVlIHVzZWQgd2hlbiBob3ZlcmluZyBvdmVyIHRoaXMgb2JqZWN0IG9uIGNhbnZhc1xuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaG92ZXJDdXJzb3I6ICAgICAgICAgICAgICBudWxsLFxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBjdXJzb3IgdmFsdWUgdXNlZCB3aGVuIG1vdmluZyB0aGlzIG9iamVjdCBvbiBjYW52YXNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG1vdmVDdXJzb3I6ICAgICAgICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFBhZGRpbmcgYmV0d2VlbiBvYmplY3QgYW5kIGl0cyBjb250cm9sbGluZyBib3JkZXJzIChpbiBwaXhlbHMpXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwYWRkaW5nOiAgICAgICAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiBjb250cm9sbGluZyBib3JkZXJzIG9mIGFuIG9iamVjdCAod2hlbiBpdCdzIGFjdGl2ZSlcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJvcmRlckNvbG9yOiAgICAgICAgICAgICAgJ3JnYigxNzgsMjA0LDI1NSknLFxuXG4gICAgLyoqXG4gICAgICogQXJyYXkgc3BlY2lmeWluZyBkYXNoIHBhdHRlcm4gb2YgYW4gb2JqZWN0J3MgYm9yZGVycyAoaGFzQm9yZGVyIG11c3QgYmUgdHJ1ZSlcbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIGJvcmRlckRhc2hBcnJheTogICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIGNvbnRyb2xsaW5nIGNvcm5lcnMgb2YgYW4gb2JqZWN0ICh3aGVuIGl0J3MgYWN0aXZlKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY29ybmVyQ29sb3I6ICAgICAgICAgICAgICAncmdiKDE3OCwyMDQsMjU1KScsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciBvZiBjb250cm9sbGluZyBjb3JuZXJzIG9mIGFuIG9iamVjdCAod2hlbiBpdCdzIGFjdGl2ZSBhbmQgdHJhbnNwYXJlbnRDb3JuZXJzIGZhbHNlKVxuICAgICAqIEBzaW5jZSAxLjYuMlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY29ybmVyU3Ryb2tlQ29sb3I6ICAgICAgICBudWxsLFxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBzdHlsZSBvZiBjb250cm9sLCAncmVjdCcgb3IgJ2NpcmNsZSdcbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKi9cbiAgICBjb3JuZXJTdHlsZTogICAgICAgICAgJ3JlY3QnLFxuXG4gICAgLyoqXG4gICAgICogQXJyYXkgc3BlY2lmeWluZyBkYXNoIHBhdHRlcm4gb2YgYW4gb2JqZWN0J3MgY29udHJvbCAoaGFzQm9yZGVyIG11c3QgYmUgdHJ1ZSlcbiAgICAgKiBAc2luY2UgMS42LjJcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIGNvcm5lckRhc2hBcnJheTogICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhpcyBvYmplY3Qgd2lsbCB1c2UgY2VudGVyIHBvaW50IGFzIHRoZSBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb25cbiAgICAgKiB3aGVuIGJlaW5nIHNjYWxlZCB2aWEgdGhlIGNvbnRyb2xzLlxuICAgICAqIDxiPkJhY2t3YXJkcyBpbmNvbXBhdGliaWxpdHkgbm90ZTo8L2I+IFRoaXMgcHJvcGVydHkgcmVwbGFjZXMgXCJjZW50ZXJUcmFuc2Zvcm1cIiAoQm9vbGVhbikuXG4gICAgICogQHNpbmNlIDEuMy40XG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY2VudGVyZWRTY2FsaW5nOiAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdHJ1ZSwgdGhpcyBvYmplY3Qgd2lsbCB1c2UgY2VudGVyIHBvaW50IGFzIHRoZSBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb25cbiAgICAgKiB3aGVuIGJlaW5nIHJvdGF0ZWQgdmlhIHRoZSBjb250cm9scy5cbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHJlcGxhY2VzIFwiY2VudGVyVHJhbnNmb3JtXCIgKEJvb2xlYW4pLlxuICAgICAqIEBzaW5jZSAxLjMuNFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNlbnRlcmVkUm90YXRpb246ICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIG9iamVjdCdzIGZpbGxcbiAgICAgKiB0YWtlcyBjc3MgY29sb3JzIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItMy9cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZpbGw6ICAgICAgICAgICAgICAgICAgICAgJ3JnYigwLDAsMCknLFxuXG4gICAgLyoqXG4gICAgICogRmlsbCBydWxlIHVzZWQgdG8gZmlsbCBhbiBvYmplY3RcbiAgICAgKiBhY2NlcHRlZCB2YWx1ZXMgYXJlIG5vbnplcm8sIGV2ZW5vZGRcbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHdhcyB1c2VkIGZvciBzZXR0aW5nIGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiB1bnRpbCB2MS40LjEyICh1c2UgYGZhYnJpYy5PYmplY3QjZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uYCBpbnN0ZWFkKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZmlsbFJ1bGU6ICAgICAgICAgICAgICAgICAnbm9uemVybycsXG5cbiAgICAvKipcbiAgICAgKiBDb21wb3NpdGUgcnVsZSB1c2VkIGZvciBjYW52YXMgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb246ICdzb3VyY2Utb3ZlcicsXG5cbiAgICAvKipcbiAgICAgKiBCYWNrZ3JvdW5kIGNvbG9yIG9mIGFuIG9iamVjdC5cbiAgICAgKiB0YWtlcyBjc3MgY29sb3JzIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItMy9cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJhY2tncm91bmRDb2xvcjogICAgICAgICAgJycsXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3Rpb24gQmFja2dyb3VuZCBjb2xvciBvZiBhbiBvYmplY3QuIGNvbG9yZWQgbGF5ZXIgYmVoaW5kIHRoZSBvYmplY3Qgd2hlbiBpdCBpcyBhY3RpdmUuXG4gICAgICogZG9lcyBub3QgbWl4IGdvb2Qgd2l0aCBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gbWV0aG9kcy5cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkJhY2tncm91bmRDb2xvcjogICAgICAgICAgJycsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGRlZmluZWQsIGFuIG9iamVjdCBpcyByZW5kZXJlZCB2aWEgc3Ryb2tlIGFuZCB0aGlzIHByb3BlcnR5IHNwZWNpZmllcyBpdHMgY29sb3JcbiAgICAgKiB0YWtlcyBjc3MgY29sb3JzIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItMy9cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZTogICAgICAgICAgICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIGEgc3Ryb2tlIHVzZWQgdG8gcmVuZGVyIHRoaXMgb2JqZWN0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdHJva2VXaWR0aDogICAgICAgICAgICAgIDEsXG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBzcGVjaWZ5aW5nIGRhc2ggcGF0dGVybiBvZiBhbiBvYmplY3QncyBzdHJva2UgKHN0cm9rZSBtdXN0IGJlIGRlZmluZWQpXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBzdHJva2VEYXNoQXJyYXk6ICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBMaW5lIG9mZnNldCBvZiBhbiBvYmplY3QncyBzdHJva2VcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZURhc2hPZmZzZXQ6IDAsXG5cbiAgICAvKipcbiAgICAgKiBMaW5lIGVuZGluZ3Mgc3R5bGUgb2YgYW4gb2JqZWN0J3Mgc3Ryb2tlIChvbmUgb2YgXCJidXR0XCIsIFwicm91bmRcIiwgXCJzcXVhcmVcIilcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHN0cm9rZUxpbmVDYXA6ICAgICAgICAgICAgJ2J1dHQnLFxuXG4gICAgLyoqXG4gICAgICogQ29ybmVyIHN0eWxlIG9mIGFuIG9iamVjdCdzIHN0cm9rZSAob25lIG9mIFwiYmV2ZWxcIiwgXCJyb3VuZFwiLCBcIm1pdGVyXCIpXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdHJva2VMaW5lSm9pbjogICAgICAgICAgICdtaXRlcicsXG5cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIG1pdGVyIGxlbmd0aCAodXNlZCBmb3Igc3Ryb2tlTGluZUpvaW4gPSBcIm1pdGVyXCIpIG9mIGFuIG9iamVjdCdzIHN0cm9rZVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3Ryb2tlTWl0ZXJMaW1pdDogICAgICAgICA0LFxuXG4gICAgLyoqXG4gICAgICogU2hhZG93IG9iamVjdCByZXByZXNlbnRpbmcgc2hhZG93IG9mIHRoaXMgc2hhcGVcbiAgICAgKiBAdHlwZSBmYWJyaWMuU2hhZG93XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzaGFkb3c6ICAgICAgICAgICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBPcGFjaXR5IG9mIG9iamVjdCdzIGNvbnRyb2xsaW5nIGJvcmRlcnMgd2hlbiBvYmplY3QgaXMgYWN0aXZlIGFuZCBtb3ZpbmdcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJvcmRlck9wYWNpdHlXaGVuTW92aW5nOiAgMC40LFxuXG4gICAgLyoqXG4gICAgICogU2NhbGUgZmFjdG9yIG9mIG9iamVjdCdzIGNvbnRyb2xsaW5nIGJvcmRlcnNcbiAgICAgKiBiaWdnZXIgbnVtYmVyIHdpbGwgbWFrZSBhIHRoaWNrZXIgYm9yZGVyXG4gICAgICogYm9yZGVyIGlzIDEsIHNvIHRoaXMgaXMgYmFzaWNhbGx5IGEgYm9yZGVyIHRoaWNrbmVzc1xuICAgICAqIHNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byBjaGFuZ2UgdGhlIGJvcmRlciBpdHNlbGYuXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBib3JkZXJTY2FsZUZhY3RvcjogICAgICAgIDEsXG5cbiAgICAvKipcbiAgICAgKiBNaW5pbXVtIGFsbG93ZWQgc2NhbGUgdmFsdWUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtaW5TY2FsZUxpbWl0OiAgICAgICAgICAgIDAsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCB0byBgZmFsc2VgLCBhbiBvYmplY3QgY2FuIG5vdCBiZSBzZWxlY3RlZCBmb3IgbW9kaWZpY2F0aW9uICh1c2luZyBlaXRoZXIgcG9pbnQtY2xpY2stYmFzZWQgb3IgZ3JvdXAtYmFzZWQgc2VsZWN0aW9uKS5cbiAgICAgKiBCdXQgZXZlbnRzIHN0aWxsIGZpcmUgb24gaXQuXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc2VsZWN0YWJsZTogICAgICAgICAgICAgICB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgdG8gYGZhbHNlYCwgYW4gb2JqZWN0IGNhbiBub3QgYmUgYSB0YXJnZXQgb2YgZXZlbnRzLiBBbGwgZXZlbnRzIHByb3BhZ2F0ZSB0aHJvdWdoIGl0LiBJbnRyb2R1Y2VkIGluIHYxLjMuNFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGV2ZW50ZWQ6ICAgICAgICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGBmYWxzZWAsIGFuIG9iamVjdCBpcyBub3QgcmVuZGVyZWQgb24gY2FudmFzXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdmlzaWJsZTogICAgICAgICAgICAgICAgICB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgdG8gYGZhbHNlYCwgb2JqZWN0J3MgY29udHJvbHMgYXJlIG5vdCBkaXNwbGF5ZWQgYW5kIGNhbiBub3QgYmUgdXNlZCB0byBtYW5pcHVsYXRlIG9iamVjdFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhhc0NvbnRyb2xzOiAgICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGBmYWxzZWAsIG9iamVjdCdzIGNvbnRyb2xsaW5nIGJvcmRlcnMgYXJlIG5vdCByZW5kZXJlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhhc0JvcmRlcnM6ICAgICAgICAgICAgICAgdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gc2V0IHRvIGB0cnVlYCwgb2JqZWN0cyBhcmUgXCJmb3VuZFwiIG9uIGNhbnZhcyBvbiBwZXItcGl4ZWwgYmFzaXMgcmF0aGVyIHRoYW4gYWNjb3JkaW5nIHRvIGJvdW5kaW5nIGJveFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHBlclBpeGVsVGFyZ2V0RmluZDogICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGBmYWxzZWAsIGRlZmF1bHQgb2JqZWN0J3MgdmFsdWVzIGFyZSBub3QgaW5jbHVkZWQgaW4gaXRzIHNlcmlhbGl6YXRpb25cbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBpbmNsdWRlRGVmYXVsdFZhbHVlczogICAgIHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IGhvcml6b250YWwgbW92ZW1lbnQgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja01vdmVtZW50WDogICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgdmVydGljYWwgbW92ZW1lbnQgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja01vdmVtZW50WTogICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3Qgcm90YXRpb24gaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja1JvdGF0aW9uOiAgICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgaG9yaXpvbnRhbCBzY2FsaW5nIGlzIGxvY2tlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxvY2tTY2FsaW5nWDogICAgICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IHZlcnRpY2FsIHNjYWxpbmcgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja1NjYWxpbmdZOiAgICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgaG9yaXpvbnRhbCBza2V3aW5nIGlzIGxvY2tlZFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxvY2tTa2V3aW5nWDogICAgICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IHZlcnRpY2FsIHNrZXdpbmcgaXMgbG9ja2VkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbG9ja1NrZXdpbmdZOiAgICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBvYmplY3QgY2Fubm90IGJlIGZsaXBwZWQgYnkgc2NhbGluZyBpbnRvIG5lZ2F0aXZlIHZhbHVlc1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxvY2tTY2FsaW5nRmxpcDogICAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IGlzIG5vdCBleHBvcnRlZCBpbiBPQkpFQ1QvSlNPTlxuICAgICAqIEBzaW5jZSAxLjYuM1xuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGV4Y2x1ZGVGcm9tRXhwb3J0OiAgICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IGlzIGNhY2hlZCBvbiBhbiBhZGRpdGlvbmFsIGNhbnZhcy5cbiAgICAgKiBXaGVuIGBmYWxzZWAsIG9iamVjdCBpcyBub3QgY2FjaGVkIHVubGVzcyBuZWNlc3NhcnkgKCBjbGlwUGF0aCApXG4gICAgICogZGVmYXVsdCB0byB0cnVlXG4gICAgICogQHNpbmNlIDEuNy4wXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBvYmplY3RDYWNoaW5nOiAgICAgICAgICAgIG9iamVjdENhY2hpbmcsXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGB0cnVlYCwgb2JqZWN0IHByb3BlcnRpZXMgYXJlIGNoZWNrZWQgZm9yIGNhY2hlIGludmFsaWRhdGlvbi4gSW4gc29tZSBwYXJ0aWN1bGFyXG4gICAgICogc2l0dWF0aW9uIHlvdSBtYXkgd2FudCB0aGlzIHRvIGJlIGRpc2FibGVkICggc3ByYXkgYnJ1c2gsIHZlcnkgYmlnLCBncm91cHMpXG4gICAgICogb3IgaWYgeW91ciBhcHBsaWNhdGlvbiBkb2VzIG5vdCBhbGxvdyB5b3UgdG8gbW9kaWZ5IHByb3BlcnRpZXMgZm9yIGdyb3VwcyBjaGlsZCB5b3Ugd2FudFxuICAgICAqIHRvIGRpc2FibGUgaXQgZm9yIGdyb3Vwcy5cbiAgICAgKiBkZWZhdWx0IHRvIGZhbHNlXG4gICAgICogc2luY2UgMS43LjBcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBzdGF0ZWZ1bGxDYWNoZTogICAgICAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gYHRydWVgLCBjYWNoZSBkb2VzIG5vdCBnZXQgdXBkYXRlZCBkdXJpbmcgc2NhbGluZy4gVGhlIHBpY3R1cmUgd2lsbCBnZXQgYmxvY2t5IGlmIHNjYWxlZFxuICAgICAqIHRvbyBtdWNoIGFuZCB3aWxsIGJlIHJlZHJhd24gd2l0aCBjb3JyZWN0IGRldGFpbHMgYXQgdGhlIGVuZCBvZiBzY2FsaW5nLlxuICAgICAqIHRoaXMgc2V0dGluZyBpcyBwZXJmb3JtYW5jZSBhbmQgYXBwbGljYXRpb24gZGVwZW5kYW50LlxuICAgICAqIGRlZmF1bHQgdG8gdHJ1ZVxuICAgICAqIHNpbmNlIDEuNy4wXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBub1NjYWxlQ2FjaGU6ICAgICAgICAgICAgICB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBgZmFsc2VgLCB0aGUgc3Rva2Ugd2lkdGggd2lsbCBzY2FsZSB3aXRoIHRoZSBvYmplY3QuXG4gICAgICogV2hlbiBgdHJ1ZWAsIHRoZSBzdHJva2Ugd2lsbCBhbHdheXMgbWF0Y2ggdGhlIGV4YWN0IHBpeGVsIHNpemUgZW50ZXJlZCBmb3Igc3Ryb2tlIHdpZHRoLlxuICAgICAqIHRoaXMgUHJvcGVydHkgZG9lcyBub3Qgd29yayBvbiBUZXh0IGNsYXNzZXMgb3IgZHJhd2luZyBjYWxsIHRoYXQgdXNlcyBzdHJva2VUZXh0LGZpbGxUZXh0IG1ldGhvZHNcbiAgICAgKiBkZWZhdWx0IHRvIGZhbHNlXG4gICAgICogQHNpbmNlIDIuNi4wXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgc3Ryb2tlVW5pZm9ybTogICAgICAgICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogV2hlbiBzZXQgdG8gYHRydWVgLCBvYmplY3QncyBjYWNoZSB3aWxsIGJlIHJlcmVuZGVyZWQgbmV4dCByZW5kZXIgY2FsbC5cbiAgICAgKiBzaW5jZSAxLjcuMFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZGlydHk6ICAgICAgICAgICAgICAgIHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBrZWVwcyB0aGUgdmFsdWUgb2YgdGhlIGxhc3QgaG92ZXJlZCBjb3JuZXIgZHVyaW5nIG1vdXNlIG1vdmUuXG4gICAgICogMCBpcyBubyBjb3JuZXIsIG9yICdtdCcsICdtbCcsICdtdHInIGV0Yy4uXG4gICAgICogSXQgc2hvdWxkIGJlIHByaXZhdGUsIGJ1dCB0aGVyZSBpcyBubyBoYXJtIGluIHVzaW5nIGl0IGFzXG4gICAgICogYSByZWFkLW9ubHkgcHJvcGVydHkuXG4gICAgICogQHR5cGUgbnVtYmVyfHN0cmluZ3xhbnlcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgX19jb3JuZXI6IDAsXG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBmaWxsIG9yIHRoZSBzdHJva2UgaXMgZHJhd24gZmlyc3QgKG9uZSBvZiBcImZpbGxcIiBvciBcInN0cm9rZVwiKVxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGFpbnRGaXJzdDogICAgICAgICAgICdmaWxsJyxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gJ2Rvd24nLCBvYmplY3QgaXMgc2V0IHRvIGFjdGl2ZSBvbiBtb3VzZWRvd24vdG91Y2hzdGFydFxuICAgICAqIFdoZW4gJ3VwJywgb2JqZWN0IGlzIHNldCB0byBhY3RpdmUgb24gbW91c2V1cC90b3VjaGVuZFxuICAgICAqIEV4cGVyaW1lbnRhbC4gTGV0J3Mgc2VlIGlmIHRoaXMgYnJlYWtzIGFueXRoaW5nIGJlZm9yZSBzdXBwb3J0aW5nIG9mZmljaWFsbHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIHNpbmNlIDQuNC4wXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHQgJ2Rvd24nXG4gICAgICovXG4gICAgYWN0aXZlT246ICAgICAgICAgICAnZG93bicsXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgd2hlbiBjaGVja2luZyBpZiBzdGF0ZVxuICAgICAqIG9mIGFuIG9iamVjdCBpcyBjaGFuZ2VkIChmYWJyaWMuT2JqZWN0I2hhc1N0YXRlQ2hhbmdlZClcbiAgICAgKiBhcyB3ZWxsIGFzIGZvciBoaXN0b3J5ICh1bmRvL3JlZG8pIHB1cnBvc2VzXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBzdGF0ZVByb3BlcnRpZXM6IChcbiAgICAgICd0b3AgbGVmdCB3aWR0aCBoZWlnaHQgc2NhbGVYIHNjYWxlWSBmbGlwWCBmbGlwWSBvcmlnaW5YIG9yaWdpblkgdHJhbnNmb3JtTWF0cml4ICcgK1xuICAgICAgJ3N0cm9rZSBzdHJva2VXaWR0aCBzdHJva2VEYXNoQXJyYXkgc3Ryb2tlTGluZUNhcCBzdHJva2VEYXNoT2Zmc2V0IHN0cm9rZUxpbmVKb2luIHN0cm9rZU1pdGVyTGltaXQgJyArXG4gICAgICAnYW5nbGUgb3BhY2l0eSBmaWxsIGdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiBzaGFkb3cgdmlzaWJsZSBiYWNrZ3JvdW5kQ29sb3IgJyArXG4gICAgICAnc2tld1ggc2tld1kgZmlsbFJ1bGUgcGFpbnRGaXJzdCBjbGlwUGF0aCBzdHJva2VVbmlmb3JtJ1xuICAgICkuc3BsaXQoJyAnKSxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgcHJvcGVydGllcyB0byBjb25zaWRlciB3aGVuIGNoZWNraW5nIGlmIGNhY2hlIG5lZWRzIHJlZnJlc2hcbiAgICAgKiBUaG9zZSBwcm9wZXJ0aWVzIGFyZSBjaGVja2VkIGJ5IHN0YXRlZnVsbENhY2hlIE9OICggb3IgbGF6eSBtb2RlIGlmIHdlIHdhbnQgKSBvciBmcm9tIHNpbmdsZVxuICAgICAqIGNhbGxzIHRvIE9iamVjdC5zZXQoa2V5LCB2YWx1ZSkuIElmIHRoZSBrZXkgaXMgaW4gdGhpcyBsaXN0LCB0aGUgb2JqZWN0IGlzIG1hcmtlZCBhcyBkaXJ0eVxuICAgICAqIGFuZCByZWZyZXNoZWQgYXQgdGhlIG5leHQgcmVuZGVyXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBjYWNoZVByb3BlcnRpZXM6IChcbiAgICAgICdmaWxsIHN0cm9rZSBzdHJva2VXaWR0aCBzdHJva2VEYXNoQXJyYXkgd2lkdGggaGVpZ2h0IHBhaW50Rmlyc3Qgc3Ryb2tlVW5pZm9ybScgK1xuICAgICAgJyBzdHJva2VMaW5lQ2FwIHN0cm9rZURhc2hPZmZzZXQgc3Ryb2tlTGluZUpvaW4gc3Ryb2tlTWl0ZXJMaW1pdCBiYWNrZ3JvdW5kQ29sb3IgY2xpcFBhdGgnXG4gICAgKS5zcGxpdCgnICcpLFxuXG4gICAgLyoqXG4gICAgICogTGlzdCBvZiBwcm9wZXJ0aWVzIHRvIGNvbnNpZGVyIGZvciBhbmltYXRpbmcgY29sb3JzLlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICovXG4gICAgY29sb3JQcm9wZXJ0aWVzOiAoXG4gICAgICAnZmlsbCBzdHJva2UgYmFja2dyb3VuZENvbG9yJ1xuICAgICkuc3BsaXQoJyAnKSxcblxuICAgIC8qKlxuICAgICAqIGEgZmFicmljT2JqZWN0IHRoYXQsIHdpdGhvdXQgc3Ryb2tlIGRlZmluZSBhIGNsaXBwaW5nIGFyZWEgd2l0aCB0aGVpciBzaGFwZS4gZmlsbGVkIGluIGJsYWNrXG4gICAgICogdGhlIGNsaXBQYXRoIG9iamVjdCBnZXRzIHVzZWQgd2hlbiB0aGUgb2JqZWN0IGhhcyByZW5kZXJlZCwgYW5kIHRoZSBjb250ZXh0IGlzIHBsYWNlZCBpbiB0aGUgY2VudGVyXG4gICAgICogb2YgdGhlIG9iamVjdCBjYWNoZUNhbnZhcy5cbiAgICAgKiBJZiB5b3Ugd2FudCAwLDAgb2YgYSBjbGlwUGF0aCB0byBhbGlnbiB3aXRoIGFuIG9iamVjdCBjZW50ZXIsIHVzZSBjbGlwUGF0aC5vcmlnaW5YL1kgdG8gJ2NlbnRlcidcbiAgICAgKiBAdHlwZSBmYWJyaWMuT2JqZWN0XG4gICAgICovXG4gICAgY2xpcFBhdGg6IHVuZGVmaW5lZCxcblxuICAgIC8qKlxuICAgICAqIE1lYW5pbmdmdWwgT05MWSB3aGVuIHRoZSBvYmplY3QgaXMgdXNlZCBhcyBjbGlwUGF0aC5cbiAgICAgKiBpZiB0cnVlLCB0aGUgY2xpcFBhdGggd2lsbCBtYWtlIHRoZSBvYmplY3QgY2xpcCB0byB0aGUgb3V0c2lkZSBvZiB0aGUgY2xpcFBhdGhcbiAgICAgKiBzaW5jZSAyLjQuMFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGludmVydGVkOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIE1lYW5pbmdmdWwgT05MWSB3aGVuIHRoZSBvYmplY3QgaXMgdXNlZCBhcyBjbGlwUGF0aC5cbiAgICAgKiBpZiB0cnVlLCB0aGUgY2xpcFBhdGggd2lsbCBoYXZlIGl0cyB0b3AgYW5kIGxlZnQgcmVsYXRpdmUgdG8gY2FudmFzLCBhbmQgd2lsbFxuICAgICAqIG5vdCBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBvYmplY3QgdHJhbnNmb3JtLiBUaGlzIHdpbGwgbWFrZSB0aGUgY2xpcFBhdGggcmVsYXRpdmVcbiAgICAgKiB0byB0aGUgY2FudmFzLCBidXQgY2xpcHBpbmcganVzdCBhIHBhcnRpY3VsYXIgb2JqZWN0LlxuICAgICAqIFdBUk5JTkcgdGhpcyBpcyBiZXRhLCB0aGlzIGZlYXR1cmUgbWF5IGNoYW5nZSBvciBiZSByZW5hbWVkLlxuICAgICAqIHNpbmNlIDIuNC4wXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgYWJzb2x1dGVQb3NpdGlvbmVkOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgdGhlIGNhbnZhcyB1c2VkIHRvIGtlZXAgdGhlIGNhY2hlZCBjb3B5IG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVDYWNoZUNhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jYWNoZVByb3BlcnRpZXMgPSB7fTtcbiAgICAgIHRoaXMuX2NhY2hlQ2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgdGhpcy5fY2FjaGVDb250ZXh0ID0gdGhpcy5fY2FjaGVDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIHRoaXMuX3VwZGF0ZUNhY2hlQ2FudmFzKCk7XG4gICAgICAvLyBpZiBjYW52YXMgZ2V0cyBjcmVhdGVkLCBpcyBlbXB0eSwgc28gZGlydHkuXG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTGltaXQgdGhlIGNhY2hlIGRpbWVuc2lvbnMgc28gdGhhdCBYICogWSBkbyBub3QgY3Jvc3MgZmFicmljLnBlcmZMaW1pdFNpemVUb3RhbFxuICAgICAqIGFuZCBlYWNoIHNpZGUgZG8gbm90IGNyb3NzIGZhYnJpYy5jYWNoZVNpZGVMaW1pdFxuICAgICAqIHRob3NlIG51bWJlcnMgYXJlIGNvbmZpZ3VyYWJsZSBzbyB0aGF0IHlvdSBjYW4gZ2V0IGFzIG11Y2ggZGV0YWlsIGFzIHlvdSB3YW50XG4gICAgICogbWFraW5nIGJhcmdhaW4gd2l0aCBwZXJmb3JtYW5jZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRpbXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGltcy53aWR0aCB3aWR0aCBvZiBjYW52YXNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGltcy5oZWlnaHQgaGVpZ2h0IG9mIGNhbnZhc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkaW1zLnpvb21YIHpvb21YIHpvb20gdmFsdWUgdG8gdW5zY2FsZSB0aGUgY2FudmFzIGJlZm9yZSBkcmF3aW5nIGNhY2hlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRpbXMuem9vbVkgem9vbVkgem9vbSB2YWx1ZSB0byB1bnNjYWxlIHRoZSBjYW52YXMgYmVmb3JlIGRyYXdpbmcgY2FjaGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9LndpZHRoIHdpZHRoIG9mIGNhbnZhc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0uaGVpZ2h0IGhlaWdodCBvZiBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9Lnpvb21YIHpvb21YIHpvb20gdmFsdWUgdG8gdW5zY2FsZSB0aGUgY2FudmFzIGJlZm9yZSBkcmF3aW5nIGNhY2hlXG4gICAgICogQHJldHVybiB7T2JqZWN0fS56b29tWSB6b29tWSB6b29tIHZhbHVlIHRvIHVuc2NhbGUgdGhlIGNhbnZhcyBiZWZvcmUgZHJhd2luZyBjYWNoZVxuICAgICAqL1xuICAgIF9saW1pdENhY2hlU2l6ZTogZnVuY3Rpb24oZGltcykge1xuICAgICAgdmFyIHBlcmZMaW1pdFNpemVUb3RhbCA9IGZhYnJpYy5wZXJmTGltaXRTaXplVG90YWwsXG4gICAgICAgICAgd2lkdGggPSBkaW1zLndpZHRoLCBoZWlnaHQgPSBkaW1zLmhlaWdodCxcbiAgICAgICAgICBtYXggPSBmYWJyaWMubWF4Q2FjaGVTaWRlTGltaXQsIG1pbiA9IGZhYnJpYy5taW5DYWNoZVNpZGVMaW1pdDtcbiAgICAgIGlmICh3aWR0aCA8PSBtYXggJiYgaGVpZ2h0IDw9IG1heCAmJiB3aWR0aCAqIGhlaWdodCA8PSBwZXJmTGltaXRTaXplVG90YWwpIHtcbiAgICAgICAgaWYgKHdpZHRoIDwgbWluKSB7XG4gICAgICAgICAgZGltcy53aWR0aCA9IG1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVpZ2h0IDwgbWluKSB7XG4gICAgICAgICAgZGltcy5oZWlnaHQgPSBtaW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpbXM7XG4gICAgICB9XG4gICAgICB2YXIgYXIgPSB3aWR0aCAvIGhlaWdodCwgbGltaXRlZERpbXMgPSBmYWJyaWMudXRpbC5saW1pdERpbXNCeUFyZWEoYXIsIHBlcmZMaW1pdFNpemVUb3RhbCksXG4gICAgICAgICAgY2FwVmFsdWUgPSBmYWJyaWMudXRpbC5jYXBWYWx1ZSxcbiAgICAgICAgICB4ID0gY2FwVmFsdWUobWluLCBsaW1pdGVkRGltcy54LCBtYXgpLFxuICAgICAgICAgIHkgPSBjYXBWYWx1ZShtaW4sIGxpbWl0ZWREaW1zLnksIG1heCk7XG4gICAgICBpZiAod2lkdGggPiB4KSB7XG4gICAgICAgIGRpbXMuem9vbVggLz0gd2lkdGggLyB4O1xuICAgICAgICBkaW1zLndpZHRoID0geDtcbiAgICAgICAgZGltcy5jYXBwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGhlaWdodCA+IHkpIHtcbiAgICAgICAgZGltcy56b29tWSAvPSBoZWlnaHQgLyB5O1xuICAgICAgICBkaW1zLmhlaWdodCA9IHk7XG4gICAgICAgIGRpbXMuY2FwcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkaW1zO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGRpbWVuc2lvbiBhbmQgdGhlIHpvb20gbGV2ZWwgbmVlZGVkIHRvIGNyZWF0ZSBhIGNhY2hlIGNhbnZhc1xuICAgICAqIGJpZyBlbm91Z2ggdG8gaG9zdCB0aGUgb2JqZWN0IHRvIGJlIGNhY2hlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0ueCB3aWR0aCBvZiBvYmplY3QgdG8gYmUgY2FjaGVkXG4gICAgICogQHJldHVybiB7T2JqZWN0fS55IGhlaWdodCBvZiBvYmplY3QgdG8gYmUgY2FjaGVkXG4gICAgICogQHJldHVybiB7T2JqZWN0fS53aWR0aCB3aWR0aCBvZiBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9LmhlaWdodCBoZWlnaHQgb2YgY2FudmFzXG4gICAgICogQHJldHVybiB7T2JqZWN0fS56b29tWCB6b29tWCB6b29tIHZhbHVlIHRvIHVuc2NhbGUgdGhlIGNhbnZhcyBiZWZvcmUgZHJhd2luZyBjYWNoZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0uem9vbVkgem9vbVkgem9vbSB2YWx1ZSB0byB1bnNjYWxlIHRoZSBjYW52YXMgYmVmb3JlIGRyYXdpbmcgY2FjaGVcbiAgICAgKi9cbiAgICBfZ2V0Q2FjaGVDYW52YXNEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvYmplY3RTY2FsZSA9IHRoaXMuZ2V0VG90YWxPYmplY3RTY2FsaW5nKCksXG4gICAgICAgICAgLy8gY2FjdWxhdGUgZGltZW5zaW9ucyB3aXRob3V0IHNrZXdpbmdcbiAgICAgICAgICBkaW0gPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoMCwgMCksXG4gICAgICAgICAgbmVlZGVkWCA9IGRpbS54ICogb2JqZWN0U2NhbGUuc2NhbGVYIC8gdGhpcy5zY2FsZVgsXG4gICAgICAgICAgbmVlZGVkWSA9IGRpbS55ICogb2JqZWN0U2NhbGUuc2NhbGVZIC8gdGhpcy5zY2FsZVk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBmb3Igc3VyZSB0aGlzIEFMSUFTSU5HX0xJTUlUIGlzIHNsaWdodGx5IGNyZWF0aW5nIHByb2JsZW1cbiAgICAgICAgLy8gaW4gc2l0dWF0aW9uIGluIHdoaWNoIHRoZSBjYWNoZSBjYW52YXMgZ2V0cyBhbiB1cHBlciBsaW1pdFxuICAgICAgICAvLyBhbHNvIG9iamVjdFNjYWxlIGNvbnRhaW5zIGFscmVhZHkgc2NhbGVYIGFuZCBzY2FsZVlcbiAgICAgICAgd2lkdGg6IG5lZWRlZFggKyBBTElBU0lOR19MSU1JVCxcbiAgICAgICAgaGVpZ2h0OiBuZWVkZWRZICsgQUxJQVNJTkdfTElNSVQsXG4gICAgICAgIHpvb21YOiBvYmplY3RTY2FsZS5zY2FsZVgsXG4gICAgICAgIHpvb21ZOiBvYmplY3RTY2FsZS5zY2FsZVksXG4gICAgICAgIHg6IG5lZWRlZFgsXG4gICAgICAgIHk6IG5lZWRlZFlcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB3aWR0aCBhbmQgaGVpZ2h0IG9mIHRoZSBjYW52YXMgZm9yIGNhY2hlXG4gICAgICogcmV0dXJucyB0cnVlIG9yIGZhbHNlIGlmIGNhbnZhcyBuZWVkZWQgcmVzaXplLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgY2FudmFzIGhhcyBiZWVuIHJlc2l6ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2FjaGVDYW52YXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHRhcmdldENhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgaWYgKHRoaXMubm9TY2FsZUNhY2hlICYmIHRhcmdldENhbnZhcyAmJiB0YXJnZXRDYW52YXMuX2N1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IHRhcmdldENhbnZhcy5fY3VycmVudFRyYW5zZm9ybS50YXJnZXQsXG4gICAgICAgICAgICBhY3Rpb24gPSB0YXJnZXRDYW52YXMuX2N1cnJlbnRUcmFuc2Zvcm0uYWN0aW9uO1xuICAgICAgICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIGFjdGlvbi5zbGljZSAmJiBhY3Rpb24uc2xpY2UoMCwgNSkgPT09ICdzY2FsZScpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjYW52YXMgPSB0aGlzLl9jYWNoZUNhbnZhcyxcbiAgICAgICAgICBkaW1zID0gdGhpcy5fbGltaXRDYWNoZVNpemUodGhpcy5fZ2V0Q2FjaGVDYW52YXNEaW1lbnNpb25zKCkpLFxuICAgICAgICAgIG1pbkNhY2hlU2l6ZSA9IGZhYnJpYy5taW5DYWNoZVNpZGVMaW1pdCxcbiAgICAgICAgICB3aWR0aCA9IGRpbXMud2lkdGgsIGhlaWdodCA9IGRpbXMuaGVpZ2h0LCBkcmF3aW5nV2lkdGgsIGRyYXdpbmdIZWlnaHQsXG4gICAgICAgICAgem9vbVggPSBkaW1zLnpvb21YLCB6b29tWSA9IGRpbXMuem9vbVksXG4gICAgICAgICAgZGltZW5zaW9uc0NoYW5nZWQgPSB3aWR0aCAhPT0gdGhpcy5jYWNoZVdpZHRoIHx8IGhlaWdodCAhPT0gdGhpcy5jYWNoZUhlaWdodCxcbiAgICAgICAgICB6b29tQ2hhbmdlZCA9IHRoaXMuem9vbVggIT09IHpvb21YIHx8IHRoaXMuem9vbVkgIT09IHpvb21ZLFxuICAgICAgICAgIHNob3VsZFJlZHJhdyA9IGRpbWVuc2lvbnNDaGFuZ2VkIHx8IHpvb21DaGFuZ2VkLFxuICAgICAgICAgIGFkZGl0aW9uYWxXaWR0aCA9IDAsIGFkZGl0aW9uYWxIZWlnaHQgPSAwLCBzaG91bGRSZXNpemVDYW52YXMgPSBmYWxzZTtcbiAgICAgIGlmIChkaW1lbnNpb25zQ2hhbmdlZCkge1xuICAgICAgICB2YXIgY2FudmFzV2lkdGggPSB0aGlzLl9jYWNoZUNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIGNhbnZhc0hlaWdodCA9IHRoaXMuX2NhY2hlQ2FudmFzLmhlaWdodCxcbiAgICAgICAgICAgIHNpemVHcm93aW5nID0gd2lkdGggPiBjYW52YXNXaWR0aCB8fCBoZWlnaHQgPiBjYW52YXNIZWlnaHQsXG4gICAgICAgICAgICBzaXplU2hyaW5raW5nID0gKHdpZHRoIDwgY2FudmFzV2lkdGggKiAwLjkgfHwgaGVpZ2h0IDwgY2FudmFzSGVpZ2h0ICogMC45KSAmJlxuICAgICAgICAgICAgICBjYW52YXNXaWR0aCA+IG1pbkNhY2hlU2l6ZSAmJiBjYW52YXNIZWlnaHQgPiBtaW5DYWNoZVNpemU7XG4gICAgICAgIHNob3VsZFJlc2l6ZUNhbnZhcyA9IHNpemVHcm93aW5nIHx8IHNpemVTaHJpbmtpbmc7XG4gICAgICAgIGlmIChzaXplR3Jvd2luZyAmJiAhZGltcy5jYXBwZWQgJiYgKHdpZHRoID4gbWluQ2FjaGVTaXplIHx8IGhlaWdodCA+IG1pbkNhY2hlU2l6ZSkpIHtcbiAgICAgICAgICBhZGRpdGlvbmFsV2lkdGggPSB3aWR0aCAqIDAuMTtcbiAgICAgICAgICBhZGRpdGlvbmFsSGVpZ2h0ID0gaGVpZ2h0ICogMC4xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGZhYnJpYy5UZXh0ICYmIHRoaXMucGF0aCkge1xuICAgICAgICBzaG91bGRSZWRyYXcgPSB0cnVlO1xuICAgICAgICBzaG91bGRSZXNpemVDYW52YXMgPSB0cnVlO1xuICAgICAgICBhZGRpdGlvbmFsV2lkdGggKz0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoMCkgKiB0aGlzLnpvb21YO1xuICAgICAgICBhZGRpdGlvbmFsSGVpZ2h0ICs9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKDApICogdGhpcy56b29tWTtcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRSZWRyYXcpIHtcbiAgICAgICAgaWYgKHNob3VsZFJlc2l6ZUNhbnZhcykge1xuICAgICAgICAgIGNhbnZhcy53aWR0aCA9IE1hdGguY2VpbCh3aWR0aCArIGFkZGl0aW9uYWxXaWR0aCk7XG4gICAgICAgICAgY2FudmFzLmhlaWdodCA9IE1hdGguY2VpbChoZWlnaHQgKyBhZGRpdGlvbmFsSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9jYWNoZUNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICAgIHRoaXMuX2NhY2hlQ29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBkcmF3aW5nV2lkdGggPSBkaW1zLnggLyAyO1xuICAgICAgICBkcmF3aW5nSGVpZ2h0ID0gZGltcy55IC8gMjtcbiAgICAgICAgdGhpcy5jYWNoZVRyYW5zbGF0aW9uWCA9IE1hdGgucm91bmQoY2FudmFzLndpZHRoIC8gMiAtIGRyYXdpbmdXaWR0aCkgKyBkcmF3aW5nV2lkdGg7XG4gICAgICAgIHRoaXMuY2FjaGVUcmFuc2xhdGlvblkgPSBNYXRoLnJvdW5kKGNhbnZhcy5oZWlnaHQgLyAyIC0gZHJhd2luZ0hlaWdodCkgKyBkcmF3aW5nSGVpZ2h0O1xuICAgICAgICB0aGlzLmNhY2hlV2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5jYWNoZUhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5fY2FjaGVDb250ZXh0LnRyYW5zbGF0ZSh0aGlzLmNhY2hlVHJhbnNsYXRpb25YLCB0aGlzLmNhY2hlVHJhbnNsYXRpb25ZKTtcbiAgICAgICAgdGhpcy5fY2FjaGVDb250ZXh0LnNjYWxlKHpvb21YLCB6b29tWSk7XG4gICAgICAgIHRoaXMuem9vbVggPSB6b29tWDtcbiAgICAgICAgdGhpcy56b29tWSA9IHpvb21ZO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBvYmplY3QncyBwcm9wZXJ0aWVzIGZyb20gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICBzZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB0aGlzLl9zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgdGhpcy5faW5pdEdyYWRpZW50KG9wdGlvbnMuZmlsbCwgJ2ZpbGwnKTtcbiAgICAgIHRoaXMuX2luaXRHcmFkaWVudChvcHRpb25zLnN0cm9rZSwgJ3N0cm9rZScpO1xuICAgICAgdGhpcy5faW5pdFBhdHRlcm4ob3B0aW9ucy5maWxsLCAnZmlsbCcpO1xuICAgICAgdGhpcy5faW5pdFBhdHRlcm4ob3B0aW9ucy5zdHJva2UsICdzdHJva2UnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyBjb250ZXh0IHdoZW4gcmVuZGVyaW5nIGFuIG9iamVjdFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dFxuICAgICAqL1xuICAgIHRyYW5zZm9ybTogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgbmVlZEZ1bGxUcmFuc2Zvcm0gPSAodGhpcy5ncm91cCAmJiAhdGhpcy5ncm91cC5fdHJhbnNmb3JtRG9uZSkgfHxcbiAgICAgICAgICh0aGlzLmdyb3VwICYmIHRoaXMuY2FudmFzICYmIGN0eCA9PT0gdGhpcy5jYW52YXMuY29udGV4dFRvcCk7XG4gICAgICB2YXIgbSA9IHRoaXMuY2FsY1RyYW5zZm9ybU1hdHJpeCghbmVlZEZ1bGxUcmFuc2Zvcm0pO1xuICAgICAgY3R4LnRyYW5zZm9ybShtWzBdLCBtWzFdLCBtWzJdLCBtWzNdLCBtWzRdLCBtWzVdKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIE5VTV9GUkFDVElPTl9ESUdJVFMgPSBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFMsXG5cbiAgICAgICAgICBvYmplY3QgPSB7XG4gICAgICAgICAgICB0eXBlOiAgICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSxcbiAgICAgICAgICAgIHZlcnNpb246ICAgICAgICAgICAgICAgICAgZmFicmljLnZlcnNpb24sXG4gICAgICAgICAgICBvcmlnaW5YOiAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luWCxcbiAgICAgICAgICAgIG9yaWdpblk6ICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5ZLFxuICAgICAgICAgICAgbGVmdDogICAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMubGVmdCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICB0b3A6ICAgICAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy50b3AsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAgICAgd2lkdGg6ICAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMud2lkdGgsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAgICAgaGVpZ2h0OiAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMuaGVpZ2h0LCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIGZpbGw6ICAgICAgICAgICAgICAgICAgICAgKHRoaXMuZmlsbCAmJiB0aGlzLmZpbGwudG9PYmplY3QpID8gdGhpcy5maWxsLnRvT2JqZWN0KCkgOiB0aGlzLmZpbGwsXG4gICAgICAgICAgICBzdHJva2U6ICAgICAgICAgICAgICAgICAgICh0aGlzLnN0cm9rZSAmJiB0aGlzLnN0cm9rZS50b09iamVjdCkgPyB0aGlzLnN0cm9rZS50b09iamVjdCgpIDogdGhpcy5zdHJva2UsXG4gICAgICAgICAgICBzdHJva2VXaWR0aDogICAgICAgICAgICAgIHRvRml4ZWQodGhpcy5zdHJva2VXaWR0aCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6ICAgICAgICAgIHRoaXMuc3Ryb2tlRGFzaEFycmF5ID8gdGhpcy5zdHJva2VEYXNoQXJyYXkuY29uY2F0KCkgOiB0aGlzLnN0cm9rZURhc2hBcnJheSxcbiAgICAgICAgICAgIHN0cm9rZUxpbmVDYXA6ICAgICAgICAgICAgdGhpcy5zdHJva2VMaW5lQ2FwLFxuICAgICAgICAgICAgc3Ryb2tlRGFzaE9mZnNldDogICAgICAgICB0aGlzLnN0cm9rZURhc2hPZmZzZXQsXG4gICAgICAgICAgICBzdHJva2VMaW5lSm9pbjogICAgICAgICAgIHRoaXMuc3Ryb2tlTGluZUpvaW4sXG4gICAgICAgICAgICBzdHJva2VVbmlmb3JtOiAgICAgICAgICAgIHRoaXMuc3Ryb2tlVW5pZm9ybSxcbiAgICAgICAgICAgIHN0cm9rZU1pdGVyTGltaXQ6ICAgICAgICAgdG9GaXhlZCh0aGlzLnN0cm9rZU1pdGVyTGltaXQsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAgICAgc2NhbGVYOiAgICAgICAgICAgICAgICAgICB0b0ZpeGVkKHRoaXMuc2NhbGVYLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIHNjYWxlWTogICAgICAgICAgICAgICAgICAgdG9GaXhlZCh0aGlzLnNjYWxlWSwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICBhbmdsZTogICAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy5hbmdsZSwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgICBmbGlwWDogICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpcFgsXG4gICAgICAgICAgICBmbGlwWTogICAgICAgICAgICAgICAgICAgIHRoaXMuZmxpcFksXG4gICAgICAgICAgICBvcGFjaXR5OiAgICAgICAgICAgICAgICAgIHRvRml4ZWQodGhpcy5vcGFjaXR5LCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIHNoYWRvdzogICAgICAgICAgICAgICAgICAgKHRoaXMuc2hhZG93ICYmIHRoaXMuc2hhZG93LnRvT2JqZWN0KSA/IHRoaXMuc2hhZG93LnRvT2JqZWN0KCkgOiB0aGlzLnNoYWRvdyxcbiAgICAgICAgICAgIHZpc2libGU6ICAgICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAgICAgICAgICB0aGlzLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgIGZpbGxSdWxlOiAgICAgICAgICAgICAgICAgdGhpcy5maWxsUnVsZSxcbiAgICAgICAgICAgIHBhaW50Rmlyc3Q6ICAgICAgICAgICAgICAgdGhpcy5wYWludEZpcnN0LFxuICAgICAgICAgICAgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uOiB0aGlzLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbixcbiAgICAgICAgICAgIHNrZXdYOiAgICAgICAgICAgICAgICAgICAgdG9GaXhlZCh0aGlzLnNrZXdYLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAgIHNrZXdZOiAgICAgICAgICAgICAgICAgICAgdG9GaXhlZCh0aGlzLnNrZXdZLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5jbGlwUGF0aCAmJiAhdGhpcy5jbGlwUGF0aC5leGNsdWRlRnJvbUV4cG9ydCkge1xuICAgICAgICBvYmplY3QuY2xpcFBhdGggPSB0aGlzLmNsaXBQYXRoLnRvT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgICBvYmplY3QuY2xpcFBhdGguaW52ZXJ0ZWQgPSB0aGlzLmNsaXBQYXRoLmludmVydGVkO1xuICAgICAgICBvYmplY3QuY2xpcFBhdGguYWJzb2x1dGVQb3NpdGlvbmVkID0gdGhpcy5jbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQ7XG4gICAgICB9XG5cbiAgICAgIGZhYnJpYy51dGlsLnBvcHVsYXRlV2l0aFByb3BlcnRpZXModGhpcywgb2JqZWN0LCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIGlmICghdGhpcy5pbmNsdWRlRGVmYXVsdFZhbHVlcykge1xuICAgICAgICBvYmplY3QgPSB0aGlzLl9yZW1vdmVEZWZhdWx0VmFsdWVzKG9iamVjdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgKGRhdGFsZXNzKSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b0RhdGFsZXNzT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICAvLyB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHN1YmNsYXNzZXNcbiAgICAgIHJldHVybiB0aGlzLnRvT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICAgKi9cbiAgICBfcmVtb3ZlRGVmYXVsdFZhbHVlczogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcHJvdG90eXBlID0gZmFicmljLnV0aWwuZ2V0S2xhc3Mob2JqZWN0LnR5cGUpLnByb3RvdHlwZSxcbiAgICAgICAgICBzdGF0ZVByb3BlcnRpZXMgPSBwcm90b3R5cGUuc3RhdGVQcm9wZXJ0aWVzO1xuICAgICAgc3RhdGVQcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgICBpZiAocHJvcCA9PT0gJ2xlZnQnIHx8IHByb3AgPT09ICd0b3AnKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmplY3RbcHJvcF0gPT09IHByb3RvdHlwZVtwcm9wXSkge1xuICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gYmFzaWNhbGx5IGEgY2hlY2sgZm9yIFtdID09PSBbXVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3RbcHJvcF0pICYmIEFycmF5LmlzQXJyYXkocHJvdG90eXBlW3Byb3BdKVxuICAgICAgICAgICYmIG9iamVjdFtwcm9wXS5sZW5ndGggPT09IDAgJiYgcHJvdG90eXBlW3Byb3BdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBvYmplY3RbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnIzxmYWJyaWMuJyArIGNhcGl0YWxpemUodGhpcy50eXBlKSArICc+JztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBvYmplY3Qgc2NhbGUgZmFjdG9yIGNvdW50aW5nIGFsc28gdGhlIGdyb3VwIHNjYWxpbmdcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIHNjYWxlWCBhbmQgc2NhbGVZIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBnZXRPYmplY3RTY2FsaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGlmIHRoZSBvYmplY3QgaXMgYSB0b3AgbGV2ZWwgb25lLCBvbiB0aGUgY2FudmFzLCB3ZSBnbyBmb3Igc2ltcGxlIGFyaXRtZXRpY1xuICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjb21wbGV4IG1ldGhvZCB3aXRoIGFuZ2xlcyB3aWxsIHJldHVybiBhcHByb3hpbWF0aW9ucyBhbmQgZGVjaW1hbHNcbiAgICAgIC8vIGFuZCB3aWxsIGxpa2VseSBraWxsIHRoZSBjYWNoZSB3aGVuIG5vdCBuZWVkZWRcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWJyaWNqcy9mYWJyaWMuanMvaXNzdWVzLzcxNTdcbiAgICAgIGlmICghdGhpcy5ncm91cCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjYWxlWDogdGhpcy5zY2FsZVgsXG4gICAgICAgICAgc2NhbGVZOiB0aGlzLnNjYWxlWSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHdlIGFyZSBpbnNpZGUgYSBncm91cCB0b3RhbCB6b29tIGNhbGN1bGF0aW9uIGlzIGNvbXBsZXgsIHdlIGRlZmVyIHRvIGdlbmVyaWMgbWF0cmljZXNcbiAgICAgIHZhciBvcHRpb25zID0gZmFicmljLnV0aWwucXJEZWNvbXBvc2UodGhpcy5jYWxjVHJhbnNmb3JtTWF0cml4KCkpO1xuICAgICAgcmV0dXJuIHsgc2NhbGVYOiBNYXRoLmFicyhvcHRpb25zLnNjYWxlWCksIHNjYWxlWTogTWF0aC5hYnMob3B0aW9ucy5zY2FsZVkpIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgb2JqZWN0IHNjYWxlIGZhY3RvciBjb3VudGluZyBhbHNvIHRoZSBncm91cCBzY2FsaW5nLCB6b29tIGFuZCByZXRpbmFcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCB3aXRoIHNjYWxlWCBhbmQgc2NhbGVZIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBnZXRUb3RhbE9iamVjdFNjYWxpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjYWxlID0gdGhpcy5nZXRPYmplY3RTY2FsaW5nKCksIHNjYWxlWCA9IHNjYWxlLnNjYWxlWCwgc2NhbGVZID0gc2NhbGUuc2NhbGVZO1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHZhciB6b29tID0gdGhpcy5jYW52YXMuZ2V0Wm9vbSgpO1xuICAgICAgICB2YXIgcmV0aW5hID0gdGhpcy5jYW52YXMuZ2V0UmV0aW5hU2NhbGluZygpO1xuICAgICAgICBzY2FsZVggKj0gem9vbSAqIHJldGluYTtcbiAgICAgICAgc2NhbGVZICo9IHpvb20gKiByZXRpbmE7XG4gICAgICB9XG4gICAgICByZXR1cm4geyBzY2FsZVg6IHNjYWxlWCwgc2NhbGVZOiBzY2FsZVkgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRoZSBvYmplY3Qgb3BhY2l0eSBjb3VudGluZyBhbHNvIHRoZSBncm91cCBwcm9wZXJ0eVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRPYmplY3RPcGFjaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcGFjaXR5ID0gdGhpcy5vcGFjaXR5O1xuICAgICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgICAgb3BhY2l0eSAqPSB0aGlzLmdyb3VwLmdldE9iamVjdE9wYWNpdHkoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcGFjaXR5O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIF9zZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBzaG91bGRDb25zdHJhaW5WYWx1ZSA9IChrZXkgPT09ICdzY2FsZVgnIHx8IGtleSA9PT0gJ3NjYWxlWScpLFxuICAgICAgICAgIGlzQ2hhbmdlZCA9IHRoaXNba2V5XSAhPT0gdmFsdWUsIGdyb3VwTmVlZHNVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgaWYgKHNob3VsZENvbnN0cmFpblZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5fY29uc3RyYWluU2NhbGUodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NjYWxlWCcgJiYgdmFsdWUgPCAwKSB7XG4gICAgICAgIHRoaXMuZmxpcFggPSAhdGhpcy5mbGlwWDtcbiAgICAgICAgdmFsdWUgKj0gLTE7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChrZXkgPT09ICdzY2FsZVknICYmIHZhbHVlIDwgMCkge1xuICAgICAgICB0aGlzLmZsaXBZID0gIXRoaXMuZmxpcFk7XG4gICAgICAgIHZhbHVlICo9IC0xO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoa2V5ID09PSAnc2hhZG93JyAmJiB2YWx1ZSAmJiAhKHZhbHVlIGluc3RhbmNlb2YgZmFicmljLlNoYWRvdykpIHtcbiAgICAgICAgdmFsdWUgPSBuZXcgZmFicmljLlNoYWRvdyh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChrZXkgPT09ICdkaXJ0eScgJiYgdGhpcy5ncm91cCkge1xuICAgICAgICB0aGlzLmdyb3VwLnNldCgnZGlydHknLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoaXNDaGFuZ2VkKSB7XG4gICAgICAgIGdyb3VwTmVlZHNVcGRhdGUgPSB0aGlzLmdyb3VwICYmIHRoaXMuZ3JvdXAuaXNPbkFDYWNoZSgpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZVByb3BlcnRpZXMuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICBncm91cE5lZWRzVXBkYXRlICYmIHRoaXMuZ3JvdXAuc2V0KCdkaXJ0eScsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdyb3VwTmVlZHNVcGRhdGUgJiYgdGhpcy5zdGF0ZVByb3BlcnRpZXMuaW5kZXhPZihrZXkpID4gLTEpIHtcbiAgICAgICAgICB0aGlzLmdyb3VwLnNldCgnZGlydHknLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgY2FsbGJhY2sgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IHRoZSBwYXJlbnQgZ3JvdXAgb2YgYW4gb2JqZWN0IGV2ZXJ5XG4gICAgICogdGltZSBhIG5vbi1kZWxlZ2F0ZWQgcHJvcGVydHkgY2hhbmdlcyBvbiB0aGUgZ3JvdXAuIEl0IGlzIHBhc3NlZCB0aGUga2V5XG4gICAgICogYW5kIHZhbHVlIGFzIHBhcmFtZXRlcnMuIE5vdCBhZGRpbmcgaW4gdGhpcyBmdW5jdGlvbidzIHNpZ25hdHVyZSB0byBhdm9pZFxuICAgICAqIFRyYXZpcyBidWlsZCBlcnJvciBhYm91dCB1bnVzZWQgdmFyaWFibGVzLlxuICAgICAqL1xuICAgIHNldE9uR3JvdXA6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaW1wbGVtZW50ZWQgYnkgc3ViLWNsYXNzZXMsIGFzIG5lZWRlZC5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHZpZXdwb3J0VHJhbnNmb3JtIGZyb20gT2JqZWN0J3MgY2FudmFzIGlmIHBvc3NpYmxlXG4gICAgICogQG1ldGhvZCBnZXRWaWV3cG9ydFRyYW5zZm9ybVxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZVxuICAgICAqIEByZXR1cm4ge0FycmF5fVxuICAgICAqL1xuICAgIGdldFZpZXdwb3J0VHJhbnNmb3JtOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFicmljLmlNYXRyaXguY29uY2F0KCk7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQHByaXZhdGVcbiAgICAgKiByZXR1cm4gaWYgdGhlIG9iamVjdCB3b3VsZCBiZSB2aXNpYmxlIGluIHJlbmRlcmluZ1xuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZVxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNOb3RWaXNpYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wYWNpdHkgPT09IDAgfHxcbiAgICAgICAgKCF0aGlzLndpZHRoICYmICF0aGlzLmhlaWdodCAmJiB0aGlzLnN0cm9rZVdpZHRoID09PSAwKSB8fFxuICAgICAgICAhdGhpcy52aXNpYmxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGFuIG9iamVjdCBvbiBhIHNwZWNpZmllZCBjb250ZXh0XG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIHJlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICAvLyBkbyBub3QgcmVuZGVyIGlmIHdpZHRoL2hlaWdodCBhcmUgemVyb3Mgb3Igb2JqZWN0IGlzIG5vdCB2aXNpYmxlXG4gICAgICBpZiAodGhpcy5pc05vdFZpc2libGUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMuc2tpcE9mZnNjcmVlbiAmJiAhdGhpcy5ncm91cCAmJiAhdGhpcy5pc09uU2NyZWVuKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHRoaXMuX3NldHVwQ29tcG9zaXRlT3BlcmF0aW9uKGN0eCk7XG4gICAgICB0aGlzLmRyYXdTZWxlY3Rpb25CYWNrZ3JvdW5kKGN0eCk7XG4gICAgICB0aGlzLnRyYW5zZm9ybShjdHgpO1xuICAgICAgdGhpcy5fc2V0T3BhY2l0eShjdHgpO1xuICAgICAgdGhpcy5fc2V0U2hhZG93KGN0eCwgdGhpcyk7XG4gICAgICBpZiAodGhpcy5zaG91bGRDYWNoZSgpKSB7XG4gICAgICAgIHRoaXMucmVuZGVyQ2FjaGUoKTtcbiAgICAgICAgdGhpcy5kcmF3Q2FjaGVPbkNhbnZhcyhjdHgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZUNhY2hlQ2FudmFzKCk7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kcmF3T2JqZWN0KGN0eCk7XG4gICAgICAgIGlmICh0aGlzLm9iamVjdENhY2hpbmcgJiYgdGhpcy5zdGF0ZWZ1bGxDYWNoZSkge1xuICAgICAgICAgIHRoaXMuc2F2ZVN0YXRlKHsgcHJvcGVydHlTZXQ6ICdjYWNoZVByb3BlcnRpZXMnIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICByZW5kZXJDYWNoZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBpZiAoIXRoaXMuX2NhY2hlQ2FudmFzIHx8ICF0aGlzLl9jYWNoZUNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlQ2FjaGVDYW52YXMoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzQ2FjaGVEaXJ0eSgpKSB7XG4gICAgICAgIHRoaXMuc3RhdGVmdWxsQ2FjaGUgJiYgdGhpcy5zYXZlU3RhdGUoeyBwcm9wZXJ0eVNldDogJ2NhY2hlUHJvcGVydGllcycgfSk7XG4gICAgICAgIHRoaXMuZHJhd09iamVjdCh0aGlzLl9jYWNoZUNvbnRleHQsIG9wdGlvbnMuZm9yQ2xpcHBpbmcpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBjYWNoZUNhbnZhcyBhbmQgaXRzIGRpbWVuc2lvbnMgZnJvbSB0aGUgb2JqZWN0c1xuICAgICAqL1xuICAgIF9yZW1vdmVDYWNoZUNhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jYWNoZUNhbnZhcyA9IG51bGw7XG4gICAgICB0aGlzLl9jYWNoZUNvbnRleHQgPSBudWxsO1xuICAgICAgdGhpcy5jYWNoZVdpZHRoID0gMDtcbiAgICAgIHRoaXMuY2FjaGVIZWlnaHQgPSAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdHJ1ZSBpZiB0aGUgb2JqZWN0IHdpbGwgZHJhdyBhIHN0cm9rZVxuICAgICAqIERvZXMgbm90IGNvbnNpZGVyIHRleHQgc3R5bGVzLiBUaGlzIGlzIGp1c3QgYSBzaG9ydGN1dCB1c2VkIGF0IHJlbmRlcmluZyB0aW1lXG4gICAgICogV2Ugd2FudCBpdCB0byBiZSBhbiBhcHByb3hpbWF0aW9uIGFuZCBiZSBmYXN0LlxuICAgICAqIHdyb3RlIHRvIGF2b2lkIGV4dHJhIGNhY2hpbmcsIGl0IGhhcyB0byByZXR1cm4gdHJ1ZSB3aGVuIHN0cm9rZSBoYXBwZW5zLFxuICAgICAqIGNhbiBndWVzcyB3aGVuIGl0IHdpbGwgbm90IGhhcHBlbiBhdCAxMDAlIGNoYW5jZSwgZG9lcyBub3QgbWF0dGVyIGlmIGl0IG1pc3Nlc1xuICAgICAqIHNvbWUgdXNlIGNhc2Ugd2hlcmUgdGhlIHN0cm9rZSBpcyBpbnZpc2libGUuXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQHJldHVybnMgQm9vbGVhblxuICAgICAqL1xuICAgIGhhc1N0cm9rZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdHJva2UgJiYgdGhpcy5zdHJva2UgIT09ICd0cmFuc3BhcmVudCcgJiYgdGhpcy5zdHJva2VXaWR0aCAhPT0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCB3aWxsIGRyYXcgYSBmaWxsXG4gICAgICogRG9lcyBub3QgY29uc2lkZXIgdGV4dCBzdHlsZXMuIFRoaXMgaXMganVzdCBhIHNob3J0Y3V0IHVzZWQgYXQgcmVuZGVyaW5nIHRpbWVcbiAgICAgKiBXZSB3YW50IGl0IHRvIGJlIGFuIGFwcHJveGltYXRpb24gYW5kIGJlIGZhc3QuXG4gICAgICogd3JvdGUgdG8gYXZvaWQgZXh0cmEgY2FjaGluZywgaXQgaGFzIHRvIHJldHVybiB0cnVlIHdoZW4gZmlsbCBoYXBwZW5zLFxuICAgICAqIGNhbiBndWVzcyB3aGVuIGl0IHdpbGwgbm90IGhhcHBlbiBhdCAxMDAlIGNoYW5jZSwgZG9lcyBub3QgbWF0dGVyIGlmIGl0IG1pc3Nlc1xuICAgICAqIHNvbWUgdXNlIGNhc2Ugd2hlcmUgdGhlIGZpbGwgaXMgaW52aXNpYmxlLlxuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEByZXR1cm5zIEJvb2xlYW5cbiAgICAgKi9cbiAgICBoYXNGaWxsOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbGwgJiYgdGhpcy5maWxsICE9PSAndHJhbnNwYXJlbnQnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHNldCB0byBgdHJ1ZWAsIGZvcmNlIHRoZSBvYmplY3QgdG8gaGF2ZSBpdHMgb3duIGNhY2hlLCBldmVuIGlmIGl0IGlzIGluc2lkZSBhIGdyb3VwXG4gICAgICogaXQgbWF5IGJlIG5lZWRlZCB3aGVuIHlvdXIgb2JqZWN0IGJlaGF2ZSBpbiBhIHBhcnRpY3VsYXIgd2F5IG9uIHRoZSBjYWNoZSBhbmQgYWx3YXlzIG5lZWRzXG4gICAgICogaXRzIG93biBpc29sYXRlZCBjYW52YXMgdG8gcmVuZGVyIGNvcnJlY3RseS5cbiAgICAgKiBDcmVhdGVkIHRvIGJlIG92ZXJyaWRkZW5cbiAgICAgKiBzaW5jZSAxLjcuMTJcbiAgICAgKiBAcmV0dXJucyBCb29sZWFuXG4gICAgICovXG4gICAgbmVlZHNJdHNPd25DYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5wYWludEZpcnN0ID09PSAnc3Ryb2tlJyAmJlxuICAgICAgICB0aGlzLmhhc0ZpbGwoKSAmJiB0aGlzLmhhc1N0cm9rZSgpICYmIHR5cGVvZiB0aGlzLnNoYWRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jbGlwUGF0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVjaWRlIGlmIHRoZSBvYmplY3Qgc2hvdWxkIGNhY2hlIG9yIG5vdC4gQ3JlYXRlIGl0cyBvd24gY2FjaGUgbGV2ZWxcbiAgICAgKiBvYmplY3RDYWNoaW5nIGlzIGEgZ2xvYmFsIGZsYWcsIHdpbnMgb3ZlciBldmVyeXRoaW5nXG4gICAgICogbmVlZHNJdHNPd25DYWNoZSBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBvYmplY3QgZHJhd2luZyBtZXRob2QgcmVxdWlyZXNcbiAgICAgKiBhIGNhY2hlIHN0ZXAuIE5vbmUgb2YgdGhlIGZhYnJpYyBjbGFzc2VzIHJlcXVpcmVzIGl0LlxuICAgICAqIEdlbmVyYWxseSB5b3UgZG8gbm90IGNhY2hlIG9iamVjdHMgaW4gZ3JvdXBzIGJlY2F1c2UgdGhlIGdyb3VwIG91dHNpZGUgaXMgY2FjaGVkLlxuICAgICAqIFJlYWQgYXM6IGNhY2hlIGlmIGlzIG5lZWRlZCwgb3IgaWYgdGhlIGZlYXR1cmUgaXMgZW5hYmxlZCBidXQgd2UgYXJlIG5vdCBhbHJlYWR5IGNhY2hpbmcuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzaG91bGRDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLm93bkNhY2hpbmcgPSB0aGlzLm5lZWRzSXRzT3duQ2FjaGUoKSB8fCAoXG4gICAgICAgIHRoaXMub2JqZWN0Q2FjaGluZyAmJlxuICAgICAgICAoIXRoaXMuZ3JvdXAgfHwgIXRoaXMuZ3JvdXAuaXNPbkFDYWNoZSgpKVxuICAgICAgKTtcbiAgICAgIHJldHVybiB0aGlzLm93bkNhY2hpbmc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoaXMgb2JqZWN0IG9yIGEgY2hpbGQgb2JqZWN0IHdpbGwgY2FzdCBhIHNoYWRvd1xuICAgICAqIHVzZWQgYnkgR3JvdXAuc2hvdWxkQ2FjaGUgdG8ga25vdyBpZiBjaGlsZCBoYXMgYSBzaGFkb3cgcmVjdXJzaXZlbHlcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHdpbGxEcmF3U2hhZG93OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuc2hhZG93ICYmICh0aGlzLnNoYWRvdy5vZmZzZXRYICE9PSAwIHx8IHRoaXMuc2hhZG93Lm9mZnNldFkgIT09IDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHRoZSBkcmF3aW5nIG9wZXJhdGlvbiBmb3IgYW4gb2JqZWN0IGNsaXBQYXRoXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gY2xpcFBhdGhcbiAgICAgKi9cbiAgICBkcmF3Q2xpcFBhdGhPbkNhY2hlOiBmdW5jdGlvbihjdHgsIGNsaXBQYXRoKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgLy8gREVCVUc6IHVuY29tbWVudCB0aGlzIGxpbmUsIGNvbW1lbnQgdGhlIGZvbGxvd2luZ1xuICAgICAgLy8gY3R4Lmdsb2JhbEFscGhhID0gMC40XG4gICAgICBpZiAoY2xpcFBhdGguaW52ZXJ0ZWQpIHtcbiAgICAgICAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1vdXQnO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24taW4nO1xuICAgICAgfVxuICAgICAgLy9jdHguc2NhbGUoMSAvIDIsIDEgLyAyKTtcbiAgICAgIGlmIChjbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQpIHtcbiAgICAgICAgdmFyIG0gPSBmYWJyaWMudXRpbC5pbnZlcnRUcmFuc2Zvcm0odGhpcy5jYWxjVHJhbnNmb3JtTWF0cml4KCkpO1xuICAgICAgICBjdHgudHJhbnNmb3JtKG1bMF0sIG1bMV0sIG1bMl0sIG1bM10sIG1bNF0sIG1bNV0pO1xuICAgICAgfVxuICAgICAgY2xpcFBhdGgudHJhbnNmb3JtKGN0eCk7XG4gICAgICBjdHguc2NhbGUoMSAvIGNsaXBQYXRoLnpvb21YLCAxIC8gY2xpcFBhdGguem9vbVkpO1xuICAgICAgY3R4LmRyYXdJbWFnZShjbGlwUGF0aC5fY2FjaGVDYW52YXMsIC1jbGlwUGF0aC5jYWNoZVRyYW5zbGF0aW9uWCwgLWNsaXBQYXRoLmNhY2hlVHJhbnNsYXRpb25ZKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIGRyYXdpbmcgb3BlcmF0aW9uIGZvciBhbiBvYmplY3Qgb24gYSBzcGVjaWZpZWQgY29udGV4dFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBkcmF3T2JqZWN0OiBmdW5jdGlvbihjdHgsIGZvckNsaXBwaW5nKSB7XG4gICAgICB2YXIgb3JpZ2luYWxGaWxsID0gdGhpcy5maWxsLCBvcmlnaW5hbFN0cm9rZSA9IHRoaXMuc3Ryb2tlO1xuICAgICAgaWYgKGZvckNsaXBwaW5nKSB7XG4gICAgICAgIHRoaXMuZmlsbCA9ICdibGFjayc7XG4gICAgICAgIHRoaXMuc3Ryb2tlID0gJyc7XG4gICAgICAgIHRoaXMuX3NldENsaXBwaW5nUHJvcGVydGllcyhjdHgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuX3JlbmRlckJhY2tncm91bmQoY3R4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlbmRlcihjdHgpO1xuICAgICAgdGhpcy5fZHJhd0NsaXBQYXRoKGN0eCwgdGhpcy5jbGlwUGF0aCk7XG4gICAgICB0aGlzLmZpbGwgPSBvcmlnaW5hbEZpbGw7XG4gICAgICB0aGlzLnN0cm9rZSA9IG9yaWdpbmFsU3Ryb2tlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIGNsaXBQYXRoIHN0YXRlIGFuZCBjYWNoZSBhbmQgZHJhdyBpdCBvbiBpbnN0YW5jZSdzIGNhY2hlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eFxuICAgICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gY2xpcFBhdGhcbiAgICAgKi9cbiAgICBfZHJhd0NsaXBQYXRoOiBmdW5jdGlvbiAoY3R4LCBjbGlwUGF0aCkge1xuICAgICAgaWYgKCFjbGlwUGF0aCkgeyByZXR1cm47IH1cbiAgICAgIC8vIG5lZWRlZCB0byBzZXR1cCBhIGNvdXBsZSBvZiB2YXJpYWJsZXNcbiAgICAgIC8vIHBhdGggY2FudmFzIGdldHMgb3ZlcnJpZGRlbiB3aXRoIHRoaXMgb25lLlxuICAgICAgLy8gVE9ETyBmaW5kIGEgYmV0dGVyIHNvbHV0aW9uP1xuICAgICAgY2xpcFBhdGguY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICBjbGlwUGF0aC5zaG91bGRDYWNoZSgpO1xuICAgICAgY2xpcFBhdGguX3RyYW5zZm9ybURvbmUgPSB0cnVlO1xuICAgICAgY2xpcFBhdGgucmVuZGVyQ2FjaGUoeyBmb3JDbGlwcGluZzogdHJ1ZSB9KTtcbiAgICAgIHRoaXMuZHJhd0NsaXBQYXRoT25DYWNoZShjdHgsIGNsaXBQYXRoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFpbnQgdGhlIGNhY2hlZCBjb3B5IG9mIHRoZSBvYmplY3Qgb24gdGhlIHRhcmdldCBjb250ZXh0LlxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBkcmF3Q2FjaGVPbkNhbnZhczogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBjdHguc2NhbGUoMSAvIHRoaXMuem9vbVgsIDEgLyB0aGlzLnpvb21ZKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fY2FjaGVDYW52YXMsIC10aGlzLmNhY2hlVHJhbnNsYXRpb25YLCAtdGhpcy5jYWNoZVRyYW5zbGF0aW9uWSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGNhY2hlIGlzIGRpcnR5XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBza2lwQ2FudmFzIHNraXAgY2FudmFzIGNoZWNrcyBiZWNhdXNlIHRoaXMgb2JqZWN0IGlzIHBhaW50ZWRcbiAgICAgKiBvbiBwYXJlbnQgY2FudmFzLlxuICAgICAqL1xuICAgIGlzQ2FjaGVEaXJ0eTogZnVuY3Rpb24oc2tpcENhbnZhcykge1xuICAgICAgaWYgKHRoaXMuaXNOb3RWaXNpYmxlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2NhY2hlQ2FudmFzICYmIHRoaXMuX2NhY2hlQ29udGV4dCAmJiAhc2tpcENhbnZhcyAmJiB0aGlzLl91cGRhdGVDYWNoZUNhbnZhcygpKSB7XG4gICAgICAgIC8vIGluIHRoaXMgY2FzZSB0aGUgY29udGV4dCBpcyBhbHJlYWR5IGNsZWFyZWQuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLmRpcnR5IHx8XG4gICAgICAgICAgKHRoaXMuY2xpcFBhdGggJiYgdGhpcy5jbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQpIHx8XG4gICAgICAgICAgKHRoaXMuc3RhdGVmdWxsQ2FjaGUgJiYgdGhpcy5oYXNTdGF0ZUNoYW5nZWQoJ2NhY2hlUHJvcGVydGllcycpKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2FjaGVDYW52YXMgJiYgdGhpcy5fY2FjaGVDb250ZXh0ICYmICFza2lwQ2FudmFzKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLmNhY2hlV2lkdGggLyB0aGlzLnpvb21YO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuY2FjaGVIZWlnaHQgLyB0aGlzLnpvb21ZO1xuICAgICAgICAgICAgdGhpcy5fY2FjaGVDb250ZXh0LmNsZWFyUmVjdCgtd2lkdGggLyAyLCAtaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGEgYmFja2dyb3VuZCBmb3IgdGhlIG9iamVjdCBiaWcgYXMgaXRzIHVudHJhbnNmb3JtZWQgZGltZW5zaW9uc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJCYWNrZ3JvdW5kOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICghdGhpcy5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGRpbSA9IHRoaXMuX2dldE5vblRyYW5zZm9ybWVkRGltZW5zaW9ucygpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuYmFja2dyb3VuZENvbG9yO1xuXG4gICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgIC1kaW0ueCAvIDIsXG4gICAgICAgIC1kaW0ueSAvIDIsXG4gICAgICAgIGRpbS54LFxuICAgICAgICBkaW0ueVxuICAgICAgKTtcbiAgICAgIC8vIGlmIHRoZXJlIGlzIGJhY2tncm91bmQgY29sb3Igbm8gb3RoZXIgc2hhZG93c1xuICAgICAgLy8gc2hvdWxkIGJlIGNhc3RlZFxuICAgICAgdGhpcy5fcmVtb3ZlU2hhZG93KGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9zZXRPcGFjaXR5OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICh0aGlzLmdyb3VwICYmICF0aGlzLmdyb3VwLl90cmFuc2Zvcm1Eb25lKSB7XG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuZ2V0T2JqZWN0T3BhY2l0eSgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN0eC5nbG9iYWxBbHBoYSAqPSB0aGlzLm9wYWNpdHk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zZXRTdHJva2VTdHlsZXM6IGZ1bmN0aW9uKGN0eCwgZGVjbCkge1xuICAgICAgdmFyIHN0cm9rZSA9IGRlY2wuc3Ryb2tlO1xuICAgICAgaWYgKHN0cm9rZSkge1xuICAgICAgICBjdHgubGluZVdpZHRoID0gZGVjbC5zdHJva2VXaWR0aDtcbiAgICAgICAgY3R4LmxpbmVDYXAgPSBkZWNsLnN0cm9rZUxpbmVDYXA7XG4gICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGRlY2wuc3Ryb2tlRGFzaE9mZnNldDtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gZGVjbC5zdHJva2VMaW5lSm9pbjtcbiAgICAgICAgY3R4Lm1pdGVyTGltaXQgPSBkZWNsLnN0cm9rZU1pdGVyTGltaXQ7XG4gICAgICAgIGlmIChzdHJva2UudG9MaXZlKSB7XG4gICAgICAgICAgaWYgKHN0cm9rZS5ncmFkaWVudFVuaXRzID09PSAncGVyY2VudGFnZScgfHwgc3Ryb2tlLmdyYWRpZW50VHJhbnNmb3JtIHx8IHN0cm9rZS5wYXR0ZXJuVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAvLyBuZWVkIHRvIHRyYW5zZm9ybSBncmFkaWVudCBpbiBhIHBhdHRlcm4uXG4gICAgICAgICAgICAvLyB0aGlzIGlzIGEgc2xvdyBwcm9jZXNzLiBJZiB5b3UgYXJlIGhpdHRpbmcgdGhpcyBjb2RlcGF0aCwgYW5kIHRoZSBvYmplY3RcbiAgICAgICAgICAgIC8vIGlzIG5vdCB1c2luZyBjYWNoaW5nLCB5b3Ugc2hvdWxkIGNvbnNpZGVyIHN3aXRjaGluZyBpdCBvbi5cbiAgICAgICAgICAgIC8vIHdlIG5lZWQgYSBjYW52YXMgYXMgYmlnIGFzIHRoZSBjdXJyZW50IG9iamVjdCBjYWNoaW5nIGNhbnZhcy5cbiAgICAgICAgICAgIHRoaXMuX2FwcGx5UGF0dGVybkZvclRyYW5zZm9ybWVkR3JhZGllbnQoY3R4LCBzdHJva2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlzIGEgc2ltcGxlIGdyYWRpZW50IG9yIHBhdHRlcm5cbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZS50b0xpdmUoY3R4LCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtKGN0eCwgc3Ryb2tlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gaXMgYSBjb2xvclxuICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGRlY2wuc3Ryb2tlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zZXRGaWxsU3R5bGVzOiBmdW5jdGlvbihjdHgsIGRlY2wpIHtcbiAgICAgIHZhciBmaWxsID0gZGVjbC5maWxsO1xuICAgICAgaWYgKGZpbGwpIHtcbiAgICAgICAgaWYgKGZpbGwudG9MaXZlKSB7XG4gICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGZpbGwudG9MaXZlKGN0eCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5fYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm0oY3R4LCBkZWNsLmZpbGwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBmaWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9zZXRDbGlwcGluZ1Byb3BlcnRpZXM6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICd0cmFuc3BhcmVudCc7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJyMwMDAwMDAnO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFNldHMgbGluZSBkYXNoXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHNldCB0aGUgZGFzaCBsaW5lIG9uXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGFzaEFycmF5IGFycmF5IHJlcHJlc2VudGluZyBkYXNoZXNcbiAgICAgKi9cbiAgICBfc2V0TGluZURhc2g6IGZ1bmN0aW9uKGN0eCwgZGFzaEFycmF5KSB7XG4gICAgICBpZiAoIWRhc2hBcnJheSB8fCBkYXNoQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFNwZWMgcmVxdWlyZXMgdGhlIGNvbmNhdGVuYXRpb24gb2YgdHdvIGNvcGllcyB0aGUgZGFzaCBsaXN0IHdoZW4gdGhlIG51bWJlciBvZiBlbGVtZW50cyBpcyBvZGRcbiAgICAgIGlmICgxICYgZGFzaEFycmF5Lmxlbmd0aCkge1xuICAgICAgICBkYXNoQXJyYXkucHVzaC5hcHBseShkYXNoQXJyYXksIGRhc2hBcnJheSk7XG4gICAgICB9XG4gICAgICBjdHguc2V0TGluZURhc2goZGFzaEFycmF5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBjb250cm9scyBhbmQgYm9yZGVycyBmb3IgdGhlIG9iamVjdFxuICAgICAqIHRoZSBjb250ZXh0IGhlcmUgaXMgbm90IHRyYW5zZm9ybWVkXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3R5bGVPdmVycmlkZV0gcHJvcGVydGllcyB0byBvdmVycmlkZSB0aGUgb2JqZWN0IHN0eWxlXG4gICAgICovXG4gICAgX3JlbmRlckNvbnRyb2xzOiBmdW5jdGlvbihjdHgsIHN0eWxlT3ZlcnJpZGUpIHtcbiAgICAgIHZhciB2cHQgPSB0aGlzLmdldFZpZXdwb3J0VHJhbnNmb3JtKCksXG4gICAgICAgICAgbWF0cml4ID0gdGhpcy5jYWxjVHJhbnNmb3JtTWF0cml4KCksXG4gICAgICAgICAgb3B0aW9ucywgZHJhd0JvcmRlcnMsIGRyYXdDb250cm9scztcbiAgICAgIHN0eWxlT3ZlcnJpZGUgPSBzdHlsZU92ZXJyaWRlIHx8IHsgfTtcbiAgICAgIGRyYXdCb3JkZXJzID0gdHlwZW9mIHN0eWxlT3ZlcnJpZGUuaGFzQm9yZGVycyAhPT0gJ3VuZGVmaW5lZCcgPyBzdHlsZU92ZXJyaWRlLmhhc0JvcmRlcnMgOiB0aGlzLmhhc0JvcmRlcnM7XG4gICAgICBkcmF3Q29udHJvbHMgPSB0eXBlb2Ygc3R5bGVPdmVycmlkZS5oYXNDb250cm9scyAhPT0gJ3VuZGVmaW5lZCcgPyBzdHlsZU92ZXJyaWRlLmhhc0NvbnRyb2xzIDogdGhpcy5oYXNDb250cm9scztcbiAgICAgIG1hdHJpeCA9IGZhYnJpYy51dGlsLm11bHRpcGx5VHJhbnNmb3JtTWF0cmljZXModnB0LCBtYXRyaXgpO1xuICAgICAgb3B0aW9ucyA9IGZhYnJpYy51dGlsLnFyRGVjb21wb3NlKG1hdHJpeCk7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZShvcHRpb25zLnRyYW5zbGF0ZVgsIG9wdGlvbnMudHJhbnNsYXRlWSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gMSAqIHRoaXMuYm9yZGVyU2NhbGVGYWN0b3I7XG4gICAgICBpZiAoIXRoaXMuZ3JvdXApIHtcbiAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5pc01vdmluZyA/IHRoaXMuYm9yZGVyT3BhY2l0eVdoZW5Nb3ZpbmcgOiAxO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZmxpcFgpIHtcbiAgICAgICAgb3B0aW9ucy5hbmdsZSAtPSAxODA7XG4gICAgICB9XG4gICAgICBjdHgucm90YXRlKGRlZ3JlZXNUb1JhZGlhbnModGhpcy5ncm91cCA/IG9wdGlvbnMuYW5nbGUgOiB0aGlzLmFuZ2xlKSk7XG4gICAgICBpZiAoc3R5bGVPdmVycmlkZS5mb3JBY3RpdmVTZWxlY3Rpb24gfHwgdGhpcy5ncm91cCkge1xuICAgICAgICBkcmF3Qm9yZGVycyAmJiB0aGlzLmRyYXdCb3JkZXJzSW5Hcm91cChjdHgsIG9wdGlvbnMsIHN0eWxlT3ZlcnJpZGUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRyYXdCb3JkZXJzICYmIHRoaXMuZHJhd0JvcmRlcnMoY3R4LCBzdHlsZU92ZXJyaWRlKTtcbiAgICAgIH1cbiAgICAgIGRyYXdDb250cm9scyAmJiB0aGlzLmRyYXdDb250cm9scyhjdHgsIHN0eWxlT3ZlcnJpZGUpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3NldFNoYWRvdzogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuc2hhZG93KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNoYWRvdyA9IHRoaXMuc2hhZG93LCBjYW52YXMgPSB0aGlzLmNhbnZhcywgc2NhbGluZyxcbiAgICAgICAgICBtdWx0WCA9IChjYW52YXMgJiYgY2FudmFzLnZpZXdwb3J0VHJhbnNmb3JtWzBdKSB8fCAxLFxuICAgICAgICAgIG11bHRZID0gKGNhbnZhcyAmJiBjYW52YXMudmlld3BvcnRUcmFuc2Zvcm1bM10pIHx8IDE7XG4gICAgICBpZiAoc2hhZG93Lm5vblNjYWxpbmcpIHtcbiAgICAgICAgc2NhbGluZyA9IHsgc2NhbGVYOiAxLCBzY2FsZVk6IDEgfTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzY2FsaW5nID0gdGhpcy5nZXRPYmplY3RTY2FsaW5nKCk7XG4gICAgICB9XG4gICAgICBpZiAoY2FudmFzICYmIGNhbnZhcy5faXNSZXRpbmFTY2FsaW5nKCkpIHtcbiAgICAgICAgbXVsdFggKj0gZmFicmljLmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIG11bHRZICo9IGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgfVxuICAgICAgY3R4LnNoYWRvd0NvbG9yID0gc2hhZG93LmNvbG9yO1xuICAgICAgY3R4LnNoYWRvd0JsdXIgPSBzaGFkb3cuYmx1ciAqIGZhYnJpYy5icm93c2VyU2hhZG93Qmx1ckNvbnN0YW50ICpcbiAgICAgICAgKG11bHRYICsgbXVsdFkpICogKHNjYWxpbmcuc2NhbGVYICsgc2NhbGluZy5zY2FsZVkpIC8gNDtcbiAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gc2hhZG93Lm9mZnNldFggKiBtdWx0WCAqIHNjYWxpbmcuc2NhbGVYO1xuICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSBzaGFkb3cub2Zmc2V0WSAqIG11bHRZICogc2NhbGluZy5zY2FsZVk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW1vdmVTaGFkb3c6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgaWYgKCF0aGlzLnNoYWRvdykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGN0eC5zaGFkb3dDb2xvciA9ICcnO1xuICAgICAgY3R4LnNoYWRvd0JsdXIgPSBjdHguc2hhZG93T2Zmc2V0WCA9IGN0eC5zaGFkb3dPZmZzZXRZID0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGZpbGxlciBmYWJyaWMuUGF0dGVybiBvciBmYWJyaWMuR3JhZGllbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9mZnNldC5vZmZzZXRYIG9mZnNldCBmb3IgdGV4dCByZW5kZXJpbmdcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9mZnNldC5vZmZzZXRZIG9mZnNldCBmb3IgdGV4dCByZW5kZXJpbmdcbiAgICAgKi9cbiAgICBfYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm06IGZ1bmN0aW9uKGN0eCwgZmlsbGVyKSB7XG4gICAgICBpZiAoIWZpbGxlciB8fCAhZmlsbGVyLnRvTGl2ZSkge1xuICAgICAgICByZXR1cm4geyBvZmZzZXRYOiAwLCBvZmZzZXRZOiAwIH07XG4gICAgICB9XG4gICAgICB2YXIgdCA9IGZpbGxlci5ncmFkaWVudFRyYW5zZm9ybSB8fCBmaWxsZXIucGF0dGVyblRyYW5zZm9ybTtcbiAgICAgIHZhciBvZmZzZXRYID0gLXRoaXMud2lkdGggLyAyICsgZmlsbGVyLm9mZnNldFggfHwgMCxcbiAgICAgICAgICBvZmZzZXRZID0gLXRoaXMuaGVpZ2h0IC8gMiArIGZpbGxlci5vZmZzZXRZIHx8IDA7XG5cbiAgICAgIGlmIChmaWxsZXIuZ3JhZGllbnRVbml0cyA9PT0gJ3BlcmNlbnRhZ2UnKSB7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0odGhpcy53aWR0aCwgMCwgMCwgdGhpcy5oZWlnaHQsIG9mZnNldFgsIG9mZnNldFkpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0oMSwgMCwgMCwgMSwgb2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICB9XG4gICAgICBpZiAodCkge1xuICAgICAgICBjdHgudHJhbnNmb3JtKHRbMF0sIHRbMV0sIHRbMl0sIHRbM10sIHRbNF0sIHRbNV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgb2Zmc2V0WDogb2Zmc2V0WCwgb2Zmc2V0WTogb2Zmc2V0WSB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyUGFpbnRJbk9yZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICh0aGlzLnBhaW50Rmlyc3QgPT09ICdzdHJva2UnKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlclN0cm9rZShjdHgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJGaWxsKGN0eCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyRmlsbChjdHgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJTdHJva2UoY3R4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBmdW5jdGlvbiB0aGF0IGFjdHVhbGx5IHJlbmRlciBzb21ldGhpbmcgb24gdGhlIGNvbnRleHQuXG4gICAgICogZW1wdHkgaGVyZSB0byBhbGxvdyBPYmVjdHMgdG8gd29yayBvbiB0ZXN0cyB0byBiZW5jaG1hcmsgZmFicmljIGZ1bmN0aW9uYWxpdGVzXG4gICAgICogbm90IHJlbGF0ZWQgdG8gcmVuZGVyaW5nXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXI6IGZ1bmN0aW9uKC8qIGN0eCAqLykge1xuXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJGaWxsOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICghdGhpcy5maWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHRoaXMuX3NldEZpbGxTdHlsZXMoY3R4LCB0aGlzKTtcbiAgICAgIGlmICh0aGlzLmZpbGxSdWxlID09PSAnZXZlbm9kZCcpIHtcbiAgICAgICAgY3R4LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlclN0cm9rZTogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuc3Ryb2tlIHx8IHRoaXMuc3Ryb2tlV2lkdGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaGFkb3cgJiYgIXRoaXMuc2hhZG93LmFmZmVjdFN0cm9rZSkge1xuICAgICAgICB0aGlzLl9yZW1vdmVTaGFkb3coY3R4KTtcbiAgICAgIH1cblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGlmICh0aGlzLnN0cm9rZVVuaWZvcm0gJiYgdGhpcy5ncm91cCkge1xuICAgICAgICB2YXIgc2NhbGluZyA9IHRoaXMuZ2V0T2JqZWN0U2NhbGluZygpO1xuICAgICAgICBjdHguc2NhbGUoMSAvIHNjYWxpbmcuc2NhbGVYLCAxIC8gc2NhbGluZy5zY2FsZVkpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5zdHJva2VVbmlmb3JtKSB7XG4gICAgICAgIGN0eC5zY2FsZSgxIC8gdGhpcy5zY2FsZVgsIDEgLyB0aGlzLnNjYWxlWSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zZXRMaW5lRGFzaChjdHgsIHRoaXMuc3Ryb2tlRGFzaEFycmF5KTtcbiAgICAgIHRoaXMuX3NldFN0cm9rZVN0eWxlcyhjdHgsIHRoaXMpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiB0cnkgdG8gcGF0Y2ggdGhlIG1pc3NpbmcgZ3JhZGllbnRUcmFuc2Zvcm0gb24gY2FudmFzIGdyYWRpZW50cy5cbiAgICAgKiB0cmFuc2Zvcm1pbmcgYSBjb250ZXh0IHRvIHRyYW5zZm9ybSB0aGUgZ3JhZGllbnQsIGlzIGdvaW5nIHRvIHRyYW5zZm9ybSB0aGUgc3Ryb2tlIHRvby5cbiAgICAgKiB3ZSB3YW50IHRvIHRyYW5zZm9ybSB0aGUgZ3JhZGllbnQgYnV0IG5vdCB0aGUgc3Ryb2tlIG9wZXJhdGlvbiwgc28gd2UgY3JlYXRlXG4gICAgICogYSB0cmFuc2Zvcm1lZCBncmFkaWVudCBvbiBhIHBhdHRlcm4gYW5kIHRoZW4gd2UgdXNlIHRoZSBwYXR0ZXJuIGluc3RlYWQgb2YgdGhlIGdyYWRpZW50LlxuICAgICAqIHRoaXMgbWV0aG9kIGhhcyBkcndhYmFja3M6IGlzIHNsb3csIGlzIGluIGxvdyByZXNvbHV0aW9uLCBuZWVkcyBhIHBhdGNoIGZvciB3aGVuIHRoZSBzaXplXG4gICAgICogaXMgbGltaXRlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5HcmFkaWVudH0gZmlsbGVyIGEgZmFicmljIGdyYWRpZW50IGluc3RhbmNlXG4gICAgICovXG4gICAgX2FwcGx5UGF0dGVybkZvclRyYW5zZm9ybWVkR3JhZGllbnQ6IGZ1bmN0aW9uKGN0eCwgZmlsbGVyKSB7XG4gICAgICB2YXIgZGltcyA9IHRoaXMuX2xpbWl0Q2FjaGVTaXplKHRoaXMuX2dldENhY2hlQ2FudmFzRGltZW5zaW9ucygpKSxcbiAgICAgICAgICBwQ2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLCBwQ3R4LCByZXRpbmFTY2FsaW5nID0gdGhpcy5jYW52YXMuZ2V0UmV0aW5hU2NhbGluZygpLFxuICAgICAgICAgIHdpZHRoID0gZGltcy54IC8gdGhpcy5zY2FsZVggLyByZXRpbmFTY2FsaW5nLCBoZWlnaHQgPSBkaW1zLnkgLyB0aGlzLnNjYWxlWSAvIHJldGluYVNjYWxpbmc7XG4gICAgICBwQ2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICBwQ2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIHBDdHggPSBwQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBwQ3R4LmJlZ2luUGF0aCgpOyBwQ3R4Lm1vdmVUbygwLCAwKTsgcEN0eC5saW5lVG8od2lkdGgsIDApOyBwQ3R4LmxpbmVUbyh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHBDdHgubGluZVRvKDAsIGhlaWdodCk7IHBDdHguY2xvc2VQYXRoKCk7XG4gICAgICBwQ3R4LnRyYW5zbGF0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgICAgcEN0eC5zY2FsZShcbiAgICAgICAgZGltcy56b29tWCAvIHRoaXMuc2NhbGVYIC8gcmV0aW5hU2NhbGluZyxcbiAgICAgICAgZGltcy56b29tWSAvIHRoaXMuc2NhbGVZIC8gcmV0aW5hU2NhbGluZ1xuICAgICAgKTtcbiAgICAgIHRoaXMuX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtKHBDdHgsIGZpbGxlcik7XG4gICAgICBwQ3R4LmZpbGxTdHlsZSA9IGZpbGxlci50b0xpdmUoY3R4KTtcbiAgICAgIHBDdHguZmlsbCgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZSgtdGhpcy53aWR0aCAvIDIgLSB0aGlzLnN0cm9rZVdpZHRoIC8gMiwgLXRoaXMuaGVpZ2h0IC8gMiAtIHRoaXMuc3Ryb2tlV2lkdGggLyAyKTtcbiAgICAgIGN0eC5zY2FsZShcbiAgICAgICAgcmV0aW5hU2NhbGluZyAqIHRoaXMuc2NhbGVYIC8gZGltcy56b29tWCxcbiAgICAgICAgcmV0aW5hU2NhbGluZyAqIHRoaXMuc2NhbGVZIC8gZGltcy56b29tWVxuICAgICAgKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHBDdHguY3JlYXRlUGF0dGVybihwQ2FudmFzLCAnbm8tcmVwZWF0Jyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgYW4gaGVscGVyIGZvciBzdmcgaW1wb3J0LiBpdCByZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIG9iamVjdCBpbiB0aGUgc3ZnXG4gICAgICogdW50cmFuc2Zvcm1lZCBjb29yZGluYXRlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjZW50ZXIgcG9pbnQgZnJvbSBlbGVtZW50IGNvb3JkaW5hdGVzXG4gICAgICovXG4gICAgX2ZpbmRDZW50ZXJGcm9tRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4geyB4OiB0aGlzLmxlZnQgKyB0aGlzLndpZHRoIC8gMiwgeTogdGhpcy50b3AgKyB0aGlzLmhlaWdodCAvIDIgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBhbiBoZWxwZXIgZm9yIHN2ZyBpbXBvcnQuIGl0IGRlY29tcG9zZSB0aGUgdHJhbnNmb3JtTWF0cml4XG4gICAgICogYW5kIGFzc2lnbiBwcm9wZXJ0aWVzIHRvIG9iamVjdC5cbiAgICAgKiB1bnRyYW5zZm9ybWVkIGNvb3JkaW5hdGVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgX2Fzc2lnblRyYW5zZm9ybU1hdHJpeFByb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnRyYW5zZm9ybU1hdHJpeCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGZhYnJpYy51dGlsLnFyRGVjb21wb3NlKHRoaXMudHJhbnNmb3JtTWF0cml4KTtcbiAgICAgICAgdGhpcy5mbGlwWCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZsaXBZID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2V0KCdzY2FsZVgnLCBvcHRpb25zLnNjYWxlWCk7XG4gICAgICAgIHRoaXMuc2V0KCdzY2FsZVknLCBvcHRpb25zLnNjYWxlWSk7XG4gICAgICAgIHRoaXMuYW5nbGUgPSBvcHRpb25zLmFuZ2xlO1xuICAgICAgICB0aGlzLnNrZXdYID0gb3B0aW9ucy5za2V3WDtcbiAgICAgICAgdGhpcy5za2V3WSA9IDA7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgYW4gaGVscGVyIGZvciBzdmcgaW1wb3J0LiBpdCByZW1vdmVzIHRoZSB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICogYW5kIHNldCB0byBvYmplY3QgcHJvcGVydGllcyB0aGF0IGZhYnJpY2pzIGNhbiBoYW5kbGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmVzZXJ2ZUFzcGVjdFJhdGlvT3B0aW9uc1xuICAgICAqIEByZXR1cm4ge3RoaXNBcmd9XG4gICAgICovXG4gICAgX3JlbW92ZVRyYW5zZm9ybU1hdHJpeDogZnVuY3Rpb24ocHJlc2VydmVBc3BlY3RSYXRpb09wdGlvbnMpIHtcbiAgICAgIHZhciBjZW50ZXIgPSB0aGlzLl9maW5kQ2VudGVyRnJvbUVsZW1lbnQoKTtcbiAgICAgIGlmICh0aGlzLnRyYW5zZm9ybU1hdHJpeCkge1xuICAgICAgICB0aGlzLl9hc3NpZ25UcmFuc2Zvcm1NYXRyaXhQcm9wcygpO1xuICAgICAgICBjZW50ZXIgPSBmYWJyaWMudXRpbC50cmFuc2Zvcm1Qb2ludChjZW50ZXIsIHRoaXMudHJhbnNmb3JtTWF0cml4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gbnVsbDtcbiAgICAgIGlmIChwcmVzZXJ2ZUFzcGVjdFJhdGlvT3B0aW9ucykge1xuICAgICAgICB0aGlzLnNjYWxlWCAqPSBwcmVzZXJ2ZUFzcGVjdFJhdGlvT3B0aW9ucy5zY2FsZVg7XG4gICAgICAgIHRoaXMuc2NhbGVZICo9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLnNjYWxlWTtcbiAgICAgICAgdGhpcy5jcm9wWCA9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLmNyb3BYO1xuICAgICAgICB0aGlzLmNyb3BZID0gcHJlc2VydmVBc3BlY3RSYXRpb09wdGlvbnMuY3JvcFk7XG4gICAgICAgIGNlbnRlci54ICs9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLm9mZnNldExlZnQ7XG4gICAgICAgIGNlbnRlci55ICs9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLm9mZnNldFRvcDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0UG9zaXRpb25CeU9yaWdpbihjZW50ZXIsICdjZW50ZXInLCAnY2VudGVyJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENsb25lcyBhbiBpbnN0YW5jZSwgdXNpbmcgYSBjYWxsYmFjayBtZXRob2Qgd2lsbCB3b3JrIGZvciBldmVyeSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgaXMgaW52b2tlZCB3aXRoIGEgY2xvbmUgYXMgYSBmaXJzdCBhcmd1bWVudFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKi9cbiAgICBjbG9uZTogZnVuY3Rpb24oY2FsbGJhY2ssIHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBvYmplY3RGb3JtID0gdGhpcy50b09iamVjdChwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLmZyb21PYmplY3QpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5mcm9tT2JqZWN0KG9iamVjdEZvcm0sIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdPYmplY3QnLCBvYmplY3RGb3JtLCBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgZmFicmljLkltYWdlIG91dCBvZiBhbiBvYmplY3RcbiAgICAgKiBtYWtlcyB1c2Ugb2YgdG9DYW52YXNFbGVtZW50LlxuICAgICAqIE9uY2UgdGhpcyBtZXRob2Qgd2FzIGJhc2VkIG9uIHRvRGF0YVVybCBhbmQgbG9hZEltYWdlLCBzbyBpdCBhbHNvIGhhZCBhIHF1YWxpdHlcbiAgICAgKiBhbmQgZm9ybWF0IG9wdGlvbi4gdG9DYW52YXNFbGVtZW50IGlzIGZhc3RlciBhbmQgcHJvZHVjZSBubyBsb3NzIG9mIHF1YWxpdHkuXG4gICAgICogSWYgeW91IG5lZWQgdG8gZ2V0IGEgcmVhbCBKcGVnIG9yIFBuZyBmcm9tIGFuIG9iamVjdCwgdXNpbmcgdG9EYXRhVVJMIGlzIHRoZSByaWdodCB3YXkgdG8gZG8gaXQuXG4gICAgICogdG9DYW52YXNFbGVtZW50IGFuZCB0aGVuIHRvQmxvYiBmcm9tIHRoZSBvYnRhaW5lZCBjYW52YXMgaXMgYWxzbyBhIGdvb2Qgb3B0aW9uLlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHN5bmMgbm93LCBidXQgc3RpbGwgc3VwcG9ydCB0aGUgY2FsbGJhY2sgYmVjYXVzZSB3ZSBkaWQgbm90IHdhbnQgdG8gYnJlYWsuXG4gICAgICogV2hlbiBmYWJyaWNKUyA1LjAgd2lsbCBiZSBwbGFubmVkLCB0aGlzIHdpbGwgcHJvYmFibHkgYmUgY2hhbmdlZCB0byBub3QgaGF2ZSBhIGNhbGxiYWNrLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrLCBpbnZva2VkIHdpdGggYW4gaW5zdGFuY2UgYXMgYSBmaXJzdCBhcmd1bWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gZm9yIGNsb25lIGFzIGltYWdlLCBwYXNzZWQgdG8gdG9EYXRhVVJMXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm11bHRpcGxpZXI9MV0gTXVsdGlwbGllciB0byBzY2FsZSBieVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5sZWZ0XSBDcm9wcGluZyBsZWZ0IG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnRvcF0gQ3JvcHBpbmcgdG9wIG9mZnNldC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLndpZHRoXSBDcm9wcGluZyB3aWR0aC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmhlaWdodF0gQ3JvcHBpbmcgaGVpZ2h0LiBJbnRyb2R1Y2VkIGluIHYxLjIuMTRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZVJldGluYVNjYWxpbmddIEVuYWJsZSByZXRpbmEgc2NhbGluZyBmb3IgY2xvbmUgaW1hZ2UuIEludHJvZHVjZSBpbiAxLjYuNFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMud2l0aG91dFRyYW5zZm9ybV0gUmVtb3ZlIGN1cnJlbnQgb2JqZWN0IHRyYW5zZm9ybSAoIG5vIHNjYWxlICwgbm8gYW5nbGUsIG5vIGZsaXAsIG5vIHNrZXcgKS4gSW50cm9kdWNlZCBpbiAyLjMuNFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMud2l0aG91dFNoYWRvd10gUmVtb3ZlIGN1cnJlbnQgb2JqZWN0IHNoYWRvdy4gSW50cm9kdWNlZCBpbiAyLjQuMlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBjbG9uZUFzSW1hZ2U6IGZ1bmN0aW9uKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY2FudmFzRWwgPSB0aGlzLnRvQ2FudmFzRWxlbWVudChvcHRpb25zKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayhuZXcgZmFicmljLkltYWdlKGNhbnZhc0VsKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gb2JqZWN0IGludG8gYSBIVE1MQ2FudmFzIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tdWx0aXBsaWVyPTFdIE11bHRpcGxpZXIgdG8gc2NhbGUgYnlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubGVmdF0gQ3JvcHBpbmcgbGVmdCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy50b3BdIENyb3BwaW5nIHRvcCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy53aWR0aF0gQ3JvcHBpbmcgd2lkdGguIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIENyb3BwaW5nIGhlaWdodC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5lbmFibGVSZXRpbmFTY2FsaW5nXSBFbmFibGUgcmV0aW5hIHNjYWxpbmcgZm9yIGNsb25lIGltYWdlLiBJbnRyb2R1Y2UgaW4gMS42LjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRUcmFuc2Zvcm1dIFJlbW92ZSBjdXJyZW50IG9iamVjdCB0cmFuc2Zvcm0gKCBubyBzY2FsZSAsIG5vIGFuZ2xlLCBubyBmbGlwLCBubyBza2V3ICkuIEludHJvZHVjZWQgaW4gMi4zLjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRTaGFkb3ddIFJlbW92ZSBjdXJyZW50IG9iamVjdCBzaGFkb3cuIEludHJvZHVjZWQgaW4gMi40LjJcbiAgICAgKiBAcmV0dXJuIHtIVE1MQ2FudmFzRWxlbWVudH0gUmV0dXJucyBET00gZWxlbWVudCA8Y2FudmFzPiB3aXRoIHRoZSBmYWJyaWMuT2JqZWN0XG4gICAgICovXG4gICAgdG9DYW52YXNFbGVtZW50OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0geyB9KTtcblxuICAgICAgdmFyIHV0aWxzID0gZmFicmljLnV0aWwsIG9yaWdQYXJhbXMgPSB1dGlscy5zYXZlT2JqZWN0VHJhbnNmb3JtKHRoaXMpLFxuICAgICAgICAgIG9yaWdpbmFsR3JvdXAgPSB0aGlzLmdyb3VwLFxuICAgICAgICAgIG9yaWdpbmFsU2hhZG93ID0gdGhpcy5zaGFkb3csIGFicyA9IE1hdGguYWJzLFxuICAgICAgICAgIG11bHRpcGxpZXIgPSAob3B0aW9ucy5tdWx0aXBsaWVyIHx8IDEpICogKG9wdGlvbnMuZW5hYmxlUmV0aW5hU2NhbGluZyA/IGZhYnJpYy5kZXZpY2VQaXhlbFJhdGlvIDogMSk7XG4gICAgICBkZWxldGUgdGhpcy5ncm91cDtcbiAgICAgIGlmIChvcHRpb25zLndpdGhvdXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgdXRpbHMucmVzZXRPYmplY3RUcmFuc2Zvcm0odGhpcyk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy53aXRob3V0U2hhZG93KSB7XG4gICAgICAgIHRoaXMuc2hhZG93ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLFxuICAgICAgICAgIC8vIHNraXAgY2FudmFzIHpvb20gYW5kIGNhbGN1bGF0ZSB3aXRoIHNldENvb3JkcyBub3cuXG4gICAgICAgICAgYm91bmRpbmdSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ1JlY3QodHJ1ZSwgdHJ1ZSksXG4gICAgICAgICAgc2hhZG93ID0gdGhpcy5zaGFkb3csIHNjYWxpbmcsXG4gICAgICAgICAgc2hhZG93T2Zmc2V0ID0geyB4OiAwLCB5OiAwIH0sIHNoYWRvd0JsdXIsXG4gICAgICAgICAgd2lkdGgsIGhlaWdodDtcblxuICAgICAgaWYgKHNoYWRvdykge1xuICAgICAgICBzaGFkb3dCbHVyID0gc2hhZG93LmJsdXI7XG4gICAgICAgIGlmIChzaGFkb3cubm9uU2NhbGluZykge1xuICAgICAgICAgIHNjYWxpbmcgPSB7IHNjYWxlWDogMSwgc2NhbGVZOiAxIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc2NhbGluZyA9IHRoaXMuZ2V0T2JqZWN0U2NhbGluZygpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvbnNpZGVyIG5vbiBzY2FsaW5nIHNoYWRvdy5cbiAgICAgICAgc2hhZG93T2Zmc2V0LnggPSAyICogTWF0aC5yb3VuZChhYnMoc2hhZG93Lm9mZnNldFgpICsgc2hhZG93Qmx1cikgKiAoYWJzKHNjYWxpbmcuc2NhbGVYKSk7XG4gICAgICAgIHNoYWRvd09mZnNldC55ID0gMiAqIE1hdGgucm91bmQoYWJzKHNoYWRvdy5vZmZzZXRZKSArIHNoYWRvd0JsdXIpICogKGFicyhzY2FsaW5nLnNjYWxlWSkpO1xuICAgICAgfVxuICAgICAgd2lkdGggPSBib3VuZGluZ1JlY3Qud2lkdGggKyBzaGFkb3dPZmZzZXQueDtcbiAgICAgIGhlaWdodCA9IGJvdW5kaW5nUmVjdC5oZWlnaHQgKyBzaGFkb3dPZmZzZXQueTtcbiAgICAgIC8vIGlmIHRoZSBjdXJyZW50IHdpZHRoL2hlaWdodCBpcyBub3QgYW4gaW50ZWdlclxuICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIGl0IHNvLlxuICAgICAgZWwud2lkdGggPSBNYXRoLmNlaWwod2lkdGgpO1xuICAgICAgZWwuaGVpZ2h0ID0gTWF0aC5jZWlsKGhlaWdodCk7XG4gICAgICB2YXIgY2FudmFzID0gbmV3IGZhYnJpYy5TdGF0aWNDYW52YXMoZWwsIHtcbiAgICAgICAgZW5hYmxlUmV0aW5hU2NhbGluZzogZmFsc2UsXG4gICAgICAgIHJlbmRlck9uQWRkUmVtb3ZlOiBmYWxzZSxcbiAgICAgICAgc2tpcE9mZnNjcmVlbjogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCA9PT0gJ2pwZWcnKSB7XG4gICAgICAgIGNhbnZhcy5iYWNrZ3JvdW5kQ29sb3IgPSAnI2ZmZic7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFBvc2l0aW9uQnlPcmlnaW4obmV3IGZhYnJpYy5Qb2ludChjYW52YXMud2lkdGggLyAyLCBjYW52YXMuaGVpZ2h0IC8gMiksICdjZW50ZXInLCAnY2VudGVyJyk7XG5cbiAgICAgIHZhciBvcmlnaW5hbENhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgY2FudmFzLmFkZCh0aGlzKTtcbiAgICAgIHZhciBjYW52YXNFbCA9IGNhbnZhcy50b0NhbnZhc0VsZW1lbnQobXVsdGlwbGllciB8fCAxLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuc2hhZG93ID0gb3JpZ2luYWxTaGFkb3c7XG4gICAgICB0aGlzLnNldCgnY2FudmFzJywgb3JpZ2luYWxDYW52YXMpO1xuICAgICAgaWYgKG9yaWdpbmFsR3JvdXApIHtcbiAgICAgICAgdGhpcy5ncm91cCA9IG9yaWdpbmFsR3JvdXA7XG4gICAgICB9XG4gICAgICB0aGlzLnNldChvcmlnUGFyYW1zKS5zZXRDb29yZHMoKTtcbiAgICAgIC8vIGNhbnZhcy5kaXNwb3NlIHdpbGwgY2FsbCBpbWFnZS5kaXNwb3NlIHRoYXQgd2lsbCBudWxsaWZ5IHRoZSBlbGVtZW50c1xuICAgICAgLy8gc2luY2UgdGhpcyBjYW52YXMgaXMgYSBzaW1wbGUgZWxlbWVudCBmb3IgdGhlIHByb2Nlc3MsIHdlIHJlbW92ZSByZWZlcmVuY2VzXG4gICAgICAvLyB0byBvYmplY3RzIGluIHRoaXMgd2F5IGluIG9yZGVyIHRvIGF2b2lkIG9iamVjdCB0cmFzaGluZy5cbiAgICAgIGNhbnZhcy5fb2JqZWN0cyA9IFtdO1xuICAgICAgY2FudmFzLmRpc3Bvc2UoKTtcbiAgICAgIGNhbnZhcyA9IG51bGw7XG5cbiAgICAgIHJldHVybiBjYW52YXNFbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gb2JqZWN0IGludG8gYSBkYXRhLXVybC1saWtlIHN0cmluZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmZvcm1hdD1wbmddIFRoZSBmb3JtYXQgb2YgdGhlIG91dHB1dCBpbWFnZS4gRWl0aGVyIFwianBlZ1wiIG9yIFwicG5nXCJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMucXVhbGl0eT0xXSBRdWFsaXR5IGxldmVsICgwLi4xKS4gT25seSB1c2VkIGZvciBqcGVnLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tdWx0aXBsaWVyPTFdIE11bHRpcGxpZXIgdG8gc2NhbGUgYnlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubGVmdF0gQ3JvcHBpbmcgbGVmdCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy50b3BdIENyb3BwaW5nIHRvcCBvZmZzZXQuIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy53aWR0aF0gQ3JvcHBpbmcgd2lkdGguIEludHJvZHVjZWQgaW4gdjEuMi4xNFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5oZWlnaHRdIENyb3BwaW5nIGhlaWdodC4gSW50cm9kdWNlZCBpbiB2MS4yLjE0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5lbmFibGVSZXRpbmFTY2FsaW5nXSBFbmFibGUgcmV0aW5hIHNjYWxpbmcgZm9yIGNsb25lIGltYWdlLiBJbnRyb2R1Y2UgaW4gMS42LjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRUcmFuc2Zvcm1dIFJlbW92ZSBjdXJyZW50IG9iamVjdCB0cmFuc2Zvcm0gKCBubyBzY2FsZSAsIG5vIGFuZ2xlLCBubyBmbGlwLCBubyBza2V3ICkuIEludHJvZHVjZWQgaW4gMi4zLjRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLndpdGhvdXRTaGFkb3ddIFJlbW92ZSBjdXJyZW50IG9iamVjdCBzaGFkb3cuIEludHJvZHVjZWQgaW4gMi40LjJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFJldHVybnMgYSBkYXRhOiBVUkwgY29udGFpbmluZyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3QgaW4gdGhlIGZvcm1hdCBzcGVjaWZpZWQgYnkgb3B0aW9ucy5mb3JtYXRcbiAgICAgKi9cbiAgICB0b0RhdGFVUkw6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLnRvRGF0YVVSTCh0aGlzLnRvQ2FudmFzRWxlbWVudChvcHRpb25zKSwgb3B0aW9ucy5mb3JtYXQgfHwgJ3BuZycsIG9wdGlvbnMucXVhbGl0eSB8fCAxKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHNwZWNpZmllZCB0eXBlIGlzIGlkZW50aWNhbCB0byB0aGUgdHlwZSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFR5cGUgdG8gY2hlY2sgYWdhaW5zdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNUeXBlOiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBBcnJheS5mcm9tKGFyZ3VtZW50cykuaW5jbHVkZXModGhpcy50eXBlKSA6IHRoaXMudHlwZSA9PT0gdHlwZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb21wbGV4aXR5IG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBjb21wbGV4aXR5IG9mIHRoaXMgaW5zdGFuY2UgKGlzIDEgdW5sZXNzIHN1YmNsYXNzZWQpXG4gICAgICovXG4gICAgY29tcGxleGl0eTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEpTT04gcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBKU09OXG4gICAgICovXG4gICAgdG9KU09OOiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICAvLyBkZWxlZ2F0ZSwgbm90IGFsaWFzXG4gICAgICByZXR1cm4gdGhpcy50b09iamVjdChwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBcImFuZ2xlXCIgb2YgYW4gaW5zdGFuY2Ugd2l0aCBjZW50ZXJlZCByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZSBBbmdsZSB2YWx1ZSAoaW4gZGVncmVlcylcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHJvdGF0ZTogZnVuY3Rpb24oYW5nbGUpIHtcbiAgICAgIHZhciBzaG91bGRDZW50ZXJPcmlnaW4gPSAodGhpcy5vcmlnaW5YICE9PSAnY2VudGVyJyB8fCB0aGlzLm9yaWdpblkgIT09ICdjZW50ZXInKSAmJiB0aGlzLmNlbnRlcmVkUm90YXRpb247XG5cbiAgICAgIGlmIChzaG91bGRDZW50ZXJPcmlnaW4pIHtcbiAgICAgICAgdGhpcy5fc2V0T3JpZ2luVG9DZW50ZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXQoJ2FuZ2xlJywgYW5nbGUpO1xuXG4gICAgICBpZiAoc2hvdWxkQ2VudGVyT3JpZ2luKSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0T3JpZ2luKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXJzIG9iamVjdCBob3Jpem9udGFsbHkgb24gY2FudmFzIHRvIHdoaWNoIGl0IHdhcyBhZGRlZCBsYXN0LlxuICAgICAqIFlvdSBtaWdodCBuZWVkIHRvIGNhbGwgYHNldENvb3Jkc2Agb24gYW4gb2JqZWN0IGFmdGVyIGNlbnRlcmluZywgdG8gdXBkYXRlIGNvbnRyb2xzIGFyZWEuXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjZW50ZXJIOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5jZW50ZXJPYmplY3RIKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENlbnRlcnMgb2JqZWN0IGhvcml6b250YWxseSBvbiBjdXJyZW50IHZpZXdwb3J0IG9mIGNhbnZhcyB0byB3aGljaCBpdCB3YXMgYWRkZWQgbGFzdC5cbiAgICAgKiBZb3UgbWlnaHQgbmVlZCB0byBjYWxsIGBzZXRDb29yZHNgIG9uIGFuIG9iamVjdCBhZnRlciBjZW50ZXJpbmcsIHRvIHVwZGF0ZSBjb250cm9scyBhcmVhLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXJIOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy52aWV3cG9ydENlbnRlck9iamVjdEgodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBvbiBjYW52YXMgdG8gd2hpY2ggaXQgd2FzIGFkZGVkIGxhc3QuXG4gICAgICogWW91IG1pZ2h0IG5lZWQgdG8gY2FsbCBgc2V0Q29vcmRzYCBvbiBhbiBvYmplY3QgYWZ0ZXIgY2VudGVyaW5nLCB0byB1cGRhdGUgY29udHJvbHMgYXJlYS5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGNlbnRlclY6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLmNlbnRlck9iamVjdFYodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBvbiBjdXJyZW50IHZpZXdwb3J0IG9mIGNhbnZhcyB0byB3aGljaCBpdCB3YXMgYWRkZWQgbGFzdC5cbiAgICAgKiBZb3UgbWlnaHQgbmVlZCB0byBjYWxsIGBzZXRDb29yZHNgIG9uIGFuIG9iamVjdCBhZnRlciBjZW50ZXJpbmcsIHRvIHVwZGF0ZSBjb250cm9scyBhcmVhLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXJWOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy52aWV3cG9ydENlbnRlck9iamVjdFYodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2VudGVycyBvYmplY3QgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5IG9uIGNhbnZhcyB0byB3aGljaCBpcyB3YXMgYWRkZWQgbGFzdFxuICAgICAqIFlvdSBtaWdodCBuZWVkIHRvIGNhbGwgYHNldENvb3Jkc2Agb24gYW4gb2JqZWN0IGFmdGVyIGNlbnRlcmluZywgdG8gdXBkYXRlIGNvbnRyb2xzIGFyZWEuXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBjZW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLmNlbnRlck9iamVjdCh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDZW50ZXJzIG9iamVjdCBvbiBjdXJyZW50IHZpZXdwb3J0IG9mIGNhbnZhcyB0byB3aGljaCBpdCB3YXMgYWRkZWQgbGFzdC5cbiAgICAgKiBZb3UgbWlnaHQgbmVlZCB0byBjYWxsIGBzZXRDb29yZHNgIG9uIGFuIG9iamVjdCBhZnRlciBjZW50ZXJpbmcsIHRvIHVwZGF0ZSBjb250cm9scyBhcmVhLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgdmlld3BvcnRDZW50ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLnZpZXdwb3J0Q2VudGVyT2JqZWN0KHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29vcmRpbmF0ZXMgb2YgYSBwb2ludGVyIHJlbGF0aXZlIHRvIGFuIG9iamVjdFxuICAgICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgdG8gb3BlcmF0ZSB1cG9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwb2ludGVyXSBQb2ludGVyIHRvIG9wZXJhdGUgdXBvbiAoaW5zdGVhZCBvZiBldmVudClcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IENvb3JkaW5hdGVzIG9mIGEgcG9pbnRlciAoeCwgeSlcbiAgICAgKi9cbiAgICBnZXRMb2NhbFBvaW50ZXI6IGZ1bmN0aW9uKGUsIHBvaW50ZXIpIHtcbiAgICAgIHBvaW50ZXIgPSBwb2ludGVyIHx8IHRoaXMuY2FudmFzLmdldFBvaW50ZXIoZSk7XG4gICAgICB2YXIgcENsaWNrZWQgPSBuZXcgZmFicmljLlBvaW50KHBvaW50ZXIueCwgcG9pbnRlci55KSxcbiAgICAgICAgICBvYmplY3RMZWZ0VG9wID0gdGhpcy5fZ2V0TGVmdFRvcENvb3JkcygpO1xuICAgICAgaWYgKHRoaXMuYW5nbGUpIHtcbiAgICAgICAgcENsaWNrZWQgPSBmYWJyaWMudXRpbC5yb3RhdGVQb2ludChcbiAgICAgICAgICBwQ2xpY2tlZCwgb2JqZWN0TGVmdFRvcCwgZGVncmVlc1RvUmFkaWFucygtdGhpcy5hbmdsZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogcENsaWNrZWQueCAtIG9iamVjdExlZnRUb3AueCxcbiAgICAgICAgeTogcENsaWNrZWQueSAtIG9iamVjdExlZnRUb3AueVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBjYW52YXMgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIGZvciBzcGVjaWZpYyBvYmplY3RcbiAgICAgKiBjdXN0b20gY29tcG9zaXRpb24gb3BlcmF0aW9uIGZvciB0aGUgcGFydGljdWxhciBvYmplY3QgY2FuIGJlIHNwZWNpZmllZCB1c2luZyBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IFJlbmRlcmluZyBjYW52YXMgY29udGV4dFxuICAgICAqL1xuICAgIF9zZXR1cENvbXBvc2l0ZU9wZXJhdGlvbjogZnVuY3Rpb24gKGN0eCkge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uKSB7XG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSB0aGlzLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbjtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FuY2VsIGluc3RhbmNlJ3MgcnVubmluZyBhbmltYXRpb25zXG4gICAgICogb3ZlcnJpZGUgaWYgbmVjZXNzYXJ5IHRvIGRpc3Bvc2UgYXJ0aWZhY3RzIHN1Y2ggYXMgYGNsaXBQYXRoYFxuICAgICAqL1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmYWJyaWMucnVubmluZ0FuaW1hdGlvbnMpIHtcbiAgICAgICAgZmFicmljLnJ1bm5pbmdBbmltYXRpb25zLmNhbmNlbEJ5VGFyZ2V0KHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgZmFicmljLnV0aWwuY3JlYXRlQWNjZXNzb3JzICYmIGZhYnJpYy51dGlsLmNyZWF0ZUFjY2Vzc29ycyhmYWJyaWMuT2JqZWN0KTtcblxuICBleHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIGZhYnJpYy5PYnNlcnZhYmxlKTtcblxuICAvKipcbiAgICogRGVmaW5lcyB0aGUgbnVtYmVyIG9mIGZyYWN0aW9uIGRpZ2l0cyB0byB1c2Ugd2hlbiBzZXJpYWxpemluZyBvYmplY3QgdmFsdWVzLlxuICAgKiBZb3UgY2FuIHVzZSBpdCB0byBpbmNyZWFzZS9kZWNyZWFzZSBwcmVjaXNpb24gb2Ygc3VjaCB2YWx1ZXMgbGlrZSBsZWZ0LCB0b3AsIHNjYWxlWCwgc2NhbGVZLCBldGMuXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3RcbiAgICogQGNvbnN0YW50XG4gICAqIEB0eXBlIE51bWJlclxuICAgKi9cbiAgZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTID0gMjtcblxuICAvKipcbiAgICogRGVmaW5lcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBlbmxpdmVuZWQgZnJvbSB0aGUgb2JqZWN0IHBhc3NlZCB0byB7QGxpbmsgZmFicmljLk9iamVjdC5fZnJvbU9iamVjdH1cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLk9iamVjdFxuICAgKiBAY29uc3RhbnRcbiAgICogQHR5cGUgc3RyaW5nW11cbiAgICovXG4gIGZhYnJpYy5PYmplY3QuRU5MSVZFTl9QUk9QUyA9IFsnY2xpcFBhdGgnXTtcblxuICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0ID0gZnVuY3Rpb24oY2xhc3NOYW1lLCBvYmplY3QsIGNhbGxiYWNrLCBleHRyYVBhcmFtKSB7XG4gICAgdmFyIGtsYXNzID0gZmFicmljW2NsYXNzTmFtZV07XG4gICAgb2JqZWN0ID0gY2xvbmUob2JqZWN0LCB0cnVlKTtcbiAgICBmYWJyaWMudXRpbC5lbmxpdmVuUGF0dGVybnMoW29iamVjdC5maWxsLCBvYmplY3Quc3Ryb2tlXSwgZnVuY3Rpb24ocGF0dGVybnMpIHtcbiAgICAgIGlmICh0eXBlb2YgcGF0dGVybnNbMF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG9iamVjdC5maWxsID0gcGF0dGVybnNbMF07XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhdHRlcm5zWzFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBvYmplY3Quc3Ryb2tlID0gcGF0dGVybnNbMV07XG4gICAgICB9XG4gICAgICBmYWJyaWMudXRpbC5lbmxpdmVuT2JqZWN0RW5saXZhYmxlcyhvYmplY3QsIG9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBleHRyYVBhcmFtID8gbmV3IGtsYXNzKG9iamVjdFtleHRyYVBhcmFtXSwgb2JqZWN0KSA6IG5ldyBrbGFzcyhvYmplY3QpO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpbnN0YW5jZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogVW5pcXVlIGlkIHVzZWQgaW50ZXJuYWxseSB3aGVuIGNyZWF0aW5nIFNWRyBlbGVtZW50c1xuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuT2JqZWN0XG4gICAqIEB0eXBlIE51bWJlclxuICAgKi9cbiAgZmFicmljLk9iamVjdC5fX3VpZCA9IDA7XG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBkZWdyZWVzVG9SYWRpYW5zID0gZmFicmljLnV0aWwuZGVncmVlc1RvUmFkaWFucyxcbiAgICAgIG9yaWdpblhPZmZzZXQgPSB7XG4gICAgICAgIGxlZnQ6IC0wLjUsXG4gICAgICAgIGNlbnRlcjogMCxcbiAgICAgICAgcmlnaHQ6IDAuNVxuICAgICAgfSxcbiAgICAgIG9yaWdpbllPZmZzZXQgPSB7XG4gICAgICAgIHRvcDogLTAuNSxcbiAgICAgICAgY2VudGVyOiAwLFxuICAgICAgICBib3R0b206IDAuNVxuICAgICAgfTtcblxuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5PYmplY3QucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgdGhlIGNvb3JkaW5hdGVzIGZyb20gYSBzZXQgb2Ygb3JpZ2luIHRvIGFub3RoZXIgKGJhc2VkIG9uIHRoZSBvYmplY3QncyBkaW1lbnNpb25zKVxuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCBUaGUgcG9pbnQgd2hpY2ggY29ycmVzcG9uZHMgdG8gdGhlIG9yaWdpblggYW5kIG9yaWdpblkgcGFyYW1zXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZyb21PcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZnJvbU9yaWdpblkgVmVydGljYWwgb3JpZ2luOiAndG9wJywgJ2NlbnRlcicgb3IgJ2JvdHRvbSdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9PcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG9PcmlnaW5ZIFZlcnRpY2FsIG9yaWdpbjogJ3RvcCcsICdjZW50ZXInIG9yICdib3R0b20nXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIHRyYW5zbGF0ZVRvR2l2ZW5PcmlnaW46IGZ1bmN0aW9uKHBvaW50LCBmcm9tT3JpZ2luWCwgZnJvbU9yaWdpblksIHRvT3JpZ2luWCwgdG9PcmlnaW5ZKSB7XG4gICAgICB2YXIgeCA9IHBvaW50LngsXG4gICAgICAgICAgeSA9IHBvaW50LnksXG4gICAgICAgICAgb2Zmc2V0WCwgb2Zmc2V0WSwgZGltO1xuXG4gICAgICBpZiAodHlwZW9mIGZyb21PcmlnaW5YID09PSAnc3RyaW5nJykge1xuICAgICAgICBmcm9tT3JpZ2luWCA9IG9yaWdpblhPZmZzZXRbZnJvbU9yaWdpblhdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGZyb21PcmlnaW5YIC09IDAuNTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0b09yaWdpblggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRvT3JpZ2luWCA9IG9yaWdpblhPZmZzZXRbdG9PcmlnaW5YXTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0b09yaWdpblggLT0gMC41O1xuICAgICAgfVxuXG4gICAgICBvZmZzZXRYID0gdG9PcmlnaW5YIC0gZnJvbU9yaWdpblg7XG5cbiAgICAgIGlmICh0eXBlb2YgZnJvbU9yaWdpblkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZyb21PcmlnaW5ZID0gb3JpZ2luWU9mZnNldFtmcm9tT3JpZ2luWV07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZnJvbU9yaWdpblkgLT0gMC41O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRvT3JpZ2luWSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdG9PcmlnaW5ZID0gb3JpZ2luWU9mZnNldFt0b09yaWdpblldO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRvT3JpZ2luWSAtPSAwLjU7XG4gICAgICB9XG5cbiAgICAgIG9mZnNldFkgPSB0b09yaWdpblkgLSBmcm9tT3JpZ2luWTtcblxuICAgICAgaWYgKG9mZnNldFggfHwgb2Zmc2V0WSkge1xuICAgICAgICBkaW0gPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKTtcbiAgICAgICAgeCA9IHBvaW50LnggKyBvZmZzZXRYICogZGltLng7XG4gICAgICAgIHkgPSBwb2ludC55ICsgb2Zmc2V0WSAqIGRpbS55O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IGZhYnJpYy5Qb2ludCh4LCB5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyB0aGUgY29vcmRpbmF0ZXMgZnJvbSBvcmlnaW4gdG8gY2VudGVyIGNvb3JkaW5hdGVzIChiYXNlZCBvbiB0aGUgb2JqZWN0J3MgZGltZW5zaW9ucylcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgVGhlIHBvaW50IHdoaWNoIGNvcnJlc3BvbmRzIHRvIHRoZSBvcmlnaW5YIGFuZCBvcmlnaW5ZIHBhcmFtc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICB0cmFuc2xhdGVUb0NlbnRlclBvaW50OiBmdW5jdGlvbihwb2ludCwgb3JpZ2luWCwgb3JpZ2luWSkge1xuICAgICAgdmFyIHAgPSB0aGlzLnRyYW5zbGF0ZVRvR2l2ZW5PcmlnaW4ocG9pbnQsIG9yaWdpblgsIG9yaWdpblksICdjZW50ZXInLCAnY2VudGVyJyk7XG4gICAgICBpZiAodGhpcy5hbmdsZSkge1xuICAgICAgICByZXR1cm4gZmFicmljLnV0aWwucm90YXRlUG9pbnQocCwgcG9pbnQsIGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgdGhlIGNvb3JkaW5hdGVzIGZyb20gY2VudGVyIHRvIG9yaWdpbiBjb29yZGluYXRlcyAoYmFzZWQgb24gdGhlIG9iamVjdCdzIGRpbWVuc2lvbnMpXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IGNlbnRlciBUaGUgcG9pbnQgd2hpY2ggY29ycmVzcG9uZHMgdG8gY2VudGVyIG9mIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWCBIb3Jpem9udGFsIG9yaWdpbjogJ2xlZnQnLCAnY2VudGVyJyBvciAncmlnaHQnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9yaWdpblkgVmVydGljYWwgb3JpZ2luOiAndG9wJywgJ2NlbnRlcicgb3IgJ2JvdHRvbSdcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUG9pbnR9XG4gICAgICovXG4gICAgdHJhbnNsYXRlVG9PcmlnaW5Qb2ludDogZnVuY3Rpb24oY2VudGVyLCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgcCA9IHRoaXMudHJhbnNsYXRlVG9HaXZlbk9yaWdpbihjZW50ZXIsICdjZW50ZXInLCAnY2VudGVyJywgb3JpZ2luWCwgb3JpZ2luWSk7XG4gICAgICBpZiAodGhpcy5hbmdsZSkge1xuICAgICAgICByZXR1cm4gZmFicmljLnV0aWwucm90YXRlUG9pbnQocCwgY2VudGVyLCBkZWdyZWVzVG9SYWRpYW5zKHRoaXMuYW5nbGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZWFsIGNlbnRlciBjb29yZGluYXRlcyBvZiB0aGUgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsZWZ0VG9wID0gbmV3IGZhYnJpYy5Qb2ludCh0aGlzLmxlZnQsIHRoaXMudG9wKTtcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVRvQ2VudGVyUG9pbnQobGVmdFRvcCwgdGhpcy5vcmlnaW5YLCB0aGlzLm9yaWdpblkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgb2JqZWN0IGJhc2VkIG9uIGNlbnRlciBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCBUaGUgcG9pbnQgd2hpY2ggY29ycmVzcG9uZHMgdG8gdGhlIG9yaWdpblggYW5kIG9yaWdpblkgcGFyYW1zXG4gICAgICogQHJldHVybiB7ZmFicmljLlBvaW50fVxuICAgICAqL1xuICAgIC8vIGdldE9yaWdpblBvaW50OiBmdW5jdGlvbihjZW50ZXIpIHtcbiAgICAvLyAgIHJldHVybiB0aGlzLnRyYW5zbGF0ZVRvT3JpZ2luUG9pbnQoY2VudGVyLCB0aGlzLm9yaWdpblgsIHRoaXMub3JpZ2luWSk7XG4gICAgLy8gfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBvYmplY3QgYXMgaWYgaXQgaGFzIGEgZGlmZmVyZW50IG9yaWdpblxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICBnZXRQb2ludEJ5T3JpZ2luOiBmdW5jdGlvbihvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRlVG9PcmlnaW5Qb2ludChjZW50ZXIsIG9yaWdpblgsIG9yaWdpblkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwb2ludCBpbiBsb2NhbCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB7ZmFicmljLlBvaW50fSBwb2ludCBUaGUgcG9pbnQgcmVsYXRpdmUgdG8gdGhlIGdsb2JhbCBjb29yZGluYXRlIHN5c3RlbVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICB0b0xvY2FsUG9pbnQ6IGZ1bmN0aW9uKHBvaW50LCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpLFxuICAgICAgICAgIHAsIHAyO1xuXG4gICAgICBpZiAodHlwZW9mIG9yaWdpblggIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBvcmlnaW5ZICE9PSAndW5kZWZpbmVkJyApIHtcbiAgICAgICAgcCA9IHRoaXMudHJhbnNsYXRlVG9HaXZlbk9yaWdpbihjZW50ZXIsICdjZW50ZXInLCAnY2VudGVyJywgb3JpZ2luWCwgb3JpZ2luWSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcCA9IG5ldyBmYWJyaWMuUG9pbnQodGhpcy5sZWZ0LCB0aGlzLnRvcCk7XG4gICAgICB9XG5cbiAgICAgIHAyID0gbmV3IGZhYnJpYy5Qb2ludChwb2ludC54LCBwb2ludC55KTtcbiAgICAgIGlmICh0aGlzLmFuZ2xlKSB7XG4gICAgICAgIHAyID0gZmFicmljLnV0aWwucm90YXRlUG9pbnQocDIsIGNlbnRlciwgLWRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHAyLnN1YnRyYWN0RXF1YWxzKHApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBwb2ludCBpbiBnbG9iYWwgY29vcmRpbmF0ZXNcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gVGhlIHBvaW50IHJlbGF0aXZlIHRvIHRoZSBsb2NhbCBjb29yZGluYXRlIHN5c3RlbVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2ludH1cbiAgICAgKi9cbiAgICAvLyB0b0dsb2JhbFBvaW50OiBmdW5jdGlvbihwb2ludCkge1xuICAgIC8vICAgcmV0dXJuIGZhYnJpYy51dGlsLnJvdGF0ZVBvaW50KHBvaW50LCB0aGlzLmdldENlbnRlclBvaW50KCksIGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpLmFkZEVxdWFscyhuZXcgZmFicmljLlBvaW50KHRoaXMubGVmdCwgdGhpcy50b3ApKTtcbiAgICAvLyB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9zaXRpb24gb2YgdGhlIG9iamVjdCB0YWtpbmcgaW50byBjb25zaWRlcmF0aW9uIHRoZSBvYmplY3QncyBvcmlnaW5cbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9zIFRoZSBuZXcgcG9zaXRpb24gb2YgdGhlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcmlnaW5YIEhvcml6b250YWwgb3JpZ2luOiAnbGVmdCcsICdjZW50ZXInIG9yICdyaWdodCdcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb3JpZ2luWSBWZXJ0aWNhbCBvcmlnaW46ICd0b3AnLCAnY2VudGVyJyBvciAnYm90dG9tJ1xuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG4gICAgc2V0UG9zaXRpb25CeU9yaWdpbjogZnVuY3Rpb24ocG9zLCBvcmlnaW5YLCBvcmlnaW5ZKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy50cmFuc2xhdGVUb0NlbnRlclBvaW50KHBvcywgb3JpZ2luWCwgb3JpZ2luWSksXG4gICAgICAgICAgcG9zaXRpb24gPSB0aGlzLnRyYW5zbGF0ZVRvT3JpZ2luUG9pbnQoY2VudGVyLCB0aGlzLm9yaWdpblgsIHRoaXMub3JpZ2luWSk7XG4gICAgICB0aGlzLnNldCgnbGVmdCcsIHBvc2l0aW9uLngpO1xuICAgICAgdGhpcy5zZXQoJ3RvcCcsIHBvc2l0aW9uLnkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdG8gT25lIG9mICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCdcbiAgICAgKi9cbiAgICBhZGp1c3RQb3NpdGlvbjogZnVuY3Rpb24odG8pIHtcbiAgICAgIHZhciBhbmdsZSA9IGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSksXG4gICAgICAgICAgaHlwb3RGdWxsID0gdGhpcy5nZXRTY2FsZWRXaWR0aCgpLFxuICAgICAgICAgIHhGdWxsID0gZmFicmljLnV0aWwuY29zKGFuZ2xlKSAqIGh5cG90RnVsbCxcbiAgICAgICAgICB5RnVsbCA9IGZhYnJpYy51dGlsLnNpbihhbmdsZSkgKiBoeXBvdEZ1bGwsXG4gICAgICAgICAgb2Zmc2V0RnJvbSwgb2Zmc2V0VG87XG5cbiAgICAgIC8vVE9ETzogdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBjb25zaWRlciBtaXhlZCBzaXR1YXRpb24gbGlrZSB0b3AsIGNlbnRlci5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcmlnaW5YID09PSAnc3RyaW5nJykge1xuICAgICAgICBvZmZzZXRGcm9tID0gb3JpZ2luWE9mZnNldFt0aGlzLm9yaWdpblhdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9mZnNldEZyb20gPSB0aGlzLm9yaWdpblggLSAwLjU7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJykge1xuICAgICAgICBvZmZzZXRUbyA9IG9yaWdpblhPZmZzZXRbdG9dO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG9mZnNldFRvID0gdG8gLSAwLjU7XG4gICAgICB9XG4gICAgICB0aGlzLmxlZnQgKz0geEZ1bGwgKiAob2Zmc2V0VG8gLSBvZmZzZXRGcm9tKTtcbiAgICAgIHRoaXMudG9wICs9IHlGdWxsICogKG9mZnNldFRvIC0gb2Zmc2V0RnJvbSk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgdGhpcy5vcmlnaW5YID0gdG87XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG9yaWdpbi9wb3NpdGlvbiBvZiB0aGUgb2JqZWN0IHRvIGl0J3MgY2VudGVyIHBvaW50XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgICAqL1xuICAgIF9zZXRPcmlnaW5Ub0NlbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9vcmlnaW5hbE9yaWdpblggPSB0aGlzLm9yaWdpblg7XG4gICAgICB0aGlzLl9vcmlnaW5hbE9yaWdpblkgPSB0aGlzLm9yaWdpblk7XG5cbiAgICAgIHZhciBjZW50ZXIgPSB0aGlzLmdldENlbnRlclBvaW50KCk7XG5cbiAgICAgIHRoaXMub3JpZ2luWCA9ICdjZW50ZXInO1xuICAgICAgdGhpcy5vcmlnaW5ZID0gJ2NlbnRlcic7XG5cbiAgICAgIHRoaXMubGVmdCA9IGNlbnRlci54O1xuICAgICAgdGhpcy50b3AgPSBjZW50ZXIueTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBvcmlnaW4vcG9zaXRpb24gb2YgdGhlIG9iamVjdCB0byBpdCdzIG9yaWdpbmFsIG9yaWdpblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7dm9pZH1cbiAgICAgKi9cbiAgICBfcmVzZXRPcmlnaW46IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9yaWdpblBvaW50ID0gdGhpcy50cmFuc2xhdGVUb09yaWdpblBvaW50KFxuICAgICAgICB0aGlzLmdldENlbnRlclBvaW50KCksXG4gICAgICAgIHRoaXMuX29yaWdpbmFsT3JpZ2luWCxcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxPcmlnaW5ZKTtcblxuICAgICAgdGhpcy5vcmlnaW5YID0gdGhpcy5fb3JpZ2luYWxPcmlnaW5YO1xuICAgICAgdGhpcy5vcmlnaW5ZID0gdGhpcy5fb3JpZ2luYWxPcmlnaW5ZO1xuXG4gICAgICB0aGlzLmxlZnQgPSBvcmlnaW5Qb2ludC54O1xuICAgICAgdGhpcy50b3AgPSBvcmlnaW5Qb2ludC55O1xuXG4gICAgICB0aGlzLl9vcmlnaW5hbE9yaWdpblggPSBudWxsO1xuICAgICAgdGhpcy5fb3JpZ2luYWxPcmlnaW5ZID0gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0TGVmdFRvcENvb3JkczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGVUb09yaWdpblBvaW50KHRoaXMuZ2V0Q2VudGVyUG9pbnQoKSwgJ2xlZnQnLCAndG9wJyk7XG4gICAgfSxcbiAgfSk7XG5cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIGZ1bmN0aW9uIGFycmF5RnJvbUNvb3Jkcyhjb29yZHMpIHtcbiAgICByZXR1cm4gW1xuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMudGwueCwgY29vcmRzLnRsLnkpLFxuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMudHIueCwgY29vcmRzLnRyLnkpLFxuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMuYnIueCwgY29vcmRzLmJyLnkpLFxuICAgICAgbmV3IGZhYnJpYy5Qb2ludChjb29yZHMuYmwueCwgY29vcmRzLmJsLnkpXG4gICAgXTtcbiAgfVxuXG4gIHZhciB1dGlsID0gZmFicmljLnV0aWwsXG4gICAgICBkZWdyZWVzVG9SYWRpYW5zID0gdXRpbC5kZWdyZWVzVG9SYWRpYW5zLFxuICAgICAgbXVsdGlwbHlNYXRyaWNlcyA9IHV0aWwubXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyxcbiAgICAgIHRyYW5zZm9ybVBvaW50ID0gdXRpbC50cmFuc2Zvcm1Qb2ludDtcblxuICB1dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpYmUgb2JqZWN0J3MgY29ybmVyIHBvc2l0aW9uIGluIGNhbnZhcyBlbGVtZW50IGNvb3JkaW5hdGVzLlxuICAgICAqIHByb3BlcnRpZXMgYXJlIGRlcGVuZGluZyBvbiBjb250cm9sIGtleXMgYW5kIHBhZGRpbmcgdGhlIG1haW4gY29udHJvbHMuXG4gICAgICogZWFjaCBwcm9wZXJ0eSBpcyBhbiBvYmplY3Qgd2l0aCB4LCB5IGFuZCBjb3JuZXIuXG4gICAgICogVGhlIGBjb3JuZXJgIHByb3BlcnR5IGNvbnRhaW5zIGluIGEgc2ltaWxhciBtYW5uZXIgdGhlIDQgcG9pbnRzIG9mIHRoZVxuICAgICAqIGludGVyYWN0aXZlIGFyZWEgb2YgdGhlIGNvcm5lci5cbiAgICAgKiBUaGUgY29vcmRpbmF0ZXMgZGVwZW5kcyBmcm9tIHRoZSBjb250cm9scyBwb3NpdGlvbkhhbmRsZXIgYW5kIGFyZSB1c2VkXG4gICAgICogdG8gZHJhdyBhbmQgbG9jYXRlIGNvbnRyb2xzXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3QucHJvdG90eXBlXG4gICAgICovXG4gICAgb0Nvb3JkczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlIG9iamVjdCdzIGNvcm5lciBwb3NpdGlvbiBpbiBjYW52YXMgb2JqZWN0IGFic29sdXRlIGNvb3JkaW5hdGVzXG4gICAgICogcHJvcGVydGllcyBhcmUgdGwsdHIsYmwsYnIgYW5kIGRlc2NyaWJlIHRoZSBmb3VyIG1haW4gY29ybmVyLlxuICAgICAqIGVhY2ggcHJvcGVydHkgaXMgYW4gb2JqZWN0IHdpdGggeCwgeSwgaW5zdGFuY2Ugb2YgRmFicmljLlBvaW50LlxuICAgICAqIFRoZSBjb29yZGluYXRlcyBkZXBlbmRzIGZyb20gdGhpcyBwcm9wZXJ0aWVzOiB3aWR0aCwgaGVpZ2h0LCBzY2FsZVgsIHNjYWxlWVxuICAgICAqIHNrZXdYLCBza2V3WSwgYW5nbGUsIHN0cm9rZVdpZHRoLCB0b3AsIGxlZnQuXG4gICAgICogVGhvc2UgY29vcmRpbmF0ZXMgYXJlIHVzZWZ1bCB0byB1bmRlcnN0YW5kIHdoZXJlIGFuIG9iamVjdCBpcy4gVGhleSBnZXQgdXBkYXRlZFxuICAgICAqIHdpdGggb0Nvb3JkcyBidXQgdGhleSBkbyBub3QgbmVlZCB0byBiZSB1cGRhdGVkIHdoZW4gem9vbSBvciBwYW5uaW5nIGNoYW5nZS5cbiAgICAgKiBUaGUgY29vcmRpbmF0ZXMgZ2V0IHVwZGF0ZWQgd2l0aCBAbWV0aG9kIHNldENvb3Jkcy5cbiAgICAgKiBZb3UgY2FuIGNhbGN1bGF0ZSB0aGVtIHdpdGhvdXQgdXBkYXRpbmcgd2l0aCBAbWV0aG9kIGNhbGNBQ29vcmRzKCk7XG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3QucHJvdG90eXBlXG4gICAgICovXG4gICAgYUNvb3JkczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlIG9iamVjdCdzIGNvcm5lciBwb3NpdGlvbiBpbiBjYW52YXMgZWxlbWVudCBjb29yZGluYXRlcy5cbiAgICAgKiBpbmNsdWRlcyBwYWRkaW5nLiBVc2VkIG9mIG9iamVjdCBkZXRlY3Rpb24uXG4gICAgICogc2V0IGFuZCByZWZyZXNoZWQgd2l0aCBzZXRDb29yZHMuXG4gICAgICogQG1lbWJlck9mIGZhYnJpYy5PYmplY3QucHJvdG90eXBlXG4gICAgICovXG4gICAgbGluZUNvb3JkczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIHN0b3JhZ2UgZm9yIG9iamVjdCB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICovXG4gICAgb3duTWF0cml4Q2FjaGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBzdG9yYWdlIGZvciBvYmplY3QgZnVsbCB0cmFuc2Zvcm0gbWF0cml4XG4gICAgICovXG4gICAgbWF0cml4Q2FjaGU6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBjdXN0b20gY29udHJvbHMgaW50ZXJmYWNlXG4gICAgICogY29udHJvbHMgYXJlIGFkZGVkIGJ5IGRlZmF1bHRfY29udHJvbHMuanNcbiAgICAgKi9cbiAgICBjb250cm9sczogeyB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIGNvcnJlY3Qgc2V0IG9mIGNvb3JkaW5hdGVzIGZvciBpbnRlcnNlY3Rpb25cbiAgICAgKiB0aGlzIHdpbGwgcmV0dXJuIGVpdGhlciBhQ29vcmRzIG9yIGxpbmVDb29yZHMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBhYnNvbHV0ZSB3aWxsIHJldHVybiBhQ29vcmRzIGlmIHRydWUgb3IgbGluZUNvb3Jkc1xuICAgICAqIEByZXR1cm4ge09iamVjdH0ge3RsLCB0ciwgYnIsIGJsfSBwb2ludHNcbiAgICAgKi9cbiAgICBfZ2V0Q29vcmRzOiBmdW5jdGlvbihhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICBpZiAoY2FsY3VsYXRlKSB7XG4gICAgICAgIHJldHVybiAoYWJzb2x1dGUgPyB0aGlzLmNhbGNBQ29vcmRzKCkgOiB0aGlzLmNhbGNMaW5lQ29vcmRzKCkpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmFDb29yZHMgfHwgIXRoaXMubGluZUNvb3Jkcykge1xuICAgICAgICB0aGlzLnNldENvb3Jkcyh0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoYWJzb2x1dGUgPyB0aGlzLmFDb29yZHMgOiB0aGlzLmxpbmVDb29yZHMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gY29ycmVjdCBzZXQgb2YgY29vcmRpbmF0ZXMgZm9yIGludGVyc2VjdGlvblxuICAgICAqIHRoaXMgd2lsbCByZXR1cm4gZWl0aGVyIGFDb29yZHMgb3IgbGluZUNvb3Jkcy5cbiAgICAgKiBUaGUgY29vcmRzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gW3RsLCB0ciwgYnIsIGJsXSBvZiBwb2ludHNcbiAgICAgKi9cbiAgICBnZXRDb29yZHM6IGZ1bmN0aW9uKGFic29sdXRlLCBjYWxjdWxhdGUpIHtcbiAgICAgIHJldHVybiBhcnJheUZyb21Db29yZHModGhpcy5fZ2V0Q29vcmRzKGFic29sdXRlLCBjYWxjdWxhdGUpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIG9iamVjdCBpbnRlcnNlY3RzIHdpdGggYW4gYXJlYSBmb3JtZWQgYnkgMiBwb2ludHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRUTCB0b3AtbGVmdCBwb2ludCBvZiBhcmVhXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50QlIgYm90dG9tLXJpZ2h0IHBvaW50IG9mIGFyZWFcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthYnNvbHV0ZV0gdXNlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpbnRlcnNlY3RzIHdpdGggYW4gYXJlYSBmb3JtZWQgYnkgMiBwb2ludHNcbiAgICAgKi9cbiAgICBpbnRlcnNlY3RzV2l0aFJlY3Q6IGZ1bmN0aW9uKHBvaW50VEwsIHBvaW50QlIsIGFic29sdXRlLCBjYWxjdWxhdGUpIHtcbiAgICAgIHZhciBjb29yZHMgPSB0aGlzLmdldENvb3JkcyhhYnNvbHV0ZSwgY2FsY3VsYXRlKSxcbiAgICAgICAgICBpbnRlcnNlY3Rpb24gPSBmYWJyaWMuSW50ZXJzZWN0aW9uLmludGVyc2VjdFBvbHlnb25SZWN0YW5nbGUoXG4gICAgICAgICAgICBjb29yZHMsXG4gICAgICAgICAgICBwb2ludFRMLFxuICAgICAgICAgICAgcG9pbnRCUlxuICAgICAgICAgICk7XG4gICAgICByZXR1cm4gaW50ZXJzZWN0aW9uLnN0YXR1cyA9PT0gJ0ludGVyc2VjdGlvbic7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBvYmplY3QgaW50ZXJzZWN0cyB3aXRoIGFub3RoZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIE9iamVjdCB0byB0ZXN0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbYWJzb2x1dGVdIHVzZSBjb29yZGluYXRlcyB3aXRob3V0IHZpZXdwb3J0VHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY2FsY3VsYXRlXSB1c2UgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBwb3NpdGlvbiBpbnN0ZWFkIG9mIC5vQ29vcmRzXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBvYmplY3QgaW50ZXJzZWN0cyB3aXRoIGFub3RoZXIgb2JqZWN0XG4gICAgICovXG4gICAgaW50ZXJzZWN0c1dpdGhPYmplY3Q6IGZ1bmN0aW9uKG90aGVyLCBhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgaW50ZXJzZWN0aW9uID0gZmFicmljLkludGVyc2VjdGlvbi5pbnRlcnNlY3RQb2x5Z29uUG9seWdvbihcbiAgICAgICAgdGhpcy5nZXRDb29yZHMoYWJzb2x1dGUsIGNhbGN1bGF0ZSksXG4gICAgICAgIG90aGVyLmdldENvb3JkcyhhYnNvbHV0ZSwgY2FsY3VsYXRlKVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIGludGVyc2VjdGlvbi5zdGF0dXMgPT09ICdJbnRlcnNlY3Rpb24nXG4gICAgICAgIHx8IG90aGVyLmlzQ29udGFpbmVkV2l0aGluT2JqZWN0KHRoaXMsIGFic29sdXRlLCBjYWxjdWxhdGUpXG4gICAgICAgIHx8IHRoaXMuaXNDb250YWluZWRXaXRoaW5PYmplY3Qob3RoZXIsIGFic29sdXRlLCBjYWxjdWxhdGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgb2JqZWN0IGlzIGZ1bGx5IGNvbnRhaW5lZCB3aXRoaW4gYXJlYSBvZiBhbm90aGVyIG9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBPYmplY3QgdG8gdGVzdFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2Fic29sdXRlXSB1c2UgY29vcmRpbmF0ZXMgd2l0aG91dCB2aWV3cG9ydFRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NhbGN1bGF0ZV0gdXNlIGNvb3JkaW5hdGVzIG9mIGN1cnJlbnQgcG9zaXRpb24gaW5zdGVhZCBvZiAub0Nvb3Jkc1xuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgb2JqZWN0IGlzIGZ1bGx5IGNvbnRhaW5lZCB3aXRoaW4gYXJlYSBvZiBhbm90aGVyIG9iamVjdFxuICAgICAqL1xuICAgIGlzQ29udGFpbmVkV2l0aGluT2JqZWN0OiBmdW5jdGlvbihvdGhlciwgYWJzb2x1dGUsIGNhbGN1bGF0ZSkge1xuICAgICAgdmFyIHBvaW50cyA9IHRoaXMuZ2V0Q29vcmRzKGFic29sdXRlLCBjYWxjdWxhdGUpLFxuICAgICAgICAgIG90aGVyQ29vcmRzID0gYWJzb2x1dGUgPyBvdGhlci5hQ29vcmRzIDogb3RoZXIubGluZUNvb3JkcyxcbiAgICAgICAgICBpID0gMCwgbGluZXMgPSBvdGhlci5fZ2V0SW1hZ2VMaW5lcyhvdGhlckNvb3Jkcyk7XG4gICAgICBmb3IgKDsgaSA8IDQ7IGkrKykge1xuICAgICAgICBpZiAoIW90aGVyLmNvbnRhaW5zUG9pbnQocG9pbnRzW2ldLCBsaW5lcykpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgb2JqZWN0IGlzIGZ1bGx5IGNvbnRhaW5lZCB3aXRoaW4gYXJlYSBmb3JtZWQgYnkgMiBwb2ludHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnRUTCB0b3AtbGVmdCBwb2ludCBvZiBhcmVhXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50QlIgYm90dG9tLXJpZ2h0IHBvaW50IG9mIGFyZWFcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthYnNvbHV0ZV0gdXNlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpcyBmdWxseSBjb250YWluZWQgd2l0aGluIGFyZWEgZm9ybWVkIGJ5IDIgcG9pbnRzXG4gICAgICovXG4gICAgaXNDb250YWluZWRXaXRoaW5SZWN0OiBmdW5jdGlvbihwb2ludFRMLCBwb2ludEJSLCBhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgYm91bmRpbmdSZWN0ID0gdGhpcy5nZXRCb3VuZGluZ1JlY3QoYWJzb2x1dGUsIGNhbGN1bGF0ZSk7XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIGJvdW5kaW5nUmVjdC5sZWZ0ID49IHBvaW50VEwueCAmJlxuICAgICAgICBib3VuZGluZ1JlY3QubGVmdCArIGJvdW5kaW5nUmVjdC53aWR0aCA8PSBwb2ludEJSLnggJiZcbiAgICAgICAgYm91bmRpbmdSZWN0LnRvcCA+PSBwb2ludFRMLnkgJiZcbiAgICAgICAgYm91bmRpbmdSZWN0LnRvcCArIGJvdW5kaW5nUmVjdC5oZWlnaHQgPD0gcG9pbnRCUi55XG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgcG9pbnQgaXMgaW5zaWRlIHRoZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gcG9pbnQgUG9pbnQgdG8gY2hlY2sgYWdhaW5zdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbbGluZXNdIG9iamVjdCByZXR1cm5lZCBmcm9tIEBtZXRob2QgX2dldEltYWdlTGluZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFthYnNvbHV0ZV0gdXNlIGNvb3JkaW5hdGVzIHdpdGhvdXQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHBvaW50IGlzIGluc2lkZSB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgY29udGFpbnNQb2ludDogZnVuY3Rpb24ocG9pbnQsIGxpbmVzLCBhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgY29vcmRzID0gdGhpcy5fZ2V0Q29vcmRzKGFic29sdXRlLCBjYWxjdWxhdGUpLFxuICAgICAgICAgIGxpbmVzID0gbGluZXMgfHwgdGhpcy5fZ2V0SW1hZ2VMaW5lcyhjb29yZHMpLFxuICAgICAgICAgIHhQb2ludHMgPSB0aGlzLl9maW5kQ3Jvc3NQb2ludHMocG9pbnQsIGxpbmVzKTtcbiAgICAgIC8vIGlmIHhQb2ludHMgaXMgb2RkIHRoZW4gcG9pbnQgaXMgaW5zaWRlIHRoZSBvYmplY3RcbiAgICAgIHJldHVybiAoeFBvaW50cyAhPT0gMCAmJiB4UG9pbnRzICUgMiA9PT0gMSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBvYmplY3QgaXMgY29udGFpbmVkIHdpdGhpbiB0aGUgY2FudmFzIHdpdGggY3VycmVudCB2aWV3cG9ydFRyYW5zZm9ybVxuICAgICAqIHRoZSBjaGVjayBpcyBkb25lIHN0b3BwaW5nIGF0IGZpcnN0IHBvaW50IHRoYXQgYXBwZWFycyBvbiBzY3JlZW5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLmFDb29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpcyBmdWxseSBvciBwYXJ0aWFsbHkgY29udGFpbmVkIHdpdGhpbiBjYW52YXNcbiAgICAgKi9cbiAgICBpc09uU2NyZWVuOiBmdW5jdGlvbihjYWxjdWxhdGUpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBvaW50VEwgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMudGwsIHBvaW50QlIgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMuYnI7XG4gICAgICB2YXIgcG9pbnRzID0gdGhpcy5nZXRDb29yZHModHJ1ZSwgY2FsY3VsYXRlKTtcbiAgICAgIC8vIGlmIHNvbWUgcG9pbnQgaXMgb24gc2NyZWVuLCB0aGUgb2JqZWN0IGlzIG9uIHNjcmVlbi5cbiAgICAgIGlmIChwb2ludHMuc29tZShmdW5jdGlvbihwb2ludCkge1xuICAgICAgICByZXR1cm4gcG9pbnQueCA8PSBwb2ludEJSLnggJiYgcG9pbnQueCA+PSBwb2ludFRMLnggJiZcbiAgICAgICAgcG9pbnQueSA8PSBwb2ludEJSLnkgJiYgcG9pbnQueSA+PSBwb2ludFRMLnk7XG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIG5vIHBvaW50cyBvbiBzY3JlZW4sIGNoZWNrIGludGVyc2VjdGlvbiB3aXRoIGFic29sdXRlIGNvb3JkaW5hdGVzXG4gICAgICBpZiAodGhpcy5pbnRlcnNlY3RzV2l0aFJlY3QocG9pbnRUTCwgcG9pbnRCUiwgdHJ1ZSwgY2FsY3VsYXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9jb250YWluc0NlbnRlck9mQ2FudmFzKHBvaW50VEwsIHBvaW50QlIsIGNhbGN1bGF0ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgb2JqZWN0IGNvbnRhaW5zIHRoZSBtaWRwb2ludCBiZXR3ZWVuIGNhbnZhcyBleHRyZW1pdGllc1xuICAgICAqIERvZXMgbm90IG1ha2Ugc2Vuc2Ugb3V0c2lkZSB0aGUgY29udGV4dCBvZiBpc09uU2NyZWVuIGFuZCBpc1BhcnRpYWxseU9uU2NyZWVuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0ZhYnJpYy5Qb2ludH0gcG9pbnRUTCBUb3AgTGVmdCBwb2ludFxuICAgICAqIEBwYXJhbSB7RmFicmljLlBvaW50fSBwb2ludEJSIFRvcCBSaWdodCBwb2ludFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gY2FsY3VsYXRlIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIHRoZSBvYmplY3QgY29udGFpbnMgdGhlIHBvaW50XG4gICAgICovXG4gICAgX2NvbnRhaW5zQ2VudGVyT2ZDYW52YXM6IGZ1bmN0aW9uKHBvaW50VEwsIHBvaW50QlIsIGNhbGN1bGF0ZSkge1xuICAgICAgLy8gd29yc3QgY2FzZSBzY2VuYXJpbyB0aGUgb2JqZWN0IGlzIHNvIGJpZyB0aGF0IGNvbnRhaW5zIHRoZSBzY3JlZW5cbiAgICAgIHZhciBjZW50ZXJQb2ludCA9IHsgeDogKHBvaW50VEwueCArIHBvaW50QlIueCkgLyAyLCB5OiAocG9pbnRUTC55ICsgcG9pbnRCUi55KSAvIDIgfTtcbiAgICAgIGlmICh0aGlzLmNvbnRhaW5zUG9pbnQoY2VudGVyUG9pbnQsIG51bGwsIHRydWUsIGNhbGN1bGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBvYmplY3QgaXMgcGFydGlhbGx5IGNvbnRhaW5lZCB3aXRoaW4gdGhlIGNhbnZhcyB3aXRoIGN1cnJlbnQgdmlld3BvcnRUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtjYWxjdWxhdGVdIHVzZSBjb29yZGluYXRlcyBvZiBjdXJyZW50IHBvc2l0aW9uIGluc3RlYWQgb2YgLm9Db29yZHNcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIG9iamVjdCBpcyBwYXJ0aWFsbHkgY29udGFpbmVkIHdpdGhpbiBjYW52YXNcbiAgICAgKi9cbiAgICBpc1BhcnRpYWxseU9uU2NyZWVuOiBmdW5jdGlvbihjYWxjdWxhdGUpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHBvaW50VEwgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMudGwsIHBvaW50QlIgPSB0aGlzLmNhbnZhcy52cHRDb29yZHMuYnI7XG4gICAgICBpZiAodGhpcy5pbnRlcnNlY3RzV2l0aFJlY3QocG9pbnRUTCwgcG9pbnRCUiwgdHJ1ZSwgY2FsY3VsYXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBhbGxQb2ludHNBcmVPdXRzaWRlID0gdGhpcy5nZXRDb29yZHModHJ1ZSwgY2FsY3VsYXRlKS5ldmVyeShmdW5jdGlvbihwb2ludCkge1xuICAgICAgICByZXR1cm4gKHBvaW50LnggPj0gcG9pbnRCUi54IHx8IHBvaW50LnggPD0gcG9pbnRUTC54KSAmJlxuICAgICAgICAocG9pbnQueSA+PSBwb2ludEJSLnkgfHwgcG9pbnQueSA8PSBwb2ludFRMLnkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWxsUG9pbnRzQXJlT3V0c2lkZSAmJiB0aGlzLl9jb250YWluc0NlbnRlck9mQ2FudmFzKHBvaW50VEwsIHBvaW50QlIsIGNhbGN1bGF0ZSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIE1ldGhvZCB0aGF0IHJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIG9iamVjdCBlZGdlcyBpbiBpdCwgZ2l2ZW4gdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBjb3JuZXJzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb0Nvb3JkcyBDb29yZGluYXRlcyBvZiB0aGUgb2JqZWN0IGNvcm5lcnNcbiAgICAgKi9cbiAgICBfZ2V0SW1hZ2VMaW5lczogZnVuY3Rpb24ob0Nvb3Jkcykge1xuXG4gICAgICB2YXIgbGluZXMgPSB7XG4gICAgICAgIHRvcGxpbmU6IHtcbiAgICAgICAgICBvOiBvQ29vcmRzLnRsLFxuICAgICAgICAgIGQ6IG9Db29yZHMudHJcbiAgICAgICAgfSxcbiAgICAgICAgcmlnaHRsaW5lOiB7XG4gICAgICAgICAgbzogb0Nvb3Jkcy50cixcbiAgICAgICAgICBkOiBvQ29vcmRzLmJyXG4gICAgICAgIH0sXG4gICAgICAgIGJvdHRvbWxpbmU6IHtcbiAgICAgICAgICBvOiBvQ29vcmRzLmJyLFxuICAgICAgICAgIGQ6IG9Db29yZHMuYmxcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdGxpbmU6IHtcbiAgICAgICAgICBvOiBvQ29vcmRzLmJsLFxuICAgICAgICAgIGQ6IG9Db29yZHMudGxcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gLy8gZGVidWdnaW5nXG4gICAgICAvLyBpZiAodGhpcy5jYW52YXMuY29udGV4dFRvcCkge1xuICAgICAgLy8gICB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmJvdHRvbWxpbmUuZC54LCBsaW5lcy5ib3R0b21saW5lLmQueSwgMiwgMik7XG4gICAgICAvLyAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMuYm90dG9tbGluZS5vLngsIGxpbmVzLmJvdHRvbWxpbmUuby55LCAyLCAyKTtcbiAgICAgIC8vXG4gICAgICAvLyAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMubGVmdGxpbmUuZC54LCBsaW5lcy5sZWZ0bGluZS5kLnksIDIsIDIpO1xuICAgICAgLy8gICB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmxlZnRsaW5lLm8ueCwgbGluZXMubGVmdGxpbmUuby55LCAyLCAyKTtcbiAgICAgIC8vXG4gICAgICAvLyAgIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMudG9wbGluZS5kLngsIGxpbmVzLnRvcGxpbmUuZC55LCAyLCAyKTtcbiAgICAgIC8vICAgdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy50b3BsaW5lLm8ueCwgbGluZXMudG9wbGluZS5vLnksIDIsIDIpO1xuICAgICAgLy9cbiAgICAgIC8vICAgdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy5yaWdodGxpbmUuZC54LCBsaW5lcy5yaWdodGxpbmUuZC55LCAyLCAyKTtcbiAgICAgIC8vICAgdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy5yaWdodGxpbmUuby54LCBsaW5lcy5yaWdodGxpbmUuby55LCAyLCAyKTtcbiAgICAgIC8vIH1cblxuICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIGRldGVybWluZSBob3cgbWFueSBjcm9zcyBwb2ludHMgYXJlIGJldHdlZW4gdGhlIDQgb2JqZWN0IGVkZ2VzXG4gICAgICogYW5kIHRoZSBob3Jpem9udGFsIGxpbmUgZGV0ZXJtaW5lZCBieSBhIHBvaW50IG9uIGNhbnZhc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtmYWJyaWMuUG9pbnR9IHBvaW50IFBvaW50IHRvIGNoZWNrXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxpbmVzIENvb3JkaW5hdGVzIG9mIHRoZSBvYmplY3QgYmVpbmcgZXZhbHVhdGVkXG4gICAgICovXG4gICAgLy8gcmVtb3ZlIHlpLCBub3QgdXNlZCBidXQgbGVmdCBjb2RlIGhlcmUganVzdCBpbiBjYXNlLlxuICAgIF9maW5kQ3Jvc3NQb2ludHM6IGZ1bmN0aW9uKHBvaW50LCBsaW5lcykge1xuICAgICAgdmFyIGIxLCBiMiwgYTEsIGEyLCB4aSwgLy8geWksXG4gICAgICAgICAgeGNvdW50ID0gMCxcbiAgICAgICAgICBpTGluZTtcblxuICAgICAgZm9yICh2YXIgbGluZUtleSBpbiBsaW5lcykge1xuICAgICAgICBpTGluZSA9IGxpbmVzW2xpbmVLZXldO1xuICAgICAgICAvLyBvcHRpbWlzYXRpb24gMTogbGluZSBiZWxvdyBwb2ludC4gbm8gY3Jvc3NcbiAgICAgICAgaWYgKChpTGluZS5vLnkgPCBwb2ludC55KSAmJiAoaUxpbmUuZC55IDwgcG9pbnQueSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvcHRpbWlzYXRpb24gMjogbGluZSBhYm92ZSBwb2ludC4gbm8gY3Jvc3NcbiAgICAgICAgaWYgKChpTGluZS5vLnkgPj0gcG9pbnQueSkgJiYgKGlMaW5lLmQueSA+PSBwb2ludC55KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIG9wdGltaXNhdGlvbiAzOiB2ZXJ0aWNhbCBsaW5lIGNhc2VcbiAgICAgICAgaWYgKChpTGluZS5vLnggPT09IGlMaW5lLmQueCkgJiYgKGlMaW5lLm8ueCA+PSBwb2ludC54KSkge1xuICAgICAgICAgIHhpID0gaUxpbmUuby54O1xuICAgICAgICAgIC8vIHlpID0gcG9pbnQueTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIGludGVyc2VjdGlvbiBwb2ludFxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBiMSA9IDA7XG4gICAgICAgICAgYjIgPSAoaUxpbmUuZC55IC0gaUxpbmUuby55KSAvIChpTGluZS5kLnggLSBpTGluZS5vLngpO1xuICAgICAgICAgIGExID0gcG9pbnQueSAtIGIxICogcG9pbnQueDtcbiAgICAgICAgICBhMiA9IGlMaW5lLm8ueSAtIGIyICogaUxpbmUuby54O1xuXG4gICAgICAgICAgeGkgPSAtKGExIC0gYTIpIC8gKGIxIC0gYjIpO1xuICAgICAgICAgIC8vIHlpID0gYTEgKyBiMSAqIHhpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRvbnQgY291bnQgeGkgPCBwb2ludC54IGNhc2VzXG4gICAgICAgIGlmICh4aSA+PSBwb2ludC54KSB7XG4gICAgICAgICAgeGNvdW50ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3B0aW1pc2F0aW9uIDQ6IHNwZWNpZmljIGZvciBzcXVhcmUgaW1hZ2VzXG4gICAgICAgIGlmICh4Y291bnQgPT09IDIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHhjb3VudDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjb29yZGluYXRlcyBvZiBvYmplY3QncyBib3VuZGluZyByZWN0YW5nbGUgKGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodClcbiAgICAgKiB0aGUgYm94IGlzIGludGVuZGVkIGFzIGFsaWduZWQgdG8gYXhpcyBvZiBjYW52YXMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbYWJzb2x1dGVdIHVzZSBjb29yZGluYXRlcyB3aXRob3V0IHZpZXdwb3J0VHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY2FsY3VsYXRlXSB1c2UgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBwb3NpdGlvbiBpbnN0ZWFkIG9mIC5vQ29vcmRzIC8gLmFDb29yZHNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ2V0Qm91bmRpbmdSZWN0OiBmdW5jdGlvbihhYnNvbHV0ZSwgY2FsY3VsYXRlKSB7XG4gICAgICB2YXIgY29vcmRzID0gdGhpcy5nZXRDb29yZHMoYWJzb2x1dGUsIGNhbGN1bGF0ZSk7XG4gICAgICByZXR1cm4gdXRpbC5tYWtlQm91bmRpbmdCb3hGcm9tUG9pbnRzKGNvb3Jkcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2lkdGggb2YgYW4gb2JqZWN0J3MgYm91bmRpbmcgYm94IGNvdW50aW5nIHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIGJlZm9yZSAyLjAgaXQgd2FzIG5hbWVkIGdldFdpZHRoKCk7XG4gICAgICogQHJldHVybiB7TnVtYmVyfSB3aWR0aCB2YWx1ZVxuICAgICAqL1xuICAgIGdldFNjYWxlZFdpZHRoOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKS54O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGhlaWdodCBvZiBhbiBvYmplY3QgYm91bmRpbmcgYm94IGNvdW50aW5nIHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIGJlZm9yZSAyLjAgaXQgd2FzIG5hbWVkIGdldEhlaWdodCgpO1xuICAgICAqIEByZXR1cm4ge051bWJlcn0gaGVpZ2h0IHZhbHVlXG4gICAgICovXG4gICAgZ2V0U2NhbGVkSGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKS55O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBzdXJlIHRoZSBzY2FsZSBpcyB2YWxpZCBhbmQgbW9kaWZpZXMgaXQgaWYgbmVjZXNzYXJ5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgX2NvbnN0cmFpblNjYWxlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKE1hdGguYWJzKHZhbHVlKSA8IHRoaXMubWluU2NhbGVMaW1pdCkge1xuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIC10aGlzLm1pblNjYWxlTGltaXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWluU2NhbGVMaW1pdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDAuMDAwMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2NhbGVzIGFuIG9iamVjdCAoZXF1YWxseSBieSB4IGFuZCB5KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBTY2FsZSBmYWN0b3JcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNjYWxlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdGhpcy5fc2V0KCdzY2FsZVgnLCB2YWx1ZSk7XG4gICAgICB0aGlzLl9zZXQoJ3NjYWxlWScsIHZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzLnNldENvb3JkcygpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgYW4gb2JqZWN0IHRvIGEgZ2l2ZW4gd2lkdGgsIHdpdGggcmVzcGVjdCB0byBib3VuZGluZyBib3ggKHNjYWxpbmcgYnkgeC95IGVxdWFsbHkpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlIE5ldyB3aWR0aCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYWJzb2x1dGUgaWdub3JlIHZpZXdwb3J0XG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzY2FsZVRvV2lkdGg6IGZ1bmN0aW9uKHZhbHVlLCBhYnNvbHV0ZSkge1xuICAgICAgLy8gYWRqdXN0IHRvIGJvdW5kaW5nIHJlY3QgZmFjdG9yIHNvIHRoYXQgcm90YXRlZCBzaGFwZXMgd291bGQgZml0IGFzIHdlbGxcbiAgICAgIHZhciBib3VuZGluZ1JlY3RGYWN0b3IgPSB0aGlzLmdldEJvdW5kaW5nUmVjdChhYnNvbHV0ZSkud2lkdGggLyB0aGlzLmdldFNjYWxlZFdpZHRoKCk7XG4gICAgICByZXR1cm4gdGhpcy5zY2FsZSh2YWx1ZSAvIHRoaXMud2lkdGggLyBib3VuZGluZ1JlY3RGYWN0b3IpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgYW4gb2JqZWN0IHRvIGEgZ2l2ZW4gaGVpZ2h0LCB3aXRoIHJlc3BlY3QgdG8gYm91bmRpbmcgYm94IChzY2FsaW5nIGJ5IHgveSBlcXVhbGx5KVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBOZXcgaGVpZ2h0IHZhbHVlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBhYnNvbHV0ZSBpZ25vcmUgdmlld3BvcnRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNjYWxlVG9IZWlnaHQ6IGZ1bmN0aW9uKHZhbHVlLCBhYnNvbHV0ZSkge1xuICAgICAgLy8gYWRqdXN0IHRvIGJvdW5kaW5nIHJlY3QgZmFjdG9yIHNvIHRoYXQgcm90YXRlZCBzaGFwZXMgd291bGQgZml0IGFzIHdlbGxcbiAgICAgIHZhciBib3VuZGluZ1JlY3RGYWN0b3IgPSB0aGlzLmdldEJvdW5kaW5nUmVjdChhYnNvbHV0ZSkuaGVpZ2h0IC8gdGhpcy5nZXRTY2FsZWRIZWlnaHQoKTtcbiAgICAgIHJldHVybiB0aGlzLnNjYWxlKHZhbHVlIC8gdGhpcy5oZWlnaHQgLyBib3VuZGluZ1JlY3RGYWN0b3IpO1xuICAgIH0sXG5cbiAgICBjYWxjTGluZUNvb3JkczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdnB0ID0gdGhpcy5nZXRWaWV3cG9ydFRyYW5zZm9ybSgpLFxuICAgICAgICAgIHBhZGRpbmcgPSB0aGlzLnBhZGRpbmcsIGFuZ2xlID0gZGVncmVlc1RvUmFkaWFucyh0aGlzLmFuZ2xlKSxcbiAgICAgICAgICBjb3MgPSB1dGlsLmNvcyhhbmdsZSksIHNpbiA9IHV0aWwuc2luKGFuZ2xlKSxcbiAgICAgICAgICBjb3NQID0gY29zICogcGFkZGluZywgc2luUCA9IHNpbiAqIHBhZGRpbmcsIGNvc1BTaW5QID0gY29zUCArIHNpblAsXG4gICAgICAgICAgY29zUE1pbnVzU2luUCA9IGNvc1AgLSBzaW5QLCBhQ29vcmRzID0gdGhpcy5jYWxjQUNvb3JkcygpO1xuXG4gICAgICB2YXIgbGluZUNvb3JkcyA9IHtcbiAgICAgICAgdGw6IHRyYW5zZm9ybVBvaW50KGFDb29yZHMudGwsIHZwdCksXG4gICAgICAgIHRyOiB0cmFuc2Zvcm1Qb2ludChhQ29vcmRzLnRyLCB2cHQpLFxuICAgICAgICBibDogdHJhbnNmb3JtUG9pbnQoYUNvb3Jkcy5ibCwgdnB0KSxcbiAgICAgICAgYnI6IHRyYW5zZm9ybVBvaW50KGFDb29yZHMuYnIsIHZwdCksXG4gICAgICB9O1xuXG4gICAgICBpZiAocGFkZGluZykge1xuICAgICAgICBsaW5lQ29vcmRzLnRsLnggLT0gY29zUE1pbnVzU2luUDtcbiAgICAgICAgbGluZUNvb3Jkcy50bC55IC09IGNvc1BTaW5QO1xuICAgICAgICBsaW5lQ29vcmRzLnRyLnggKz0gY29zUFNpblA7XG4gICAgICAgIGxpbmVDb29yZHMudHIueSAtPSBjb3NQTWludXNTaW5QO1xuICAgICAgICBsaW5lQ29vcmRzLmJsLnggLT0gY29zUFNpblA7XG4gICAgICAgIGxpbmVDb29yZHMuYmwueSArPSBjb3NQTWludXNTaW5QO1xuICAgICAgICBsaW5lQ29vcmRzLmJyLnggKz0gY29zUE1pbnVzU2luUDtcbiAgICAgICAgbGluZUNvb3Jkcy5ici55ICs9IGNvc1BTaW5QO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGluZUNvb3JkcztcbiAgICB9LFxuXG4gICAgY2FsY09Db29yZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJvdGF0ZU1hdHJpeCA9IHRoaXMuX2NhbGNSb3RhdGVNYXRyaXgoKSxcbiAgICAgICAgICB0cmFuc2xhdGVNYXRyaXggPSB0aGlzLl9jYWxjVHJhbnNsYXRlTWF0cml4KCksXG4gICAgICAgICAgdnB0ID0gdGhpcy5nZXRWaWV3cG9ydFRyYW5zZm9ybSgpLFxuICAgICAgICAgIHN0YXJ0TWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyh2cHQsIHRyYW5zbGF0ZU1hdHJpeCksXG4gICAgICAgICAgZmluYWxNYXRyaXggPSBtdWx0aXBseU1hdHJpY2VzKHN0YXJ0TWF0cml4LCByb3RhdGVNYXRyaXgpLFxuICAgICAgICAgIGZpbmFsTWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyhmaW5hbE1hdHJpeCwgWzEgLyB2cHRbMF0sIDAsIDAsIDEgLyB2cHRbM10sIDAsIDBdKSxcbiAgICAgICAgICBkaW0gPSB0aGlzLl9jYWxjdWxhdGVDdXJyZW50RGltZW5zaW9ucygpLFxuICAgICAgICAgIGNvb3JkcyA9IHt9O1xuICAgICAgdGhpcy5mb3JFYWNoQ29udHJvbChmdW5jdGlvbihjb250cm9sLCBrZXksIGZhYnJpY09iamVjdCkge1xuICAgICAgICBjb29yZHNba2V5XSA9IGNvbnRyb2wucG9zaXRpb25IYW5kbGVyKGRpbSwgZmluYWxNYXRyaXgsIGZhYnJpY09iamVjdCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gZGVidWcgY29kZVxuICAgICAgLy8gdmFyIGNhbnZhcyA9IHRoaXMuY2FudmFzO1xuICAgICAgLy8gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIC8vICAgY2FudmFzLmNvbnRleHRUb3AuY2xlYXJSZWN0KDAsIDAsIDcwMCwgNzAwKTtcbiAgICAgIC8vICAgY2FudmFzLmNvbnRleHRUb3AuZmlsbFN0eWxlID0gJ2dyZWVuJztcbiAgICAgIC8vICAgT2JqZWN0LmtleXMoY29vcmRzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgLy8gICAgIHZhciBjb250cm9sID0gY29vcmRzW2tleV07XG4gICAgICAvLyAgICAgY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QoY29udHJvbC54LCBjb250cm9sLnksIDMsIDMpO1xuICAgICAgLy8gICB9KTtcbiAgICAgIC8vIH0sIDUwKTtcbiAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfSxcblxuICAgIGNhbGNBQ29vcmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByb3RhdGVNYXRyaXggPSB0aGlzLl9jYWxjUm90YXRlTWF0cml4KCksXG4gICAgICAgICAgdHJhbnNsYXRlTWF0cml4ID0gdGhpcy5fY2FsY1RyYW5zbGF0ZU1hdHJpeCgpLFxuICAgICAgICAgIGZpbmFsTWF0cml4ID0gbXVsdGlwbHlNYXRyaWNlcyh0cmFuc2xhdGVNYXRyaXgsIHJvdGF0ZU1hdHJpeCksXG4gICAgICAgICAgZGltID0gdGhpcy5fZ2V0VHJhbnNmb3JtZWREaW1lbnNpb25zKCksXG4gICAgICAgICAgdyA9IGRpbS54IC8gMiwgaCA9IGRpbS55IC8gMjtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIGNvcm5lcnNcbiAgICAgICAgdGw6IHRyYW5zZm9ybVBvaW50KHsgeDogLXcsIHk6IC1oIH0sIGZpbmFsTWF0cml4KSxcbiAgICAgICAgdHI6IHRyYW5zZm9ybVBvaW50KHsgeDogdywgeTogLWggfSwgZmluYWxNYXRyaXgpLFxuICAgICAgICBibDogdHJhbnNmb3JtUG9pbnQoeyB4OiAtdywgeTogaCB9LCBmaW5hbE1hdHJpeCksXG4gICAgICAgIGJyOiB0cmFuc2Zvcm1Qb2ludCh7IHg6IHcsIHk6IGggfSwgZmluYWxNYXRyaXgpXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGNvcm5lciBhbmQgY29udHJvbHMgcG9zaXRpb24gY29vcmRpbmF0ZXMgYmFzZWQgb24gY3VycmVudCBhbmdsZSwgd2lkdGggYW5kIGhlaWdodCwgbGVmdCBhbmQgdG9wLlxuICAgICAqIG9Db29yZHMgYXJlIHVzZWQgdG8gZmluZCB0aGUgY29ybmVyc1xuICAgICAqIGFDb29yZHMgYXJlIHVzZWQgdG8gcXVpY2tseSBmaW5kIGFuIG9iamVjdCBvbiB0aGUgY2FudmFzXG4gICAgICogbGluZUNvb3JkcyBhcmUgdXNlZCB0byBxdWlja2x5IGZpbmQgb2JqZWN0IGR1cmluZyBwb2ludGVyIGV2ZW50cy5cbiAgICAgKiBTZWUge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWJyaWNqcy9mYWJyaWMuanMvd2lraS9XaGVuLXRvLWNhbGwtc2V0Q29vcmRzfSBhbmQge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWdvdGNoYXN9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtza2lwQ29ybmVyc10gc2tpcCBjYWxjdWxhdGlvbiBvZiBvQ29vcmRzLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0Q29vcmRzOiBmdW5jdGlvbihza2lwQ29ybmVycykge1xuICAgICAgdGhpcy5hQ29vcmRzID0gdGhpcy5jYWxjQUNvb3JkcygpO1xuICAgICAgLy8gaW4gY2FzZSB3ZSBhcmUgaW4gYSBncm91cCwgZm9yIGhvdyB0aGUgaW5uZXIgZ3JvdXAgdGFyZ2V0IGNoZWNrIHdvcmtzLFxuICAgICAgLy8gbGluZUNvb3JkcyBhcmUgZXhhY3RseSBhQ29vcmRzLiBTaW5jZSB0aGUgdnB0IGdldHMgYWJzb3JiZWQgYnkgdGhlIG5vcm1hbGl6ZWQgcG9pbnRlci5cbiAgICAgIHRoaXMubGluZUNvb3JkcyA9IHRoaXMuZ3JvdXAgPyB0aGlzLmFDb29yZHMgOiB0aGlzLmNhbGNMaW5lQ29vcmRzKCk7XG4gICAgICBpZiAoc2tpcENvcm5lcnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICAvLyBzZXQgY29vcmRpbmF0ZXMgb2YgdGhlIGRyYWdnYWJsZSBib3hlcyBpbiB0aGUgY29ybmVycyB1c2VkIHRvIHNjYWxlL3JvdGF0ZSB0aGUgaW1hZ2VcbiAgICAgIHRoaXMub0Nvb3JkcyA9IHRoaXMuY2FsY09Db29yZHMoKTtcbiAgICAgIHRoaXMuX3NldENvcm5lckNvb3JkcyAmJiB0aGlzLl9zZXRDb3JuZXJDb29yZHMoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxjdWxhdGUgcm90YXRpb24gbWF0cml4IG9mIGFuIG9iamVjdFxuICAgICAqIEByZXR1cm4ge0FycmF5fSByb3RhdGlvbiBtYXRyaXggZm9yIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBfY2FsY1JvdGF0ZU1hdHJpeDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdXRpbC5jYWxjUm90YXRlTWF0cml4KHRoaXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxjdWxhdGUgdGhlIHRyYW5zbGF0aW9uIG1hdHJpeCBmb3IgYW4gb2JqZWN0IHRyYW5zZm9ybVxuICAgICAqIEByZXR1cm4ge0FycmF5fSByb3RhdGlvbiBtYXRyaXggZm9yIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBfY2FsY1RyYW5zbGF0ZU1hdHJpeDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgcmV0dXJuIFsxLCAwLCAwLCAxLCBjZW50ZXIueCwgY2VudGVyLnldO1xuICAgIH0sXG5cbiAgICB0cmFuc2Zvcm1NYXRyaXhLZXk6IGZ1bmN0aW9uKHNraXBHcm91cCkge1xuICAgICAgdmFyIHNlcCA9ICdfJywgcHJlZml4ID0gJyc7XG4gICAgICBpZiAoIXNraXBHcm91cCAmJiB0aGlzLmdyb3VwKSB7XG4gICAgICAgIHByZWZpeCA9IHRoaXMuZ3JvdXAudHJhbnNmb3JtTWF0cml4S2V5KHNraXBHcm91cCkgKyBzZXA7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHByZWZpeCArIHRoaXMudG9wICsgc2VwICsgdGhpcy5sZWZ0ICsgc2VwICsgdGhpcy5zY2FsZVggKyBzZXAgKyB0aGlzLnNjYWxlWSArXG4gICAgICAgIHNlcCArIHRoaXMuc2tld1ggKyBzZXAgKyB0aGlzLnNrZXdZICsgc2VwICsgdGhpcy5hbmdsZSArIHNlcCArIHRoaXMub3JpZ2luWCArIHNlcCArIHRoaXMub3JpZ2luWSArXG4gICAgICAgIHNlcCArIHRoaXMud2lkdGggKyBzZXAgKyB0aGlzLmhlaWdodCArIHNlcCArIHRoaXMuc3Ryb2tlV2lkdGggKyB0aGlzLmZsaXBYICsgdGhpcy5mbGlwWTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsY3VsYXRlIHRyYW5zZm9ybSBtYXRyaXggdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9ucyBmcm9tIHRoZVxuICAgICAqIG9iamVjdCdzIHByb3BlcnRpZXMuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2tpcEdyb3VwXSByZXR1cm4gdHJhbnNmb3JtIG1hdHJpeCBmb3Igb2JqZWN0IG5vdCBjb3VudGluZyBwYXJlbnQgdHJhbnNmb3JtYXRpb25zXG4gICAgICogVGhlcmUgYXJlIHNvbWUgc2l0dWF0aW9uIGluIHdoaWNoIHRoaXMgaXMgdXNlZnVsIHRvIGF2b2lkIHRoZSBmYWtlIHJvdGF0aW9uLlxuICAgICAqIEByZXR1cm4ge0FycmF5fSB0cmFuc2Zvcm0gbWF0cml4IGZvciB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgY2FsY1RyYW5zZm9ybU1hdHJpeDogZnVuY3Rpb24oc2tpcEdyb3VwKSB7XG4gICAgICB2YXIgbWF0cml4ID0gdGhpcy5jYWxjT3duTWF0cml4KCk7XG4gICAgICBpZiAoc2tpcEdyb3VwIHx8ICF0aGlzLmdyb3VwKSB7XG4gICAgICAgIHJldHVybiBtYXRyaXg7XG4gICAgICB9XG4gICAgICB2YXIga2V5ID0gdGhpcy50cmFuc2Zvcm1NYXRyaXhLZXkoc2tpcEdyb3VwKSwgY2FjaGUgPSB0aGlzLm1hdHJpeENhY2hlIHx8ICh0aGlzLm1hdHJpeENhY2hlID0ge30pO1xuICAgICAgaWYgKGNhY2hlLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIHJldHVybiBjYWNoZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmdyb3VwKSB7XG4gICAgICAgIG1hdHJpeCA9IG11bHRpcGx5TWF0cmljZXModGhpcy5ncm91cC5jYWxjVHJhbnNmb3JtTWF0cml4KGZhbHNlKSwgbWF0cml4KTtcbiAgICAgIH1cbiAgICAgIGNhY2hlLmtleSA9IGtleTtcbiAgICAgIGNhY2hlLnZhbHVlID0gbWF0cml4O1xuICAgICAgcmV0dXJuIG1hdHJpeDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsY3VsYXRlIHRyYW5zZm9ybSBtYXRyaXggdGhhdCByZXByZXNlbnRzIHRoZSBjdXJyZW50IHRyYW5zZm9ybWF0aW9ucyBmcm9tIHRoZVxuICAgICAqIG9iamVjdCdzIHByb3BlcnRpZXMsIHRoaXMgbWF0cml4IGRvZXMgbm90IGluY2x1ZGUgdGhlIGdyb3VwIHRyYW5zZm9ybWF0aW9uXG4gICAgICogQHJldHVybiB7QXJyYXl9IHRyYW5zZm9ybSBtYXRyaXggZm9yIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBjYWxjT3duTWF0cml4OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrZXkgPSB0aGlzLnRyYW5zZm9ybU1hdHJpeEtleSh0cnVlKSwgY2FjaGUgPSB0aGlzLm93bk1hdHJpeENhY2hlIHx8ICh0aGlzLm93bk1hdHJpeENhY2hlID0ge30pO1xuICAgICAgaWYgKGNhY2hlLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIHJldHVybiBjYWNoZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciB0TWF0cml4ID0gdGhpcy5fY2FsY1RyYW5zbGF0ZU1hdHJpeCgpLFxuICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBhbmdsZTogdGhpcy5hbmdsZSxcbiAgICAgICAgICAgIHRyYW5zbGF0ZVg6IHRNYXRyaXhbNF0sXG4gICAgICAgICAgICB0cmFuc2xhdGVZOiB0TWF0cml4WzVdLFxuICAgICAgICAgICAgc2NhbGVYOiB0aGlzLnNjYWxlWCxcbiAgICAgICAgICAgIHNjYWxlWTogdGhpcy5zY2FsZVksXG4gICAgICAgICAgICBza2V3WDogdGhpcy5za2V3WCxcbiAgICAgICAgICAgIHNrZXdZOiB0aGlzLnNrZXdZLFxuICAgICAgICAgICAgZmxpcFg6IHRoaXMuZmxpcFgsXG4gICAgICAgICAgICBmbGlwWTogdGhpcy5mbGlwWSxcbiAgICAgICAgICB9O1xuICAgICAgY2FjaGUua2V5ID0ga2V5O1xuICAgICAgY2FjaGUudmFsdWUgPSB1dGlsLmNvbXBvc2VNYXRyaXgob3B0aW9ucyk7XG4gICAgICByZXR1cm4gY2FjaGUudmFsdWU7XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQ2FsY3VsYXRlIG9iamVjdCBkaW1lbnNpb25zIGZyb20gaXRzIHByb3BlcnRpZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gLnggd2lkdGggZGltZW5zaW9uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSAueSBoZWlnaHQgZGltZW5zaW9uXG4gICAgICovXG4gICAgX2dldE5vblRyYW5zZm9ybWVkRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3Ryb2tlV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoLFxuICAgICAgICAgIHcgPSB0aGlzLndpZHRoICsgc3Ryb2tlV2lkdGgsXG4gICAgICAgICAgaCA9IHRoaXMuaGVpZ2h0ICsgc3Ryb2tlV2lkdGg7XG4gICAgICByZXR1cm4geyB4OiB3LCB5OiBoIH07XG4gICAgfSxcblxuICAgIC8qXG4gICAgICogQ2FsY3VsYXRlIG9iamVjdCBib3VuZGluZyBib3ggZGltZW5zaW9ucyBmcm9tIGl0cyBwcm9wZXJ0aWVzIHNjYWxlLCBza2V3LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBza2V3WCwgYSB2YWx1ZSB0byBvdmVycmlkZSBjdXJyZW50IHNrZXdYXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNrZXdZLCBhIHZhbHVlIHRvIG92ZXJyaWRlIGN1cnJlbnQgc2tld1lcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gLnggd2lkdGggZGltZW5zaW9uXG4gICAgICogQHJldHVybiB7T2JqZWN0fSAueSBoZWlnaHQgZGltZW5zaW9uXG4gICAgICovXG4gICAgX2dldFRyYW5zZm9ybWVkRGltZW5zaW9uczogZnVuY3Rpb24oc2tld1gsIHNrZXdZKSB7XG4gICAgICBpZiAodHlwZW9mIHNrZXdYID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBza2V3WCA9IHRoaXMuc2tld1g7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHNrZXdZID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBza2V3WSA9IHRoaXMuc2tld1k7XG4gICAgICB9XG4gICAgICB2YXIgZGltZW5zaW9ucywgZGltWCwgZGltWSxcbiAgICAgICAgICBub1NrZXcgPSBza2V3WCA9PT0gMCAmJiBza2V3WSA9PT0gMDtcblxuICAgICAgaWYgKHRoaXMuc3Ryb2tlVW5pZm9ybSkge1xuICAgICAgICBkaW1YID0gdGhpcy53aWR0aDtcbiAgICAgICAgZGltWSA9IHRoaXMuaGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRpbWVuc2lvbnMgPSB0aGlzLl9nZXROb25UcmFuc2Zvcm1lZERpbWVuc2lvbnMoKTtcbiAgICAgICAgZGltWCA9IGRpbWVuc2lvbnMueDtcbiAgICAgICAgZGltWSA9IGRpbWVuc2lvbnMueTtcbiAgICAgIH1cbiAgICAgIGlmIChub1NrZXcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmFsaXplRGltZW5zaW9ucyhkaW1YICogdGhpcy5zY2FsZVgsIGRpbVkgKiB0aGlzLnNjYWxlWSk7XG4gICAgICB9XG4gICAgICB2YXIgYmJveCA9IHV0aWwuc2l6ZUFmdGVyVHJhbnNmb3JtKGRpbVgsIGRpbVksIHtcbiAgICAgICAgc2NhbGVYOiB0aGlzLnNjYWxlWCxcbiAgICAgICAgc2NhbGVZOiB0aGlzLnNjYWxlWSxcbiAgICAgICAgc2tld1g6IHNrZXdYLFxuICAgICAgICBza2V3WTogc2tld1ksXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLl9maW5hbGl6ZURpbWVuc2lvbnMoYmJveC54LCBiYm94LnkpO1xuICAgIH0sXG5cbiAgICAvKlxuICAgICAqIENhbGN1bGF0ZSBvYmplY3QgYm91bmRpbmcgYm94IGRpbWVuc2lvbnMgZnJvbSBpdHMgcHJvcGVydGllcyBzY2FsZSwgc2tldy5cbiAgICAgKiBAcGFyYW0gTnVtYmVyIHdpZHRoIHdpZHRoIG9mIHRoZSBiYm94XG4gICAgICogQHBhcmFtIE51bWJlciBoZWlnaHQgaGVpZ2h0IG9mIHRoZSBiYm94XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IC54IGZpbmFsaXplZCB3aWR0aCBkaW1lbnNpb25cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IC55IGZpbmFsaXplZCBoZWlnaHQgZGltZW5zaW9uXG4gICAgICovXG4gICAgX2ZpbmFsaXplRGltZW5zaW9uczogZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Ryb2tlVW5pZm9ybSA/XG4gICAgICAgIHsgeDogd2lkdGggKyB0aGlzLnN0cm9rZVdpZHRoLCB5OiBoZWlnaHQgKyB0aGlzLnN0cm9rZVdpZHRoIH1cbiAgICAgICAgOlxuICAgICAgICB7IHg6IHdpZHRoLCB5OiBoZWlnaHQgfTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBDYWxjdWxhdGUgb2JqZWN0IGRpbWVuc2lvbnMgZm9yIGNvbnRyb2xzIGJveCwgaW5jbHVkaW5nIHBhZGRpbmcgYW5kIGNhbnZhcyB6b29tLlxuICAgICAqIGFuZCBhY3RpdmUgc2VsZWN0aW9uXG4gICAgICogcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jYWxjdWxhdGVDdXJyZW50RGltZW5zaW9uczogZnVuY3Rpb24oKSAge1xuICAgICAgdmFyIHZwdCA9IHRoaXMuZ2V0Vmlld3BvcnRUcmFuc2Zvcm0oKSxcbiAgICAgICAgICBkaW0gPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZERpbWVuc2lvbnMoKSxcbiAgICAgICAgICBwID0gdHJhbnNmb3JtUG9pbnQoZGltLCB2cHQsIHRydWUpO1xuICAgICAgcmV0dXJuIHAuc2NhbGFyQWRkKDIgKiB0aGlzLnBhZGRpbmcpO1xuICAgIH0sXG4gIH0pO1xufSkoKTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5PYmplY3QucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogTW92ZXMgYW4gb2JqZWN0IHRvIHRoZSBib3R0b20gb2YgdGhlIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgKiBAY2hhaW5hYmxlXG4gICAqL1xuICBzZW5kVG9CYWNrOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5ncm91cCkge1xuICAgICAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUuc2VuZFRvQmFjay5jYWxsKHRoaXMuZ3JvdXAsIHRoaXMpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXMuc2VuZFRvQmFjayh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGFuIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzdGFjayBvZiBkcmF3biBvYmplY3RzXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgYnJpbmdUb0Zyb250OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5ncm91cCkge1xuICAgICAgZmFicmljLlN0YXRpY0NhbnZhcy5wcm90b3R5cGUuYnJpbmdUb0Zyb250LmNhbGwodGhpcy5ncm91cCwgdGhpcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcy5icmluZ1RvRnJvbnQodGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBhbiBvYmplY3QgZG93biBpbiBzdGFjayBvZiBkcmF3biBvYmplY3RzXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2ludGVyc2VjdGluZ10gSWYgYHRydWVgLCBzZW5kIG9iamVjdCBiZWhpbmQgbmV4dCBsb3dlciBpbnRlcnNlY3Rpbmcgb2JqZWN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgc2VuZEJhY2t3YXJkczogZnVuY3Rpb24oaW50ZXJzZWN0aW5nKSB7XG4gICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLnNlbmRCYWNrd2FyZHMuY2FsbCh0aGlzLmdyb3VwLCB0aGlzLCBpbnRlcnNlY3RpbmcpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXMuc2VuZEJhY2t3YXJkcyh0aGlzLCBpbnRlcnNlY3RpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogTW92ZXMgYW4gb2JqZWN0IHVwIGluIHN0YWNrIG9mIGRyYXduIG9iamVjdHNcbiAgICogQHBhcmFtIHtCb29sZWFufSBbaW50ZXJzZWN0aW5nXSBJZiBgdHJ1ZWAsIHNlbmQgb2JqZWN0IGluIGZyb250IG9mIG5leHQgdXBwZXIgaW50ZXJzZWN0aW5nIG9iamVjdFxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIGJyaW5nRm9yd2FyZDogZnVuY3Rpb24oaW50ZXJzZWN0aW5nKSB7XG4gICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLmJyaW5nRm9yd2FyZC5jYWxsKHRoaXMuZ3JvdXAsIHRoaXMsIGludGVyc2VjdGluZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcy5icmluZ0ZvcndhcmQodGhpcywgaW50ZXJzZWN0aW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGFuIG9iamVjdCB0byBzcGVjaWZpZWQgbGV2ZWwgaW4gc3RhY2sgb2YgZHJhd24gb2JqZWN0c1xuICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggTmV3IHBvc2l0aW9uIG9mIG9iamVjdFxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqIEBjaGFpbmFibGVcbiAgICovXG4gIG1vdmVUbzogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICBpZiAodGhpcy5ncm91cCAmJiB0aGlzLmdyb3VwLnR5cGUgIT09ICdhY3RpdmVTZWxlY3Rpb24nKSB7XG4gICAgICBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZS5tb3ZlVG8uY2FsbCh0aGlzLmdyb3VwLCB0aGlzLCBpbmRleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhcy5tb3ZlVG8odGhpcywgaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufSk7XG5cblxuLyogX1RPX1NWR19TVEFSVF8gKi9cbihmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gZ2V0U3ZnQ29sb3JTdHJpbmcocHJvcCwgdmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICByZXR1cm4gcHJvcCArICc6IG5vbmU7ICc7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlLnRvTGl2ZSkge1xuICAgICAgcmV0dXJuIHByb3AgKyAnOiB1cmwoI1NWR0lEXycgKyB2YWx1ZS5pZCArICcpOyAnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBjb2xvciA9IG5ldyBmYWJyaWMuQ29sb3IodmFsdWUpLFxuICAgICAgICAgIHN0ciA9IHByb3AgKyAnOiAnICsgY29sb3IudG9SZ2IoKSArICc7ICcsXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yLmdldEFscGhhKCk7XG4gICAgICBpZiAob3BhY2l0eSAhPT0gMSkge1xuICAgICAgICAvL2NoYW5nZSB0aGUgY29sb3IgaW4gcmdiICsgb3BhY2l0eVxuICAgICAgICBzdHIgKz0gcHJvcCArICctb3BhY2l0eTogJyArIG9wYWNpdHkudG9TdHJpbmcoKSArICc7ICc7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZDtcblxuICBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5PYmplY3QucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5PYmplY3QucHJvdG90eXBlICovIHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0eWxlcy1zdHJpbmcgZm9yIHN2Zy1leHBvcnRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNraXBTaGFkb3cgYSBib29sZWFuIHRvIHNraXAgc2hhZG93IGZpbHRlciBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0U3ZnU3R5bGVzOiBmdW5jdGlvbihza2lwU2hhZG93KSB7XG5cbiAgICAgIHZhciBmaWxsUnVsZSA9IHRoaXMuZmlsbFJ1bGUgPyB0aGlzLmZpbGxSdWxlIDogJ25vbnplcm8nLFxuICAgICAgICAgIHN0cm9rZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aCA/IHRoaXMuc3Ryb2tlV2lkdGggOiAnMCcsXG4gICAgICAgICAgc3Ryb2tlRGFzaEFycmF5ID0gdGhpcy5zdHJva2VEYXNoQXJyYXkgPyB0aGlzLnN0cm9rZURhc2hBcnJheS5qb2luKCcgJykgOiAnbm9uZScsXG4gICAgICAgICAgc3Ryb2tlRGFzaE9mZnNldCA9IHRoaXMuc3Ryb2tlRGFzaE9mZnNldCA/IHRoaXMuc3Ryb2tlRGFzaE9mZnNldCA6ICcwJyxcbiAgICAgICAgICBzdHJva2VMaW5lQ2FwID0gdGhpcy5zdHJva2VMaW5lQ2FwID8gdGhpcy5zdHJva2VMaW5lQ2FwIDogJ2J1dHQnLFxuICAgICAgICAgIHN0cm9rZUxpbmVKb2luID0gdGhpcy5zdHJva2VMaW5lSm9pbiA/IHRoaXMuc3Ryb2tlTGluZUpvaW4gOiAnbWl0ZXInLFxuICAgICAgICAgIHN0cm9rZU1pdGVyTGltaXQgPSB0aGlzLnN0cm9rZU1pdGVyTGltaXQgPyB0aGlzLnN0cm9rZU1pdGVyTGltaXQgOiAnNCcsXG4gICAgICAgICAgb3BhY2l0eSA9IHR5cGVvZiB0aGlzLm9wYWNpdHkgIT09ICd1bmRlZmluZWQnID8gdGhpcy5vcGFjaXR5IDogJzEnLFxuICAgICAgICAgIHZpc2liaWxpdHkgPSB0aGlzLnZpc2libGUgPyAnJyA6ICcgdmlzaWJpbGl0eTogaGlkZGVuOycsXG4gICAgICAgICAgZmlsdGVyID0gc2tpcFNoYWRvdyA/ICcnIDogdGhpcy5nZXRTdmdGaWx0ZXIoKSxcbiAgICAgICAgICBmaWxsID0gZ2V0U3ZnQ29sb3JTdHJpbmcoJ2ZpbGwnLCB0aGlzLmZpbGwpLFxuICAgICAgICAgIHN0cm9rZSA9IGdldFN2Z0NvbG9yU3RyaW5nKCdzdHJva2UnLCB0aGlzLnN0cm9rZSk7XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIHN0cm9rZSxcbiAgICAgICAgJ3N0cm9rZS13aWR0aDogJywgc3Ryb2tlV2lkdGgsICc7ICcsXG4gICAgICAgICdzdHJva2UtZGFzaGFycmF5OiAnLCBzdHJva2VEYXNoQXJyYXksICc7ICcsXG4gICAgICAgICdzdHJva2UtbGluZWNhcDogJywgc3Ryb2tlTGluZUNhcCwgJzsgJyxcbiAgICAgICAgJ3N0cm9rZS1kYXNob2Zmc2V0OiAnLCBzdHJva2VEYXNoT2Zmc2V0LCAnOyAnLFxuICAgICAgICAnc3Ryb2tlLWxpbmVqb2luOiAnLCBzdHJva2VMaW5lSm9pbiwgJzsgJyxcbiAgICAgICAgJ3N0cm9rZS1taXRlcmxpbWl0OiAnLCBzdHJva2VNaXRlckxpbWl0LCAnOyAnLFxuICAgICAgICBmaWxsLFxuICAgICAgICAnZmlsbC1ydWxlOiAnLCBmaWxsUnVsZSwgJzsgJyxcbiAgICAgICAgJ29wYWNpdHk6ICcsIG9wYWNpdHksICc7JyxcbiAgICAgICAgZmlsdGVyLFxuICAgICAgICB2aXNpYmlsaXR5XG4gICAgICBdLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0eWxlcy1zdHJpbmcgZm9yIHN2Zy1leHBvcnRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGUgdGhlIG9iamVjdCBmcm9tIHdoaWNoIHRvIHJldHJpZXZlIHN0eWxlIHByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHVzZVdoaXRlU3BhY2UgYSBib29sZWFuIHRvIGluY2x1ZGUgYW4gYWRkaXRpb25hbCBhdHRyaWJ1dGUgaW4gdGhlIHN0eWxlLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTdmdTcGFuU3R5bGVzOiBmdW5jdGlvbihzdHlsZSwgdXNlV2hpdGVTcGFjZSkge1xuICAgICAgdmFyIHRlcm0gPSAnOyAnO1xuICAgICAgdmFyIGZvbnRGYW1pbHkgPSBzdHlsZS5mb250RmFtaWx5ID9cbiAgICAgICAgJ2ZvbnQtZmFtaWx5OiAnICsgKCgoc3R5bGUuZm9udEZhbWlseS5pbmRleE9mKCdcXCcnKSA9PT0gLTEgJiYgc3R5bGUuZm9udEZhbWlseS5pbmRleE9mKCdcIicpID09PSAtMSkgP1xuICAgICAgICAgICdcXCcnICsgc3R5bGUuZm9udEZhbWlseSAgKyAnXFwnJyA6IHN0eWxlLmZvbnRGYW1pbHkpKSArIHRlcm0gOiAnJztcbiAgICAgIHZhciBzdHJva2VXaWR0aCA9IHN0eWxlLnN0cm9rZVdpZHRoID8gJ3N0cm9rZS13aWR0aDogJyArIHN0eWxlLnN0cm9rZVdpZHRoICsgdGVybSA6ICcnLFxuICAgICAgICAgIGZvbnRGYW1pbHkgPSBmb250RmFtaWx5LFxuICAgICAgICAgIGZvbnRTaXplID0gc3R5bGUuZm9udFNpemUgPyAnZm9udC1zaXplOiAnICsgc3R5bGUuZm9udFNpemUgKyAncHgnICsgdGVybSA6ICcnLFxuICAgICAgICAgIGZvbnRTdHlsZSA9IHN0eWxlLmZvbnRTdHlsZSA/ICdmb250LXN0eWxlOiAnICsgc3R5bGUuZm9udFN0eWxlICsgdGVybSA6ICcnLFxuICAgICAgICAgIGZvbnRXZWlnaHQgPSBzdHlsZS5mb250V2VpZ2h0ID8gJ2ZvbnQtd2VpZ2h0OiAnICsgc3R5bGUuZm9udFdlaWdodCArIHRlcm0gOiAnJyxcbiAgICAgICAgICBmaWxsID0gc3R5bGUuZmlsbCA/IGdldFN2Z0NvbG9yU3RyaW5nKCdmaWxsJywgc3R5bGUuZmlsbCkgOiAnJyxcbiAgICAgICAgICBzdHJva2UgPSBzdHlsZS5zdHJva2UgPyBnZXRTdmdDb2xvclN0cmluZygnc3Ryb2tlJywgc3R5bGUuc3Ryb2tlKSA6ICcnLFxuICAgICAgICAgIHRleHREZWNvcmF0aW9uID0gdGhpcy5nZXRTdmdUZXh0RGVjb3JhdGlvbihzdHlsZSksXG4gICAgICAgICAgZGVsdGFZID0gc3R5bGUuZGVsdGFZID8gJ2Jhc2VsaW5lLXNoaWZ0OiAnICsgKC1zdHlsZS5kZWx0YVkpICsgJzsgJyA6ICcnO1xuICAgICAgaWYgKHRleHREZWNvcmF0aW9uKSB7XG4gICAgICAgIHRleHREZWNvcmF0aW9uID0gJ3RleHQtZGVjb3JhdGlvbjogJyArIHRleHREZWNvcmF0aW9uICsgdGVybTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgc3Ryb2tlLFxuICAgICAgICBzdHJva2VXaWR0aCxcbiAgICAgICAgZm9udEZhbWlseSxcbiAgICAgICAgZm9udFNpemUsXG4gICAgICAgIGZvbnRTdHlsZSxcbiAgICAgICAgZm9udFdlaWdodCxcbiAgICAgICAgdGV4dERlY29yYXRpb24sXG4gICAgICAgIGZpbGwsXG4gICAgICAgIGRlbHRhWSxcbiAgICAgICAgdXNlV2hpdGVTcGFjZSA/ICd3aGl0ZS1zcGFjZTogcHJlOyAnIDogJydcbiAgICAgIF0uam9pbignJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGV4dC1kZWNvcmF0aW9uIHByb3BlcnR5IGZvciBzdmctZXhwb3J0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlIHRoZSBvYmplY3QgZnJvbSB3aGljaCB0byByZXRyaWV2ZSBzdHlsZSBwcm9wZXJ0aWVzXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldFN2Z1RleHREZWNvcmF0aW9uOiBmdW5jdGlvbihzdHlsZSkge1xuICAgICAgcmV0dXJuIFsnb3ZlcmxpbmUnLCAndW5kZXJsaW5lJywgJ2xpbmUtdGhyb3VnaCddLmZpbHRlcihmdW5jdGlvbihkZWNvcmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBzdHlsZVtkZWNvcmF0aW9uLnJlcGxhY2UoJy0nLCAnJyldO1xuICAgICAgfSkuam9pbignICcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGZpbHRlciBmb3Igc3ZnIHNoYWRvd1xuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTdmdGaWx0ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hhZG93ID8gJ2ZpbHRlcjogdXJsKCNTVkdJRF8nICsgdGhpcy5zaGFkb3cuaWQgKyAnKTsnIDogJyc7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaWQgYXR0cmlidXRlIGZvciBzdmcgb3V0cHV0XG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldFN2Z0NvbW1vbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdGhpcy5pZCA/ICdpZD1cIicgKyB0aGlzLmlkICsgJ1wiICcgOiAnJyxcbiAgICAgICAgdGhpcy5jbGlwUGF0aCA/ICdjbGlwLXBhdGg9XCJ1cmwoIycgKyB0aGlzLmNsaXBQYXRoLmNsaXBQYXRoSWQgKyAnKVwiICcgOiAnJyxcbiAgICAgIF0uam9pbignJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJhbnNmb3JtLXN0cmluZyBmb3Igc3ZnLWV4cG9ydFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gdXNlIHRoZSBmdWxsIHRyYW5zZm9ybSBvciB0aGUgc2luZ2xlIG9iamVjdCBvbmUuXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIGdldFN2Z1RyYW5zZm9ybTogZnVuY3Rpb24oZnVsbCwgYWRkaXRpb25hbFRyYW5zZm9ybSkge1xuICAgICAgdmFyIHRyYW5zZm9ybSA9IGZ1bGwgPyB0aGlzLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKSA6IHRoaXMuY2FsY093bk1hdHJpeCgpLFxuICAgICAgICAgIHN2Z1RyYW5zZm9ybSA9ICd0cmFuc2Zvcm09XCInICsgZmFicmljLnV0aWwubWF0cml4VG9TVkcodHJhbnNmb3JtKTtcbiAgICAgIHJldHVybiBzdmdUcmFuc2Zvcm0gK1xuICAgICAgICAoYWRkaXRpb25hbFRyYW5zZm9ybSB8fCAnJykgKyAnXCIgJztcbiAgICB9LFxuXG4gICAgX3NldFNWR0JnOiBmdW5jdGlvbih0ZXh0QmdSZWN0cykge1xuICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgIHZhciBOVU1fRlJBQ1RJT05fRElHSVRTID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTO1xuICAgICAgICB0ZXh0QmdSZWN0cy5wdXNoKFxuICAgICAgICAgICdcXHRcXHQ8cmVjdCAnLFxuICAgICAgICAgIHRoaXMuX2dldEZpbGxBdHRyaWJ1dGVzKHRoaXMuYmFja2dyb3VuZENvbG9yKSxcbiAgICAgICAgICAnIHg9XCInLFxuICAgICAgICAgIHRvRml4ZWQoLXRoaXMud2lkdGggLyAyLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAnXCIgeT1cIicsXG4gICAgICAgICAgdG9GaXhlZCgtdGhpcy5oZWlnaHQgLyAyLCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgICAnXCIgd2lkdGg9XCInLFxuICAgICAgICAgIHRvRml4ZWQodGhpcy53aWR0aCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgJ1wiIGhlaWdodD1cIicsXG4gICAgICAgICAgdG9GaXhlZCh0aGlzLmhlaWdodCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICAgJ1wiPjwvcmVjdD5cXG4nKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygc3ZnIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVCYXNlU1ZHTWFya3VwKHRoaXMuX3RvU1ZHKHJldml2ZXIpLCB7IHJldml2ZXI6IHJldml2ZXIgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIGNsaXBQYXRoIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIHN2ZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvQ2xpcFBhdGhTVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHJldHVybiAnXFx0JyArIHRoaXMuX2NyZWF0ZUJhc2VDbGlwUGF0aFNWR01hcmt1cCh0aGlzLl90b1NWRyhyZXZpdmVyKSwgeyByZXZpdmVyOiByZXZpdmVyIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVCYXNlQ2xpcFBhdGhTVkdNYXJrdXA6IGZ1bmN0aW9uKG9iamVjdE1hcmt1cCwgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgcmV2aXZlciA9IG9wdGlvbnMucmV2aXZlcixcbiAgICAgICAgICBhZGRpdGlvbmFsVHJhbnNmb3JtID0gb3B0aW9ucy5hZGRpdGlvbmFsVHJhbnNmb3JtIHx8ICcnLFxuICAgICAgICAgIGNvbW1vblBpZWNlcyA9IFtcbiAgICAgICAgICAgIHRoaXMuZ2V0U3ZnVHJhbnNmb3JtKHRydWUsIGFkZGl0aW9uYWxUcmFuc2Zvcm0pLFxuICAgICAgICAgICAgdGhpcy5nZXRTdmdDb21tb25zKCksXG4gICAgICAgICAgXS5qb2luKCcnKSxcbiAgICAgICAgICAvLyBpbnNlcnQgY29tbW9ucyBpbiB0aGUgbWFya3VwLCBzdHlsZSBhbmQgc3ZnQ29tbW9uc1xuICAgICAgICAgIGluZGV4ID0gb2JqZWN0TWFya3VwLmluZGV4T2YoJ0NPTU1PTl9QQVJUUycpO1xuICAgICAgb2JqZWN0TWFya3VwW2luZGV4XSA9IGNvbW1vblBpZWNlcztcbiAgICAgIHJldHVybiByZXZpdmVyID8gcmV2aXZlcihvYmplY3RNYXJrdXAuam9pbignJykpIDogb2JqZWN0TWFya3VwLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jcmVhdGVCYXNlU1ZHTWFya3VwOiBmdW5jdGlvbihvYmplY3RNYXJrdXAsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIG5vU3R5bGUgPSBvcHRpb25zLm5vU3R5bGUsXG4gICAgICAgICAgcmV2aXZlciA9IG9wdGlvbnMucmV2aXZlcixcbiAgICAgICAgICBzdHlsZUluZm8gPSBub1N0eWxlID8gJycgOiAnc3R5bGU9XCInICsgdGhpcy5nZXRTdmdTdHlsZXMoKSArICdcIiAnLFxuICAgICAgICAgIHNoYWRvd0luZm8gPSBvcHRpb25zLndpdGhTaGFkb3cgPyAnc3R5bGU9XCInICsgdGhpcy5nZXRTdmdGaWx0ZXIoKSArICdcIiAnIDogJycsXG4gICAgICAgICAgY2xpcFBhdGggPSB0aGlzLmNsaXBQYXRoLFxuICAgICAgICAgIHZlY3RvckVmZmVjdCA9IHRoaXMuc3Ryb2tlVW5pZm9ybSA/ICd2ZWN0b3ItZWZmZWN0PVwibm9uLXNjYWxpbmctc3Ryb2tlXCIgJyA6ICcnLFxuICAgICAgICAgIGFic29sdXRlQ2xpcFBhdGggPSBjbGlwUGF0aCAmJiBjbGlwUGF0aC5hYnNvbHV0ZVBvc2l0aW9uZWQsXG4gICAgICAgICAgc3Ryb2tlID0gdGhpcy5zdHJva2UsIGZpbGwgPSB0aGlzLmZpbGwsIHNoYWRvdyA9IHRoaXMuc2hhZG93LFxuICAgICAgICAgIGNvbW1vblBpZWNlcywgbWFya3VwID0gW10sIGNsaXBQYXRoTWFya3VwLFxuICAgICAgICAgIC8vIGluc2VydCBjb21tb25zIGluIHRoZSBtYXJrdXAsIHN0eWxlIGFuZCBzdmdDb21tb25zXG4gICAgICAgICAgaW5kZXggPSBvYmplY3RNYXJrdXAuaW5kZXhPZignQ09NTU9OX1BBUlRTJyksXG4gICAgICAgICAgYWRkaXRpb25hbFRyYW5zZm9ybSA9IG9wdGlvbnMuYWRkaXRpb25hbFRyYW5zZm9ybTtcbiAgICAgIGlmIChjbGlwUGF0aCkge1xuICAgICAgICBjbGlwUGF0aC5jbGlwUGF0aElkID0gJ0NMSVBQQVRIXycgKyBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgICAgIGNsaXBQYXRoTWFya3VwID0gJzxjbGlwUGF0aCBpZD1cIicgKyBjbGlwUGF0aC5jbGlwUGF0aElkICsgJ1wiID5cXG4nICtcbiAgICAgICAgICBjbGlwUGF0aC50b0NsaXBQYXRoU1ZHKHJldml2ZXIpICtcbiAgICAgICAgICAnPC9jbGlwUGF0aD5cXG4nO1xuICAgICAgfVxuICAgICAgaWYgKGFic29sdXRlQ2xpcFBhdGgpIHtcbiAgICAgICAgbWFya3VwLnB1c2goXG4gICAgICAgICAgJzxnICcsIHNoYWRvd0luZm8sIHRoaXMuZ2V0U3ZnQ29tbW9ucygpLCAnID5cXG4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBtYXJrdXAucHVzaChcbiAgICAgICAgJzxnICcsXG4gICAgICAgIHRoaXMuZ2V0U3ZnVHJhbnNmb3JtKGZhbHNlKSxcbiAgICAgICAgIWFic29sdXRlQ2xpcFBhdGggPyBzaGFkb3dJbmZvICsgdGhpcy5nZXRTdmdDb21tb25zKCkgOiAnJyxcbiAgICAgICAgJyA+XFxuJ1xuICAgICAgKTtcbiAgICAgIGNvbW1vblBpZWNlcyA9IFtcbiAgICAgICAgc3R5bGVJbmZvLFxuICAgICAgICB2ZWN0b3JFZmZlY3QsXG4gICAgICAgIG5vU3R5bGUgPyAnJyA6IHRoaXMuYWRkUGFpbnRPcmRlcigpLCAnICcsXG4gICAgICAgIGFkZGl0aW9uYWxUcmFuc2Zvcm0gPyAndHJhbnNmb3JtPVwiJyArIGFkZGl0aW9uYWxUcmFuc2Zvcm0gKyAnXCIgJyA6ICcnLFxuICAgICAgXS5qb2luKCcnKTtcbiAgICAgIG9iamVjdE1hcmt1cFtpbmRleF0gPSBjb21tb25QaWVjZXM7XG4gICAgICBpZiAoZmlsbCAmJiBmaWxsLnRvTGl2ZSkge1xuICAgICAgICBtYXJrdXAucHVzaChmaWxsLnRvU1ZHKHRoaXMpKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJva2UgJiYgc3Ryb2tlLnRvTGl2ZSkge1xuICAgICAgICBtYXJrdXAucHVzaChzdHJva2UudG9TVkcodGhpcykpO1xuICAgICAgfVxuICAgICAgaWYgKHNoYWRvdykge1xuICAgICAgICBtYXJrdXAucHVzaChzaGFkb3cudG9TVkcodGhpcykpO1xuICAgICAgfVxuICAgICAgaWYgKGNsaXBQYXRoKSB7XG4gICAgICAgIG1hcmt1cC5wdXNoKGNsaXBQYXRoTWFya3VwKTtcbiAgICAgIH1cbiAgICAgIG1hcmt1cC5wdXNoKG9iamVjdE1hcmt1cC5qb2luKCcnKSk7XG4gICAgICBtYXJrdXAucHVzaCgnPC9nPlxcbicpO1xuICAgICAgYWJzb2x1dGVDbGlwUGF0aCAmJiBtYXJrdXAucHVzaCgnPC9nPlxcbicpO1xuICAgICAgcmV0dXJuIHJldml2ZXIgPyByZXZpdmVyKG1hcmt1cC5qb2luKCcnKSkgOiBtYXJrdXAuam9pbignJyk7XG4gICAgfSxcblxuICAgIGFkZFBhaW50T3JkZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFpbnRGaXJzdCAhPT0gJ2ZpbGwnID8gJyBwYWludC1vcmRlcj1cIicgKyB0aGlzLnBhaW50Rmlyc3QgKyAnXCIgJyA6ICcnO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuLyogX1RPX1NWR19FTkRfICovXG5cblxuKGZ1bmN0aW9uKCkge1xuXG4gIHZhciBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgb3JpZ2luYWxTZXQgPSAnc3RhdGVQcm9wZXJ0aWVzJztcblxuICAvKlxuICAgIERlcGVuZHMgb24gYHN0YXRlUHJvcGVydGllc2BcbiAgKi9cbiAgZnVuY3Rpb24gc2F2ZVByb3BzKG9yaWdpbiwgZGVzdGluYXRpb24sIHByb3BzKSB7XG4gICAgdmFyIHRtcE9iaiA9IHsgfSwgZGVlcCA9IHRydWU7XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgICB0bXBPYmpbcHJvcF0gPSBvcmlnaW5bcHJvcF07XG4gICAgfSk7XG5cbiAgICBleHRlbmQob3JpZ2luW2Rlc3RpbmF0aW9uXSwgdG1wT2JqLCBkZWVwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pc0VxdWFsKG9yaWdWYWx1ZSwgY3VycmVudFZhbHVlLCBmaXJzdFBhc3MpIHtcbiAgICBpZiAob3JpZ1ZhbHVlID09PSBjdXJyZW50VmFsdWUpIHtcbiAgICAgIC8vIGlmIHRoZSBvYmplY3RzIGFyZSBpZGVudGljYWwsIHJldHVyblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob3JpZ1ZhbHVlKSkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkgfHwgb3JpZ1ZhbHVlLmxlbmd0aCAhPT0gY3VycmVudFZhbHVlLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gb3JpZ1ZhbHVlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICghX2lzRXF1YWwob3JpZ1ZhbHVlW2ldLCBjdXJyZW50VmFsdWVbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3JpZ1ZhbHVlICYmIHR5cGVvZiBvcmlnVmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9yaWdWYWx1ZSksIGtleTtcbiAgICAgIGlmICghY3VycmVudFZhbHVlIHx8XG4gICAgICAgICAgdHlwZW9mIGN1cnJlbnRWYWx1ZSAhPT0gJ29iamVjdCcgfHxcbiAgICAgICAgICAoIWZpcnN0UGFzcyAmJiBrZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoY3VycmVudFZhbHVlKS5sZW5ndGgpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGtleXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgLy8gc2luY2UgY2xpcFBhdGggaXMgaW4gdGhlIHN0YXRlZnVsbCBjYWNoZSBsaXN0IGFuZCB0aGUgY2xpcFBhdGggb2JqZWN0c1xuICAgICAgICAvLyB3b3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBvYmplY3QsIHRoaXMgd291bGQgbGVhZCB0byBwb3NzaWJsZSBpbmZpbml0ZSByZWN1cnNpb25cbiAgICAgICAgLy8gd2UgZG8gbm90IHdhbnQgdG8gY29tcGFyZSB0aG9zZS5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2NhbnZhcycgfHwga2V5ID09PSAnZ3JvdXAnKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfaXNFcXVhbChvcmlnVmFsdWVba2V5XSwgY3VycmVudFZhbHVlW2tleV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBzdGF0ZSAob25lIG9mIGl0cyBzdGF0ZSBwcm9wZXJ0aWVzKSB3YXMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBbcHJvcGVydHlTZXRdIG9wdGlvbmFsIG5hbWUgZm9yIHRoZSBzZXQgb2YgcHJvcGVydHkgd2Ugd2FudCB0byBzYXZlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiBpbnN0YW5jZScgc3RhdGUgaGFzIGNoYW5nZWQgc2luY2UgYHtAbGluayBmYWJyaWMuT2JqZWN0I3NhdmVTdGF0ZX1gIHdhcyBjYWxsZWRcbiAgICAgKi9cbiAgICBoYXNTdGF0ZUNoYW5nZWQ6IGZ1bmN0aW9uKHByb3BlcnR5U2V0KSB7XG4gICAgICBwcm9wZXJ0eVNldCA9IHByb3BlcnR5U2V0IHx8IG9yaWdpbmFsU2V0O1xuICAgICAgdmFyIGRhc2hlZFByb3BlcnR5U2V0ID0gJ18nICsgcHJvcGVydHlTZXQ7XG4gICAgICBpZiAoT2JqZWN0LmtleXModGhpc1tkYXNoZWRQcm9wZXJ0eVNldF0pLmxlbmd0aCA8IHRoaXNbcHJvcGVydHlTZXRdLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAhX2lzRXF1YWwodGhpc1tkYXNoZWRQcm9wZXJ0eVNldF0sIHRoaXMsIHRydWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTYXZlcyBzdGF0ZSBvZiBhbiBvYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9iamVjdCB3aXRoIGFkZGl0aW9uYWwgYHN0YXRlUHJvcGVydGllc2AgYXJyYXkgdG8gaW5jbHVkZSB3aGVuIHNhdmluZyBzdGF0ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBzYXZlU3RhdGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBwcm9wZXJ0eVNldCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wcm9wZXJ0eVNldCB8fCBvcmlnaW5hbFNldCxcbiAgICAgICAgICBkZXN0aW5hdGlvbiA9ICdfJyArIHByb3BlcnR5U2V0O1xuICAgICAgaWYgKCF0aGlzW2Rlc3RpbmF0aW9uXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR1cFN0YXRlKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgc2F2ZVByb3BzKHRoaXMsIGRlc3RpbmF0aW9uLCB0aGlzW3Byb3BlcnR5U2V0XSk7XG4gICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnN0YXRlUHJvcGVydGllcykge1xuICAgICAgICBzYXZlUHJvcHModGhpcywgZGVzdGluYXRpb24sIG9wdGlvbnMuc3RhdGVQcm9wZXJ0aWVzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXR1cHMgc3RhdGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGBzdGF0ZVByb3BlcnRpZXNgIGFycmF5IHRvIGluY2x1ZGUgd2hlbiBzYXZpbmcgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICovXG4gICAgc2V0dXBTdGF0ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgeyB9O1xuICAgICAgdmFyIHByb3BlcnR5U2V0ID0gb3B0aW9ucy5wcm9wZXJ0eVNldCB8fCBvcmlnaW5hbFNldDtcbiAgICAgIG9wdGlvbnMucHJvcGVydHlTZXQgPSBwcm9wZXJ0eVNldDtcbiAgICAgIHRoaXNbJ18nICsgcHJvcGVydHlTZXRdID0geyB9O1xuICAgICAgdGhpcy5zYXZlU3RhdGUob3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGRlZ3JlZXNUb1JhZGlhbnMgPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zO1xuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hpY2ggY29ybmVyIGhhcyBiZWVuIGNsaWNrZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludGVyIFRoZSBwb2ludGVyIGluZGljYXRpbmcgdGhlIG1vdXNlIHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59IGNvcm5lciBjb2RlICh0bCwgdHIsIGJsLCBiciwgZXRjLiksIG9yIGZhbHNlIGlmIG5vdGhpbmcgaXMgZm91bmRcbiAgICAgKi9cbiAgICBfZmluZFRhcmdldENvcm5lcjogZnVuY3Rpb24ocG9pbnRlciwgZm9yVG91Y2gpIHtcbiAgICAgIC8vIG9iamVjdHMgaW4gZ3JvdXAsIGFueWtpbmQsIGFyZSBub3Qgc2VsZiBtb2RpZmljYWJsZSxcbiAgICAgIC8vIG11c3Qgbm90IHJldHVybiBhbiBob3ZlcmVkIGNvcm5lci5cbiAgICAgIGlmICghdGhpcy5oYXNDb250cm9scyB8fCB0aGlzLmdyb3VwIHx8ICghdGhpcy5jYW52YXMgfHwgdGhpcy5jYW52YXMuX2FjdGl2ZU9iamVjdCAhPT0gdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZXggPSBwb2ludGVyLngsXG4gICAgICAgICAgZXkgPSBwb2ludGVyLnksXG4gICAgICAgICAgeFBvaW50cyxcbiAgICAgICAgICBsaW5lcywga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMub0Nvb3JkcyksXG4gICAgICAgICAgaiA9IGtleXMubGVuZ3RoIC0gMSwgaTtcbiAgICAgIHRoaXMuX19jb3JuZXIgPSAwO1xuXG4gICAgICAvLyBjeWNsZSBpbiByZXZlcnNlIG9yZGVyIHNvIHdlIHBpY2sgZmlyc3QgdGhlIG9uZSBvbiB0b3BcbiAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICBpID0ga2V5c1tqXTtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29udHJvbFZpc2libGUoaSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpbmVzID0gdGhpcy5fZ2V0SW1hZ2VMaW5lcyhmb3JUb3VjaCA/IHRoaXMub0Nvb3Jkc1tpXS50b3VjaENvcm5lciA6IHRoaXMub0Nvb3Jkc1tpXS5jb3JuZXIpO1xuICAgICAgICAvLyAvLyBkZWJ1Z2dpbmdcbiAgICAgICAgLy9cbiAgICAgICAgLy8gdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy5ib3R0b21saW5lLmQueCwgbGluZXMuYm90dG9tbGluZS5kLnksIDIsIDIpO1xuICAgICAgICAvLyB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmJvdHRvbWxpbmUuby54LCBsaW5lcy5ib3R0b21saW5lLm8ueSwgMiwgMik7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMubGVmdGxpbmUuZC54LCBsaW5lcy5sZWZ0bGluZS5kLnksIDIsIDIpO1xuICAgICAgICAvLyB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLmxlZnRsaW5lLm8ueCwgbGluZXMubGVmdGxpbmUuby55LCAyLCAyKTtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gdGhpcy5jYW52YXMuY29udGV4dFRvcC5maWxsUmVjdChsaW5lcy50b3BsaW5lLmQueCwgbGluZXMudG9wbGluZS5kLnksIDIsIDIpO1xuICAgICAgICAvLyB0aGlzLmNhbnZhcy5jb250ZXh0VG9wLmZpbGxSZWN0KGxpbmVzLnRvcGxpbmUuby54LCBsaW5lcy50b3BsaW5lLm8ueSwgMiwgMik7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMucmlnaHRsaW5lLmQueCwgbGluZXMucmlnaHRsaW5lLmQueSwgMiwgMik7XG4gICAgICAgIC8vIHRoaXMuY2FudmFzLmNvbnRleHRUb3AuZmlsbFJlY3QobGluZXMucmlnaHRsaW5lLm8ueCwgbGluZXMucmlnaHRsaW5lLm8ueSwgMiwgMik7XG5cbiAgICAgICAgeFBvaW50cyA9IHRoaXMuX2ZpbmRDcm9zc1BvaW50cyh7IHg6IGV4LCB5OiBleSB9LCBsaW5lcyk7XG4gICAgICAgIGlmICh4UG9pbnRzICE9PSAwICYmIHhQb2ludHMgJSAyID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5fX2Nvcm5lciA9IGk7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsbHMgYSBmdW5jdGlvbiBmb3IgZWFjaCBjb250cm9sLiBUaGUgZnVuY3Rpb24gZ2V0cyBjYWxsZWQsXG4gICAgICogd2l0aCB0aGUgY29udHJvbCwgdGhlIG9iamVjdCB0aGF0IGlzIGNhbGxpbmcgdGhlIGl0ZXJhdG9yIGFuZCB0aGUgY29udHJvbCdzIGtleVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciB0aGUgY29udHJvbHMgb3ZlclxuICAgICAqL1xuICAgIGZvckVhY2hDb250cm9sOiBmdW5jdGlvbihmbikge1xuICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmNvbnRyb2xzKSB7XG4gICAgICAgIGZuKHRoaXMuY29udHJvbHNbaV0sIGksIHRoaXMpO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGRyYWdnYWJsZSBib3hlcyBpbiB0aGUgY29ybmVycyBvZlxuICAgICAqIHRoZSBpbWFnZSB1c2VkIHRvIHNjYWxlL3JvdGF0ZSBpdC5cbiAgICAgKiBub3RlOiBpZiB3ZSB3b3VsZCBzd2l0Y2ggdG8gUk9VTkQgY29ybmVyIGFyZWEsIGFsbCBvZiB0aGlzIHdvdWxkIGRpc2FwcGVhci5cbiAgICAgKiBldmVyeXRoaW5nIHdvdWxkIHJlc29sdmUgdG8gYSBzaW5nbGUgcG9pbnQgYW5kIGEgcHl0aGFnb3JlYW4gdGhlb3JlbSBmb3IgdGhlIGRpc3RhbmNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0Q29ybmVyQ29vcmRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBjb29yZHMgPSB0aGlzLm9Db29yZHM7XG5cbiAgICAgIGZvciAodmFyIGNvbnRyb2wgaW4gY29vcmRzKSB7XG4gICAgICAgIHZhciBjb250cm9sT2JqZWN0ID0gdGhpcy5jb250cm9sc1tjb250cm9sXTtcbiAgICAgICAgY29vcmRzW2NvbnRyb2xdLmNvcm5lciA9IGNvbnRyb2xPYmplY3QuY2FsY0Nvcm5lckNvb3JkcyhcbiAgICAgICAgICB0aGlzLmFuZ2xlLCB0aGlzLmNvcm5lclNpemUsIGNvb3Jkc1tjb250cm9sXS54LCBjb29yZHNbY29udHJvbF0ueSwgZmFsc2UpO1xuICAgICAgICBjb29yZHNbY29udHJvbF0udG91Y2hDb3JuZXIgPSBjb250cm9sT2JqZWN0LmNhbGNDb3JuZXJDb29yZHMoXG4gICAgICAgICAgdGhpcy5hbmdsZSwgdGhpcy50b3VjaENvcm5lclNpemUsIGNvb3Jkc1tjb250cm9sXS54LCBjb29yZHNbY29udHJvbF0ueSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGEgY29sb3JlZCBsYXllciBiZWhpbmQgdGhlIG9iamVjdCwgaW5zaWRlIGl0cyBzZWxlY3Rpb24gYm9yZGVycy5cbiAgICAgKiBSZXF1aXJlcyBwdWJsaWMgb3B0aW9uczogcGFkZGluZywgc2VsZWN0aW9uQmFja2dyb3VuZENvbG9yXG4gICAgICogdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB0aGUgY29udGV4dCBpcyB0cmFuc2Zvcm1lZFxuICAgICAqIGhhcyBjaGVja3MgdG8gYmUgc2tpcHBlZCB3aGVuIHRoZSBvYmplY3QgaXMgb24gYSBzdGF0aWNDYW52YXNcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gZHJhdyBvblxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZHJhd1NlbGVjdGlvbkJhY2tncm91bmQ6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbkJhY2tncm91bmRDb2xvciB8fFxuICAgICAgICAodGhpcy5jYW52YXMgJiYgIXRoaXMuY2FudmFzLmludGVyYWN0aXZlKSB8fFxuICAgICAgICAodGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMuX2FjdGl2ZU9iamVjdCAhPT0gdGhpcylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5nZXRDZW50ZXJQb2ludCgpLCB3aCA9IHRoaXMuX2NhbGN1bGF0ZUN1cnJlbnREaW1lbnNpb25zKCksXG4gICAgICAgICAgdnB0ID0gdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm07XG4gICAgICBjdHgudHJhbnNsYXRlKGNlbnRlci54LCBjZW50ZXIueSk7XG4gICAgICBjdHguc2NhbGUoMSAvIHZwdFswXSwgMSAvIHZwdFszXSk7XG4gICAgICBjdHgucm90YXRlKGRlZ3JlZXNUb1JhZGlhbnModGhpcy5hbmdsZSkpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuc2VsZWN0aW9uQmFja2dyb3VuZENvbG9yO1xuICAgICAgY3R4LmZpbGxSZWN0KC13aC54IC8gMiwgLXdoLnkgLyAyLCB3aC54LCB3aC55KTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRHJhd3MgYm9yZGVycyBvZiBhbiBvYmplY3QncyBib3VuZGluZyBib3guXG4gICAgICogUmVxdWlyZXMgcHVibGljIHByb3BlcnRpZXM6IHdpZHRoLCBoZWlnaHRcbiAgICAgKiBSZXF1aXJlcyBwdWJsaWMgb3B0aW9uczogcGFkZGluZywgYm9yZGVyQ29sb3JcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gZHJhdyBvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZU92ZXJyaWRlIG9iamVjdCB0byBvdmVycmlkZSB0aGUgb2JqZWN0IHN0eWxlXG4gICAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBkcmF3Qm9yZGVyczogZnVuY3Rpb24oY3R4LCBzdHlsZU92ZXJyaWRlKSB7XG4gICAgICBzdHlsZU92ZXJyaWRlID0gc3R5bGVPdmVycmlkZSB8fCB7fTtcbiAgICAgIHZhciB3aCA9IHRoaXMuX2NhbGN1bGF0ZUN1cnJlbnREaW1lbnNpb25zKCksXG4gICAgICAgICAgc3Ryb2tlV2lkdGggPSB0aGlzLmJvcmRlclNjYWxlRmFjdG9yLFxuICAgICAgICAgIHdpZHRoID0gd2gueCArIHN0cm9rZVdpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IHdoLnkgKyBzdHJva2VXaWR0aCxcbiAgICAgICAgICBoYXNDb250cm9scyA9IHR5cGVvZiBzdHlsZU92ZXJyaWRlLmhhc0NvbnRyb2xzICE9PSAndW5kZWZpbmVkJyA/XG4gICAgICAgICAgICBzdHlsZU92ZXJyaWRlLmhhc0NvbnRyb2xzIDogdGhpcy5oYXNDb250cm9scyxcbiAgICAgICAgICBzaG91bGRTdHJva2UgPSBmYWxzZTtcblxuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuYm9yZGVyQ29sb3IgfHwgdGhpcy5ib3JkZXJDb2xvcjtcbiAgICAgIHRoaXMuX3NldExpbmVEYXNoKGN0eCwgc3R5bGVPdmVycmlkZS5ib3JkZXJEYXNoQXJyYXkgfHwgdGhpcy5ib3JkZXJEYXNoQXJyYXkpO1xuXG4gICAgICBjdHguc3Ryb2tlUmVjdChcbiAgICAgICAgLXdpZHRoIC8gMixcbiAgICAgICAgLWhlaWdodCAvIDIsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgICk7XG5cbiAgICAgIGlmIChoYXNDb250cm9scykge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuZm9yRWFjaENvbnRyb2woZnVuY3Rpb24oY29udHJvbCwga2V5LCBmYWJyaWNPYmplY3QpIHtcbiAgICAgICAgICAvLyBpbiB0aGlzIG1vbWVudCwgdGhlIGN0eCBpcyBjZW50ZXJlZCBvbiB0aGUgb2JqZWN0LlxuICAgICAgICAgIC8vIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGFib3ZlIGZ1bmN0aW9uIGFyZSB0aGUgc2l6ZSBvZiB0aGUgYmJveC5cbiAgICAgICAgICBpZiAoY29udHJvbC53aXRoQ29ubmVjdGlvbiAmJiBjb250cm9sLmdldFZpc2liaWxpdHkoZmFicmljT2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgICAvLyByZXNldCBtb3ZlbWVudCBmb3IgZWFjaCBjb250cm9sXG4gICAgICAgICAgICBzaG91bGRTdHJva2UgPSB0cnVlO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhjb250cm9sLnggKiB3aWR0aCwgY29udHJvbC55ICogaGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oXG4gICAgICAgICAgICAgIGNvbnRyb2wueCAqIHdpZHRoICsgY29udHJvbC5vZmZzZXRYLFxuICAgICAgICAgICAgICBjb250cm9sLnkgKiBoZWlnaHQgKyBjb250cm9sLm9mZnNldFlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNob3VsZFN0cm9rZSkge1xuICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib3JkZXJzIG9mIGFuIG9iamVjdCdzIGJvdW5kaW5nIGJveCB3aGVuIGl0IGlzIGluc2lkZSBhIGdyb3VwLlxuICAgICAqIFJlcXVpcmVzIHB1YmxpYyBwcm9wZXJ0aWVzOiB3aWR0aCwgaGVpZ2h0XG4gICAgICogUmVxdWlyZXMgcHVibGljIG9wdGlvbnM6IHBhZGRpbmcsIGJvcmRlckNvbG9yXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIGRyYXcgb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyBvYmplY3QgcmVwcmVzZW50aW5nIGN1cnJlbnQgb2JqZWN0IHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVPdmVycmlkZSBvYmplY3QgdG8gb3ZlcnJpZGUgdGhlIG9iamVjdCBzdHlsZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZHJhd0JvcmRlcnNJbkdyb3VwOiBmdW5jdGlvbihjdHgsIG9wdGlvbnMsIHN0eWxlT3ZlcnJpZGUpIHtcbiAgICAgIHN0eWxlT3ZlcnJpZGUgPSBzdHlsZU92ZXJyaWRlIHx8IHt9O1xuICAgICAgdmFyIGJib3ggPSBmYWJyaWMudXRpbC5zaXplQWZ0ZXJUcmFuc2Zvcm0odGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIG9wdGlvbnMpLFxuICAgICAgICAgIHN0cm9rZVdpZHRoID0gdGhpcy5zdHJva2VXaWR0aCxcbiAgICAgICAgICBzdHJva2VVbmlmb3JtID0gdGhpcy5zdHJva2VVbmlmb3JtLFxuICAgICAgICAgIGJvcmRlclNjYWxlRmFjdG9yID0gdGhpcy5ib3JkZXJTY2FsZUZhY3RvcixcbiAgICAgICAgICB3aWR0aCA9XG4gICAgICAgICAgICBiYm94LnggKyBzdHJva2VXaWR0aCAqIChzdHJva2VVbmlmb3JtID8gdGhpcy5jYW52YXMuZ2V0Wm9vbSgpIDogb3B0aW9ucy5zY2FsZVgpICsgYm9yZGVyU2NhbGVGYWN0b3IsXG4gICAgICAgICAgaGVpZ2h0ID1cbiAgICAgICAgICAgIGJib3gueSArIHN0cm9rZVdpZHRoICogKHN0cm9rZVVuaWZvcm0gPyB0aGlzLmNhbnZhcy5nZXRab29tKCkgOiBvcHRpb25zLnNjYWxlWSkgKyBib3JkZXJTY2FsZUZhY3RvcjtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICB0aGlzLl9zZXRMaW5lRGFzaChjdHgsIHN0eWxlT3ZlcnJpZGUuYm9yZGVyRGFzaEFycmF5IHx8IHRoaXMuYm9yZGVyRGFzaEFycmF5KTtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuYm9yZGVyQ29sb3IgfHwgdGhpcy5ib3JkZXJDb2xvcjtcbiAgICAgIGN0eC5zdHJva2VSZWN0KFxuICAgICAgICAtd2lkdGggLyAyLFxuICAgICAgICAtaGVpZ2h0IC8gMixcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgICAgKTtcblxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBjb3JuZXJzIG9mIGFuIG9iamVjdCdzIGJvdW5kaW5nIGJveC5cbiAgICAgKiBSZXF1aXJlcyBwdWJsaWMgcHJvcGVydGllczogd2lkdGgsIGhlaWdodFxuICAgICAqIFJlcXVpcmVzIHB1YmxpYyBvcHRpb25zOiBjb3JuZXJTaXplLCBwYWRkaW5nXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIGRyYXcgb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVPdmVycmlkZSBvYmplY3QgdG8gb3ZlcnJpZGUgdGhlIG9iamVjdCBzdHlsZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZHJhd0NvbnRyb2xzOiBmdW5jdGlvbihjdHgsIHN0eWxlT3ZlcnJpZGUpIHtcbiAgICAgIHN0eWxlT3ZlcnJpZGUgPSBzdHlsZU92ZXJyaWRlIHx8IHt9O1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHZhciByZXRpbmFTY2FsaW5nID0gdGhpcy5jYW52YXMuZ2V0UmV0aW5hU2NhbGluZygpLCBtYXRyaXgsIHA7XG4gICAgICBjdHguc2V0VHJhbnNmb3JtKHJldGluYVNjYWxpbmcsIDAsIDAsIHJldGluYVNjYWxpbmcsIDAsIDApO1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZSA9IHN0eWxlT3ZlcnJpZGUuY29ybmVyQ29sb3IgfHwgdGhpcy5jb3JuZXJDb2xvcjtcbiAgICAgIGlmICghdGhpcy50cmFuc3BhcmVudENvcm5lcnMpIHtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3R5bGVPdmVycmlkZS5jb3JuZXJTdHJva2VDb2xvciB8fCB0aGlzLmNvcm5lclN0cm9rZUNvbG9yO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0TGluZURhc2goY3R4LCBzdHlsZU92ZXJyaWRlLmNvcm5lckRhc2hBcnJheSB8fCB0aGlzLmNvcm5lckRhc2hBcnJheSk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgaWYgKHRoaXMuZ3JvdXApIHtcbiAgICAgICAgLy8gZmFicmljSlMgZG9lcyBub3QgcmVhbGx5IHN1cHBvcnQgZHJhd2luZyBjb250cm9scyBpbnNpZGUgZ3JvdXBzLFxuICAgICAgICAvLyB0aGlzIHBpZWNlIG9mIGNvZGUgaGVyZSBoZWxwcyBoYXZpbmcgYXQgbGVhc3QgdGhlIGNvbnRyb2wgaW4gcGxhY2VzLlxuICAgICAgICAvLyBJZiBhbiBhcHBsaWNhdGlvbiBuZWVkcyB0byBzaG93IHNvbWUgb2JqZWN0cyBhcyBzZWxlY3RlZCBiZWNhdXNlIG9mIHNvbWUgVUkgc3RhdGVcbiAgICAgICAgLy8gY2FuIHN0aWxsIGNhbGwgT2JqZWN0Ll9yZW5kZXJDb250cm9scygpIG9uIGFueSBvYmplY3QgdGhleSBkZXNpcmUsIGluZGVwZW5kZW50bHkgb2YgZ3JvdXBzLlxuICAgICAgICAvLyB1c2luZyBubyBwYWRkaW5nLCBjaXJjdWxhciBjb250cm9scyBhbmQgaGlkaW5nIHRoZSByb3RhdGluZyBjdXJzb3IgaXMgaGlnbHkgc3VnZ2VzdGVkLFxuICAgICAgICBtYXRyaXggPSB0aGlzLmdyb3VwLmNhbGNUcmFuc2Zvcm1NYXRyaXgoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZm9yRWFjaENvbnRyb2woZnVuY3Rpb24oY29udHJvbCwga2V5LCBmYWJyaWNPYmplY3QpIHtcbiAgICAgICAgcCA9IGZhYnJpY09iamVjdC5vQ29vcmRzW2tleV07XG4gICAgICAgIGlmIChjb250cm9sLmdldFZpc2liaWxpdHkoZmFicmljT2JqZWN0LCBrZXkpKSB7XG4gICAgICAgICAgaWYgKG1hdHJpeCkge1xuICAgICAgICAgICAgcCA9IGZhYnJpYy51dGlsLnRyYW5zZm9ybVBvaW50KHAsIG1hdHJpeCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRyb2wucmVuZGVyKGN0eCwgcC54LCBwLnksIHN0eWxlT3ZlcnJpZGUsIGZhYnJpY09iamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIGNvbnRyb2wgaXMgdmlzaWJsZSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjb250cm9sS2V5IFRoZSBrZXkgb2YgdGhlIGNvbnRyb2wuIFBvc3NpYmxlIHZhbHVlcyBhcmUgJ3RsJywgJ3RyJywgJ2JyJywgJ2JsJywgJ21sJywgJ210JywgJ21yJywgJ21iJywgJ210cicuXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHRydWUgaWYgdGhlIHNwZWNpZmllZCBjb250cm9sIGlzIHZpc2libGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGlzQ29udHJvbFZpc2libGU6IGZ1bmN0aW9uKGNvbnRyb2xLZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xzW2NvbnRyb2xLZXldICYmIHRoaXMuY29udHJvbHNbY29udHJvbEtleV0uZ2V0VmlzaWJpbGl0eSh0aGlzLCBjb250cm9sS2V5KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgc3BlY2lmaWVkIGNvbnRyb2wuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGNvbnRyb2xLZXkgVGhlIGtleSBvZiB0aGUgY29udHJvbC4gUG9zc2libGUgdmFsdWVzIGFyZSAndGwnLCAndHInLCAnYnInLCAnYmwnLCAnbWwnLCAnbXQnLCAnbXInLCAnbWInLCAnbXRyJy5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHZpc2libGUgdHJ1ZSB0byBzZXQgdGhlIHNwZWNpZmllZCBjb250cm9sIHZpc2libGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0Q29udHJvbFZpc2libGU6IGZ1bmN0aW9uKGNvbnRyb2xLZXksIHZpc2libGUpIHtcbiAgICAgIGlmICghdGhpcy5fY29udHJvbHNWaXNpYmlsaXR5KSB7XG4gICAgICAgIHRoaXMuX2NvbnRyb2xzVmlzaWJpbGl0eSA9IHt9O1xuICAgICAgfVxuICAgICAgdGhpcy5fY29udHJvbHNWaXNpYmlsaXR5W2NvbnRyb2xLZXldID0gdmlzaWJsZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2aXNpYmlsaXR5IHN0YXRlIG9mIG9iamVjdCBjb250cm9scy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5ibF0gdHJ1ZSB0byBlbmFibGUgdGhlIGJvdHRvbS1sZWZ0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmJyXSB0cnVlIHRvIGVuYWJsZSB0aGUgYm90dG9tLXJpZ2h0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1iXSB0cnVlIHRvIGVuYWJsZSB0aGUgbWlkZGxlLWJvdHRvbSBjb250cm9sLCBmYWxzZSB0byBkaXNhYmxlIGl0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tbF0gdHJ1ZSB0byBlbmFibGUgdGhlIG1pZGRsZS1sZWZ0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1yXSB0cnVlIHRvIGVuYWJsZSB0aGUgbWlkZGxlLXJpZ2h0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm10XSB0cnVlIHRvIGVuYWJsZSB0aGUgbWlkZGxlLXRvcCBjb250cm9sLCBmYWxzZSB0byBkaXNhYmxlIGl0XG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy50bF0gdHJ1ZSB0byBlbmFibGUgdGhlIHRvcC1sZWZ0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnRyXSB0cnVlIHRvIGVuYWJsZSB0aGUgdG9wLXJpZ2h0IGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm10cl0gdHJ1ZSB0byBlbmFibGUgdGhlIG1pZGRsZS10b3Atcm90YXRlIGNvbnRyb2wsIGZhbHNlIHRvIGRpc2FibGUgaXRcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldENvbnRyb2xzVmlzaWJpbGl0eTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICAgIGZvciAodmFyIHAgaW4gb3B0aW9ucykge1xuICAgICAgICB0aGlzLnNldENvbnRyb2xWaXNpYmxlKHAsIG9wdGlvbnNbcF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogVGhpcyBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnkgdGltZSBfZGlzY2FyZEFjdGl2ZU9iamVjdCBvciBfc2V0QWN0aXZlT2JqZWN0XG4gICAgICogdHJ5IHRvIHRvIGRlc2VsZWN0IHRoaXMgb2JqZWN0LiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyB0cnVlLCB0aGUgcHJvY2VzcyBpcyBjYW5jZWxsZWRcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIG9wdGlvbnMgc2VudCBmcm9tIHRoZSB1cHBlciBmdW5jdGlvbnNcbiAgICAgKiBAcGFyYW0ge0V2ZW50fSBbb3B0aW9ucy5lXSBldmVudCBpZiB0aGUgcHJvY2VzcyBpcyBnZW5lcmF0ZWQgYnkgYW4gZXZlbnRcbiAgICAgKi9cbiAgICBvbkRlc2VsZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIGltcGxlbWVudGVkIGJ5IHN1Yi1jbGFzc2VzLCBhcyBuZWVkZWQuXG4gICAgfSxcblxuXG4gICAgLyoqXG4gICAgICogVGhpcyBjYWxsYmFjayBmdW5jdGlvbiBpcyBjYWxsZWQgZXZlcnkgdGltZSBfZGlzY2FyZEFjdGl2ZU9iamVjdCBvciBfc2V0QWN0aXZlT2JqZWN0XG4gICAgICogdHJ5IHRvIHRvIHNlbGVjdCB0aGlzIG9iamVjdC4gSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSwgdGhlIHByb2Nlc3MgaXMgY2FuY2VsbGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBvcHRpb25zIHNlbnQgZnJvbSB0aGUgdXBwZXIgZnVuY3Rpb25zXG4gICAgICogQHBhcmFtIHtFdmVudH0gW29wdGlvbnMuZV0gZXZlbnQgaWYgdGhlIHByb2Nlc3MgaXMgZ2VuZXJhdGVkIGJ5IGFuIGV2ZW50XG4gICAgICovXG4gICAgb25TZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaW1wbGVtZW50ZWQgYnkgc3ViLWNsYXNzZXMsIGFzIG5lZWRlZC5cbiAgICB9XG4gIH0pO1xufSkoKTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5TdGF0aWNDYW52YXMucHJvdG90eXBlICovIHtcblxuICAvKipcbiAgICogQW5pbWF0aW9uIGR1cmF0aW9uIChpbiBtcykgZm9yIGZ4KiBtZXRob2RzXG4gICAqIEB0eXBlIE51bWJlclxuICAgKiBAZGVmYXVsdFxuICAgKi9cbiAgRlhfRFVSQVRJT046IDUwMCxcblxuICAvKipcbiAgICogQ2VudGVycyBvYmplY3QgaG9yaXpvbnRhbGx5IHdpdGggYW5pbWF0aW9uLlxuICAgKiBAcGFyYW0ge2ZhYnJpYy5PYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY2VudGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY2FsbGJhY2tzXSBDYWxsYmFja3Mgb2JqZWN0IHdpdGggb3B0aW9uYWwgXCJvbkNvbXBsZXRlXCIgYW5kL29yIFwib25DaGFuZ2VcIiBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja3Mub25Db21wbGV0ZV0gSW52b2tlZCBvbiBjb21wbGV0aW9uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja3Mub25DaGFuZ2VdIEludm9rZWQgb24gZXZlcnkgc3RlcCBvZiBhbmltYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkFuaW1hdGlvbkNvbnRleHR9IGNvbnRleHRcbiAgICovXG4gIGZ4Q2VudGVyT2JqZWN0SDogZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzIHx8IHsgfTtcblxuICAgIHZhciBlbXB0eSA9IGZ1bmN0aW9uKCkgeyB9LFxuICAgICAgICBvbkNvbXBsZXRlID0gY2FsbGJhY2tzLm9uQ29tcGxldGUgfHwgZW1wdHksXG4gICAgICAgIG9uQ2hhbmdlID0gY2FsbGJhY2tzLm9uQ2hhbmdlIHx8IGVtcHR5LFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gZmFicmljLnV0aWwuYW5pbWF0ZSh7XG4gICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICBzdGFydFZhbHVlOiBvYmplY3QubGVmdCxcbiAgICAgIGVuZFZhbHVlOiB0aGlzLmdldENlbnRlclBvaW50KCkueCxcbiAgICAgIGR1cmF0aW9uOiB0aGlzLkZYX0RVUkFUSU9OLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIG9iamVjdC5zZXQoJ2xlZnQnLCB2YWx1ZSk7XG4gICAgICAgIF90aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgIH0sXG4gICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENlbnRlcnMgb2JqZWN0IHZlcnRpY2FsbHkgd2l0aCBhbmltYXRpb24uXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjZW50ZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IFtjYWxsYmFja3NdIENhbGxiYWNrcyBvYmplY3Qgd2l0aCBvcHRpb25hbCBcIm9uQ29tcGxldGVcIiBhbmQvb3IgXCJvbkNoYW5nZVwiIHByb3BlcnRpZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5vbkNvbXBsZXRlXSBJbnZva2VkIG9uIGNvbXBsZXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5vbkNoYW5nZV0gSW52b2tlZCBvbiBldmVyeSBzdGVwIG9mIGFuaW1hdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuQW5pbWF0aW9uQ29udGV4dH0gY29udGV4dFxuICAgKi9cbiAgZnhDZW50ZXJPYmplY3RWOiBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFja3MpIHtcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3MgfHwgeyB9O1xuXG4gICAgdmFyIGVtcHR5ID0gZnVuY3Rpb24oKSB7IH0sXG4gICAgICAgIG9uQ29tcGxldGUgPSBjYWxsYmFja3Mub25Db21wbGV0ZSB8fCBlbXB0eSxcbiAgICAgICAgb25DaGFuZ2UgPSBjYWxsYmFja3Mub25DaGFuZ2UgfHwgZW1wdHksXG4gICAgICAgIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBmYWJyaWMudXRpbC5hbmltYXRlKHtcbiAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIHN0YXJ0VmFsdWU6IG9iamVjdC50b3AsXG4gICAgICBlbmRWYWx1ZTogdGhpcy5nZXRDZW50ZXJQb2ludCgpLnksXG4gICAgICBkdXJhdGlvbjogdGhpcy5GWF9EVVJBVElPTixcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBvYmplY3Quc2V0KCd0b3AnLCB2YWx1ZSk7XG4gICAgICAgIF90aGlzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICAgICAgb25DaGFuZ2UoKTtcbiAgICAgIH0sXG4gICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgb2JqZWN0LnNldENvb3JkcygpO1xuICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgYGZhYnJpYy5DYW52YXMjcmVtb3ZlYCBidXQgYW5pbWF0ZWRcbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIHJlbW92ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gW2NhbGxiYWNrc10gQ2FsbGJhY2tzIG9iamVjdCB3aXRoIG9wdGlvbmFsIFwib25Db21wbGV0ZVwiIGFuZC9vciBcIm9uQ2hhbmdlXCIgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLm9uQ29tcGxldGVdIEludm9rZWQgb24gY29tcGxldGlvblxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tzLm9uQ2hhbmdlXSBJbnZva2VkIG9uIGV2ZXJ5IHN0ZXAgb2YgYW5pbWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5BbmltYXRpb25Db250ZXh0fSBjb250ZXh0XG4gICAqL1xuICBmeFJlbW92ZTogZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2tzKSB7XG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzIHx8IHsgfTtcblxuICAgIHZhciBlbXB0eSA9IGZ1bmN0aW9uKCkgeyB9LFxuICAgICAgICBvbkNvbXBsZXRlID0gY2FsbGJhY2tzLm9uQ29tcGxldGUgfHwgZW1wdHksXG4gICAgICAgIG9uQ2hhbmdlID0gY2FsbGJhY2tzLm9uQ2hhbmdlIHx8IGVtcHR5LFxuICAgICAgICBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gZmFicmljLnV0aWwuYW5pbWF0ZSh7XG4gICAgICB0YXJnZXQ6IHRoaXMsXG4gICAgICBzdGFydFZhbHVlOiBvYmplY3Qub3BhY2l0eSxcbiAgICAgIGVuZFZhbHVlOiAwLFxuICAgICAgZHVyYXRpb246IHRoaXMuRlhfRFVSQVRJT04sXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgb2JqZWN0LnNldCgnb3BhY2l0eScsIHZhbHVlKTtcbiAgICAgICAgX3RoaXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgICBvbkNoYW5nZSgpO1xuICAgICAgfSxcbiAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMucmVtb3ZlKG9iamVjdCk7XG4gICAgICAgIG9uQ29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5cbmZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLk9iamVjdC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLk9iamVjdC5wcm90b3R5cGUgKi8ge1xuICAvKipcbiAgICogQW5pbWF0ZXMgb2JqZWN0J3MgcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHByb3BlcnR5IFByb3BlcnR5IHRvIGFuaW1hdGUgKGlmIHN0cmluZykgb3IgcHJvcGVydGllcyB0byBhbmltYXRlIChpZiBvYmplY3QpXG4gICAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gdmFsdWUgVmFsdWUgdG8gYW5pbWF0ZSBwcm9wZXJ0eSB0byAoaWYgc3RyaW5nIHdhcyBnaXZlbiBmaXJzdCkgb3Igb3B0aW9ucyBvYmplY3RcbiAgICogQHJldHVybiB7ZmFicmljLk9iamVjdH0gdGhpc0FyZ1xuICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMiNhbmltYXRpb259XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5BbmltYXRpb25Db250ZXh0IHwgZmFicmljLkFuaW1hdGlvbkNvbnRleHRbXX0gYW5pbWF0aW9uIGNvbnRleHQgKG9yIGFuIGFycmF5IGlmIHBhc3NlZCBtdWx0aXBsZSBwcm9wZXJ0aWVzKVxuICAgKlxuICAgKiBBcyBvYmplY3Qg4oCUIG11bHRpcGxlIHByb3BlcnRpZXNcbiAgICpcbiAgICogb2JqZWN0LmFuaW1hdGUoeyBsZWZ0OiAuLi4sIHRvcDogLi4uIH0pO1xuICAgKiBvYmplY3QuYW5pbWF0ZSh7IGxlZnQ6IC4uLiwgdG9wOiAuLi4gfSwgeyBkdXJhdGlvbjogLi4uIH0pO1xuICAgKlxuICAgKiBBcyBzdHJpbmcg4oCUIG9uZSBwcm9wZXJ0eVxuICAgKlxuICAgKiBvYmplY3QuYW5pbWF0ZSgnbGVmdCcsIC4uLik7XG4gICAqIG9iamVjdC5hbmltYXRlKCdsZWZ0JywgeyBkdXJhdGlvbjogLi4uIH0pO1xuICAgKlxuICAgKi9cbiAgYW5pbWF0ZTogZnVuY3Rpb24gKCkge1xuICAgIGlmIChhcmd1bWVudHNbMF0gJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBwcm9wc1RvQW5pbWF0ZSA9IFtdLCBwcm9wLCBza2lwQ2FsbGJhY2tzLCBvdXQgPSBbXTtcbiAgICAgIGZvciAocHJvcCBpbiBhcmd1bWVudHNbMF0pIHtcbiAgICAgICAgcHJvcHNUb0FuaW1hdGUucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwcm9wc1RvQW5pbWF0ZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwcm9wID0gcHJvcHNUb0FuaW1hdGVbaV07XG4gICAgICAgIHNraXBDYWxsYmFja3MgPSBpICE9PSBsZW4gLSAxO1xuICAgICAgICBvdXQucHVzaCh0aGlzLl9hbmltYXRlKHByb3AsIGFyZ3VtZW50c1swXVtwcm9wXSwgYXJndW1lbnRzWzFdLCBza2lwQ2FsbGJhY2tzKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9hbmltYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgUHJvcGVydHkgdG8gYW5pbWF0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdG8gVmFsdWUgdG8gYW5pbWF0ZSB0b1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NraXBDYWxsYmFja3NdIFdoZW4gdHJ1ZSwgY2FsbGJhY2tzIGxpa2Ugb25jaGFuZ2UgYW5kIG9uY29tcGxldGUgYXJlIG5vdCBpbnZva2VkXG4gICAqL1xuICBfYW5pbWF0ZTogZnVuY3Rpb24ocHJvcGVydHksIHRvLCBvcHRpb25zLCBza2lwQ2FsbGJhY2tzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcywgcHJvcFBhaXI7XG5cbiAgICB0byA9IHRvLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7IH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgb3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZShvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAofnByb3BlcnR5LmluZGV4T2YoJy4nKSkge1xuICAgICAgcHJvcFBhaXIgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgIH1cblxuICAgIHZhciBwcm9wSXNDb2xvciA9XG4gICAgICBfdGhpcy5jb2xvclByb3BlcnRpZXMuaW5kZXhPZihwcm9wZXJ0eSkgPiAtMSB8fFxuICAgICAgKHByb3BQYWlyICYmIF90aGlzLmNvbG9yUHJvcGVydGllcy5pbmRleE9mKHByb3BQYWlyWzFdKSA+IC0xKTtcblxuICAgIHZhciBjdXJyZW50VmFsdWUgPSBwcm9wUGFpclxuICAgICAgPyB0aGlzLmdldChwcm9wUGFpclswXSlbcHJvcFBhaXJbMV1dXG4gICAgICA6IHRoaXMuZ2V0KHByb3BlcnR5KTtcblxuICAgIGlmICghKCdmcm9tJyBpbiBvcHRpb25zKSkge1xuICAgICAgb3B0aW9ucy5mcm9tID0gY3VycmVudFZhbHVlO1xuICAgIH1cblxuICAgIGlmICghcHJvcElzQ29sb3IpIHtcbiAgICAgIGlmICh+dG8uaW5kZXhPZignPScpKSB7XG4gICAgICAgIHRvID0gY3VycmVudFZhbHVlICsgcGFyc2VGbG9hdCh0by5yZXBsYWNlKCc9JywgJycpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0byA9IHBhcnNlRmxvYXQodG8pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IHtcbiAgICAgIHRhcmdldDogdGhpcyxcbiAgICAgIHN0YXJ0VmFsdWU6IG9wdGlvbnMuZnJvbSxcbiAgICAgIGVuZFZhbHVlOiB0byxcbiAgICAgIGJ5VmFsdWU6IG9wdGlvbnMuYnksXG4gICAgICBlYXNpbmc6IG9wdGlvbnMuZWFzaW5nLFxuICAgICAgZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG4gICAgICBhYm9ydDogb3B0aW9ucy5hYm9ydCAmJiBmdW5jdGlvbih2YWx1ZSwgdmFsdWVQcm9ncmVzcywgdGltZVByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmFib3J0LmNhbGwoX3RoaXMsIHZhbHVlLCB2YWx1ZVByb2dyZXNzLCB0aW1lUHJvZ3Jlc3MpO1xuICAgICAgfSxcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiAodmFsdWUsIHZhbHVlUHJvZ3Jlc3MsIHRpbWVQcm9ncmVzcykge1xuICAgICAgICBpZiAocHJvcFBhaXIpIHtcbiAgICAgICAgICBfdGhpc1twcm9wUGFpclswXV1bcHJvcFBhaXJbMV1dID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgX3RoaXMuc2V0KHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNraXBDYWxsYmFja3MpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5vbkNoYW5nZSAmJiBvcHRpb25zLm9uQ2hhbmdlKHZhbHVlLCB2YWx1ZVByb2dyZXNzLCB0aW1lUHJvZ3Jlc3MpO1xuICAgICAgfSxcbiAgICAgIG9uQ29tcGxldGU6IGZ1bmN0aW9uICh2YWx1ZSwgdmFsdWVQcm9ncmVzcywgdGltZVByb2dyZXNzKSB7XG4gICAgICAgIGlmIChza2lwQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuc2V0Q29vcmRzKCk7XG4gICAgICAgIG9wdGlvbnMub25Db21wbGV0ZSAmJiBvcHRpb25zLm9uQ29tcGxldGUodmFsdWUsIHZhbHVlUHJvZ3Jlc3MsIHRpbWVQcm9ncmVzcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChwcm9wSXNDb2xvcikge1xuICAgICAgcmV0dXJuIGZhYnJpYy51dGlsLmFuaW1hdGVDb2xvcihfb3B0aW9ucy5zdGFydFZhbHVlLCBfb3B0aW9ucy5lbmRWYWx1ZSwgX29wdGlvbnMuZHVyYXRpb24sIF9vcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gZmFicmljLnV0aWwuYW5pbWF0ZShfb3B0aW9ucyk7XG4gICAgfVxuICB9XG59KTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGV4dGVuZCA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQsXG4gICAgICBjbG9uZSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZSxcbiAgICAgIGNvb3JkUHJvcHMgPSB7IHgxOiAxLCB4MjogMSwgeTE6IDEsIHkyOiAxIH07XG5cbiAgaWYgKGZhYnJpYy5MaW5lKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5MaW5lIGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaW5lIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuTGluZVxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5MaW5lI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuTGluZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLkxpbmUucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnbGluZScsXG5cbiAgICAvKipcbiAgICAgKiB4IHZhbHVlIG9yIGZpcnN0IGxpbmUgZWRnZVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgeDE6IDAsXG5cbiAgICAvKipcbiAgICAgKiB5IHZhbHVlIG9yIGZpcnN0IGxpbmUgZWRnZVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgeTE6IDAsXG5cbiAgICAvKipcbiAgICAgKiB4IHZhbHVlIG9yIHNlY29uZCBsaW5lIGVkZ2VcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHgyOiAwLFxuXG4gICAgLyoqXG4gICAgICogeSB2YWx1ZSBvciBzZWNvbmQgbGluZSBlZGdlXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB5MjogMCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgneDEnLCAneDInLCAneTEnLCAneTInKSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BvaW50c10gQXJyYXkgb2YgcG9pbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5MaW5lfSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocG9pbnRzLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIXBvaW50cykge1xuICAgICAgICBwb2ludHMgPSBbMCwgMCwgMCwgMF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuc2V0KCd4MScsIHBvaW50c1swXSk7XG4gICAgICB0aGlzLnNldCgneTEnLCBwb2ludHNbMV0pO1xuICAgICAgdGhpcy5zZXQoJ3gyJywgcG9pbnRzWzJdKTtcbiAgICAgIHRoaXMuc2V0KCd5MicsIHBvaW50c1szXSk7XG5cbiAgICAgIHRoaXMuX3NldFdpZHRoSGVpZ2h0KG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9uc1xuICAgICAqL1xuICAgIF9zZXRXaWR0aEhlaWdodDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICAgIHRoaXMud2lkdGggPSBNYXRoLmFicyh0aGlzLngyIC0gdGhpcy54MSk7XG4gICAgICB0aGlzLmhlaWdodCA9IE1hdGguYWJzKHRoaXMueTIgLSB0aGlzLnkxKTtcblxuICAgICAgdGhpcy5sZWZ0ID0gJ2xlZnQnIGluIG9wdGlvbnNcbiAgICAgICAgPyBvcHRpb25zLmxlZnRcbiAgICAgICAgOiB0aGlzLl9nZXRMZWZ0VG9PcmlnaW5YKCk7XG5cbiAgICAgIHRoaXMudG9wID0gJ3RvcCcgaW4gb3B0aW9uc1xuICAgICAgICA/IG9wdGlvbnMudG9wXG4gICAgICAgIDogdGhpcy5fZ2V0VG9wVG9PcmlnaW5ZKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGtleVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKi9cbiAgICBfc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignX3NldCcsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKHR5cGVvZiBjb29yZFByb3BzW2tleV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMuX3NldFdpZHRoSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGxlZnRUb09yaWdpblggRGlzdGFuY2UgZnJvbSBsZWZ0IGVkZ2Ugb2YgY2FudmFzIHRvIG9yaWdpblggb2YgTGluZS5cbiAgICAgKi9cbiAgICBfZ2V0TGVmdFRvT3JpZ2luWDogbWFrZUVkZ2VUb09yaWdpbkdldHRlcihcbiAgICAgIHsgLy8gcHJvcGVydHkgbmFtZXNcbiAgICAgICAgb3JpZ2luOiAnb3JpZ2luWCcsXG4gICAgICAgIGF4aXMxOiAneDEnLFxuICAgICAgICBheGlzMjogJ3gyJyxcbiAgICAgICAgZGltZW5zaW9uOiAnd2lkdGgnXG4gICAgICB9LFxuICAgICAgeyAvLyBwb3NzaWJsZSB2YWx1ZXMgb2Ygb3JpZ2luXG4gICAgICAgIG5lYXJlc3Q6ICdsZWZ0JyxcbiAgICAgICAgY2VudGVyOiAnY2VudGVyJyxcbiAgICAgICAgZmFydGhlc3Q6ICdyaWdodCdcbiAgICAgIH1cbiAgICApLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRvcFRvT3JpZ2luWSBEaXN0YW5jZSBmcm9tIHRvcCBlZGdlIG9mIGNhbnZhcyB0byBvcmlnaW5ZIG9mIExpbmUuXG4gICAgICovXG4gICAgX2dldFRvcFRvT3JpZ2luWTogbWFrZUVkZ2VUb09yaWdpbkdldHRlcihcbiAgICAgIHsgLy8gcHJvcGVydHkgbmFtZXNcbiAgICAgICAgb3JpZ2luOiAnb3JpZ2luWScsXG4gICAgICAgIGF4aXMxOiAneTEnLFxuICAgICAgICBheGlzMjogJ3kyJyxcbiAgICAgICAgZGltZW5zaW9uOiAnaGVpZ2h0J1xuICAgICAgfSxcbiAgICAgIHsgLy8gcG9zc2libGUgdmFsdWVzIG9mIG9yaWdpblxuICAgICAgICBuZWFyZXN0OiAndG9wJyxcbiAgICAgICAgY2VudGVyOiAnY2VudGVyJyxcbiAgICAgICAgZmFydGhlc3Q6ICdib3R0b20nXG4gICAgICB9XG4gICAgKSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG5cbiAgICAgIHZhciBwID0gdGhpcy5jYWxjTGluZVBvaW50cygpO1xuICAgICAgY3R4Lm1vdmVUbyhwLngxLCBwLnkxKTtcbiAgICAgIGN0eC5saW5lVG8ocC54MiwgcC55Mik7XG5cbiAgICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLnN0cm9rZVdpZHRoO1xuXG4gICAgICAvLyBUT0RPOiB0ZXN0IHRoaXNcbiAgICAgIC8vIG1ha2Ugc3VyZSBzZXR0aW5nIFwiZmlsbFwiIGNoYW5nZXMgY29sb3Igb2YgYSBsaW5lXG4gICAgICAvLyAoYnkgY29weWluZyBmaWxsU3R5bGUgdG8gc3Ryb2tlU3R5bGUsIHNpbmNlIGxpbmUgaXMgc3Ryb2tlZCwgbm90IGZpbGxlZClcbiAgICAgIHZhciBvcmlnU3Ryb2tlU3R5bGUgPSBjdHguc3Ryb2tlU3R5bGU7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZSB8fCBjdHguZmlsbFN0eWxlO1xuICAgICAgdGhpcy5zdHJva2UgJiYgdGhpcy5fcmVuZGVyU3Ryb2tlKGN0eCk7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcmlnU3Ryb2tlU3R5bGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgYW4gaGVscGVyIGZvciBzdmcgaW1wb3J0LiBpdCByZXR1cm5zIHRoZSBjZW50ZXIgb2YgdGhlIG9iamVjdCBpbiB0aGUgc3ZnXG4gICAgICogdW50cmFuc2Zvcm1lZCBjb29yZGluYXRlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBjZW50ZXIgcG9pbnQgZnJvbSBlbGVtZW50IGNvb3JkaW5hdGVzXG4gICAgICovXG4gICAgX2ZpbmRDZW50ZXJGcm9tRWxlbWVudDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiAodGhpcy54MSArIHRoaXMueDIpIC8gMixcbiAgICAgICAgeTogKHRoaXMueTEgKyB0aGlzLnkyKSAvIDIsXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBtZXRob2QgdG9PYmplY3RcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgcmV0dXJuIGV4dGVuZCh0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKSwgdGhpcy5jYWxjTGluZVBvaW50cygpKTtcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBDYWxjdWxhdGUgb2JqZWN0IGRpbWVuc2lvbnMgZnJvbSBpdHMgcHJvcGVydGllc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldE5vblRyYW5zZm9ybWVkRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGltID0gdGhpcy5jYWxsU3VwZXIoJ19nZXROb25UcmFuc2Zvcm1lZERpbWVuc2lvbnMnKTtcbiAgICAgIGlmICh0aGlzLnN0cm9rZUxpbmVDYXAgPT09ICdidXR0Jykge1xuICAgICAgICBpZiAodGhpcy53aWR0aCA9PT0gMCkge1xuICAgICAgICAgIGRpbS55IC09IHRoaXMuc3Ryb2tlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgZGltLnggLT0gdGhpcy5zdHJva2VXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGRpbTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVjYWxjdWxhdGVzIGxpbmUgcG9pbnRzIGdpdmVuIHdpZHRoIGFuZCBoZWlnaHRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNhbGNMaW5lUG9pbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB4TXVsdCA9IHRoaXMueDEgPD0gdGhpcy54MiA/IC0xIDogMSxcbiAgICAgICAgICB5TXVsdCA9IHRoaXMueTEgPD0gdGhpcy55MiA/IC0xIDogMSxcbiAgICAgICAgICB4MSA9ICh4TXVsdCAqIHRoaXMud2lkdGggKiAwLjUpLFxuICAgICAgICAgIHkxID0gKHlNdWx0ICogdGhpcy5oZWlnaHQgKiAwLjUpLFxuICAgICAgICAgIHgyID0gKHhNdWx0ICogdGhpcy53aWR0aCAqIC0wLjUpLFxuICAgICAgICAgIHkyID0gKHlNdWx0ICogdGhpcy5oZWlnaHQgKiAtMC41KTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDE6IHgxLFxuICAgICAgICB4MjogeDIsXG4gICAgICAgIHkxOiB5MSxcbiAgICAgICAgeTI6IHkyXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7QXJyYXl9IGFuIGFycmF5IG9mIHN0cmluZ3Mgd2l0aCB0aGUgc3BlY2lmaWMgc3ZnIHJlcHJlc2VudGF0aW9uXG4gICAgICogb2YgdGhlIGluc3RhbmNlXG4gICAgICovXG4gICAgX3RvU1ZHOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwID0gdGhpcy5jYWxjTGluZVBvaW50cygpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJzxsaW5lICcsICdDT01NT05fUEFSVFMnLFxuICAgICAgICAneDE9XCInLCBwLngxLFxuICAgICAgICAnXCIgeTE9XCInLCBwLnkxLFxuICAgICAgICAnXCIgeDI9XCInLCBwLngyLFxuICAgICAgICAnXCIgeTI9XCInLCBwLnkyLFxuICAgICAgICAnXCIgLz5cXG4nXG4gICAgICBdO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG4gIH0pO1xuXG4gIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGFjY291bnQgZm9yIHdoZW4gcGFyc2luZyBTVkcgZWxlbWVudCAodXNlZCBieSB7QGxpbmsgZmFicmljLkxpbmUuZnJvbUVsZW1lbnR9KVxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuTGluZVxuICAgKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9zaGFwZXMuaHRtbCNMaW5lRWxlbWVudFxuICAgKi9cbiAgZmFicmljLkxpbmUuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdCgneDEgeTEgeDIgeTInLnNwbGl0KCcgJykpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZhYnJpYy5MaW5lIGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkxpbmVcbiAgICogQHBhcmFtIHtTVkdFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKi9cbiAgZmFicmljLkxpbmUuZnJvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgfTtcbiAgICB2YXIgcGFyc2VkQXR0cmlidXRlcyA9IGZhYnJpYy5wYXJzZUF0dHJpYnV0ZXMoZWxlbWVudCwgZmFicmljLkxpbmUuQVRUUklCVVRFX05BTUVTKSxcbiAgICAgICAgcG9pbnRzID0gW1xuICAgICAgICAgIHBhcnNlZEF0dHJpYnV0ZXMueDEgfHwgMCxcbiAgICAgICAgICBwYXJzZWRBdHRyaWJ1dGVzLnkxIHx8IDAsXG4gICAgICAgICAgcGFyc2VkQXR0cmlidXRlcy54MiB8fCAwLFxuICAgICAgICAgIHBhcnNlZEF0dHJpYnV0ZXMueTIgfHwgMFxuICAgICAgICBdO1xuICAgIGNhbGxiYWNrKG5ldyBmYWJyaWMuTGluZShwb2ludHMsIGV4dGVuZChwYXJzZWRBdHRyaWJ1dGVzLCBvcHRpb25zKSkpO1xuICB9O1xuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZhYnJpYy5MaW5lIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5MaW5lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gaW52b2tlZCB3aXRoIG5ldyBpbnN0YW5jZSBhcyBmaXJzdCBhcmd1bWVudFxuICAgKi9cbiAgZmFicmljLkxpbmUuZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBmdW5jdGlvbiBfY2FsbGJhY2soaW5zdGFuY2UpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5wb2ludHM7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpbnN0YW5jZSk7XG4gICAgfTtcbiAgICB2YXIgb3B0aW9ucyA9IGNsb25lKG9iamVjdCwgdHJ1ZSk7XG4gICAgb3B0aW9ucy5wb2ludHMgPSBbb2JqZWN0LngxLCBvYmplY3QueTEsIG9iamVjdC54Miwgb2JqZWN0LnkyXTtcbiAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdMaW5lJywgb3B0aW9ucywgX2NhbGxiYWNrLCAncG9pbnRzJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFByb2R1Y2VzIGEgZnVuY3Rpb24gdGhhdCBjYWxjdWxhdGVzIGRpc3RhbmNlIGZyb20gY2FudmFzIGVkZ2UgdG8gTGluZSBvcmlnaW4uXG4gICAqL1xuICBmdW5jdGlvbiBtYWtlRWRnZVRvT3JpZ2luR2V0dGVyKHByb3BlcnR5TmFtZXMsIG9yaWdpblZhbHVlcykge1xuICAgIHZhciBvcmlnaW4gPSBwcm9wZXJ0eU5hbWVzLm9yaWdpbixcbiAgICAgICAgYXhpczEgPSBwcm9wZXJ0eU5hbWVzLmF4aXMxLFxuICAgICAgICBheGlzMiA9IHByb3BlcnR5TmFtZXMuYXhpczIsXG4gICAgICAgIGRpbWVuc2lvbiA9IHByb3BlcnR5TmFtZXMuZGltZW5zaW9uLFxuICAgICAgICBuZWFyZXN0ID0gb3JpZ2luVmFsdWVzLm5lYXJlc3QsXG4gICAgICAgIGNlbnRlciA9IG9yaWdpblZhbHVlcy5jZW50ZXIsXG4gICAgICAgIGZhcnRoZXN0ID0gb3JpZ2luVmFsdWVzLmZhcnRoZXN0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgc3dpdGNoICh0aGlzLmdldChvcmlnaW4pKSB7XG4gICAgICAgIGNhc2UgbmVhcmVzdDpcbiAgICAgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5nZXQoYXhpczEpLCB0aGlzLmdldChheGlzMikpO1xuICAgICAgICBjYXNlIGNlbnRlcjpcbiAgICAgICAgICByZXR1cm4gTWF0aC5taW4odGhpcy5nZXQoYXhpczEpLCB0aGlzLmdldChheGlzMikpICsgKDAuNSAqIHRoaXMuZ2V0KGRpbWVuc2lvbikpO1xuICAgICAgICBjYXNlIGZhcnRoZXN0OlxuICAgICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmdldChheGlzMSksIHRoaXMuZ2V0KGF4aXMyKSk7XG4gICAgICB9XG4gICAgfTtcblxuICB9XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGRlZ3JlZXNUb1JhZGlhbnMgPSBmYWJyaWMudXRpbC5kZWdyZWVzVG9SYWRpYW5zO1xuXG4gIGlmIChmYWJyaWMuQ2lyY2xlKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5DaXJjbGUgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaXJjbGUgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5DaXJjbGVcbiAgICogQGV4dGVuZHMgZmFicmljLk9iamVjdFxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuQ2lyY2xlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuQ2lyY2xlID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLk9iamVjdCwgLyoqIEBsZW5kcyBmYWJyaWMuQ2lyY2xlLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ2NpcmNsZScsXG5cbiAgICAvKipcbiAgICAgKiBSYWRpdXMgb2YgdGhpcyBjaXJjbGVcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHJhZGl1czogMCxcblxuICAgIC8qKlxuICAgICAqIGRlZ3JlZXMgb2Ygc3RhcnQgb2YgdGhlIGNpcmNsZS5cbiAgICAgKiBwcm9iYWJseSB3aWxsIGNoYW5nZSB0byBkZWdyZWVzIGluIG5leHQgbWFqb3IgdmVyc2lvblxuICAgICAqIEB0eXBlIE51bWJlciAwIC0gMzU5XG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHN0YXJ0QW5nbGU6IDAsXG5cbiAgICAvKipcbiAgICAgKiBFbmQgYW5nbGUgb2YgdGhlIGNpcmNsZVxuICAgICAqIHByb2JhYmx5IHdpbGwgY2hhbmdlIHRvIGRlZ3JlZXMgaW4gbmV4dCBtYWpvciB2ZXJzaW9uXG4gICAgICogQHR5cGUgTnVtYmVyIDEgLSAzNjBcbiAgICAgKiBAZGVmYXVsdCAzNjBcbiAgICAgKi9cbiAgICBlbmRBbmdsZTogMzYwLFxuXG4gICAgY2FjaGVQcm9wZXJ0aWVzOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5jYWNoZVByb3BlcnRpZXMuY29uY2F0KCdyYWRpdXMnLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZScpLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DaXJjbGV9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBfc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignX3NldCcsIGtleSwgdmFsdWUpO1xuXG4gICAgICBpZiAoa2V5ID09PSAncmFkaXVzJykge1xuICAgICAgICB0aGlzLnNldFJhZGl1cyh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JywgWydyYWRpdXMnLCAnc3RhcnRBbmdsZScsICdlbmRBbmdsZSddLmNvbmNhdChwcm9wZXJ0aWVzVG9JbmNsdWRlKSk7XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBzdHJpbmdzIHdpdGggdGhlIHNwZWNpZmljIHN2ZyByZXByZXNlbnRhdGlvblxuICAgICAqIG9mIHRoZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc3ZnU3RyaW5nLCB4ID0gMCwgeSA9IDAsXG4gICAgICAgICAgYW5nbGUgPSAodGhpcy5lbmRBbmdsZSAtIHRoaXMuc3RhcnRBbmdsZSkgJSAzNjA7XG5cbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICBzdmdTdHJpbmcgPSBbXG4gICAgICAgICAgJzxjaXJjbGUgJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICAgJ2N4PVwiJyArIHggKyAnXCIgY3k9XCInICsgeSArICdcIiAnLFxuICAgICAgICAgICdyPVwiJywgdGhpcy5yYWRpdXMsXG4gICAgICAgICAgJ1wiIC8+XFxuJ1xuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBzdGFydCA9IGRlZ3JlZXNUb1JhZGlhbnModGhpcy5zdGFydEFuZ2xlKSxcbiAgICAgICAgICAgIGVuZCA9IGRlZ3JlZXNUb1JhZGlhbnModGhpcy5lbmRBbmdsZSksXG4gICAgICAgICAgICByYWRpdXMgPSB0aGlzLnJhZGl1cyxcbiAgICAgICAgICAgIHN0YXJ0WCA9IGZhYnJpYy51dGlsLmNvcyhzdGFydCkgKiByYWRpdXMsXG4gICAgICAgICAgICBzdGFydFkgPSBmYWJyaWMudXRpbC5zaW4oc3RhcnQpICogcmFkaXVzLFxuICAgICAgICAgICAgZW5kWCA9IGZhYnJpYy51dGlsLmNvcyhlbmQpICogcmFkaXVzLFxuICAgICAgICAgICAgZW5kWSA9IGZhYnJpYy51dGlsLnNpbihlbmQpICogcmFkaXVzLFxuICAgICAgICAgICAgbGFyZ2VGbGFnID0gYW5nbGUgPiAxODAgPyAnMScgOiAnMCc7XG4gICAgICAgIHN2Z1N0cmluZyA9IFtcbiAgICAgICAgICAnPHBhdGggZD1cIk0gJyArIHN0YXJ0WCArICcgJyArIHN0YXJ0WSxcbiAgICAgICAgICAnIEEgJyArIHJhZGl1cyArICcgJyArIHJhZGl1cyxcbiAgICAgICAgICAnIDAgJywgK2xhcmdlRmxhZyArICcgMScsICcgJyArIGVuZFggKyAnICcgKyBlbmRZLFxuICAgICAgICAgICdcIiAnLCAnQ09NTU9OX1BBUlRTJywgJyAvPlxcbidcbiAgICAgICAgXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdmdTdHJpbmc7XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyhcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy5yYWRpdXMsXG4gICAgICAgIGRlZ3JlZXNUb1JhZGlhbnModGhpcy5zdGFydEFuZ2xlKSxcbiAgICAgICAgZGVncmVlc1RvUmFkaWFucyh0aGlzLmVuZEFuZ2xlKSxcbiAgICAgICAgZmFsc2VcbiAgICAgICk7XG4gICAgICB0aGlzLl9yZW5kZXJQYWludEluT3JkZXIoY3R4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBob3Jpem9udGFsIHJhZGl1cyBvZiBhbiBvYmplY3QgKGFjY29yZGluZyB0byBob3cgYW4gb2JqZWN0IGlzIHNjYWxlZClcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0UmFkaXVzWDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3JhZGl1cycpICogdGhpcy5nZXQoJ3NjYWxlWCcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHZlcnRpY2FsIHJhZGl1cyBvZiBhbiBvYmplY3QgKGFjY29yZGluZyB0byBob3cgYW4gb2JqZWN0IGlzIHNjYWxlZClcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICovXG4gICAgZ2V0UmFkaXVzWTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3JhZGl1cycpICogdGhpcy5nZXQoJ3NjYWxlWScpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHJhZGl1cyBvZiBhbiBvYmplY3QgKGFuZCB1cGRhdGVzIHdpZHRoIGFjY29yZGluZ2x5KVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5DaXJjbGV9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBzZXRSYWRpdXM6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB0aGlzLnJhZGl1cyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0KCd3aWR0aCcsIHZhbHVlICogMikuc2V0KCdoZWlnaHQnLCB2YWx1ZSAqIDIpO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGFjY291bnQgZm9yIHdoZW4gcGFyc2luZyBTVkcgZWxlbWVudCAodXNlZCBieSB7QGxpbmsgZmFicmljLkNpcmNsZS5mcm9tRWxlbWVudH0pXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5DaXJjbGVcbiAgICogQHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3NoYXBlcy5odG1sI0NpcmNsZUVsZW1lbnRcbiAgICovXG4gIGZhYnJpYy5DaXJjbGUuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdCgnY3ggY3kgcicuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5DaXJjbGV9IGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkNpcmNsZVxuICAgKiBAcGFyYW0ge1NWR0VsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0byBwYXJzZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIE9wdGlvbnMgY2FsbGJhY2sgaW52b2tlZCBhZnRlciBwYXJzaW5nIGlzIGZpbmlzaGVkXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICogQHRocm93cyB7RXJyb3J9IElmIHZhbHVlIG9mIGByYCBhdHRyaWJ1dGUgaXMgbWlzc2luZyBvciBpbnZhbGlkXG4gICAqL1xuICBmYWJyaWMuQ2lyY2xlLmZyb21FbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgcGFyc2VkQXR0cmlidXRlcyA9IGZhYnJpYy5wYXJzZUF0dHJpYnV0ZXMoZWxlbWVudCwgZmFicmljLkNpcmNsZS5BVFRSSUJVVEVfTkFNRVMpO1xuXG4gICAgaWYgKCFpc1ZhbGlkUmFkaXVzKHBhcnNlZEF0dHJpYnV0ZXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ZhbHVlIG9mIGByYCBhdHRyaWJ1dGUgaXMgcmVxdWlyZWQgYW5kIGNhbiBub3QgYmUgbmVnYXRpdmUnKTtcbiAgICB9XG5cbiAgICBwYXJzZWRBdHRyaWJ1dGVzLmxlZnQgPSAocGFyc2VkQXR0cmlidXRlcy5sZWZ0IHx8IDApIC0gcGFyc2VkQXR0cmlidXRlcy5yYWRpdXM7XG4gICAgcGFyc2VkQXR0cmlidXRlcy50b3AgPSAocGFyc2VkQXR0cmlidXRlcy50b3AgfHwgMCkgLSBwYXJzZWRBdHRyaWJ1dGVzLnJhZGl1cztcbiAgICBjYWxsYmFjayhuZXcgZmFicmljLkNpcmNsZShwYXJzZWRBdHRyaWJ1dGVzKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBmdW5jdGlvbiBpc1ZhbGlkUmFkaXVzKGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gKCgncmFkaXVzJyBpbiBhdHRyaWJ1dGVzKSAmJiAoYXR0cmlidXRlcy5yYWRpdXMgPj0gMCkpO1xuICB9XG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5DaXJjbGV9IGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5DaXJjbGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBpbnZva2VkIHdpdGggbmV3IGluc3RhbmNlIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBmYWJyaWMuQ2lyY2xlLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgZmFicmljLk9iamVjdC5fZnJvbU9iamVjdCgnQ2lyY2xlJywgb2JqZWN0LCBjYWxsYmFjayk7XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KTtcblxuICBpZiAoZmFicmljLlRyaWFuZ2xlKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5UcmlhbmdsZSBpcyBhbHJlYWR5IGRlZmluZWQnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVHJpYW5nbGUgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5UcmlhbmdsZVxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5UcmlhbmdsZX0gdGhpc0FyZ1xuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuVHJpYW5nbGUjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5UcmlhbmdsZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLlRyaWFuZ2xlLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3RyaWFuZ2xlJyxcblxuICAgIC8qKlxuICAgICAqIFdpZHRoIGlzIHNldCB0byAxMDAgdG8gY29tcGVuc2F0ZSB0aGUgb2xkIGluaXRpYWxpemUgY29kZSB0aGF0IHdhcyBzZXR0aW5nIGl0IHRvIDEwMFxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgd2lkdGg6IDEwMCxcblxuICAgIC8qKlxuICAgICAqIEhlaWdodCBpcyBzZXQgdG8gMTAwIHRvIGNvbXBlbnNhdGUgdGhlIG9sZCBpbml0aWFsaXplIGNvZGUgdGhhdCB3YXMgc2V0dGluZyBpdCB0byAxMDBcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhlaWdodDogMTAwLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgd2lkdGhCeTIgPSB0aGlzLndpZHRoIC8gMixcbiAgICAgICAgICBoZWlnaHRCeTIgPSB0aGlzLmhlaWdodCAvIDI7XG5cbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8oLXdpZHRoQnkyLCBoZWlnaHRCeTIpO1xuICAgICAgY3R4LmxpbmVUbygwLCAtaGVpZ2h0QnkyKTtcbiAgICAgIGN0eC5saW5lVG8od2lkdGhCeTIsIGhlaWdodEJ5Mik7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG5cbiAgICAgIHRoaXMuX3JlbmRlclBhaW50SW5PcmRlcihjdHgpO1xuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7QXJyYXl9IGFuIGFycmF5IG9mIHN0cmluZ3Mgd2l0aCB0aGUgc3BlY2lmaWMgc3ZnIHJlcHJlc2VudGF0aW9uXG4gICAgICogb2YgdGhlIGluc3RhbmNlXG4gICAgICovXG4gICAgX3RvU1ZHOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3aWR0aEJ5MiA9IHRoaXMud2lkdGggLyAyLFxuICAgICAgICAgIGhlaWdodEJ5MiA9IHRoaXMuaGVpZ2h0IC8gMixcbiAgICAgICAgICBwb2ludHMgPSBbXG4gICAgICAgICAgICAtd2lkdGhCeTIgKyAnICcgKyBoZWlnaHRCeTIsXG4gICAgICAgICAgICAnMCAnICsgLWhlaWdodEJ5MixcbiAgICAgICAgICAgIHdpZHRoQnkyICsgJyAnICsgaGVpZ2h0QnkyXG4gICAgICAgICAgXS5qb2luKCcsJyk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAnPHBvbHlnb24gJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICdwb2ludHM9XCInLCBwb2ludHMsXG4gICAgICAgICdcIiAvPidcbiAgICAgIF07XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5UcmlhbmdsZX0gaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlRyaWFuZ2xlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gaW52b2tlZCB3aXRoIG5ldyBpbnN0YW5jZSBhcyBmaXJzdCBhcmd1bWVudFxuICAgKi9cbiAgZmFicmljLlRyaWFuZ2xlLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ1RyaWFuZ2xlJywgb2JqZWN0LCBjYWxsYmFjayk7XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIHBpQnkyICAgPSBNYXRoLlBJICogMjtcblxuICBpZiAoZmFicmljLkVsbGlwc2UpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLkVsbGlwc2UgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbGxpcHNlIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuRWxsaXBzZVxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEByZXR1cm4ge2ZhYnJpYy5FbGxpcHNlfSB0aGlzQXJnXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5FbGxpcHNlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLkVsbGlwc2UucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnZWxsaXBzZScsXG5cbiAgICAvKipcbiAgICAgKiBIb3Jpem9udGFsIHJhZGl1c1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcng6ICAgMCxcblxuICAgIC8qKlxuICAgICAqIFZlcnRpY2FsIHJhZGl1c1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcnk6ICAgMCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgncngnLCAncnknKSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5FbGxpcHNlfSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuc2V0KCdyeCcsIG9wdGlvbnMgJiYgb3B0aW9ucy5yeCB8fCAwKTtcbiAgICAgIHRoaXMuc2V0KCdyeScsIG9wdGlvbnMgJiYgb3B0aW9ucy5yeSB8fCAwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5XG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5FbGxpcHNlfSB0aGlzQXJnXG4gICAgICovXG4gICAgX3NldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ19zZXQnLCBrZXksIHZhbHVlKTtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG5cbiAgICAgICAgY2FzZSAncngnOlxuICAgICAgICAgIHRoaXMucnggPSB2YWx1ZTtcbiAgICAgICAgICB0aGlzLnNldCgnd2lkdGgnLCB2YWx1ZSAqIDIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3J5JzpcbiAgICAgICAgICB0aGlzLnJ5ID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5zZXQoJ2hlaWdodCcsIHZhbHVlICogMik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGhvcml6b250YWwgcmFkaXVzIG9mIGFuIG9iamVjdCAoYWNjb3JkaW5nIHRvIGhvdyBhbiBvYmplY3QgaXMgc2NhbGVkKVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRSeDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3J4JykgKiB0aGlzLmdldCgnc2NhbGVYJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgVmVydGljYWwgcmFkaXVzIG9mIGFuIG9iamVjdCAoYWNjb3JkaW5nIHRvIGhvdyBhbiBvYmplY3QgaXMgc2NhbGVkKVxuICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgKi9cbiAgICBnZXRSeTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3J5JykgKiB0aGlzLmdldCgnc2NhbGVZJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnLCBbJ3J4JywgJ3J5J10uY29uY2F0KHByb3BlcnRpZXNUb0luY2x1ZGUpKTtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBzdHJpbmdzIHdpdGggdGhlIHNwZWNpZmljIHN2ZyByZXByZXNlbnRhdGlvblxuICAgICAqIG9mIHRoZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAnPGVsbGlwc2UgJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICdjeD1cIjBcIiBjeT1cIjBcIiAnLFxuICAgICAgICAncng9XCInLCB0aGlzLnJ4LFxuICAgICAgICAnXCIgcnk9XCInLCB0aGlzLnJ5LFxuICAgICAgICAnXCIgLz5cXG4nXG4gICAgICBdO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggY29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNmb3JtKDEsIDAsIDAsIHRoaXMucnkgLyB0aGlzLnJ4LCAwLCAwKTtcbiAgICAgIGN0eC5hcmMoXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMucngsXG4gICAgICAgIDAsXG4gICAgICAgIHBpQnkyLFxuICAgICAgICBmYWxzZSk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuICAvKipcbiAgICogTGlzdCBvZiBhdHRyaWJ1dGUgbmFtZXMgdG8gYWNjb3VudCBmb3Igd2hlbiBwYXJzaW5nIFNWRyBlbGVtZW50ICh1c2VkIGJ5IHtAbGluayBmYWJyaWMuRWxsaXBzZS5mcm9tRWxlbWVudH0pXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5FbGxpcHNlXG4gICAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3NoYXBlcy5odG1sI0VsbGlwc2VFbGVtZW50XG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZS5BVFRSSUJVVEVfTkFNRVMgPSBmYWJyaWMuU0hBUkVEX0FUVFJJQlVURVMuY29uY2F0KCdjeCBjeSByeCByeScuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5FbGxpcHNlfSBpbnN0YW5jZSBmcm9tIGFuIFNWRyBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5FbGxpcHNlXG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gT3B0aW9ucyBjYWxsYmFjayBpbnZva2VkIGFmdGVyIHBhcnNpbmcgaXMgZmluaXNoZWRcbiAgICogQHJldHVybiB7ZmFicmljLkVsbGlwc2V9XG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZS5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrKSB7XG5cbiAgICB2YXIgcGFyc2VkQXR0cmlidXRlcyA9IGZhYnJpYy5wYXJzZUF0dHJpYnV0ZXMoZWxlbWVudCwgZmFicmljLkVsbGlwc2UuQVRUUklCVVRFX05BTUVTKTtcblxuICAgIHBhcnNlZEF0dHJpYnV0ZXMubGVmdCA9IChwYXJzZWRBdHRyaWJ1dGVzLmxlZnQgfHwgMCkgLSBwYXJzZWRBdHRyaWJ1dGVzLnJ4O1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMudG9wID0gKHBhcnNlZEF0dHJpYnV0ZXMudG9wIHx8IDApIC0gcGFyc2VkQXR0cmlidXRlcy5yeTtcbiAgICBjYWxsYmFjayhuZXcgZmFicmljLkVsbGlwc2UocGFyc2VkQXR0cmlidXRlcykpO1xuICB9O1xuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHtAbGluayBmYWJyaWMuRWxsaXBzZX0gaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkVsbGlwc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBpbnZva2VkIHdpdGggbmV3IGluc3RhbmNlIGFzIGZpcnN0IGFyZ3VtZW50XG4gICAqIEByZXR1cm4ge3ZvaWR9XG4gICAqL1xuICBmYWJyaWMuRWxsaXBzZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ0VsbGlwc2UnLCBvYmplY3QsIGNhbGxiYWNrKTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZDtcblxuICBpZiAoZmFicmljLlJlY3QpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLlJlY3QgaXMgYWxyZWFkeSBkZWZpbmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY3RhbmdsZSBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlJlY3RcbiAgICogQGV4dGVuZHMgZmFicmljLk9iamVjdFxuICAgKiBAcmV0dXJuIHtmYWJyaWMuUmVjdH0gdGhpc0FyZ1xuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuUmVjdCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLlJlY3QgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuT2JqZWN0LCAvKiogQGxlbmRzIGZhYnJpYy5SZWN0LnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgd2hlbiBjaGVja2luZyBpZiBzdGF0ZSBvZiBhbiBvYmplY3QgaXMgY2hhbmdlZCAoe0BsaW5rIGZhYnJpYy5PYmplY3QjaGFzU3RhdGVDaGFuZ2VkfSlcbiAgICAgKiBhcyB3ZWxsIGFzIGZvciBoaXN0b3J5ICh1bmRvL3JlZG8pIHB1cnBvc2VzXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBzdGF0ZVByb3BlcnRpZXM6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnN0YXRlUHJvcGVydGllcy5jb25jYXQoJ3J4JywgJ3J5JyksXG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3JlY3QnLFxuXG4gICAgLyoqXG4gICAgICogSG9yaXpvbnRhbCBib3JkZXIgcmFkaXVzXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICByeDogICAwLFxuXG4gICAgLyoqXG4gICAgICogVmVydGljYWwgYm9yZGVyIHJhZGl1c1xuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcnk6ICAgMCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgncngnLCAncnknKSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG4gICAgICB0aGlzLl9pbml0UnhSeSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyByeC9yeSBhdHRyaWJ1dGVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfaW5pdFJ4Unk6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMucnggJiYgIXRoaXMucnkpIHtcbiAgICAgICAgdGhpcy5yeSA9IHRoaXMucng7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLnJ5ICYmICF0aGlzLnJ4KSB7XG4gICAgICAgIHRoaXMucnggPSB0aGlzLnJ5O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcblxuICAgICAgLy8gMXgxIGNhc2UgKHVzZWQgaW4gc3ByYXkgYnJ1c2gpIG9wdGltaXphdGlvbiB3YXMgcmVtb3ZlZCBiZWNhdXNlXG4gICAgICAvLyB3aXRoIGNhY2hpbmcgYW5kIGhpZ2hlciB6b29tIGxldmVsIHRoaXMgbWFrZXMgbW9yZSBkYW1hZ2UgdGhhbiBoZWxwXG5cbiAgICAgIHZhciByeCA9IHRoaXMucnggPyBNYXRoLm1pbih0aGlzLnJ4LCB0aGlzLndpZHRoIC8gMikgOiAwLFxuICAgICAgICAgIHJ5ID0gdGhpcy5yeSA/IE1hdGgubWluKHRoaXMucnksIHRoaXMuaGVpZ2h0IC8gMikgOiAwLFxuICAgICAgICAgIHcgPSB0aGlzLndpZHRoLFxuICAgICAgICAgIGggPSB0aGlzLmhlaWdodCxcbiAgICAgICAgICB4ID0gLXRoaXMud2lkdGggLyAyLFxuICAgICAgICAgIHkgPSAtdGhpcy5oZWlnaHQgLyAyLFxuICAgICAgICAgIGlzUm91bmRlZCA9IHJ4ICE9PSAwIHx8IHJ5ICE9PSAwLFxuICAgICAgICAgIC8qIFwibWFnaWMgbnVtYmVyXCIgZm9yIGJlemllciBhcHByb3hpbWF0aW9ucyBvZiBhcmNzIChodHRwOi8vaXRjLmt0dS5sdC9pdGMzNTQvUmlza3VzMzU0LnBkZikgKi9cbiAgICAgICAgICBrID0gMSAtIDAuNTUyMjg0NzQ5ODtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgICAgY3R4Lm1vdmVUbyh4ICsgcngsIHkpO1xuXG4gICAgICBjdHgubGluZVRvKHggKyB3IC0gcngsIHkpO1xuICAgICAgaXNSb3VuZGVkICYmIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyB3IC0gayAqIHJ4LCB5LCB4ICsgdywgeSArIGsgKiByeSwgeCArIHcsIHkgKyByeSk7XG5cbiAgICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyBoIC0gcnkpO1xuICAgICAgaXNSb3VuZGVkICYmIGN0eC5iZXppZXJDdXJ2ZVRvKHggKyB3LCB5ICsgaCAtIGsgKiByeSwgeCArIHcgLSBrICogcngsIHkgKyBoLCB4ICsgdyAtIHJ4LCB5ICsgaCk7XG5cbiAgICAgIGN0eC5saW5lVG8oeCArIHJ4LCB5ICsgaCk7XG4gICAgICBpc1JvdW5kZWQgJiYgY3R4LmJlemllckN1cnZlVG8oeCArIGsgKiByeCwgeSArIGgsIHgsIHkgKyBoIC0gayAqIHJ5LCB4LCB5ICsgaCAtIHJ5KTtcblxuICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgcnkpO1xuICAgICAgaXNSb3VuZGVkICYmIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIHkgKyBrICogcnksIHggKyBrICogcngsIHksIHggKyByeCwgeSk7XG5cbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcblxuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnLCBbJ3J4JywgJ3J5J10uY29uY2F0KHByb3BlcnRpZXNUb0luY2x1ZGUpKTtcbiAgICB9LFxuXG4gICAgLyogX1RPX1NWR19TVEFSVF8gKi9cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge0FycmF5fSBhbiBhcnJheSBvZiBzdHJpbmdzIHdpdGggdGhlIHNwZWNpZmljIHN2ZyByZXByZXNlbnRhdGlvblxuICAgICAqIG9mIHRoZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeCA9IC10aGlzLndpZHRoIC8gMiwgeSA9IC10aGlzLmhlaWdodCAvIDI7XG4gICAgICByZXR1cm4gW1xuICAgICAgICAnPHJlY3QgJywgJ0NPTU1PTl9QQVJUUycsXG4gICAgICAgICd4PVwiJywgeCwgJ1wiIHk9XCInLCB5LFxuICAgICAgICAnXCIgcng9XCInLCB0aGlzLnJ4LCAnXCIgcnk9XCInLCB0aGlzLnJ5LFxuICAgICAgICAnXCIgd2lkdGg9XCInLCB0aGlzLndpZHRoLCAnXCIgaGVpZ2h0PVwiJywgdGhpcy5oZWlnaHQsXG4gICAgICAgICdcIiAvPlxcbidcbiAgICAgIF07XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cbiAgfSk7XG5cbiAgLyogX0ZST01fU1ZHX1NUQVJUXyAqL1xuICAvKipcbiAgICogTGlzdCBvZiBhdHRyaWJ1dGUgbmFtZXMgdG8gYWNjb3VudCBmb3Igd2hlbiBwYXJzaW5nIFNWRyBlbGVtZW50ICh1c2VkIGJ5IGBmYWJyaWMuUmVjdC5mcm9tRWxlbWVudGApXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5SZWN0XG4gICAqIEBzZWU6IGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9zaGFwZXMuaHRtbCNSZWN0RWxlbWVudFxuICAgKi9cbiAgZmFicmljLlJlY3QuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdCgneCB5IHJ4IHJ5IHdpZHRoIGhlaWdodCcuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5SZWN0fSBpbnN0YW5jZSBmcm9tIGFuIFNWRyBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5SZWN0XG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBmYWJyaWMuUmVjdC5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgfTtcblxuICAgIHZhciBwYXJzZWRBdHRyaWJ1dGVzID0gZmFicmljLnBhcnNlQXR0cmlidXRlcyhlbGVtZW50LCBmYWJyaWMuUmVjdC5BVFRSSUJVVEVfTkFNRVMpO1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMubGVmdCA9IHBhcnNlZEF0dHJpYnV0ZXMubGVmdCB8fCAwO1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMudG9wICA9IHBhcnNlZEF0dHJpYnV0ZXMudG9wICB8fCAwO1xuICAgIHBhcnNlZEF0dHJpYnV0ZXMuaGVpZ2h0ICA9IHBhcnNlZEF0dHJpYnV0ZXMuaGVpZ2h0IHx8IDA7XG4gICAgcGFyc2VkQXR0cmlidXRlcy53aWR0aCAgPSBwYXJzZWRBdHRyaWJ1dGVzLndpZHRoIHx8IDA7XG4gICAgdmFyIHJlY3QgPSBuZXcgZmFicmljLlJlY3QoZXh0ZW5kKChvcHRpb25zID8gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKG9wdGlvbnMpIDogeyB9KSwgcGFyc2VkQXR0cmlidXRlcykpO1xuICAgIHJlY3QudmlzaWJsZSA9IHJlY3QudmlzaWJsZSAmJiByZWN0LndpZHRoID4gMCAmJiByZWN0LmhlaWdodCA+IDA7XG4gICAgY2FsbGJhY2socmVjdCk7XG4gIH07XG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5SZWN0fSBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuUmVjdFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5SZWN0IGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5SZWN0LmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ1JlY3QnLCBvYmplY3QsIGNhbGxiYWNrKTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCxcbiAgICAgIG1pbiA9IGZhYnJpYy51dGlsLmFycmF5Lm1pbixcbiAgICAgIG1heCA9IGZhYnJpYy51dGlsLmFycmF5Lm1heCxcbiAgICAgIHRvRml4ZWQgPSBmYWJyaWMudXRpbC50b0ZpeGVkLFxuICAgICAgcHJvamVjdFN0cm9rZU9uUG9pbnRzID0gZmFicmljLnV0aWwucHJvamVjdFN0cm9rZU9uUG9pbnRzO1xuXG4gIGlmIChmYWJyaWMuUG9seWxpbmUpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLlBvbHlsaW5lIGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb2x5bGluZSBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLlBvbHlsaW5lXG4gICAqIEBleHRlbmRzIGZhYnJpYy5PYmplY3RcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlBvbHlsaW5lI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuUG9seWxpbmUgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuT2JqZWN0LCAvKiogQGxlbmRzIGZhYnJpYy5Qb2x5bGluZS5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBhbiBvYmplY3RcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdwb2x5bGluZScsXG5cbiAgICAvKipcbiAgICAgKiBQb2ludHMgYXJyYXlcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcG9pbnRzOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogV0FSTklORzogRmVhdHVyZSBpbiBwcm9ncmVzc1xuICAgICAqIENhbGN1bGF0ZSB0aGUgZXhhY3QgYm91bmRpbmcgYm94IHRha2luZyBpbiBhY2NvdW50IHN0cm9rZVdpZHRoIG9uIGFjdXRlIGFuZ2xlc1xuICAgICAqIHRoaXMgd2lsbCBiZSB0dXJuZWQgdG8gdHJ1ZSBieSBkZWZhdWx0IG9uIGZhYnJpYyA2LjBcbiAgICAgKiBtYXliZSB3aWxsIGJlIGxlZnQgaW4gYXMgYW4gb3B0aW1pemF0aW9uIHNpbmNlIGNhbGN1bGF0aW9ucyBtYXkgYmUgc2xvd1xuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG4gICAgZXhhY3RCb3VuZGluZ0JveDogZmFsc2UsXG5cbiAgICBjYWNoZVByb3BlcnRpZXM6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmNhY2hlUHJvcGVydGllcy5jb25jYXQoJ3BvaW50cycpLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHMgQXJyYXkgb2YgcG9pbnRzICh3aGVyZSBlYWNoIHBvaW50IGlzIGFuIG9iamVjdCB3aXRoIHggYW5kIHkpXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Qb2x5bGluZX0gdGhpc0FyZ1xuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHBvbHkgPSBuZXcgZmFicmljLlBvbHlsaW5lKFtcbiAgICAgKiAgICAgeyB4OiAxMCwgeTogMTAgfSxcbiAgICAgKiAgICAgeyB4OiA1MCwgeTogMzAgfSxcbiAgICAgKiAgICAgeyB4OiA0MCwgeTogNzAgfSxcbiAgICAgKiAgICAgeyB4OiA2MCwgeTogNTAgfSxcbiAgICAgKiAgICAgeyB4OiAxMDAsIHk6IDE1MCB9LFxuICAgICAqICAgICB7IHg6IDQwLCB5OiAxMDAgfVxuICAgICAqICAgXSwge1xuICAgICAqICAgc3Ryb2tlOiAncmVkJyxcbiAgICAgKiAgIGxlZnQ6IDEwMCxcbiAgICAgKiAgIHRvcDogMTAwXG4gICAgICogfSk7XG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocG9pbnRzLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzIHx8IFtdO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX3NldFBvc2l0aW9uRGltZW5zaW9ucyhvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcHJvamVjdFN0cm9rZU9uUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcHJvamVjdFN0cm9rZU9uUG9pbnRzKHRoaXMucG9pbnRzLCB0aGlzLCB0cnVlKTtcbiAgICB9LFxuXG4gICAgX3NldFBvc2l0aW9uRGltZW5zaW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGNhbGNEaW0gPSB0aGlzLl9jYWxjRGltZW5zaW9ucyhvcHRpb25zKSwgY29ycmVjdExlZnRUb3AsXG4gICAgICAgICAgY29ycmVjdFNpemUgPSB0aGlzLmV4YWN0Qm91bmRpbmdCb3ggPyB0aGlzLnN0cm9rZVdpZHRoIDogMDtcbiAgICAgIHRoaXMud2lkdGggPSBjYWxjRGltLndpZHRoIC0gY29ycmVjdFNpemU7XG4gICAgICB0aGlzLmhlaWdodCA9IGNhbGNEaW0uaGVpZ2h0IC0gY29ycmVjdFNpemU7XG4gICAgICBpZiAoIW9wdGlvbnMuZnJvbVNWRykge1xuICAgICAgICBjb3JyZWN0TGVmdFRvcCA9IHRoaXMudHJhbnNsYXRlVG9HaXZlbk9yaWdpbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICAvLyB0aGlzIGxvb2tzIGJhZCwgYnV0IGlzIG9uZSB3YXkgdG8ga2VlcCBpdCBvcHRpb25hbCBmb3Igbm93LlxuICAgICAgICAgICAgeDogY2FsY0RpbS5sZWZ0IC0gdGhpcy5zdHJva2VXaWR0aCAvIDIgKyBjb3JyZWN0U2l6ZSAvIDIsXG4gICAgICAgICAgICB5OiBjYWxjRGltLnRvcCAtIHRoaXMuc3Ryb2tlV2lkdGggLyAyICsgY29ycmVjdFNpemUgLyAyXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnbGVmdCcsXG4gICAgICAgICAgJ3RvcCcsXG4gICAgICAgICAgdGhpcy5vcmlnaW5YLFxuICAgICAgICAgIHRoaXMub3JpZ2luWVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxlZnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMubGVmdCA9IG9wdGlvbnMuZnJvbVNWRyA/IGNhbGNEaW0ubGVmdCA6IGNvcnJlY3RMZWZ0VG9wLng7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMudG9wID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aGlzLnRvcCA9IG9wdGlvbnMuZnJvbVNWRyA/IGNhbGNEaW0udG9wIDogY29ycmVjdExlZnRUb3AueTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGF0aE9mZnNldCA9IHtcbiAgICAgICAgeDogY2FsY0RpbS5sZWZ0ICsgdGhpcy53aWR0aCAvIDIgKyBjb3JyZWN0U2l6ZSAvIDIsXG4gICAgICAgIHk6IGNhbGNEaW0udG9wICsgdGhpcy5oZWlnaHQgLyAyICsgY29ycmVjdFNpemUgLyAyXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgdGhlIHBvbHlnb24gbWluIGFuZCBtYXggcG9pbnQgZnJvbSBwb2ludHMgYXJyYXksXG4gICAgICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCB0byBtZWFzdXJlIHRoZVxuICAgICAqIHBvbHlnb24gc2l6ZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0LmxlZnQgWCBjb29yZGluYXRlIG9mIHRoZSBwb2x5Z29uIGxlZnRtb3N0IHBvaW50XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3QudG9wIFkgY29vcmRpbmF0ZSBvZiB0aGUgcG9seWdvbiB0b3Btb3N0IHBvaW50XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBvYmplY3Qud2lkdGggZGlzdGFuY2UgYmV0d2VlbiBYIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2x5Z29uIGxlZnRtb3N0IGFuZCByaWdodG1vc3QgcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdC5oZWlnaHQgZGlzdGFuY2UgYmV0d2VlbiBZIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2x5Z29uIHRvcG1vc3QgYW5kIGJvdHRvbW1vc3QgcG9pbnRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jYWxjRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBwb2ludHMgPSB0aGlzLmV4YWN0Qm91bmRpbmdCb3ggPyB0aGlzLl9wcm9qZWN0U3Ryb2tlT25Qb2ludHMoKSA6IHRoaXMucG9pbnRzLFxuICAgICAgICAgIG1pblggPSBtaW4ocG9pbnRzLCAneCcpIHx8IDAsXG4gICAgICAgICAgbWluWSA9IG1pbihwb2ludHMsICd5JykgfHwgMCxcbiAgICAgICAgICBtYXhYID0gbWF4KHBvaW50cywgJ3gnKSB8fCAwLFxuICAgICAgICAgIG1heFkgPSBtYXgocG9pbnRzLCAneScpIHx8IDAsXG4gICAgICAgICAgd2lkdGggPSAobWF4WCAtIG1pblgpLFxuICAgICAgICAgIGhlaWdodCA9IChtYXhZIC0gbWluWSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlZnQ6IG1pblgsXG4gICAgICAgIHRvcDogbWluWSxcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHJldHVybiBleHRlbmQodGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JywgcHJvcGVydGllc1RvSW5jbHVkZSksIHtcbiAgICAgICAgcG9pbnRzOiB0aGlzLnBvaW50cy5jb25jYXQoKVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIHRoZSBzcGVjaWZpYyBzdmcgcmVwcmVzZW50YXRpb25cbiAgICAgKiBvZiB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdG9TVkc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBvaW50cyA9IFtdLCBkaWZmWCA9IHRoaXMucGF0aE9mZnNldC54LCBkaWZmWSA9IHRoaXMucGF0aE9mZnNldC55LFxuICAgICAgICAgIE5VTV9GUkFDVElPTl9ESUdJVFMgPSBmYWJyaWMuT2JqZWN0Lk5VTV9GUkFDVElPTl9ESUdJVFM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwb2ludHMucHVzaChcbiAgICAgICAgICB0b0ZpeGVkKHRoaXMucG9pbnRzW2ldLnggLSBkaWZmWCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksICcsJyxcbiAgICAgICAgICB0b0ZpeGVkKHRoaXMucG9pbnRzW2ldLnkgLSBkaWZmWSwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksICcgJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJzwnICsgdGhpcy50eXBlICsgJyAnLCAnQ09NTU9OX1BBUlRTJyxcbiAgICAgICAgJ3BvaW50cz1cIicsIHBvaW50cy5qb2luKCcnKSxcbiAgICAgICAgJ1wiIC8+XFxuJ1xuICAgICAgXTtcbiAgICB9LFxuICAgIC8qIF9UT19TVkdfRU5EXyAqL1xuXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBjb21tb25SZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdmFyIHBvaW50LCBsZW4gPSB0aGlzLnBvaW50cy5sZW5ndGgsXG4gICAgICAgICAgeCA9IHRoaXMucGF0aE9mZnNldC54LFxuICAgICAgICAgIHkgPSB0aGlzLnBhdGhPZmZzZXQueTtcblxuICAgICAgaWYgKCFsZW4gfHwgaXNOYU4odGhpcy5wb2ludHNbbGVuIC0gMV0ueSkpIHtcbiAgICAgICAgLy8gZG8gbm90IGRyYXcgaWYgbm8gcG9pbnRzIG9yIG9kZCBwb2ludHNcbiAgICAgICAgLy8gTmFOIGNvbWVzIGZyb20gcGFyc2VGbG9hdCBvZiBhIGVtcHR5IHN0cmluZyBpbiBwYXJzZXJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyh0aGlzLnBvaW50c1swXS54IC0geCwgdGhpcy5wb2ludHNbMF0ueSAtIHkpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBwb2ludCA9IHRoaXMucG9pbnRzW2ldO1xuICAgICAgICBjdHgubGluZVRvKHBvaW50LnggLSB4LCBwb2ludC55IC0geSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuY29tbW9uUmVuZGVyKGN0eCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29tcGxleGl0eSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gY29tcGxleGl0eSBvZiB0aGlzIGluc3RhbmNlXG4gICAgICovXG4gICAgY29tcGxleGl0eTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoJ3BvaW50cycpLmxlbmd0aDtcbiAgICB9XG4gIH0pO1xuXG4gIC8qIF9GUk9NX1NWR19TVEFSVF8gKi9cbiAgLyoqXG4gICAqIExpc3Qgb2YgYXR0cmlidXRlIG5hbWVzIHRvIGFjY291bnQgZm9yIHdoZW4gcGFyc2luZyBTVkcgZWxlbWVudCAodXNlZCBieSB7QGxpbmsgZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50fSlcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBvbHlsaW5lXG4gICAqIEBzZWU6IGh0dHA6Ly93d3cudzMub3JnL1RSL1NWRy9zaGFwZXMuaHRtbCNQb2x5bGluZUVsZW1lbnRcbiAgICovXG4gIGZhYnJpYy5Qb2x5bGluZS5BVFRSSUJVVEVfTkFNRVMgPSBmYWJyaWMuU0hBUkVEX0FUVFJJQlVURVMuY29uY2F0KCk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFicmljLlBvbHlsaW5lIGluc3RhbmNlIGZyb20gYW4gU1ZHIGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBvbHlsaW5lXG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBjYWxsYmFjayBmdW5jdGlvbiBpbnZva2VkIGFmdGVyIHBhcnNpbmdcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKi9cbiAgZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50R2VuZXJhdG9yID0gZnVuY3Rpb24oX2NsYXNzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHsgfSk7XG5cbiAgICAgIHZhciBwb2ludHMgPSBmYWJyaWMucGFyc2VQb2ludHNBdHRyaWJ1dGUoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3BvaW50cycpKSxcbiAgICAgICAgICBwYXJzZWRBdHRyaWJ1dGVzID0gZmFicmljLnBhcnNlQXR0cmlidXRlcyhlbGVtZW50LCBmYWJyaWNbX2NsYXNzXS5BVFRSSUJVVEVfTkFNRVMpO1xuICAgICAgcGFyc2VkQXR0cmlidXRlcy5mcm9tU1ZHID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKG5ldyBmYWJyaWNbX2NsYXNzXShwb2ludHMsIGV4dGVuZChwYXJzZWRBdHRyaWJ1dGVzLCBvcHRpb25zKSkpO1xuICAgIH07XG4gIH07XG5cbiAgZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50ID0gZmFicmljLlBvbHlsaW5lLmZyb21FbGVtZW50R2VuZXJhdG9yKCdQb2x5bGluZScpO1xuXG4gIC8qIF9GUk9NX1NWR19FTkRfICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFicmljLlBvbHlsaW5lIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Qb2x5bGluZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5QYXRoIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5Qb2x5bGluZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdQb2x5bGluZScsIG9iamVjdCwgY2FsbGJhY2ssICdwb2ludHMnKTtcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7fSksXG4gICAgICBwcm9qZWN0U3Ryb2tlT25Qb2ludHMgPSBmYWJyaWMudXRpbC5wcm9qZWN0U3Ryb2tlT25Qb2ludHM7XG5cbiAgaWYgKGZhYnJpYy5Qb2x5Z29uKSB7XG4gICAgZmFicmljLndhcm4oJ2ZhYnJpYy5Qb2x5Z29uIGlzIGFscmVhZHkgZGVmaW5lZCcpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBQb2x5Z29uIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuUG9seWdvblxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuUG9seWxpbmVcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlBvbHlnb24jaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5Qb2x5Z29uID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLlBvbHlsaW5lLCAvKiogQGxlbmRzIGZhYnJpYy5Qb2x5Z29uLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3BvbHlnb24nLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcHJvamVjdFN0cm9rZU9uUG9pbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcHJvamVjdFN0cm9rZU9uUG9pbnRzKHRoaXMucG9pbnRzLCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMuY29tbW9uUmVuZGVyKGN0eCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgdGhpcy5fcmVuZGVyUGFpbnRJbk9yZGVyKGN0eCk7XG4gICAgfSxcblxuICB9KTtcblxuICAvKiBfRlJPTV9TVkdfU1RBUlRfICovXG4gIC8qKlxuICAgKiBMaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhY2NvdW50IGZvciB3aGVuIHBhcnNpbmcgU1ZHIGVsZW1lbnQgKHVzZWQgYnkgYGZhYnJpYy5Qb2x5Z29uLmZyb21FbGVtZW50YClcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBvbHlnb25cbiAgICogQHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3NoYXBlcy5odG1sI1BvbHlnb25FbGVtZW50XG4gICAqL1xuICBmYWJyaWMuUG9seWdvbi5BVFRSSUJVVEVfTkFNRVMgPSBmYWJyaWMuU0hBUkVEX0FUVFJJQlVURVMuY29uY2F0KCk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMge0BsaW5rIGZhYnJpYy5Qb2x5Z29ufSBpbnN0YW5jZSBmcm9tIGFuIFNWRyBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Qb2x5Z29uXG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBmYWJyaWMuUG9seWdvbi5mcm9tRWxlbWVudCA9IGZhYnJpYy5Qb2x5bGluZS5mcm9tRWxlbWVudEdlbmVyYXRvcignUG9seWdvbicpO1xuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZhYnJpYy5Qb2x5Z29uIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5Qb2x5Z29uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYW4gZmFicmljLlBhdGggaW5zdGFuY2UgaXMgY3JlYXRlZFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgZmFicmljLlBvbHlnb24uZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdQb2x5Z29uJywgb2JqZWN0LCBjYWxsYmFjaywgJ3BvaW50cycpO1xuICB9O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBtaW4gPSBmYWJyaWMudXRpbC5hcnJheS5taW4sXG4gICAgICBtYXggPSBmYWJyaWMudXRpbC5hcnJheS5tYXgsXG4gICAgICBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgY2xvbmUgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUsXG4gICAgICB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZDtcblxuICBpZiAoZmFicmljLlBhdGgpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLlBhdGggaXMgYWxyZWFkeSBkZWZpbmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdGggY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5QYXRoXG4gICAqIEBleHRlbmRzIGZhYnJpYy5PYmplY3RcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTEjcGF0aF9hbmRfcGF0aGdyb3VwfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuUGF0aCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLlBhdGggPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcyhmYWJyaWMuT2JqZWN0LCAvKiogQGxlbmRzIGZhYnJpYy5QYXRoLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ3BhdGgnLFxuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgcGF0aCBwb2ludHNcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcGF0aDogbnVsbCxcblxuICAgIGNhY2hlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuY2FjaGVQcm9wZXJ0aWVzLmNvbmNhdCgncGF0aCcsICdmaWxsUnVsZScpLFxuXG4gICAgc3RhdGVQcm9wZXJ0aWVzOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5zdGF0ZVByb3BlcnRpZXMuY29uY2F0KCdwYXRoJyksXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBwYXRoIFBhdGggZGF0YSAoc2VxdWVuY2Ugb2YgY29vcmRpbmF0ZXMgYW5kIGNvcnJlc3BvbmRpbmcgXCJjb21tYW5kXCIgdG9rZW5zKVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuUGF0aH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uIChwYXRoLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gY2xvbmUob3B0aW9ucyB8fCB7fSk7XG4gICAgICBkZWxldGUgb3B0aW9ucy5wYXRoO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX3NldFBhdGgocGF0aCB8fCBbXSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICogQHByaXZhdGVcbiAgICAqIEBwYXJhbSB7QXJyYXl8U3RyaW5nfSBwYXRoIFBhdGggZGF0YSAoc2VxdWVuY2Ugb2YgY29vcmRpbmF0ZXMgYW5kIGNvcnJlc3BvbmRpbmcgXCJjb21tYW5kXCIgdG9rZW5zKVxuICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICovXG4gICAgX3NldFBhdGg6IGZ1bmN0aW9uIChwYXRoLCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnBhdGggPSBmYWJyaWMudXRpbC5tYWtlUGF0aFNpbXBsZXIoXG4gICAgICAgIEFycmF5LmlzQXJyYXkocGF0aCkgPyBwYXRoIDogZmFicmljLnV0aWwucGFyc2VQYXRoKHBhdGgpXG4gICAgICApO1xuXG4gICAgICBmYWJyaWMuUG9seWxpbmUucHJvdG90eXBlLl9zZXRQb3NpdGlvbkRpbWVuc2lvbnMuY2FsbCh0aGlzLCBvcHRpb25zIHx8IHt9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IGNvbnRleHQgdG8gcmVuZGVyIHBhdGggb25cbiAgICAgKi9cbiAgICBfcmVuZGVyUGF0aENvbW1hbmRzOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHZhciBjdXJyZW50LCAvLyBjdXJyZW50IGluc3RydWN0aW9uXG4gICAgICAgICAgc3VicGF0aFN0YXJ0WCA9IDAsXG4gICAgICAgICAgc3VicGF0aFN0YXJ0WSA9IDAsXG4gICAgICAgICAgeCA9IDAsIC8vIGN1cnJlbnQgeFxuICAgICAgICAgIHkgPSAwLCAvLyBjdXJyZW50IHlcbiAgICAgICAgICBjb250cm9sWCA9IDAsIC8vIGN1cnJlbnQgY29udHJvbCBwb2ludCB4XG4gICAgICAgICAgY29udHJvbFkgPSAwLCAvLyBjdXJyZW50IGNvbnRyb2wgcG9pbnQgeVxuICAgICAgICAgIGwgPSAtdGhpcy5wYXRoT2Zmc2V0LngsXG4gICAgICAgICAgdCA9IC10aGlzLnBhdGhPZmZzZXQueTtcblxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5wYXRoLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cbiAgICAgICAgY3VycmVudCA9IHRoaXMucGF0aFtpXTtcblxuICAgICAgICBzd2l0Y2ggKGN1cnJlbnRbMF0pIHsgLy8gZmlyc3QgbGV0dGVyXG5cbiAgICAgICAgICBjYXNlICdMJzogLy8gbGluZXRvLCBhYnNvbHV0ZVxuICAgICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIGwsIHkgKyB0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnTSc6IC8vIG1vdmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzFdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgICBzdWJwYXRoU3RhcnRYID0geDtcbiAgICAgICAgICAgIHN1YnBhdGhTdGFydFkgPSB5O1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgbCwgeSArIHQpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdDJzogLy8gYmV6aWVyQ3VydmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzVdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbNl07XG4gICAgICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbM107XG4gICAgICAgICAgICBjb250cm9sWSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhcbiAgICAgICAgICAgICAgY3VycmVudFsxXSArIGwsXG4gICAgICAgICAgICAgIGN1cnJlbnRbMl0gKyB0LFxuICAgICAgICAgICAgICBjb250cm9sWCArIGwsXG4gICAgICAgICAgICAgIGNvbnRyb2xZICsgdCxcbiAgICAgICAgICAgICAgeCArIGwsXG4gICAgICAgICAgICAgIHkgKyB0XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdRJzogLy8gcXVhZHJhdGljQ3VydmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKFxuICAgICAgICAgICAgICBjdXJyZW50WzFdICsgbCxcbiAgICAgICAgICAgICAgY3VycmVudFsyXSArIHQsXG4gICAgICAgICAgICAgIGN1cnJlbnRbM10gKyBsLFxuICAgICAgICAgICAgICBjdXJyZW50WzRdICsgdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzNdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgICBjb250cm9sWCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICBjb250cm9sWSA9IGN1cnJlbnRbMl07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgeCA9IHN1YnBhdGhTdGFydFg7XG4gICAgICAgICAgICB5ID0gc3VicGF0aFN0YXJ0WTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBjb250ZXh0IHRvIHJlbmRlciBwYXRoIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB0aGlzLl9yZW5kZXJQYXRoQ29tbWFuZHMoY3R4KTtcbiAgICAgIHRoaXMuX3JlbmRlclBhaW50SW5PcmRlcihjdHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICcjPGZhYnJpYy5QYXRoICgnICsgdGhpcy5jb21wbGV4aXR5KCkgK1xuICAgICAgICAnKTogeyBcInRvcFwiOiAnICsgdGhpcy50b3AgKyAnLCBcImxlZnRcIjogJyArIHRoaXMubGVmdCArICcgfT4nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kKHRoaXMuY2FsbFN1cGVyKCd0b09iamVjdCcsIHByb3BlcnRpZXNUb0luY2x1ZGUpLCB7XG4gICAgICAgIHBhdGg6IHRoaXMucGF0aC5tYXAoZnVuY3Rpb24oaXRlbSkgeyByZXR1cm4gaXRlbS5zbGljZSgpOyB9KSxcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGRhdGFsZXNzIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvRGF0YWxlc3NPYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBvID0gdGhpcy50b09iamVjdChbJ3NvdXJjZVBhdGgnXS5jb25jYXQocHJvcGVydGllc1RvSW5jbHVkZSkpO1xuICAgICAgaWYgKG8uc291cmNlUGF0aCkge1xuICAgICAgICBkZWxldGUgby5wYXRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG87XG4gICAgfSxcblxuICAgIC8qIF9UT19TVkdfU1RBUlRfICovXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gYW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIHRoZSBzcGVjaWZpYyBzdmcgcmVwcmVzZW50YXRpb25cbiAgICAgKiBvZiB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBfdG9TVkc6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhdGggPSBmYWJyaWMudXRpbC5qb2luUGF0aCh0aGlzLnBhdGgpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgJzxwYXRoICcsICdDT01NT05fUEFSVFMnLFxuICAgICAgICAnZD1cIicsIHBhdGgsXG4gICAgICAgICdcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgJyxcbiAgICAgICAgJy8+XFxuJ1xuICAgICAgXTtcbiAgICB9LFxuXG4gICAgX2dldE9mZnNldFRyYW5zZm9ybTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGlnaXRzID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTO1xuICAgICAgcmV0dXJuICcgdHJhbnNsYXRlKCcgKyB0b0ZpeGVkKC10aGlzLnBhdGhPZmZzZXQueCwgZGlnaXRzKSArICcsICcgK1xuICAgICAgICAgIHRvRml4ZWQoLXRoaXMucGF0aE9mZnNldC55LCBkaWdpdHMpICsgJyknO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyBjbGlwUGF0aCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXZpdmVyXSBNZXRob2QgZm9yIGZ1cnRoZXIgcGFyc2luZyBvZiBzdmcgcmVwcmVzZW50YXRpb24uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b0NsaXBQYXRoU1ZHOiBmdW5jdGlvbihyZXZpdmVyKSB7XG4gICAgICB2YXIgYWRkaXRpb25hbFRyYW5zZm9ybSA9IHRoaXMuX2dldE9mZnNldFRyYW5zZm9ybSgpO1xuICAgICAgcmV0dXJuICdcXHQnICsgdGhpcy5fY3JlYXRlQmFzZUNsaXBQYXRoU1ZHTWFya3VwKFxuICAgICAgICB0aGlzLl90b1NWRygpLCB7IHJldml2ZXI6IHJldml2ZXIsIGFkZGl0aW9uYWxUcmFuc2Zvcm06IGFkZGl0aW9uYWxUcmFuc2Zvcm0gfVxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygc3ZnIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9TVkc6IGZ1bmN0aW9uKHJldml2ZXIpIHtcbiAgICAgIHZhciBhZGRpdGlvbmFsVHJhbnNmb3JtID0gdGhpcy5fZ2V0T2Zmc2V0VHJhbnNmb3JtKCk7XG4gICAgICByZXR1cm4gdGhpcy5fY3JlYXRlQmFzZVNWR01hcmt1cCh0aGlzLl90b1NWRygpLCB7IHJldml2ZXI6IHJldml2ZXIsIGFkZGl0aW9uYWxUcmFuc2Zvcm06IGFkZGl0aW9uYWxUcmFuc2Zvcm0gIH0pO1xuICAgIH0sXG4gICAgLyogX1RPX1NWR19FTkRfICovXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG51bWJlciByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZSBjb21wbGV4aXR5XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBjb21wbGV4aXR5IG9mIHRoaXMgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjb21wbGV4aXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhdGgubGVuZ3RoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9jYWxjRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cbiAgICAgIHZhciBhWCA9IFtdLFxuICAgICAgICAgIGFZID0gW10sXG4gICAgICAgICAgY3VycmVudCwgLy8gY3VycmVudCBpbnN0cnVjdGlvblxuICAgICAgICAgIHN1YnBhdGhTdGFydFggPSAwLFxuICAgICAgICAgIHN1YnBhdGhTdGFydFkgPSAwLFxuICAgICAgICAgIHggPSAwLCAvLyBjdXJyZW50IHhcbiAgICAgICAgICB5ID0gMCwgLy8gY3VycmVudCB5XG4gICAgICAgICAgYm91bmRzO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5wYXRoLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cbiAgICAgICAgY3VycmVudCA9IHRoaXMucGF0aFtpXTtcblxuICAgICAgICBzd2l0Y2ggKGN1cnJlbnRbMF0pIHsgLy8gZmlyc3QgbGV0dGVyXG5cbiAgICAgICAgICBjYXNlICdMJzogLy8gbGluZXRvLCBhYnNvbHV0ZVxuICAgICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgICAgIGJvdW5kcyA9IFtdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdNJzogLy8gbW92ZVRvLCBhYnNvbHV0ZVxuICAgICAgICAgICAgeCA9IGN1cnJlbnRbMV07XG4gICAgICAgICAgICB5ID0gY3VycmVudFsyXTtcbiAgICAgICAgICAgIHN1YnBhdGhTdGFydFggPSB4O1xuICAgICAgICAgICAgc3VicGF0aFN0YXJ0WSA9IHk7XG4gICAgICAgICAgICBib3VuZHMgPSBbXTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnQyc6IC8vIGJlemllckN1cnZlVG8sIGFic29sdXRlXG4gICAgICAgICAgICBib3VuZHMgPSBmYWJyaWMudXRpbC5nZXRCb3VuZHNPZkN1cnZlKHgsIHksXG4gICAgICAgICAgICAgIGN1cnJlbnRbMV0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbMl0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbM10sXG4gICAgICAgICAgICAgIGN1cnJlbnRbNF0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbNV0sXG4gICAgICAgICAgICAgIGN1cnJlbnRbNl1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB4ID0gY3VycmVudFs1XTtcbiAgICAgICAgICAgIHkgPSBjdXJyZW50WzZdO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdRJzogLy8gcXVhZHJhdGljQ3VydmVUbywgYWJzb2x1dGVcbiAgICAgICAgICAgIGJvdW5kcyA9IGZhYnJpYy51dGlsLmdldEJvdW5kc09mQ3VydmUoeCwgeSxcbiAgICAgICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICAgICAgY3VycmVudFsyXSxcbiAgICAgICAgICAgICAgY3VycmVudFsxXSxcbiAgICAgICAgICAgICAgY3VycmVudFsyXSxcbiAgICAgICAgICAgICAgY3VycmVudFszXSxcbiAgICAgICAgICAgICAgY3VycmVudFs0XVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHggPSBjdXJyZW50WzNdO1xuICAgICAgICAgICAgeSA9IGN1cnJlbnRbNF07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ3onOlxuICAgICAgICAgIGNhc2UgJ1onOlxuICAgICAgICAgICAgeCA9IHN1YnBhdGhTdGFydFg7XG4gICAgICAgICAgICB5ID0gc3VicGF0aFN0YXJ0WTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJvdW5kcy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgICAgIGFYLnB1c2gocG9pbnQueCk7XG4gICAgICAgICAgYVkucHVzaChwb2ludC55KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGFYLnB1c2goeCk7XG4gICAgICAgIGFZLnB1c2goeSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtaW5YID0gbWluKGFYKSB8fCAwLFxuICAgICAgICAgIG1pblkgPSBtaW4oYVkpIHx8IDAsXG4gICAgICAgICAgbWF4WCA9IG1heChhWCkgfHwgMCxcbiAgICAgICAgICBtYXhZID0gbWF4KGFZKSB8fCAwLFxuICAgICAgICAgIGRlbHRhWCA9IG1heFggLSBtaW5YLFxuICAgICAgICAgIGRlbHRhWSA9IG1heFkgLSBtaW5ZO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0OiBtaW5YLFxuICAgICAgICB0b3A6IG1pblksXG4gICAgICAgIHdpZHRoOiBkZWx0YVgsXG4gICAgICAgIGhlaWdodDogZGVsdGFZXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgZmFicmljLlBhdGggZnJvbSBhbiBvYmplY3RcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBhdGhcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5QYXRoIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5QYXRoLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvYmplY3Quc291cmNlUGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwYXRoVXJsID0gb2JqZWN0LnNvdXJjZVBhdGg7XG4gICAgICBmYWJyaWMubG9hZFNWR0Zyb21VUkwocGF0aFVybCwgZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBwYXRoID0gZWxlbWVudHNbMF07XG4gICAgICAgIHBhdGguc2V0T3B0aW9ucyhvYmplY3QpO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGZhYnJpYy5PYmplY3QuX2Zyb21PYmplY3QoJ1BhdGgnLCBvYmplY3QsIGNhbGxiYWNrLCAncGF0aCcpO1xuICAgIH1cbiAgfTtcblxuICAvKiBfRlJPTV9TVkdfU1RBUlRfICovXG4gIC8qKlxuICAgKiBMaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhY2NvdW50IGZvciB3aGVuIHBhcnNpbmcgU1ZHIGVsZW1lbnQgKHVzZWQgYnkgYGZhYnJpYy5QYXRoLmZyb21FbGVtZW50YClcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBhdGhcbiAgICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9TVkcvcGF0aHMuaHRtbCNQYXRoRWxlbWVudFxuICAgKi9cbiAgZmFicmljLlBhdGguQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdChbJ2QnXSk7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgZmFicmljLlBhdGggZnJvbSBhbiBTVkcgPHBhdGg+IGVsZW1lbnRcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlBhdGhcbiAgICogQHBhcmFtIHtTVkdFbGVtZW50fSBlbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5QYXRoIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIE9wdGlvbnMgY2FsbGJhY2sgaW52b2tlZCBhZnRlciBwYXJzaW5nIGlzIGZpbmlzaGVkXG4gICAqL1xuICBmYWJyaWMuUGF0aC5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgdmFyIHBhcnNlZEF0dHJpYnV0ZXMgPSBmYWJyaWMucGFyc2VBdHRyaWJ1dGVzKGVsZW1lbnQsIGZhYnJpYy5QYXRoLkFUVFJJQlVURV9OQU1FUyk7XG4gICAgcGFyc2VkQXR0cmlidXRlcy5mcm9tU1ZHID0gdHJ1ZTtcbiAgICBjYWxsYmFjayhuZXcgZmFicmljLlBhdGgocGFyc2VkQXR0cmlidXRlcy5kLCBleHRlbmQocGFyc2VkQXR0cmlidXRlcywgb3B0aW9ucykpKTtcbiAgfTtcbiAgLyogX0ZST01fU1ZHX0VORF8gKi9cblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgbWluID0gZmFicmljLnV0aWwuYXJyYXkubWluLFxuICAgICAgbWF4ID0gZmFicmljLnV0aWwuYXJyYXkubWF4O1xuXG4gIGlmIChmYWJyaWMuR3JvdXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR3JvdXAgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5Hcm91cFxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuT2JqZWN0XG4gICAqIEBtaXhlcyBmYWJyaWMuQ29sbGVjdGlvblxuICAgKiBAdHV0b3JpYWwge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vZmFicmljLWludHJvLXBhcnQtMyNncm91cHN9XG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5Hcm91cCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLkdyb3VwID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLk9iamVjdCwgZmFicmljLkNvbGxlY3Rpb24sIC8qKiBAbGVuZHMgZmFicmljLkdyb3VwLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ2dyb3VwJyxcblxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIHN0cm9rZVxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgc3Ryb2tlV2lkdGg6IDAsXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgY2xpY2ssIG1vdXNlb3ZlciwgbW91c2VvdXQgZXZlbnRzICYgaG92ZXJDdXJzb3Igc2hvdWxkIGFsc28gY2hlY2sgZm9yIHN1YnRhcmdldHNcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdWJUYXJnZXRDaGVjazogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBHcm91cHMgYXJlIGNvbnRhaW5lciwgZG8gbm90IHJlbmRlciBhbnl0aGluZyBvbiB0aGV5ciBvd24sIGVuY2Ugbm8gY2FjaGUgcHJvcGVydGllc1xuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjYWNoZVByb3BlcnRpZXM6IFtdLFxuXG4gICAgLyoqXG4gICAgICogc2V0T25Hcm91cCBpcyBhIG1ldGhvZCB1c2VkIGZvciBUZXh0Qm94IHRoYXQgaXMgbm8gbW9yZSB1c2VkIHNpbmNlIDIuMC4wIFRoZSBiZWhhdmlvciBpcyBzdGlsbFxuICAgICAqIGF2YWlsYWJsZSBzZXR0aW5nIHRoaXMgYm9vbGVhbiB0byB0cnVlLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHVzZVNldE9uR3JvdXA6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0cyBHcm91cCBvYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2lzQWxyZWFkeUdyb3VwZWRdIGlmIHRydWUsIG9iamVjdHMgaGF2ZSBiZWVuIGdyb3VwZWQgYWxyZWFkeS5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoaXNBcmdcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvYmplY3RzLCBvcHRpb25zLCBpc0FscmVhZHlHcm91cGVkKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHRoaXMuX29iamVjdHMgPSBbXTtcbiAgICAgIC8vIGlmIG9iamVjdHMgZW5jbG9zZWQgaW4gYSBncm91cCBoYXZlIGJlZW4gZ3JvdXBlZCBhbHJlYWR5LFxuICAgICAgLy8gd2UgY2Fubm90IGNoYW5nZSBwcm9wZXJ0aWVzIG9mIG9iamVjdHMuXG4gICAgICAvLyBUaHVzIHdlIG5lZWQgdG8gc2V0IG9wdGlvbnMgdG8gZ3JvdXAgd2l0aG91dCBvYmplY3RzLFxuICAgICAgaXNBbHJlYWR5R3JvdXBlZCAmJiB0aGlzLmNhbGxTdXBlcignaW5pdGlhbGl6ZScsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5fb2JqZWN0cyA9IG9iamVjdHMgfHwgW107XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGktLTsgKSB7XG4gICAgICAgIHRoaXMuX29iamVjdHNbaV0uZ3JvdXAgPSB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQWxyZWFkeUdyb3VwZWQpIHtcbiAgICAgICAgdmFyIGNlbnRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5jZW50ZXJQb2ludDtcbiAgICAgICAgLy8gd2Ugd2FudCB0byBzZXQgb3JpZ2lucyBiZWZvcmUgY2FsY3VsYXRpbmcgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgICAgLy8gc28gdGhhdCB0aGUgdG9wbGVmdCBjYW4gYmUgc2V0IHdpdGggdGhhdCBpbiBtaW5kLlxuICAgICAgICAvLyBpZiBzcGVjaWZpYyB0b3AgYW5kIGxlZnQgYXJlIHBhc3NlZCwgYXJlIG92ZXJ3cml0dGVuIGxhdGVyXG4gICAgICAgIC8vIHdpdGggdGhlIGNhbGxTdXBlcignaW5pdGlhbGl6ZScsIG9wdGlvbnMpXG4gICAgICAgIGlmIChvcHRpb25zLm9yaWdpblggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMub3JpZ2luWCA9IG9wdGlvbnMub3JpZ2luWDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5vcmlnaW5ZICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLm9yaWdpblkgPSBvcHRpb25zLm9yaWdpblk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgY29taW5nIGZyb20gc3ZnIGkgZG8gbm90IHdhbnQgdG8gY2FsYyBib3VuZHMuXG4gICAgICAgIC8vIGkgYXNzdW1lIHdpZHRoIGFuZCBoZWlnaHQgYXJlIHBhc3NlZCBhbG9uZyBvcHRpb25zXG4gICAgICAgIGNlbnRlciB8fCB0aGlzLl9jYWxjQm91bmRzKCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZU9iamVjdHNDb29yZHMoY2VudGVyKTtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuY2VudGVyUG9pbnQ7XG4gICAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0aWFsaXplJywgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlT2JqZWN0c0FDb29yZHMoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRDb29yZHMoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdXBkYXRlT2JqZWN0c0FDb29yZHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNraXBDb250cm9scyA9IHRydWU7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGktLTsgKXtcbiAgICAgICAgdGhpcy5fb2JqZWN0c1tpXS5zZXRDb29yZHMoc2tpcENvbnRyb2xzKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtza2lwQ29vcmRzQ2hhbmdlXSBpZiB0cnVlLCBjb29yZGluYXRlcyBvZiBvYmplY3RzIGVuY2xvc2VkIGluIGEgZ3JvdXAgZG8gbm90IGNoYW5nZVxuICAgICAqL1xuICAgIF91cGRhdGVPYmplY3RzQ29vcmRzOiBmdW5jdGlvbihjZW50ZXIpIHtcbiAgICAgIHZhciBjZW50ZXIgPSBjZW50ZXIgfHwgdGhpcy5nZXRDZW50ZXJQb2ludCgpO1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpLS07ICl7XG4gICAgICAgIHRoaXMuX3VwZGF0ZU9iamVjdENvb3Jkcyh0aGlzLl9vYmplY3RzW2ldLCBjZW50ZXIpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5Qb2ludH0gY2VudGVyLCBjdXJyZW50IGNlbnRlciBvZiBncm91cC5cbiAgICAgKi9cbiAgICBfdXBkYXRlT2JqZWN0Q29vcmRzOiBmdW5jdGlvbihvYmplY3QsIGNlbnRlcikge1xuICAgICAgdmFyIG9iamVjdExlZnQgPSBvYmplY3QubGVmdCxcbiAgICAgICAgICBvYmplY3RUb3AgPSBvYmplY3QudG9wLFxuICAgICAgICAgIHNraXBDb250cm9scyA9IHRydWU7XG5cbiAgICAgIG9iamVjdC5zZXQoe1xuICAgICAgICBsZWZ0OiBvYmplY3RMZWZ0IC0gY2VudGVyLngsXG4gICAgICAgIHRvcDogb2JqZWN0VG9wIC0gY2VudGVyLnlcbiAgICAgIH0pO1xuICAgICAgb2JqZWN0Lmdyb3VwID0gdGhpcztcbiAgICAgIG9iamVjdC5zZXRDb29yZHMoc2tpcENvbnRyb2xzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW5hdGlvbiBvZiBhIGdyb3VwXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAqL1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnIzxmYWJyaWMuR3JvdXA6ICgnICsgdGhpcy5jb21wbGV4aXR5KCkgKyAnKT4nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuIG9iamVjdCB0byBhIGdyb3VwOyBUaGVuIHJlY2FsY3VsYXRlcyBncm91cCdzIGRpbWVuc2lvbiwgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Hcm91cH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBhZGRXaXRoVXBkYXRlOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHZhciBuZXN0ZWQgPSAhIXRoaXMuZ3JvdXA7XG4gICAgICB0aGlzLl9yZXN0b3JlT2JqZWN0c1N0YXRlKCk7XG4gICAgICBmYWJyaWMudXRpbC5yZXNldE9iamVjdFRyYW5zZm9ybSh0aGlzKTtcbiAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgaWYgKG5lc3RlZCkge1xuICAgICAgICAgIC8vIGlmIHRoaXMgZ3JvdXAgaXMgaW5zaWRlIGFub3RoZXIgZ3JvdXAsIHdlIG5lZWQgdG8gcHJlIHRyYW5zZm9ybSB0aGUgb2JqZWN0XG4gICAgICAgICAgZmFicmljLnV0aWwucmVtb3ZlVHJhbnNmb3JtRnJvbU9iamVjdChvYmplY3QsIHRoaXMuZ3JvdXAuY2FsY1RyYW5zZm9ybU1hdHJpeCgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9vYmplY3RzLnB1c2gob2JqZWN0KTtcbiAgICAgICAgb2JqZWN0Lmdyb3VwID0gdGhpcztcbiAgICAgICAgb2JqZWN0Ll9zZXQoJ2NhbnZhcycsIHRoaXMuY2FudmFzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NhbGNCb3VuZHMoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZU9iamVjdHNDb29yZHMoKTtcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgaWYgKG5lc3RlZCkge1xuICAgICAgICB0aGlzLmdyb3VwLmFkZFdpdGhVcGRhdGUoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW4gb2JqZWN0IGZyb20gYSBncm91cDsgVGhlbiByZWNhbGN1bGF0ZXMgZ3JvdXAncyBkaW1lbnNpb24sIHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JvdXB9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgcmVtb3ZlV2l0aFVwZGF0ZTogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB0aGlzLl9yZXN0b3JlT2JqZWN0c1N0YXRlKCk7XG4gICAgICBmYWJyaWMudXRpbC5yZXNldE9iamVjdFRyYW5zZm9ybSh0aGlzKTtcblxuICAgICAgdGhpcy5yZW1vdmUob2JqZWN0KTtcbiAgICAgIHRoaXMuX2NhbGNCb3VuZHMoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZU9iamVjdHNDb29yZHMoKTtcbiAgICAgIHRoaXMuc2V0Q29vcmRzKCk7XG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9vbk9iamVjdEFkZGVkOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgb2JqZWN0Lmdyb3VwID0gdGhpcztcbiAgICAgIG9iamVjdC5fc2V0KCdjYW52YXMnLCB0aGlzLmNhbnZhcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX29uT2JqZWN0UmVtb3ZlZDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIGRlbGV0ZSBvYmplY3QuZ3JvdXA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGkgPSB0aGlzLl9vYmplY3RzLmxlbmd0aDtcbiAgICAgIGlmICh0aGlzLnVzZVNldE9uR3JvdXApIHtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHRoaXMuX29iamVjdHNbaV0uc2V0T25Hcm91cChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ2NhbnZhcycpIHtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgIHRoaXMuX29iamVjdHNbaV0uX3NldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmFicmljLk9iamVjdC5wcm90b3R5cGUuX3NldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICB2YXIgX2luY2x1ZGVEZWZhdWx0VmFsdWVzID0gdGhpcy5pbmNsdWRlRGVmYXVsdFZhbHVlcztcbiAgICAgIHZhciBvYmpzVG9PYmplY3QgPSB0aGlzLl9vYmplY3RzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiAhb2JqLmV4Y2x1ZGVGcm9tRXhwb3J0O1xuICAgICAgICB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICB2YXIgb3JpZ2luYWxEZWZhdWx0cyA9IG9iai5pbmNsdWRlRGVmYXVsdFZhbHVlcztcbiAgICAgICAgICBvYmouaW5jbHVkZURlZmF1bHRWYWx1ZXMgPSBfaW5jbHVkZURlZmF1bHRWYWx1ZXM7XG4gICAgICAgICAgdmFyIF9vYmogPSBvYmoudG9PYmplY3QocHJvcGVydGllc1RvSW5jbHVkZSk7XG4gICAgICAgICAgb2JqLmluY2x1ZGVEZWZhdWx0VmFsdWVzID0gb3JpZ2luYWxEZWZhdWx0cztcbiAgICAgICAgICByZXR1cm4gX29iajtcbiAgICAgICAgfSk7XG4gICAgICB2YXIgb2JqID0gZmFicmljLk9iamVjdC5wcm90b3R5cGUudG9PYmplY3QuY2FsbCh0aGlzLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIG9iai5vYmplY3RzID0gb2Jqc1RvT2JqZWN0O1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2UsIGluIGRhdGFsZXNzIG1vZGUuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9EYXRhbGVzc09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIG9ianNUb09iamVjdCwgc291cmNlUGF0aCA9IHRoaXMuc291cmNlUGF0aDtcbiAgICAgIGlmIChzb3VyY2VQYXRoKSB7XG4gICAgICAgIG9ianNUb09iamVjdCA9IHNvdXJjZVBhdGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIF9pbmNsdWRlRGVmYXVsdFZhbHVlcyA9IHRoaXMuaW5jbHVkZURlZmF1bHRWYWx1ZXM7XG4gICAgICAgIG9ianNUb09iamVjdCA9IHRoaXMuX29iamVjdHMubWFwKGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgIHZhciBvcmlnaW5hbERlZmF1bHRzID0gb2JqLmluY2x1ZGVEZWZhdWx0VmFsdWVzO1xuICAgICAgICAgIG9iai5pbmNsdWRlRGVmYXVsdFZhbHVlcyA9IF9pbmNsdWRlRGVmYXVsdFZhbHVlcztcbiAgICAgICAgICB2YXIgX29iaiA9IG9iai50b0RhdGFsZXNzT2JqZWN0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgICAgIG9iai5pbmNsdWRlRGVmYXVsdFZhbHVlcyA9IG9yaWdpbmFsRGVmYXVsdHM7XG4gICAgICAgICAgcmV0dXJuIF9vYmo7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdmFyIG9iaiA9IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnRvRGF0YWxlc3NPYmplY3QuY2FsbCh0aGlzLCBwcm9wZXJ0aWVzVG9JbmNsdWRlKTtcbiAgICAgIG9iai5vYmplY3RzID0gb2Jqc1RvT2JqZWN0O1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBpbnN0YW5jZSBvbiBhIGdpdmVuIGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IGNvbnRleHQgdG8gcmVuZGVyIGluc3RhbmNlIG9uXG4gICAgICovXG4gICAgcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHRoaXMuX3RyYW5zZm9ybURvbmUgPSB0cnVlO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ3JlbmRlcicsIGN0eCk7XG4gICAgICB0aGlzLl90cmFuc2Zvcm1Eb25lID0gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlY2lkZSBpZiB0aGUgb2JqZWN0IHNob3VsZCBjYWNoZSBvciBub3QuIENyZWF0ZSBpdHMgb3duIGNhY2hlIGxldmVsXG4gICAgICogbmVlZHNJdHNPd25DYWNoZSBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBvYmplY3QgZHJhd2luZyBtZXRob2QgcmVxdWlyZXNcbiAgICAgKiBhIGNhY2hlIHN0ZXAuIE5vbmUgb2YgdGhlIGZhYnJpYyBjbGFzc2VzIHJlcXVpcmVzIGl0LlxuICAgICAqIEdlbmVyYWxseSB5b3UgZG8gbm90IGNhY2hlIG9iamVjdHMgaW4gZ3JvdXBzIGJlY2F1c2UgdGhlIGdyb3VwIGlzIGFscmVhZHkgY2FjaGVkLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgc2hvdWxkQ2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG93bkNhY2hlID0gZmFicmljLk9iamVjdC5wcm90b3R5cGUuc2hvdWxkQ2FjaGUuY2FsbCh0aGlzKTtcbiAgICAgIGlmIChvd25DYWNoZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGlmICh0aGlzLl9vYmplY3RzW2ldLndpbGxEcmF3U2hhZG93KCkpIHtcbiAgICAgICAgICAgIHRoaXMub3duQ2FjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG93bkNhY2hlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGlzIG9iamVjdCBvciBhIGNoaWxkIG9iamVjdCB3aWxsIGNhc3QgYSBzaGFkb3dcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHdpbGxEcmF3U2hhZG93OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS53aWxsRHJhd1NoYWRvdy5jYWxsKHRoaXMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX29iamVjdHNbaV0ud2lsbERyYXdTaGFkb3coKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoaXMgZ3JvdXAgb3IgaXRzIHBhcmVudCBncm91cCBhcmUgY2FjaGluZywgcmVjdXJzaXZlbHkgdXBcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzT25BQ2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMub3duQ2FjaGluZyB8fCAodGhpcy5ncm91cCAmJiB0aGlzLmdyb3VwLmlzT25BQ2FjaGUoKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgdGhlIGRyYXdpbmcgb3BlcmF0aW9uIGZvciBhbiBvYmplY3Qgb24gYSBzcGVjaWZpZWQgY29udGV4dFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBkcmF3T2JqZWN0OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl9vYmplY3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHRoaXMuX29iamVjdHNbaV0ucmVuZGVyKGN0eCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9kcmF3Q2xpcFBhdGgoY3R4LCB0aGlzLmNsaXBQYXRoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgY2FjaGUgaXMgZGlydHlcbiAgICAgKi9cbiAgICBpc0NhY2hlRGlydHk6IGZ1bmN0aW9uKHNraXBDYW52YXMpIHtcbiAgICAgIGlmICh0aGlzLmNhbGxTdXBlcignaXNDYWNoZURpcnR5Jywgc2tpcENhbnZhcykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuc3RhdGVmdWxsQ2FjaGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX29iamVjdHNbaV0uaXNDYWNoZURpcnR5KHRydWUpKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2NhY2hlQ2FudmFzKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGdyb3VwIGhhcyBub3QgYSBjYWNoZSBjYW52YXMgdGhlcmUgaXMgbm90aGluZyB0byBjbGVhblxuICAgICAgICAgICAgdmFyIHggPSB0aGlzLmNhY2hlV2lkdGggLyB0aGlzLnpvb21YLCB5ID0gdGhpcy5jYWNoZUhlaWdodCAvIHRoaXMuem9vbVk7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZUNvbnRleHQuY2xlYXJSZWN0KC14IC8gMiwgLXkgLyAyLCB4LCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVzdG9yZXMgb3JpZ2luYWwgc3RhdGUgb2YgZWFjaCBvZiBncm91cCBvYmplY3RzIChvcmlnaW5hbCBzdGF0ZSBpcyB0aGF0IHdoaWNoIHdhcyBiZWZvcmUgZ3JvdXAgd2FzIGNyZWF0ZWQpLlxuICAgICAqIGlmIHRoZSBuZXN0ZWQgYm9vbGVhbiBpcyB0cnVlLCB0aGUgb3JpZ2luYWwgc3RhdGUgd2lsbCBiZSByZXN0b3JlZCBqdXN0IGZvciB0aGVcbiAgICAgKiBmaXJzdCBncm91cCBhbmQgbm90IGZvciBhbGwgdGhlIGdyb3VwIGNoYWluXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG5lc3RlZCB0ZWxsIHRoZSBmdW5jdGlvbiB0byByZXN0b3JlIG9iamVjdCBzdGF0ZSB1cCB0byB0aGUgcGFyZW50IGdyb3VwIGFuZCBub3QgbW9yZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Hcm91cH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBfcmVzdG9yZU9iamVjdHNTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZ3JvdXBNYXRyaXggPSB0aGlzLmNhbGNPd25NYXRyaXgoKTtcbiAgICAgIHRoaXMuX29iamVjdHMuZm9yRWFjaChmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgLy8gaW5zdGVhZCBvZiB1c2luZyBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGZhYnJpYy51dGlsLmFkZFRyYW5zZm9ybVRvT2JqZWN0KG9iamVjdCwgZ3JvdXBNYXRyaXgpO1xuICAgICAgICBkZWxldGUgb2JqZWN0Lmdyb3VwO1xuICAgICAgICBvYmplY3Quc2V0Q29vcmRzKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95cyBhIGdyb3VwIChyZXN0b3Jpbmcgc3RhdGUgb2YgaXRzIG9iamVjdHMpXG4gICAgICogQHJldHVybiB7ZmFicmljLkdyb3VwfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gd2hlbiBncm91cCBpcyBkZXN0cm95ZWQgb2JqZWN0cyBuZWVkcyB0byBnZXQgYSByZXBhaW50IHRvIGJlIGV2ZW50dWFsbHlcbiAgICAgIC8vIGRpc3BsYXllZCBvbiBjYW52YXMuXG4gICAgICB0aGlzLl9vYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIG9iamVjdC5zZXQoJ2RpcnR5JywgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLl9yZXN0b3JlT2JqZWN0c1N0YXRlKCk7XG4gICAgfSxcblxuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdkaXNwb3NlJyk7XG4gICAgICB0aGlzLmZvckVhY2hPYmplY3QoZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICBvYmplY3QuZGlzcG9zZSAmJiBvYmplY3QuZGlzcG9zZSgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9vYmplY3RzID0gW107XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG1ha2UgYSBncm91cCBhbiBhY3RpdmUgc2VsZWN0aW9uLCByZW1vdmUgdGhlIGdyb3VwIGZyb20gY2FudmFzXG4gICAgICogdGhlIGdyb3VwIGhhcyB0byBiZSBvbiBjYW52YXMgZm9yIHRoaXMgdG8gd29yay5cbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuQWN0aXZlU2VsZWN0aW9ufSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHRvQWN0aXZlU2VsZWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgIHRoaXMuX29iamVjdHMgPSBbXTtcbiAgICAgIHZhciBvcHRpb25zID0gdGhpcy50b09iamVjdCgpO1xuICAgICAgZGVsZXRlIG9wdGlvbnMub2JqZWN0cztcbiAgICAgIHZhciBhY3RpdmVTZWxlY3Rpb24gPSBuZXcgZmFicmljLkFjdGl2ZVNlbGVjdGlvbihbXSk7XG4gICAgICBhY3RpdmVTZWxlY3Rpb24uc2V0KG9wdGlvbnMpO1xuICAgICAgYWN0aXZlU2VsZWN0aW9uLnR5cGUgPSAnYWN0aXZlU2VsZWN0aW9uJztcbiAgICAgIGNhbnZhcy5yZW1vdmUodGhpcyk7XG4gICAgICBvYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIG9iamVjdC5ncm91cCA9IGFjdGl2ZVNlbGVjdGlvbjtcbiAgICAgICAgb2JqZWN0LmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgY2FudmFzLmFkZChvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICBhY3RpdmVTZWxlY3Rpb24uY2FudmFzID0gY2FudmFzO1xuICAgICAgYWN0aXZlU2VsZWN0aW9uLl9vYmplY3RzID0gb2JqZWN0cztcbiAgICAgIGNhbnZhcy5fYWN0aXZlT2JqZWN0ID0gYWN0aXZlU2VsZWN0aW9uO1xuICAgICAgYWN0aXZlU2VsZWN0aW9uLnNldENvb3JkcygpO1xuICAgICAgcmV0dXJuIGFjdGl2ZVNlbGVjdGlvbjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVzdHJveXMgYSBncm91cCAocmVzdG9yaW5nIHN0YXRlIG9mIGl0cyBvYmplY3RzKVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5Hcm91cH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICB1bmdyb3VwT25DYW52YXM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jlc3RvcmVPYmplY3RzU3RhdGUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBjb29yZGluYXRlcyBvZiBhbGwgb2JqZWN0cyBpbnNpZGUgZ3JvdXBcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JvdXB9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0T2JqZWN0c0Nvb3JkczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2tpcENvbnRyb2xzID0gdHJ1ZTtcbiAgICAgIHRoaXMuZm9yRWFjaE9iamVjdChmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgb2JqZWN0LnNldENvb3Jkcyhza2lwQ29udHJvbHMpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2FsY0JvdW5kczogZnVuY3Rpb24ob25seVdpZHRoSGVpZ2h0KSB7XG4gICAgICB2YXIgYVggPSBbXSxcbiAgICAgICAgICBhWSA9IFtdLFxuICAgICAgICAgIG8sIHByb3AsIGNvb3JkcyxcbiAgICAgICAgICBwcm9wcyA9IFsndHInLCAnYnInLCAnYmwnLCAndGwnXSxcbiAgICAgICAgICBpID0gMCwgaUxlbiA9IHRoaXMuX29iamVjdHMubGVuZ3RoLFxuICAgICAgICAgIGosIGpMZW4gPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoIDsgaSA8IGlMZW47ICsraSkge1xuICAgICAgICBvID0gdGhpcy5fb2JqZWN0c1tpXTtcbiAgICAgICAgY29vcmRzID0gby5jYWxjQUNvb3JkcygpO1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaisrKSB7XG4gICAgICAgICAgcHJvcCA9IHByb3BzW2pdO1xuICAgICAgICAgIGFYLnB1c2goY29vcmRzW3Byb3BdLngpO1xuICAgICAgICAgIGFZLnB1c2goY29vcmRzW3Byb3BdLnkpO1xuICAgICAgICB9XG4gICAgICAgIG8uYUNvb3JkcyA9IGNvb3JkcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZ2V0Qm91bmRzKGFYLCBhWSwgb25seVdpZHRoSGVpZ2h0KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0Qm91bmRzOiBmdW5jdGlvbihhWCwgYVksIG9ubHlXaWR0aEhlaWdodCkge1xuICAgICAgdmFyIG1pblhZID0gbmV3IGZhYnJpYy5Qb2ludChtaW4oYVgpLCBtaW4oYVkpKSxcbiAgICAgICAgICBtYXhYWSA9IG5ldyBmYWJyaWMuUG9pbnQobWF4KGFYKSwgbWF4KGFZKSksXG4gICAgICAgICAgdG9wID0gbWluWFkueSB8fCAwLCBsZWZ0ID0gbWluWFkueCB8fCAwLFxuICAgICAgICAgIHdpZHRoID0gKG1heFhZLnggLSBtaW5YWS54KSB8fCAwLFxuICAgICAgICAgIGhlaWdodCA9IChtYXhYWS55IC0gbWluWFkueSkgfHwgMDtcbiAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgaWYgKCFvbmx5V2lkdGhIZWlnaHQpIHtcbiAgICAgICAgLy8gdGhlIGJvdW5kaW5nIGJveCBhbHdheXMgZmluZHMgdGhlIHRvcGxlZnQgbW9zdCBjb3JuZXIuXG4gICAgICAgIC8vIHdoYXRldmVyIGlzIHRoZSBncm91cCBvcmlnaW4sIHdlIHNldCB1cCBoZXJlIHRoZSBsZWZ0L3RvcCBwb3NpdGlvbi5cbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbkJ5T3JpZ2luKHsgeDogbGVmdCwgeTogdG9wIH0sICdsZWZ0JywgJ3RvcCcpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIHN2ZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24ocmV2aXZlcikge1xuICAgICAgdmFyIHN2Z1N0cmluZyA9IFsnPGcgJywgJ0NPTU1PTl9QQVJUUycsICcgPlxcbiddO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdmdTdHJpbmcucHVzaCgnXFx0XFx0JywgdGhpcy5fb2JqZWN0c1tpXS50b1NWRyhyZXZpdmVyKSk7XG4gICAgICB9XG4gICAgICBzdmdTdHJpbmcucHVzaCgnPC9nPlxcbicpO1xuICAgICAgcmV0dXJuIHN2Z1N0cmluZztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdHlsZXMtc3RyaW5nIGZvciBzdmctZXhwb3J0LCBzcGVjaWZpYyB2ZXJzaW9uIGZvciBncm91cFxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICAgKi9cbiAgICBnZXRTdmdTdHlsZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9wYWNpdHkgPSB0eXBlb2YgdGhpcy5vcGFjaXR5ICE9PSAndW5kZWZpbmVkJyAmJiB0aGlzLm9wYWNpdHkgIT09IDEgP1xuICAgICAgICAgICAgJ29wYWNpdHk6ICcgKyB0aGlzLm9wYWNpdHkgKyAnOycgOiAnJyxcbiAgICAgICAgICB2aXNpYmlsaXR5ID0gdGhpcy52aXNpYmxlID8gJycgOiAnIHZpc2liaWxpdHk6IGhpZGRlbjsnO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgdGhpcy5nZXRTdmdGaWx0ZXIoKSxcbiAgICAgICAgdmlzaWJpbGl0eVxuICAgICAgXS5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdmcgY2xpcFBhdGggcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmV2aXZlcl0gTWV0aG9kIGZvciBmdXJ0aGVyIHBhcnNpbmcgb2Ygc3ZnIHJlcHJlc2VudGF0aW9uLlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9DbGlwUGF0aFNWRzogZnVuY3Rpb24ocmV2aXZlcikge1xuICAgICAgdmFyIHN2Z1N0cmluZyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdmdTdHJpbmcucHVzaCgnXFx0JywgdGhpcy5fb2JqZWN0c1tpXS50b0NsaXBQYXRoU1ZHKHJldml2ZXIpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUJhc2VDbGlwUGF0aFNWR01hcmt1cChzdmdTdHJpbmcsIHsgcmV2aXZlcjogcmV2aXZlciB9KTtcbiAgICB9LFxuICAgIC8qIF9UT19TVkdfRU5EXyAqL1xuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyB7QGxpbmsgZmFicmljLkdyb3VwfSBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuR3JvdXBcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGEgZ3JvdXAgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGdyb3VwIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5Hcm91cC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIHZhciBvYmplY3RzID0gb2JqZWN0Lm9iamVjdHMsXG4gICAgICAgIG9wdGlvbnMgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUob2JqZWN0LCB0cnVlKTtcbiAgICBkZWxldGUgb3B0aW9ucy5vYmplY3RzO1xuICAgIGlmICh0eXBlb2Ygb2JqZWN0cyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGl0IGhhcyB0byBiZSBhbiB1cmwgb3Igc29tZXRoaW5nIHdlbnQgd3JvbmcuXG4gICAgICBmYWJyaWMubG9hZFNWR0Zyb21VUkwob2JqZWN0cywgZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgICAgIHZhciBncm91cCA9IGZhYnJpYy51dGlsLmdyb3VwU1ZHRWxlbWVudHMoZWxlbWVudHMsIG9iamVjdCwgb2JqZWN0cyk7XG4gICAgICAgIGdyb3VwLnNldChvcHRpb25zKTtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soZ3JvdXApO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RzKG9iamVjdHMsIGZ1bmN0aW9uIChlbmxpdmVuZWRPYmplY3RzKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZShvYmplY3QsIHRydWUpO1xuICAgICAgZGVsZXRlIG9wdGlvbnMub2JqZWN0cztcbiAgICAgIGZhYnJpYy51dGlsLmVubGl2ZW5PYmplY3RFbmxpdmFibGVzKG9iamVjdCwgb3B0aW9ucywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhuZXcgZmFicmljLkdyb3VwKGVubGl2ZW5lZE9iamVjdHMsIG9wdGlvbnMsIHRydWUpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSk7XG5cbiAgaWYgKGZhYnJpYy5BY3RpdmVTZWxlY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR3JvdXAgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5BY3RpdmVTZWxlY3Rpb25cbiAgICogQGV4dGVuZHMgZmFicmljLkdyb3VwXG4gICAqIEB0dXRvcmlhbCB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9mYWJyaWMtaW50cm8tcGFydC0zI2dyb3Vwc31cbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkFjdGl2ZVNlbGVjdGlvbiNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKi9cbiAgZmFicmljLkFjdGl2ZVNlbGVjdGlvbiA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5Hcm91cCwgLyoqIEBsZW5kcyBmYWJyaWMuQWN0aXZlU2VsZWN0aW9uLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ2FjdGl2ZVNlbGVjdGlvbicsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RzIEFjdGl2ZVNlbGVjdGlvbiBvYmplY3RzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKG9iamVjdHMsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdGhpcy5fb2JqZWN0cyA9IG9iamVjdHMgfHwgW107XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGktLTsgKSB7XG4gICAgICAgIHRoaXMuX29iamVjdHNbaV0uZ3JvdXAgPSB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5vcmlnaW5YKSB7XG4gICAgICAgIHRoaXMub3JpZ2luWCA9IG9wdGlvbnMub3JpZ2luWDtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLm9yaWdpblkpIHtcbiAgICAgICAgdGhpcy5vcmlnaW5ZID0gb3B0aW9ucy5vcmlnaW5ZO1xuICAgICAgfVxuICAgICAgdGhpcy5fY2FsY0JvdW5kcygpO1xuICAgICAgdGhpcy5fdXBkYXRlT2JqZWN0c0Nvb3JkcygpO1xuICAgICAgZmFicmljLk9iamVjdC5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5zZXRDb29yZHMoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRlIGFjdGl2ZVNlbGVjdGlvbiB0byBhIG5vcm1hbCBncm91cCxcbiAgICAgKiBIaWdoIGxldmVsIGZ1bmN0aW9uIHRoYXQgYXV0b21hdGljYWxseSBhZGRzIGl0IHRvIGNhbnZhcyBhc1xuICAgICAqIGFjdGl2ZSBvYmplY3QuIG5vIGV2ZW50cyBmaXJlZC5cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuR3JvdXB9XG4gICAgICovXG4gICAgdG9Hcm91cDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMuY29uY2F0KCk7XG4gICAgICB0aGlzLl9vYmplY3RzID0gW107XG4gICAgICB2YXIgb3B0aW9ucyA9IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLnRvT2JqZWN0LmNhbGwodGhpcyk7XG4gICAgICB2YXIgbmV3R3JvdXAgPSBuZXcgZmFicmljLkdyb3VwKFtdKTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLnR5cGU7XG4gICAgICBuZXdHcm91cC5zZXQob3B0aW9ucyk7XG4gICAgICBvYmplY3RzLmZvckVhY2goZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIG9iamVjdC5jYW52YXMucmVtb3ZlKG9iamVjdCk7XG4gICAgICAgIG9iamVjdC5ncm91cCA9IG5ld0dyb3VwO1xuICAgICAgfSk7XG4gICAgICBuZXdHcm91cC5fb2JqZWN0cyA9IG9iamVjdHM7XG4gICAgICBpZiAoIXRoaXMuY2FudmFzKSB7XG4gICAgICAgIHJldHVybiBuZXdHcm91cDtcbiAgICAgIH1cbiAgICAgIHZhciBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgIGNhbnZhcy5hZGQobmV3R3JvdXApO1xuICAgICAgY2FudmFzLl9hY3RpdmVPYmplY3QgPSBuZXdHcm91cDtcbiAgICAgIG5ld0dyb3VwLnNldENvb3JkcygpO1xuICAgICAgcmV0dXJuIG5ld0dyb3VwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJZiByZXR1cm5zIHRydWUsIGRlc2VsZWN0aW9uIGlzIGNhbmNlbGxlZC5cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBbY2FuY2VsXVxuICAgICAqL1xuICAgIG9uRGVzZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgZ3JvdXBcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICcjPGZhYnJpYy5BY3RpdmVTZWxlY3Rpb246ICgnICsgdGhpcy5jb21wbGV4aXR5KCkgKyAnKT4nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWNpZGUgaWYgdGhlIG9iamVjdCBzaG91bGQgY2FjaGUgb3Igbm90LiBDcmVhdGUgaXRzIG93biBjYWNoZSBsZXZlbFxuICAgICAqIG9iamVjdENhY2hpbmcgaXMgYSBnbG9iYWwgZmxhZywgd2lucyBvdmVyIGV2ZXJ5dGhpbmdcbiAgICAgKiBuZWVkc0l0c093bkNhY2hlIHNob3VsZCBiZSB1c2VkIHdoZW4gdGhlIG9iamVjdCBkcmF3aW5nIG1ldGhvZCByZXF1aXJlc1xuICAgICAqIGEgY2FjaGUgc3RlcC4gTm9uZSBvZiB0aGUgZmFicmljIGNsYXNzZXMgcmVxdWlyZXMgaXQuXG4gICAgICogR2VuZXJhbGx5IHlvdSBkbyBub3QgY2FjaGUgb2JqZWN0cyBpbiBncm91cHMgYmVjYXVzZSB0aGUgZ3JvdXAgb3V0c2lkZSBpcyBjYWNoZWQuXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzaG91bGRDYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHRoaXMgZ3JvdXAgb3IgaXRzIHBhcmVudCBncm91cCBhcmUgY2FjaGluZywgcmVjdXJzaXZlbHkgdXBcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzT25BQ2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGNvbnRyb2xzIGFuZCBib3JkZXJzIGZvciB0aGUgb2JqZWN0XG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3R5bGVPdmVycmlkZV0gcHJvcGVydGllcyB0byBvdmVycmlkZSB0aGUgb2JqZWN0IHN0eWxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtjaGlsZHJlbk92ZXJyaWRlXSBwcm9wZXJ0aWVzIHRvIG92ZXJyaWRlIHRoZSBjaGlsZHJlbiBvdmVycmlkZXNcbiAgICAgKi9cbiAgICBfcmVuZGVyQ29udHJvbHM6IGZ1bmN0aW9uKGN0eCwgc3R5bGVPdmVycmlkZSwgY2hpbGRyZW5PdmVycmlkZSkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuaXNNb3ZpbmcgPyB0aGlzLmJvcmRlck9wYWNpdHlXaGVuTW92aW5nIDogMTtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdfcmVuZGVyQ29udHJvbHMnLCBjdHgsIHN0eWxlT3ZlcnJpZGUpO1xuICAgICAgY2hpbGRyZW5PdmVycmlkZSA9IGNoaWxkcmVuT3ZlcnJpZGUgfHwgeyB9O1xuICAgICAgaWYgKHR5cGVvZiBjaGlsZHJlbk92ZXJyaWRlLmhhc0NvbnRyb2xzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjaGlsZHJlbk92ZXJyaWRlLmhhc0NvbnRyb2xzID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBjaGlsZHJlbk92ZXJyaWRlLmZvckFjdGl2ZVNlbGVjdGlvbiA9IHRydWU7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fb2JqZWN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB0aGlzLl9vYmplY3RzW2ldLl9yZW5kZXJDb250cm9scyhjdHgsIGNoaWxkcmVuT3ZlcnJpZGUpO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyB7QGxpbmsgZmFicmljLkFjdGl2ZVNlbGVjdGlvbn0gaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkFjdGl2ZVNlbGVjdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYSBncm91cCBmcm9tXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gQ2FsbGJhY2sgdG8gaW52b2tlIHdoZW4gYW4gQWN0aXZlU2VsZWN0aW9uIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5BY3RpdmVTZWxlY3Rpb24uZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBmYWJyaWMudXRpbC5lbmxpdmVuT2JqZWN0cyhvYmplY3Qub2JqZWN0cywgZnVuY3Rpb24oZW5saXZlbmVkT2JqZWN0cykge1xuICAgICAgZGVsZXRlIG9iamVjdC5vYmplY3RzO1xuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobmV3IGZhYnJpYy5BY3RpdmVTZWxlY3Rpb24oZW5saXZlbmVkT2JqZWN0cywgb2JqZWN0LCB0cnVlKSk7XG4gICAgfSk7XG4gIH07XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kO1xuXG4gIGlmICghZ2xvYmFsLmZhYnJpYykge1xuICAgIGdsb2JhbC5mYWJyaWMgPSB7IH07XG4gIH1cblxuICBpZiAoZ2xvYmFsLmZhYnJpYy5JbWFnZSkge1xuICAgIGZhYnJpYy53YXJuKCdmYWJyaWMuSW1hZ2UgaXMgYWxyZWFkeSBkZWZpbmVkLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbWFnZSBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlXG4gICAqIEBleHRlbmRzIGZhYnJpYy5PYmplY3RcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTEjaW1hZ2VzfVxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5JbWFnZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5PYmplY3QsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIGFuIG9iamVjdFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ2ltYWdlJyxcblxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIGEgc3Ryb2tlLlxuICAgICAqIEZvciBpbWFnZSBxdWFsaXR5IGEgc3Ryb2tlIG11bHRpcGxlIG9mIDIgZ2l2ZXMgYmV0dGVyIHJlc3VsdHMuXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdHJva2VXaWR0aDogMCxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gY2FsbGluZyB7QGxpbmsgZmFicmljLkltYWdlLmdldFNyY30sIHJldHVybiB2YWx1ZSBmcm9tIGVsZW1lbnQgc3JjIHdpdGggYGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzcmMnKWAuXG4gICAgICogVGhpcyBhbGxvd3MgZm9yIHJlbGF0aXZlIHVybHMgYXMgaW1hZ2Ugc3JjLlxuICAgICAqIEBzaW5jZSAyLjcuMFxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNyY0Zyb21BdHRyaWJ1dGU6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogcHJpdmF0ZVxuICAgICAqIGNvbnRhaW5zIGxhc3QgdmFsdWUgb2Ygc2NhbGVYIHRvIGRldGVjdFxuICAgICAqIGlmIHRoZSBJbWFnZSBnb3QgcmVzaXplZCBhZnRlciB0aGUgbGFzdCBSZW5kZXJcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKi9cbiAgICBfbGFzdFNjYWxlWDogMSxcblxuICAgIC8qKlxuICAgICAqIHByaXZhdGVcbiAgICAgKiBjb250YWlucyBsYXN0IHZhbHVlIG9mIHNjYWxlWSB0byBkZXRlY3RcbiAgICAgKiBpZiB0aGUgSW1hZ2UgZ290IHJlc2l6ZWQgYWZ0ZXIgdGhlIGxhc3QgUmVuZGVyXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICovXG4gICAgX2xhc3RTY2FsZVk6IDEsXG5cbiAgICAvKipcbiAgICAgKiBwcml2YXRlXG4gICAgICogY29udGFpbnMgbGFzdCB2YWx1ZSBvZiBzY2FsaW5nIGFwcGxpZWQgYnkgdGhlIGFwcGx5IGZpbHRlciBjaGFpblxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqL1xuICAgIF9maWx0ZXJTY2FsaW5nWDogMSxcblxuICAgIC8qKlxuICAgICAqIHByaXZhdGVcbiAgICAgKiBjb250YWlucyBsYXN0IHZhbHVlIG9mIHNjYWxpbmcgYXBwbGllZCBieSB0aGUgYXBwbHkgZmlsdGVyIGNoYWluXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICovXG4gICAgX2ZpbHRlclNjYWxpbmdZOiAxLFxuXG4gICAgLyoqXG4gICAgICogbWluaW11bSBzY2FsZSBmYWN0b3IgdW5kZXIgd2hpY2ggYW55IHJlc2l6ZUZpbHRlciBpcyB0cmlnZ2VyZWQgdG8gcmVzaXplIHRoZSBpbWFnZVxuICAgICAqIDAgd2lsbCBkaXNhYmxlIHRoZSBhdXRvbWF0aWMgcmVzaXplLiAxIHdpbGwgdHJpZ2dlciBhdXRvbWF0aWNhbGx5IGFsd2F5cy5cbiAgICAgKiBudW1iZXIgYmlnZ2VyIHRoYW4gMSBhcmUgbm90IGltcGxlbWVudGVkIHlldC5cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKi9cbiAgICBtaW5pbXVtU2NhbGVUcmlnZ2VyOiAwLjUsXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgd2hlbiBjaGVja2luZyBpZlxuICAgICAqIHN0YXRlIG9mIGFuIG9iamVjdCBpcyBjaGFuZ2VkICh7QGxpbmsgZmFicmljLk9iamVjdCNoYXNTdGF0ZUNoYW5nZWR9KVxuICAgICAqIGFzIHdlbGwgYXMgZm9yIGhpc3RvcnkgKHVuZG8vcmVkbykgcHVycG9zZXNcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqL1xuICAgIHN0YXRlUHJvcGVydGllczogZmFicmljLk9iamVjdC5wcm90b3R5cGUuc3RhdGVQcm9wZXJ0aWVzLmNvbmNhdCgnY3JvcFgnLCAnY3JvcFknKSxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgcHJvcGVydGllcyB0byBjb25zaWRlciB3aGVuIGNoZWNraW5nIGlmIGNhY2hlIG5lZWRzIHJlZnJlc2hcbiAgICAgKiBUaG9zZSBwcm9wZXJ0aWVzIGFyZSBjaGVja2VkIGJ5IHN0YXRlZnVsbENhY2hlIE9OICggb3IgbGF6eSBtb2RlIGlmIHdlIHdhbnQgKSBvciBmcm9tIHNpbmdsZVxuICAgICAqIGNhbGxzIHRvIE9iamVjdC5zZXQoa2V5LCB2YWx1ZSkuIElmIHRoZSBrZXkgaXMgaW4gdGhpcyBsaXN0LCB0aGUgb2JqZWN0IGlzIG1hcmtlZCBhcyBkaXJ0eVxuICAgICAqIGFuZCByZWZyZXNoZWQgYXQgdGhlIG5leHQgcmVuZGVyXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBjYWNoZVByb3BlcnRpZXM6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmNhY2hlUHJvcGVydGllcy5jb25jYXQoJ2Nyb3BYJywgJ2Nyb3BZJyksXG5cbiAgICAvKipcbiAgICAgKiBrZXkgdXNlZCB0byByZXRyaWV2ZSB0aGUgdGV4dHVyZSByZXByZXNlbnRpbmcgdGhpcyBpbWFnZVxuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY2FjaGVLZXk6ICcnLFxuXG4gICAgLyoqXG4gICAgICogSW1hZ2UgY3JvcCBpbiBwaXhlbHMgZnJvbSBvcmlnaW5hbCBpbWFnZSBzaXplLlxuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEB0eXBlIE51bWJlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY3JvcFg6IDAsXG5cbiAgICAvKipcbiAgICAgKiBJbWFnZSBjcm9wIGluIHBpeGVscyBmcm9tIG9yaWdpbmFsIGltYWdlIHNpemUuXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjcm9wWTogMCxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoaXMgY2FudmFzIHdpbGwgdXNlIGltYWdlIHNtb290aGluZyB3aGVuIHBhaW50aW5nIHRoaXMgaW1hZ2UuXG4gICAgICogQWxzbyBpbmZsdWVuY2UgaWYgdGhlIGNhY2hlQ2FudmFzIGZvciB0aGlzIGltYWdlIHVzZXMgaW1hZ2VTbW9vdGhpbmdcbiAgICAgKiBAc2luY2UgNC4wLjAtYmV0YS4xMVxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGltYWdlU21vb3RoaW5nOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBJbWFnZSBjYW4gYmUgaW5pdGlhbGl6ZWQgd2l0aCBhbnkgY2FudmFzIGRyYXdhYmxlIG9yIGEgc3RyaW5nLlxuICAgICAqIFRoZSBzdHJpbmcgc2hvdWxkIGJlIGEgdXJsIGFuZCB3aWxsIGJlIGxvYWRlZCBhcyBhbiBpbWFnZS5cbiAgICAgKiBDYW52YXMgYW5kIEltYWdlIGVsZW1lbnQgd29yayBvdXQgb2YgdGhlIGJveCwgd2hpbGUgdmlkZW9zIHJlcXVpcmUgZXh0cmEgY29kZSB0byB3b3JrLlxuICAgICAqIFBsZWFzZSBjaGVjayB2aWRlbyBlbGVtZW50IGV2ZW50cyBmb3Igc2Vla2luZy5cbiAgICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQ2FudmFzRWxlbWVudCB8IEhUTUxWaWRlb0VsZW1lbnQgfCBTdHJpbmd9IGVsZW1lbnQgSW1hZ2UgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGNhbGwgYWZ0ZXIgZXZlbnR1YWwgZmlsdGVycyBhcHBsaWVkLlxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZX0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7IH0pO1xuICAgICAgdGhpcy5maWx0ZXJzID0gW107XG4gICAgICB0aGlzLmNhY2hlS2V5ID0gJ3RleHR1cmUnICsgZmFicmljLk9iamVjdC5fX3VpZCsrO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX2luaXRFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGltYWdlIGVsZW1lbnQgd2hpY2ggdGhpcyBpbnN0YW5jZSBpZiBiYXNlZCBvblxuICAgICAqIEByZXR1cm4ge0hUTUxJbWFnZUVsZW1lbnR9IEltYWdlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBnZXRFbGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50IHx8IHt9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGltYWdlIGVsZW1lbnQgZm9yIHRoaXMgaW5zdGFuY2UgdG8gYSBzcGVjaWZpZWQgb25lLlxuICAgICAqIElmIGZpbHRlcnMgZGVmaW5lZCB0aGV5IGFyZSBhcHBsaWVkIHRvIG5ldyBpbWFnZS5cbiAgICAgKiBZb3UgbWlnaHQgbmVlZCB0byBjYWxsIGBjYW52YXMucmVuZGVyQWxsYCBhbmQgYG9iamVjdC5zZXRDb29yZHNgIGFmdGVyIHJlcGxhY2luZywgdG8gcmVuZGVyIG5ldyBpbWFnZSBhbmQgdXBkYXRlIGNvbnRyb2xzIGFyZWEuXG4gICAgICogQHBhcmFtIHtIVE1MSW1hZ2VFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZX0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZXRFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICB0aGlzLnJlbW92ZVRleHR1cmUodGhpcy5jYWNoZUtleSk7XG4gICAgICB0aGlzLnJlbW92ZVRleHR1cmUodGhpcy5jYWNoZUtleSArICdfZmlsdGVyZWQnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fb3JpZ2luYWxFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2luaXRDb25maWcob3B0aW9ucyk7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICB0aGlzLmFwcGx5RmlsdGVycygpO1xuICAgICAgfVxuICAgICAgLy8gcmVzaXplRmlsdGVycyB3b3JrIG9uIHRoZSBhbHJlYWR5IGZpbHRlcmVkIGNvcHkuXG4gICAgICAvLyB3ZSBuZWVkIHRvIGFwcGx5IHJlc2l6ZUZpbHRlcnMgQUZURVIgbm9ybWFsIGZpbHRlcnMuXG4gICAgICAvLyBhcHBseVJlc2l6ZUZpbHRlcnMgaXMgcnVuIG1vcmUgb2Z0ZW4gdGhhbiBub3JtYWwgZmlsdGVyc1xuICAgICAgLy8gYW5kIGlzIHRyaWdnZXJlZCBieSB1c2VyIGludGVyYWN0aW9ucyByYXRoZXIgdGhhbiBkZXYgY29kZVxuICAgICAgaWYgKHRoaXMucmVzaXplRmlsdGVyKSB7XG4gICAgICAgIHRoaXMuYXBwbHlSZXNpemVGaWx0ZXJzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGVsZXRlIGEgc2luZ2xlIHRleHR1cmUgaWYgaW4gd2ViZ2wgbW9kZVxuICAgICAqL1xuICAgIHJlbW92ZVRleHR1cmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIGJhY2tlbmQgPSBmYWJyaWMuZmlsdGVyQmFja2VuZDtcbiAgICAgIGlmIChiYWNrZW5kICYmIGJhY2tlbmQuZXZpY3RDYWNoZXNGb3JLZXkpIHtcbiAgICAgICAgYmFja2VuZC5ldmljdENhY2hlc0ZvcktleShrZXkpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZWxldGUgdGV4dHVyZXMsIHJlZmVyZW5jZSB0byBlbGVtZW50cyBhbmQgZXZlbnR1YWxseSBKU0RPTSBjbGVhbnVwXG4gICAgICovXG4gICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2Rpc3Bvc2UnKTtcbiAgICAgIHRoaXMucmVtb3ZlVGV4dHVyZSh0aGlzLmNhY2hlS2V5KTtcbiAgICAgIHRoaXMucmVtb3ZlVGV4dHVyZSh0aGlzLmNhY2hlS2V5ICsgJ19maWx0ZXJlZCcpO1xuICAgICAgdGhpcy5fY2FjaGVDb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgWydfb3JpZ2luYWxFbGVtZW50JywgJ19lbGVtZW50JywgJ19maWx0ZXJlZEVsJywgJ19jYWNoZUNhbnZhcyddLmZvckVhY2goKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgZmFicmljLnV0aWwuY2xlYW5VcEpzZG9tTm9kZSh0aGlzW2VsZW1lbnRdKTtcbiAgICAgICAgdGhpc1tlbGVtZW50XSA9IHVuZGVmaW5lZDtcbiAgICAgIH0pLmJpbmQodGhpcykpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNyb3NzT3JpZ2luIHZhbHVlIChvZiB0aGUgY29ycmVzcG9uZGluZyBpbWFnZSBlbGVtZW50KVxuICAgICAqL1xuICAgIGdldENyb3NzT3JpZ2luOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9vcmlnaW5hbEVsZW1lbnQgJiYgKHRoaXMuX29yaWdpbmFsRWxlbWVudC5jcm9zc09yaWdpbiB8fCBudWxsKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvcmlnaW5hbCBzaXplIG9mIGFuIGltYWdlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBcIndpZHRoXCIgYW5kIFwiaGVpZ2h0XCIgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdldE9yaWdpbmFsU2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZ2V0RWxlbWVudCgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IGVsZW1lbnQubmF0dXJhbFdpZHRoIHx8IGVsZW1lbnQud2lkdGgsXG4gICAgICAgIGhlaWdodDogZWxlbWVudC5uYXR1cmFsSGVpZ2h0IHx8IGVsZW1lbnQuaGVpZ2h0XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfc3Ryb2tlOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICghdGhpcy5zdHJva2UgfHwgdGhpcy5zdHJva2VXaWR0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdyA9IHRoaXMud2lkdGggLyAyLCBoID0gdGhpcy5oZWlnaHQgLyAyO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbygtdywgLWgpO1xuICAgICAgY3R4LmxpbmVUbyh3LCAtaCk7XG4gICAgICBjdHgubGluZVRvKHcsIGgpO1xuICAgICAgY3R4LmxpbmVUbygtdywgaCk7XG4gICAgICBjdHgubGluZVRvKC13LCAtaCk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3Byb3BlcnRpZXNUb0luY2x1ZGVdIEFueSBwcm9wZXJ0aWVzIHRoYXQgeW91IG1pZ2h0IHdhbnQgdG8gYWRkaXRpb25hbGx5IGluY2x1ZGUgaW4gdGhlIG91dHB1dFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKHByb3BlcnRpZXNUb0luY2x1ZGUpIHtcbiAgICAgIHZhciBmaWx0ZXJzID0gW107XG5cbiAgICAgIHRoaXMuZmlsdGVycy5mb3JFYWNoKGZ1bmN0aW9uKGZpbHRlck9iaikge1xuICAgICAgICBpZiAoZmlsdGVyT2JqKSB7XG4gICAgICAgICAgZmlsdGVycy5wdXNoKGZpbHRlck9iai50b09iamVjdCgpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2YXIgb2JqZWN0ID0gZXh0ZW5kKFxuICAgICAgICB0aGlzLmNhbGxTdXBlcihcbiAgICAgICAgICAndG9PYmplY3QnLFxuICAgICAgICAgIFsnY3JvcFgnLCAnY3JvcFknXS5jb25jYXQocHJvcGVydGllc1RvSW5jbHVkZSlcbiAgICAgICAgKSwge1xuICAgICAgICAgIHNyYzogdGhpcy5nZXRTcmMoKSxcbiAgICAgICAgICBjcm9zc09yaWdpbjogdGhpcy5nZXRDcm9zc09yaWdpbigpLFxuICAgICAgICAgIGZpbHRlcnM6IGZpbHRlcnMsXG4gICAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMucmVzaXplRmlsdGVyKSB7XG4gICAgICAgIG9iamVjdC5yZXNpemVGaWx0ZXIgPSB0aGlzLnJlc2l6ZUZpbHRlci50b09iamVjdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGFuIGltYWdlIGhhcyBjcm9wIGFwcGxpZWQsIGluc3BlY3RpbmcgdmFsdWVzIG9mIGNyb3BYLGNyb3BZLHdpZHRoLGhlaWdodC5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGhhc0Nyb3A6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JvcFggfHwgdGhpcy5jcm9wWSB8fCB0aGlzLndpZHRoIDwgdGhpcy5fZWxlbWVudC53aWR0aCB8fCB0aGlzLmhlaWdodCA8IHRoaXMuX2VsZW1lbnQuaGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvKiBfVE9fU1ZHX1NUQVJUXyAqL1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3ZnIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7QXJyYXl9IGFuIGFycmF5IG9mIHN0cmluZ3Mgd2l0aCB0aGUgc3BlY2lmaWMgc3ZnIHJlcHJlc2VudGF0aW9uXG4gICAgICogb2YgdGhlIGluc3RhbmNlXG4gICAgICovXG4gICAgX3RvU1ZHOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzdmdTdHJpbmcgPSBbXSwgaW1hZ2VNYXJrdXAgPSBbXSwgc3Ryb2tlU3ZnLCBlbGVtZW50ID0gdGhpcy5fZWxlbWVudCxcbiAgICAgICAgICB4ID0gLXRoaXMud2lkdGggLyAyLCB5ID0gLXRoaXMuaGVpZ2h0IC8gMiwgY2xpcFBhdGggPSAnJywgaW1hZ2VSZW5kZXJpbmcgPSAnJztcbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5oYXNDcm9wKCkpIHtcbiAgICAgICAgdmFyIGNsaXBQYXRoSWQgPSBmYWJyaWMuT2JqZWN0Ll9fdWlkKys7XG4gICAgICAgIHN2Z1N0cmluZy5wdXNoKFxuICAgICAgICAgICc8Y2xpcFBhdGggaWQ9XCJpbWFnZUNyb3BfJyArIGNsaXBQYXRoSWQgKyAnXCI+XFxuJyxcbiAgICAgICAgICAnXFx0PHJlY3QgeD1cIicgKyB4ICsgJ1wiIHk9XCInICsgeSArICdcIiB3aWR0aD1cIicgKyB0aGlzLndpZHRoICsgJ1wiIGhlaWdodD1cIicgKyB0aGlzLmhlaWdodCArICdcIiAvPlxcbicsXG4gICAgICAgICAgJzwvY2xpcFBhdGg+XFxuJ1xuICAgICAgICApO1xuICAgICAgICBjbGlwUGF0aCA9ICcgY2xpcC1wYXRoPVwidXJsKCNpbWFnZUNyb3BfJyArIGNsaXBQYXRoSWQgKyAnKVwiICc7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaW1hZ2VTbW9vdGhpbmcpIHtcbiAgICAgICAgaW1hZ2VSZW5kZXJpbmcgPSAnXCIgaW1hZ2UtcmVuZGVyaW5nPVwib3B0aW1pemVTcGVlZCc7XG4gICAgICB9XG4gICAgICBpbWFnZU1hcmt1cC5wdXNoKCdcXHQ8aW1hZ2UgJywgJ0NPTU1PTl9QQVJUUycsICd4bGluazpocmVmPVwiJywgdGhpcy5nZXRTdmdTcmModHJ1ZSksXG4gICAgICAgICdcIiB4PVwiJywgeCAtIHRoaXMuY3JvcFgsICdcIiB5PVwiJywgeSAtIHRoaXMuY3JvcFksXG4gICAgICAgIC8vIHdlJ3JlIGVzc2VudGlhbGx5IG1vdmluZyBvcmlnaW4gb2YgdHJhbnNmb3JtYXRpb24gZnJvbSB0b3AvbGVmdCBjb3JuZXIgdG8gdGhlIGNlbnRlciBvZiB0aGUgc2hhcGVcbiAgICAgICAgLy8gYnkgd3JhcHBpbmcgaXQgaW4gY29udGFpbmVyIDxnPiBlbGVtZW50IHdpdGggYWN0dWFsIHRyYW5zZm9ybWF0aW9uLCB0aGVuIG9mZnNldHRpbmcgb2JqZWN0IHRvIHRoZSB0b3AvbGVmdFxuICAgICAgICAvLyBzbyB0aGF0IG9iamVjdCdzIGNlbnRlciBhbGlnbnMgd2l0aCBjb250YWluZXIncyBsZWZ0L3RvcFxuICAgICAgICAnXCIgd2lkdGg9XCInLCBlbGVtZW50LndpZHRoIHx8IGVsZW1lbnQubmF0dXJhbFdpZHRoLFxuICAgICAgICAnXCIgaGVpZ2h0PVwiJywgZWxlbWVudC5oZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQsXG4gICAgICAgIGltYWdlUmVuZGVyaW5nLFxuICAgICAgICAnXCInLCBjbGlwUGF0aCxcbiAgICAgICAgJz48L2ltYWdlPlxcbicpO1xuXG4gICAgICBpZiAodGhpcy5zdHJva2UgfHwgdGhpcy5zdHJva2VEYXNoQXJyYXkpIHtcbiAgICAgICAgdmFyIG9yaWdGaWxsID0gdGhpcy5maWxsO1xuICAgICAgICB0aGlzLmZpbGwgPSBudWxsO1xuICAgICAgICBzdHJva2VTdmcgPSBbXG4gICAgICAgICAgJ1xcdDxyZWN0ICcsXG4gICAgICAgICAgJ3g9XCInLCB4LCAnXCIgeT1cIicsIHksXG4gICAgICAgICAgJ1wiIHdpZHRoPVwiJywgdGhpcy53aWR0aCwgJ1wiIGhlaWdodD1cIicsIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICdcIiBzdHlsZT1cIicsIHRoaXMuZ2V0U3ZnU3R5bGVzKCksXG4gICAgICAgICAgJ1wiLz5cXG4nXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZmlsbCA9IG9yaWdGaWxsO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMucGFpbnRGaXJzdCAhPT0gJ2ZpbGwnKSB7XG4gICAgICAgIHN2Z1N0cmluZyA9IHN2Z1N0cmluZy5jb25jYXQoc3Ryb2tlU3ZnLCBpbWFnZU1hcmt1cCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3ZnU3RyaW5nID0gc3ZnU3RyaW5nLmNvbmNhdChpbWFnZU1hcmt1cCwgc3Ryb2tlU3ZnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdmdTdHJpbmc7XG4gICAgfSxcbiAgICAvKiBfVE9fU1ZHX0VORF8gKi9cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc291cmNlIG9mIGFuIGltYWdlXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBmaWx0ZXJlZCBpbmRpY2F0ZXMgaWYgdGhlIHNyYyBpcyBuZWVkZWQgZm9yIHN2Z1xuICAgICAqIEByZXR1cm4ge1N0cmluZ30gU291cmNlIG9mIGFuIGltYWdlXG4gICAgICovXG4gICAgZ2V0U3JjOiBmdW5jdGlvbihmaWx0ZXJlZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBmaWx0ZXJlZCA/IHRoaXMuX2VsZW1lbnQgOiB0aGlzLl9vcmlnaW5hbEVsZW1lbnQ7XG4gICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICBpZiAoZWxlbWVudC50b0RhdGFVUkwpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC50b0RhdGFVUkwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnNyY0Zyb21BdHRyaWJ1dGUpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50LnNyYztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNyYyB8fCAnJztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBzb3VyY2Ugb2YgYW4gaW1hZ2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc3JjIFNvdXJjZSBzdHJpbmcgKFVSTClcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIGlzIGludm9rZWQgd2hlbiBpbWFnZSBoYXMgYmVlbiBsb2FkZWQgKGFuZCBhbGwgZmlsdGVycyBoYXZlIGJlZW4gYXBwbGllZClcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmNyb3NzT3JpZ2luXSBjcm9zc09yaWdpbiB2YWx1ZSAob25lIG9mIFwiXCIsIFwiYW5vbnltb3VzXCIsIFwidXNlLWNyZWRlbnRpYWxzXCIpXG4gICAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0hUTUwvQ09SU19zZXR0aW5nc19hdHRyaWJ1dGVzXG4gICAgICogQHJldHVybiB7ZmFicmljLkltYWdlfSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldFNyYzogZnVuY3Rpb24oc3JjLCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgICAgZmFicmljLnV0aWwubG9hZEltYWdlKHNyYywgZnVuY3Rpb24oaW1nLCBpc0Vycm9yKSB7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudChpbWcsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zZXRXaWR0aEhlaWdodCgpO1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayh0aGlzLCBpc0Vycm9yKTtcbiAgICAgIH0sIHRoaXMsIG9wdGlvbnMgJiYgb3B0aW9ucy5jcm9zc09yaWdpbik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAnIzxmYWJyaWMuSW1hZ2U6IHsgc3JjOiBcIicgKyB0aGlzLmdldFNyYygpICsgJ1wiIH0+JztcbiAgICB9LFxuXG4gICAgYXBwbHlSZXNpemVGaWx0ZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBmaWx0ZXIgPSB0aGlzLnJlc2l6ZUZpbHRlcixcbiAgICAgICAgICBtaW5pbXVtU2NhbGUgPSB0aGlzLm1pbmltdW1TY2FsZVRyaWdnZXIsXG4gICAgICAgICAgb2JqZWN0U2NhbGUgPSB0aGlzLmdldFRvdGFsT2JqZWN0U2NhbGluZygpLFxuICAgICAgICAgIHNjYWxlWCA9IG9iamVjdFNjYWxlLnNjYWxlWCxcbiAgICAgICAgICBzY2FsZVkgPSBvYmplY3RTY2FsZS5zY2FsZVksXG4gICAgICAgICAgZWxlbWVudFRvRmlsdGVyID0gdGhpcy5fZmlsdGVyZWRFbCB8fCB0aGlzLl9vcmlnaW5hbEVsZW1lbnQ7XG4gICAgICBpZiAodGhpcy5ncm91cCkge1xuICAgICAgICB0aGlzLnNldCgnZGlydHknLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGlmICghZmlsdGVyIHx8IChzY2FsZVggPiBtaW5pbXVtU2NhbGUgJiYgc2NhbGVZID4gbWluaW11bVNjYWxlKSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudFRvRmlsdGVyO1xuICAgICAgICB0aGlzLl9maWx0ZXJTY2FsaW5nWCA9IDE7XG4gICAgICAgIHRoaXMuX2ZpbHRlclNjYWxpbmdZID0gMTtcbiAgICAgICAgdGhpcy5fbGFzdFNjYWxlWCA9IHNjYWxlWDtcbiAgICAgICAgdGhpcy5fbGFzdFNjYWxlWSA9IHNjYWxlWTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFmYWJyaWMuZmlsdGVyQmFja2VuZCkge1xuICAgICAgICBmYWJyaWMuZmlsdGVyQmFja2VuZCA9IGZhYnJpYy5pbml0RmlsdGVyQmFja2VuZCgpO1xuICAgICAgfVxuICAgICAgdmFyIGNhbnZhc0VsID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpLFxuICAgICAgICAgIGNhY2hlS2V5ID0gdGhpcy5fZmlsdGVyZWRFbCA/ICh0aGlzLmNhY2hlS2V5ICsgJ19maWx0ZXJlZCcpIDogdGhpcy5jYWNoZUtleSxcbiAgICAgICAgICBzb3VyY2VXaWR0aCA9IGVsZW1lbnRUb0ZpbHRlci53aWR0aCwgc291cmNlSGVpZ2h0ID0gZWxlbWVudFRvRmlsdGVyLmhlaWdodDtcbiAgICAgIGNhbnZhc0VsLndpZHRoID0gc291cmNlV2lkdGg7XG4gICAgICBjYW52YXNFbC5oZWlnaHQgPSBzb3VyY2VIZWlnaHQ7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gY2FudmFzRWw7XG4gICAgICB0aGlzLl9sYXN0U2NhbGVYID0gZmlsdGVyLnNjYWxlWCA9IHNjYWxlWDtcbiAgICAgIHRoaXMuX2xhc3RTY2FsZVkgPSBmaWx0ZXIuc2NhbGVZID0gc2NhbGVZO1xuICAgICAgZmFicmljLmZpbHRlckJhY2tlbmQuYXBwbHlGaWx0ZXJzKFxuICAgICAgICBbZmlsdGVyXSwgZWxlbWVudFRvRmlsdGVyLCBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0LCB0aGlzLl9lbGVtZW50LCBjYWNoZUtleSk7XG4gICAgICB0aGlzLl9maWx0ZXJTY2FsaW5nWCA9IGNhbnZhc0VsLndpZHRoIC8gdGhpcy5fb3JpZ2luYWxFbGVtZW50LndpZHRoO1xuICAgICAgdGhpcy5fZmlsdGVyU2NhbGluZ1kgPSBjYW52YXNFbC5oZWlnaHQgLyB0aGlzLl9vcmlnaW5hbEVsZW1lbnQuaGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGZpbHRlcnMgYXNzaWduZWQgdG8gdGhpcyBpbWFnZSAoZnJvbSBcImZpbHRlcnNcIiBhcnJheSkgb3IgZnJvbSBmaWx0ZXIgcGFyYW1cbiAgICAgKiBAbWV0aG9kIGFwcGx5RmlsdGVyc1xuICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbHRlcnMgdG8gYmUgYXBwbGllZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gZm9yUmVzaXppbmcgc3BlY2lmeSBpZiB0aGUgZmlsdGVyIG9wZXJhdGlvbiBpcyBhIHJlc2l6ZSBvcGVyYXRpb25cbiAgICAgKiBAcmV0dXJuIHt0aGlzQXJnfSByZXR1cm4gdGhlIGZhYnJpYy5JbWFnZSBvYmplY3RcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgYXBwbHlGaWx0ZXJzOiBmdW5jdGlvbihmaWx0ZXJzKSB7XG5cbiAgICAgIGZpbHRlcnMgPSBmaWx0ZXJzIHx8IHRoaXMuZmlsdGVycyB8fCBbXTtcbiAgICAgIGZpbHRlcnMgPSBmaWx0ZXJzLmZpbHRlcihmdW5jdGlvbihmaWx0ZXIpIHsgcmV0dXJuIGZpbHRlciAmJiAhZmlsdGVyLmlzTmV1dHJhbFN0YXRlKCk7IH0pO1xuICAgICAgdGhpcy5zZXQoJ2RpcnR5JywgdHJ1ZSk7XG5cbiAgICAgIC8vIG5lZWRzIHRvIGNsZWFyIG91dCBvciBXRUJHTCB3aWxsIG5vdCByZXNpemUgY29ycmVjdGx5XG4gICAgICB0aGlzLnJlbW92ZVRleHR1cmUodGhpcy5jYWNoZUtleSArICdfZmlsdGVyZWQnKTtcblxuICAgICAgaWYgKGZpbHRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9vcmlnaW5hbEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2ZpbHRlcmVkRWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9maWx0ZXJTY2FsaW5nWCA9IDE7XG4gICAgICAgIHRoaXMuX2ZpbHRlclNjYWxpbmdZID0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbWdFbGVtZW50ID0gdGhpcy5fb3JpZ2luYWxFbGVtZW50LFxuICAgICAgICAgIHNvdXJjZVdpZHRoID0gaW1nRWxlbWVudC5uYXR1cmFsV2lkdGggfHwgaW1nRWxlbWVudC53aWR0aCxcbiAgICAgICAgICBzb3VyY2VIZWlnaHQgPSBpbWdFbGVtZW50Lm5hdHVyYWxIZWlnaHQgfHwgaW1nRWxlbWVudC5oZWlnaHQ7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50ID09PSB0aGlzLl9vcmlnaW5hbEVsZW1lbnQpIHtcbiAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgaXMgdGhlIHNhbWUgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgZWxlbWVudFxuICAgICAgICB2YXIgY2FudmFzRWwgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCk7XG4gICAgICAgIGNhbnZhc0VsLndpZHRoID0gc291cmNlV2lkdGg7XG4gICAgICAgIGNhbnZhc0VsLmhlaWdodCA9IHNvdXJjZUhlaWdodDtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGNhbnZhc0VsO1xuICAgICAgICB0aGlzLl9maWx0ZXJlZEVsID0gY2FudmFzRWw7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gY2xlYXIgdGhlIGV4aXN0aW5nIGVsZW1lbnQgdG8gZ2V0IG5ldyBmaWx0ZXIgZGF0YVxuICAgICAgICAvLyBhbHNvIGRlcmVmZXJlbmNlIHRoZSBldmVudHVhbCByZXNpemVkIF9lbGVtZW50XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9maWx0ZXJlZEVsO1xuICAgICAgICB0aGlzLl9maWx0ZXJlZEVsLmdldENvbnRleHQoJzJkJykuY2xlYXJSZWN0KDAsIDAsIHNvdXJjZVdpZHRoLCBzb3VyY2VIZWlnaHQpO1xuICAgICAgICAvLyB3ZSBhbHNvIG5lZWQgdG8gcmVzaXplIGFnYWluIGF0IG5leHQgcmVuZGVyQWxsLCBzbyByZW1vdmUgc2F2ZWQgX2xhc3RTY2FsZVgvWVxuICAgICAgICB0aGlzLl9sYXN0U2NhbGVYID0gMTtcbiAgICAgICAgdGhpcy5fbGFzdFNjYWxlWSA9IDE7XG4gICAgICB9XG4gICAgICBpZiAoIWZhYnJpYy5maWx0ZXJCYWNrZW5kKSB7XG4gICAgICAgIGZhYnJpYy5maWx0ZXJCYWNrZW5kID0gZmFicmljLmluaXRGaWx0ZXJCYWNrZW5kKCk7XG4gICAgICB9XG4gICAgICBmYWJyaWMuZmlsdGVyQmFja2VuZC5hcHBseUZpbHRlcnMoXG4gICAgICAgIGZpbHRlcnMsIHRoaXMuX29yaWdpbmFsRWxlbWVudCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCwgdGhpcy5fZWxlbWVudCwgdGhpcy5jYWNoZUtleSk7XG4gICAgICBpZiAodGhpcy5fb3JpZ2luYWxFbGVtZW50LndpZHRoICE9PSB0aGlzLl9lbGVtZW50LndpZHRoIHx8XG4gICAgICAgIHRoaXMuX29yaWdpbmFsRWxlbWVudC5oZWlnaHQgIT09IHRoaXMuX2VsZW1lbnQuaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX2ZpbHRlclNjYWxpbmdYID0gdGhpcy5fZWxlbWVudC53aWR0aCAvIHRoaXMuX29yaWdpbmFsRWxlbWVudC53aWR0aDtcbiAgICAgICAgdGhpcy5fZmlsdGVyU2NhbGluZ1kgPSB0aGlzLl9lbGVtZW50LmhlaWdodCAvIHRoaXMuX29yaWdpbmFsRWxlbWVudC5oZWlnaHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBmYWJyaWMudXRpbC5zZXRJbWFnZVNtb290aGluZyhjdHgsIHRoaXMuaW1hZ2VTbW9vdGhpbmcpO1xuICAgICAgaWYgKHRoaXMuaXNNb3ZpbmcgIT09IHRydWUgJiYgdGhpcy5yZXNpemVGaWx0ZXIgJiYgdGhpcy5fbmVlZHNSZXNpemUoKSkge1xuICAgICAgICB0aGlzLmFwcGx5UmVzaXplRmlsdGVycygpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3Ryb2tlKGN0eCk7XG4gICAgICB0aGlzLl9yZW5kZXJQYWludEluT3JkZXIoY3R4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUGFpbnQgdGhlIGNhY2hlZCBjb3B5IG9mIHRoZSBvYmplY3Qgb24gdGhlIHRhcmdldCBjb250ZXh0LlxuICAgICAqIGl0IHdpbGwgc2V0IHRoZSBpbWFnZVNtb290aGluZyBmb3IgdGhlIGRyYXcgb3BlcmF0aW9uXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIGRyYXdDYWNoZU9uQ2FudmFzOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGZhYnJpYy51dGlsLnNldEltYWdlU21vb3RoaW5nKGN0eCwgdGhpcy5pbWFnZVNtb290aGluZyk7XG4gICAgICBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5kcmF3Q2FjaGVPbkNhbnZhcy5jYWxsKHRoaXMsIGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERlY2lkZSBpZiB0aGUgb2JqZWN0IHNob3VsZCBjYWNoZSBvciBub3QuIENyZWF0ZSBpdHMgb3duIGNhY2hlIGxldmVsXG4gICAgICogbmVlZHNJdHNPd25DYWNoZSBzaG91bGQgYmUgdXNlZCB3aGVuIHRoZSBvYmplY3QgZHJhd2luZyBtZXRob2QgcmVxdWlyZXNcbiAgICAgKiBhIGNhY2hlIHN0ZXAuIE5vbmUgb2YgdGhlIGZhYnJpYyBjbGFzc2VzIHJlcXVpcmVzIGl0LlxuICAgICAqIEdlbmVyYWxseSB5b3UgZG8gbm90IGNhY2hlIG9iamVjdHMgaW4gZ3JvdXBzIGJlY2F1c2UgdGhlIGdyb3VwIG91dHNpZGUgaXMgY2FjaGVkLlxuICAgICAqIFRoaXMgaXMgdGhlIHNwZWNpYWwgaW1hZ2UgdmVyc2lvbiB3aGVyZSB3ZSB3b3VsZCBsaWtlIHRvIGF2b2lkIGNhY2hpbmcgd2hlcmUgcG9zc2libGUuXG4gICAgICogRXNzZW50aWFsbHkgaW1hZ2VzIGRvIG5vdCBiZW5lZml0IGZyb20gY2FjaGluZy4gVGhleSBtYXkgcmVxdWlyZSBjYWNoaW5nLCBhbmQgaW4gdGhhdFxuICAgICAqIGNhc2Ugd2UgZG8gaXQuIEFsc28gY2FjaGluZyBhbiBpbWFnZSB1c3VhbGx5IGVuZHMgaW4gYSBsb3NzIG9mIGRldGFpbHMuXG4gICAgICogQSBmdWxsIHBlcmZvcm1hbmNlIGF1ZGl0IHNob3VsZCBiZSBkb25lLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgc2hvdWxkQ2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubmVlZHNJdHNPd25DYWNoZSgpO1xuICAgIH0sXG5cbiAgICBfcmVuZGVyRmlsbDogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB2YXIgZWxlbWVudFRvRHJhdyA9IHRoaXMuX2VsZW1lbnQ7XG4gICAgICBpZiAoIWVsZW1lbnRUb0RyYXcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHNjYWxlWCA9IHRoaXMuX2ZpbHRlclNjYWxpbmdYLCBzY2FsZVkgPSB0aGlzLl9maWx0ZXJTY2FsaW5nWSxcbiAgICAgICAgICB3ID0gdGhpcy53aWR0aCwgaCA9IHRoaXMuaGVpZ2h0LCBtaW4gPSBNYXRoLm1pbiwgbWF4ID0gTWF0aC5tYXgsXG4gICAgICAgICAgLy8gY3JvcCB2YWx1ZXMgY2Fubm90IGJlIGxlc3NlciB0aGFuIDAuXG4gICAgICAgICAgY3JvcFggPSBtYXgodGhpcy5jcm9wWCwgMCksIGNyb3BZID0gbWF4KHRoaXMuY3JvcFksIDApLFxuICAgICAgICAgIGVsV2lkdGggPSBlbGVtZW50VG9EcmF3Lm5hdHVyYWxXaWR0aCB8fCBlbGVtZW50VG9EcmF3LndpZHRoLFxuICAgICAgICAgIGVsSGVpZ2h0ID0gZWxlbWVudFRvRHJhdy5uYXR1cmFsSGVpZ2h0IHx8IGVsZW1lbnRUb0RyYXcuaGVpZ2h0LFxuICAgICAgICAgIHNYID0gY3JvcFggKiBzY2FsZVgsXG4gICAgICAgICAgc1kgPSBjcm9wWSAqIHNjYWxlWSxcbiAgICAgICAgICAvLyB0aGUgd2lkdGggaGVpZ2h0IGNhbm5vdCBleGNlZWQgZWxlbWVudCB3aWR0aC9oZWlnaHQsIHN0YXJ0aW5nIGZyb20gdGhlIGNyb3Agb2Zmc2V0LlxuICAgICAgICAgIHNXID0gbWluKHcgKiBzY2FsZVgsIGVsV2lkdGggLSBzWCksXG4gICAgICAgICAgc0ggPSBtaW4oaCAqIHNjYWxlWSwgZWxIZWlnaHQgLSBzWSksXG4gICAgICAgICAgeCA9IC13IC8gMiwgeSA9IC1oIC8gMixcbiAgICAgICAgICBtYXhEZXN0VyA9IG1pbih3LCBlbFdpZHRoIC8gc2NhbGVYIC0gY3JvcFgpLFxuICAgICAgICAgIG1heERlc3RIID0gbWluKGgsIGVsSGVpZ2h0IC8gc2NhbGVZIC0gY3JvcFkpO1xuXG4gICAgICBlbGVtZW50VG9EcmF3ICYmIGN0eC5kcmF3SW1hZ2UoZWxlbWVudFRvRHJhdywgc1gsIHNZLCBzVywgc0gsIHgsIHksIG1heERlc3RXLCBtYXhEZXN0SCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG5lZWRlZCB0byBjaGVjayBpZiBpbWFnZSBuZWVkcyByZXNpemVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9uZWVkc1Jlc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NhbGUgPSB0aGlzLmdldFRvdGFsT2JqZWN0U2NhbGluZygpO1xuICAgICAgcmV0dXJuIChzY2FsZS5zY2FsZVggIT09IHRoaXMuX2xhc3RTY2FsZVggfHwgc2NhbGUuc2NhbGVZICE9PSB0aGlzLl9sYXN0U2NhbGVZKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVzZXRXaWR0aEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNldCh0aGlzLmdldE9yaWdpbmFsU2l6ZSgpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGhlIEltYWdlIGNsYXNzJ3MgaW5pdGlhbGl6YXRpb24gbWV0aG9kLiBUaGlzIG1ldGhvZCBpcyBhdXRvbWF0aWNhbGx5XG4gICAgICogY2FsbGVkIGJ5IHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxTdHJpbmd9IGVsZW1lbnQgVGhlIGVsZW1lbnQgcmVwcmVzZW50aW5nIHRoZSBpbWFnZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICBfaW5pdEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuc2V0RWxlbWVudChmYWJyaWMudXRpbC5nZXRCeUlkKGVsZW1lbnQpLCBvcHRpb25zKTtcbiAgICAgIGZhYnJpYy51dGlsLmFkZENsYXNzKHRoaXMuZ2V0RWxlbWVudCgpLCBmYWJyaWMuSW1hZ2UuQ1NTX0NBTlZBUyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqL1xuICAgIF9pbml0Q29uZmlnOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0geyB9KTtcbiAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHRoaXMuX3NldFdpZHRoSGVpZ2h0KG9wdGlvbnMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGZpbHRlcnMgdG8gYmUgaW5pdGlhbGl6ZWRcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBhbGwgZmFicmljLkltYWdlLmZpbHRlcnMgaW5zdGFuY2VzIGFyZSBjcmVhdGVkXG4gICAgICovXG4gICAgX2luaXRGaWx0ZXJzOiBmdW5jdGlvbihmaWx0ZXJzLCBjYWxsYmFjaykge1xuICAgICAgaWYgKGZpbHRlcnMgJiYgZmlsdGVycy5sZW5ndGgpIHtcbiAgICAgICAgZmFicmljLnV0aWwuZW5saXZlbk9iamVjdHMoZmlsdGVycywgZnVuY3Rpb24oZW5saXZlbmVkT2JqZWN0cykge1xuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGVubGl2ZW5lZE9iamVjdHMpO1xuICAgICAgICB9LCAnZmFicmljLkltYWdlLmZpbHRlcnMnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIFNldCB0aGUgd2lkdGggYW5kIHRoZSBoZWlnaHQgb2YgdGhlIGltYWdlIG9iamVjdCwgdXNpbmcgdGhlIGVsZW1lbnQgb3IgdGhlXG4gICAgICogb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9iamVjdCB3aXRoIHdpZHRoL2hlaWdodCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgX3NldFdpZHRoSGVpZ2h0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0geyB9KTtcbiAgICAgIHZhciBlbCA9IHRoaXMuZ2V0RWxlbWVudCgpO1xuICAgICAgdGhpcy53aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgZWwubmF0dXJhbFdpZHRoIHx8IGVsLndpZHRoIHx8IDA7XG4gICAgICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IHx8IGVsLm5hdHVyYWxIZWlnaHQgfHwgZWwuaGVpZ2h0IHx8IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSBvZmZzZXQgZm9yIGNlbnRlciBhbmQgc2NhbGUgZmFjdG9yIGZvciB0aGUgaW1hZ2UgaW4gb3JkZXIgdG8gcmVzcGVjdFxuICAgICAqIHRoZSBwcmVzZXJ2ZUFzcGVjdFJhdGlvIGF0dHJpYnV0ZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIHBhcnNlUHJlc2VydmVBc3BlY3RSYXRpb0F0dHJpYnV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcEFSID0gZmFicmljLnV0aWwucGFyc2VQcmVzZXJ2ZUFzcGVjdFJhdGlvQXR0cmlidXRlKHRoaXMucHJlc2VydmVBc3BlY3RSYXRpbyB8fCAnJyksXG4gICAgICAgICAgcldpZHRoID0gdGhpcy5fZWxlbWVudC53aWR0aCwgckhlaWdodCA9IHRoaXMuX2VsZW1lbnQuaGVpZ2h0LFxuICAgICAgICAgIHNjYWxlWCA9IDEsIHNjYWxlWSA9IDEsIG9mZnNldExlZnQgPSAwLCBvZmZzZXRUb3AgPSAwLCBjcm9wWCA9IDAsIGNyb3BZID0gMCxcbiAgICAgICAgICBvZmZzZXQsIHBXaWR0aCA9IHRoaXMud2lkdGgsIHBIZWlnaHQgPSB0aGlzLmhlaWdodCwgcGFyc2VkQXR0cmlidXRlcyA9IHsgd2lkdGg6IHBXaWR0aCwgaGVpZ2h0OiBwSGVpZ2h0IH07XG4gICAgICBpZiAocEFSICYmIChwQVIuYWxpZ25YICE9PSAnbm9uZScgfHwgcEFSLmFsaWduWSAhPT0gJ25vbmUnKSkge1xuICAgICAgICBpZiAocEFSLm1lZXRPclNsaWNlID09PSAnbWVldCcpIHtcbiAgICAgICAgICBzY2FsZVggPSBzY2FsZVkgPSBmYWJyaWMudXRpbC5maW5kU2NhbGVUb0ZpdCh0aGlzLl9lbGVtZW50LCBwYXJzZWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICBvZmZzZXQgPSAocFdpZHRoIC0gcldpZHRoICogc2NhbGVYKSAvIDI7XG4gICAgICAgICAgaWYgKHBBUi5hbGlnblggPT09ICdNaW4nKSB7XG4gICAgICAgICAgICBvZmZzZXRMZWZ0ID0gLW9mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBBUi5hbGlnblggPT09ICdNYXgnKSB7XG4gICAgICAgICAgICBvZmZzZXRMZWZ0ID0gb2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBvZmZzZXQgPSAocEhlaWdodCAtIHJIZWlnaHQgKiBzY2FsZVkpIC8gMjtcbiAgICAgICAgICBpZiAocEFSLmFsaWduWSA9PT0gJ01pbicpIHtcbiAgICAgICAgICAgIG9mZnNldFRvcCA9IC1vZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwQVIuYWxpZ25ZID09PSAnTWF4Jykge1xuICAgICAgICAgICAgb2Zmc2V0VG9wID0gb2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocEFSLm1lZXRPclNsaWNlID09PSAnc2xpY2UnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGVZID0gZmFicmljLnV0aWwuZmluZFNjYWxlVG9Db3Zlcih0aGlzLl9lbGVtZW50LCBwYXJzZWRBdHRyaWJ1dGVzKTtcbiAgICAgICAgICBvZmZzZXQgPSByV2lkdGggLSBwV2lkdGggLyBzY2FsZVg7XG4gICAgICAgICAgaWYgKHBBUi5hbGlnblggPT09ICdNaWQnKSB7XG4gICAgICAgICAgICBjcm9wWCA9IG9mZnNldCAvIDI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwQVIuYWxpZ25YID09PSAnTWF4Jykge1xuICAgICAgICAgICAgY3JvcFggPSBvZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9mZnNldCA9IHJIZWlnaHQgLSBwSGVpZ2h0IC8gc2NhbGVZO1xuICAgICAgICAgIGlmIChwQVIuYWxpZ25ZID09PSAnTWlkJykge1xuICAgICAgICAgICAgY3JvcFkgPSBvZmZzZXQgLyAyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocEFSLmFsaWduWSA9PT0gJ01heCcpIHtcbiAgICAgICAgICAgIGNyb3BZID0gb2Zmc2V0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByV2lkdGggPSBwV2lkdGggLyBzY2FsZVg7XG4gICAgICAgICAgckhlaWdodCA9IHBIZWlnaHQgLyBzY2FsZVk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzY2FsZVggPSBwV2lkdGggLyByV2lkdGg7XG4gICAgICAgIHNjYWxlWSA9IHBIZWlnaHQgLyBySGVpZ2h0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGg6IHJXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBySGVpZ2h0LFxuICAgICAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICAgICAgc2NhbGVZOiBzY2FsZVksXG4gICAgICAgIG9mZnNldExlZnQ6IG9mZnNldExlZnQsXG4gICAgICAgIG9mZnNldFRvcDogb2Zmc2V0VG9wLFxuICAgICAgICBjcm9wWDogY3JvcFgsXG4gICAgICAgIGNyb3BZOiBjcm9wWVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IENTUyBjbGFzcyBuYW1lIGZvciBjYW52YXNcbiAgICogQHN0YXRpY1xuICAgKiBAdHlwZSBTdHJpbmdcbiAgICogQGRlZmF1bHRcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5DU1NfQ0FOVkFTID0gJ2NhbnZhcy1pbWcnO1xuXG4gIC8qKlxuICAgKiBBbGlhcyBmb3IgZ2V0U3JjXG4gICAqIEBzdGF0aWNcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5wcm90b3R5cGUuZ2V0U3ZnU3JjID0gZmFicmljLkltYWdlLnByb3RvdHlwZS5nZXRTcmM7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgZmFicmljLkltYWdlIGZyb20gaXRzIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGltYWdlIGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5mcm9tT2JqZWN0ID0gZnVuY3Rpb24oX29iamVjdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgb2JqZWN0ID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKF9vYmplY3QpO1xuICAgIGZhYnJpYy51dGlsLmxvYWRJbWFnZShvYmplY3Quc3JjLCBmdW5jdGlvbihpbWcsIGlzRXJyb3IpIHtcbiAgICAgIGlmIChpc0Vycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmYWJyaWMuSW1hZ2UucHJvdG90eXBlLl9pbml0RmlsdGVycy5jYWxsKG9iamVjdCwgb2JqZWN0LmZpbHRlcnMsIGZ1bmN0aW9uKGZpbHRlcnMpIHtcbiAgICAgICAgb2JqZWN0LmZpbHRlcnMgPSBmaWx0ZXJzIHx8IFtdO1xuICAgICAgICBmYWJyaWMuSW1hZ2UucHJvdG90eXBlLl9pbml0RmlsdGVycy5jYWxsKG9iamVjdCwgW29iamVjdC5yZXNpemVGaWx0ZXJdLCBmdW5jdGlvbihyZXNpemVGaWx0ZXJzKSB7XG4gICAgICAgICAgb2JqZWN0LnJlc2l6ZUZpbHRlciA9IHJlc2l6ZUZpbHRlcnNbMF07XG4gICAgICAgICAgZmFicmljLnV0aWwuZW5saXZlbk9iamVjdEVubGl2YWJsZXMob2JqZWN0LCBvYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBmYWJyaWMuSW1hZ2UoaW1nLCBvYmplY3QpO1xuICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2UsIGZhbHNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LCBudWxsLCBvYmplY3QuY3Jvc3NPcmlnaW4pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZSBmcm9tIGFuIFVSTCBzdHJpbmdcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFVSTCB0byBjcmVhdGUgYW4gaW1hZ2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGltYWdlIGlzIGNyZWF0ZWQgKG5ld2x5IGNyZWF0ZWQgaW1hZ2UgaXMgcGFzc2VkIGFzIGEgZmlyc3QgYXJndW1lbnQpLiBTZWNvbmQgYXJndW1lbnQgaXMgYSBib29sZWFuIGluZGljYXRpbmcgaWYgYW4gZXJyb3Igb2NjdXJyZWQgb3Igbm90LlxuICAgKiBAcGFyYW0ge09iamVjdH0gW2ltZ09wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZnJvbVVSTCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2ssIGltZ09wdGlvbnMpIHtcbiAgICBmYWJyaWMudXRpbC5sb2FkSW1hZ2UodXJsLCBmdW5jdGlvbihpbWcsIGlzRXJyb3IpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG5ldyBmYWJyaWMuSW1hZ2UoaW1nLCBpbWdPcHRpb25zKSwgaXNFcnJvcik7XG4gICAgfSwgbnVsbCwgaW1nT3B0aW9ucyAmJiBpbWdPcHRpb25zLmNyb3NzT3JpZ2luKTtcbiAgfTtcblxuICAvKiBfRlJPTV9TVkdfU1RBUlRfICovXG4gIC8qKlxuICAgKiBMaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhY2NvdW50IGZvciB3aGVuIHBhcnNpbmcgU1ZHIGVsZW1lbnQgKHVzZWQgYnkge0BsaW5rIGZhYnJpYy5JbWFnZS5mcm9tRWxlbWVudH0pXG4gICAqIEBzdGF0aWNcbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3N0cnVjdC5odG1sI0ltYWdlRWxlbWVudH1cbiAgICovXG4gIGZhYnJpYy5JbWFnZS5BVFRSSUJVVEVfTkFNRVMgPVxuICAgIGZhYnJpYy5TSEFSRURfQVRUUklCVVRFUy5jb25jYXQoXG4gICAgICAneCB5IHdpZHRoIGhlaWdodCBwcmVzZXJ2ZUFzcGVjdFJhdGlvIHhsaW5rOmhyZWYgY3Jvc3NPcmlnaW4gaW1hZ2UtcmVuZGVyaW5nJy5zcGxpdCgnICcpXG4gICAgKTtcblxuICAvKipcbiAgICogUmV0dXJucyB7QGxpbmsgZmFicmljLkltYWdlfSBpbnN0YW5jZSBmcm9tIGFuIFNWRyBlbGVtZW50XG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtTVkdFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayB0byBleGVjdXRlIHdoZW4gZmFicmljLkltYWdlIG9iamVjdCBpcyBjcmVhdGVkXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZX0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZnJvbUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjYWxsYmFjaywgb3B0aW9ucykge1xuICAgIHZhciBwYXJzZWRBdHRyaWJ1dGVzID0gZmFicmljLnBhcnNlQXR0cmlidXRlcyhlbGVtZW50LCBmYWJyaWMuSW1hZ2UuQVRUUklCVVRFX05BTUVTKTtcbiAgICBmYWJyaWMuSW1hZ2UuZnJvbVVSTChwYXJzZWRBdHRyaWJ1dGVzWyd4bGluazpocmVmJ10sIGNhbGxiYWNrLFxuICAgICAgZXh0ZW5kKChvcHRpb25zID8gZmFicmljLnV0aWwub2JqZWN0LmNsb25lKG9wdGlvbnMpIDogeyB9KSwgcGFyc2VkQXR0cmlidXRlcykpO1xuICB9O1xuICAvKiBfRlJPTV9TVkdfRU5EXyAqL1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuT2JqZWN0LnByb3RvdHlwZSwgLyoqIEBsZW5kcyBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZSAqLyB7XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm4ge051bWJlcn0gYW5nbGUgdmFsdWVcbiAgICovXG4gIF9nZXRBbmdsZVZhbHVlRm9yU3RyYWlnaHRlbjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFuZ2xlID0gdGhpcy5hbmdsZSAlIDM2MDtcbiAgICBpZiAoYW5nbGUgPiAwKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCgoYW5nbGUgLSAxKSAvIDkwKSAqIDkwO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5yb3VuZChhbmdsZSAvIDkwKSAqIDkwO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTdHJhaWdodGVucyBhbiBvYmplY3QgKHJvdGF0aW5nIGl0IGZyb20gY3VycmVudCBhbmdsZSB0byBvbmUgb2YgMCwgOTAsIDE4MCwgMjcwLCBldGMuIGRlcGVuZGluZyBvbiB3aGljaCBpcyBjbG9zZXIpXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgc3RyYWlnaHRlbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucm90YXRlKHRoaXMuX2dldEFuZ2xlVmFsdWVGb3JTdHJhaWdodGVuKCkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYW1lIGFzIHtAbGluayBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5zdHJhaWdodGVufSBidXQgd2l0aCBhbmltYXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGNhbGxiYWNrcyBPYmplY3Qgd2l0aCBjYWxsYmFjayBmdW5jdGlvbnNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5vbkNvbXBsZXRlXSBJbnZva2VkIG9uIGNvbXBsZXRpb25cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrcy5vbkNoYW5nZV0gSW52b2tlZCBvbiBldmVyeSBzdGVwIG9mIGFuaW1hdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuT2JqZWN0fSB0aGlzQXJnXG4gICAqL1xuICBmeFN0cmFpZ2h0ZW46IGZ1bmN0aW9uKGNhbGxiYWNrcykge1xuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcyB8fCB7IH07XG5cbiAgICB2YXIgZW1wdHkgPSBmdW5jdGlvbigpIHsgfSxcbiAgICAgICAgb25Db21wbGV0ZSA9IGNhbGxiYWNrcy5vbkNvbXBsZXRlIHx8IGVtcHR5LFxuICAgICAgICBvbkNoYW5nZSA9IGNhbGxiYWNrcy5vbkNoYW5nZSB8fCBlbXB0eSxcbiAgICAgICAgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIGZhYnJpYy51dGlsLmFuaW1hdGUoe1xuICAgICAgdGFyZ2V0OiB0aGlzLFxuICAgICAgc3RhcnRWYWx1ZTogdGhpcy5nZXQoJ2FuZ2xlJyksXG4gICAgICBlbmRWYWx1ZTogdGhpcy5fZ2V0QW5nbGVWYWx1ZUZvclN0cmFpZ2h0ZW4oKSxcbiAgICAgIGR1cmF0aW9uOiB0aGlzLkZYX0RVUkFUSU9OLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIF90aGlzLnJvdGF0ZSh2YWx1ZSk7XG4gICAgICAgIG9uQ2hhbmdlKCk7XG4gICAgICB9LFxuICAgICAgb25Db21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLnNldENvb3JkcygpO1xuICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG59KTtcblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBmYWJyaWMuU3RhdGljQ2FudmFzLnByb3RvdHlwZSAqLyB7XG5cbiAgLyoqXG4gICAqIFN0cmFpZ2h0ZW5zIG9iamVjdCwgdGhlbiByZXJlbmRlcnMgY2FudmFzXG4gICAqIEBwYXJhbSB7ZmFicmljLk9iamVjdH0gb2JqZWN0IE9iamVjdCB0byBzdHJhaWdodGVuXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5DYW52YXN9IHRoaXNBcmdcbiAgICogQGNoYWluYWJsZVxuICAgKi9cbiAgc3RyYWlnaHRlbk9iamVjdDogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIG9iamVjdC5zdHJhaWdodGVuKCk7XG4gICAgdGhpcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMge0BsaW5rIGZhYnJpYy5DYW52YXMucHJvdG90eXBlLnN0cmFpZ2h0ZW5PYmplY3R9LCBidXQgYW5pbWF0ZWRcbiAgICogQHBhcmFtIHtmYWJyaWMuT2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIHN0cmFpZ2h0ZW5cbiAgICogQHJldHVybiB7ZmFicmljLkNhbnZhc30gdGhpc0FyZ1xuICAgKi9cbiAgZnhTdHJhaWdodGVuT2JqZWN0OiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdC5meFN0cmFpZ2h0ZW4oe1xuICAgICAgb25DaGFuZ2U6IHRoaXMucmVxdWVzdFJlbmRlckFsbEJvdW5kXG4gICAgfSk7XG4gIH1cbn0pO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFRlc3RzIGlmIHdlYmdsIHN1cHBvcnRzIGNlcnRhaW4gcHJlY2lzaW9uXG4gICAqIEBwYXJhbSB7V2ViR0x9IENhbnZhcyBXZWJHTCBjb250ZXh0IHRvIHRlc3Qgb25cbiAgICogQHBhcmFtIHtTdHJpbmd9IFByZWNpc2lvbiB0byB0ZXN0IGNhbiBiZSBhbnkgb2YgZm9sbG93aW5nOiAnbG93cCcsICdtZWRpdW1wJywgJ2hpZ2hwJ1xuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gV2hldGhlciB0aGUgdXNlcidzIGJyb3dzZXIgV2ViR0wgc3VwcG9ydHMgZ2l2ZW4gcHJlY2lzaW9uLlxuICAgKi9cbiAgZnVuY3Rpb24gdGVzdFByZWNpc2lvbihnbCwgcHJlY2lzaW9uKXtcbiAgICB2YXIgZnJhZ21lbnRTb3VyY2UgPSAncHJlY2lzaW9uICcgKyBwcmVjaXNpb24gKyAnIGZsb2F0O1xcbnZvaWQgbWFpbigpe30nO1xuICAgIHZhciBmcmFnbWVudFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgIGdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgZnJhZ21lbnRTb3VyY2UpO1xuICAgIGdsLmNvbXBpbGVTaGFkZXIoZnJhZ21lbnRTaGFkZXIpO1xuICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKGZyYWdtZW50U2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogSW5kaWNhdGUgd2hldGhlciB0aGlzIGZpbHRlcmluZyBiYWNrZW5kIGlzIHN1cHBvcnRlZCBieSB0aGUgdXNlcidzIGJyb3dzZXIuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB0aWxlU2l6ZSBjaGVjayBpZiB0aGUgdGlsZVNpemUgaXMgc3VwcG9ydGVkXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBXaGV0aGVyIHRoZSB1c2VyJ3MgYnJvd3NlciBzdXBwb3J0cyBXZWJHTC5cbiAgICovXG4gIGZhYnJpYy5pc1dlYmdsU3VwcG9ydGVkID0gZnVuY3Rpb24odGlsZVNpemUpIHtcbiAgICBpZiAoZmFicmljLmlzTGlrZWx5Tm9kZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aWxlU2l6ZSA9IHRpbGVTaXplIHx8IGZhYnJpYy5XZWJnbEZpbHRlckJhY2tlbmQucHJvdG90eXBlLnRpbGVTaXplO1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB2YXIgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKSB8fCBjYW52YXMuZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJyk7XG4gICAgdmFyIGlzU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgaWYgKGdsKSB7XG4gICAgICBmYWJyaWMubWF4VGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoZ2wuTUFYX1RFWFRVUkVfU0laRSk7XG4gICAgICBpc1N1cHBvcnRlZCA9IGZhYnJpYy5tYXhUZXh0dXJlU2l6ZSA+PSB0aWxlU2l6ZTtcbiAgICAgIHZhciBwcmVjaXNpb25zID0gWydoaWdocCcsICdtZWRpdW1wJywgJ2xvd3AnXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKXtcbiAgICAgICAgaWYgKHRlc3RQcmVjaXNpb24oZ2wsIHByZWNpc2lvbnNbaV0pKXtcbiAgICAgICAgICBmYWJyaWMud2ViR2xQcmVjaXNpb24gPSBwcmVjaXNpb25zW2ldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmlzU3VwcG9ydGVkID0gaXNTdXBwb3J0ZWQ7XG4gICAgcmV0dXJuIGlzU3VwcG9ydGVkO1xuICB9O1xuXG4gIGZhYnJpYy5XZWJnbEZpbHRlckJhY2tlbmQgPSBXZWJnbEZpbHRlckJhY2tlbmQ7XG5cbiAgLyoqXG4gICAqIFdlYkdMIGZpbHRlciBiYWNrZW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gV2ViZ2xGaWx0ZXJCYWNrZW5kKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnRpbGVTaXplKSB7XG4gICAgICB0aGlzLnRpbGVTaXplID0gb3B0aW9ucy50aWxlU2l6ZTtcbiAgICB9XG4gICAgdGhpcy5zZXR1cEdMQ29udGV4dCh0aGlzLnRpbGVTaXplLCB0aGlzLnRpbGVTaXplKTtcbiAgICB0aGlzLmNhcHR1cmVHUFVJbmZvKCk7XG4gIH07XG5cbiAgV2ViZ2xGaWx0ZXJCYWNrZW5kLnByb3RvdHlwZSA9IC8qKiBAbGVuZHMgZmFicmljLldlYmdsRmlsdGVyQmFja2VuZC5wcm90b3R5cGUgKi8ge1xuXG4gICAgdGlsZVNpemU6IDIwNDgsXG5cbiAgICAvKipcbiAgICAgKiBFeHBlcmltZW50YWwuIFRoaXMgb2JqZWN0IGlzIGEgc29ydCBvZiByZXBvc2l0b3J5IG9mIGhlbHAgbGF5ZXJzIHVzZWQgdG8gYXZvaWRcbiAgICAgKiBvZiByZWNyZWF0aW5nIHRoZW0gZHVyaW5nIGZyZXF1ZW50IGZpbHRlcmluZy4gSWYgeW91IGFyZSBwcmV2aWV3aW5nIGEgZmlsdGVyIHdpdGhcbiAgICAgKiBhIHNsaWRlciB5b3UgcHJvYmFibHkgZG8gbm90IHdhbnQgdG8gY3JlYXRlIGhlbHAgbGF5ZXJzIGV2ZXJ5IGZpbHRlciBzdGVwLlxuICAgICAqIGluIHRoaXMgb2JqZWN0IHRoZXJlIHdpbGwgYmUgYXBwZW5kZWQgc29tZSBjYW52YXNlcywgY3JlYXRlZCBvbmNlLCByZXNpemVkIHNvbWV0aW1lc1xuICAgICAqIGNsZWFyZWQgbmV2ZXIuIENsZWFyaW5nIGlzIGxlZnQgdG8gdGhlIGRldmVsb3Blci5cbiAgICAgKiovXG4gICAgcmVzb3VyY2VzOiB7XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgYSBXZWJHTCBjb250ZXh0IHN1aXRhYmxlIGZvciBmaWx0ZXJpbmcsIGFuZCBiaW5kIGFueSBuZWVkZWQgZXZlbnQgaGFuZGxlcnMuXG4gICAgICovXG4gICAgc2V0dXBHTENvbnRleHQ6IGZ1bmN0aW9uKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgdGhpcy5jcmVhdGVXZWJHTENhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgdGhpcy5hUG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAwLCAxLCAxLCAwLCAxLCAxXSk7XG4gICAgICB0aGlzLmNob29zZUZhc3Rlc3RDb3B5R0xUbzJETWV0aG9kKHdpZHRoLCBoZWlnaHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQaWNrIGEgbWV0aG9kIHRvIGNvcHkgZGF0YSBmcm9tIEdMIGNvbnRleHQgdG8gMmQgY2FudmFzLiAgSW4gc29tZSBicm93c2VycyB1c2luZ1xuICAgICAqIHB1dEltYWdlRGF0YSBpcyBmYXN0ZXIgdGhhbiBkcmF3SW1hZ2UgZm9yIHRoYXQgc3BlY2lmaWMgb3BlcmF0aW9uLlxuICAgICAqL1xuICAgIGNob29zZUZhc3Rlc3RDb3B5R0xUbzJETWV0aG9kOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICB2YXIgY2FuTWVhc3VyZVBlcmYgPSB0eXBlb2Ygd2luZG93LnBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJywgY2FuVXNlSW1hZ2VEYXRhO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEltYWdlRGF0YSgxLCAxKTtcbiAgICAgICAgY2FuVXNlSW1hZ2VEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNhblVzZUltYWdlRGF0YSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICB2YXIgY2FuVXNlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICB2YXIgY2FuVXNlVWludDhDbGFtcGVkID0gdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJztcblxuICAgICAgaWYgKCEoY2FuTWVhc3VyZVBlcmYgJiYgY2FuVXNlSW1hZ2VEYXRhICYmIGNhblVzZUFycmF5QnVmZmVyICYmIGNhblVzZVVpbnQ4Q2xhbXBlZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0Q2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgICB2YXIgaW1hZ2VCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgIGlmIChmYWJyaWMuZm9yY2VHTFB1dEltYWdlRGF0YSkge1xuICAgICAgICB0aGlzLmltYWdlQnVmZmVyID0gaW1hZ2VCdWZmZXI7XG4gICAgICAgIHRoaXMuY29weUdMVG8yRCA9IGNvcHlHTFRvMkRQdXRJbWFnZURhdGE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgaW1hZ2VCdWZmZXI6IGltYWdlQnVmZmVyLFxuICAgICAgICBkZXN0aW5hdGlvbldpZHRoOiB3aWR0aCxcbiAgICAgICAgZGVzdGluYXRpb25IZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgdGFyZ2V0Q2FudmFzOiB0YXJnZXRDYW52YXNcbiAgICAgIH07XG4gICAgICB2YXIgc3RhcnRUaW1lLCBkcmF3SW1hZ2VUaW1lLCBwdXRJbWFnZURhdGFUaW1lO1xuICAgICAgdGFyZ2V0Q2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICB0YXJnZXRDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICBzdGFydFRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICBjb3B5R0xUbzJERHJhd0ltYWdlLmNhbGwodGVzdENvbnRleHQsIHRoaXMuZ2wsIHRlc3RDb250ZXh0KTtcbiAgICAgIGRyYXdJbWFnZVRpbWUgPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgLSBzdGFydFRpbWU7XG5cbiAgICAgIHN0YXJ0VGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIGNvcHlHTFRvMkRQdXRJbWFnZURhdGEuY2FsbCh0ZXN0Q29udGV4dCwgdGhpcy5nbCwgdGVzdENvbnRleHQpO1xuICAgICAgcHV0SW1hZ2VEYXRhVGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0VGltZTtcblxuICAgICAgaWYgKGRyYXdJbWFnZVRpbWUgPiBwdXRJbWFnZURhdGFUaW1lKSB7XG4gICAgICAgIHRoaXMuaW1hZ2VCdWZmZXIgPSBpbWFnZUJ1ZmZlcjtcbiAgICAgICAgdGhpcy5jb3B5R0xUbzJEID0gY29weUdMVG8yRFB1dEltYWdlRGF0YTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmNvcHlHTFRvMkQgPSBjb3B5R0xUbzJERHJhd0ltYWdlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBjYW52YXMgZWxlbWVudCBhbmQgYXNzb2NpYXRlZCBXZWJHTCBjb250ZXh0IGFuZCBhdHRhY2hlcyB0aGVtIGFzXG4gICAgICogY2xhc3MgcHJvcGVydGllcyB0byB0aGUgR0xGaWx0ZXJCYWNrZW5kIGNsYXNzLlxuICAgICAqL1xuICAgIGNyZWF0ZVdlYkdMQ2FudmFzOiBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICB2YXIgY2FudmFzID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgdmFyIGdsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGFscGhhOiB0cnVlLFxuICAgICAgICAgICAgcHJlbXVsdGlwbGllZEFscGhhOiBmYWxzZSxcbiAgICAgICAgICAgIGRlcHRoOiBmYWxzZSxcbiAgICAgICAgICAgIHN0ZW5jaWw6IGZhbHNlLFxuICAgICAgICAgICAgYW50aWFsaWFzOiBmYWxzZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBnbE9wdGlvbnMpO1xuICAgICAgaWYgKCFnbCkge1xuICAgICAgICBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBnbE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKCFnbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xuICAgICAgLy8gdGhpcyBjYW52YXMgY2FuIGZpcmUgd2ViZ2xjb250ZXh0bG9zdCBhbmQgd2ViZ2xjb250ZXh0cmVzdG9yZWRcbiAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgdGhpcy5nbCA9IGdsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBhcHBseSB0aGUgcmVxdWVzdGVkIGZpbHRlcnMgdG8gdGhlIHNvdXJjZSBwcm92aWRlZCwgZHJhd2luZyB0aGUgZmlsdGVyZWQgb3V0cHV0XG4gICAgICogdG8gdGhlIHByb3ZpZGVkIHRhcmdldCBjYW52YXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBmaWx0ZXJzIFRoZSBmaWx0ZXJzIHRvIGFwcGx5LlxuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudH0gc291cmNlIFRoZSBzb3VyY2UgdG8gYmUgZmlsdGVyZWQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHdpZHRoIFRoZSB3aWR0aCBvZiB0aGUgc291cmNlIGlucHV0LlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoZWlnaHQgVGhlIGhlaWdodCBvZiB0aGUgc291cmNlIGlucHV0LlxuICAgICAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IHRhcmdldENhbnZhcyBUaGUgZGVzdGluYXRpb24gZm9yIGZpbHRlcmVkIG91dHB1dCB0byBiZSBkcmF3bi5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ3x1bmRlZmluZWR9IGNhY2hlS2V5IEEga2V5IHVzZWQgdG8gY2FjaGUgcmVzb3VyY2VzIHJlbGF0ZWQgdG8gdGhlIHNvdXJjZS4gSWZcbiAgICAgKiBvbWl0dGVkLCBjYWNoaW5nIHdpbGwgYmUgc2tpcHBlZC5cbiAgICAgKi9cbiAgICBhcHBseUZpbHRlcnM6IGZ1bmN0aW9uKGZpbHRlcnMsIHNvdXJjZSwgd2lkdGgsIGhlaWdodCwgdGFyZ2V0Q2FudmFzLCBjYWNoZUtleSkge1xuICAgICAgdmFyIGdsID0gdGhpcy5nbDtcbiAgICAgIHZhciBjYWNoZWRUZXh0dXJlO1xuICAgICAgaWYgKGNhY2hlS2V5KSB7XG4gICAgICAgIGNhY2hlZFRleHR1cmUgPSB0aGlzLmdldENhY2hlZFRleHR1cmUoY2FjaGVLZXksIHNvdXJjZSk7XG4gICAgICB9XG4gICAgICB2YXIgcGlwZWxpbmVTdGF0ZSA9IHtcbiAgICAgICAgb3JpZ2luYWxXaWR0aDogc291cmNlLndpZHRoIHx8IHNvdXJjZS5vcmlnaW5hbFdpZHRoLFxuICAgICAgICBvcmlnaW5hbEhlaWdodDogc291cmNlLmhlaWdodCB8fCBzb3VyY2Uub3JpZ2luYWxIZWlnaHQsXG4gICAgICAgIHNvdXJjZVdpZHRoOiB3aWR0aCxcbiAgICAgICAgc291cmNlSGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIGRlc3RpbmF0aW9uV2lkdGg6IHdpZHRoLFxuICAgICAgICBkZXN0aW5hdGlvbkhlaWdodDogaGVpZ2h0LFxuICAgICAgICBjb250ZXh0OiBnbCxcbiAgICAgICAgc291cmNlVGV4dHVyZTogdGhpcy5jcmVhdGVUZXh0dXJlKGdsLCB3aWR0aCwgaGVpZ2h0LCAhY2FjaGVkVGV4dHVyZSAmJiBzb3VyY2UpLFxuICAgICAgICB0YXJnZXRUZXh0dXJlOiB0aGlzLmNyZWF0ZVRleHR1cmUoZ2wsIHdpZHRoLCBoZWlnaHQpLFxuICAgICAgICBvcmlnaW5hbFRleHR1cmU6IGNhY2hlZFRleHR1cmUgfHxcbiAgICAgICAgICB0aGlzLmNyZWF0ZVRleHR1cmUoZ2wsIHdpZHRoLCBoZWlnaHQsICFjYWNoZWRUZXh0dXJlICYmIHNvdXJjZSksXG4gICAgICAgIHBhc3NlczogZmlsdGVycy5sZW5ndGgsXG4gICAgICAgIHdlYmdsOiB0cnVlLFxuICAgICAgICBhUG9zaXRpb246IHRoaXMuYVBvc2l0aW9uLFxuICAgICAgICBwcm9ncmFtQ2FjaGU6IHRoaXMucHJvZ3JhbUNhY2hlLFxuICAgICAgICBwYXNzOiAwLFxuICAgICAgICBmaWx0ZXJCYWNrZW5kOiB0aGlzLFxuICAgICAgICB0YXJnZXRDYW52YXM6IHRhcmdldENhbnZhc1xuICAgICAgfTtcbiAgICAgIHZhciB0ZW1wRmJvID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcbiAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGVtcEZibyk7XG4gICAgICBmaWx0ZXJzLmZvckVhY2goZnVuY3Rpb24oZmlsdGVyKSB7IGZpbHRlciAmJiBmaWx0ZXIuYXBwbHlUbyhwaXBlbGluZVN0YXRlKTsgfSk7XG4gICAgICByZXNpemVDYW52YXNJZk5lZWRlZChwaXBlbGluZVN0YXRlKTtcbiAgICAgIHRoaXMuY29weUdMVG8yRChnbCwgcGlwZWxpbmVTdGF0ZSk7XG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcbiAgICAgIGdsLmRlbGV0ZVRleHR1cmUocGlwZWxpbmVTdGF0ZS5zb3VyY2VUZXh0dXJlKTtcbiAgICAgIGdsLmRlbGV0ZVRleHR1cmUocGlwZWxpbmVTdGF0ZS50YXJnZXRUZXh0dXJlKTtcbiAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKHRlbXBGYm8pO1xuICAgICAgdGFyZ2V0Q2FudmFzLmdldENvbnRleHQoJzJkJykuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgcmV0dXJuIHBpcGVsaW5lU3RhdGU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGFjaCBldmVudCBsaXN0ZW5lcnMsIHJlbW92ZSByZWZlcmVuY2VzLCBhbmQgY2xlYW4gdXAgY2FjaGVzLlxuICAgICAqL1xuICAgIGRpc3Bvc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgICAgdGhpcy5nbCA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLmNsZWFyV2ViR0xDYWNoZXMoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogV2lwZSBvdXQgV2ViR0wtcmVsYXRlZCBjYWNoZXMuXG4gICAgICovXG4gICAgY2xlYXJXZWJHTENhY2hlczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnByb2dyYW1DYWNoZSA9IHt9O1xuICAgICAgdGhpcy50ZXh0dXJlQ2FjaGUgPSB7fTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgV2ViR0wgdGV4dHVyZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBBY2NlcHRzIHNwZWNpZmljIGRpbWVuc2lvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgdGV4dHVyZSB0byBvciBhIHNvdXJjZSBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY29udGV4dCB0byB1c2UgZm9yIGNyZWF0aW5nIHRoZSB0ZXh0dXJlLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCBUaGUgd2lkdGggdG8gaW5pdGlhbGl6ZSB0aGUgdGV4dHVyZSBhdC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaGVpZ2h0IFRoZSBoZWlnaHQgdG8gaW5pdGlhbGl6ZSB0aGUgdGV4dHVyZS5cbiAgICAgKiBAcGFyYW0ge0hUTUxJbWFnZUVsZW1lbnR8SFRNTENhbnZhc0VsZW1lbnR9IHRleHR1cmVJbWFnZVNvdXJjZSBBIHNvdXJjZSBmb3IgdGhlIHRleHR1cmUgZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7V2ViR0xUZXh0dXJlfVxuICAgICAqL1xuICAgIGNyZWF0ZVRleHR1cmU6IGZ1bmN0aW9uKGdsLCB3aWR0aCwgaGVpZ2h0LCB0ZXh0dXJlSW1hZ2VTb3VyY2UpIHtcbiAgICAgIHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgaWYgKHRleHR1cmVJbWFnZVNvdXJjZSkge1xuICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIHRleHR1cmVJbWFnZVNvdXJjZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB3aWR0aCwgaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYW4gYmUgb3B0aW9uYWxseSB1c2VkIHRvIGdldCBhIHRleHR1cmUgZnJvbSB0aGUgY2FjaGUgYXJyYXlcbiAgICAgKlxuICAgICAqIElmIGFuIGV4aXN0aW5nIHRleHR1cmUgaXMgbm90IGZvdW5kLCBhIG5ldyB0ZXh0dXJlIGlzIGNyZWF0ZWQgYW5kIGNhY2hlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1bmlxdWVJZCBBIGNhY2hlIGtleSB0byB1c2UgdG8gZmluZCBhbiBleGlzdGluZyB0ZXh0dXJlLlxuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudH0gdGV4dHVyZUltYWdlU291cmNlIEEgc291cmNlIHRvIHVzZSB0byBjcmVhdGUgdGhlXG4gICAgICogdGV4dHVyZSBjYWNoZSBlbnRyeSBpZiBvbmUgZG9lcyBub3QgYWxyZWFkeSBleGlzdC5cbiAgICAgKi9cbiAgICBnZXRDYWNoZWRUZXh0dXJlOiBmdW5jdGlvbih1bmlxdWVJZCwgdGV4dHVyZUltYWdlU291cmNlKSB7XG4gICAgICBpZiAodGhpcy50ZXh0dXJlQ2FjaGVbdW5pcXVlSWRdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHR1cmVDYWNoZVt1bmlxdWVJZF07XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIHRleHR1cmUgPSB0aGlzLmNyZWF0ZVRleHR1cmUoXG4gICAgICAgICAgdGhpcy5nbCwgdGV4dHVyZUltYWdlU291cmNlLndpZHRoLCB0ZXh0dXJlSW1hZ2VTb3VyY2UuaGVpZ2h0LCB0ZXh0dXJlSW1hZ2VTb3VyY2UpO1xuICAgICAgICB0aGlzLnRleHR1cmVDYWNoZVt1bmlxdWVJZF0gPSB0ZXh0dXJlO1xuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgb3V0IGNhY2hlZCByZXNvdXJjZXMgcmVsYXRlZCB0byBhIHNvdXJjZSBpbWFnZSB0aGF0IGhhcyBiZWVuXG4gICAgICogZmlsdGVyZWQgcHJldmlvdXNseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjYWNoZUtleSBUaGUgY2FjaGUga2V5IHByb3ZpZGVkIHdoZW4gdGhlIHNvdXJjZSBpbWFnZSB3YXMgZmlsdGVyZWQuXG4gICAgICovXG4gICAgZXZpY3RDYWNoZXNGb3JLZXk6IGZ1bmN0aW9uKGNhY2hlS2V5KSB7XG4gICAgICBpZiAodGhpcy50ZXh0dXJlQ2FjaGVbY2FjaGVLZXldKSB7XG4gICAgICAgIHRoaXMuZ2wuZGVsZXRlVGV4dHVyZSh0aGlzLnRleHR1cmVDYWNoZVtjYWNoZUtleV0pO1xuICAgICAgICBkZWxldGUgdGhpcy50ZXh0dXJlQ2FjaGVbY2FjaGVLZXldO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb3B5R0xUbzJEOiBjb3B5R0xUbzJERHJhd0ltYWdlLFxuXG4gICAgLyoqXG4gICAgICogQXR0ZW1wdCB0byBleHRyYWN0IEdQVSBpbmZvcm1hdGlvbiBzdHJpbmdzIGZyb20gYSBXZWJHTCBjb250ZXh0LlxuICAgICAqXG4gICAgICogVXNlZnVsIGluZm9ybWF0aW9uIHdoZW4gZGVidWdnaW5nIG9yIGJsYWNrbGlzdGluZyBzcGVjaWZpYyBHUFVzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge09iamVjdH0gQSBHUFUgaW5mbyBvYmplY3Qgd2l0aCByZW5kZXJlciBhbmQgdmVuZG9yIHN0cmluZ3MuXG4gICAgICovXG4gICAgY2FwdHVyZUdQVUluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuZ3B1SW5mbykge1xuICAgICAgICByZXR1cm4gdGhpcy5ncHVJbmZvO1xuICAgICAgfVxuICAgICAgdmFyIGdsID0gdGhpcy5nbCwgZ3B1SW5mbyA9IHsgcmVuZGVyZXI6ICcnLCB2ZW5kb3I6ICcnIH07XG4gICAgICBpZiAoIWdsKSB7XG4gICAgICAgIHJldHVybiBncHVJbmZvO1xuICAgICAgfVxuICAgICAgdmFyIGV4dCA9IGdsLmdldEV4dGVuc2lvbignV0VCR0xfZGVidWdfcmVuZGVyZXJfaW5mbycpO1xuICAgICAgaWYgKGV4dCkge1xuICAgICAgICB2YXIgcmVuZGVyZXIgPSBnbC5nZXRQYXJhbWV0ZXIoZXh0LlVOTUFTS0VEX1JFTkRFUkVSX1dFQkdMKTtcbiAgICAgICAgdmFyIHZlbmRvciA9IGdsLmdldFBhcmFtZXRlcihleHQuVU5NQVNLRURfVkVORE9SX1dFQkdMKTtcbiAgICAgICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICAgICAgZ3B1SW5mby5yZW5kZXJlciA9IHJlbmRlcmVyLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZlbmRvcikge1xuICAgICAgICAgIGdwdUluZm8udmVuZG9yID0gdmVuZG9yLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZ3B1SW5mbyA9IGdwdUluZm87XG4gICAgICByZXR1cm4gZ3B1SW5mbztcbiAgICB9LFxuICB9O1xufSkoKTtcblxuZnVuY3Rpb24gcmVzaXplQ2FudmFzSWZOZWVkZWQocGlwZWxpbmVTdGF0ZSkge1xuICB2YXIgdGFyZ2V0Q2FudmFzID0gcGlwZWxpbmVTdGF0ZS50YXJnZXRDYW52YXMsXG4gICAgICB3aWR0aCA9IHRhcmdldENhbnZhcy53aWR0aCwgaGVpZ2h0ID0gdGFyZ2V0Q2FudmFzLmhlaWdodCxcbiAgICAgIGRXaWR0aCA9IHBpcGVsaW5lU3RhdGUuZGVzdGluYXRpb25XaWR0aCxcbiAgICAgIGRIZWlnaHQgPSBwaXBlbGluZVN0YXRlLmRlc3RpbmF0aW9uSGVpZ2h0O1xuXG4gIGlmICh3aWR0aCAhPT0gZFdpZHRoIHx8IGhlaWdodCAhPT0gZEhlaWdodCkge1xuICAgIHRhcmdldENhbnZhcy53aWR0aCA9IGRXaWR0aDtcbiAgICB0YXJnZXRDYW52YXMuaGVpZ2h0ID0gZEhlaWdodDtcbiAgfVxufVxuXG4vKipcbiAqIENvcHkgYW4gaW5wdXQgV2ViR0wgY2FudmFzIG9uIHRvIGFuIG91dHB1dCAyRCBjYW52YXMuXG4gKlxuICogVGhlIFdlYkdMIGNhbnZhcyBpcyBhc3N1bWVkIHRvIGJlIHVwc2lkZSBkb3duLCB3aXRoIHRoZSB0b3AtbGVmdCBwaXhlbCBvZiB0aGVcbiAqIGRlc2lyZWQgb3V0cHV0IGltYWdlIGFwcGVhcmluZyBpbiB0aGUgYm90dG9tLWxlZnQgY29ybmVyIG9mIHRoZSBXZWJHTCBjYW52YXMuXG4gKlxuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IHNvdXJjZUNvbnRleHQgVGhlIFdlYkdMIGNvbnRleHQgdG8gY29weSBmcm9tLlxuICogQHBhcmFtIHtIVE1MQ2FudmFzRWxlbWVudH0gdGFyZ2V0Q2FudmFzIFRoZSAyRCB0YXJnZXQgY2FudmFzIHRvIGNvcHkgb24gdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gcGlwZWxpbmVTdGF0ZSBUaGUgMkQgdGFyZ2V0IGNhbnZhcyB0byBjb3B5IG9uIHRvLlxuICovXG5mdW5jdGlvbiBjb3B5R0xUbzJERHJhd0ltYWdlKGdsLCBwaXBlbGluZVN0YXRlKSB7XG4gIHZhciBnbENhbnZhcyA9IGdsLmNhbnZhcywgdGFyZ2V0Q2FudmFzID0gcGlwZWxpbmVTdGF0ZS50YXJnZXRDYW52YXMsXG4gICAgICBjdHggPSB0YXJnZXRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgY3R4LnRyYW5zbGF0ZSgwLCB0YXJnZXRDYW52YXMuaGVpZ2h0KTsgLy8gbW92ZSBpdCBkb3duIGFnYWluXG4gIGN0eC5zY2FsZSgxLCAtMSk7IC8vIHZlcnRpY2FsIGZsaXBcbiAgLy8gd2hlcmUgaXMgbXkgaW1hZ2Ugb24gdGhlIGJpZyBnbGNhbnZhcz9cbiAgdmFyIHNvdXJjZVkgPSBnbENhbnZhcy5oZWlnaHQgLSB0YXJnZXRDYW52YXMuaGVpZ2h0O1xuICBjdHguZHJhd0ltYWdlKGdsQ2FudmFzLCAwLCBzb3VyY2VZLCB0YXJnZXRDYW52YXMud2lkdGgsIHRhcmdldENhbnZhcy5oZWlnaHQsIDAsIDAsXG4gICAgdGFyZ2V0Q2FudmFzLndpZHRoLCB0YXJnZXRDYW52YXMuaGVpZ2h0KTtcbn1cblxuLyoqXG4gKiBDb3B5IGFuIGlucHV0IFdlYkdMIGNhbnZhcyBvbiB0byBhbiBvdXRwdXQgMkQgY2FudmFzIHVzaW5nIDJkIGNhbnZhcycgcHV0SW1hZ2VEYXRhXG4gKiBBUEkuIE1lYXN1cmFibHkgZmFzdGVyIHRoYW4gdXNpbmcgY3R4LmRyYXdJbWFnZSBpbiBGaXJlZm94ICh2ZXJzaW9uIDU0IG9uIE9TWCBTaWVycmEpLlxuICpcbiAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBzb3VyY2VDb250ZXh0IFRoZSBXZWJHTCBjb250ZXh0IHRvIGNvcHkgZnJvbS5cbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IHRhcmdldENhbnZhcyBUaGUgMkQgdGFyZ2V0IGNhbnZhcyB0byBjb3B5IG9uIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IHBpcGVsaW5lU3RhdGUgVGhlIDJEIHRhcmdldCBjYW52YXMgdG8gY29weSBvbiB0by5cbiAqL1xuZnVuY3Rpb24gY29weUdMVG8yRFB1dEltYWdlRGF0YShnbCwgcGlwZWxpbmVTdGF0ZSkge1xuICB2YXIgdGFyZ2V0Q2FudmFzID0gcGlwZWxpbmVTdGF0ZS50YXJnZXRDYW52YXMsIGN0eCA9IHRhcmdldENhbnZhcy5nZXRDb250ZXh0KCcyZCcpLFxuICAgICAgZFdpZHRoID0gcGlwZWxpbmVTdGF0ZS5kZXN0aW5hdGlvbldpZHRoLFxuICAgICAgZEhlaWdodCA9IHBpcGVsaW5lU3RhdGUuZGVzdGluYXRpb25IZWlnaHQsXG4gICAgICBudW1CeXRlcyA9IGRXaWR0aCAqIGRIZWlnaHQgKiA0O1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgdTggPSBuZXcgVWludDhBcnJheSh0aGlzLmltYWdlQnVmZmVyLCAwLCBudW1CeXRlcyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgdThDbGFtcGVkID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRoaXMuaW1hZ2VCdWZmZXIsIDAsIG51bUJ5dGVzKTtcblxuICBnbC5yZWFkUGl4ZWxzKDAsIDAsIGRXaWR0aCwgZEhlaWdodCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgdTgpO1xuICB2YXIgaW1nRGF0YSA9IG5ldyBJbWFnZURhdGEodThDbGFtcGVkLCBkV2lkdGgsIGRIZWlnaHQpO1xuICBjdHgucHV0SW1hZ2VEYXRhKGltZ0RhdGEsIDAsIDApO1xufVxuXG5cbihmdW5jdGlvbigpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xuXG4gIGZhYnJpYy5DYW52YXMyZEZpbHRlckJhY2tlbmQgPSBDYW52YXMyZEZpbHRlckJhY2tlbmQ7XG5cbiAgLyoqXG4gICAqIENhbnZhcyAyRCBmaWx0ZXIgYmFja2VuZC5cbiAgICovXG4gIGZ1bmN0aW9uIENhbnZhczJkRmlsdGVyQmFja2VuZCgpIHt9O1xuXG4gIENhbnZhczJkRmlsdGVyQmFja2VuZC5wcm90b3R5cGUgPSAvKiogQGxlbmRzIGZhYnJpYy5DYW52YXMyZEZpbHRlckJhY2tlbmQucHJvdG90eXBlICovIHtcbiAgICBldmljdENhY2hlc0ZvcktleTogbm9vcCxcbiAgICBkaXNwb3NlOiBub29wLFxuICAgIGNsZWFyV2ViR0xDYWNoZXM6IG5vb3AsXG5cbiAgICAvKipcbiAgICAgKiBFeHBlcmltZW50YWwuIFRoaXMgb2JqZWN0IGlzIGEgc29ydCBvZiByZXBvc2l0b3J5IG9mIGhlbHAgbGF5ZXJzIHVzZWQgdG8gYXZvaWRcbiAgICAgKiBvZiByZWNyZWF0aW5nIHRoZW0gZHVyaW5nIGZyZXF1ZW50IGZpbHRlcmluZy4gSWYgeW91IGFyZSBwcmV2aWV3aW5nIGEgZmlsdGVyIHdpdGhcbiAgICAgKiBhIHNsaWRlciB5b3UgcHJvYmFibHkgZG8gbm90IHdhbnQgdG8gY3JlYXRlIGhlbHAgbGF5ZXJzIGV2ZXJ5IGZpbHRlciBzdGVwLlxuICAgICAqIGluIHRoaXMgb2JqZWN0IHRoZXJlIHdpbGwgYmUgYXBwZW5kZWQgc29tZSBjYW52YXNlcywgY3JlYXRlZCBvbmNlLCByZXNpemVkIHNvbWV0aW1lc1xuICAgICAqIGNsZWFyZWQgbmV2ZXIuIENsZWFyaW5nIGlzIGxlZnQgdG8gdGhlIGRldmVsb3Blci5cbiAgICAgKiovXG4gICAgcmVzb3VyY2VzOiB7XG5cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgYSBzZXQgb2YgZmlsdGVycyBhZ2FpbnN0IGEgc291cmNlIGltYWdlIGFuZCBkcmF3IHRoZSBmaWx0ZXJlZCBvdXRwdXRcbiAgICAgKiB0byB0aGUgcHJvdmlkZWQgZGVzdGluYXRpb24gY2FudmFzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbmhhbmNlZEZpbHRlcn0gZmlsdGVycyBUaGUgZmlsdGVyIHRvIGFwcGx5LlxuICAgICAqIEBwYXJhbSB7SFRNTEltYWdlRWxlbWVudHxIVE1MQ2FudmFzRWxlbWVudH0gc291cmNlRWxlbWVudCBUaGUgc291cmNlIHRvIGJlIGZpbHRlcmVkLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzb3VyY2VXaWR0aCBUaGUgd2lkdGggb2YgdGhlIHNvdXJjZSBpbnB1dC5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc291cmNlSGVpZ2h0IFRoZSBoZWlnaHQgb2YgdGhlIHNvdXJjZSBpbnB1dC5cbiAgICAgKiBAcGFyYW0ge0hUTUxDYW52YXNFbGVtZW50fSB0YXJnZXRDYW52YXMgVGhlIGRlc3RpbmF0aW9uIGZvciBmaWx0ZXJlZCBvdXRwdXQgdG8gYmUgZHJhd24uXG4gICAgICovXG4gICAgYXBwbHlGaWx0ZXJzOiBmdW5jdGlvbihmaWx0ZXJzLCBzb3VyY2VFbGVtZW50LCBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0LCB0YXJnZXRDYW52YXMpIHtcbiAgICAgIHZhciBjdHggPSB0YXJnZXRDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2Uoc291cmNlRWxlbWVudCwgMCwgMCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCk7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBzb3VyY2VXaWR0aCwgc291cmNlSGVpZ2h0KTtcbiAgICAgIHZhciBvcmlnaW5hbEltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgc291cmNlV2lkdGgsIHNvdXJjZUhlaWdodCk7XG4gICAgICB2YXIgcGlwZWxpbmVTdGF0ZSA9IHtcbiAgICAgICAgc291cmNlV2lkdGg6IHNvdXJjZVdpZHRoLFxuICAgICAgICBzb3VyY2VIZWlnaHQ6IHNvdXJjZUhlaWdodCxcbiAgICAgICAgaW1hZ2VEYXRhOiBpbWFnZURhdGEsXG4gICAgICAgIG9yaWdpbmFsRWw6IHNvdXJjZUVsZW1lbnQsXG4gICAgICAgIG9yaWdpbmFsSW1hZ2VEYXRhOiBvcmlnaW5hbEltYWdlRGF0YSxcbiAgICAgICAgY2FudmFzRWw6IHRhcmdldENhbnZhcyxcbiAgICAgICAgY3R4OiBjdHgsXG4gICAgICAgIGZpbHRlckJhY2tlbmQ6IHRoaXMsXG4gICAgICB9O1xuICAgICAgZmlsdGVycy5mb3JFYWNoKGZ1bmN0aW9uKGZpbHRlcikgeyBmaWx0ZXIuYXBwbHlUbyhwaXBlbGluZVN0YXRlKTsgfSk7XG4gICAgICBpZiAocGlwZWxpbmVTdGF0ZS5pbWFnZURhdGEud2lkdGggIT09IHNvdXJjZVdpZHRoIHx8IHBpcGVsaW5lU3RhdGUuaW1hZ2VEYXRhLmhlaWdodCAhPT0gc291cmNlSGVpZ2h0KSB7XG4gICAgICAgIHRhcmdldENhbnZhcy53aWR0aCA9IHBpcGVsaW5lU3RhdGUuaW1hZ2VEYXRhLndpZHRoO1xuICAgICAgICB0YXJnZXRDYW52YXMuaGVpZ2h0ID0gcGlwZWxpbmVTdGF0ZS5pbWFnZURhdGEuaGVpZ2h0O1xuICAgICAgfVxuICAgICAgY3R4LnB1dEltYWdlRGF0YShwaXBlbGluZVN0YXRlLmltYWdlRGF0YSwgMCwgMCk7XG4gICAgICByZXR1cm4gcGlwZWxpbmVTdGF0ZTtcbiAgICB9LFxuXG4gIH07XG59KSgpO1xuXG5cbi8qKlxuICogQG5hbWVzcGFjZSBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZVxuICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTIjaW1hZ2VfZmlsdGVyc31cbiAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAqL1xuZmFicmljLkltYWdlID0gZmFicmljLkltYWdlIHx8IHsgfTtcbmZhYnJpYy5JbWFnZS5maWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMgfHwgeyB9O1xuXG4vKipcbiAqIFJvb3QgZmlsdGVyIGNsYXNzIGZyb20gd2hpY2ggYWxsIGZpbHRlciBjbGFzc2VzIGluaGVyaXQgZnJvbVxuICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICovXG5mYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLnByb3RvdHlwZSAqLyB7XG5cbiAgLyoqXG4gICAqIEZpbHRlciB0eXBlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAqIEBkZWZhdWx0XG4gICAqL1xuICB0eXBlOiAnQmFzZUZpbHRlcicsXG5cbiAgLyoqXG4gICAqIEFycmF5IG9mIGF0dHJpYnV0ZXMgdG8gc2VuZCB3aXRoIGJ1ZmZlcnMuIGRvIG5vdCBtb2RpZnlcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgdmVydGV4U291cmNlOiAnYXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xcbicgK1xuICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAndlRleENvb3JkID0gYVBvc2l0aW9uO1xcbicgK1xuICAgICAgJ2dsX1Bvc2l0aW9uID0gdmVjNChhUG9zaXRpb24gKiAyLjAgLSAxLjAsIDAuMCwgMS4wKTtcXG4nICtcbiAgICAnfScsXG5cbiAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAnZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICd9JyxcblxuICAvKipcbiAgICogQ29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgKi9cbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGZpbHRlcidzIHByb3BlcnRpZXMgZnJvbSBvcHRpb25zXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICovXG4gIHNldE9wdGlvbnM6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXNbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlciBwcm9ncmFtLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHRvIHVzZSBmb3Igc2hhZGVyIGNvbXBpbGF0aW9uLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZnJhZ21lbnRTb3VyY2UgZnJhZ21lbnRTaGFkZXIgc291cmNlIGZvciBjb21waWxhdGlvblxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmVydGV4U291cmNlIHZlcnRleFNoYWRlciBzb3VyY2UgZm9yIGNvbXBpbGF0aW9uXG4gICAqL1xuICBjcmVhdGVQcm9ncmFtOiBmdW5jdGlvbihnbCwgZnJhZ21lbnRTb3VyY2UsIHZlcnRleFNvdXJjZSkge1xuICAgIGZyYWdtZW50U291cmNlID0gZnJhZ21lbnRTb3VyY2UgfHwgdGhpcy5mcmFnbWVudFNvdXJjZTtcbiAgICB2ZXJ0ZXhTb3VyY2UgPSB2ZXJ0ZXhTb3VyY2UgfHwgdGhpcy52ZXJ0ZXhTb3VyY2U7XG4gICAgaWYgKGZhYnJpYy53ZWJHbFByZWNpc2lvbiAhPT0gJ2hpZ2hwJyl7XG4gICAgICBmcmFnbWVudFNvdXJjZSA9IGZyYWdtZW50U291cmNlLnJlcGxhY2UoXG4gICAgICAgIC9wcmVjaXNpb24gaGlnaHAgZmxvYXQvZyxcbiAgICAgICAgJ3ByZWNpc2lvbiAnICsgZmFicmljLndlYkdsUHJlY2lzaW9uICsgJyBmbG9hdCdcbiAgICAgICk7XG4gICAgfVxuICAgIHZhciB2ZXJ0ZXhTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XG4gICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlciwgdmVydGV4U291cmNlKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcik7XG4gICAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIodmVydGV4U2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZVxuICAgICAgICAnVmVydGV4IHNoYWRlciBjb21waWxlIGVycm9yIGZvciAnICsgdGhpcy50eXBlICsgJzogJyArXG4gICAgICAgIGdsLmdldFNoYWRlckluZm9Mb2codmVydGV4U2hhZGVyKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgZnJhZ21lbnRTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcbiAgICBnbC5zaGFkZXJTb3VyY2UoZnJhZ21lbnRTaGFkZXIsIGZyYWdtZW50U291cmNlKTtcbiAgICBnbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcbiAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihmcmFnbWVudFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGVcbiAgICAgICAgJ0ZyYWdtZW50IHNoYWRlciBjb21waWxlIGVycm9yIGZvciAnICsgdGhpcy50eXBlICsgJzogJyArXG4gICAgICAgIGdsLmdldFNoYWRlckluZm9Mb2coZnJhZ21lbnRTaGFkZXIpXG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG4gICAgaWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXRlbXBsYXRlXG4gICAgICAgICdTaGFkZXIgbGluayBlcnJvciBmb3IgXCIke3RoaXMudHlwZX1cIiAnICtcbiAgICAgICAgZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIGF0dHJpYnV0ZUxvY2F0aW9ucyA9IHRoaXMuZ2V0QXR0cmlidXRlTG9jYXRpb25zKGdsLCBwcm9ncmFtKTtcbiAgICB2YXIgdW5pZm9ybUxvY2F0aW9ucyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9ucyhnbCwgcHJvZ3JhbSkgfHwgeyB9O1xuICAgIHVuaWZvcm1Mb2NhdGlvbnMudVN0ZXBXID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1U3RlcFcnKTtcbiAgICB1bmlmb3JtTG9jYXRpb25zLnVTdGVwSCA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVN0ZXBIJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByb2dyYW06IHByb2dyYW0sXG4gICAgICBhdHRyaWJ1dGVMb2NhdGlvbnM6IGF0dHJpYnV0ZUxvY2F0aW9ucyxcbiAgICAgIHVuaWZvcm1Mb2NhdGlvbnM6IHVuaWZvcm1Mb2NhdGlvbnNcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBtYXAgb2YgYXR0cmlidXRlIG5hbWVzIHRvIFdlYkdMQXR0cmlidXRlTG9jYXRpb24gb2JqZWN0cy5cbiAgICpcbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhlIHNoYWRlciBwcm9ncmFtLlxuICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGUgc2hhZGVyIHByb2dyYW0gZnJvbSB3aGljaCB0byB0YWtlIGF0dHJpYnV0ZSBsb2NhdGlvbnMuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEEgbWFwIG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhdHRyaWJ1dGUgbG9jYXRpb25zLlxuICAgKi9cbiAgZ2V0QXR0cmlidXRlTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgIHJldHVybiB7XG4gICAgICBhUG9zaXRpb246IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICdhUG9zaXRpb24nKSxcbiAgICB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBtYXAgb2YgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzLlxuICAgKlxuICAgKiBJbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuIGJ5IHN1YmNsYXNzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoZSBzaGFkZXIgcHJvZ3JhbS5cbiAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhlIHNoYWRlciBwcm9ncmFtIGZyb20gd2hpY2ggdG8gdGFrZSB1bmlmb3JtIGxvY2F0aW9ucy5cbiAgICogQHJldHVybnMge09iamVjdH0gQSBtYXAgb2YgdW5pZm9ybSBuYW1lcyB0byB1bmlmb3JtIGxvY2F0aW9ucy5cbiAgICovXG4gIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uICgvKiBnbCwgcHJvZ3JhbSAqLykge1xuICAgIC8vIGluIGNhc2UgaSBkbyBub3QgbmVlZCBhbnkgc3BlY2lhbCB1bmlmb3JtIGkgbmVlZCB0byByZXR1cm4gYW4gZW1wdHkgb2JqZWN0XG4gICAgcmV0dXJuIHsgfTtcbiAgfSxcblxuICAvKipcbiAgICogU2VuZCBhdHRyaWJ1dGUgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSBvbiB0aGUgR1BVLlxuICAgKlxuICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGUgc2hhZGVyIHByb2dyYW0uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyaWJ1dGVMb2NhdGlvbnMgQSBtYXAgb2Ygc2hhZGVyIGF0dHJpYnV0ZSBuYW1lcyB0byB0aGVpciBsb2NhdGlvbnMuXG4gICAqL1xuICBzZW5kQXR0cmlidXRlRGF0YTogZnVuY3Rpb24oZ2wsIGF0dHJpYnV0ZUxvY2F0aW9ucywgYVBvc2l0aW9uRGF0YSkge1xuICAgIHZhciBhdHRyaWJ1dGVMb2NhdGlvbiA9IGF0dHJpYnV0ZUxvY2F0aW9ucy5hUG9zaXRpb247XG4gICAgdmFyIGJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xuICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcbiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYnV0ZUxvY2F0aW9uLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBhUG9zaXRpb25EYXRhLCBnbC5TVEFUSUNfRFJBVyk7XG4gIH0sXG5cbiAgX3NldHVwRnJhbWVCdWZmZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgZ2wgPSBvcHRpb25zLmNvbnRleHQsIHdpZHRoLCBoZWlnaHQ7XG4gICAgaWYgKG9wdGlvbnMucGFzc2VzID4gMSkge1xuICAgICAgd2lkdGggPSBvcHRpb25zLmRlc3RpbmF0aW9uV2lkdGg7XG4gICAgICBoZWlnaHQgPSBvcHRpb25zLmRlc3RpbmF0aW9uSGVpZ2h0O1xuICAgICAgaWYgKG9wdGlvbnMuc291cmNlV2lkdGggIT09IHdpZHRoIHx8IG9wdGlvbnMuc291cmNlSGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgZ2wuZGVsZXRlVGV4dHVyZShvcHRpb25zLnRhcmdldFRleHR1cmUpO1xuICAgICAgICBvcHRpb25zLnRhcmdldFRleHR1cmUgPSBvcHRpb25zLmZpbHRlckJhY2tlbmQuY3JlYXRlVGV4dHVyZShnbCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB9XG4gICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsXG4gICAgICAgIG9wdGlvbnMudGFyZ2V0VGV4dHVyZSwgMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gZHJhdyBsYXN0IGZpbHRlciBvbiBjYW52YXMgYW5kIG5vdCB0byBmcmFtZWJ1ZmZlci5cbiAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG4gICAgICBnbC5maW5pc2goKTtcbiAgICB9XG4gIH0sXG5cbiAgX3N3YXBUZXh0dXJlczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIG9wdGlvbnMucGFzc2VzLS07XG4gICAgb3B0aW9ucy5wYXNzKys7XG4gICAgdmFyIHRlbXAgPSBvcHRpb25zLnRhcmdldFRleHR1cmU7XG4gICAgb3B0aW9ucy50YXJnZXRUZXh0dXJlID0gb3B0aW9ucy5zb3VyY2VUZXh0dXJlO1xuICAgIG9wdGlvbnMuc291cmNlVGV4dHVyZSA9IHRlbXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdlbmVyaWMgaXNOZXV0cmFsIGltcGxlbWVudGF0aW9uIGZvciBvbmUgcGFyYW1ldGVyIGJhc2VkIGZpbHRlcnMuXG4gICAqIFVzZWQgb25seSBpbiBpbWFnZSBhcHBseUZpbHRlcnMgdG8gZGlzY2FyZCBmaWx0ZXJzIHRoYXQgd2lsbCBub3QgaGF2ZSBhbiBlZmZlY3RcbiAgICogb24gdGhlIGltYWdlXG4gICAqIE90aGVyIGZpbHRlcnMgbWF5IG5lZWQgdGhlaXIgb3duIHZlcnNpb24gKCBDb2xvck1hdHJpeCwgSHVlUm90YXRpb24sIGdhbW1hLCBDb21wb3NlZEZpbHRlciApXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqKi9cbiAgaXNOZXV0cmFsU3RhdGU6IGZ1bmN0aW9uKC8qIG9wdGlvbnMgKi8pIHtcbiAgICB2YXIgbWFpbiA9IHRoaXMubWFpblBhcmFtZXRlcixcbiAgICAgICAgX2NsYXNzID0gZmFicmljLkltYWdlLmZpbHRlcnNbdGhpcy50eXBlXS5wcm90b3R5cGU7XG4gICAgaWYgKG1haW4pIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KF9jbGFzc1ttYWluXSkpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IF9jbGFzc1ttYWluXS5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICBpZiAodGhpc1ttYWluXVtpXSAhPT0gX2NsYXNzW21haW5dW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBfY2xhc3NbbWFpbl0gPT09IHRoaXNbbWFpbl07XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQXBwbHkgdGhpcyBmaWx0ZXIgdG8gdGhlIGlucHV0IGltYWdlIGRhdGEgcHJvdmlkZWQuXG4gICAqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0byB1c2UgV2ViR0wgb3IgQ2FudmFzMkQgYmFzZWQgb24gdGhlIG9wdGlvbnMud2ViZ2wgZmxhZy5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFzc2VzIFRoZSBudW1iZXIgb2YgZmlsdGVycyByZW1haW5pbmcgdG8gYmUgZXhlY3V0ZWRcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLndlYmdsIFdoZXRoZXIgdG8gdXNlIHdlYmdsIHRvIHJlbmRlciB0aGUgZmlsdGVyLlxuICAgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gb3B0aW9ucy5zb3VyY2VUZXh0dXJlIFRoZSB0ZXh0dXJlIHNldHVwIGFzIHRoZSBzb3VyY2UgdG8gYmUgZmlsdGVyZWQuXG4gICAqIEBwYXJhbSB7V2ViR0xUZXh0dXJlfSBvcHRpb25zLnRhcmdldFRleHR1cmUgVGhlIHRleHR1cmUgd2hlcmUgZmlsdGVyZWQgb3V0cHV0IHNob3VsZCBiZSBkcmF3bi5cbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IG9wdGlvbnMuY29udGV4dCBUaGUgR0wgY29udGV4dCB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgKi9cbiAgYXBwbHlUbzogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLndlYmdsKSB7XG4gICAgICB0aGlzLl9zZXR1cEZyYW1lQnVmZmVyKG9wdGlvbnMpO1xuICAgICAgdGhpcy5hcHBseVRvV2ViR0wob3B0aW9ucyk7XG4gICAgICB0aGlzLl9zd2FwVGV4dHVyZXMob3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5hcHBseVRvMmQob3B0aW9ucyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGNhY2hlZCBzaGFkZXIuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wcm9ncmFtQ2FjaGUgQSBtYXAgb2YgY29tcGlsZWQgc2hhZGVyIHByb2dyYW1zLCBrZXllZCBieSBmaWx0ZXIgdHlwZS5cbiAgICovXG4gIHJldHJpZXZlU2hhZGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zLnByb2dyYW1DYWNoZS5oYXNPd25Qcm9wZXJ0eSh0aGlzLnR5cGUpKSB7XG4gICAgICBvcHRpb25zLnByb2dyYW1DYWNoZVt0aGlzLnR5cGVdID0gdGhpcy5jcmVhdGVQcm9ncmFtKG9wdGlvbnMuY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zLnByb2dyYW1DYWNoZVt0aGlzLnR5cGVdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBseSB0aGlzIGZpbHRlciB1c2luZyB3ZWJnbC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFzc2VzIFRoZSBudW1iZXIgb2YgZmlsdGVycyByZW1haW5pbmcgdG8gYmUgZXhlY3V0ZWRcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLndlYmdsIFdoZXRoZXIgdG8gdXNlIHdlYmdsIHRvIHJlbmRlciB0aGUgZmlsdGVyLlxuICAgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gb3B0aW9ucy5vcmlnaW5hbFRleHR1cmUgVGhlIHRleHR1cmUgb2YgdGhlIG9yaWdpbmFsIGlucHV0IGltYWdlLlxuICAgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gb3B0aW9ucy5zb3VyY2VUZXh0dXJlIFRoZSB0ZXh0dXJlIHNldHVwIGFzIHRoZSBzb3VyY2UgdG8gYmUgZmlsdGVyZWQuXG4gICAqIEBwYXJhbSB7V2ViR0xUZXh0dXJlfSBvcHRpb25zLnRhcmdldFRleHR1cmUgVGhlIHRleHR1cmUgd2hlcmUgZmlsdGVyZWQgb3V0cHV0IHNob3VsZCBiZSBkcmF3bi5cbiAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IG9wdGlvbnMuY29udGV4dCBUaGUgR0wgY29udGV4dCB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgKi9cbiAgYXBwbHlUb1dlYkdMOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGdsID0gb3B0aW9ucy5jb250ZXh0O1xuICAgIHZhciBzaGFkZXIgPSB0aGlzLnJldHJpZXZlU2hhZGVyKG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLnBhc3MgPT09IDAgJiYgb3B0aW9ucy5vcmlnaW5hbFRleHR1cmUpIHtcbiAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG9wdGlvbnMub3JpZ2luYWxUZXh0dXJlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBvcHRpb25zLnNvdXJjZVRleHR1cmUpO1xuICAgIH1cbiAgICBnbC51c2VQcm9ncmFtKHNoYWRlci5wcm9ncmFtKTtcbiAgICB0aGlzLnNlbmRBdHRyaWJ1dGVEYXRhKGdsLCBzaGFkZXIuYXR0cmlidXRlTG9jYXRpb25zLCBvcHRpb25zLmFQb3NpdGlvbik7XG5cbiAgICBnbC51bmlmb3JtMWYoc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnMudVN0ZXBXLCAxIC8gb3B0aW9ucy5zb3VyY2VXaWR0aCk7XG4gICAgZ2wudW5pZm9ybTFmKHNoYWRlci51bmlmb3JtTG9jYXRpb25zLnVTdGVwSCwgMSAvIG9wdGlvbnMuc291cmNlSGVpZ2h0KTtcblxuICAgIHRoaXMuc2VuZFVuaWZvcm1EYXRhKGdsLCBzaGFkZXIudW5pZm9ybUxvY2F0aW9ucyk7XG4gICAgZ2wudmlld3BvcnQoMCwgMCwgb3B0aW9ucy5kZXN0aW5hdGlvbldpZHRoLCBvcHRpb25zLmRlc3RpbmF0aW9uSGVpZ2h0KTtcbiAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcbiAgfSxcblxuICBiaW5kQWRkaXRpb25hbFRleHR1cmU6IGZ1bmN0aW9uKGdsLCB0ZXh0dXJlLCB0ZXh0dXJlVW5pdCkge1xuICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZVVuaXQpO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuICAgIC8vIHJlc2V0IGFjdGl2ZSB0ZXh0dXJlIHRvIDAgYXMgdXN1YWxcbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKTtcbiAgfSxcblxuICB1bmJpbmRBZGRpdGlvbmFsVGV4dHVyZTogZnVuY3Rpb24oZ2wsIHRleHR1cmVVbml0KSB7XG4gICAgZ2wuYWN0aXZlVGV4dHVyZSh0ZXh0dXJlVW5pdCk7XG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCk7XG4gIH0sXG5cbiAgZ2V0TWFpblBhcmFtZXRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXNbdGhpcy5tYWluUGFyYW1ldGVyXTtcbiAgfSxcblxuICBzZXRNYWluUGFyYW1ldGVyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXNbdGhpcy5tYWluUGFyYW1ldGVyXSA9IHZhbHVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZW5kIHVuaWZvcm0gZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSBvbiB0aGUgR1BVLlxuICAgKlxuICAgKiBJbnRlbmRlZCB0byBiZSBvdmVycmlkZGVuIGJ5IHN1YmNsYXNzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoZSBzaGFkZXIgcHJvZ3JhbS5cbiAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc2hhZGVyIHVuaWZvcm0gbmFtZXMgdG8gdGhlaXIgbG9jYXRpb25zLlxuICAgKi9cbiAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbigvKiBnbCwgdW5pZm9ybUxvY2F0aW9ucyAqLykge1xuICAgIC8vIEludGVudGlvbmFsbHkgbGVmdCBibGFuay4gIE92ZXJyaWRlIG1lIGluIHN1YmNsYXNzZXMuXG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIG5lZWRlZCBieSBhIDJkIGZpbHRlciwgdGhpcyBmdW5jdGlvbnMgY2FuIGNyZWF0ZSBhbiBoZWxwZXIgY2FudmFzIHRvIGJlIHVzZWRcbiAgICogcmVtZW1iZXIgdGhhdCBvcHRpb25zLnRhcmdldENhbnZhcyBpcyBhdmFpbGFibGUgZm9yIHVzZSB0aWxsIGVuZCBvZiBjaGFpbi5cbiAgICovXG4gIGNyZWF0ZUhlbHBMYXllcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy5oZWxwTGF5ZXIpIHtcbiAgICAgIHZhciBoZWxwTGF5ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgIGhlbHBMYXllci53aWR0aCA9IG9wdGlvbnMuc291cmNlV2lkdGg7XG4gICAgICBoZWxwTGF5ZXIuaGVpZ2h0ID0gb3B0aW9ucy5zb3VyY2VIZWlnaHQ7XG4gICAgICBvcHRpb25zLmhlbHBMYXllciA9IGhlbHBMYXllcjtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAqL1xuICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9iamVjdCA9IHsgdHlwZTogdGhpcy50eXBlIH0sIG1haW5QID0gdGhpcy5tYWluUGFyYW1ldGVyO1xuICAgIGlmIChtYWluUCkge1xuICAgICAgb2JqZWN0W21haW5QXSA9IHRoaXNbbWFpblBdO1xuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IEpTT05cbiAgICovXG4gIHRvSlNPTjogZnVuY3Rpb24oKSB7XG4gICAgLy8gZGVsZWdhdGUsIG5vdCBhbGlhc1xuICAgIHJldHVybiB0aGlzLnRvT2JqZWN0KCk7XG4gIH1cbn0pO1xuXG5mYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnNbb2JqZWN0LnR5cGVdKG9iamVjdCk7XG4gIGNhbGxiYWNrICYmIGNhbGxiYWNrKGZpbHRlcik7XG4gIHJldHVybiBmaWx0ZXI7XG59O1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIENvbG9yIE1hdHJpeCBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbG9yTWF0cml4XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbG9yTWF0cml4I2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQHNlZSB7QExpbmsgaHR0cDovL3d3dy53ZWJ3YXNwLmNvLnVrL3R1dG9yaWFscy8yMTkvQ29sb3JfTWF0cml4X0ZpbHRlci5waHB9XG4gICAqIEBzZWUge0BMaW5rIGh0dHA6Ly9waG9ib3NsYWIub3JnL2xvZy8yMDEzLzExL2Zhc3QtaW1hZ2UtZmlsdGVycy13aXRoLXdlYmdsfVxuICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5Lb2RhY2hyb21lIGZpbHRlcjwvY2FwdGlvbj5cbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db2xvck1hdHJpeCh7XG4gICAqICBtYXRyaXg6IFtcbiAgICAgICAxLjEyODU1ODIzOTY1OTM1MjUsIC0wLjM5NjczODIyODM2MDEzNDgsIC0wLjAzOTkyNTU5MTcyOTIxNzkzLCAwLCA2My43Mjk1ODc2MjE5NjUwMixcbiAgICAgICAtMC4xNjQwNDMzOTk2MjI0NDYxNiwgMS4wODM1MjUxNTY2MjkxMzA0LCAtMC4wNTQ5ODgwNTExNTYzMzEzMiwgMCwgMjQuNzMyNDA3ODk2NzA2MjAzLFxuICAgICAgIC0wLjE2Nzg2MDEwNzA2MTU1NzYzLCAtMC41NjAzNDE2Mjc3Njk1MjQ4LCAxLjYwMTQ4NTA3NjE5NjQ5NDMsIDAsIDM1LjYyOTgyODA3NDYwOTQ2LFxuICAgICAgIDAsIDAsIDAsIDEsIDBcbiAgICAgIF1cbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKi9cbiAgZmlsdGVycy5Db2xvck1hdHJpeCA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db2xvck1hdHJpeC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ0NvbG9yTWF0cml4JyxcblxuICAgIGZyYWdtZW50U291cmNlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBtYXQ0IHVDb2xvck1hdHJpeDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHZlYzQgdUNvbnN0YW50cztcXG4nICtcbiAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAnY29sb3IgKj0gdUNvbG9yTWF0cml4O1xcbicgK1xuICAgICAgICAnY29sb3IgKz0gdUNvbnN0YW50cztcXG4nICtcbiAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogQ29sb3JtYXRyaXggZm9yIHBpeGVscy5cbiAgICAgKiBhcnJheSBvZiAyMCBmbG9hdHMuIE51bWJlcnMgaW4gcG9zaXRpb25zIDQsIDksIDE0LCAxOSBsb29zZSBtZWFuaW5nXG4gICAgICogb3V0c2lkZSB0aGUgLTEsIDEgcmFuZ2UuXG4gICAgICogMC4wMDM5MjE1Njg2IGlzIHRoZSBwYXJ0IG9mIDEgdGhhdCBnZXQgdHJhbnNsYXRlZCB0byAxIGluIDJkXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0cml4IGFycmF5IG9mIDIwIG51bWJlcnMuXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtYXRyaXg6IFtcbiAgICAgIDEsIDAsIDAsIDAsIDAsXG4gICAgICAwLCAxLCAwLCAwLCAwLFxuICAgICAgMCwgMCwgMSwgMCwgMCxcbiAgICAgIDAsIDAsIDAsIDEsIDBcbiAgICBdLFxuXG4gICAgbWFpblBhcmFtZXRlcjogJ21hdHJpeCcsXG5cbiAgICAvKipcbiAgICAgKiBMb2NrIHRoZSBjb2xvcm1hdHJpeCBvbiB0aGUgY29sb3IgcGFydCwgc2tpcHBpbmcgYWxwaGEsIG1haW5seSBmb3Igbm9uIHdlYmdsIHNjZW5hcmlvXG4gICAgICogdG8gc2F2ZSBzb21lIGNhbGN1bGF0aW9uXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBjb2xvcnNPbmx5OiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhcnJheSBpbnN0ZWFkIG11dGF0aW5nIHRoZSBwcm90b3R5cGUgd2l0aCBwdXNoXG4gICAgICB0aGlzLm1hdHJpeCA9IHRoaXMubWF0cml4LnNsaWNlKDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgQ29sb3JNYXRyaXggb3BlcmF0aW9uIHRvIGEgVWludDhBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICBpTGVuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgbSA9IHRoaXMubWF0cml4LFxuICAgICAgICAgIHIsIGcsIGIsIGEsIGksIGNvbG9yc09ubHkgPSB0aGlzLmNvbG9yc09ubHk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBpTGVuOyBpICs9IDQpIHtcbiAgICAgICAgciA9IGRhdGFbaV07XG4gICAgICAgIGcgPSBkYXRhW2kgKyAxXTtcbiAgICAgICAgYiA9IGRhdGFbaSArIDJdO1xuICAgICAgICBpZiAoY29sb3JzT25seSkge1xuICAgICAgICAgIGRhdGFbaV0gPSByICogbVswXSArIGcgKiBtWzFdICsgYiAqIG1bMl0gKyBtWzRdICogMjU1O1xuICAgICAgICAgIGRhdGFbaSArIDFdID0gciAqIG1bNV0gKyBnICogbVs2XSArIGIgKiBtWzddICsgbVs5XSAqIDI1NTtcbiAgICAgICAgICBkYXRhW2kgKyAyXSA9IHIgKiBtWzEwXSArIGcgKiBtWzExXSArIGIgKiBtWzEyXSArIG1bMTRdICogMjU1O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGEgPSBkYXRhW2kgKyAzXTtcbiAgICAgICAgICBkYXRhW2ldID0gciAqIG1bMF0gKyBnICogbVsxXSArIGIgKiBtWzJdICsgYSAqIG1bM10gKyBtWzRdICogMjU1O1xuICAgICAgICAgIGRhdGFbaSArIDFdID0gciAqIG1bNV0gKyBnICogbVs2XSArIGIgKiBtWzddICsgYSAqIG1bOF0gKyBtWzldICogMjU1O1xuICAgICAgICAgIGRhdGFbaSArIDJdID0gciAqIG1bMTBdICsgZyAqIG1bMTFdICsgYiAqIG1bMTJdICsgYSAqIG1bMTNdICsgbVsxNF0gKiAyNTU7XG4gICAgICAgICAgZGF0YVtpICsgM10gPSByICogbVsxNV0gKyBnICogbVsxNl0gKyBiICogbVsxN10gKyBhICogbVsxOF0gKyBtWzE5XSAqIDI1NTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdUNvbG9yTWF0cml4OiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VDb2xvck1hdHJpeCcpLFxuICAgICAgICB1Q29uc3RhbnRzOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VDb25zdGFudHMnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIHZhciBtID0gdGhpcy5tYXRyaXgsXG4gICAgICAgICAgbWF0cml4ID0gW1xuICAgICAgICAgICAgbVswXSwgbVsxXSwgbVsyXSwgbVszXSxcbiAgICAgICAgICAgIG1bNV0sIG1bNl0sIG1bN10sIG1bOF0sXG4gICAgICAgICAgICBtWzEwXSwgbVsxMV0sIG1bMTJdLCBtWzEzXSxcbiAgICAgICAgICAgIG1bMTVdLCBtWzE2XSwgbVsxN10sIG1bMThdXG4gICAgICAgICAgXSxcbiAgICAgICAgICBjb25zdGFudHMgPSBbbVs0XSwgbVs5XSwgbVsxNF0sIG1bMTldXTtcbiAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYodW5pZm9ybUxvY2F0aW9ucy51Q29sb3JNYXRyaXgsIGZhbHNlLCBtYXRyaXgpO1xuICAgICAgZ2wudW5pZm9ybTRmdih1bmlmb3JtTG9jYXRpb25zLnVDb25zdGFudHMsIGNvbnN0YW50cyk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBmdW5jdGlvbiB0byBpbnZva2UgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbG9yTWF0cml4fSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db2xvck1hdHJpeFxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuQ29sb3JNYXRyaXguZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBCcmlnaHRuZXNzIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuQnJpZ2h0bmVzc1xuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CcmlnaHRuZXNzI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CcmlnaHRuZXNzKHtcbiAgICogICBicmlnaHRuZXNzOiAwLjA1XG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICovXG4gIGZpbHRlcnMuQnJpZ2h0bmVzcyA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CcmlnaHRuZXNzLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnQnJpZ2h0bmVzcycsXG5cbiAgICAvKipcbiAgICAgKiBGcmFnbWVudCBzb3VyY2UgZm9yIHRoZSBicmlnaHRuZXNzIHByb2dyYW1cbiAgICAgKi9cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVCcmlnaHRuZXNzO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgJ2NvbG9yLnJnYiArPSB1QnJpZ2h0bmVzcztcXG4nICtcbiAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogQnJpZ2h0bmVzcyB2YWx1ZSwgZnJvbSAtMSB0byAxLlxuICAgICAqIHRyYW5zbGF0ZWQgdG8gLTI1NSB0byAyNTUgZm9yIDJkXG4gICAgICogMC4wMDM5MjE1Njg2IGlzIHRoZSBwYXJ0IG9mIDEgdGhhdCBnZXQgdHJhbnNsYXRlZCB0byAxIGluIDJkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJyaWdodG5lc3NcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJyaWdodG5lc3M6IDAsXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZSB0aGUgcHJvcGVydHkgdGhhdCBpcyB0aGUgZmlsdGVyIHBhcmFtZXRlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtYWluUGFyYW1ldGVyOiAnYnJpZ2h0bmVzcycsXG5cbiAgICAvKipcbiAgICAqIEFwcGx5IHRoZSBCcmlnaHRuZXNzIG9wZXJhdGlvbiB0byBhIFVpbnQ4Q2xhbXBlZEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICpcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAodGhpcy5icmlnaHRuZXNzID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGksIGxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIGJyaWdodG5lc3MgPSBNYXRoLnJvdW5kKHRoaXMuYnJpZ2h0bmVzcyAqIDI1NSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgZGF0YVtpXSA9IGRhdGFbaV0gKyBicmlnaHRuZXNzO1xuICAgICAgICBkYXRhW2kgKyAxXSA9IGRhdGFbaSArIDFdICsgYnJpZ2h0bmVzcztcbiAgICAgICAgZGF0YVtpICsgMl0gPSBkYXRhW2kgKyAyXSArIGJyaWdodG5lc3M7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1QnJpZ2h0bmVzczogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1QnJpZ2h0bmVzcycpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgZ2wudW5pZm9ybTFmKHVuaWZvcm1Mb2NhdGlvbnMudUJyaWdodG5lc3MsIHRoaXMuYnJpZ2h0bmVzcyk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5CcmlnaHRuZXNzfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CcmlnaHRuZXNzXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CcmlnaHRuZXNzLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBleHRlbmQgPSBmYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogQWRhcHRlZCBmcm9tIDxhIGhyZWY9XCJodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy9jYW52YXMvaW1hZ2VmaWx0ZXJzL1wiPmh0bWw1cm9ja3MgYXJ0aWNsZTwvYT5cbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnZvbHV0ZVxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZSA8Y2FwdGlvbj5TaGFycGVuIGZpbHRlcjwvY2FwdGlvbj5cbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUoe1xuICAgKiAgIG1hdHJpeDogWyAwLCAtMSwgIDAsXG4gICAqICAgICAgICAgICAgLTEsICA1LCAtMSxcbiAgICogICAgICAgICAgICAgMCwgLTEsICAwIF1cbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKiBjYW52YXMucmVuZGVyQWxsKCk7XG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPkJsdXIgZmlsdGVyPC9jYXB0aW9uPlxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnZvbHV0ZSh7XG4gICAqICAgbWF0cml4OiBbIDEvOSwgMS85LCAxLzksXG4gICAqICAgICAgICAgICAgIDEvOSwgMS85LCAxLzksXG4gICAqICAgICAgICAgICAgIDEvOSwgMS85LCAxLzkgXVxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqIGNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICogQGV4YW1wbGUgPGNhcHRpb24+RW1ib3NzIGZpbHRlcjwvY2FwdGlvbj5cbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUoe1xuICAgKiAgIG1hdHJpeDogWyAxLCAgIDEsICAxLFxuICAgKiAgICAgICAgICAgICAxLCAwLjcsIC0xLFxuICAgKiAgICAgICAgICAgIC0xLCAgLTEsIC0xIF1cbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKiBjYW52YXMucmVuZGVyQWxsKCk7XG4gICAqIEBleGFtcGxlIDxjYXB0aW9uPkVtYm9zcyBmaWx0ZXIgd2l0aCBvcGFxdWVuZXNzPC9jYXB0aW9uPlxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnZvbHV0ZSh7XG4gICAqICAgb3BhcXVlOiB0cnVlLFxuICAgKiAgIG1hdHJpeDogWyAxLCAgIDEsICAxLFxuICAgKiAgICAgICAgICAgICAxLCAwLjcsIC0xLFxuICAgKiAgICAgICAgICAgIC0xLCAgLTEsIC0xIF1cbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKiBjYW52YXMucmVuZGVyQWxsKCk7XG4gICAqL1xuICBmaWx0ZXJzLkNvbnZvbHV0ZSA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdDb252b2x1dGUnLFxuXG4gICAgLypcbiAgICAgKiBPcGFxdWUgdmFsdWUgKHRydWUvZmFsc2UpXG4gICAgICovXG4gICAgb3BhcXVlOiBmYWxzZSxcblxuICAgIC8qXG4gICAgICogbWF0cml4IGZvciB0aGUgZmlsdGVyLCBtYXggOXg5XG4gICAgICovXG4gICAgbWF0cml4OiBbMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMF0sXG5cbiAgICAvKipcbiAgICAgKiBGcmFnbWVudCBzb3VyY2UgZm9yIHRoZSBicmlnaHRuZXNzIHByb2dyYW1cbiAgICAgKi9cbiAgICBmcmFnbWVudFNvdXJjZToge1xuICAgICAgQ29udm9sdXRlXzNfMTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzldO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcFc7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwSDtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IgPSB2ZWM0KDAsIDAsIDAsIDApO1xcbicgK1xuICAgICAgICAgICdmb3IgKGZsb2F0IGggPSAwLjA7IGggPCAzLjA7IGgrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgJ2ZvciAoZmxvYXQgdyA9IDAuMDsgdyA8IDMuMDsgdys9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAgICd2ZWMyIG1hdHJpeFBvcyA9IHZlYzIodVN0ZXBXICogKHcgLSAxKSwgdVN0ZXBIICogKGggLSAxKSk7XFxuJyArXG4gICAgICAgICAgICAgICdjb2xvciArPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCArIG1hdHJpeFBvcykgKiB1TWF0cml4W2ludChoICogMy4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgQ29udm9sdXRlXzNfMDogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzldO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcFc7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwSDtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IgPSB2ZWM0KDAsIDAsIDAsIDEpO1xcbicgK1xuICAgICAgICAgICdmb3IgKGZsb2F0IGggPSAwLjA7IGggPCAzLjA7IGgrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgJ2ZvciAoZmxvYXQgdyA9IDAuMDsgdyA8IDMuMDsgdys9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAgICd2ZWMyIG1hdHJpeFBvcyA9IHZlYzIodVN0ZXBXICogKHcgLSAxLjApLCB1U3RlcEggKiAoaCAtIDEuMCkpO1xcbicgK1xuICAgICAgICAgICAgICAnY29sb3IucmdiICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgbWF0cml4UG9zKS5yZ2IgKiB1TWF0cml4W2ludChoICogMy4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdmbG9hdCBhbHBoYSA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKS5hO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLmEgPSBhbHBoYTtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgQ29udm9sdXRlXzVfMTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzI1XTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAwKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgNS4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCA1LjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gMi4wKSwgdVN0ZXBIICogKGggLSAyLjApKTtcXG4nICtcbiAgICAgICAgICAgICAgJ2NvbG9yICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgbWF0cml4UG9zKSAqIHVNYXRyaXhbaW50KGggKiA1LjAgKyB3KV07XFxuJyArXG4gICAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAnfScsXG4gICAgICBDb252b2x1dGVfNV8wOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVNYXRyaXhbMjVdO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcFc7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwSDtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IgPSB2ZWM0KDAsIDAsIDAsIDEpO1xcbicgK1xuICAgICAgICAgICdmb3IgKGZsb2F0IGggPSAwLjA7IGggPCA1LjA7IGgrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgJ2ZvciAoZmxvYXQgdyA9IDAuMDsgdyA8IDUuMDsgdys9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAgICd2ZWMyIG1hdHJpeFBvcyA9IHZlYzIodVN0ZXBXICogKHcgLSAyLjApLCB1U3RlcEggKiAoaCAtIDIuMCkpO1xcbicgK1xuICAgICAgICAgICAgICAnY29sb3IucmdiICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgbWF0cml4UG9zKS5yZ2IgKiB1TWF0cml4W2ludChoICogNS4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdmbG9hdCBhbHBoYSA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKS5hO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLmEgPSBhbHBoYTtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgQ29udm9sdXRlXzdfMTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzQ5XTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAwKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgNy4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCA3LjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gMy4wKSwgdVN0ZXBIICogKGggLSAzLjApKTtcXG4nICtcbiAgICAgICAgICAgICAgJ2NvbG9yICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgbWF0cml4UG9zKSAqIHVNYXRyaXhbaW50KGggKiA3LjAgKyB3KV07XFxuJyArXG4gICAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAnfScsXG4gICAgICBDb252b2x1dGVfN18wOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVNYXRyaXhbNDldO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcFc7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwSDtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IgPSB2ZWM0KDAsIDAsIDAsIDEpO1xcbicgK1xuICAgICAgICAgICdmb3IgKGZsb2F0IGggPSAwLjA7IGggPCA3LjA7IGgrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgJ2ZvciAoZmxvYXQgdyA9IDAuMDsgdyA8IDcuMDsgdys9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAgICd2ZWMyIG1hdHJpeFBvcyA9IHZlYzIodVN0ZXBXICogKHcgLSAzLjApLCB1U3RlcEggKiAoaCAtIDMuMCkpO1xcbicgK1xuICAgICAgICAgICAgICAnY29sb3IucmdiICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgbWF0cml4UG9zKS5yZ2IgKiB1TWF0cml4W2ludChoICogNy4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdmbG9hdCBhbHBoYSA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKS5hO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLmEgPSBhbHBoYTtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgICAgQ29udm9sdXRlXzlfMTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1TWF0cml4WzgxXTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gZmxvYXQgdVN0ZXBXO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcEg7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdmVjNCgwLCAwLCAwLCAwKTtcXG4nICtcbiAgICAgICAgICAnZm9yIChmbG9hdCBoID0gMC4wOyBoIDwgOS4wOyBoKz0xLjApIHtcXG4nICtcbiAgICAgICAgICAgICdmb3IgKGZsb2F0IHcgPSAwLjA7IHcgPCA5LjA7IHcrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgICAndmVjMiBtYXRyaXhQb3MgPSB2ZWMyKHVTdGVwVyAqICh3IC0gNC4wKSwgdVN0ZXBIICogKGggLSA0LjApKTtcXG4nICtcbiAgICAgICAgICAgICAgJ2NvbG9yICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgbWF0cml4UG9zKSAqIHVNYXRyaXhbaW50KGggKiA5LjAgKyB3KV07XFxuJyArXG4gICAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgICAnfScsXG4gICAgICBDb252b2x1dGVfOV8wOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVNYXRyaXhbODFdO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBmbG9hdCB1U3RlcFc7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwSDtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IgPSB2ZWM0KDAsIDAsIDAsIDEpO1xcbicgK1xuICAgICAgICAgICdmb3IgKGZsb2F0IGggPSAwLjA7IGggPCA5LjA7IGgrPTEuMCkge1xcbicgK1xuICAgICAgICAgICAgJ2ZvciAoZmxvYXQgdyA9IDAuMDsgdyA8IDkuMDsgdys9MS4wKSB7XFxuJyArXG4gICAgICAgICAgICAgICd2ZWMyIG1hdHJpeFBvcyA9IHZlYzIodVN0ZXBXICogKHcgLSA0LjApLCB1U3RlcEggKiAoaCAtIDQuMCkpO1xcbicgK1xuICAgICAgICAgICAgICAnY29sb3IucmdiICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkICsgbWF0cml4UG9zKS5yZ2IgKiB1TWF0cml4W2ludChoICogOS4wICsgdyldO1xcbicgK1xuICAgICAgICAgICAgJ31cXG4nICtcbiAgICAgICAgICAnfVxcbicgK1xuICAgICAgICAgICdmbG9hdCBhbHBoYSA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKS5hO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLmEgPSBhbHBoYTtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMub3BhcXVlPWZhbHNlXSBPcGFxdWUgdmFsdWUgKHRydWUvZmFsc2UpXG4gICAgICogQHBhcmFtIHtBcnJheX0gW29wdGlvbnMubWF0cml4XSBGaWx0ZXIgbWF0cml4XG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICogUmV0cmlldmVzIHRoZSBjYWNoZWQgc2hhZGVyLlxuICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMucHJvZ3JhbUNhY2hlIEEgbWFwIG9mIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtcywga2V5ZWQgYnkgZmlsdGVyIHR5cGUuXG4gICAgKi9cbiAgICByZXRyaWV2ZVNoYWRlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIHNpemUgPSBNYXRoLnNxcnQodGhpcy5tYXRyaXgubGVuZ3RoKTtcbiAgICAgIHZhciBjYWNoZUtleSA9IHRoaXMudHlwZSArICdfJyArIHNpemUgKyAnXycgKyAodGhpcy5vcGFxdWUgPyAxIDogMCk7XG4gICAgICB2YXIgc2hhZGVyU291cmNlID0gdGhpcy5mcmFnbWVudFNvdXJjZVtjYWNoZUtleV07XG4gICAgICBpZiAoIW9wdGlvbnMucHJvZ3JhbUNhY2hlLmhhc093blByb3BlcnR5KGNhY2hlS2V5KSkge1xuICAgICAgICBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV0gPSB0aGlzLmNyZWF0ZVByb2dyYW0ob3B0aW9ucy5jb250ZXh0LCBzaGFkZXJTb3VyY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnMucHJvZ3JhbUNhY2hlW2NhY2hlS2V5XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIEJyaWdodG5lc3Mgb3BlcmF0aW9uIHRvIGEgVWludDhDbGFtcGVkQXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBvcHRpb25zLmltYWdlRGF0YSBUaGUgVWludDhDbGFtcGVkQXJyYXkgdG8gYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgIHdlaWdodHMgPSB0aGlzLm1hdHJpeCxcbiAgICAgICAgICBzaWRlID0gTWF0aC5yb3VuZChNYXRoLnNxcnQod2VpZ2h0cy5sZW5ndGgpKSxcbiAgICAgICAgICBoYWxmU2lkZSA9IE1hdGguZmxvb3Ioc2lkZSAvIDIpLFxuICAgICAgICAgIHN3ID0gaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgIHNoID0gaW1hZ2VEYXRhLmhlaWdodCxcbiAgICAgICAgICBvdXRwdXQgPSBvcHRpb25zLmN0eC5jcmVhdGVJbWFnZURhdGEoc3csIHNoKSxcbiAgICAgICAgICBkc3QgPSBvdXRwdXQuZGF0YSxcbiAgICAgICAgICAvLyBnbyB0aHJvdWdoIHRoZSBkZXN0aW5hdGlvbiBpbWFnZSBwaXhlbHNcbiAgICAgICAgICBhbHBoYUZhYyA9IHRoaXMub3BhcXVlID8gMSA6IDAsXG4gICAgICAgICAgciwgZywgYiwgYSwgZHN0T2ZmLFxuICAgICAgICAgIHNjeCwgc2N5LCBzcmNPZmYsIHd0LFxuICAgICAgICAgIHgsIHksIGN4LCBjeTtcblxuICAgICAgZm9yICh5ID0gMDsgeSA8IHNoOyB5KyspIHtcbiAgICAgICAgZm9yICh4ID0gMDsgeCA8IHN3OyB4KyspIHtcbiAgICAgICAgICBkc3RPZmYgPSAoeSAqIHN3ICsgeCkgKiA0O1xuICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgd2VpZ2hlZCBzdW0gb2YgdGhlIHNvdXJjZSBpbWFnZSBwaXhlbHMgdGhhdFxuICAgICAgICAgIC8vIGZhbGwgdW5kZXIgdGhlIGNvbnZvbHV0aW9uIG1hdHJpeFxuICAgICAgICAgIHIgPSAwOyBnID0gMDsgYiA9IDA7IGEgPSAwO1xuXG4gICAgICAgICAgZm9yIChjeSA9IDA7IGN5IDwgc2lkZTsgY3krKykge1xuICAgICAgICAgICAgZm9yIChjeCA9IDA7IGN4IDwgc2lkZTsgY3grKykge1xuICAgICAgICAgICAgICBzY3kgPSB5ICsgY3kgLSBoYWxmU2lkZTtcbiAgICAgICAgICAgICAgc2N4ID0geCArIGN4IC0gaGFsZlNpZGU7XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1kZXB0aFxuICAgICAgICAgICAgICBpZiAoc2N5IDwgMCB8fCBzY3kgPj0gc2ggfHwgc2N4IDwgMCB8fCBzY3ggPj0gc3cpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNyY09mZiA9IChzY3kgKiBzdyArIHNjeCkgKiA0O1xuICAgICAgICAgICAgICB3dCA9IHdlaWdodHNbY3kgKiBzaWRlICsgY3hdO1xuXG4gICAgICAgICAgICAgIHIgKz0gZGF0YVtzcmNPZmZdICogd3Q7XG4gICAgICAgICAgICAgIGcgKz0gZGF0YVtzcmNPZmYgKyAxXSAqIHd0O1xuICAgICAgICAgICAgICBiICs9IGRhdGFbc3JjT2ZmICsgMl0gKiB3dDtcbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1kZXB0aFxuICAgICAgICAgICAgICBpZiAoIWFscGhhRmFjKSB7XG4gICAgICAgICAgICAgICAgYSArPSBkYXRhW3NyY09mZiArIDNdICogd3Q7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZHN0W2RzdE9mZl0gPSByO1xuICAgICAgICAgIGRzdFtkc3RPZmYgKyAxXSA9IGc7XG4gICAgICAgICAgZHN0W2RzdE9mZiArIDJdID0gYjtcbiAgICAgICAgICBpZiAoIWFscGhhRmFjKSB7XG4gICAgICAgICAgICBkc3RbZHN0T2ZmICsgM10gPSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRzdFtkc3RPZmYgKyAzXSA9IGRhdGFbZHN0T2ZmICsgM107XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvcHRpb25zLmltYWdlRGF0YSA9IG91dHB1dDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVNYXRyaXg6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndU1hdHJpeCcpLFxuICAgICAgICB1T3BhcXVlOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VPcGFxdWUnKSxcbiAgICAgICAgdUhhbGZTaXplOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VIYWxmU2l6ZScpLFxuICAgICAgICB1U2l6ZTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1U2l6ZScpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgZ2wudW5pZm9ybTFmdih1bmlmb3JtTG9jYXRpb25zLnVNYXRyaXgsIHRoaXMubWF0cml4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBleHRlbmQodGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JyksIHtcbiAgICAgICAgb3BhcXVlOiB0aGlzLm9wYXF1ZSxcbiAgICAgICAgbWF0cml4OiB0aGlzLm1hdHJpeFxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnZvbHV0ZX0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udm9sdXRlXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db252b2x1dGUuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIEdyYXlzY2FsZSBpbWFnZSBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkdyYXlzY2FsZVxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuR3JheXNjYWxlKCk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKi9cbiAgZmlsdGVycy5HcmF5c2NhbGUgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuR3JheXNjYWxlLnByb3RvdHlwZSAqLyB7XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgdHlwZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAnR3JheXNjYWxlJyxcblxuICAgIGZyYWdtZW50U291cmNlOiB7XG4gICAgICBhdmVyYWdlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAgICdmbG9hdCBhdmVyYWdlID0gKGNvbG9yLnIgKyBjb2xvci5iICsgY29sb3IuZykgLyAzLjA7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IHZlYzQoYXZlcmFnZSwgYXZlcmFnZSwgYXZlcmFnZSwgY29sb3IuYSk7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICAgIGxpZ2h0bmVzczogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBpbnQgdU1vZGU7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbCA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgICAnZmxvYXQgYXZlcmFnZSA9IChtYXgobWF4KGNvbC5yLCBjb2wuZyksY29sLmIpICsgbWluKG1pbihjb2wuciwgY29sLmcpLGNvbC5iKSkgLyAyLjA7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IHZlYzQoYXZlcmFnZSwgYXZlcmFnZSwgYXZlcmFnZSwgY29sLmEpO1xcbicgK1xuICAgICAgICAnfScsXG4gICAgICBsdW1pbm9zaXR5OiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIGludCB1TW9kZTtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAgICdmbG9hdCBhdmVyYWdlID0gMC4yMSAqIGNvbC5yICsgMC43MiAqIGNvbC5nICsgMC4wNyAqIGNvbC5iO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSB2ZWM0KGF2ZXJhZ2UsIGF2ZXJhZ2UsIGF2ZXJhZ2UsIGNvbC5hKTtcXG4nICtcbiAgICAgICAgJ30nLFxuICAgIH0sXG5cblxuICAgIC8qKlxuICAgICAqIEdyYXlzY2FsZSBtb2RlLCBiZXR3ZWVuICdhdmVyYWdlJywgJ2xpZ2h0bmVzcycsICdsdW1pbm9zaXR5J1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtb2RlOiAnYXZlcmFnZScsXG5cbiAgICBtYWluUGFyYW1ldGVyOiAnbW9kZScsXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgR3JheXNjYWxlIG9wZXJhdGlvbiB0byBhIFVpbnQ4QXJyYXkgcmVwcmVzZW50aW5nIHRoZSBwaXhlbHMgb2YgYW4gaW1hZ2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7SW1hZ2VEYXRhfSBvcHRpb25zLmltYWdlRGF0YSBUaGUgVWludDhBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGksXG4gICAgICAgICAgbGVuID0gZGF0YS5sZW5ndGgsIHZhbHVlLFxuICAgICAgICAgIG1vZGUgPSB0aGlzLm1vZGU7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgaWYgKG1vZGUgPT09ICdhdmVyYWdlJykge1xuICAgICAgICAgIHZhbHVlID0gKGRhdGFbaV0gKyBkYXRhW2kgKyAxXSArIGRhdGFbaSArIDJdKSAvIDM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobW9kZSA9PT0gJ2xpZ2h0bmVzcycpIHtcbiAgICAgICAgICB2YWx1ZSA9IChNYXRoLm1pbihkYXRhW2ldLCBkYXRhW2kgKyAxXSwgZGF0YVtpICsgMl0pICtcbiAgICAgICAgICAgIE1hdGgubWF4KGRhdGFbaV0sIGRhdGFbaSArIDFdLCBkYXRhW2kgKyAyXSkpIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtb2RlID09PSAnbHVtaW5vc2l0eScpIHtcbiAgICAgICAgICB2YWx1ZSA9IDAuMjEgKiBkYXRhW2ldICsgMC43MiAqIGRhdGFbaSArIDFdICsgMC4wNyAqIGRhdGFbaSArIDJdO1xuICAgICAgICB9XG4gICAgICAgIGRhdGFbaV0gPSB2YWx1ZTtcbiAgICAgICAgZGF0YVtpICsgMV0gPSB2YWx1ZTtcbiAgICAgICAgZGF0YVtpICsgMl0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBjYWNoZWQgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IG9wdGlvbnMuY29udGV4dCBUaGUgR0wgY29udGV4dCB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMucHJvZ3JhbUNhY2hlIEEgbWFwIG9mIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtcywga2V5ZWQgYnkgZmlsdGVyIHR5cGUuXG4gICAgICovXG4gICAgcmV0cmlldmVTaGFkZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBjYWNoZUtleSA9IHRoaXMudHlwZSArICdfJyArIHRoaXMubW9kZTtcbiAgICAgIGlmICghb3B0aW9ucy5wcm9ncmFtQ2FjaGUuaGFzT3duUHJvcGVydHkoY2FjaGVLZXkpKSB7XG4gICAgICAgIHZhciBzaGFkZXJTb3VyY2UgPSB0aGlzLmZyYWdtZW50U291cmNlW3RoaXMubW9kZV07XG4gICAgICAgIG9wdGlvbnMucHJvZ3JhbUNhY2hlW2NhY2hlS2V5XSA9IHRoaXMuY3JlYXRlUHJvZ3JhbShvcHRpb25zLmNvbnRleHQsIHNoYWRlclNvdXJjZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0aW9ucy5wcm9ncmFtQ2FjaGVbY2FjaGVLZXldO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdU1vZGU6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndU1vZGUnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIC8vIGRlZmF1bHQgYXZlcmFnZSBtb2RlLlxuICAgICAgdmFyIG1vZGUgPSAxO1xuICAgICAgZ2wudW5pZm9ybTFpKHVuaWZvcm1Mb2NhdGlvbnMudU1vZGUsIG1vZGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHcmF5c2NhbGUgZmlsdGVyIGlzTmV1dHJhbFN0YXRlIGltcGxlbWVudGF0aW9uXG4gICAgICogVGhlIGZpbHRlciBpcyBuZXZlciBuZXV0cmFsXG4gICAgICogb24gdGhlIGltYWdlXG4gICAgICoqL1xuICAgIGlzTmV1dHJhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkdyYXlzY2FsZX0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuR3JheXNjYWxlXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5HcmF5c2NhbGUuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIEludmVydCBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkludmVydFxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuSW52ZXJ0KCk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycyhjYW52YXMucmVuZGVyQWxsLmJpbmQoY2FudmFzKSk7XG4gICAqL1xuICBmaWx0ZXJzLkludmVydCA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5JbnZlcnQucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdJbnZlcnQnLFxuXG4gICAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSBpbnQgdUludmVydDtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICdpZiAodUludmVydCA9PSAxKSB7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IHZlYzQoMS4wIC0gY29sb3IuciwxLjAgLWNvbG9yLmcsMS4wIC1jb2xvci5iLGNvbG9yLmEpO1xcbicgK1xuICAgICAgICAnfSBlbHNlIHtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICd9XFxuJyArXG4gICAgICAnfScsXG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgaW52ZXJ0LiBpZiBmYWxzZSwgZG9lcyBub3RoaW5nXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBpbnZlcnRcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGludmVydDogdHJ1ZSxcblxuICAgIG1haW5QYXJhbWV0ZXI6ICdpbnZlcnQnLFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIEludmVydCBvcGVyYXRpb24gdG8gYSBVaW50OEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4QXJyYXkgdG8gYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLCBpLFxuICAgICAgICAgIGxlbiA9IGRhdGEubGVuZ3RoO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgICAgIGRhdGFbaV0gPSAyNTUgLSBkYXRhW2ldO1xuICAgICAgICBkYXRhW2kgKyAxXSA9IDI1NSAtIGRhdGFbaSArIDFdO1xuICAgICAgICBkYXRhW2kgKyAyXSA9IDI1NSAtIGRhdGFbaSArIDJdO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnZlcnQgZmlsdGVyIGlzTmV1dHJhbFN0YXRlIGltcGxlbWVudGF0aW9uXG4gICAgICogVXNlZCBvbmx5IGluIGltYWdlIGFwcGx5RmlsdGVycyB0byBkaXNjYXJkIGZpbHRlcnMgdGhhdCB3aWxsIG5vdCBoYXZlIGFuIGVmZmVjdFxuICAgICAqIG9uIHRoZSBpbWFnZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICoqL1xuICAgIGlzTmV1dHJhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhdGhpcy5pbnZlcnQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1SW52ZXJ0OiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VJbnZlcnQnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0xaSh1bmlmb3JtTG9jYXRpb25zLnVJbnZlcnQsIHRoaXMuaW52ZXJ0KTtcbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkludmVydH0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuSW52ZXJ0XG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5JbnZlcnQuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZXh0ZW5kID0gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIE5vaXNlIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuTm9pc2VcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuTm9pc2UjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLk5vaXNlKHtcbiAgICogICBub2lzZTogNzAwXG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICogY2FudmFzLnJlbmRlckFsbCgpO1xuICAgKi9cbiAgZmlsdGVycy5Ob2lzZSA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Ob2lzZS5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ05vaXNlJyxcblxuICAgIC8qKlxuICAgICAqIEZyYWdtZW50IHNvdXJjZSBmb3IgdGhlIG5vaXNlIHByb2dyYW1cbiAgICAgKi9cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwSDtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVOb2lzZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVTZWVkO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAnZmxvYXQgcmFuZCh2ZWMyIGNvLCBmbG9hdCBzZWVkLCBmbG9hdCB2U2NhbGUpIHtcXG4nICtcbiAgICAgICAgJ3JldHVybiBmcmFjdChzaW4oZG90KGNvLnh5ICogdlNjYWxlICx2ZWMyKDEyLjk4OTggLCA3OC4yMzMpKSkgKiA0Mzc1OC41NDUzICogKHNlZWQgKyAwLjAxKSAvIDIuMCk7XFxuJyArXG4gICAgICAnfVxcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICdjb2xvci5yZ2IgKz0gKDAuNSAtIHJhbmQodlRleENvb3JkLCB1U2VlZCwgMC4xIC8gdVN0ZXBIKSkgKiB1Tm9pc2U7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlIHRoZSBwcm9wZXJ0eSB0aGF0IGlzIHRoZSBmaWx0ZXIgcGFyYW1ldGVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG1haW5QYXJhbWV0ZXI6ICdub2lzZScsXG5cbiAgICAvKipcbiAgICAgKiBOb2lzZSB2YWx1ZSwgZnJvbVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBub2lzZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgbm9pc2U6IDAsXG5cbiAgICAvKipcbiAgICAgKiBBcHBseSB0aGUgQnJpZ2h0bmVzcyBvcGVyYXRpb24gdG8gYSBVaW50OENsYW1wZWRBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OENsYW1wZWRBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLm5vaXNlID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGksIGxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIG5vaXNlID0gdGhpcy5ub2lzZSwgcmFuZDtcblxuICAgICAgZm9yIChpID0gMCwgbGVuID0gZGF0YS5sZW5ndGg7IGkgPCBsZW47IGkgKz0gNCkge1xuXG4gICAgICAgIHJhbmQgPSAoMC41IC0gTWF0aC5yYW5kb20oKSkgKiBub2lzZTtcblxuICAgICAgICBkYXRhW2ldICs9IHJhbmQ7XG4gICAgICAgIGRhdGFbaSArIDFdICs9IHJhbmQ7XG4gICAgICAgIGRhdGFbaSArIDJdICs9IHJhbmQ7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1Tm9pc2U6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndU5vaXNlJyksXG4gICAgICAgIHVTZWVkOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VTZWVkJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICBnbC51bmlmb3JtMWYodW5pZm9ybUxvY2F0aW9ucy51Tm9pc2UsIHRoaXMubm9pc2UgLyAyNTUpO1xuICAgICAgZ2wudW5pZm9ybTFmKHVuaWZvcm1Mb2NhdGlvbnMudVNlZWQsIE1hdGgucmFuZG9tKCkpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4dGVuZCh0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnKSwge1xuICAgICAgICBub2lzZTogdGhpcy5ub2lzZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLk5vaXNlfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Ob2lzZVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuTm9pc2UuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIFBpeGVsYXRlIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuUGl4ZWxhdGVcbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuUGl4ZWxhdGUjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLlBpeGVsYXRlKHtcbiAgICogICBibG9ja3NpemU6IDhcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKi9cbiAgZmlsdGVycy5QaXhlbGF0ZSA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5QaXhlbGF0ZS5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ1BpeGVsYXRlJyxcblxuICAgIGJsb2Nrc2l6ZTogNCxcblxuICAgIG1haW5QYXJhbWV0ZXI6ICdibG9ja3NpemUnLFxuXG4gICAgLyoqXG4gICAgICogRnJhZ21lbnQgc291cmNlIGZvciB0aGUgUGl4ZWxhdGUgcHJvZ3JhbVxuICAgICAqL1xuICAgIGZyYWdtZW50U291cmNlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgJ3VuaWZvcm0gZmxvYXQgdUJsb2Nrc2l6ZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwVztcXG4nICtcbiAgICAgICd1bmlmb3JtIGZsb2F0IHVTdGVwSDtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IGJsb2NrVyA9IHVCbG9ja3NpemUgKiB1U3RlcFc7XFxuJyArXG4gICAgICAgICdmbG9hdCBibG9ja0ggPSB1QmxvY2tzaXplICogdVN0ZXBXO1xcbicgK1xuICAgICAgICAnaW50IHBvc1ggPSBpbnQodlRleENvb3JkLnggLyBibG9ja1cpO1xcbicgK1xuICAgICAgICAnaW50IHBvc1kgPSBpbnQodlRleENvb3JkLnkgLyBibG9ja0gpO1xcbicgK1xuICAgICAgICAnZmxvYXQgZnBvc1ggPSBmbG9hdChwb3NYKTtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IGZwb3NZID0gZmxvYXQocG9zWSk7XFxuJyArXG4gICAgICAgICd2ZWMyIHNxdWFyZUNvb3JkcyA9IHZlYzIoZnBvc1ggKiBibG9ja1csIGZwb3NZICogYmxvY2tIKTtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHNxdWFyZUNvb3Jkcyk7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBQaXhlbGF0ZSBvcGVyYXRpb24gdG8gYSBVaW50OENsYW1wZWRBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OENsYW1wZWRBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsXG4gICAgICAgICAgaUxlbiA9IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgICAgakxlbiA9IGltYWdlRGF0YS53aWR0aCxcbiAgICAgICAgICBpbmRleCwgaSwgaiwgciwgZywgYiwgYSxcbiAgICAgICAgICBfaSwgX2osIF9pTGVuLCBfakxlbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGlMZW47IGkgKz0gdGhpcy5ibG9ja3NpemUpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gdGhpcy5ibG9ja3NpemUpIHtcblxuICAgICAgICAgIGluZGV4ID0gKGkgKiA0KSAqIGpMZW4gKyAoaiAqIDQpO1xuXG4gICAgICAgICAgciA9IGRhdGFbaW5kZXhdO1xuICAgICAgICAgIGcgPSBkYXRhW2luZGV4ICsgMV07XG4gICAgICAgICAgYiA9IGRhdGFbaW5kZXggKyAyXTtcbiAgICAgICAgICBhID0gZGF0YVtpbmRleCArIDNdO1xuXG4gICAgICAgICAgX2lMZW4gPSBNYXRoLm1pbihpICsgdGhpcy5ibG9ja3NpemUsIGlMZW4pO1xuICAgICAgICAgIF9qTGVuID0gTWF0aC5taW4oaiArIHRoaXMuYmxvY2tzaXplLCBqTGVuKTtcbiAgICAgICAgICBmb3IgKF9pID0gaTsgX2kgPCBfaUxlbjsgX2krKykge1xuICAgICAgICAgICAgZm9yIChfaiA9IGo7IF9qIDwgX2pMZW47IF9qKyspIHtcbiAgICAgICAgICAgICAgaW5kZXggPSAoX2kgKiA0KSAqIGpMZW4gKyAoX2ogKiA0KTtcbiAgICAgICAgICAgICAgZGF0YVtpbmRleF0gPSByO1xuICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMV0gPSBnO1xuICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMl0gPSBiO1xuICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgM10gPSBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZSB3aGVuIHRoZSBmaWx0ZXIgaXMgbm90IGdvbm5hIGFwcGx5IGNoYW5nZXMgdG8gdGhlIGltYWdlXG4gICAgICoqL1xuICAgIGlzTmV1dHJhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLmJsb2Nrc2l6ZSA9PT0gMTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVCbG9ja3NpemU6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUJsb2Nrc2l6ZScpLFxuICAgICAgICB1U3RlcFc6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVN0ZXBXJyksXG4gICAgICAgIHVTdGVwSDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1U3RlcEgnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0xZih1bmlmb3JtTG9jYXRpb25zLnVCbG9ja3NpemUsIHRoaXMuYmxvY2tzaXplKTtcbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLlBpeGVsYXRlfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5QaXhlbGF0ZVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuUGl4ZWxhdGUuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGV4dGVuZCA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQsXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgd2hpdGUgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZW1vdmVDb2xvclxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZW1vdmVDb2xvciNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlQ29sb3Ioe1xuICAgKiAgIHRocmVzaG9sZDogMC4yLFxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqIGNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICovXG4gIGZpbHRlcnMuUmVtb3ZlQ29sb3IgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlQ29sb3IucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdSZW1vdmVDb2xvcicsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciB0byByZW1vdmUsIGluIGFueSBmb3JtYXQgdW5kZXJzdG9vZCBieSBmYWJyaWMuQ29sb3IuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNvbG9yOiAnI0ZGRkZGRicsXG5cbiAgICAvKipcbiAgICAgKiBGcmFnbWVudCBzb3VyY2UgZm9yIHRoZSBicmlnaHRuZXNzIHByb2dyYW1cbiAgICAgKi9cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIHZlYzQgdUxvdztcXG4nICtcbiAgICAgICd1bmlmb3JtIHZlYzQgdUhpZ2g7XFxuJyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG4nICtcbiAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICdpZihhbGwoZ3JlYXRlclRoYW4oZ2xfRnJhZ0NvbG9yLnJnYix1TG93LnJnYikpICYmIGFsbChncmVhdGVyVGhhbih1SGlnaC5yZ2IsZ2xfRnJhZ0NvbG9yLnJnYikpKSB7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5hID0gMC4wO1xcbicgK1xuICAgICAgICAnfVxcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogZGlzdGFuY2UgdG8gYWN0dWFsIGNvbG9yLCBhcyB2YWx1ZSB1cCBvciBkb3duIGZyb20gZWFjaCByLGcsYlxuICAgICAqIGJldHdlZW4gMCBhbmQgMVxuICAgICAqKi9cbiAgICBkaXN0YW5jZTogMC4wMixcblxuICAgIC8qKlxuICAgICAqIEZvciBjb2xvciB0byByZW1vdmUgaW5zaWRlIGRpc3RhbmNlLCB1c2UgYWxwaGEgY2hhbm5lbCBmb3IgYSBzbW9vdGhlciBkZWxldGlvblxuICAgICAqIE5PVCBJTVBMRU1FTlRFRCBZRVRcbiAgICAgKiovXG4gICAgdXNlQWxwaGE6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlV2hpdGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb2xvcj0jUlJHR0JCXSBUaHJlc2hvbGQgdmFsdWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZGlzdGFuY2U9MTBdIERpc3RhbmNlIHZhbHVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGZpbHRlciB0byBjYW52YXMgZWxlbWVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjYW52YXNFbCBDYW52YXMgZWxlbWVudCB0byBhcHBseSBmaWx0ZXIgdG9cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBkYXRhID0gaW1hZ2VEYXRhLmRhdGEsIGksXG4gICAgICAgICAgZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlICogMjU1LFxuICAgICAgICAgIHIsIGcsIGIsXG4gICAgICAgICAgc291cmNlID0gbmV3IGZhYnJpYy5Db2xvcih0aGlzLmNvbG9yKS5nZXRTb3VyY2UoKSxcbiAgICAgICAgICBsb3dDID0gW1xuICAgICAgICAgICAgc291cmNlWzBdIC0gZGlzdGFuY2UsXG4gICAgICAgICAgICBzb3VyY2VbMV0gLSBkaXN0YW5jZSxcbiAgICAgICAgICAgIHNvdXJjZVsyXSAtIGRpc3RhbmNlLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgaGlnaEMgPSBbXG4gICAgICAgICAgICBzb3VyY2VbMF0gKyBkaXN0YW5jZSxcbiAgICAgICAgICAgIHNvdXJjZVsxXSArIGRpc3RhbmNlLFxuICAgICAgICAgICAgc291cmNlWzJdICsgZGlzdGFuY2UsXG4gICAgICAgICAgXTtcblxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICByID0gZGF0YVtpXTtcbiAgICAgICAgZyA9IGRhdGFbaSArIDFdO1xuICAgICAgICBiID0gZGF0YVtpICsgMl07XG5cbiAgICAgICAgaWYgKHIgPiBsb3dDWzBdICYmXG4gICAgICAgICAgICBnID4gbG93Q1sxXSAmJlxuICAgICAgICAgICAgYiA+IGxvd0NbMl0gJiZcbiAgICAgICAgICAgIHIgPCBoaWdoQ1swXSAmJlxuICAgICAgICAgICAgZyA8IGhpZ2hDWzFdICYmXG4gICAgICAgICAgICBiIDwgaGlnaENbMl0pIHtcbiAgICAgICAgICBkYXRhW2kgKyAzXSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVMb3c6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUxvdycpLFxuICAgICAgICB1SGlnaDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1SGlnaCcpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgdmFyIHNvdXJjZSA9IG5ldyBmYWJyaWMuQ29sb3IodGhpcy5jb2xvcikuZ2V0U291cmNlKCksXG4gICAgICAgICAgZGlzdGFuY2UgPSBwYXJzZUZsb2F0KHRoaXMuZGlzdGFuY2UpLFxuICAgICAgICAgIGxvd0MgPSBbXG4gICAgICAgICAgICAwICsgc291cmNlWzBdIC8gMjU1IC0gZGlzdGFuY2UsXG4gICAgICAgICAgICAwICsgc291cmNlWzFdIC8gMjU1IC0gZGlzdGFuY2UsXG4gICAgICAgICAgICAwICsgc291cmNlWzJdIC8gMjU1IC0gZGlzdGFuY2UsXG4gICAgICAgICAgICAxXG4gICAgICAgICAgXSxcbiAgICAgICAgICBoaWdoQyA9IFtcbiAgICAgICAgICAgIHNvdXJjZVswXSAvIDI1NSArIGRpc3RhbmNlLFxuICAgICAgICAgICAgc291cmNlWzFdIC8gMjU1ICsgZGlzdGFuY2UsXG4gICAgICAgICAgICBzb3VyY2VbMl0gLyAyNTUgKyBkaXN0YW5jZSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICBdO1xuICAgICAgZ2wudW5pZm9ybTRmdih1bmlmb3JtTG9jYXRpb25zLnVMb3csIGxvd0MpO1xuICAgICAgZ2wudW5pZm9ybTRmdih1bmlmb3JtTG9jYXRpb25zLnVIaWdoLCBoaWdoQyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kKHRoaXMuY2FsbFN1cGVyKCd0b09iamVjdCcpLCB7XG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICBkaXN0YW5jZTogdGhpcy5kaXN0YW5jZVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlbW92ZUNvbG9yfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZW1vdmVXaGl0ZVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuUmVtb3ZlQ29sb3IuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgdmFyIG1hdHJpY2VzID0ge1xuICAgIEJyb3duaWU6IFtcbiAgICAgIDAuNTk5NzAsMC4zNDU1MywtMC4yNzA4MiwwLDAuMTg2LFxuICAgICAgLTAuMDM3NzAsMC44NjA5NSwwLjE1MDU5LDAsLTAuMTQ0OSxcbiAgICAgIDAuMjQxMTMsLTAuMDc0NDEsMC40NDk3MiwwLC0wLjAyOTY1LFxuICAgICAgMCwwLDAsMSwwXG4gICAgXSxcbiAgICBWaW50YWdlOiBbXG4gICAgICAwLjYyNzkzLDAuMzIwMjEsLTAuMDM5NjUsMCwwLjAzNzg0LFxuICAgICAgMC4wMjU3OCwwLjY0NDExLDAuMDMyNTksMCwwLjAyOTI2LFxuICAgICAgMC4wNDY2MCwtMC4wODUxMiwwLjUyNDE2LDAsMC4wMjAyMyxcbiAgICAgIDAsMCwwLDEsMFxuICAgIF0sXG4gICAgS29kYWNocm9tZTogW1xuICAgICAgMS4xMjg1NSwtMC4zOTY3MywtMC4wMzk5MiwwLDAuMjQ5OTEsXG4gICAgICAtMC4xNjQwNCwxLjA4MzUyLC0wLjA1NDk4LDAsMC4wOTY5OCxcbiAgICAgIC0wLjE2Nzg2LC0wLjU2MDM0LDEuNjAxNDgsMCwwLjEzOTcyLFxuICAgICAgMCwwLDAsMSwwXG4gICAgXSxcbiAgICBUZWNobmljb2xvcjogW1xuICAgICAgMS45MTI1MiwtMC44NTQ1MywtMC4wOTE1NSwwLDAuMDQ2MjQsXG4gICAgICAtMC4zMDg3OCwxLjc2NTg5LC0wLjEwNjAxLDAsLTAuMjc1ODksXG4gICAgICAtMC4yMzExMCwtMC43NTAxOCwxLjg0NzU5LDAsMC4xMjEzNyxcbiAgICAgIDAsMCwwLDEsMFxuICAgIF0sXG4gICAgUG9sYXJvaWQ6IFtcbiAgICAgIDEuNDM4LC0wLjA2MiwtMC4wNjIsMCwwLFxuICAgICAgLTAuMTIyLDEuMzc4LC0wLjEyMiwwLDAsXG4gICAgICAtMC4wMTYsLTAuMDE2LDEuNDgzLDAsMCxcbiAgICAgIDAsMCwwLDEsMFxuICAgIF0sXG4gICAgU2VwaWE6IFtcbiAgICAgIDAuMzkzLCAwLjc2OSwgMC4xODksIDAsIDAsXG4gICAgICAwLjM0OSwgMC42ODYsIDAuMTY4LCAwLCAwLFxuICAgICAgMC4yNzIsIDAuNTM0LCAwLjEzMSwgMCwgMCxcbiAgICAgIDAsIDAsIDAsIDEsIDBcbiAgICBdLFxuICAgIEJsYWNrV2hpdGU6IFtcbiAgICAgIDEuNSwgMS41LCAxLjUsIDAsIC0xLFxuICAgICAgMS41LCAxLjUsIDEuNSwgMCwgLTEsXG4gICAgICAxLjUsIDEuNSwgMS41LCAwLCAtMSxcbiAgICAgIDAsIDAsIDAsIDEsIDAsXG4gICAgXVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBtYXRyaWNlcykge1xuICAgIGZpbHRlcnNba2V5XSA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQ29sb3JNYXRyaXgsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuU2VwaWEucHJvdG90eXBlICovIHtcblxuICAgICAgLyoqXG4gICAgICAgKiBGaWx0ZXIgdHlwZVxuICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgICAqIEBkZWZhdWx0XG4gICAgICAgKi9cbiAgICAgIHR5cGU6IGtleSxcblxuICAgICAgLyoqXG4gICAgICAgKiBDb2xvcm1hdHJpeCBmb3IgdGhlIGVmZmVjdFxuICAgICAgICogYXJyYXkgb2YgMjAgZmxvYXRzLiBOdW1iZXJzIGluIHBvc2l0aW9ucyA0LCA5LCAxNCwgMTkgbG9vc2UgbWVhbmluZ1xuICAgICAgICogb3V0c2lkZSB0aGUgLTEsIDEgcmFuZ2UuXG4gICAgICAgKiBAcGFyYW0ge0FycmF5fSBtYXRyaXggYXJyYXkgb2YgMjAgbnVtYmVycy5cbiAgICAgICAqIEBkZWZhdWx0XG4gICAgICAgKi9cbiAgICAgIG1hdHJpeDogbWF0cmljZXNba2V5XSxcblxuICAgICAgLyoqXG4gICAgICAgKiBMb2NrIHRoZSBtYXRyaXggZXhwb3J0IGZvciB0aGlzIGtpbmQgb2Ygc3RhdGljLCBwYXJhbWV0ZXIgbGVzcyBmaWx0ZXJzLlxuICAgICAgICovXG4gICAgICBtYWluUGFyYW1ldGVyOiBmYWxzZSxcbiAgICAgIC8qKlxuICAgICAgICogTG9jayB0aGUgY29sb3JtYXRyaXggb24gdGhlIGNvbG9yIHBhcnQsIHNraXBwaW5nIGFscGhhXG4gICAgICAgKi9cbiAgICAgIGNvbG9yc09ubHk6IHRydWUsXG5cbiAgICB9KTtcbiAgICBmYWJyaWMuSW1hZ2UuZmlsdGVyc1trZXldLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG4gIH1cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIENvbG9yIEJsZW5kIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlci5CbGVuZENvbG9yXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQmxlbmRDb2xvcih7XG4gICAqICBjb2xvcjogJyMwMDAnLFxuICAgKiAgbW9kZTogJ211bHRpcGx5J1xuICAgKiB9KTtcbiAgICpcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbGVuZEltYWdlKHtcbiAgICogIGltYWdlOiBmYWJyaWNJbWFnZU9iamVjdCxcbiAgICogIG1vZGU6ICdtdWx0aXBseScsXG4gICAqICBhbHBoYTogMC41XG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICogY2FudmFzLnJlbmRlckFsbCgpO1xuICAgKi9cblxuICBmaWx0ZXJzLkJsZW5kQ29sb3IgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmxlbmQucHJvdG90eXBlICovIHtcbiAgICB0eXBlOiAnQmxlbmRDb2xvcicsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciB0byBtYWtlIHRoZSBibGVuZCBvcGVyYXRpb24gd2l0aC4gZGVmYXVsdCB0byBhIHJlZGRpc2ggY29sb3Igc2luY2UgYmxhY2sgb3Igd2hpdGVcbiAgICAgKiBnaXZlcyBhbHdheXMgc3Ryb25nIHJlc3VsdC5cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqKi9cbiAgICBjb2xvcjogJyNGOTVDNjMnLFxuXG4gICAgLyoqXG4gICAgICogQmxlbmQgbW9kZSBmb3IgdGhlIGZpbHRlcjogb25lIG9mIG11bHRpcGx5LCBhZGQsIGRpZmYsIHNjcmVlbiwgc3VidHJhY3QsXG4gICAgICogZGFya2VuLCBsaWdodGVuLCBvdmVybGF5LCBleGNsdXNpb24sIHRpbnQuXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiovXG4gICAgbW9kZTogJ211bHRpcGx5JyxcblxuICAgIC8qKlxuICAgICAqIGFscGhhIHZhbHVlLiByZXByZXNlbnQgdGhlIHN0cmVuZ3RoIG9mIHRoZSBibGVuZCBjb2xvciBvcGVyYXRpb24uXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiovXG4gICAgYWxwaGE6IDEsXG5cbiAgICAvKipcbiAgICAgKiBGcmFnbWVudCBzb3VyY2UgZm9yIHRoZSBNdWx0aXBseSBwcm9ncmFtXG4gICAgICovXG4gICAgZnJhZ21lbnRTb3VyY2U6IHtcbiAgICAgIG11bHRpcGx5OiAnZ2xfRnJhZ0NvbG9yLnJnYiAqPSB1Q29sb3IucmdiO1xcbicsXG4gICAgICBzY3JlZW46ICdnbF9GcmFnQ29sb3IucmdiID0gMS4wIC0gKDEuMCAtIGdsX0ZyYWdDb2xvci5yZ2IpICogKDEuMCAtIHVDb2xvci5yZ2IpO1xcbicsXG4gICAgICBhZGQ6ICdnbF9GcmFnQ29sb3IucmdiICs9IHVDb2xvci5yZ2I7XFxuJyxcbiAgICAgIGRpZmY6ICdnbF9GcmFnQ29sb3IucmdiID0gYWJzKGdsX0ZyYWdDb2xvci5yZ2IgLSB1Q29sb3IucmdiKTtcXG4nLFxuICAgICAgc3VidHJhY3Q6ICdnbF9GcmFnQ29sb3IucmdiIC09IHVDb2xvci5yZ2I7XFxuJyxcbiAgICAgIGxpZ2h0ZW46ICdnbF9GcmFnQ29sb3IucmdiID0gbWF4KGdsX0ZyYWdDb2xvci5yZ2IsIHVDb2xvci5yZ2IpO1xcbicsXG4gICAgICBkYXJrZW46ICdnbF9GcmFnQ29sb3IucmdiID0gbWluKGdsX0ZyYWdDb2xvci5yZ2IsIHVDb2xvci5yZ2IpO1xcbicsXG4gICAgICBleGNsdXNpb246ICdnbF9GcmFnQ29sb3IucmdiICs9IHVDb2xvci5yZ2IgLSAyLjAgKiAodUNvbG9yLnJnYiAqIGdsX0ZyYWdDb2xvci5yZ2IpO1xcbicsXG4gICAgICBvdmVybGF5OiAnaWYgKHVDb2xvci5yIDwgMC41KSB7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5yICo9IDIuMCAqIHVDb2xvci5yO1xcbicgK1xuICAgICAgICAnfSBlbHNlIHtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLnIgPSAxLjAgLSAyLjAgKiAoMS4wIC0gZ2xfRnJhZ0NvbG9yLnIpICogKDEuMCAtIHVDb2xvci5yKTtcXG4nICtcbiAgICAgICAgJ31cXG4nICtcbiAgICAgICAgJ2lmICh1Q29sb3IuZyA8IDAuNSkge1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IuZyAqPSAyLjAgKiB1Q29sb3IuZztcXG4nICtcbiAgICAgICAgJ30gZWxzZSB7XFxuJyArXG4gICAgICAgICAgJ2dsX0ZyYWdDb2xvci5nID0gMS4wIC0gMi4wICogKDEuMCAtIGdsX0ZyYWdDb2xvci5nKSAqICgxLjAgLSB1Q29sb3IuZyk7XFxuJyArXG4gICAgICAgICd9XFxuJyArXG4gICAgICAgICdpZiAodUNvbG9yLmIgPCAwLjUpIHtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yLmIgKj0gMi4wICogdUNvbG9yLmI7XFxuJyArXG4gICAgICAgICd9IGVsc2Uge1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IuYiA9IDEuMCAtIDIuMCAqICgxLjAgLSBnbF9GcmFnQ29sb3IuYikgKiAoMS4wIC0gdUNvbG9yLmIpO1xcbicgK1xuICAgICAgICAnfVxcbicsXG4gICAgICB0aW50OiAnZ2xfRnJhZ0NvbG9yLnJnYiAqPSAoMS4wIC0gdUNvbG9yLmEpO1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yLnJnYiArPSB1Q29sb3IucmdiO1xcbicsXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGJ1aWxkIHRoZSBmcmFnbWVudCBzb3VyY2UgZm9yIHRoZSBmaWx0ZXJzLCBqb2luaW5nIHRoZSBjb21tb24gcGFydCB3aXRoXG4gICAgICogdGhlIHNwZWNpZmljIG9uZS5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbW9kZSB0aGUgbW9kZSBvZiB0aGUgZmlsdGVyLCBhIGtleSBvZiB0aGlzLmZyYWdtZW50U291cmNlXG4gICAgICogQHJldHVybiB7U3RyaW5nfSB0aGUgc291cmNlIHRvIGJlIGNvbXBpbGVkXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBidWlsZFNvdXJjZTogZnVuY3Rpb24obW9kZSkge1xuICAgICAgcmV0dXJuICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gdmVjNCB1Q29sb3I7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAgICd2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQpO1xcbicgK1xuICAgICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICAgICAnaWYgKGNvbG9yLmEgPiAwLjApIHtcXG4nICtcbiAgICAgICAgICAgIHRoaXMuZnJhZ21lbnRTb3VyY2VbbW9kZV0gK1xuICAgICAgICAgICd9XFxuJyArXG4gICAgICAgICd9JztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBjYWNoZWQgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IG9wdGlvbnMuY29udGV4dCBUaGUgR0wgY29udGV4dCB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMucHJvZ3JhbUNhY2hlIEEgbWFwIG9mIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtcywga2V5ZWQgYnkgZmlsdGVyIHR5cGUuXG4gICAgICovXG4gICAgcmV0cmlldmVTaGFkZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBjYWNoZUtleSA9IHRoaXMudHlwZSArICdfJyArIHRoaXMubW9kZSwgc2hhZGVyU291cmNlO1xuICAgICAgaWYgKCFvcHRpb25zLnByb2dyYW1DYWNoZS5oYXNPd25Qcm9wZXJ0eShjYWNoZUtleSkpIHtcbiAgICAgICAgc2hhZGVyU291cmNlID0gdGhpcy5idWlsZFNvdXJjZSh0aGlzLm1vZGUpO1xuICAgICAgICBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV0gPSB0aGlzLmNyZWF0ZVByb2dyYW0ob3B0aW9ucy5jb250ZXh0LCBzaGFkZXJTb3VyY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnMucHJvZ3JhbUNhY2hlW2NhY2hlS2V5XTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIEJsZW5kIG9wZXJhdGlvbiB0byBhIFVpbnQ4Q2xhbXBlZEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSwgaUxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHRyLCB0ZywgdGIsXG4gICAgICAgICAgciwgZywgYixcbiAgICAgICAgICBzb3VyY2UsIGFscGhhMSA9IDEgLSB0aGlzLmFscGhhO1xuXG4gICAgICBzb3VyY2UgPSBuZXcgZmFicmljLkNvbG9yKHRoaXMuY29sb3IpLmdldFNvdXJjZSgpO1xuICAgICAgdHIgPSBzb3VyY2VbMF0gKiB0aGlzLmFscGhhO1xuICAgICAgdGcgPSBzb3VyY2VbMV0gKiB0aGlzLmFscGhhO1xuICAgICAgdGIgPSBzb3VyY2VbMl0gKiB0aGlzLmFscGhhO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlMZW47IGkgKz0gNCkge1xuXG4gICAgICAgIHIgPSBkYXRhW2ldO1xuICAgICAgICBnID0gZGF0YVtpICsgMV07XG4gICAgICAgIGIgPSBkYXRhW2kgKyAyXTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgICAgIGNhc2UgJ211bHRpcGx5JzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSByICogdHIgLyAyNTU7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IGcgKiB0ZyAvIDI1NTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gYiAqIHRiIC8gMjU1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc2NyZWVuJzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSAyNTUgLSAoMjU1IC0gcikgKiAoMjU1IC0gdHIpIC8gMjU1O1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSAyNTUgLSAoMjU1IC0gZykgKiAoMjU1IC0gdGcpIC8gMjU1O1xuICAgICAgICAgICAgZGF0YVtpICsgMl0gPSAyNTUgLSAoMjU1IC0gYikgKiAoMjU1IC0gdGIpIC8gMjU1O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSByICsgdHI7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IGcgKyB0ZztcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gYiArIHRiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZGlmZic6XG4gICAgICAgICAgY2FzZSAnZGlmZmVyZW5jZSc6XG4gICAgICAgICAgICBkYXRhW2ldID0gTWF0aC5hYnMociAtIHRyKTtcbiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gTWF0aC5hYnMoZyAtIHRnKTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gTWF0aC5hYnMoYiAtIHRiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3N1YnRyYWN0JzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSByIC0gdHI7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IGcgLSB0ZztcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gYiAtIHRiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZGFya2VuJzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSBNYXRoLm1pbihyLCB0cik7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IE1hdGgubWluKGcsIHRnKTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gTWF0aC5taW4oYiwgdGIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGlnaHRlbic6XG4gICAgICAgICAgICBkYXRhW2ldID0gTWF0aC5tYXgociwgdHIpO1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSBNYXRoLm1heChnLCB0Zyk7XG4gICAgICAgICAgICBkYXRhW2kgKyAyXSA9IE1hdGgubWF4KGIsIHRiKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ292ZXJsYXknOlxuICAgICAgICAgICAgZGF0YVtpXSA9IHRyIDwgMTI4ID8gKDIgKiByICogdHIgLyAyNTUpIDogKDI1NSAtIDIgKiAoMjU1IC0gcikgKiAoMjU1IC0gdHIpIC8gMjU1KTtcbiAgICAgICAgICAgIGRhdGFbaSArIDFdID0gdGcgPCAxMjggPyAoMiAqIGcgKiB0ZyAvIDI1NSkgOiAoMjU1IC0gMiAqICgyNTUgLSBnKSAqICgyNTUgLSB0ZykgLyAyNTUpO1xuICAgICAgICAgICAgZGF0YVtpICsgMl0gPSB0YiA8IDEyOCA/ICgyICogYiAqIHRiIC8gMjU1KSA6ICgyNTUgLSAyICogKDI1NSAtIGIpICogKDI1NSAtIHRiKSAvIDI1NSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdleGNsdXNpb24nOlxuICAgICAgICAgICAgZGF0YVtpXSA9IHRyICsgciAtICgoMiAqIHRyICogcikgLyAyNTUpO1xuICAgICAgICAgICAgZGF0YVtpICsgMV0gPSB0ZyArIGcgLSAoKDIgKiB0ZyAqIGcpIC8gMjU1KTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gdGIgKyBiIC0gKCgyICogdGIgKiBiKSAvIDI1NSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd0aW50JzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSB0ciArIHIgKiBhbHBoYTE7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IHRnICsgZyAqIGFscGhhMTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gdGIgKyBiICogYWxwaGExO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1Q29sb3I6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUNvbG9yJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICB2YXIgc291cmNlID0gbmV3IGZhYnJpYy5Db2xvcih0aGlzLmNvbG9yKS5nZXRTb3VyY2UoKTtcbiAgICAgIHNvdXJjZVswXSA9IHRoaXMuYWxwaGEgKiBzb3VyY2VbMF0gLyAyNTU7XG4gICAgICBzb3VyY2VbMV0gPSB0aGlzLmFscGhhICogc291cmNlWzFdIC8gMjU1O1xuICAgICAgc291cmNlWzJdID0gdGhpcy5hbHBoYSAqIHNvdXJjZVsyXSAvIDI1NTtcbiAgICAgIHNvdXJjZVszXSA9IHRoaXMuYWxwaGE7XG4gICAgICBnbC51bmlmb3JtNGZ2KHVuaWZvcm1Mb2NhdGlvbnMudUNvbG9yLCBzb3VyY2UpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICovXG4gICAgdG9PYmplY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICBjb2xvcjogdGhpcy5jb2xvcixcbiAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICBhbHBoYTogdGhpcy5hbHBoYVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gdG8gYmUgaW52b2tlZCBhZnRlciBmaWx0ZXIgY3JlYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlLmZpbHRlcnMuQmxlbmRDb2xvcn0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuQmxlbmRDb2xvclxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuQmxlbmRDb2xvci5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMsXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBJbWFnZSBCbGVuZCBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXIuQmxlbmRJbWFnZVxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kQ29sb3Ioe1xuICAgKiAgY29sb3I6ICcjMDAwJyxcbiAgICogIG1vZGU6ICdtdWx0aXBseSdcbiAgICogfSk7XG4gICAqXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuQmxlbmRJbWFnZSh7XG4gICAqICBpbWFnZTogZmFicmljSW1hZ2VPYmplY3QsXG4gICAqICBtb2RlOiAnbXVsdGlwbHknLFxuICAgKiAgYWxwaGE6IDAuNVxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqIGNhbnZhcy5yZW5kZXJBbGwoKTtcbiAgICovXG5cbiAgZmlsdGVycy5CbGVuZEltYWdlID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kSW1hZ2UucHJvdG90eXBlICovIHtcbiAgICB0eXBlOiAnQmxlbmRJbWFnZScsXG5cbiAgICAvKipcbiAgICAgKiBDb2xvciB0byBtYWtlIHRoZSBibGVuZCBvcGVyYXRpb24gd2l0aC4gZGVmYXVsdCB0byBhIHJlZGRpc2ggY29sb3Igc2luY2UgYmxhY2sgb3Igd2hpdGVcbiAgICAgKiBnaXZlcyBhbHdheXMgc3Ryb25nIHJlc3VsdC5cbiAgICAgKiovXG4gICAgaW1hZ2U6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBCbGVuZCBtb2RlIGZvciB0aGUgZmlsdGVyIChvbmUgb2YgXCJtdWx0aXBseVwiLCBcIm1hc2tcIilcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqKi9cbiAgICBtb2RlOiAnbXVsdGlwbHknLFxuXG4gICAgLyoqXG4gICAgICogYWxwaGEgdmFsdWUuIHJlcHJlc2VudCB0aGUgc3RyZW5ndGggb2YgdGhlIGJsZW5kIGltYWdlIG9wZXJhdGlvbi5cbiAgICAgKiBub3QgaW1wbGVtZW50ZWQuXG4gICAgICoqL1xuICAgIGFscGhhOiAxLFxuXG4gICAgdmVydGV4U291cmNlOiAnYXR0cmlidXRlIHZlYzIgYVBvc2l0aW9uO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDI7XFxuJyArXG4gICAgICAndW5pZm9ybSBtYXQzIHVUcmFuc2Zvcm1NYXRyaXg7XFxuJyArXG4gICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAndlRleENvb3JkID0gYVBvc2l0aW9uO1xcbicgK1xuICAgICAgICAndlRleENvb3JkMiA9ICh1VHJhbnNmb3JtTWF0cml4ICogdmVjMyhhUG9zaXRpb24sIDEuMCkpLnh5O1xcbicgK1xuICAgICAgICAnZ2xfUG9zaXRpb24gPSB2ZWM0KGFQb3NpdGlvbiAqIDIuMCAtIDEuMCwgMC4wLCAxLjApO1xcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogRnJhZ21lbnQgc291cmNlIGZvciB0aGUgTXVsdGlwbHkgcHJvZ3JhbVxuICAgICAqL1xuICAgIGZyYWdtZW50U291cmNlOiB7XG4gICAgICBtdWx0aXBseTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdUltYWdlO1xcbicgK1xuICAgICAgICAndW5pZm9ybSB2ZWM0IHVDb2xvcjtcXG4nICtcbiAgICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkMjtcXG4nICtcbiAgICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgICAndmVjNCBjb2xvcjIgPSB0ZXh0dXJlMkQodUltYWdlLCB2VGV4Q29vcmQyKTtcXG4nICtcbiAgICAgICAgICAnY29sb3IucmdiYSAqPSBjb2xvcjIucmdiYTtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICAgIG1hc2s6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVJbWFnZTtcXG4nICtcbiAgICAgICAgJ3VuaWZvcm0gdmVjNCB1Q29sb3I7XFxuJyArXG4gICAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgICAndmFyeWluZyB2ZWMyIHZUZXhDb29yZDI7XFxuJyArXG4gICAgICAgICd2b2lkIG1haW4oKSB7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICAgJ3ZlYzQgY29sb3IyID0gdGV4dHVyZTJEKHVJbWFnZSwgdlRleENvb3JkMik7XFxuJyArXG4gICAgICAgICAgJ2NvbG9yLmEgPSBjb2xvcjIuYTtcXG4nICtcbiAgICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICd9JyxcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBjYWNoZWQgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IG9wdGlvbnMuY29udGV4dCBUaGUgR0wgY29udGV4dCB1c2VkIGZvciByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMucHJvZ3JhbUNhY2hlIEEgbWFwIG9mIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtcywga2V5ZWQgYnkgZmlsdGVyIHR5cGUuXG4gICAgICovXG4gICAgcmV0cmlldmVTaGFkZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBjYWNoZUtleSA9IHRoaXMudHlwZSArICdfJyArIHRoaXMubW9kZTtcbiAgICAgIHZhciBzaGFkZXJTb3VyY2UgPSB0aGlzLmZyYWdtZW50U291cmNlW3RoaXMubW9kZV07XG4gICAgICBpZiAoIW9wdGlvbnMucHJvZ3JhbUNhY2hlLmhhc093blByb3BlcnR5KGNhY2hlS2V5KSkge1xuICAgICAgICBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV0gPSB0aGlzLmNyZWF0ZVByb2dyYW0ob3B0aW9ucy5jb250ZXh0LCBzaGFkZXJTb3VyY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9wdGlvbnMucHJvZ3JhbUNhY2hlW2NhY2hlS2V5XTtcbiAgICB9LFxuXG4gICAgYXBwbHlUb1dlYkdMOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAvLyBsb2FkIHRleHR1cmUgdG8gYmxlbmQuXG4gICAgICB2YXIgZ2wgPSBvcHRpb25zLmNvbnRleHQsXG4gICAgICAgICAgdGV4dHVyZSA9IHRoaXMuY3JlYXRlVGV4dHVyZShvcHRpb25zLmZpbHRlckJhY2tlbmQsIHRoaXMuaW1hZ2UpO1xuICAgICAgdGhpcy5iaW5kQWRkaXRpb25hbFRleHR1cmUoZ2wsIHRleHR1cmUsIGdsLlRFWFRVUkUxKTtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdhcHBseVRvV2ViR0wnLCBvcHRpb25zKTtcbiAgICAgIHRoaXMudW5iaW5kQWRkaXRpb25hbFRleHR1cmUoZ2wsIGdsLlRFWFRVUkUxKTtcbiAgICB9LFxuXG4gICAgY3JlYXRlVGV4dHVyZTogZnVuY3Rpb24oYmFja2VuZCwgaW1hZ2UpIHtcbiAgICAgIHJldHVybiBiYWNrZW5kLmdldENhY2hlZFRleHR1cmUoaW1hZ2UuY2FjaGVLZXksIGltYWdlLl9lbGVtZW50KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIGEgdHJhbnNmb3JtTWF0cml4IHRvIGFkYXB0IHRoZSBpbWFnZSB0byBibGVuZCBvdmVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gb3B0aW9ucy5jb250ZXh0IFRoZSBHTCBjb250ZXh0IHVzZWQgZm9yIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wcm9ncmFtQ2FjaGUgQSBtYXAgb2YgY29tcGlsZWQgc2hhZGVyIHByb2dyYW1zLCBrZXllZCBieSBmaWx0ZXIgdHlwZS5cbiAgICAgKi9cbiAgICBjYWxjdWxhdGVNYXRyaXg6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGltYWdlID0gdGhpcy5pbWFnZSxcbiAgICAgICAgICB3aWR0aCA9IGltYWdlLl9lbGVtZW50LndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IGltYWdlLl9lbGVtZW50LmhlaWdodDtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIDEgLyBpbWFnZS5zY2FsZVgsIDAsIDAsXG4gICAgICAgIDAsIDEgLyBpbWFnZS5zY2FsZVksIDAsXG4gICAgICAgIC1pbWFnZS5sZWZ0IC8gd2lkdGgsIC1pbWFnZS50b3AgLyBoZWlnaHQsIDFcbiAgICAgIF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBCbGVuZCBvcGVyYXRpb24gdG8gYSBVaW50OENsYW1wZWRBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OENsYW1wZWRBcnJheSB0byBiZSBmaWx0ZXJlZC5cbiAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICByZXNvdXJjZXMgPSBvcHRpb25zLmZpbHRlckJhY2tlbmQucmVzb3VyY2VzLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSwgaUxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHdpZHRoID0gaW1hZ2VEYXRhLndpZHRoLFxuICAgICAgICAgIGhlaWdodCA9IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgICAgdHIsIHRnLCB0YiwgdGEsXG4gICAgICAgICAgciwgZywgYiwgYSxcbiAgICAgICAgICBjYW52YXMxLCBjb250ZXh0LCBpbWFnZSA9IHRoaXMuaW1hZ2UsIGJsZW5kRGF0YTtcblxuICAgICAgaWYgKCFyZXNvdXJjZXMuYmxlbmRJbWFnZSkge1xuICAgICAgICByZXNvdXJjZXMuYmxlbmRJbWFnZSA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgIH1cbiAgICAgIGNhbnZhczEgPSByZXNvdXJjZXMuYmxlbmRJbWFnZTtcbiAgICAgIGNvbnRleHQgPSBjYW52YXMxLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBpZiAoY2FudmFzMS53aWR0aCAhPT0gd2lkdGggfHwgY2FudmFzMS5oZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICBjYW52YXMxLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGNhbnZhczEuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgfVxuICAgICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oaW1hZ2Uuc2NhbGVYLCAwLCAwLCBpbWFnZS5zY2FsZVksIGltYWdlLmxlZnQsIGltYWdlLnRvcCk7XG4gICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZS5fZWxlbWVudCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBibGVuZERhdGEgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpTGVuOyBpICs9IDQpIHtcblxuICAgICAgICByID0gZGF0YVtpXTtcbiAgICAgICAgZyA9IGRhdGFbaSArIDFdO1xuICAgICAgICBiID0gZGF0YVtpICsgMl07XG4gICAgICAgIGEgPSBkYXRhW2kgKyAzXTtcblxuICAgICAgICB0ciA9IGJsZW5kRGF0YVtpXTtcbiAgICAgICAgdGcgPSBibGVuZERhdGFbaSArIDFdO1xuICAgICAgICB0YiA9IGJsZW5kRGF0YVtpICsgMl07XG4gICAgICAgIHRhID0gYmxlbmREYXRhW2kgKyAzXTtcblxuICAgICAgICBzd2l0Y2ggKHRoaXMubW9kZSkge1xuICAgICAgICAgIGNhc2UgJ211bHRpcGx5JzpcbiAgICAgICAgICAgIGRhdGFbaV0gPSByICogdHIgLyAyNTU7XG4gICAgICAgICAgICBkYXRhW2kgKyAxXSA9IGcgKiB0ZyAvIDI1NTtcbiAgICAgICAgICAgIGRhdGFbaSArIDJdID0gYiAqIHRiIC8gMjU1O1xuICAgICAgICAgICAgZGF0YVtpICsgM10gPSBhICogdGEgLyAyNTU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdtYXNrJzpcbiAgICAgICAgICAgIGRhdGFbaSArIDNdID0gdGE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdVRyYW5zZm9ybU1hdHJpeDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1VHJhbnNmb3JtTWF0cml4JyksXG4gICAgICAgIHVJbWFnZTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1SW1hZ2UnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIHZhciBtYXRyaXggPSB0aGlzLmNhbGN1bGF0ZU1hdHJpeCgpO1xuICAgICAgZ2wudW5pZm9ybTFpKHVuaWZvcm1Mb2NhdGlvbnMudUltYWdlLCAxKTsgLy8gdGV4dHVyZSB1bml0IDEuXG4gICAgICBnbC51bmlmb3JtTWF0cml4M2Z2KHVuaWZvcm1Mb2NhdGlvbnMudVRyYW5zZm9ybU1hdHJpeCwgZmFsc2UsIG1hdHJpeCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgIGltYWdlOiB0aGlzLmltYWdlICYmIHRoaXMuaW1hZ2UudG9PYmplY3QoKSxcbiAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICBhbHBoYTogdGhpcy5hbHBoYVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kSW1hZ2V9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kSW1hZ2VcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kSW1hZ2UuZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICBmYWJyaWMuSW1hZ2UuZnJvbU9iamVjdChvYmplY3QuaW1hZ2UsIGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZShvYmplY3QpO1xuICAgICAgb3B0aW9ucy5pbWFnZSA9IGltYWdlO1xuICAgICAgY2FsbGJhY2sobmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJsZW5kSW1hZ2Uob3B0aW9ucykpO1xuICAgIH0pO1xuICB9O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLCBwb3cgPSBNYXRoLnBvdywgZmxvb3IgPSBNYXRoLmZsb29yLFxuICAgICAgc3FydCA9IE1hdGguc3FydCwgYWJzID0gTWF0aC5hYnMsIHJvdW5kID0gTWF0aC5yb3VuZCwgc2luID0gTWF0aC5zaW4sXG4gICAgICBjZWlsID0gTWF0aC5jZWlsLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogUmVzaXplIGltYWdlIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuUmVzaXplXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZXNpemUoKTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKGNhbnZhcy5yZW5kZXJBbGwuYmluZChjYW52YXMpKTtcbiAgICovXG4gIGZpbHRlcnMuUmVzaXplID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5CYXNlRmlsdGVyLCAvKiogQGxlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlc2l6ZS5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ1Jlc2l6ZScsXG5cbiAgICAvKipcbiAgICAgKiBSZXNpemUgdHlwZVxuICAgICAqIGZvciB3ZWJnbCByZXNpemVUeXBlIGlzIGp1c3QgbGFuY3pvcywgZm9yIGNhbnZhczJkIGNhbiBiZTpcbiAgICAgKiBiaWxpbmVhciwgaGVybWl0ZSwgc2xpY2VIYWNrLCBsYW5jem9zLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXNpemVUeXBlXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICByZXNpemVUeXBlOiAnaGVybWl0ZScsXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSBmYWN0b3IgZm9yIHJlc2l6aW5nLCB4IGF4aXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGVYXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzY2FsZVg6IDEsXG5cbiAgICAvKipcbiAgICAgKiBTY2FsZSBmYWN0b3IgZm9yIHJlc2l6aW5nLCB5IGF4aXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGVZXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzY2FsZVk6IDEsXG5cbiAgICAvKipcbiAgICAgKiBMYW5jem9zTG9iZXMgcGFyYW1ldGVyIGZvciBsYW5jem9zIGZpbHRlciwgdmFsaWQgZm9yIHJlc2l6ZVR5cGUgbGFuY3pvc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsYW5jem9zTG9iZXNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxhbmN6b3NMb2JlczogMyxcblxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVEZWx0YTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1RGVsdGEnKSxcbiAgICAgICAgdVRhcHM6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVRhcHMnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0yZnYodW5pZm9ybUxvY2F0aW9ucy51RGVsdGEsIHRoaXMuaG9yaXpvbnRhbCA/IFsxIC8gdGhpcy53aWR0aCwgMF0gOiBbMCwgMSAvIHRoaXMuaGVpZ2h0XSk7XG4gICAgICBnbC51bmlmb3JtMWZ2KHVuaWZvcm1Mb2NhdGlvbnMudVRhcHMsIHRoaXMudGFwcyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgY2FjaGVkIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgICAqL1xuICAgIHJldHJpZXZlU2hhZGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgZmlsdGVyV2luZG93ID0gdGhpcy5nZXRGaWx0ZXJXaW5kb3coKSwgY2FjaGVLZXkgPSB0aGlzLnR5cGUgKyAnXycgKyBmaWx0ZXJXaW5kb3c7XG4gICAgICBpZiAoIW9wdGlvbnMucHJvZ3JhbUNhY2hlLmhhc093blByb3BlcnR5KGNhY2hlS2V5KSkge1xuICAgICAgICB2YXIgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmdlbmVyYXRlU2hhZGVyKGZpbHRlcldpbmRvdyk7XG4gICAgICAgIG9wdGlvbnMucHJvZ3JhbUNhY2hlW2NhY2hlS2V5XSA9IHRoaXMuY3JlYXRlUHJvZ3JhbShvcHRpb25zLmNvbnRleHQsIGZyYWdtZW50U2hhZGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcHRpb25zLnByb2dyYW1DYWNoZVtjYWNoZUtleV07XG4gICAgfSxcblxuICAgIGdldEZpbHRlcldpbmRvdzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NhbGUgPSB0aGlzLnRlbXBTY2FsZTtcbiAgICAgIHJldHVybiBNYXRoLmNlaWwodGhpcy5sYW5jem9zTG9iZXMgLyBzY2FsZSk7XG4gICAgfSxcblxuICAgIGdldFRhcHM6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxvYmVGdW5jdGlvbiA9IHRoaXMubGFuY3pvc0NyZWF0ZSh0aGlzLmxhbmN6b3NMb2JlcyksIHNjYWxlID0gdGhpcy50ZW1wU2NhbGUsXG4gICAgICAgICAgZmlsdGVyV2luZG93ID0gdGhpcy5nZXRGaWx0ZXJXaW5kb3coKSwgdGFwcyA9IG5ldyBBcnJheShmaWx0ZXJXaW5kb3cpO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gZmlsdGVyV2luZG93OyBpKyspIHtcbiAgICAgICAgdGFwc1tpIC0gMV0gPSBsb2JlRnVuY3Rpb24oaSAqIHNjYWxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXBzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSB2ZXJ0ZXggYW5kIHNoYWRlciBzb3VyY2VzIGZyb20gdGhlIG5lY2Vzc2FyeSBzdGVwcyBudW1iZXJzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGZpbHRlcldpbmRvd1xuICAgICAqL1xuICAgIGdlbmVyYXRlU2hhZGVyOiBmdW5jdGlvbihmaWx0ZXJXaW5kb3cpIHtcbiAgICAgIHZhciBvZmZzZXRzID0gbmV3IEFycmF5KGZpbHRlcldpbmRvdyksXG4gICAgICAgICAgZnJhZ21lbnRTaGFkZXIgPSB0aGlzLmZyYWdtZW50U291cmNlVE9QLCBmaWx0ZXJXaW5kb3c7XG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGZpbHRlcldpbmRvdzsgaSsrKSB7XG4gICAgICAgIG9mZnNldHNbaSAtIDFdID0gaSArICcuMCAqIHVEZWx0YSc7XG4gICAgICB9XG5cbiAgICAgIGZyYWdtZW50U2hhZGVyICs9ICd1bmlmb3JtIGZsb2F0IHVUYXBzWycgKyBmaWx0ZXJXaW5kb3cgKyAnXTtcXG4nO1xuICAgICAgZnJhZ21lbnRTaGFkZXIgKz0gJ3ZvaWQgbWFpbigpIHtcXG4nO1xuICAgICAgZnJhZ21lbnRTaGFkZXIgKz0gJyAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nO1xuICAgICAgZnJhZ21lbnRTaGFkZXIgKz0gJyAgZmxvYXQgc3VtID0gMS4wO1xcbic7XG5cbiAgICAgIG9mZnNldHMuZm9yRWFjaChmdW5jdGlvbihvZmZzZXQsIGkpIHtcbiAgICAgICAgZnJhZ21lbnRTaGFkZXIgKz0gJyAgY29sb3IgKz0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQgKyAnICsgb2Zmc2V0ICsgJykgKiB1VGFwc1snICsgaSArICddO1xcbic7XG4gICAgICAgIGZyYWdtZW50U2hhZGVyICs9ICcgIGNvbG9yICs9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkIC0gJyArIG9mZnNldCArICcpICogdVRhcHNbJyArIGkgKyAnXTtcXG4nO1xuICAgICAgICBmcmFnbWVudFNoYWRlciArPSAnICBzdW0gKz0gMi4wICogdVRhcHNbJyArIGkgKyAnXTtcXG4nO1xuICAgICAgfSk7XG4gICAgICBmcmFnbWVudFNoYWRlciArPSAnICBnbF9GcmFnQ29sb3IgPSBjb2xvciAvIHN1bTtcXG4nO1xuICAgICAgZnJhZ21lbnRTaGFkZXIgKz0gJ30nO1xuICAgICAgcmV0dXJuIGZyYWdtZW50U2hhZGVyO1xuICAgIH0sXG5cbiAgICBmcmFnbWVudFNvdXJjZVRPUDogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIHZlYzIgdURlbHRhO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSByZXNpemUgZmlsdGVyIHRvIHRoZSBpbWFnZVxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0byB1c2UgV2ViR0wgb3IgQ2FudmFzMkQgYmFzZWQgb24gdGhlIG9wdGlvbnMud2ViZ2wgZmxhZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFzc2VzIFRoZSBudW1iZXIgb2YgZmlsdGVycyByZW1haW5pbmcgdG8gYmUgZXhlY3V0ZWRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMud2ViZ2wgV2hldGhlciB0byB1c2Ugd2ViZ2wgdG8gcmVuZGVyIHRoZSBmaWx0ZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IG9wdGlvbnMuc291cmNlVGV4dHVyZSBUaGUgdGV4dHVyZSBzZXR1cCBhcyB0aGUgc291cmNlIHRvIGJlIGZpbHRlcmVkLlxuICAgICAqIEBwYXJhbSB7V2ViR0xUZXh0dXJlfSBvcHRpb25zLnRhcmdldFRleHR1cmUgVGhlIHRleHR1cmUgd2hlcmUgZmlsdGVyZWQgb3V0cHV0IHNob3VsZCBiZSBkcmF3bi5cbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gb3B0aW9ucy5jb250ZXh0IFRoZSBHTCBjb250ZXh0IHVzZWQgZm9yIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5wcm9ncmFtQ2FjaGUgQSBtYXAgb2YgY29tcGlsZWQgc2hhZGVyIHByb2dyYW1zLCBrZXllZCBieSBmaWx0ZXIgdHlwZS5cbiAgICAgKi9cbiAgICBhcHBseVRvOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy53ZWJnbCkge1xuICAgICAgICBvcHRpb25zLnBhc3NlcysrO1xuICAgICAgICB0aGlzLndpZHRoID0gb3B0aW9ucy5zb3VyY2VXaWR0aDtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kVyA9IE1hdGgucm91bmQodGhpcy53aWR0aCAqIHRoaXMuc2NhbGVYKTtcbiAgICAgICAgdGhpcy5kSCA9IG9wdGlvbnMuc291cmNlSGVpZ2h0O1xuICAgICAgICB0aGlzLnRlbXBTY2FsZSA9IHRoaXMuZFcgLyB0aGlzLndpZHRoO1xuICAgICAgICB0aGlzLnRhcHMgPSB0aGlzLmdldFRhcHMoKTtcbiAgICAgICAgb3B0aW9ucy5kZXN0aW5hdGlvbldpZHRoID0gdGhpcy5kVztcbiAgICAgICAgdGhpcy5fc2V0dXBGcmFtZUJ1ZmZlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5hcHBseVRvV2ViR0wob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3N3YXBUZXh0dXJlcyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5zb3VyY2VXaWR0aCA9IG9wdGlvbnMuZGVzdGluYXRpb25XaWR0aDtcblxuICAgICAgICB0aGlzLmhlaWdodCA9IG9wdGlvbnMuc291cmNlSGVpZ2h0O1xuICAgICAgICB0aGlzLmhvcml6b250YWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kSCA9IE1hdGgucm91bmQodGhpcy5oZWlnaHQgKiB0aGlzLnNjYWxlWSk7XG4gICAgICAgIHRoaXMudGVtcFNjYWxlID0gdGhpcy5kSCAvIHRoaXMuaGVpZ2h0O1xuICAgICAgICB0aGlzLnRhcHMgPSB0aGlzLmdldFRhcHMoKTtcbiAgICAgICAgb3B0aW9ucy5kZXN0aW5hdGlvbkhlaWdodCA9IHRoaXMuZEg7XG4gICAgICAgIHRoaXMuX3NldHVwRnJhbWVCdWZmZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYXBwbHlUb1dlYkdMKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zd2FwVGV4dHVyZXMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuc291cmNlSGVpZ2h0ID0gb3B0aW9ucy5kZXN0aW5hdGlvbkhlaWdodDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmFwcGx5VG8yZChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNOZXV0cmFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2NhbGVYID09PSAxICYmIHRoaXMuc2NhbGVZID09PSAxO1xuICAgIH0sXG5cbiAgICBsYW5jem9zQ3JlYXRlOiBmdW5jdGlvbihsb2Jlcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgaWYgKHggPj0gbG9iZXMgfHwgeCA8PSAtbG9iZXMpIHtcbiAgICAgICAgICByZXR1cm4gMC4wO1xuICAgICAgICB9XG4gICAgICAgIGlmICh4IDwgMS4xOTIwOTI5MEUtMDcgJiYgeCA+IC0xLjE5MjA5MjkwRS0wNykge1xuICAgICAgICAgIHJldHVybiAxLjA7XG4gICAgICAgIH1cbiAgICAgICAgeCAqPSBNYXRoLlBJO1xuICAgICAgICB2YXIgeHggPSB4IC8gbG9iZXM7XG4gICAgICAgIHJldHVybiAoc2luKHgpIC8geCkgKiBzaW4oeHgpIC8geHg7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIGZpbHRlciB0byBjYW52YXMgZWxlbWVudFxuICAgICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZXNpemUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNhbnZhc0VsIENhbnZhcyBlbGVtZW50IHRvIGFwcGx5IGZpbHRlciB0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGVZXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgc2NhbGVYID0gdGhpcy5zY2FsZVgsXG4gICAgICAgICAgc2NhbGVZID0gdGhpcy5zY2FsZVk7XG5cbiAgICAgIHRoaXMucmNwU2NhbGVYID0gMSAvIHNjYWxlWDtcbiAgICAgIHRoaXMucmNwU2NhbGVZID0gMSAvIHNjYWxlWTtcblxuICAgICAgdmFyIG9XID0gaW1hZ2VEYXRhLndpZHRoLCBvSCA9IGltYWdlRGF0YS5oZWlnaHQsXG4gICAgICAgICAgZFcgPSByb3VuZChvVyAqIHNjYWxlWCksIGRIID0gcm91bmQob0ggKiBzY2FsZVkpLFxuICAgICAgICAgIG5ld0RhdGE7XG5cbiAgICAgIGlmICh0aGlzLnJlc2l6ZVR5cGUgPT09ICdzbGljZUhhY2snKSB7XG4gICAgICAgIG5ld0RhdGEgPSB0aGlzLnNsaWNlQnlUd28ob3B0aW9ucywgb1csIG9ILCBkVywgZEgpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5yZXNpemVUeXBlID09PSAnaGVybWl0ZScpIHtcbiAgICAgICAgbmV3RGF0YSA9IHRoaXMuaGVybWl0ZUZhc3RSZXNpemUob3B0aW9ucywgb1csIG9ILCBkVywgZEgpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5yZXNpemVUeXBlID09PSAnYmlsaW5lYXInKSB7XG4gICAgICAgIG5ld0RhdGEgPSB0aGlzLmJpbGluZWFyRmlsdGVyaW5nKG9wdGlvbnMsIG9XLCBvSCwgZFcsIGRIKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMucmVzaXplVHlwZSA9PT0gJ2xhbmN6b3MnKSB7XG4gICAgICAgIG5ld0RhdGEgPSB0aGlzLmxhbmN6b3NSZXNpemUob3B0aW9ucywgb1csIG9ILCBkVywgZEgpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucy5pbWFnZURhdGEgPSBuZXdEYXRhO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgc2xpY2VCeVR3b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjYW52YXNFbCBDYW52YXMgZWxlbWVudCB0byBhcHBseSBmaWx0ZXIgdG9cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb1cgT3JpZ2luYWwgV2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb0ggT3JpZ2luYWwgSGVpZ2h0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRXIERlc3RpbmF0aW9uIFdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRIIERlc3RpbmF0aW9uIEhlaWdodFxuICAgICAqIEByZXR1cm5zIHtJbWFnZURhdGF9XG4gICAgICovXG4gICAgc2xpY2VCeVR3bzogZnVuY3Rpb24ob3B0aW9ucywgb1csIG9ILCBkVywgZEgpIHtcbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSxcbiAgICAgICAgICBtdWx0ID0gMC41LCBkb25lVyA9IGZhbHNlLCBkb25lSCA9IGZhbHNlLCBzdGVwVyA9IG9XICogbXVsdCxcbiAgICAgICAgICBzdGVwSCA9IG9IICogbXVsdCwgcmVzb3VyY2VzID0gZmFicmljLmZpbHRlckJhY2tlbmQucmVzb3VyY2VzLFxuICAgICAgICAgIHRtcENhbnZhcywgY3R4LCBzWCA9IDAsIHNZID0gMCwgZFggPSBvVywgZFkgPSAwO1xuICAgICAgaWYgKCFyZXNvdXJjZXMuc2xpY2VCeVR3bykge1xuICAgICAgICByZXNvdXJjZXMuc2xpY2VCeVR3byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgfVxuICAgICAgdG1wQ2FudmFzID0gcmVzb3VyY2VzLnNsaWNlQnlUd287XG4gICAgICBpZiAodG1wQ2FudmFzLndpZHRoIDwgb1cgKiAxLjUgfHwgdG1wQ2FudmFzLmhlaWdodCA8IG9IKSB7XG4gICAgICAgIHRtcENhbnZhcy53aWR0aCA9IG9XICogMS41O1xuICAgICAgICB0bXBDYW52YXMuaGVpZ2h0ID0gb0g7XG4gICAgICB9XG4gICAgICBjdHggPSB0bXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgb1cgKiAxLjUsIG9IKTtcbiAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcblxuICAgICAgZFcgPSBmbG9vcihkVyk7XG4gICAgICBkSCA9IGZsb29yKGRIKTtcblxuICAgICAgd2hpbGUgKCFkb25lVyB8fCAhZG9uZUgpIHtcbiAgICAgICAgb1cgPSBzdGVwVztcbiAgICAgICAgb0ggPSBzdGVwSDtcbiAgICAgICAgaWYgKGRXIDwgZmxvb3Ioc3RlcFcgKiBtdWx0KSkge1xuICAgICAgICAgIHN0ZXBXID0gZmxvb3Ioc3RlcFcgKiBtdWx0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBzdGVwVyA9IGRXO1xuICAgICAgICAgIGRvbmVXID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZEggPCBmbG9vcihzdGVwSCAqIG11bHQpKSB7XG4gICAgICAgICAgc3RlcEggPSBmbG9vcihzdGVwSCAqIG11bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHN0ZXBIID0gZEg7XG4gICAgICAgICAgZG9uZUggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodG1wQ2FudmFzLCBzWCwgc1ksIG9XLCBvSCwgZFgsIGRZLCBzdGVwVywgc3RlcEgpO1xuICAgICAgICBzWCA9IGRYO1xuICAgICAgICBzWSA9IGRZO1xuICAgICAgICBkWSArPSBzdGVwSDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjdHguZ2V0SW1hZ2VEYXRhKHNYLCBzWSwgZFcsIGRIKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIGxhbmN6b3NSZXNpemVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2FudmFzRWwgQ2FudmFzIGVsZW1lbnQgdG8gYXBwbHkgZmlsdGVyIHRvXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9XIE9yaWdpbmFsIFdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9IIE9yaWdpbmFsIEhlaWdodFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkVyBEZXN0aW5hdGlvbiBXaWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkSCBEZXN0aW5hdGlvbiBIZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7SW1hZ2VEYXRhfVxuICAgICAqL1xuICAgIGxhbmN6b3NSZXNpemU6IGZ1bmN0aW9uKG9wdGlvbnMsIG9XLCBvSCwgZFcsIGRIKSB7XG5cbiAgICAgIGZ1bmN0aW9uIHByb2Nlc3ModSkge1xuICAgICAgICB2YXIgdiwgaSwgd2VpZ2h0LCBpZHgsIGEsIHJlZCwgZ3JlZW4sXG4gICAgICAgICAgICBibHVlLCBhbHBoYSwgZlgsIGZZO1xuICAgICAgICBjZW50ZXIueCA9ICh1ICsgMC41KSAqIHJhdGlvWDtcbiAgICAgICAgaWNlbnRlci54ID0gZmxvb3IoY2VudGVyLngpO1xuICAgICAgICBmb3IgKHYgPSAwOyB2IDwgZEg7IHYrKykge1xuICAgICAgICAgIGNlbnRlci55ID0gKHYgKyAwLjUpICogcmF0aW9ZO1xuICAgICAgICAgIGljZW50ZXIueSA9IGZsb29yKGNlbnRlci55KTtcbiAgICAgICAgICBhID0gMDsgcmVkID0gMDsgZ3JlZW4gPSAwOyBibHVlID0gMDsgYWxwaGEgPSAwO1xuICAgICAgICAgIGZvciAoaSA9IGljZW50ZXIueCAtIHJhbmdlMlg7IGkgPD0gaWNlbnRlci54ICsgcmFuZ2UyWDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaSA8IDAgfHwgaSA+PSBvVykge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZYID0gZmxvb3IoMTAwMCAqIGFicyhpIC0gY2VudGVyLngpKTtcbiAgICAgICAgICAgIGlmICghY2FjaGVMYW5jW2ZYXSkge1xuICAgICAgICAgICAgICBjYWNoZUxhbmNbZlhdID0geyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGljZW50ZXIueSAtIHJhbmdlMlk7IGogPD0gaWNlbnRlci55ICsgcmFuZ2UyWTsgaisrKSB7XG4gICAgICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IG9IKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZlkgPSBmbG9vcigxMDAwICogYWJzKGogLSBjZW50ZXIueSkpO1xuICAgICAgICAgICAgICBpZiAoIWNhY2hlTGFuY1tmWF1bZlldKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVMYW5jW2ZYXVtmWV0gPSBsYW5jem9zKHNxcnQocG93KGZYICogcmNwUmF0aW9YLCAyKSArIHBvdyhmWSAqIHJjcFJhdGlvWSwgMikpIC8gMTAwMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgd2VpZ2h0ID0gY2FjaGVMYW5jW2ZYXVtmWV07XG4gICAgICAgICAgICAgIGlmICh3ZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gKGogKiBvVyArIGkpICogNDtcbiAgICAgICAgICAgICAgICBhICs9IHdlaWdodDtcbiAgICAgICAgICAgICAgICByZWQgKz0gd2VpZ2h0ICogc3JjRGF0YVtpZHhdO1xuICAgICAgICAgICAgICAgIGdyZWVuICs9IHdlaWdodCAqIHNyY0RhdGFbaWR4ICsgMV07XG4gICAgICAgICAgICAgICAgYmx1ZSArPSB3ZWlnaHQgKiBzcmNEYXRhW2lkeCArIDJdO1xuICAgICAgICAgICAgICAgIGFscGhhICs9IHdlaWdodCAqIHNyY0RhdGFbaWR4ICsgM107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWR4ID0gKHYgKiBkVyArIHUpICogNDtcbiAgICAgICAgICBkZXN0RGF0YVtpZHhdID0gcmVkIC8gYTtcbiAgICAgICAgICBkZXN0RGF0YVtpZHggKyAxXSA9IGdyZWVuIC8gYTtcbiAgICAgICAgICBkZXN0RGF0YVtpZHggKyAyXSA9IGJsdWUgLyBhO1xuICAgICAgICAgIGRlc3REYXRhW2lkeCArIDNdID0gYWxwaGEgLyBhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCsrdSA8IGRXKSB7XG4gICAgICAgICAgcmV0dXJuIHByb2Nlc3ModSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlc3RJbWc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHNyY0RhdGEgPSBvcHRpb25zLmltYWdlRGF0YS5kYXRhLFxuICAgICAgICAgIGRlc3RJbWcgPSBvcHRpb25zLmN0eC5jcmVhdGVJbWFnZURhdGEoZFcsIGRIKSxcbiAgICAgICAgICBkZXN0RGF0YSA9IGRlc3RJbWcuZGF0YSxcbiAgICAgICAgICBsYW5jem9zID0gdGhpcy5sYW5jem9zQ3JlYXRlKHRoaXMubGFuY3pvc0xvYmVzKSxcbiAgICAgICAgICByYXRpb1ggPSB0aGlzLnJjcFNjYWxlWCwgcmF0aW9ZID0gdGhpcy5yY3BTY2FsZVksXG4gICAgICAgICAgcmNwUmF0aW9YID0gMiAvIHRoaXMucmNwU2NhbGVYLCByY3BSYXRpb1kgPSAyIC8gdGhpcy5yY3BTY2FsZVksXG4gICAgICAgICAgcmFuZ2UyWCA9IGNlaWwocmF0aW9YICogdGhpcy5sYW5jem9zTG9iZXMgLyAyKSxcbiAgICAgICAgICByYW5nZTJZID0gY2VpbChyYXRpb1kgKiB0aGlzLmxhbmN6b3NMb2JlcyAvIDIpLFxuICAgICAgICAgIGNhY2hlTGFuYyA9IHsgfSwgY2VudGVyID0geyB9LCBpY2VudGVyID0geyB9O1xuXG4gICAgICByZXR1cm4gcHJvY2VzcygwKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYmlsaW5lYXJGaWx0ZXJpbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2FudmFzRWwgQ2FudmFzIGVsZW1lbnQgdG8gYXBwbHkgZmlsdGVyIHRvXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9XIE9yaWdpbmFsIFdpZHRoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9IIE9yaWdpbmFsIEhlaWdodFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkVyBEZXN0aW5hdGlvbiBXaWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkSCBEZXN0aW5hdGlvbiBIZWlnaHRcbiAgICAgKiBAcmV0dXJucyB7SW1hZ2VEYXRhfVxuICAgICAqL1xuICAgIGJpbGluZWFyRmlsdGVyaW5nOiBmdW5jdGlvbihvcHRpb25zLCBvVywgb0gsIGRXLCBkSCkge1xuICAgICAgdmFyIGEsIGIsIGMsIGQsIHgsIHksIGksIGosIHhEaWZmLCB5RGlmZiwgY2hubCxcbiAgICAgICAgICBjb2xvciwgb2Zmc2V0ID0gMCwgb3JpZ1BpeCwgcmF0aW9YID0gdGhpcy5yY3BTY2FsZVgsXG4gICAgICAgICAgcmF0aW9ZID0gdGhpcy5yY3BTY2FsZVksXG4gICAgICAgICAgdzQgPSA0ICogKG9XIC0gMSksIGltZyA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIHBpeGVscyA9IGltZy5kYXRhLCBkZXN0SW1hZ2UgPSBvcHRpb25zLmN0eC5jcmVhdGVJbWFnZURhdGEoZFcsIGRIKSxcbiAgICAgICAgICBkZXN0UGl4ZWxzID0gZGVzdEltYWdlLmRhdGE7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZEg7IGkrKykge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgZFc7IGorKykge1xuICAgICAgICAgIHggPSBmbG9vcihyYXRpb1ggKiBqKTtcbiAgICAgICAgICB5ID0gZmxvb3IocmF0aW9ZICogaSk7XG4gICAgICAgICAgeERpZmYgPSByYXRpb1ggKiBqIC0geDtcbiAgICAgICAgICB5RGlmZiA9IHJhdGlvWSAqIGkgLSB5O1xuICAgICAgICAgIG9yaWdQaXggPSA0ICogKHkgKiBvVyArIHgpO1xuXG4gICAgICAgICAgZm9yIChjaG5sID0gMDsgY2hubCA8IDQ7IGNobmwrKykge1xuICAgICAgICAgICAgYSA9IHBpeGVsc1tvcmlnUGl4ICsgY2hubF07XG4gICAgICAgICAgICBiID0gcGl4ZWxzW29yaWdQaXggKyA0ICsgY2hubF07XG4gICAgICAgICAgICBjID0gcGl4ZWxzW29yaWdQaXggKyB3NCArIGNobmxdO1xuICAgICAgICAgICAgZCA9IHBpeGVsc1tvcmlnUGl4ICsgdzQgKyA0ICsgY2hubF07XG4gICAgICAgICAgICBjb2xvciA9IGEgKiAoMSAtIHhEaWZmKSAqICgxIC0geURpZmYpICsgYiAqIHhEaWZmICogKDEgLSB5RGlmZikgK1xuICAgICAgICAgICAgICAgICAgICBjICogeURpZmYgKiAoMSAtIHhEaWZmKSArIGQgKiB4RGlmZiAqIHlEaWZmO1xuICAgICAgICAgICAgZGVzdFBpeGVsc1tvZmZzZXQrK10gPSBjb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBkZXN0SW1hZ2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGhlcm1pdGVGYXN0UmVzaXplXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNhbnZhc0VsIENhbnZhcyBlbGVtZW50IHRvIGFwcGx5IGZpbHRlciB0b1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvVyBPcmlnaW5hbCBXaWR0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvSCBPcmlnaW5hbCBIZWlnaHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZFcgRGVzdGluYXRpb24gV2lkdGhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZEggRGVzdGluYXRpb24gSGVpZ2h0XG4gICAgICogQHJldHVybnMge0ltYWdlRGF0YX1cbiAgICAgKi9cbiAgICBoZXJtaXRlRmFzdFJlc2l6ZTogZnVuY3Rpb24ob3B0aW9ucywgb1csIG9ILCBkVywgZEgpIHtcbiAgICAgIHZhciByYXRpb1cgPSB0aGlzLnJjcFNjYWxlWCwgcmF0aW9IID0gdGhpcy5yY3BTY2FsZVksXG4gICAgICAgICAgcmF0aW9XSGFsZiA9IGNlaWwocmF0aW9XIC8gMiksXG4gICAgICAgICAgcmF0aW9ISGFsZiA9IGNlaWwocmF0aW9IIC8gMiksXG4gICAgICAgICAgaW1nID0gb3B0aW9ucy5pbWFnZURhdGEsIGRhdGEgPSBpbWcuZGF0YSxcbiAgICAgICAgICBpbWcyID0gb3B0aW9ucy5jdHguY3JlYXRlSW1hZ2VEYXRhKGRXLCBkSCksIGRhdGEyID0gaW1nMi5kYXRhO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkSDsgaisrKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZFc7IGkrKykge1xuICAgICAgICAgIHZhciB4MiA9IChpICsgaiAqIGRXKSAqIDQsIHdlaWdodCA9IDAsIHdlaWdodHMgPSAwLCB3ZWlnaHRzQWxwaGEgPSAwLFxuICAgICAgICAgICAgICBneFIgPSAwLCBneEcgPSAwLCBneEIgPSAwLCBneEEgPSAwLCBjZW50ZXJZID0gKGogKyAwLjUpICogcmF0aW9IO1xuICAgICAgICAgIGZvciAodmFyIHl5ID0gZmxvb3IoaiAqIHJhdGlvSCk7IHl5IDwgKGogKyAxKSAqIHJhdGlvSDsgeXkrKykge1xuICAgICAgICAgICAgdmFyIGR5ID0gYWJzKGNlbnRlclkgLSAoeXkgKyAwLjUpKSAvIHJhdGlvSEhhbGYsXG4gICAgICAgICAgICAgICAgY2VudGVyWCA9IChpICsgMC41KSAqIHJhdGlvVywgdzAgPSBkeSAqIGR5O1xuICAgICAgICAgICAgZm9yICh2YXIgeHggPSBmbG9vcihpICogcmF0aW9XKTsgeHggPCAoaSArIDEpICogcmF0aW9XOyB4eCsrKSB7XG4gICAgICAgICAgICAgIHZhciBkeCA9IGFicyhjZW50ZXJYIC0gKHh4ICsgMC41KSkgLyByYXRpb1dIYWxmLFxuICAgICAgICAgICAgICAgICAgdyA9IHNxcnQodzAgKyBkeCAqIGR4KTtcbiAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbWF4LWRlcHRoICovXG4gICAgICAgICAgICAgIGlmICh3ID4gMSAmJiB3IDwgLTEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvL2hlcm1pdGUgZmlsdGVyXG4gICAgICAgICAgICAgIHdlaWdodCA9IDIgKiB3ICogdyAqIHcgLSAzICogdyAqIHcgKyAxO1xuICAgICAgICAgICAgICBpZiAod2VpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgIGR4ID0gNCAqICh4eCArIHl5ICogb1cpO1xuICAgICAgICAgICAgICAgIC8vYWxwaGFcbiAgICAgICAgICAgICAgICBneEEgKz0gd2VpZ2h0ICogZGF0YVtkeCArIDNdO1xuICAgICAgICAgICAgICAgIHdlaWdodHNBbHBoYSArPSB3ZWlnaHQ7XG4gICAgICAgICAgICAgICAgLy9jb2xvcnNcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtkeCArIDNdIDwgMjU1KSB7XG4gICAgICAgICAgICAgICAgICB3ZWlnaHQgPSB3ZWlnaHQgKiBkYXRhW2R4ICsgM10gLyAyNTA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGd4UiArPSB3ZWlnaHQgKiBkYXRhW2R4XTtcbiAgICAgICAgICAgICAgICBneEcgKz0gd2VpZ2h0ICogZGF0YVtkeCArIDFdO1xuICAgICAgICAgICAgICAgIGd4QiArPSB3ZWlnaHQgKiBkYXRhW2R4ICsgMl07XG4gICAgICAgICAgICAgICAgd2VpZ2h0cyArPSB3ZWlnaHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBtYXgtZGVwdGggKi9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZGF0YTJbeDJdID0gZ3hSIC8gd2VpZ2h0cztcbiAgICAgICAgICBkYXRhMlt4MiArIDFdID0gZ3hHIC8gd2VpZ2h0cztcbiAgICAgICAgICBkYXRhMlt4MiArIDJdID0gZ3hCIC8gd2VpZ2h0cztcbiAgICAgICAgICBkYXRhMlt4MiArIDNdID0gZ3hBIC8gd2VpZ2h0c0FscGhhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW1nMjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgc2NhbGVYOiB0aGlzLnNjYWxlWCxcbiAgICAgICAgc2NhbGVZOiB0aGlzLnNjYWxlWSxcbiAgICAgICAgcmVzaXplVHlwZTogdGhpcy5yZXNpemVUeXBlLFxuICAgICAgICBsYW5jem9zTG9iZXM6IHRoaXMubGFuY3pvc0xvYmVzXG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5SZXNpemV9IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlJlc2l6ZVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuUmVzaXplLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBDb250cmFzdCBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnRyYXN0XG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnRyYXN0I2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db250cmFzdCh7XG4gICAqICAgY29udHJhc3Q6IDAuMjVcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKi9cbiAgZmlsdGVycy5Db250cmFzdCA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db250cmFzdC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ0NvbnRyYXN0JyxcblxuICAgIGZyYWdtZW50U291cmNlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgJ3VuaWZvcm0gZmxvYXQgdUNvbnRyYXN0O1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IGNvbnRyYXN0RiA9IDEuMDE1ICogKHVDb250cmFzdCArIDEuMCkgLyAoMS4wICogKDEuMDE1IC0gdUNvbnRyYXN0KSk7XFxuJyArXG4gICAgICAgICdjb2xvci5yZ2IgPSBjb250cmFzdEYgKiAoY29sb3IucmdiIC0gMC41KSArIDAuNTtcXG4nICtcbiAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IGNvbG9yO1xcbicgK1xuICAgICAgJ30nLFxuXG4gICAgLyoqXG4gICAgICogY29udHJhc3QgdmFsdWUsIHJhbmdlIGZyb20gLTEgdG8gMS5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY29udHJhc3RcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgY29udHJhc3Q6IDAsXG5cbiAgICBtYWluUGFyYW1ldGVyOiAnY29udHJhc3QnLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udHJhc3QucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5jb250cmFzdD0wXSBWYWx1ZSB0byBjb250cmFzdCB0aGUgaW1hZ2UgdXAgKC0xLi4uMSlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAgKiBBcHBseSB0aGUgQ29udHJhc3Qgb3BlcmF0aW9uIHRvIGEgVWludDhBcnJheSByZXByZXNlbnRpbmcgdGhlIHBpeGVscyBvZiBhbiBpbWFnZS5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgICogQHBhcmFtIHtJbWFnZURhdGF9IG9wdGlvbnMuaW1hZ2VEYXRhIFRoZSBVaW50OEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAgKi9cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRyYXN0ID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbWFnZURhdGEgPSBvcHRpb25zLmltYWdlRGF0YSwgaSwgbGVuLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSwgbGVuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgY29udHJhc3QgPSBNYXRoLmZsb29yKHRoaXMuY29udHJhc3QgKiAyNTUpLFxuICAgICAgICAgIGNvbnRyYXN0RiA9IDI1OSAqIChjb250cmFzdCArIDI1NSkgLyAoMjU1ICogKDI1OSAtIGNvbnRyYXN0KSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICBkYXRhW2ldID0gY29udHJhc3RGICogKGRhdGFbaV0gLSAxMjgpICsgMTI4O1xuICAgICAgICBkYXRhW2kgKyAxXSA9IGNvbnRyYXN0RiAqIChkYXRhW2kgKyAxXSAtIDEyOCkgKyAxMjg7XG4gICAgICAgIGRhdGFbaSArIDJdID0gY29udHJhc3RGICogKGRhdGFbaSArIDJdIC0gMTI4KSArIDEyODtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVDb250cmFzdDogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1Q29udHJhc3QnKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0xZih1bmlmb3JtTG9jYXRpb25zLnVDb250cmFzdCwgdGhpcy5jb250cmFzdCk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5Db250cmFzdH0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuQ29udHJhc3RcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbnRyYXN0LmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBTYXR1cmF0ZSBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNhdHVyYXRpb25cbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuU2F0dXJhdGlvbiNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuU2F0dXJhdGlvbih7XG4gICAqICAgc2F0dXJhdGlvbjogMVxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqL1xuICBmaWx0ZXJzLlNhdHVyYXRpb24gPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuU2F0dXJhdGlvbi5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ1NhdHVyYXRpb24nLFxuXG4gICAgZnJhZ21lbnRTb3VyY2U6ICdwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuJyArXG4gICAgICAndW5pZm9ybSBzYW1wbGVyMkQgdVRleHR1cmU7XFxuJyArXG4gICAgICAndW5pZm9ybSBmbG9hdCB1U2F0dXJhdGlvbjtcXG4nICtcbiAgICAgICd2YXJ5aW5nIHZlYzIgdlRleENvb3JkO1xcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodVRleHR1cmUsIHZUZXhDb29yZCk7XFxuJyArXG4gICAgICAgICdmbG9hdCByZ01heCA9IG1heChjb2xvci5yLCBjb2xvci5nKTtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IHJnYk1heCA9IG1heChyZ01heCwgY29sb3IuYik7XFxuJyArXG4gICAgICAgICdjb2xvci5yICs9IHJnYk1heCAhPSBjb2xvci5yID8gKHJnYk1heCAtIGNvbG9yLnIpICogdVNhdHVyYXRpb24gOiAwLjAwO1xcbicgK1xuICAgICAgICAnY29sb3IuZyArPSByZ2JNYXggIT0gY29sb3IuZyA/IChyZ2JNYXggLSBjb2xvci5nKSAqIHVTYXR1cmF0aW9uIDogMC4wMDtcXG4nICtcbiAgICAgICAgJ2NvbG9yLmIgKz0gcmdiTWF4ICE9IGNvbG9yLmIgPyAocmdiTWF4IC0gY29sb3IuYikgKiB1U2F0dXJhdGlvbiA6IDAuMDA7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IgPSBjb2xvcjtcXG4nICtcbiAgICAgICd9JyxcblxuICAgIC8qKlxuICAgICAqIFNhdHVyYXRpb24gdmFsdWUsIGZyb20gLTEgdG8gMS5cbiAgICAgKiBJbmNyZWFzZXMvZGVjcmVhc2VzIHRoZSBjb2xvciBzYXR1cmF0aW9uLlxuICAgICAqIEEgdmFsdWUgb2YgMCBoYXMgbm8gZWZmZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzYXR1cmF0aW9uXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzYXR1cmF0aW9uOiAwLFxuXG4gICAgbWFpblBhcmFtZXRlcjogJ3NhdHVyYXRpb24nLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnMuU2F0dXJhdGUucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5zYXR1cmF0ZT0wXSBWYWx1ZSB0byBzYXR1cmF0ZSB0aGUgaW1hZ2UgKC0xLi4uMSlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBTYXR1cmF0aW9uIG9wZXJhdGlvbiB0byBhIFVpbnQ4Q2xhbXBlZEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKHRoaXMuc2F0dXJhdGlvbiA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsXG4gICAgICAgICAgZGF0YSA9IGltYWdlRGF0YS5kYXRhLCBsZW4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgICBhZGp1c3QgPSAtdGhpcy5zYXR1cmF0aW9uLCBpLCBtYXg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICBtYXggPSBNYXRoLm1heChkYXRhW2ldLCBkYXRhW2kgKyAxXSwgZGF0YVtpICsgMl0pO1xuICAgICAgICBkYXRhW2ldICs9IG1heCAhPT0gZGF0YVtpXSA/IChtYXggLSBkYXRhW2ldKSAqIGFkanVzdCA6IDA7XG4gICAgICAgIGRhdGFbaSArIDFdICs9IG1heCAhPT0gZGF0YVtpICsgMV0gPyAobWF4IC0gZGF0YVtpICsgMV0pICogYWRqdXN0IDogMDtcbiAgICAgICAgZGF0YVtpICsgMl0gKz0gbWF4ICE9PSBkYXRhW2kgKyAyXSA/IChtYXggLSBkYXRhW2kgKyAyXSkgKiBhZGp1c3QgOiAwO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdVNhdHVyYXRpb246IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndVNhdHVyYXRpb24nKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBmcm9tIHRoaXMgZmlsdGVyIHRvIGl0cyBzaGFkZXIgcHJvZ3JhbSdzIHVuaWZvcm1zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1Mb2NhdGlvbnMgQSBtYXAgb2Ygc3RyaW5nIHVuaWZvcm0gbmFtZXMgdG8gV2ViR0xVbmlmb3JtTG9jYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIHNlbmRVbmlmb3JtRGF0YTogZnVuY3Rpb24oZ2wsIHVuaWZvcm1Mb2NhdGlvbnMpIHtcbiAgICAgIGdsLnVuaWZvcm0xZih1bmlmb3JtTG9jYXRpb25zLnVTYXR1cmF0aW9uLCAtdGhpcy5zYXR1cmF0aW9uKTtcbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLlNhdHVyYXRpb259IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlNhdHVyYXRlXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5TYXR1cmF0aW9uLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBWaWJyYW5jZSBmaWx0ZXIgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlZpYnJhbmNlXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuSW1hZ2UuZmlsdGVyc1xuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlZpYnJhbmNlI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5WaWJyYW5jZSh7XG4gICAqICAgdmlicmFuY2U6IDFcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKi9cbiAgZmlsdGVycy5WaWJyYW5jZSA9IGNyZWF0ZUNsYXNzKGZpbHRlcnMuQmFzZUZpbHRlciwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5WaWJyYW5jZS5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ1ZpYnJhbmNlJyxcblxuICAgIGZyYWdtZW50U291cmNlOiAncHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbicgK1xuICAgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVUZXh0dXJlO1xcbicgK1xuICAgICAgJ3VuaWZvcm0gZmxvYXQgdVZpYnJhbmNlO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IG1heCA9IG1heChjb2xvci5yLCBtYXgoY29sb3IuZywgY29sb3IuYikpO1xcbicgK1xuICAgICAgICAnZmxvYXQgYXZnID0gKGNvbG9yLnIgKyBjb2xvci5nICsgY29sb3IuYikgLyAzLjA7XFxuJyArXG4gICAgICAgICdmbG9hdCBhbXQgPSAoYWJzKG1heCAtIGF2ZykgKiAyLjApICogdVZpYnJhbmNlO1xcbicgK1xuICAgICAgICAnY29sb3IuciArPSBtYXggIT0gY29sb3IuciA/IChtYXggLSBjb2xvci5yKSAqIGFtdCA6IDAuMDA7XFxuJyArXG4gICAgICAgICdjb2xvci5nICs9IG1heCAhPSBjb2xvci5nID8gKG1heCAtIGNvbG9yLmcpICogYW10IDogMC4wMDtcXG4nICtcbiAgICAgICAgJ2NvbG9yLmIgKz0gbWF4ICE9IGNvbG9yLmIgPyAobWF4IC0gY29sb3IuYikgKiBhbXQgOiAwLjAwO1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAnfScsXG5cbiAgICAvKipcbiAgICAgKiBWaWJyYW5jZSB2YWx1ZSwgZnJvbSAtMSB0byAxLlxuICAgICAqIEluY3JlYXNlcy9kZWNyZWFzZXMgdGhlIHNhdHVyYXRpb24gb2YgbW9yZSBtdXRlZCBjb2xvcnMgd2l0aCBsZXNzIGVmZmVjdCBvbiBzYXR1cmF0ZWQgY29sb3JzLlxuICAgICAqIEEgdmFsdWUgb2YgMCBoYXMgbm8gZWZmZWN0LlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2aWJyYW5jZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdmlicmFuY2U6IDAsXG5cbiAgICBtYWluUGFyYW1ldGVyOiAndmlicmFuY2UnLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnMuVmlicmFuY2UucHJvdG90eXBlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52aWJyYW5jZT0wXSBWaWJyYW5jZSB2YWx1ZSBmb3IgdGhlIGltYWdlIChiZXR3ZWVuIC0xIGFuZCAxKVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIFZpYnJhbmNlIG9wZXJhdGlvbiB0byBhIFVpbnQ4Q2xhbXBlZEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4Q2xhbXBlZEFycmF5IHRvIGJlIGZpbHRlcmVkLlxuICAgICAqL1xuICAgIGFwcGx5VG8yZDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKHRoaXMudmlicmFuY2UgPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGltYWdlRGF0YSA9IG9wdGlvbnMuaW1hZ2VEYXRhLFxuICAgICAgICAgIGRhdGEgPSBpbWFnZURhdGEuZGF0YSwgbGVuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgICAgYWRqdXN0ID0gLXRoaXMudmlicmFuY2UsIGksIG1heCwgYXZnLCBhbXQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgICAgICBtYXggPSBNYXRoLm1heChkYXRhW2ldLCBkYXRhW2kgKyAxXSwgZGF0YVtpICsgMl0pO1xuICAgICAgICBhdmcgPSAoZGF0YVtpXSArIGRhdGFbaSArIDFdICsgZGF0YVtpICsgMl0pIC8gMztcbiAgICAgICAgYW10ID0gKChNYXRoLmFicyhtYXggLSBhdmcpICogMiAvIDI1NSkgKiBhZGp1c3QpO1xuICAgICAgICBkYXRhW2ldICs9IG1heCAhPT0gZGF0YVtpXSA/IChtYXggLSBkYXRhW2ldKSAqIGFtdCA6IDA7XG4gICAgICAgIGRhdGFbaSArIDFdICs9IG1heCAhPT0gZGF0YVtpICsgMV0gPyAobWF4IC0gZGF0YVtpICsgMV0pICogYW10IDogMDtcbiAgICAgICAgZGF0YVtpICsgMl0gKz0gbWF4ICE9PSBkYXRhW2kgKyAyXSA/IChtYXggLSBkYXRhW2kgKyAyXSkgKiBhbXQgOiAwO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gV2ViR0wgdW5pZm9ybSBsb2NhdGlvbnMgZm9yIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIFRoZSBHTCBjYW52YXMgY29udGV4dCB1c2VkIHRvIGNvbXBpbGUgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICogQHBhcmFtIHtXZWJHTFNoYWRlclByb2dyYW19IHByb2dyYW0gVGhpcyBmaWx0ZXIncyBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbS5cbiAgICAgKi9cbiAgICBnZXRVbmlmb3JtTG9jYXRpb25zOiBmdW5jdGlvbihnbCwgcHJvZ3JhbSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdVZpYnJhbmNlOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VWaWJyYW5jZScpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgZ2wudW5pZm9ybTFmKHVuaWZvcm1Mb2NhdGlvbnMudVZpYnJhbmNlLCAtdGhpcy52aWJyYW5jZSk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmlsdGVyIGluc3RhbmNlIGZyb20gYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSB0byBiZSBpbnZva2VkIGFmdGVyIGZpbHRlciBjcmVhdGlvblxuICAgKiBAcmV0dXJuIHtmYWJyaWMuSW1hZ2UuZmlsdGVycy5WaWJyYW5jZX0gSW5zdGFuY2Ugb2YgZmFicmljLkltYWdlLmZpbHRlcnMuVmlicmFuY2VcbiAgICovXG4gIGZhYnJpYy5JbWFnZS5maWx0ZXJzLlZpYnJhbmNlLmZyb21PYmplY3QgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CYXNlRmlsdGVyLmZyb21PYmplY3Q7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBmYWJyaWMgID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBmaWx0ZXJzID0gZmFicmljLkltYWdlLmZpbHRlcnMsXG4gICAgICBjcmVhdGVDbGFzcyA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzO1xuXG4gIC8qKlxuICAgKiBCbHVyIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuQmx1clxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbHVyI2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqIEBzZWUge0BsaW5rIGh0dHA6Ly9mYWJyaWNqcy5jb20vaW1hZ2UtZmlsdGVyc3xJbWFnZUZpbHRlcnMgZGVtb31cbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGZpbHRlciA9IG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5CbHVyKHtcbiAgICogICBibHVyOiAwLjVcbiAgICogfSk7XG4gICAqIG9iamVjdC5maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgICogb2JqZWN0LmFwcGx5RmlsdGVycygpO1xuICAgKiBjYW52YXMucmVuZGVyQWxsKCk7XG4gICAqL1xuICBmaWx0ZXJzLkJsdXIgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmx1ci5wcm90b3R5cGUgKi8ge1xuXG4gICAgdHlwZTogJ0JsdXInLFxuXG4gICAgLypcbidnbF9GcmFnQ29sb3IgPSB2ZWM0KDAuMCk7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIC03ICogdURlbHRhKSowLjAwNDQyOTkxMjEwNTUxMTMyNjU7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIC02ICogdURlbHRhKSowLjAwODk1NzgxMjExNzk0OycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAtNSAqIHVEZWx0YSkqMC4wMjE1OTYzODY2MDUzOycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAtNCAqIHVEZWx0YSkqMC4wNDQzNjgzMzM4NzE4OycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAtMyAqIHVEZWx0YSkqMC4wNzc2NzQ0MjE5OTMzOycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAtMiAqIHVEZWx0YSkqMC4xMTU4NzY2MjExMDU7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIC0xICogdURlbHRhKSowLjE0NzMwODA1NjEyMTsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICAgICAgICAgICAgICApKjAuMTU5NTc2OTEyMTYxOycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyAxICogdURlbHRhKSowLjE0NzMwODA1NjEyMTsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgMiAqIHVEZWx0YSkqMC4xMTU4NzY2MjExMDU7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIDMgKiB1RGVsdGEpKjAuMDc3Njc0NDIxOTkzMzsnLFxuJ2dsX0ZyYWdDb2xvciArPSB0ZXh0dXJlMkQodGV4dHVyZSwgdlRleENvb3JkICsgNCAqIHVEZWx0YSkqMC4wNDQzNjgzMzM4NzE4OycsXG4nZ2xfRnJhZ0NvbG9yICs9IHRleHR1cmUyRCh0ZXh0dXJlLCB2VGV4Q29vcmQgKyA1ICogdURlbHRhKSowLjAyMTU5NjM4NjYwNTM7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIDYgKiB1RGVsdGEpKjAuMDA4OTU3ODEyMTE3OTQ7JyxcbidnbF9GcmFnQ29sb3IgKz0gdGV4dHVyZTJEKHRleHR1cmUsIHZUZXhDb29yZCArIDcgKiB1RGVsdGEpKjAuMDA0NDI5OTEyMTA1NTExMzI2NTsnLFxuKi9cblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIHZlYzIgdURlbHRhO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAnY29uc3QgZmxvYXQgblNhbXBsZXMgPSAxNS4wO1xcbicgK1xuICAgICAgJ3ZlYzMgdjNvZmZzZXQgPSB2ZWMzKDEyLjk4OTgsIDc4LjIzMywgMTUxLjcxODIpO1xcbicgK1xuICAgICAgJ2Zsb2F0IHJhbmRvbSh2ZWMzIHNjYWxlKSB7XFxuJyArXG4gICAgICAgIC8qIHVzZSB0aGUgZnJhZ21lbnQgcG9zaXRpb24gZm9yIGEgZGlmZmVyZW50IHNlZWQgcGVyLXBpeGVsICovXG4gICAgICAgICdyZXR1cm4gZnJhY3Qoc2luKGRvdChnbF9GcmFnQ29vcmQueHl6LCBzY2FsZSkpICogNDM3NTguNTQ1Myk7XFxuJyArXG4gICAgICAnfVxcbicgK1xuICAgICAgJ3ZvaWQgbWFpbigpIHtcXG4nICtcbiAgICAgICAgJ3ZlYzQgY29sb3IgPSB2ZWM0KDAuMCk7XFxuJyArXG4gICAgICAgICdmbG9hdCB0b3RhbCA9IDAuMDtcXG4nICtcbiAgICAgICAgJ2Zsb2F0IG9mZnNldCA9IHJhbmRvbSh2M29mZnNldCk7XFxuJyArXG4gICAgICAgICdmb3IgKGZsb2F0IHQgPSAtblNhbXBsZXM7IHQgPD0gblNhbXBsZXM7IHQrKykge1xcbicgK1xuICAgICAgICAgICdmbG9hdCBwZXJjZW50ID0gKHQgKyBvZmZzZXQgLSAwLjUpIC8gblNhbXBsZXM7XFxuJyArXG4gICAgICAgICAgJ2Zsb2F0IHdlaWdodCA9IDEuMCAtIGFicyhwZXJjZW50KTtcXG4nICtcbiAgICAgICAgICAnY29sb3IgKz0gdGV4dHVyZTJEKHVUZXh0dXJlLCB2VGV4Q29vcmQgKyB1RGVsdGEgKiBwZXJjZW50KSAqIHdlaWdodDtcXG4nICtcbiAgICAgICAgICAndG90YWwgKz0gd2VpZ2h0O1xcbicgK1xuICAgICAgICAnfVxcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3IgLyB0b3RhbDtcXG4nICtcbiAgICAgICd9JyxcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuICAgIC8qKlxuICAgICAqIGJsdXIgdmFsdWUsIGluIHBlcmNlbnRhZ2Ugb2YgaW1hZ2UgZGltZW5zaW9ucy5cbiAgICAgKiBzcGVjaWZpYyB0byBrZWVwIHRoZSBpbWFnZSBibHVyIGNvbnN0YW50IGF0IGRpZmZlcmVudCByZXNvbHV0aW9uc1xuICAgICAqIHJhbmdlIGJldHdlZW4gMCBhbmQgMS5cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGJsdXI6IDAsXG5cbiAgICBtYWluUGFyYW1ldGVyOiAnYmx1cicsXG5cbiAgICBhcHBseVRvOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBpZiAob3B0aW9ucy53ZWJnbCkge1xuICAgICAgICAvLyB0aGlzIGFzcGVjdFJhdGlvIGlzIHVzZWQgdG8gZ2l2ZSB0aGUgc2FtZSBibHVyIHRvIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsXG4gICAgICAgIHRoaXMuYXNwZWN0UmF0aW8gPSBvcHRpb25zLnNvdXJjZVdpZHRoIC8gb3B0aW9ucy5zb3VyY2VIZWlnaHQ7XG4gICAgICAgIG9wdGlvbnMucGFzc2VzKys7XG4gICAgICAgIHRoaXMuX3NldHVwRnJhbWVCdWZmZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbCA9IHRydWU7XG4gICAgICAgIHRoaXMuYXBwbHlUb1dlYkdMKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl9zd2FwVGV4dHVyZXMob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3NldHVwRnJhbWVCdWZmZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuaG9yaXpvbnRhbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFwcGx5VG9XZWJHTChvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fc3dhcFRleHR1cmVzKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuYXBwbHlUbzJkKG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhcHBseVRvMmQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIC8vIHBhaW50IGNhbnZhc0VsIHdpdGggY3VycmVudCBpbWFnZSBkYXRhLlxuICAgICAgLy9vcHRpb25zLmN0eC5wdXRJbWFnZURhdGEob3B0aW9ucy5pbWFnZURhdGEsIDAsIDApO1xuICAgICAgb3B0aW9ucy5pbWFnZURhdGEgPSB0aGlzLnNpbXBsZUJsdXIob3B0aW9ucyk7XG4gICAgfSxcblxuICAgIHNpbXBsZUJsdXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciByZXNvdXJjZXMgPSBvcHRpb25zLmZpbHRlckJhY2tlbmQucmVzb3VyY2VzLCBjYW52YXMxLCBjYW52YXMyLFxuICAgICAgICAgIHdpZHRoID0gb3B0aW9ucy5pbWFnZURhdGEud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gb3B0aW9ucy5pbWFnZURhdGEuaGVpZ2h0O1xuXG4gICAgICBpZiAoIXJlc291cmNlcy5ibHVyTGF5ZXIxKSB7XG4gICAgICAgIHJlc291cmNlcy5ibHVyTGF5ZXIxID0gZmFicmljLnV0aWwuY3JlYXRlQ2FudmFzRWxlbWVudCgpO1xuICAgICAgICByZXNvdXJjZXMuYmx1ckxheWVyMiA9IGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKTtcbiAgICAgIH1cbiAgICAgIGNhbnZhczEgPSByZXNvdXJjZXMuYmx1ckxheWVyMTtcbiAgICAgIGNhbnZhczIgPSByZXNvdXJjZXMuYmx1ckxheWVyMjtcbiAgICAgIGlmIChjYW52YXMxLndpZHRoICE9PSB3aWR0aCB8fCBjYW52YXMxLmhlaWdodCAhPT0gaGVpZ2h0KSB7XG4gICAgICAgIGNhbnZhczIud2lkdGggPSBjYW52YXMxLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGNhbnZhczIuaGVpZ2h0ID0gY2FudmFzMS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB9XG4gICAgICB2YXIgY3R4MSA9IGNhbnZhczEuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgICAgICBjdHgyID0gY2FudmFzMi5nZXRDb250ZXh0KCcyZCcpLFxuICAgICAgICAgIG5TYW1wbGVzID0gMTUsXG4gICAgICAgICAgcmFuZG9tLCBwZXJjZW50LCBqLCBpLFxuICAgICAgICAgIGJsdXIgPSB0aGlzLmJsdXIgKiAwLjA2ICogMC41O1xuXG4gICAgICAvLyBsb2FkIGZpcnN0IGNhbnZhc1xuICAgICAgY3R4MS5wdXRJbWFnZURhdGEob3B0aW9ucy5pbWFnZURhdGEsIDAsIDApO1xuICAgICAgY3R4Mi5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cbiAgICAgIGZvciAoaSA9IC1uU2FtcGxlczsgaSA8PSBuU2FtcGxlczsgaSsrKSB7XG4gICAgICAgIHJhbmRvbSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAvIDQ7XG4gICAgICAgIHBlcmNlbnQgPSBpIC8gblNhbXBsZXM7XG4gICAgICAgIGogPSBibHVyICogcGVyY2VudCAqIHdpZHRoICsgcmFuZG9tO1xuICAgICAgICBjdHgyLmdsb2JhbEFscGhhID0gMSAtIE1hdGguYWJzKHBlcmNlbnQpO1xuICAgICAgICBjdHgyLmRyYXdJbWFnZShjYW52YXMxLCBqLCByYW5kb20pO1xuICAgICAgICBjdHgxLmRyYXdJbWFnZShjYW52YXMyLCAwLCAwKTtcbiAgICAgICAgY3R4Mi5nbG9iYWxBbHBoYSA9IDE7XG4gICAgICAgIGN0eDIuY2xlYXJSZWN0KDAsIDAsIGNhbnZhczIud2lkdGgsIGNhbnZhczIuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IC1uU2FtcGxlczsgaSA8PSBuU2FtcGxlczsgaSsrKSB7XG4gICAgICAgIHJhbmRvbSA9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAvIDQ7XG4gICAgICAgIHBlcmNlbnQgPSBpIC8gblNhbXBsZXM7XG4gICAgICAgIGogPSBibHVyICogcGVyY2VudCAqIGhlaWdodCArIHJhbmRvbTtcbiAgICAgICAgY3R4Mi5nbG9iYWxBbHBoYSA9IDEgLSBNYXRoLmFicyhwZXJjZW50KTtcbiAgICAgICAgY3R4Mi5kcmF3SW1hZ2UoY2FudmFzMSwgcmFuZG9tLCBqKTtcbiAgICAgICAgY3R4MS5kcmF3SW1hZ2UoY2FudmFzMiwgMCwgMCk7XG4gICAgICAgIGN0eDIuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgICBjdHgyLmNsZWFyUmVjdCgwLCAwLCBjYW52YXMyLndpZHRoLCBjYW52YXMyLmhlaWdodCk7XG4gICAgICB9XG4gICAgICBvcHRpb25zLmN0eC5kcmF3SW1hZ2UoY2FudmFzMSwgMCwgMCk7XG4gICAgICB2YXIgbmV3SW1hZ2VEYXRhID0gb3B0aW9ucy5jdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhczEud2lkdGgsIGNhbnZhczEuaGVpZ2h0KTtcbiAgICAgIGN0eDEuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgY3R4MS5jbGVhclJlY3QoMCwgMCwgY2FudmFzMS53aWR0aCwgY2FudmFzMS5oZWlnaHQpO1xuICAgICAgcmV0dXJuIG5ld0ltYWdlRGF0YTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIFdlYkdMIHVuaWZvcm0gbG9jYXRpb25zIGZvciB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7V2ViR0xTaGFkZXJQcm9ncmFtfSBwcm9ncmFtIFRoaXMgZmlsdGVyJ3MgY29tcGlsZWQgc2hhZGVyIHByb2dyYW0uXG4gICAgICovXG4gICAgZ2V0VW5pZm9ybUxvY2F0aW9uczogZnVuY3Rpb24oZ2wsIHByb2dyYW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlbHRhOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VEZWx0YScpLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIGZyb20gdGhpcyBmaWx0ZXIgdG8gaXRzIHNoYWRlciBwcm9ncmFtJ3MgdW5pZm9ybXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdW5pZm9ybUxvY2F0aW9ucyBBIG1hcCBvZiBzdHJpbmcgdW5pZm9ybSBuYW1lcyB0byBXZWJHTFVuaWZvcm1Mb2NhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgc2VuZFVuaWZvcm1EYXRhOiBmdW5jdGlvbihnbCwgdW5pZm9ybUxvY2F0aW9ucykge1xuICAgICAgdmFyIGRlbHRhID0gdGhpcy5jaG9vc2VSaWdodERlbHRhKCk7XG4gICAgICBnbC51bmlmb3JtMmZ2KHVuaWZvcm1Mb2NhdGlvbnMuZGVsdGEsIGRlbHRhKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2hvb3NlIHJpZ2h0IHZhbHVlIG9mIGltYWdlIHBlcmNlbnRhZ2UgdG8gYmx1ciB3aXRoXG4gICAgICogQHJldHVybnMge0FycmF5fSBhIG51bWVyaWMgYXJyYXkgd2l0aCBkZWx0YSB2YWx1ZXNcbiAgICAgKi9cbiAgICBjaG9vc2VSaWdodERlbHRhOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBibHVyU2NhbGUgPSAxLCBkZWx0YSA9IFswLCAwXSwgYmx1cjtcbiAgICAgIGlmICh0aGlzLmhvcml6b250YWwpIHtcbiAgICAgICAgaWYgKHRoaXMuYXNwZWN0UmF0aW8gPiAxKSB7XG4gICAgICAgICAgLy8gaW1hZ2UgaXMgd2lkZSwgaSB3YW50IHRvIHNocmluayByYWRpdXMgaG9yaXpvbnRhbFxuICAgICAgICAgIGJsdXJTY2FsZSA9IDEgLyB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuYXNwZWN0UmF0aW8gPCAxKSB7XG4gICAgICAgICAgLy8gaW1hZ2UgaXMgdGFsbCwgaSB3YW50IHRvIHNocmluayByYWRpdXMgdmVydGljYWxcbiAgICAgICAgICBibHVyU2NhbGUgPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBibHVyID0gYmx1clNjYWxlICogdGhpcy5ibHVyICogMC4xMjtcbiAgICAgIGlmICh0aGlzLmhvcml6b250YWwpIHtcbiAgICAgICAgZGVsdGFbMF0gPSBibHVyO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGRlbHRhWzFdID0gYmx1cjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWx0YTtcbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogRGVzZXJpYWxpemUgYSBKU09OIGRlZmluaXRpb24gb2YgYSBCbHVyRmlsdGVyIGludG8gYSBjb25jcmV0ZSBpbnN0YW5jZS5cbiAgICovXG4gIGZpbHRlcnMuQmx1ci5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljICA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7IH0pLFxuICAgICAgZmlsdGVycyA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLFxuICAgICAgY3JlYXRlQ2xhc3MgPSBmYWJyaWMudXRpbC5jcmVhdGVDbGFzcztcblxuICAvKipcbiAgICogR2FtbWEgZmlsdGVyIGNsYXNzXG4gICAqIEBjbGFzcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5HYW1tYVxuICAgKiBAbWVtYmVyT2YgZmFicmljLkltYWdlLmZpbHRlcnNcbiAgICogQGV4dGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlclxuICAgKiBAc2VlIHtAbGluayBmYWJyaWMuSW1hZ2UuZmlsdGVycy5HYW1tYSNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKiBAc2VlIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ltYWdlLWZpbHRlcnN8SW1hZ2VGaWx0ZXJzIGRlbW99XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBmaWx0ZXIgPSBuZXcgZmFicmljLkltYWdlLmZpbHRlcnMuR2FtbWEoe1xuICAgKiAgIGdhbW1hOiBbMSwgMC41LCAyLjFdXG4gICAqIH0pO1xuICAgKiBvYmplY3QuZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gICAqIG9iamVjdC5hcHBseUZpbHRlcnMoKTtcbiAgICovXG4gIGZpbHRlcnMuR2FtbWEgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuR2FtbWEucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEZpbHRlciB0eXBlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdHYW1tYScsXG5cbiAgICBmcmFnbWVudFNvdXJjZTogJ3ByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4nICtcbiAgICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1VGV4dHVyZTtcXG4nICtcbiAgICAgICd1bmlmb3JtIHZlYzMgdUdhbW1hO1xcbicgK1xuICAgICAgJ3ZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7XFxuJyArXG4gICAgICAndm9pZCBtYWluKCkge1xcbicgK1xuICAgICAgICAndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1VGV4dHVyZSwgdlRleENvb3JkKTtcXG4nICtcbiAgICAgICAgJ3ZlYzMgY29ycmVjdGlvbiA9ICgxLjAgLyB1R2FtbWEpO1xcbicgK1xuICAgICAgICAnY29sb3IuciA9IHBvdyhjb2xvci5yLCBjb3JyZWN0aW9uLnIpO1xcbicgK1xuICAgICAgICAnY29sb3IuZyA9IHBvdyhjb2xvci5nLCBjb3JyZWN0aW9uLmcpO1xcbicgK1xuICAgICAgICAnY29sb3IuYiA9IHBvdyhjb2xvci5iLCBjb3JyZWN0aW9uLmIpO1xcbicgK1xuICAgICAgICAnZ2xfRnJhZ0NvbG9yID0gY29sb3I7XFxuJyArXG4gICAgICAgICdnbF9GcmFnQ29sb3IucmdiICo9IGNvbG9yLmE7XFxuJyArXG4gICAgICAnfScsXG5cbiAgICAvKipcbiAgICAgKiBHYW1tYSBhcnJheSB2YWx1ZSwgZnJvbSAwLjAxIHRvIDIuMi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBnYW1tYVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZ2FtbWE6IFsxLCAxLCAxXSxcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlIHRoZSBwcm9wZXJ0eSB0aGF0IGlzIHRoZSBmaWx0ZXIgcGFyYW1ldGVyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG1haW5QYXJhbWV0ZXI6ICdnYW1tYScsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB0aGlzLmdhbW1hID0gWzEsIDEsIDFdO1xuICAgICAgZmlsdGVycy5CYXNlRmlsdGVyLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoZSBHYW1tYSBvcGVyYXRpb24gdG8gYSBVaW50OEFycmF5IHJlcHJlc2VudGluZyB0aGUgcGl4ZWxzIG9mIGFuIGltYWdlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0ltYWdlRGF0YX0gb3B0aW9ucy5pbWFnZURhdGEgVGhlIFVpbnQ4QXJyYXkgdG8gYmUgZmlsdGVyZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzJkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgaW1hZ2VEYXRhID0gb3B0aW9ucy5pbWFnZURhdGEsIGRhdGEgPSBpbWFnZURhdGEuZGF0YSxcbiAgICAgICAgICBnYW1tYSA9IHRoaXMuZ2FtbWEsIGxlbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICAgIHJJbnYgPSAxIC8gZ2FtbWFbMF0sIGdJbnYgPSAxIC8gZ2FtbWFbMV0sXG4gICAgICAgICAgYkludiA9IDEgLyBnYW1tYVsyXSwgaTtcblxuICAgICAgaWYgKCF0aGlzLnJWYWxzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB0aGlzLnJWYWxzID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHRoaXMuZ1ZhbHMgPSBuZXcgVWludDhBcnJheSgyNTYpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgdGhpcy5iVmFscyA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gICAgICB9XG5cbiAgICAgIC8vIFRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIC0gcHJlLWNvbXB1dGUgYSBsb29rLXVwIHRhYmxlIGZvciBlYWNoIGNvbG9yIGNoYW5uZWxcbiAgICAgIC8vIGluc3RlYWQgb2YgcGVyZm9ybWluZyB0aGVzZSBwb3cgY2FsbHMgZm9yIGVhY2ggcGl4ZWwgaW4gdGhlIGltYWdlLlxuICAgICAgZm9yIChpID0gMCwgbGVuID0gMjU2OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdGhpcy5yVmFsc1tpXSA9IE1hdGgucG93KGkgLyAyNTUsIHJJbnYpICogMjU1O1xuICAgICAgICB0aGlzLmdWYWxzW2ldID0gTWF0aC5wb3coaSAvIDI1NSwgZ0ludikgKiAyNTU7XG4gICAgICAgIHRoaXMuYlZhbHNbaV0gPSBNYXRoLnBvdyhpIC8gMjU1LCBiSW52KSAqIDI1NTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IGRhdGEubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICAgICAgZGF0YVtpXSA9IHRoaXMuclZhbHNbZGF0YVtpXV07XG4gICAgICAgIGRhdGFbaSArIDFdID0gdGhpcy5nVmFsc1tkYXRhW2kgKyAxXV07XG4gICAgICAgIGRhdGFbaSArIDJdID0gdGhpcy5iVmFsc1tkYXRhW2kgKyAyXV07XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybiBXZWJHTCB1bmlmb3JtIGxvY2F0aW9ucyBmb3IgdGhpcyBmaWx0ZXIncyBzaGFkZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1dlYkdMUmVuZGVyaW5nQ29udGV4dH0gZ2wgVGhlIEdMIGNhbnZhcyBjb250ZXh0IHVzZWQgdG8gY29tcGlsZSB0aGlzIGZpbHRlcidzIHNoYWRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMU2hhZGVyUHJvZ3JhbX0gcHJvZ3JhbSBUaGlzIGZpbHRlcidzIGNvbXBpbGVkIHNoYWRlciBwcm9ncmFtLlxuICAgICAqL1xuICAgIGdldFVuaWZvcm1Mb2NhdGlvbnM6IGZ1bmN0aW9uKGdsLCBwcm9ncmFtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1R2FtbWE6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndUdhbW1hJyksXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGRhdGEgZnJvbSB0aGlzIGZpbHRlciB0byBpdHMgc2hhZGVyIHByb2dyYW0ncyB1bmlmb3Jtcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBnbCBUaGUgR0wgY2FudmFzIGNvbnRleHQgdXNlZCB0byBjb21waWxlIHRoaXMgZmlsdGVyJ3Mgc2hhZGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB1bmlmb3JtTG9jYXRpb25zIEEgbWFwIG9mIHN0cmluZyB1bmlmb3JtIG5hbWVzIHRvIFdlYkdMVW5pZm9ybUxvY2F0aW9uIG9iamVjdHNcbiAgICAgKi9cbiAgICBzZW5kVW5pZm9ybURhdGE6IGZ1bmN0aW9uKGdsLCB1bmlmb3JtTG9jYXRpb25zKSB7XG4gICAgICBnbC51bmlmb3JtM2Z2KHVuaWZvcm1Mb2NhdGlvbnMudUdhbW1hLCB0aGlzLmdhbW1hKTtcbiAgICB9LFxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmaWx0ZXIgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIHRvIGJlIGludm9rZWQgYWZ0ZXIgZmlsdGVyIGNyZWF0aW9uXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5JbWFnZS5maWx0ZXJzLkdhbW1hfSBJbnN0YW5jZSBvZiBmYWJyaWMuSW1hZ2UuZmlsdGVycy5HYW1tYVxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuR2FtbWEuZnJvbU9iamVjdCA9IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXIuZnJvbU9iamVjdDtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIEEgY29udGFpbmVyIGNsYXNzIHRoYXQga25vd3MgaG93IHRvIGFwcGx5IGEgc2VxdWVuY2Ugb2YgZmlsdGVycyB0byBhbiBpbnB1dCBpbWFnZS5cbiAgICovXG4gIGZpbHRlcnMuQ29tcG9zZWQgPSBjcmVhdGVDbGFzcyhmaWx0ZXJzLkJhc2VGaWx0ZXIsIC8qKiBAbGVuZHMgZmFicmljLkltYWdlLmZpbHRlcnMuQ29tcG9zZWQucHJvdG90eXBlICovIHtcblxuICAgIHR5cGU6ICdDb21wb3NlZCcsXG5cbiAgICAvKipcbiAgICAgKiBBIG5vbiBzcGFyc2UgYXJyYXkgb2YgZmlsdGVycyB0byBhcHBseVxuICAgICAqL1xuICAgIHN1YkZpbHRlcnM6IFtdLFxuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhcnJheSBpbnN0ZWFkIG11dGF0aW5nIHRoZSBwcm90b3R5cGUgd2l0aCBwdXNoXG4gICAgICB0aGlzLnN1YkZpbHRlcnMgPSB0aGlzLnN1YkZpbHRlcnMuc2xpY2UoMCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoaXMgY29udGFpbmVyJ3MgZmlsdGVycyB0byB0aGUgaW5wdXQgaW1hZ2UgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhc3NlcyBUaGUgbnVtYmVyIG9mIGZpbHRlcnMgcmVtYWluaW5nIHRvIGJlIGFwcGxpZWQuXG4gICAgICovXG4gICAgYXBwbHlUbzogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucy5wYXNzZXMgKz0gdGhpcy5zdWJGaWx0ZXJzLmxlbmd0aCAtIDE7XG4gICAgICB0aGlzLnN1YkZpbHRlcnMuZm9yRWFjaChmdW5jdGlvbihmaWx0ZXIpIHtcbiAgICAgICAgZmlsdGVyLmFwcGx5VG8ob3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIHRoaXMgZmlsdGVyIGludG8gSlNPTi5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IEEgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGZpbHRlci5cbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh0aGlzLmNhbGxTdXBlcigndG9PYmplY3QnKSwge1xuICAgICAgICBzdWJGaWx0ZXJzOiB0aGlzLnN1YkZpbHRlcnMubWFwKGZ1bmN0aW9uKGZpbHRlcikgeyByZXR1cm4gZmlsdGVyLnRvT2JqZWN0KCk7IH0pLFxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGlzTmV1dHJhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhdGhpcy5zdWJGaWx0ZXJzLnNvbWUoZnVuY3Rpb24oZmlsdGVyKSB7IHJldHVybiAhZmlsdGVyLmlzTmV1dHJhbFN0YXRlKCk7IH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIERlc2VyaWFsaXplIGEgSlNPTiBkZWZpbml0aW9uIG9mIGEgQ29tcG9zZWRGaWx0ZXIgaW50byBhIGNvbmNyZXRlIGluc3RhbmNlLlxuICAgKi9cbiAgZmFicmljLkltYWdlLmZpbHRlcnMuQ29tcG9zZWQuZnJvbU9iamVjdCA9IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZmlsdGVycyA9IG9iamVjdC5zdWJGaWx0ZXJzIHx8IFtdLFxuICAgICAgICBzdWJGaWx0ZXJzID0gZmlsdGVycy5tYXAoZnVuY3Rpb24oZmlsdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBmYWJyaWMuSW1hZ2UuZmlsdGVyc1tmaWx0ZXIudHlwZV0oZmlsdGVyKTtcbiAgICAgICAgfSksXG4gICAgICAgIGluc3RhbmNlID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkNvbXBvc2VkKHsgc3ViRmlsdGVyczogc3ViRmlsdGVycyB9KTtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhpbnN0YW5jZSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IHRoaXMpO1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyAgPSBnbG9iYWwuZmFicmljIHx8IChnbG9iYWwuZmFicmljID0geyB9KSxcbiAgICAgIGZpbHRlcnMgPSBmYWJyaWMuSW1hZ2UuZmlsdGVycyxcbiAgICAgIGNyZWF0ZUNsYXNzID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3M7XG5cbiAgLyoqXG4gICAqIEh1ZVJvdGF0aW9uIGZpbHRlciBjbGFzc1xuICAgKiBAY2xhc3MgZmFicmljLkltYWdlLmZpbHRlcnMuSHVlUm90YXRpb25cbiAgICogQG1lbWJlck9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzXG4gICAqIEBleHRlbmRzIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkJhc2VGaWx0ZXJcbiAgICogQHNlZSB7QGxpbmsgZmFicmljLkltYWdlLmZpbHRlcnMuSHVlUm90YXRpb24jaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICogQHNlZSB7QGxpbmsgaHR0cDovL2ZhYnJpY2pzLmNvbS9pbWFnZS1maWx0ZXJzfEltYWdlRmlsdGVycyBkZW1vfVxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgZmlsdGVyID0gbmV3IGZhYnJpYy5JbWFnZS5maWx0ZXJzLkh1ZVJvdGF0aW9uKHtcbiAgICogICByb3RhdGlvbjogLTAuNVxuICAgKiB9KTtcbiAgICogb2JqZWN0LmZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICAgKiBvYmplY3QuYXBwbHlGaWx0ZXJzKCk7XG4gICAqL1xuICBmaWx0ZXJzLkh1ZVJvdGF0aW9uID0gY3JlYXRlQ2xhc3MoZmlsdGVycy5Db2xvck1hdHJpeCwgLyoqIEBsZW5kcyBmYWJyaWMuSW1hZ2UuZmlsdGVycy5IdWVSb3RhdGlvbi5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogRmlsdGVyIHR5cGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdHlwZTogJ0h1ZVJvdGF0aW9uJyxcblxuICAgIC8qKlxuICAgICAqIEh1ZVJvdGF0aW9uIHZhbHVlLCBmcm9tIC0xIHRvIDEuXG4gICAgICogdGhlIHVuaXQgaXMgcmFkaWFuc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBteVBhcmFtZXRlclxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgcm90YXRpb246IDAsXG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmliZSB0aGUgcHJvcGVydHkgdGhhdCBpcyB0aGUgZmlsdGVyIHBhcmFtZXRlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBtYWluUGFyYW1ldGVyOiAncm90YXRpb24nLFxuXG4gICAgY2FsY3VsYXRlTWF0cml4OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByYWQgPSB0aGlzLnJvdGF0aW9uICogTWF0aC5QSSwgY29zID0gZmFicmljLnV0aWwuY29zKHJhZCksIHNpbiA9IGZhYnJpYy51dGlsLnNpbihyYWQpLFxuICAgICAgICAgIGFUaGlyZCA9IDEgLyAzLCBhVGhpcmRTcXRTaW4gPSBNYXRoLnNxcnQoYVRoaXJkKSAqIHNpbiwgT25lTWludXNDb3MgPSAxIC0gY29zO1xuICAgICAgdGhpcy5tYXRyaXggPSBbXG4gICAgICAgIDEsIDAsIDAsIDAsIDAsXG4gICAgICAgIDAsIDEsIDAsIDAsIDAsXG4gICAgICAgIDAsIDAsIDEsIDAsIDAsXG4gICAgICAgIDAsIDAsIDAsIDEsIDBcbiAgICAgIF07XG4gICAgICB0aGlzLm1hdHJpeFswXSA9IGNvcyArIE9uZU1pbnVzQ29zIC8gMztcbiAgICAgIHRoaXMubWF0cml4WzFdID0gYVRoaXJkICogT25lTWludXNDb3MgLSBhVGhpcmRTcXRTaW47XG4gICAgICB0aGlzLm1hdHJpeFsyXSA9IGFUaGlyZCAqIE9uZU1pbnVzQ29zICsgYVRoaXJkU3F0U2luO1xuICAgICAgdGhpcy5tYXRyaXhbNV0gPSBhVGhpcmQgKiBPbmVNaW51c0NvcyArIGFUaGlyZFNxdFNpbjtcbiAgICAgIHRoaXMubWF0cml4WzZdID0gY29zICsgYVRoaXJkICogT25lTWludXNDb3M7XG4gICAgICB0aGlzLm1hdHJpeFs3XSA9IGFUaGlyZCAqIE9uZU1pbnVzQ29zIC0gYVRoaXJkU3F0U2luO1xuICAgICAgdGhpcy5tYXRyaXhbMTBdID0gYVRoaXJkICogT25lTWludXNDb3MgLSBhVGhpcmRTcXRTaW47XG4gICAgICB0aGlzLm1hdHJpeFsxMV0gPSBhVGhpcmQgKiBPbmVNaW51c0NvcyArIGFUaGlyZFNxdFNpbjtcbiAgICAgIHRoaXMubWF0cml4WzEyXSA9IGNvcyArIGFUaGlyZCAqIE9uZU1pbnVzQ29zO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIdWVSb3RhdGlvbiBpc05ldXRyYWxTdGF0ZSBpbXBsZW1lbnRhdGlvblxuICAgICAqIFVzZWQgb25seSBpbiBpbWFnZSBhcHBseUZpbHRlcnMgdG8gZGlzY2FyZCBmaWx0ZXJzIHRoYXQgd2lsbCBub3QgaGF2ZSBhbiBlZmZlY3RcbiAgICAgKiBvbiB0aGUgaW1hZ2VcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqKi9cbiAgICBpc05ldXRyYWxTdGF0ZTogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdGhpcy5jYWxjdWxhdGVNYXRyaXgoKTtcbiAgICAgIHJldHVybiBmaWx0ZXJzLkJhc2VGaWx0ZXIucHJvdG90eXBlLmlzTmV1dHJhbFN0YXRlLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHRoaXMgZmlsdGVyIHRvIHRoZSBpbnB1dCBpbWFnZSBkYXRhIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHVzZSBXZWJHTCBvciBDYW52YXMyRCBiYXNlZCBvbiB0aGUgb3B0aW9ucy53ZWJnbCBmbGFnLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5wYXNzZXMgVGhlIG51bWJlciBvZiBmaWx0ZXJzIHJlbWFpbmluZyB0byBiZSBleGVjdXRlZFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy53ZWJnbCBXaGV0aGVyIHRvIHVzZSB3ZWJnbCB0byByZW5kZXIgdGhlIGZpbHRlci5cbiAgICAgKiBAcGFyYW0ge1dlYkdMVGV4dHVyZX0gb3B0aW9ucy5zb3VyY2VUZXh0dXJlIFRoZSB0ZXh0dXJlIHNldHVwIGFzIHRoZSBzb3VyY2UgdG8gYmUgZmlsdGVyZWQuXG4gICAgICogQHBhcmFtIHtXZWJHTFRleHR1cmV9IG9wdGlvbnMudGFyZ2V0VGV4dHVyZSBUaGUgdGV4dHVyZSB3aGVyZSBmaWx0ZXJlZCBvdXRwdXQgc2hvdWxkIGJlIGRyYXduLlxuICAgICAqIEBwYXJhbSB7V2ViR0xSZW5kZXJpbmdDb250ZXh0fSBvcHRpb25zLmNvbnRleHQgVGhlIEdMIGNvbnRleHQgdXNlZCBmb3IgcmVuZGVyaW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnByb2dyYW1DYWNoZSBBIG1hcCBvZiBjb21waWxlZCBzaGFkZXIgcHJvZ3JhbXMsIGtleWVkIGJ5IGZpbHRlciB0eXBlLlxuICAgICAqL1xuICAgIGFwcGx5VG86IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlTWF0cml4KCk7XG4gICAgICBmaWx0ZXJzLkJhc2VGaWx0ZXIucHJvdG90eXBlLmFwcGx5VG8uY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGZpbHRlciBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gdG8gYmUgaW52b2tlZCBhZnRlciBmaWx0ZXIgY3JlYXRpb25cbiAgICogQHJldHVybiB7ZmFicmljLkltYWdlLmZpbHRlcnMuSHVlUm90YXRpb259IEluc3RhbmNlIG9mIGZhYnJpYy5JbWFnZS5maWx0ZXJzLkh1ZVJvdGF0aW9uXG4gICAqL1xuICBmYWJyaWMuSW1hZ2UuZmlsdGVycy5IdWVSb3RhdGlvbi5mcm9tT2JqZWN0ID0gZmFicmljLkltYWdlLmZpbHRlcnMuQmFzZUZpbHRlci5mcm9tT2JqZWN0O1xuXG59KSh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcgPyBleHBvcnRzIDogdGhpcyk7XG5cblxuKGZ1bmN0aW9uKGdsb2JhbCkge1xuXG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZmFicmljID0gZ2xvYmFsLmZhYnJpYyB8fCAoZ2xvYmFsLmZhYnJpYyA9IHsgfSksXG4gICAgICBjbG9uZSA9IGZhYnJpYy51dGlsLm9iamVjdC5jbG9uZTtcblxuICBpZiAoZmFicmljLlRleHQpIHtcbiAgICBmYWJyaWMud2FybignZmFicmljLlRleHQgaXMgYWxyZWFkeSBkZWZpbmVkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGFkZGl0aW9uYWxQcm9wcyA9XG4gICAgKCdmb250RmFtaWx5IGZvbnRXZWlnaHQgZm9udFNpemUgdGV4dCB1bmRlcmxpbmUgb3ZlcmxpbmUgbGluZXRocm91Z2gnICtcbiAgICAnIHRleHRBbGlnbiBmb250U3R5bGUgbGluZUhlaWdodCB0ZXh0QmFja2dyb3VuZENvbG9yIGNoYXJTcGFjaW5nIHN0eWxlcycgK1xuICAgICcgZGlyZWN0aW9uIHBhdGggcGF0aFN0YXJ0T2Zmc2V0IHBhdGhTaWRlIHBhdGhBbGlnbicpLnNwbGl0KCcgJyk7XG5cbiAgLyoqXG4gICAqIFRleHQgY2xhc3NcbiAgICogQGNsYXNzIGZhYnJpYy5UZXh0XG4gICAqIEBleHRlbmRzIGZhYnJpYy5PYmplY3RcbiAgICogQHJldHVybiB7ZmFicmljLlRleHR9IHRoaXNBcmdcbiAgICogQHR1dG9yaWFsIHtAbGluayBodHRwOi8vZmFicmljanMuY29tL2ZhYnJpYy1pbnRyby1wYXJ0LTIjdGV4dH1cbiAgICogQHNlZSB7QGxpbmsgZmFicmljLlRleHQjaW5pdGlhbGl6ZX0gZm9yIGNvbnN0cnVjdG9yIGRlZmluaXRpb25cbiAgICovXG4gIGZhYnJpYy5UZXh0ID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLk9iamVjdCwgLyoqIEBsZW5kcyBmYWJyaWMuVGV4dC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyB3aGljaCB3aGVuIHNldCBjYXVzZSBvYmplY3QgdG8gY2hhbmdlIGRpbWVuc2lvbnNcbiAgICAgKiBAdHlwZSBBcnJheVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RpbWVuc2lvbkFmZmVjdGluZ1Byb3BzOiBbXG4gICAgICAnZm9udFNpemUnLFxuICAgICAgJ2ZvbnRXZWlnaHQnLFxuICAgICAgJ2ZvbnRGYW1pbHknLFxuICAgICAgJ2ZvbnRTdHlsZScsXG4gICAgICAnbGluZUhlaWdodCcsXG4gICAgICAndGV4dCcsXG4gICAgICAnY2hhclNwYWNpbmcnLFxuICAgICAgJ3RleHRBbGlnbicsXG4gICAgICAnc3R5bGVzJyxcbiAgICAgICdwYXRoJyxcbiAgICAgICdwYXRoU3RhcnRPZmZzZXQnLFxuICAgICAgJ3BhdGhTaWRlJyxcbiAgICAgICdwYXRoQWxpZ24nXG4gICAgXSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlTmV3bGluZTogL1xccj9cXG4vLFxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgcmVndWxhciBleHByZXNzaW9uIHRvIGZpbHRlciBmb3Igd2hpdGVzcGFjZXMgdGhhdCBpcyBub3QgYSBuZXcgbGluZS5cbiAgICAgKiBNb3N0bHkgdXNlZCB3aGVuIHRleHQgaXMgJ2p1c3RpZnknIGFsaWduZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVTcGFjZXNBbmRUYWJzOiAvWyBcXHRcXHJdL2csXG5cbiAgICAvKipcbiAgICAgKiBVc2UgdGhpcyByZWd1bGFyIGV4cHJlc3Npb24gdG8gZmlsdGVyIGZvciB3aGl0ZXNwYWNlIHRoYXQgaXMgbm90IGEgbmV3IGxpbmUuXG4gICAgICogTW9zdGx5IHVzZWQgd2hlbiB0ZXh0IGlzICdqdXN0aWZ5JyBhbGlnbmVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlU3BhY2VBbmRUYWI6IC9bIFxcdFxccl0vLFxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgcmVndWxhciBleHByZXNzaW9uIHRvIGZpbHRlciBjb25zZWN1dGl2ZSBncm91cHMgb2Ygbm9uIHNwYWNlcy5cbiAgICAgKiBNb3N0bHkgdXNlZCB3aGVuIHRleHQgaXMgJ2p1c3RpZnknIGFsaWduZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVXb3JkczogL1xcUysvZyxcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAgICAgICAgICAgICAgICAgJ3RleHQnLFxuXG4gICAgLyoqXG4gICAgICogRm9udCBzaXplIChpbiBwaXhlbHMpXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBmb250U2l6ZTogICAgICAgICAgICAgNDAsXG5cbiAgICAvKipcbiAgICAgKiBGb250IHdlaWdodCAoZS5nLiBib2xkLCBub3JtYWwsIDQwMCwgNjAwLCA4MDApXG4gICAgICogQHR5cGUgeyhOdW1iZXJ8U3RyaW5nKX1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGZvbnRXZWlnaHQ6ICAgICAgICAgICAnbm9ybWFsJyxcblxuICAgIC8qKlxuICAgICAqIEZvbnQgZmFtaWx5XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBmb250RmFtaWx5OiAgICAgICAgICAgJ1RpbWVzIE5ldyBSb21hbicsXG5cbiAgICAvKipcbiAgICAgKiBUZXh0IGRlY29yYXRpb24gdW5kZXJsaW5lLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHVuZGVybGluZTogICAgICAgZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUZXh0IGRlY29yYXRpb24gb3ZlcmxpbmUuXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgb3ZlcmxpbmU6ICAgICAgIGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogVGV4dCBkZWNvcmF0aW9uIGxpbmV0aHJvdWdoLlxuICAgICAqIEB0eXBlIEJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxpbmV0aHJvdWdoOiAgICAgICBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFRleHQgYWxpZ25tZW50LiBQb3NzaWJsZSB2YWx1ZXM6IFwibGVmdFwiLCBcImNlbnRlclwiLCBcInJpZ2h0XCIsIFwianVzdGlmeVwiLFxuICAgICAqIFwianVzdGlmeS1sZWZ0XCIsIFwianVzdGlmeS1jZW50ZXJcIiBvciBcImp1c3RpZnktcmlnaHRcIi5cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRleHRBbGlnbjogICAgICAgICAgICAnbGVmdCcsXG5cbiAgICAvKipcbiAgICAgKiBGb250IHN0eWxlIC4gUG9zc2libGUgdmFsdWVzOiBcIlwiLCBcIm5vcm1hbFwiLCBcIml0YWxpY1wiIG9yIFwib2JsaXF1ZVwiLlxuICAgICAqIEB0eXBlIFN0cmluZ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZm9udFN0eWxlOiAgICAgICAgICAgICdub3JtYWwnLFxuXG4gICAgLyoqXG4gICAgICogTGluZSBoZWlnaHRcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGxpbmVIZWlnaHQ6ICAgICAgICAgICAxLjE2LFxuXG4gICAgLyoqXG4gICAgICogU3VwZXJzY3JpcHQgc2NoZW1hIG9iamVjdCAobWluaW11bSBvdmVybGFwKVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdXBlcnNjcmlwdDoge1xuICAgICAgc2l6ZTogICAgICAwLjYwLCAvLyBmb250U2l6ZSBmYWN0b3JcbiAgICAgIGJhc2VsaW5lOiAtMC4zNSAgLy8gYmFzZWxpbmUtc2hpZnQgZmFjdG9yICh1cHdhcmRzKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdWJzY3JpcHQgc2NoZW1hIG9iamVjdCAobWluaW11bSBvdmVybGFwKVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdWJzY3JpcHQ6IHtcbiAgICAgIHNpemU6ICAgICAgMC42MCwgLy8gZm9udFNpemUgZmFjdG9yXG4gICAgICBiYXNlbGluZTogIDAuMTEgIC8vIGJhc2VsaW5lLXNoaWZ0IGZhY3RvciAoZG93bndhcmRzKVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBCYWNrZ3JvdW5kIGNvbG9yIG9mIHRleHQgbGluZXNcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRleHRCYWNrZ3JvdW5kQ29sb3I6ICAnJyxcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgcHJvcGVydGllcyB0byBjb25zaWRlciB3aGVuIGNoZWNraW5nIGlmXG4gICAgICogc3RhdGUgb2YgYW4gb2JqZWN0IGlzIGNoYW5nZWQgKHtAbGluayBmYWJyaWMuT2JqZWN0I2hhc1N0YXRlQ2hhbmdlZH0pXG4gICAgICogYXMgd2VsbCBhcyBmb3IgaGlzdG9yeSAodW5kby9yZWRvKSBwdXJwb3Nlc1xuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICovXG4gICAgc3RhdGVQcm9wZXJ0aWVzOiBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5zdGF0ZVByb3BlcnRpZXMuY29uY2F0KGFkZGl0aW9uYWxQcm9wcyksXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHByb3BlcnRpZXMgdG8gY29uc2lkZXIgd2hlbiBjaGVja2luZyBpZiBjYWNoZSBuZWVkcyByZWZyZXNoXG4gICAgICogQHR5cGUgQXJyYXlcbiAgICAgKi9cbiAgICBjYWNoZVByb3BlcnRpZXM6IGZhYnJpYy5PYmplY3QucHJvdG90eXBlLmNhY2hlUHJvcGVydGllcy5jb25jYXQoYWRkaXRpb25hbFByb3BzKSxcblxuICAgIC8qKlxuICAgICAqIFdoZW4gZGVmaW5lZCwgYW4gb2JqZWN0IGlzIHJlbmRlcmVkIHZpYSBzdHJva2UgYW5kIHRoaXMgcHJvcGVydHkgc3BlY2lmaWVzIGl0cyBjb2xvci5cbiAgICAgKiA8Yj5CYWNrd2FyZHMgaW5jb21wYXRpYmlsaXR5IG5vdGU6PC9iPiBUaGlzIHByb3BlcnR5IHdhcyBuYW1lZCBcInN0cm9rZVN0eWxlXCIgdW50aWwgdjEuMS42XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdHJva2U6ICAgICAgICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIFNoYWRvdyBvYmplY3QgcmVwcmVzZW50aW5nIHNoYWRvdyBvZiB0aGlzIHNoYXBlLlxuICAgICAqIDxiPkJhY2t3YXJkcyBpbmNvbXBhdGliaWxpdHkgbm90ZTo8L2I+IFRoaXMgcHJvcGVydHkgd2FzIG5hbWVkIFwidGV4dFNoYWRvd1wiIChTdHJpbmcpIHVudGlsIHYxLjIuMTFcbiAgICAgKiBAdHlwZSBmYWJyaWMuU2hhZG93XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzaGFkb3c6ICAgICAgICAgICAgICAgbnVsbCxcblxuICAgIC8qKlxuICAgICAqIGZhYnJpYy5QYXRoIHRoYXQgdGhlIHRleHQgc2hvdWxkIGZvbGxvdy5cbiAgICAgKiBzaW5jZSA0LjYuMCB0aGUgcGF0aCB3aWxsIGJlIGRyYXduIGF1dG9tYXRpY2FsbHkuXG4gICAgICogaWYgeW91IHdhbnQgdG8gbWFrZSB0aGUgcGF0aCB2aXNpYmxlLCBnaXZlIGl0IGEgc3Ryb2tlIGFuZCBzdHJva2VXaWR0aCBvciBmaWxsIHZhbHVlXG4gICAgICogaWYgeW91IHdhbnQgaXQgdG8gYmUgaGlkZGVuLCBhc3NpZ24gdmlzaWJsZSA9IGZhbHNlIHRvIHRoZSBwYXRoLlxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBpbiBCRVRBLCBhbmQgU1ZHIGltcG9ydC9leHBvcnQgaXMgbm90IHlldCBzdXBwb3J0ZWQuXG4gICAgICogQHR5cGUgZmFicmljLlBhdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciB0ZXh0UGF0aCA9IG5ldyBmYWJyaWMuVGV4dCgnVGV4dCBvbiBhIHBhdGgnLCB7XG4gICAgICogICAgIHRvcDogMTUwLFxuICAgICAqICAgICBsZWZ0OiAxNTAsXG4gICAgICogICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICogICAgIGNoYXJTcGFjaW5nOiAtNTAsXG4gICAgICogICAgIHBhdGg6IG5ldyBmYWJyaWMuUGF0aCgnTSAwIDAgQyA1MCAtMTAwIDE1MCAtMTAwIDIwMCAwJywge1xuICAgICAqICAgICAgICAgc3Ryb2tlV2lkdGg6IDEsXG4gICAgICogICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAqICAgICB9KSxcbiAgICAgKiAgICAgcGF0aFNpZGU6ICdsZWZ0JyxcbiAgICAgKiAgICAgcGF0aFN0YXJ0T2Zmc2V0OiAwXG4gICAgICogfSk7XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwYXRoOiAgICAgICAgICAgICAgIG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBPZmZzZXQgYW1vdW50IGZvciB0ZXh0IHBhdGggc3RhcnRpbmcgcG9zaXRpb25cbiAgICAgKiBPbmx5IHVzZWQgd2hlbiB0ZXh0IGhhcyBhIHBhdGhcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHBhdGhTdGFydE9mZnNldDogICAgICAgICAgICAgICAwLFxuXG4gICAgLyoqXG4gICAgICogV2hpY2ggc2lkZSBvZiB0aGUgcGF0aCB0aGUgdGV4dCBzaG91bGQgYmUgZHJhd24gb24uXG4gICAgICogT25seSB1c2VkIHdoZW4gdGV4dCBoYXMgYSBwYXRoXG4gICAgICogQHR5cGUge1N0cmluZ30gJ2xlZnR8cmlnaHQnXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBwYXRoU2lkZTogICAgICAgICAgICAgICAnbGVmdCcsXG5cbiAgICAvKipcbiAgICAgKiBIb3cgdGV4dCBpcyBhbGlnbmVkIHRvIHRoZSBwYXRoLiBUaGlzIHByb3BlcnR5IGRldGVybWluZXNcbiAgICAgKiB0aGUgcGVycGVuZGljdWxhciBwb3NpdGlvbiBvZiBlYWNoIGNoYXJhY3RlciByZWxhdGl2ZSB0byB0aGUgcGF0aC5cbiAgICAgKiAob25lIG9mIFwiYmFzZWxpbmVcIiwgXCJjZW50ZXJcIiwgXCJhc2NlbmRlclwiLCBcImRlc2NlbmRlclwiKVxuICAgICAqIFRoaXMgZmVhdHVyZSBpcyBpbiBCRVRBLCBhbmQgaXRzIGJlaGF2aW9yIG1heSBjaGFuZ2VcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHBhdGhBbGlnbjogICAgICAgICAgICAgICAnYmFzZWxpbmUnLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZm9udFNpemVGcmFjdGlvbjogMC4yMjIsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9mZnNldHM6IHtcbiAgICAgIHVuZGVybGluZTogMC4xMCxcbiAgICAgIGxpbmV0aHJvdWdoOiAtMC4zMTUsXG4gICAgICBvdmVybGluZTogLTAuODhcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVGV4dCBMaW5lIHByb3BvcnRpb24gdG8gZm9udCBTaXplIChpbiBwaXhlbHMpXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBfZm9udFNpemVNdWx0OiAgICAgICAgICAgICAxLjEzLFxuXG4gICAgLyoqXG4gICAgICogYWRkaXRpb25hbCBzcGFjZSBiZXR3ZWVuIGNoYXJhY3RlcnNcbiAgICAgKiBleHByZXNzZWQgaW4gdGhvdXNhbmRzIG9mIGVtIHVuaXRcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGNoYXJTcGFjaW5nOiAgICAgICAgICAgICAwLFxuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IGNvbnRhaW5pbmcgY2hhcmFjdGVyIHN0eWxlcyAtIHRvcC1sZXZlbCBwcm9wZXJ0aWVzIC0+IGxpbmUgbnVtYmVycyxcbiAgICAgKiAybmQtbGV2ZWwgcHJvcGVydGllcyAtIGNoYXJhY3RlciBudW1iZXJzXG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzdHlsZXM6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gYSBjb250ZXh0IHRvIG1lYXN1cmUgdGV4dCBjaGFyIG9yIGNvdXBsZSBvZiBjaGFyc1xuICAgICAqIHRoZSBjYWNoZUNvbnRleHQgb2YgdGhlIGNhbnZhcyB3aWxsIGJlIHVzZWQgb3IgYSBmcmVzaGx5IGNyZWF0ZWQgb25lIGlmIHRoZSBvYmplY3QgaXMgbm90IG9uIGNhbnZhc1xuICAgICAqIG9uY2UgY3JlYXRlZCBpdCB3aWxsIGJlIHJlZmVyZW5jZWQgb24gZmFicmljLl9tZWFzdXJpbmdDb250ZXh0IHRvIGF2b2lkIGNyZWF0aW5nIGEgY2FudmFzIGZvciBldmVyeVxuICAgICAqIHRleHQgb2JqZWN0IGNyZWF0ZWQuXG4gICAgICogQHR5cGUge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIF9tZWFzdXJpbmdDb250ZXh0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQmFzZWxpbmUgc2hpZnQsIHN0eWxlcyBvbmx5LCBrZWVwIGF0IDAgZm9yIHRoZSBtYWluIHRleHQgb2JqZWN0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGRlbHRhWTogMCxcblxuICAgIC8qKlxuICAgICAqIFdBUk5JTkc6IEVYUEVSSU1FTlRBTC4gTk9UIFNVUFBPUlRFRCBZRVRcbiAgICAgKiBkZXRlcm1pbmUgdGhlIGRpcmVjdGlvbiBvZiB0aGUgdGV4dC5cbiAgICAgKiBUaGlzIGhhcyB0byBiZSBzZXQgbWFudWFsbHkgdG9nZXRoZXIgd2l0aCB0ZXh0QWxpZ24gYW5kIG9yaWdpblggZm9yIHByb3BlclxuICAgICAqIGV4cGVyaWVuY2UuXG4gICAgICogc29tZSBpbnRlcmVzdGluZyBsaW5rIGZvciB0aGUgZnV0dXJlXG4gICAgICogaHR0cHM6Ly93d3cudzMub3JnL0ludGVybmF0aW9uYWwvcXVlc3Rpb25zL3FhLWJpZGktdW5pY29kZS1jb250cm9sc1xuICAgICAqIEBzaW5jZSA0LjUuMFxuICAgICAqIEB0eXBlIHtTdHJpbmd9ICdsdHJ8cnRsJ1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZGlyZWN0aW9uOiAnbHRyJyxcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIHByb3BlcnRpZXMgdGhhdCBkZWZpbmUgYSBzdHlsZSB1bml0IChvZiAnc3R5bGVzJykuXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgX3N0eWxlUHJvcGVydGllczogW1xuICAgICAgJ3N0cm9rZScsXG4gICAgICAnc3Ryb2tlV2lkdGgnLFxuICAgICAgJ2ZpbGwnLFxuICAgICAgJ2ZvbnRGYW1pbHknLFxuICAgICAgJ2ZvbnRTaXplJyxcbiAgICAgICdmb250V2VpZ2h0JyxcbiAgICAgICdmb250U3R5bGUnLFxuICAgICAgJ3VuZGVybGluZScsXG4gICAgICAnb3ZlcmxpbmUnLFxuICAgICAgJ2xpbmV0aHJvdWdoJyxcbiAgICAgICdkZWx0YVknLFxuICAgICAgJ3RleHRCYWNrZ3JvdW5kQ29sb3InLFxuICAgIF0sXG5cbiAgICAvKipcbiAgICAgKiBjb250YWlucyBjaGFyYWN0ZXJzIGJvdW5kaW5nIGJveGVzXG4gICAgICovXG4gICAgX19jaGFyQm91bmRzOiBbXSxcblxuICAgIC8qKlxuICAgICAqIHVzZSB0aGlzIHNpemUgd2hlbiBtZWFzdXJpbmcgdGV4dC4gVG8gYXZvaWQgSUUxMSByb3VuZGluZyBlcnJvcnNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0XG4gICAgICogQHJlYWRvbmx5XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBDQUNIRV9GT05UX1NJWkU6IDQwMCxcblxuICAgIC8qKlxuICAgICAqIGNvbnRhaW5zIHRoZSBtaW4gdGV4dCB3aWR0aCB0byBhdm9pZCBnZXR0aW5nIDBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgTUlOX1RFWFRfV0lEVEg6IDIsXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IFRleHQgc3RyaW5nXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIG9iamVjdFxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5UZXh0fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24odGV4dCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5zdHlsZXMgPSBvcHRpb25zID8gKG9wdGlvbnMuc3R5bGVzIHx8IHsgfSkgOiB7IH07XG4gICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgdGhpcy5fX3NraXBEaW1lbnNpb24gPSB0cnVlO1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCBvcHRpb25zKTtcbiAgICAgIGlmICh0aGlzLnBhdGgpIHtcbiAgICAgICAgdGhpcy5zZXRQYXRoSW5mbygpO1xuICAgICAgfVxuICAgICAgdGhpcy5fX3NraXBEaW1lbnNpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuaW5pdERpbWVuc2lvbnMoKTtcbiAgICAgIHRoaXMuc2V0Q29vcmRzKCk7XG4gICAgICB0aGlzLnNldHVwU3RhdGUoeyBwcm9wZXJ0eVNldDogJ19kaW1lbnNpb25BZmZlY3RpbmdQcm9wcycgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIElmIHRleHQgaGFzIGEgcGF0aCwgaXQgd2lsbCBhZGQgdGhlIGV4dHJhIGluZm9ybWF0aW9uIG5lZWRlZFxuICAgICAqIGZvciBwYXRoIGFuZCB0ZXh0IGNhbGN1bGF0aW9uc1xuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5UZXh0fSB0aGlzQXJnXG4gICAgICovXG4gICAgc2V0UGF0aEluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICBwYXRoLnNlZ21lbnRzSW5mbyA9IGZhYnJpYy51dGlsLmdldFBhdGhTZWdtZW50c0luZm8ocGF0aC5wYXRoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgY29udGV4dCBmb3IgbWVhc3VyZW1lbnQgb2YgdGV4dCBzdHJpbmcuXG4gICAgICogaWYgY3JlYXRlZCBpdCBnZXRzIHN0b3JlZCBmb3IgcmV1c2VcbiAgICAgKiB0aGlzIGlzIGZvciBpbnRlcm5hbCB1c2UsIHBsZWFzZSBkbyBub3QgdXNlIGl0XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGV4dCBUZXh0IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gT3B0aW9ucyBvYmplY3RcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuVGV4dH0gdGhpc0FyZ1xuICAgICAqL1xuICAgIGdldE1lYXN1cmluZ0NvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gaWYgd2UgZGlkIG5vdCByZXR1cm4gd2UgaGF2ZSB0byBtZWFzdXJlIHNvbWV0aGluZy5cbiAgICAgIGlmICghZmFicmljLl9tZWFzdXJpbmdDb250ZXh0KSB7XG4gICAgICAgIGZhYnJpYy5fbWVhc3VyaW5nQ29udGV4dCA9IHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLmNvbnRleHRDYWNoZSB8fFxuICAgICAgICAgIGZhYnJpYy51dGlsLmNyZWF0ZUNhbnZhc0VsZW1lbnQoKS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhYnJpYy5fbWVhc3VyaW5nQ29udGV4dDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBEaXZpZGVzIHRleHQgaW50byBsaW5lcyBvZiB0ZXh0IGFuZCBsaW5lcyBvZiBncmFwaGVtZXMuXG4gICAgICovXG4gICAgX3NwbGl0VGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmV3TGluZXMgPSB0aGlzLl9zcGxpdFRleHRJbnRvTGluZXModGhpcy50ZXh0KTtcbiAgICAgIHRoaXMudGV4dExpbmVzID0gbmV3TGluZXMubGluZXM7XG4gICAgICB0aGlzLl90ZXh0TGluZXMgPSBuZXdMaW5lcy5ncmFwaGVtZUxpbmVzO1xuICAgICAgdGhpcy5fdW53cmFwcGVkVGV4dExpbmVzID0gbmV3TGluZXMuX3Vud3JhcHBlZExpbmVzO1xuICAgICAgdGhpcy5fdGV4dCA9IG5ld0xpbmVzLmdyYXBoZW1lVGV4dDtcbiAgICAgIHJldHVybiBuZXdMaW5lcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBvciB1cGRhdGUgdGV4dCBkaW1lbnNpb25zLlxuICAgICAqIFVwZGF0ZXMgdGhpcy53aWR0aCBhbmQgdGhpcy5oZWlnaHQgd2l0aCB0aGUgcHJvcGVyIHZhbHVlcy5cbiAgICAgKiBEb2VzIG5vdCByZXR1cm4gZGltZW5zaW9ucy5cbiAgICAgKi9cbiAgICBpbml0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fX3NraXBEaW1lbnNpb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fc3BsaXRUZXh0KCk7XG4gICAgICB0aGlzLl9jbGVhckNhY2hlKCk7XG4gICAgICBpZiAodGhpcy5wYXRoKSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnBhdGgud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5wYXRoLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5jYWxjVGV4dFdpZHRoKCkgfHwgdGhpcy5jdXJzb3JXaWR0aCB8fCB0aGlzLk1JTl9URVhUX1dJRFRIO1xuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuY2FsY1RleHRIZWlnaHQoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnRleHRBbGlnbi5pbmRleE9mKCdqdXN0aWZ5JykgIT09IC0xKSB7XG4gICAgICAgIC8vIG9uY2UgdGV4dCBpcyBtZWFzdXJlZCB3ZSBuZWVkIHRvIG1ha2Ugc3BhY2UgZmF0dGVyIHRvIG1ha2UganVzdGlmaWVkIHRleHQuXG4gICAgICAgIHRoaXMuZW5sYXJnZVNwYWNlcygpO1xuICAgICAgfVxuICAgICAgdGhpcy5zYXZlU3RhdGUoeyBwcm9wZXJ0eVNldDogJ19kaW1lbnNpb25BZmZlY3RpbmdQcm9wcycgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVubGFyZ2Ugc3BhY2UgYm94ZXMgYW5kIHNoaWZ0IHRoZSBvdGhlcnNcbiAgICAgKi9cbiAgICBlbmxhcmdlU3BhY2VzOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkaWZmU3BhY2UsIGN1cnJlbnRMaW5lV2lkdGgsIG51bWJlck9mU3BhY2VzLCBhY2N1bXVsYXRlZFNwYWNlLCBsaW5lLCBjaGFyQm91bmQsIHNwYWNlcztcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dEFsaWduICE9PSAnanVzdGlmeScgJiYgKGkgPT09IGxlbiAtIDEgfHwgdGhpcy5pc0VuZE9mV3JhcHBpbmcoaSkpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYWNjdW11bGF0ZWRTcGFjZSA9IDA7XG4gICAgICAgIGxpbmUgPSB0aGlzLl90ZXh0TGluZXNbaV07XG4gICAgICAgIGN1cnJlbnRMaW5lV2lkdGggPSB0aGlzLmdldExpbmVXaWR0aChpKTtcbiAgICAgICAgaWYgKGN1cnJlbnRMaW5lV2lkdGggPCB0aGlzLndpZHRoICYmIChzcGFjZXMgPSB0aGlzLnRleHRMaW5lc1tpXS5tYXRjaCh0aGlzLl9yZVNwYWNlc0FuZFRhYnMpKSkge1xuICAgICAgICAgIG51bWJlck9mU3BhY2VzID0gc3BhY2VzLmxlbmd0aDtcbiAgICAgICAgICBkaWZmU3BhY2UgPSAodGhpcy53aWR0aCAtIGN1cnJlbnRMaW5lV2lkdGgpIC8gbnVtYmVyT2ZTcGFjZXM7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsZW4gPSBsaW5lLmxlbmd0aDsgaiA8PSBqbGVuOyBqKyspIHtcbiAgICAgICAgICAgIGNoYXJCb3VuZCA9IHRoaXMuX19jaGFyQm91bmRzW2ldW2pdO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlU3BhY2VBbmRUYWIudGVzdChsaW5lW2pdKSkge1xuICAgICAgICAgICAgICBjaGFyQm91bmQud2lkdGggKz0gZGlmZlNwYWNlO1xuICAgICAgICAgICAgICBjaGFyQm91bmQua2VybmVkV2lkdGggKz0gZGlmZlNwYWNlO1xuICAgICAgICAgICAgICBjaGFyQm91bmQubGVmdCArPSBhY2N1bXVsYXRlZFNwYWNlO1xuICAgICAgICAgICAgICBhY2N1bXVsYXRlZFNwYWNlICs9IGRpZmZTcGFjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBjaGFyQm91bmQubGVmdCArPSBhY2N1bXVsYXRlZFNwYWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgaWYgdGhlIHRleHQgbGluZSBpcyBlbmRlZCB3aXRoIGFuIGhhcmQgYnJlYWtcbiAgICAgKiB0ZXh0IGFuZCBpdGV4dCBkbyBub3QgaGF2ZSB3cmFwcGluZywgcmV0dXJuIGZhbHNlXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0VuZE9mV3JhcHBpbmc6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgcmV0dXJuIGxpbmVJbmRleCA9PT0gdGhpcy5fdGV4dExpbmVzLmxlbmd0aCAtIDE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIERldGVjdCBpZiBhIGxpbmUgaGFzIGEgbGluZWJyZWFrIGFuZCBzbyB3ZSBuZWVkIHRvIGFjY291bnQgZm9yIGl0IHdoZW4gbW92aW5nXG4gICAgICogYW5kIGNvdW50aW5nIHN0eWxlLlxuICAgICAqIEl0IHJldHVybiBhbHdheXMgZm9yIHRleHQgYW5kIEl0ZXh0LlxuICAgICAqIEByZXR1cm4gTnVtYmVyXG4gICAgICovXG4gICAgbWlzc2luZ05ld2xpbmVPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGV4dCBvYmplY3RcbiAgICAgKi9cbiAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJyM8ZmFicmljLlRleHQgKCcgKyB0aGlzLmNvbXBsZXhpdHkoKSArXG4gICAgICAgICcpOiB7IFwidGV4dFwiOiBcIicgKyB0aGlzLnRleHQgKyAnXCIsIFwiZm9udEZhbWlseVwiOiBcIicgKyB0aGlzLmZvbnRGYW1pbHkgKyAnXCIgfT4nO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGRpbWVuc2lvbiBhbmQgdGhlIHpvb20gbGV2ZWwgbmVlZGVkIHRvIGNyZWF0ZSBhIGNhY2hlIGNhbnZhc1xuICAgICAqIGJpZyBlbm91Z2ggdG8gaG9zdCB0aGUgb2JqZWN0IHRvIGJlIGNhY2hlZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkaW0ueCB3aWR0aCBvZiBvYmplY3QgdG8gYmUgY2FjaGVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRpbS55IGhlaWdodCBvZiBvYmplY3QgdG8gYmUgY2FjaGVkXG4gICAgICogQHJldHVybiB7T2JqZWN0fS53aWR0aCB3aWR0aCBvZiBjYW52YXNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9LmhlaWdodCBoZWlnaHQgb2YgY2FudmFzXG4gICAgICogQHJldHVybiB7T2JqZWN0fS56b29tWCB6b29tWCB6b29tIHZhbHVlIHRvIHVuc2NhbGUgdGhlIGNhbnZhcyBiZWZvcmUgZHJhd2luZyBjYWNoZVxuICAgICAqIEByZXR1cm4ge09iamVjdH0uem9vbVkgem9vbVkgem9vbSB2YWx1ZSB0byB1bnNjYWxlIHRoZSBjYW52YXMgYmVmb3JlIGRyYXdpbmcgY2FjaGVcbiAgICAgKi9cbiAgICBfZ2V0Q2FjaGVDYW52YXNEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBkaW1zID0gdGhpcy5jYWxsU3VwZXIoJ19nZXRDYWNoZUNhbnZhc0RpbWVuc2lvbnMnKTtcbiAgICAgIHZhciBmb250U2l6ZSA9IHRoaXMuZm9udFNpemU7XG4gICAgICBkaW1zLndpZHRoICs9IGZvbnRTaXplICogZGltcy56b29tWDtcbiAgICAgIGRpbXMuaGVpZ2h0ICs9IGZvbnRTaXplICogZGltcy56b29tWTtcbiAgICAgIHJldHVybiBkaW1zO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgICAgcGF0aCAmJiAhcGF0aC5pc05vdFZpc2libGUoKSAmJiBwYXRoLl9yZW5kZXIoY3R4KTtcbiAgICAgIHRoaXMuX3NldFRleHRTdHlsZXMoY3R4KTtcbiAgICAgIHRoaXMuX3JlbmRlclRleHRMaW5lc0JhY2tncm91bmQoY3R4KTtcbiAgICAgIHRoaXMuX3JlbmRlclRleHREZWNvcmF0aW9uKGN0eCwgJ3VuZGVybGluZScpO1xuICAgICAgdGhpcy5fcmVuZGVyVGV4dChjdHgpO1xuICAgICAgdGhpcy5fcmVuZGVyVGV4dERlY29yYXRpb24oY3R4LCAnb3ZlcmxpbmUnKTtcbiAgICAgIHRoaXMuX3JlbmRlclRleHREZWNvcmF0aW9uKGN0eCwgJ2xpbmV0aHJvdWdoJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJUZXh0OiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICh0aGlzLnBhaW50Rmlyc3QgPT09ICdzdHJva2UnKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlclRleHRTdHJva2UoY3R4KTtcbiAgICAgICAgdGhpcy5fcmVuZGVyVGV4dEZpbGwoY3R4KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9yZW5kZXJUZXh0RmlsbChjdHgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJUZXh0U3Ryb2tlKGN0eCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZm9udCBwYXJhbWV0ZXIgb2YgdGhlIGNvbnRleHQgd2l0aCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgb3Igd2l0aCBjaGFyU3R5bGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW2NoYXJTdHlsZV0gb2JqZWN0IHdpdGggZm9udCBzdHlsZSBwcm9wZXJ0aWVzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjaGFyU3R5bGUuZm9udEZhbWlseV0gRm9udCBGYW1pbHlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2NoYXJTdHlsZS5mb250U2l6ZV0gRm9udCBzaXplIGluIHBpeGVscy4gKCB3aXRob3V0IHB4IHN1ZmZpeCApXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtjaGFyU3R5bGUuZm9udFdlaWdodF0gRm9udCB3ZWlnaHRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2NoYXJTdHlsZS5mb250U3R5bGVdIEZvbnQgc3R5bGUgKGl0YWxpY3xub3JtYWwpXG4gICAgICovXG4gICAgX3NldFRleHRTdHlsZXM6IGZ1bmN0aW9uKGN0eCwgY2hhclN0eWxlLCBmb3JNZWFzdXJpbmcpIHtcbiAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnYWxwaGFiZXRpY2FsJztcbiAgICAgIGlmICh0aGlzLnBhdGgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnBhdGhBbGlnbikge1xuICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdhc2NlbmRlcic6XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdkZXNjZW5kZXInOlxuICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdib3R0b20nO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN0eC5mb250ID0gdGhpcy5fZ2V0Rm9udERlY2xhcmF0aW9uKGNoYXJTdHlsZSwgZm9yTWVhc3VyaW5nKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsY3VsYXRlIGFuZCByZXR1cm4gdGhlIHRleHQgV2lkdGggbWVhc3VyaW5nIGVhY2ggbGluZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE1heGltdW0gd2lkdGggb2YgZmFicmljLlRleHQgb2JqZWN0XG4gICAgICovXG4gICAgY2FsY1RleHRXaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWF4V2lkdGggPSB0aGlzLmdldExpbmVXaWR0aCgwKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IHRoaXMuX3RleHRMaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgY3VycmVudExpbmVXaWR0aCA9IHRoaXMuZ2V0TGluZVdpZHRoKGkpO1xuICAgICAgICBpZiAoY3VycmVudExpbmVXaWR0aCA+IG1heFdpZHRoKSB7XG4gICAgICAgICAgbWF4V2lkdGggPSBjdXJyZW50TGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF4V2lkdGg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBNZXRob2QgbmFtZSAoXCJmaWxsVGV4dFwiIG9yIFwic3Ryb2tlVGV4dFwiKVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbGluZSBUZXh0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IExlZnQgcG9zaXRpb24gb2YgdGV4dFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgVG9wIHBvc2l0aW9uIG9mIHRleHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4IEluZGV4IG9mIGEgbGluZSBpbiBhIHRleHRcbiAgICAgKi9cbiAgICBfcmVuZGVyVGV4dExpbmU6IGZ1bmN0aW9uKG1ldGhvZCwgY3R4LCBsaW5lLCBsZWZ0LCB0b3AsIGxpbmVJbmRleCkge1xuICAgICAgdGhpcy5fcmVuZGVyQ2hhcnMobWV0aG9kLCBjdHgsIGxpbmUsIGxlZnQsIHRvcCwgbGluZUluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyB0aGUgdGV4dCBiYWNrZ3JvdW5kIGZvciBsaW5lcywgdGFraW5nIGNhcmUgb2Ygc3R5bGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICBfcmVuZGVyVGV4dExpbmVzQmFja2dyb3VuZDogZnVuY3Rpb24oY3R4KSB7XG4gICAgICBpZiAoIXRoaXMudGV4dEJhY2tncm91bmRDb2xvciAmJiAhdGhpcy5zdHlsZUhhcygndGV4dEJhY2tncm91bmRDb2xvcicpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBoZWlnaHRPZkxpbmUsXG4gICAgICAgICAgbGluZUxlZnRPZmZzZXQsIG9yaWdpbmFsRmlsbCA9IGN0eC5maWxsU3R5bGUsXG4gICAgICAgICAgbGluZSwgbGFzdENvbG9yLFxuICAgICAgICAgIGxlZnRPZmZzZXQgPSB0aGlzLl9nZXRMZWZ0T2Zmc2V0KCksXG4gICAgICAgICAgbGluZVRvcE9mZnNldCA9IHRoaXMuX2dldFRvcE9mZnNldCgpLFxuICAgICAgICAgIGJveFN0YXJ0ID0gMCwgYm94V2lkdGggPSAwLCBjaGFyQm94LCBjdXJyZW50Q29sb3IsIHBhdGggPSB0aGlzLnBhdGgsXG4gICAgICAgICAgZHJhd1N0YXJ0O1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGhlaWdodE9mTGluZSA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpO1xuICAgICAgICBpZiAoIXRoaXMudGV4dEJhY2tncm91bmRDb2xvciAmJiAhdGhpcy5zdHlsZUhhcygndGV4dEJhY2tncm91bmRDb2xvcicsIGkpKSB7XG4gICAgICAgICAgbGluZVRvcE9mZnNldCArPSBoZWlnaHRPZkxpbmU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tpXTtcbiAgICAgICAgbGluZUxlZnRPZmZzZXQgPSB0aGlzLl9nZXRMaW5lTGVmdE9mZnNldChpKTtcbiAgICAgICAgYm94V2lkdGggPSAwO1xuICAgICAgICBib3hTdGFydCA9IDA7XG4gICAgICAgIGxhc3RDb2xvciA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgMCwgJ3RleHRCYWNrZ3JvdW5kQ29sb3InKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsZW4gPSBsaW5lLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuICAgICAgICAgIGNoYXJCb3ggPSB0aGlzLl9fY2hhckJvdW5kc1tpXVtqXTtcbiAgICAgICAgICBjdXJyZW50Q29sb3IgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIGosICd0ZXh0QmFja2dyb3VuZENvbG9yJyk7XG4gICAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHgudHJhbnNsYXRlKGNoYXJCb3gucmVuZGVyTGVmdCwgY2hhckJveC5yZW5kZXJUb3ApO1xuICAgICAgICAgICAgY3R4LnJvdGF0ZShjaGFyQm94LmFuZ2xlKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBjdXJyZW50Q29sb3I7XG4gICAgICAgICAgICBjdXJyZW50Q29sb3IgJiYgY3R4LmZpbGxSZWN0KFxuICAgICAgICAgICAgICAtY2hhckJveC53aWR0aCAvIDIsXG4gICAgICAgICAgICAgIC1oZWlnaHRPZkxpbmUgLyB0aGlzLmxpbmVIZWlnaHQgKiAoMSAtIHRoaXMuX2ZvbnRTaXplRnJhY3Rpb24pLFxuICAgICAgICAgICAgICBjaGFyQm94LndpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHRPZkxpbmUgLyB0aGlzLmxpbmVIZWlnaHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChjdXJyZW50Q29sb3IgIT09IGxhc3RDb2xvcikge1xuICAgICAgICAgICAgZHJhd1N0YXJ0ID0gbGVmdE9mZnNldCArIGxpbmVMZWZ0T2Zmc2V0ICsgYm94U3RhcnQ7XG4gICAgICAgICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICAgIGRyYXdTdGFydCA9IHRoaXMud2lkdGggLSBkcmF3U3RhcnQgLSBib3hXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYXN0Q29sb3I7XG4gICAgICAgICAgICBsYXN0Q29sb3IgJiYgY3R4LmZpbGxSZWN0KFxuICAgICAgICAgICAgICBkcmF3U3RhcnQsXG4gICAgICAgICAgICAgIGxpbmVUb3BPZmZzZXQsXG4gICAgICAgICAgICAgIGJveFdpZHRoLFxuICAgICAgICAgICAgICBoZWlnaHRPZkxpbmUgLyB0aGlzLmxpbmVIZWlnaHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBib3hTdGFydCA9IGNoYXJCb3gubGVmdDtcbiAgICAgICAgICAgIGJveFdpZHRoID0gY2hhckJveC53aWR0aDtcbiAgICAgICAgICAgIGxhc3RDb2xvciA9IGN1cnJlbnRDb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib3hXaWR0aCArPSBjaGFyQm94Lmtlcm5lZFdpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudENvbG9yICYmICFwYXRoKSB7XG4gICAgICAgICAgZHJhd1N0YXJ0ID0gbGVmdE9mZnNldCArIGxpbmVMZWZ0T2Zmc2V0ICsgYm94U3RhcnQ7XG4gICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICAgICAgZHJhd1N0YXJ0ID0gdGhpcy53aWR0aCAtIGRyYXdTdGFydCAtIGJveFdpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY3VycmVudENvbG9yO1xuICAgICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAgIGRyYXdTdGFydCxcbiAgICAgICAgICAgIGxpbmVUb3BPZmZzZXQsXG4gICAgICAgICAgICBib3hXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodE9mTGluZSAvIHRoaXMubGluZUhlaWdodFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgbGluZVRvcE9mZnNldCArPSBoZWlnaHRPZkxpbmU7XG4gICAgICB9XG4gICAgICBjdHguZmlsbFN0eWxlID0gb3JpZ2luYWxGaWxsO1xuICAgICAgLy8gaWYgdGhlcmUgaXMgdGV4dCBiYWNrZ3JvdW5kIGNvbG9yIG5vXG4gICAgICAvLyBvdGhlciBzaGFkb3dzIHNob3VsZCBiZSBjYXN0ZWRcbiAgICAgIHRoaXMuX3JlbW92ZVNoYWRvdyhjdHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkZWNsIHN0eWxlIGRlY2xhcmF0aW9uIGZvciBjYWNoZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkZWNsLmZvbnRGYW1pbHkgZm9udEZhbWlseVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkZWNsLmZvbnRTdHlsZSBmb250U3R5bGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGVjbC5mb250V2VpZ2h0IGZvbnRXZWlnaHRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHJlZmVyZW5jZSB0byBjYWNoZVxuICAgICAqL1xuICAgIGdldEZvbnRDYWNoZTogZnVuY3Rpb24oZGVjbCkge1xuICAgICAgdmFyIGZvbnRGYW1pbHkgPSBkZWNsLmZvbnRGYW1pbHkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmICghZmFicmljLmNoYXJXaWR0aHNDYWNoZVtmb250RmFtaWx5XSkge1xuICAgICAgICBmYWJyaWMuY2hhcldpZHRoc0NhY2hlW2ZvbnRGYW1pbHldID0geyB9O1xuICAgICAgfVxuICAgICAgdmFyIGNhY2hlID0gZmFicmljLmNoYXJXaWR0aHNDYWNoZVtmb250RmFtaWx5XSxcbiAgICAgICAgICBjYWNoZVByb3AgPSBkZWNsLmZvbnRTdHlsZS50b0xvd2VyQ2FzZSgpICsgJ18nICsgKGRlY2wuZm9udFdlaWdodCArICcnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKCFjYWNoZVtjYWNoZVByb3BdKSB7XG4gICAgICAgIGNhY2hlW2NhY2hlUHJvcF0gPSB7IH07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FjaGVbY2FjaGVQcm9wXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbWVhc3VyZSBhbmQgcmV0dXJuIHRoZSB3aWR0aCBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gICAgICogcG9zc2libHkgb3ZlcnJpZGRlbiB0byBhY2NvbW1vZGF0ZSBkaWZmZXJlbnQgbWVhc3VyZSBsb2dpYyBvclxuICAgICAqIHRvIGhvb2sgc29tZSBleHRlcm5hbCBsaWIgZm9yIGNoYXJhY3RlciBtZWFzdXJlbWVudFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IF9jaGFyLCBjaGFyIHRvIGJlIG1lYXN1cmVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNoYXJTdHlsZSBzdHlsZSBvZiBjaGFyIHRvIGJlIG1lYXN1cmVkXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtwcmV2aW91c0NoYXJdIHByZXZpb3VzIGNoYXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3ByZXZDaGFyU3R5bGVdIHN0eWxlIG9mIHByZXZpb3VzIGNoYXJcbiAgICAgKi9cbiAgICBfbWVhc3VyZUNoYXI6IGZ1bmN0aW9uKF9jaGFyLCBjaGFyU3R5bGUsIHByZXZpb3VzQ2hhciwgcHJldkNoYXJTdHlsZSkge1xuICAgICAgLy8gZmlyc3QgaSB0cnkgdG8gcmV0dXJuIGZyb20gY2FjaGVcbiAgICAgIHZhciBmb250Q2FjaGUgPSB0aGlzLmdldEZvbnRDYWNoZShjaGFyU3R5bGUpLCBmb250RGVjbGFyYXRpb24gPSB0aGlzLl9nZXRGb250RGVjbGFyYXRpb24oY2hhclN0eWxlKSxcbiAgICAgICAgICBwcmV2aW91c0ZvbnREZWNsYXJhdGlvbiA9IHRoaXMuX2dldEZvbnREZWNsYXJhdGlvbihwcmV2Q2hhclN0eWxlKSwgY291cGxlID0gcHJldmlvdXNDaGFyICsgX2NoYXIsXG4gICAgICAgICAgc3R5bGVzQXJlRXF1YWwgPSBmb250RGVjbGFyYXRpb24gPT09IHByZXZpb3VzRm9udERlY2xhcmF0aW9uLCB3aWR0aCwgY291cGxlV2lkdGgsIHByZXZpb3VzV2lkdGgsXG4gICAgICAgICAgZm9udE11bHRpcGxpZXIgPSBjaGFyU3R5bGUuZm9udFNpemUgLyB0aGlzLkNBQ0hFX0ZPTlRfU0laRSwga2VybmVkV2lkdGg7XG5cbiAgICAgIGlmIChwcmV2aW91c0NoYXIgJiYgZm9udENhY2hlW3ByZXZpb3VzQ2hhcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcmV2aW91c1dpZHRoID0gZm9udENhY2hlW3ByZXZpb3VzQ2hhcl07XG4gICAgICB9XG4gICAgICBpZiAoZm9udENhY2hlW19jaGFyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtlcm5lZFdpZHRoID0gd2lkdGggPSBmb250Q2FjaGVbX2NoYXJdO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlc0FyZUVxdWFsICYmIGZvbnRDYWNoZVtjb3VwbGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY291cGxlV2lkdGggPSBmb250Q2FjaGVbY291cGxlXTtcbiAgICAgICAga2VybmVkV2lkdGggPSBjb3VwbGVXaWR0aCAtIHByZXZpb3VzV2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBwcmV2aW91c1dpZHRoID09PSB1bmRlZmluZWQgfHwgY291cGxlV2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5nZXRNZWFzdXJpbmdDb250ZXh0KCk7XG4gICAgICAgIC8vIHNlbmQgYSBUUlVFIHRvIHNwZWNpZnkgbWVhc3VyaW5nIGZvbnQgc2l6ZSBDQUNIRV9GT05UX1NJWkVcbiAgICAgICAgdGhpcy5fc2V0VGV4dFN0eWxlcyhjdHgsIGNoYXJTdHlsZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBrZXJuZWRXaWR0aCA9IHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KF9jaGFyKS53aWR0aDtcbiAgICAgICAgZm9udENhY2hlW19jaGFyXSA9IHdpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZpb3VzV2lkdGggPT09IHVuZGVmaW5lZCAmJiBzdHlsZXNBcmVFcXVhbCAmJiBwcmV2aW91c0NoYXIpIHtcbiAgICAgICAgcHJldmlvdXNXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChwcmV2aW91c0NoYXIpLndpZHRoO1xuICAgICAgICBmb250Q2FjaGVbcHJldmlvdXNDaGFyXSA9IHByZXZpb3VzV2lkdGg7XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGVzQXJlRXF1YWwgJiYgY291cGxlV2lkdGggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyB3ZSBjYW4gbWVhc3VyZSB0aGUga2VybmluZyBjb3VwbGUgYW5kIHN1YnRyYWN0IHRoZSB3aWR0aCBvZiB0aGUgcHJldmlvdXMgY2hhcmFjdGVyXG4gICAgICAgIGNvdXBsZVdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGNvdXBsZSkud2lkdGg7XG4gICAgICAgIGZvbnRDYWNoZVtjb3VwbGVdID0gY291cGxlV2lkdGg7XG4gICAgICAgIGtlcm5lZFdpZHRoID0gY291cGxlV2lkdGggLSBwcmV2aW91c1dpZHRoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoICogZm9udE11bHRpcGxpZXIsIGtlcm5lZFdpZHRoOiBrZXJuZWRXaWR0aCAqIGZvbnRNdWx0aXBsaWVyIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGhlaWdodCBvZiBjaGFyYWN0ZXIgYXQgZ2l2ZW4gcG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZSB0aGUgbGluZSBpbmRleCBudW1iZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gX2NoYXIgdGhlIGNoYXJhY3RlciBpbmRleCBudW1iZXJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGZvbnRTaXplIG9mIHRoZSBjaGFyYWN0ZXJcbiAgICAgKi9cbiAgICBnZXRIZWlnaHRPZkNoYXI6IGZ1bmN0aW9uKGxpbmUsIF9jaGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChsaW5lLCBfY2hhciwgJ2ZvbnRTaXplJyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG1lYXN1cmUgYSB0ZXh0IGxpbmUgbWVhc3VyaW5nIGFsbCBjaGFyYWN0ZXJzLlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggbGluZSBudW1iZXJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IExpbmUgd2lkdGhcbiAgICAgKi9cbiAgICBtZWFzdXJlTGluZTogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICB2YXIgbGluZUluZm8gPSB0aGlzLl9tZWFzdXJlTGluZShsaW5lSW5kZXgpO1xuICAgICAgaWYgKHRoaXMuY2hhclNwYWNpbmcgIT09IDApIHtcbiAgICAgICAgbGluZUluZm8ud2lkdGggLT0gdGhpcy5fZ2V0V2lkdGhPZkNoYXJTcGFjaW5nKCk7XG4gICAgICB9XG4gICAgICBpZiAobGluZUluZm8ud2lkdGggPCAwKSB7XG4gICAgICAgIGxpbmVJbmZvLndpZHRoID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsaW5lSW5mbztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbWVhc3VyZSBldmVyeSBncmFwaGVtZSBvZiBhIGxpbmUsIHBvcHVsYXRpbmcgX19jaGFyQm91bmRzXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gb2JqZWN0LndpZHRoIHRvdGFsIHdpZHRoIG9mIGNoYXJhY3RlcnNcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdC53aWR0aE9mU3BhY2VzIGxlbmd0aCBvZiBjaGFycyB0aGF0IG1hdGNoIHRoaXMuX3JlU3BhY2VzQW5kVGFic1xuICAgICAqL1xuICAgIF9tZWFzdXJlTGluZTogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICB2YXIgd2lkdGggPSAwLCBpLCBncmFwaGVtZSwgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tsaW5lSW5kZXhdLCBwcmV2R3JhcGhlbWUsXG4gICAgICAgICAgZ3JhcGhlbWVJbmZvLCBudW1PZlNwYWNlcyA9IDAsIGxpbmVCb3VuZHMgPSBuZXcgQXJyYXkobGluZS5sZW5ndGgpLFxuICAgICAgICAgIHBvc2l0aW9uSW5QYXRoID0gMCwgc3RhcnRpbmdQb2ludCwgdG90YWxQYXRoTGVuZ3RoLCBwYXRoID0gdGhpcy5wYXRoLFxuICAgICAgICAgIHJldmVyc2UgPSB0aGlzLnBhdGhTaWRlID09PSAncmlnaHQnO1xuXG4gICAgICB0aGlzLl9fY2hhckJvdW5kc1tsaW5lSW5kZXhdID0gbGluZUJvdW5kcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyYXBoZW1lID0gbGluZVtpXTtcbiAgICAgICAgZ3JhcGhlbWVJbmZvID0gdGhpcy5fZ2V0R3JhcGhlbWVCb3goZ3JhcGhlbWUsIGxpbmVJbmRleCwgaSwgcHJldkdyYXBoZW1lKTtcbiAgICAgICAgbGluZUJvdW5kc1tpXSA9IGdyYXBoZW1lSW5mbztcbiAgICAgICAgd2lkdGggKz0gZ3JhcGhlbWVJbmZvLmtlcm5lZFdpZHRoO1xuICAgICAgICBwcmV2R3JhcGhlbWUgPSBncmFwaGVtZTtcbiAgICAgIH1cbiAgICAgIC8vIHRoaXMgbGF0ZXN0IGJvdW5kIGJveCByZXByZXNlbnQgdGhlIGxhc3QgY2hhcmFjdGVyIG9mIHRoZSBsaW5lXG4gICAgICAvLyB0byBzaW1wbGlmeSBjdXJzb3IgaGFuZGxpbmcgaW4gaW50ZXJhY3RpdmUgbW9kZS5cbiAgICAgIGxpbmVCb3VuZHNbaV0gPSB7XG4gICAgICAgIGxlZnQ6IGdyYXBoZW1lSW5mbyA/IGdyYXBoZW1lSW5mby5sZWZ0ICsgZ3JhcGhlbWVJbmZvLndpZHRoIDogMCxcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGtlcm5lZFdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IHRoaXMuZm9udFNpemVcbiAgICAgIH07XG4gICAgICBpZiAocGF0aCkge1xuICAgICAgICB0b3RhbFBhdGhMZW5ndGggPSBwYXRoLnNlZ21lbnRzSW5mb1twYXRoLnNlZ21lbnRzSW5mby5sZW5ndGggLSAxXS5sZW5ndGg7XG4gICAgICAgIHN0YXJ0aW5nUG9pbnQgPSBmYWJyaWMudXRpbC5nZXRQb2ludE9uUGF0aChwYXRoLnBhdGgsIDAsIHBhdGguc2VnbWVudHNJbmZvKTtcbiAgICAgICAgc3RhcnRpbmdQb2ludC54ICs9IHBhdGgucGF0aE9mZnNldC54O1xuICAgICAgICBzdGFydGluZ1BvaW50LnkgKz0gcGF0aC5wYXRoT2Zmc2V0Lnk7XG4gICAgICAgIHN3aXRjaCAodGhpcy50ZXh0QWxpZ24pIHtcbiAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgIHBvc2l0aW9uSW5QYXRoID0gcmV2ZXJzZSA/ICh0b3RhbFBhdGhMZW5ndGggLSB3aWR0aCkgOiAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgIHBvc2l0aW9uSW5QYXRoID0gKHRvdGFsUGF0aExlbmd0aCAtIHdpZHRoKSAvIDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICBwb3NpdGlvbkluUGF0aCA9IHJldmVyc2UgPyAwIDogKHRvdGFsUGF0aExlbmd0aCAtIHdpZHRoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIC8vdG9kbyAtIGFkZCBzdXBwb3J0IGZvciBqdXN0aWZ5XG4gICAgICAgIH1cbiAgICAgICAgcG9zaXRpb25JblBhdGggKz0gdGhpcy5wYXRoU3RhcnRPZmZzZXQgKiAocmV2ZXJzZSA/IC0xIDogMSk7XG4gICAgICAgIGZvciAoaSA9IHJldmVyc2UgPyBsaW5lLmxlbmd0aCAtIDEgOiAwO1xuICAgICAgICAgIHJldmVyc2UgPyBpID49IDAgOiBpIDwgbGluZS5sZW5ndGg7XG4gICAgICAgICAgcmV2ZXJzZSA/IGktLSA6IGkrKykge1xuICAgICAgICAgIGdyYXBoZW1lSW5mbyA9IGxpbmVCb3VuZHNbaV07XG4gICAgICAgICAgaWYgKHBvc2l0aW9uSW5QYXRoID4gdG90YWxQYXRoTGVuZ3RoKSB7XG4gICAgICAgICAgICBwb3NpdGlvbkluUGF0aCAlPSB0b3RhbFBhdGhMZW5ndGg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKHBvc2l0aW9uSW5QYXRoIDwgMCkge1xuICAgICAgICAgICAgcG9zaXRpb25JblBhdGggKz0gdG90YWxQYXRoTGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBpdCB3b3VsZCBwcm9iYWJseSBtdWNoIGZhc3RlciB0byBzZW5kIGFsbCB0aGUgZ3JhcGhlbWUgcG9zaXRpb24gZm9yIGEgbGluZVxuICAgICAgICAgIC8vIGFuZCBjYWxjdWxhdGUgcGF0aCBwb3NpdGlvbi9hbmdsZSBhdCBvbmNlLlxuICAgICAgICAgIHRoaXMuX3NldEdyYXBoZW1lT25QYXRoKHBvc2l0aW9uSW5QYXRoLCBncmFwaGVtZUluZm8sIHN0YXJ0aW5nUG9pbnQpO1xuICAgICAgICAgIHBvc2l0aW9uSW5QYXRoICs9IGdyYXBoZW1lSW5mby5rZXJuZWRXaWR0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHsgd2lkdGg6IHdpZHRoLCBudW1PZlNwYWNlczogbnVtT2ZTcGFjZXMgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBhbmdsZSAgYW5kIHRoZSBsZWZ0LHRvcCBwb3NpdGlvbiBvZiB0aGUgY2hhciB0aGF0IGZvbGxvdyBhIHBhdGguXG4gICAgICogSXQgYXBwZW5kcyBpdCB0byBncmFwaGVtZUluZm8gdG8gYmUgcmV1c2VkIGxhdGVyIGF0IHJlbmRlcmluZ1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uSW5QYXRoIHRvIGJlIG1lYXN1cmVkXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGdyYXBoZW1lSW5mbyBjdXJyZW50IGdyYXBoZW1lIGJveCBpbmZvcm1hdGlvblxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFydGluZ1BvaW50IHBvc2l0aW9uIG9mIHRoZSBwb2ludFxuICAgICAqL1xuICAgIF9zZXRHcmFwaGVtZU9uUGF0aDogZnVuY3Rpb24ocG9zaXRpb25JblBhdGgsIGdyYXBoZW1lSW5mbywgc3RhcnRpbmdQb2ludCkge1xuICAgICAgdmFyIGNlbnRlclBvc2l0aW9uID0gcG9zaXRpb25JblBhdGggKyBncmFwaGVtZUluZm8ua2VybmVkV2lkdGggLyAyLFxuICAgICAgICAgIHBhdGggPSB0aGlzLnBhdGg7XG5cbiAgICAgIC8vIHdlIGFyZSBhdCBjdXJyZW50UG9zaXRpb25PblBhdGguIHdlIHdhbnQgdG8ga25vdyB3aGF0IHBvaW50IG9uIHRoZSBwYXRoIGlzLlxuICAgICAgdmFyIGluZm8gPSBmYWJyaWMudXRpbC5nZXRQb2ludE9uUGF0aChwYXRoLnBhdGgsIGNlbnRlclBvc2l0aW9uLCBwYXRoLnNlZ21lbnRzSW5mbyk7XG4gICAgICBncmFwaGVtZUluZm8ucmVuZGVyTGVmdCA9IGluZm8ueCAtIHN0YXJ0aW5nUG9pbnQueDtcbiAgICAgIGdyYXBoZW1lSW5mby5yZW5kZXJUb3AgPSBpbmZvLnkgLSBzdGFydGluZ1BvaW50Lnk7XG4gICAgICBncmFwaGVtZUluZm8uYW5nbGUgPSBpbmZvLmFuZ2xlICsgKHRoaXMucGF0aFNpZGUgPT09ICAncmlnaHQnID8gTWF0aC5QSSA6IDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNZWFzdXJlIGFuZCByZXR1cm4gdGhlIGluZm8gb2YgYSBzaW5nbGUgZ3JhcGhlbWUuXG4gICAgICogbmVlZHMgdGhlIHRoZSBpbmZvIG9mIHByZXZpb3VzIGdyYXBoZW1lcyBhbHJlYWR5IGZpbGxlZFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGdyYXBoZW1lIHRvIGJlIG1lYXN1cmVkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCBpbmRleCBvZiB0aGUgbGluZSB3aGVyZSB0aGUgY2hhciBpc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXggcG9zaXRpb24gaW4gdGhlIGxpbmVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW3ByZXZHcmFwaGVtZV0gY2hhcmFjdGVyIHByZWNlZGluZyB0aGUgb25lIHRvIGJlIG1lYXN1cmVkXG4gICAgICovXG4gICAgX2dldEdyYXBoZW1lQm94OiBmdW5jdGlvbihncmFwaGVtZSwgbGluZUluZGV4LCBjaGFySW5kZXgsIHByZXZHcmFwaGVtZSwgc2tpcExlZnQpIHtcbiAgICAgIHZhciBzdHlsZSA9IHRoaXMuZ2V0Q29tcGxldGVTdHlsZURlY2xhcmF0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4KSxcbiAgICAgICAgICBwcmV2U3R5bGUgPSBwcmV2R3JhcGhlbWUgPyB0aGlzLmdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCAtIDEpIDogeyB9LFxuICAgICAgICAgIGluZm8gPSB0aGlzLl9tZWFzdXJlQ2hhcihncmFwaGVtZSwgc3R5bGUsIHByZXZHcmFwaGVtZSwgcHJldlN0eWxlKSxcbiAgICAgICAgICBrZXJuZWRXaWR0aCA9IGluZm8ua2VybmVkV2lkdGgsXG4gICAgICAgICAgd2lkdGggPSBpbmZvLndpZHRoLCBjaGFyU3BhY2luZztcblxuICAgICAgaWYgKHRoaXMuY2hhclNwYWNpbmcgIT09IDApIHtcbiAgICAgICAgY2hhclNwYWNpbmcgPSB0aGlzLl9nZXRXaWR0aE9mQ2hhclNwYWNpbmcoKTtcbiAgICAgICAgd2lkdGggKz0gY2hhclNwYWNpbmc7XG4gICAgICAgIGtlcm5lZFdpZHRoICs9IGNoYXJTcGFjaW5nO1xuICAgICAgfVxuXG4gICAgICB2YXIgYm94ID0ge1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIGhlaWdodDogc3R5bGUuZm9udFNpemUsXG4gICAgICAgIGtlcm5lZFdpZHRoOiBrZXJuZWRXaWR0aCxcbiAgICAgICAgZGVsdGFZOiBzdHlsZS5kZWx0YVksXG4gICAgICB9O1xuICAgICAgaWYgKGNoYXJJbmRleCA+IDAgJiYgIXNraXBMZWZ0KSB7XG4gICAgICAgIHZhciBwcmV2aW91c0JveCA9IHRoaXMuX19jaGFyQm91bmRzW2xpbmVJbmRleF1bY2hhckluZGV4IC0gMV07XG4gICAgICAgIGJveC5sZWZ0ID0gcHJldmlvdXNCb3gubGVmdCArIHByZXZpb3VzQm94LndpZHRoICsgaW5mby5rZXJuZWRXaWR0aCAtIGluZm8ud2lkdGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYm94O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGUgaGVpZ2h0IG9mIGxpbmUgYXQgJ2xpbmVJbmRleCdcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4IGluZGV4IG9mIGxpbmUgdG8gY2FsY3VsYXRlXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxuICAgICAqL1xuICAgIGdldEhlaWdodE9mTGluZTogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICBpZiAodGhpcy5fX2xpbmVIZWlnaHRzW2xpbmVJbmRleF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19saW5lSGVpZ2h0c1tsaW5lSW5kZXhdO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tsaW5lSW5kZXhdLFxuICAgICAgICAgIC8vIGNoYXIgMCBpcyBtZWFzdXJlZCBiZWZvcmUgdGhlIGxpbmUgY3ljbGUgYmVjYXVzZSBpdCBubmVkcyB0byBjaGFyXG4gICAgICAgICAgLy8gZW1wdHlsaW5lc1xuICAgICAgICAgIG1heEhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0T2ZDaGFyKGxpbmVJbmRleCwgMCk7XG4gICAgICBmb3IgKHZhciBpID0gMSwgbGVuID0gbGluZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBtYXhIZWlnaHQgPSBNYXRoLm1heCh0aGlzLmdldEhlaWdodE9mQ2hhcihsaW5lSW5kZXgsIGkpLCBtYXhIZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fX2xpbmVIZWlnaHRzW2xpbmVJbmRleF0gPSBtYXhIZWlnaHQgKiB0aGlzLmxpbmVIZWlnaHQgKiB0aGlzLl9mb250U2l6ZU11bHQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0ZXh0IGJveCBoZWlnaHRcbiAgICAgKi9cbiAgICBjYWxjVGV4dEhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGluZUhlaWdodCwgaGVpZ2h0ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLl90ZXh0TGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgbGluZUhlaWdodCA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpO1xuICAgICAgICBoZWlnaHQgKz0gKGkgPT09IGxlbiAtIDEgPyBsaW5lSGVpZ2h0IC8gdGhpcy5saW5lSGVpZ2h0IDogbGluZUhlaWdodCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gTGVmdCBvZmZzZXRcbiAgICAgKi9cbiAgICBfZ2V0TGVmdE9mZnNldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24gPT09ICdsdHInID8gLXRoaXMud2lkdGggLyAyIDogdGhpcy53aWR0aCAvIDI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBUb3Agb2Zmc2V0XG4gICAgICovXG4gICAgX2dldFRvcE9mZnNldDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gLXRoaXMuaGVpZ2h0IC8gMjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZCBNZXRob2QgbmFtZSAoXCJmaWxsVGV4dFwiIG9yIFwic3Ryb2tlVGV4dFwiKVxuICAgICAqL1xuICAgIF9yZW5kZXJUZXh0Q29tbW9uOiBmdW5jdGlvbihjdHgsIG1ldGhvZCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIHZhciBsaW5lSGVpZ2h0cyA9IDAsIGxlZnQgPSB0aGlzLl9nZXRMZWZ0T2Zmc2V0KCksIHRvcCA9IHRoaXMuX2dldFRvcE9mZnNldCgpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX3RleHRMaW5lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgaGVpZ2h0T2ZMaW5lID0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoaSksXG4gICAgICAgICAgICBtYXhIZWlnaHQgPSBoZWlnaHRPZkxpbmUgLyB0aGlzLmxpbmVIZWlnaHQsXG4gICAgICAgICAgICBsZWZ0T2Zmc2V0ID0gdGhpcy5fZ2V0TGluZUxlZnRPZmZzZXQoaSk7XG4gICAgICAgIHRoaXMuX3JlbmRlclRleHRMaW5lKFxuICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICBjdHgsXG4gICAgICAgICAgdGhpcy5fdGV4dExpbmVzW2ldLFxuICAgICAgICAgIGxlZnQgKyBsZWZ0T2Zmc2V0LFxuICAgICAgICAgIHRvcCArIGxpbmVIZWlnaHRzICsgbWF4SGVpZ2h0LFxuICAgICAgICAgIGlcbiAgICAgICAgKTtcbiAgICAgICAgbGluZUhlaWdodHMgKz0gaGVpZ2h0T2ZMaW5lO1xuICAgICAgfVxuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlclRleHRGaWxsOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICghdGhpcy5maWxsICYmICF0aGlzLnN0eWxlSGFzKCdmaWxsJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW5kZXJUZXh0Q29tbW9uKGN0eCwgJ2ZpbGxUZXh0Jyk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJUZXh0U3Ryb2tlOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIGlmICgoIXRoaXMuc3Ryb2tlIHx8IHRoaXMuc3Ryb2tlV2lkdGggPT09IDApICYmIHRoaXMuaXNFbXB0eVN0eWxlcygpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2hhZG93ICYmICF0aGlzLnNoYWRvdy5hZmZlY3RTdHJva2UpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlU2hhZG93KGN0eCk7XG4gICAgICB9XG5cbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICB0aGlzLl9zZXRMaW5lRGFzaChjdHgsIHRoaXMuc3Ryb2tlRGFzaEFycmF5KTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHRoaXMuX3JlbmRlclRleHRDb21tb24oY3R4LCAnc3Ryb2tlVGV4dCcpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIGZpbGxUZXh0IG9yIHN0cm9rZVRleHQuXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGxpbmUgQ29udGVudCBvZiB0aGUgbGluZSwgc3BsaXR0ZWQgaW4gYW4gYXJyYXkgYnkgZ3JhcGhlbWVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGVmdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0b3BcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICovXG4gICAgX3JlbmRlckNoYXJzOiBmdW5jdGlvbihtZXRob2QsIGN0eCwgbGluZSwgbGVmdCwgdG9wLCBsaW5lSW5kZXgpIHtcbiAgICAgIC8vIHNldCBwcm9wZXIgbGluZSBvZmZzZXRcbiAgICAgIHZhciBsaW5lSGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHRPZkxpbmUobGluZUluZGV4KSxcbiAgICAgICAgICBpc0p1c3RpZnkgPSB0aGlzLnRleHRBbGlnbi5pbmRleE9mKCdqdXN0aWZ5JykgIT09IC0xLFxuICAgICAgICAgIGFjdHVhbFN0eWxlLFxuICAgICAgICAgIG5leHRTdHlsZSxcbiAgICAgICAgICBjaGFyc1RvUmVuZGVyID0gJycsXG4gICAgICAgICAgY2hhckJveCxcbiAgICAgICAgICBib3hXaWR0aCA9IDAsXG4gICAgICAgICAgdGltZVRvUmVuZGVyLFxuICAgICAgICAgIHBhdGggPSB0aGlzLnBhdGgsXG4gICAgICAgICAgc2hvcnRDdXQgPSAhaXNKdXN0aWZ5ICYmIHRoaXMuY2hhclNwYWNpbmcgPT09IDAgJiYgdGhpcy5pc0VtcHR5U3R5bGVzKGxpbmVJbmRleCkgJiYgIXBhdGgsXG4gICAgICAgICAgaXNMdHIgPSB0aGlzLmRpcmVjdGlvbiA9PT0gJ2x0cicsIHNpZ24gPSB0aGlzLmRpcmVjdGlvbiA9PT0gJ2x0cicgPyAxIDogLTEsXG4gICAgICAgICAgZHJhd2luZ0xlZnQsIGN1cnJlbnREaXJlY3Rpb24gPSBjdHguY2FudmFzLmdldEF0dHJpYnV0ZSgnZGlyJyk7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgaWYgKGN1cnJlbnREaXJlY3Rpb24gIT09IHRoaXMuZGlyZWN0aW9uKSB7XG4gICAgICAgIGN0eC5jYW52YXMuc2V0QXR0cmlidXRlKCdkaXInLCBpc0x0ciA/ICdsdHInIDogJ3J0bCcpO1xuICAgICAgICBjdHguZGlyZWN0aW9uID0gaXNMdHIgPyAnbHRyJyA6ICdydGwnO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gaXNMdHIgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgICAgfVxuICAgICAgdG9wIC09IGxpbmVIZWlnaHQgKiB0aGlzLl9mb250U2l6ZUZyYWN0aW9uIC8gdGhpcy5saW5lSGVpZ2h0O1xuICAgICAgaWYgKHNob3J0Q3V0KSB7XG4gICAgICAgIC8vIHJlbmRlciBhbGwgdGhlIGxpbmUgaW4gb25lIHBhc3Mgd2l0aG91dCBjaGVja2luZ1xuICAgICAgICAvLyBkcmF3aW5nTGVmdCA9IGlzTHRyID8gbGVmdCA6IGxlZnQgLSB0aGlzLmdldExpbmVXaWR0aChsaW5lSW5kZXgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJDaGFyKG1ldGhvZCwgY3R4LCBsaW5lSW5kZXgsIDAsIGxpbmUuam9pbignJyksIGxlZnQsIHRvcCwgbGluZUhlaWdodCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaW5lLmxlbmd0aCAtIDE7IGkgPD0gbGVuOyBpKyspIHtcbiAgICAgICAgdGltZVRvUmVuZGVyID0gaSA9PT0gbGVuIHx8IHRoaXMuY2hhclNwYWNpbmcgfHwgcGF0aDtcbiAgICAgICAgY2hhcnNUb1JlbmRlciArPSBsaW5lW2ldO1xuICAgICAgICBjaGFyQm94ID0gdGhpcy5fX2NoYXJCb3VuZHNbbGluZUluZGV4XVtpXTtcbiAgICAgICAgaWYgKGJveFdpZHRoID09PSAwKSB7XG4gICAgICAgICAgbGVmdCArPSBzaWduICogKGNoYXJCb3gua2VybmVkV2lkdGggLSBjaGFyQm94LndpZHRoKTtcbiAgICAgICAgICBib3hXaWR0aCArPSBjaGFyQm94LndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJveFdpZHRoICs9IGNoYXJCb3gua2VybmVkV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSnVzdGlmeSAmJiAhdGltZVRvUmVuZGVyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3JlU3BhY2VBbmRUYWIudGVzdChsaW5lW2ldKSkge1xuICAgICAgICAgICAgdGltZVRvUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aW1lVG9SZW5kZXIpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGNoYXJTcGFjaW5nLCB3ZSByZW5kZXIgY2hhciBieSBjaGFyXG4gICAgICAgICAgYWN0dWFsU3R5bGUgPSBhY3R1YWxTdHlsZSB8fCB0aGlzLmdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbihsaW5lSW5kZXgsIGkpO1xuICAgICAgICAgIG5leHRTdHlsZSA9IHRoaXMuZ2V0Q29tcGxldGVTdHlsZURlY2xhcmF0aW9uKGxpbmVJbmRleCwgaSArIDEpO1xuICAgICAgICAgIHRpbWVUb1JlbmRlciA9IHRoaXMuX2hhc1N0eWxlQ2hhbmdlZChhY3R1YWxTdHlsZSwgbmV4dFN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZVRvUmVuZGVyKSB7XG4gICAgICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHgudHJhbnNsYXRlKGNoYXJCb3gucmVuZGVyTGVmdCwgY2hhckJveC5yZW5kZXJUb3ApO1xuICAgICAgICAgICAgY3R4LnJvdGF0ZShjaGFyQm94LmFuZ2xlKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckNoYXIobWV0aG9kLCBjdHgsIGxpbmVJbmRleCwgaSwgY2hhcnNUb1JlbmRlciwgLWJveFdpZHRoIC8gMiwgMCwgbGluZUhlaWdodCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRyYXdpbmdMZWZ0ID0gbGVmdDtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckNoYXIobWV0aG9kLCBjdHgsIGxpbmVJbmRleCwgaSwgY2hhcnNUb1JlbmRlciwgZHJhd2luZ0xlZnQsIHRvcCwgbGluZUhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoYXJzVG9SZW5kZXIgPSAnJztcbiAgICAgICAgICBhY3R1YWxTdHlsZSA9IG5leHRTdHlsZTtcbiAgICAgICAgICBsZWZ0ICs9IHNpZ24gKiBib3hXaWR0aDtcbiAgICAgICAgICBib3hXaWR0aCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gdHJ5IHRvIHBhdGNoIHRoZSBtaXNzaW5nIGdyYWRpZW50VHJhbnNmb3JtIG9uIGNhbnZhcyBncmFkaWVudHMuXG4gICAgICogdHJhbnNmb3JtaW5nIGEgY29udGV4dCB0byB0cmFuc2Zvcm0gdGhlIGdyYWRpZW50LCBpcyBnb2luZyB0byB0cmFuc2Zvcm0gdGhlIHN0cm9rZSB0b28uXG4gICAgICogd2Ugd2FudCB0byB0cmFuc2Zvcm0gdGhlIGdyYWRpZW50IGJ1dCBub3QgdGhlIHN0cm9rZSBvcGVyYXRpb24sIHNvIHdlIGNyZWF0ZVxuICAgICAqIGEgdHJhbnNmb3JtZWQgZ3JhZGllbnQgb24gYSBwYXR0ZXJuIGFuZCB0aGVuIHdlIHVzZSB0aGUgcGF0dGVybiBpbnN0ZWFkIG9mIHRoZSBncmFkaWVudC5cbiAgICAgKiB0aGlzIG1ldGhvZCBoYXMgZHJhd2JhY2tzOiBpcyBzbG93LCBpcyBpbiBsb3cgcmVzb2x1dGlvbiwgbmVlZHMgYSBwYXRjaCBmb3Igd2hlbiB0aGUgc2l6ZVxuICAgICAqIGlzIGxpbWl0ZWQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2ZhYnJpYy5HcmFkaWVudH0gZmlsbGVyIGEgZmFicmljIGdyYWRpZW50IGluc3RhbmNlXG4gICAgICogQHJldHVybiB7Q2FudmFzUGF0dGVybn0gYSBwYXR0ZXJuIHRvIHVzZSBhcyBmaWxsL3N0cm9rZSBzdHlsZVxuICAgICAqL1xuICAgIF9hcHBseVBhdHRlcm5HcmFkaWVudFRyYW5zZm9ybVRleHQ6IGZ1bmN0aW9uKGZpbGxlcikge1xuICAgICAgdmFyIHBDYW52YXMgPSBmYWJyaWMudXRpbC5jcmVhdGVDYW52YXNFbGVtZW50KCksIHBDdHgsXG4gICAgICAgICAgLy8gVE9ETzogdmVyaWZ5IGNvbXBhdGliaWxpdHkgd2l0aCBzdHJva2VVbmlmb3JtXG4gICAgICAgICAgd2lkdGggPSB0aGlzLndpZHRoICsgdGhpcy5zdHJva2VXaWR0aCwgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKyB0aGlzLnN0cm9rZVdpZHRoO1xuICAgICAgcENhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgcENhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICBwQ3R4ID0gcENhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgcEN0eC5iZWdpblBhdGgoKTsgcEN0eC5tb3ZlVG8oMCwgMCk7IHBDdHgubGluZVRvKHdpZHRoLCAwKTsgcEN0eC5saW5lVG8od2lkdGgsIGhlaWdodCk7XG4gICAgICBwQ3R4LmxpbmVUbygwLCBoZWlnaHQpOyBwQ3R4LmNsb3NlUGF0aCgpO1xuICAgICAgcEN0eC50cmFuc2xhdGUod2lkdGggLyAyLCBoZWlnaHQgLyAyKTtcbiAgICAgIHBDdHguZmlsbFN0eWxlID0gZmlsbGVyLnRvTGl2ZShwQ3R4KTtcbiAgICAgIHRoaXMuX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtKHBDdHgsIGZpbGxlcik7XG4gICAgICBwQ3R4LmZpbGwoKTtcbiAgICAgIHJldHVybiBwQ3R4LmNyZWF0ZVBhdHRlcm4ocENhbnZhcywgJ25vLXJlcGVhdCcpO1xuICAgIH0sXG5cbiAgICBoYW5kbGVGaWxsZXI6IGZ1bmN0aW9uKGN0eCwgcHJvcGVydHksIGZpbGxlcikge1xuICAgICAgdmFyIG9mZnNldFgsIG9mZnNldFk7XG4gICAgICBpZiAoZmlsbGVyLnRvTGl2ZSkge1xuICAgICAgICBpZiAoZmlsbGVyLmdyYWRpZW50VW5pdHMgPT09ICdwZXJjZW50YWdlJyB8fCBmaWxsZXIuZ3JhZGllbnRUcmFuc2Zvcm0gfHwgZmlsbGVyLnBhdHRlcm5UcmFuc2Zvcm0pIHtcbiAgICAgICAgICAvLyBuZWVkIHRvIHRyYW5zZm9ybSBncmFkaWVudCBpbiBhIHBhdHRlcm4uXG4gICAgICAgICAgLy8gdGhpcyBpcyBhIHNsb3cgcHJvY2Vzcy4gSWYgeW91IGFyZSBoaXR0aW5nIHRoaXMgY29kZXBhdGgsIGFuZCB0aGUgb2JqZWN0XG4gICAgICAgICAgLy8gaXMgbm90IHVzaW5nIGNhY2hpbmcsIHlvdSBzaG91bGQgY29uc2lkZXIgc3dpdGNoaW5nIGl0IG9uLlxuICAgICAgICAgIC8vIHdlIG5lZWQgYSBjYW52YXMgYXMgYmlnIGFzIHRoZSBjdXJyZW50IG9iamVjdCBjYWNoaW5nIGNhbnZhcy5cbiAgICAgICAgICBvZmZzZXRYID0gLXRoaXMud2lkdGggLyAyO1xuICAgICAgICAgIG9mZnNldFkgPSAtdGhpcy5oZWlnaHQgLyAyO1xuICAgICAgICAgIGN0eC50cmFuc2xhdGUob2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICAgICAgY3R4W3Byb3BlcnR5XSA9IHRoaXMuX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtVGV4dChmaWxsZXIpO1xuICAgICAgICAgIHJldHVybiB7IG9mZnNldFg6IG9mZnNldFgsIG9mZnNldFk6IG9mZnNldFkgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvLyBpcyBhIHNpbXBsZSBncmFkaWVudCBvciBwYXR0ZXJuXG4gICAgICAgICAgY3R4W3Byb3BlcnR5XSA9IGZpbGxlci50b0xpdmUoY3R4LCB0aGlzKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm0oY3R4LCBmaWxsZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gaXMgYSBjb2xvclxuICAgICAgICBjdHhbcHJvcGVydHldID0gZmlsbGVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgb2Zmc2V0WDogMCwgb2Zmc2V0WTogMCB9O1xuICAgIH0sXG5cbiAgICBfc2V0U3Ryb2tlU3R5bGVzOiBmdW5jdGlvbihjdHgsIGRlY2wpIHtcbiAgICAgIGN0eC5saW5lV2lkdGggPSBkZWNsLnN0cm9rZVdpZHRoO1xuICAgICAgY3R4LmxpbmVDYXAgPSB0aGlzLnN0cm9rZUxpbmVDYXA7XG4gICAgICBjdHgubGluZURhc2hPZmZzZXQgPSB0aGlzLnN0cm9rZURhc2hPZmZzZXQ7XG4gICAgICBjdHgubGluZUpvaW4gPSB0aGlzLnN0cm9rZUxpbmVKb2luO1xuICAgICAgY3R4Lm1pdGVyTGltaXQgPSB0aGlzLnN0cm9rZU1pdGVyTGltaXQ7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVGaWxsZXIoY3R4LCAnc3Ryb2tlU3R5bGUnLCBkZWNsLnN0cm9rZSk7XG4gICAgfSxcblxuICAgIF9zZXRGaWxsU3R5bGVzOiBmdW5jdGlvbihjdHgsIGRlY2wpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZUZpbGxlcihjdHgsICdmaWxsU3R5bGUnLCBkZWNsLmZpbGwpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gX2NoYXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGVmdCBMZWZ0IGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdG9wIFRvcCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVIZWlnaHQgSGVpZ2h0IG9mIHRoZSBsaW5lXG4gICAgICovXG4gICAgX3JlbmRlckNoYXI6IGZ1bmN0aW9uKG1ldGhvZCwgY3R4LCBsaW5lSW5kZXgsIGNoYXJJbmRleCwgX2NoYXIsIGxlZnQsIHRvcCkge1xuICAgICAgdmFyIGRlY2wgPSB0aGlzLl9nZXRTdHlsZURlY2xhcmF0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4KSxcbiAgICAgICAgICBmdWxsRGVjbCA9IHRoaXMuZ2V0Q29tcGxldGVTdHlsZURlY2xhcmF0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4KSxcbiAgICAgICAgICBzaG91bGRGaWxsID0gbWV0aG9kID09PSAnZmlsbFRleHQnICYmIGZ1bGxEZWNsLmZpbGwsXG4gICAgICAgICAgc2hvdWxkU3Ryb2tlID0gbWV0aG9kID09PSAnc3Ryb2tlVGV4dCcgJiYgZnVsbERlY2wuc3Ryb2tlICYmIGZ1bGxEZWNsLnN0cm9rZVdpZHRoLFxuICAgICAgICAgIGZpbGxPZmZzZXRzLCBzdHJva2VPZmZzZXRzO1xuXG4gICAgICBpZiAoIXNob3VsZFN0cm9rZSAmJiAhc2hvdWxkRmlsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguc2F2ZSgpO1xuXG4gICAgICBzaG91bGRGaWxsICYmIChmaWxsT2Zmc2V0cyA9IHRoaXMuX3NldEZpbGxTdHlsZXMoY3R4LCBmdWxsRGVjbCkpO1xuICAgICAgc2hvdWxkU3Ryb2tlICYmIChzdHJva2VPZmZzZXRzID0gdGhpcy5fc2V0U3Ryb2tlU3R5bGVzKGN0eCwgZnVsbERlY2wpKTtcblxuICAgICAgY3R4LmZvbnQgPSB0aGlzLl9nZXRGb250RGVjbGFyYXRpb24oZnVsbERlY2wpO1xuXG5cbiAgICAgIGlmIChkZWNsICYmIGRlY2wudGV4dEJhY2tncm91bmRDb2xvcikge1xuICAgICAgICB0aGlzLl9yZW1vdmVTaGFkb3coY3R4KTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWNsICYmIGRlY2wuZGVsdGFZKSB7XG4gICAgICAgIHRvcCArPSBkZWNsLmRlbHRhWTtcbiAgICAgIH1cbiAgICAgIHNob3VsZEZpbGwgJiYgY3R4LmZpbGxUZXh0KF9jaGFyLCBsZWZ0IC0gZmlsbE9mZnNldHMub2Zmc2V0WCwgdG9wIC0gZmlsbE9mZnNldHMub2Zmc2V0WSk7XG4gICAgICBzaG91bGRTdHJva2UgJiYgY3R4LnN0cm9rZVRleHQoX2NoYXIsIGxlZnQgLSBzdHJva2VPZmZzZXRzLm9mZnNldFgsIHRvcCAtIHN0cm9rZU9mZnNldHMub2Zmc2V0WSk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBUdXJucyB0aGUgY2hhcmFjdGVyIGludG8gYSAnc3VwZXJpb3IgZmlndXJlJyAoaS5lLiAnc3VwZXJzY3JpcHQnKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBzZWxlY3Rpb24gc3RhcnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIHNlbGVjdGlvbiBlbmRcbiAgICAgKiBAcmV0dXJucyB7ZmFicmljLlRleHR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0U3VwZXJzY3JpcHQ6IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXRTY3JpcHQoc3RhcnQsIGVuZCwgdGhpcy5zdXBlcnNjcmlwdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFR1cm5zIHRoZSBjaGFyYWN0ZXIgaW50byBhbiAnaW5mZXJpb3IgZmlndXJlJyAoaS5lLiAnc3Vic2NyaXB0JylcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgc2VsZWN0aW9uIHN0YXJ0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZCBzZWxlY3Rpb24gZW5kXG4gICAgICogQHJldHVybnMge2ZhYnJpYy5UZXh0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNldFN1YnNjcmlwdDogZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NldFNjcmlwdChzdGFydCwgZW5kLCB0aGlzLnN1YnNjcmlwdCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgJ3NjaGVtYScgYXQgZ2l2ZW4gcG9zaXRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydCBzZWxlY3Rpb24gc3RhcnRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIHNlbGVjdGlvbiBlbmRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NoZW1hXG4gICAgICogQHJldHVybnMge2ZhYnJpYy5UZXh0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIF9zZXRTY3JpcHQ6IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHNjaGVtYSkge1xuICAgICAgdmFyIGxvYyA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihzdGFydCwgdHJ1ZSksXG4gICAgICAgICAgZm9udFNpemUgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGxvYy5saW5lSW5kZXgsIGxvYy5jaGFySW5kZXgsICdmb250U2l6ZScpLFxuICAgICAgICAgIGR5ID0gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChsb2MubGluZUluZGV4LCBsb2MuY2hhckluZGV4LCAnZGVsdGFZJyksXG4gICAgICAgICAgc3R5bGUgPSB7IGZvbnRTaXplOiBmb250U2l6ZSAqIHNjaGVtYS5zaXplLCBkZWx0YVk6IGR5ICsgZm9udFNpemUgKiBzY2hlbWEuYmFzZWxpbmUgfTtcbiAgICAgIHRoaXMuc2V0U2VsZWN0aW9uU3R5bGVzKHN0eWxlLCBzdGFydCwgZW5kKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcmV2U3R5bGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGhpc1N0eWxlXG4gICAgICovXG4gICAgX2hhc1N0eWxlQ2hhbmdlZDogZnVuY3Rpb24ocHJldlN0eWxlLCB0aGlzU3R5bGUpIHtcbiAgICAgIHJldHVybiBwcmV2U3R5bGUuZmlsbCAhPT0gdGhpc1N0eWxlLmZpbGwgfHxcbiAgICAgICAgICAgICAgcHJldlN0eWxlLnN0cm9rZSAhPT0gdGhpc1N0eWxlLnN0cm9rZSB8fFxuICAgICAgICAgICAgICBwcmV2U3R5bGUuc3Ryb2tlV2lkdGggIT09IHRoaXNTdHlsZS5zdHJva2VXaWR0aCB8fFxuICAgICAgICAgICAgICBwcmV2U3R5bGUuZm9udFNpemUgIT09IHRoaXNTdHlsZS5mb250U2l6ZSB8fFxuICAgICAgICAgICAgICBwcmV2U3R5bGUuZm9udEZhbWlseSAhPT0gdGhpc1N0eWxlLmZvbnRGYW1pbHkgfHxcbiAgICAgICAgICAgICAgcHJldlN0eWxlLmZvbnRXZWlnaHQgIT09IHRoaXNTdHlsZS5mb250V2VpZ2h0IHx8XG4gICAgICAgICAgICAgIHByZXZTdHlsZS5mb250U3R5bGUgIT09IHRoaXNTdHlsZS5mb250U3R5bGUgfHxcbiAgICAgICAgICAgICAgcHJldlN0eWxlLmRlbHRhWSAhPT0gdGhpc1N0eWxlLmRlbHRhWTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJldlN0eWxlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRoaXNTdHlsZVxuICAgICAqL1xuICAgIF9oYXNTdHlsZUNoYW5nZWRGb3JTdmc6IGZ1bmN0aW9uKHByZXZTdHlsZSwgdGhpc1N0eWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5faGFzU3R5bGVDaGFuZ2VkKHByZXZTdHlsZSwgdGhpc1N0eWxlKSB8fFxuICAgICAgICBwcmV2U3R5bGUub3ZlcmxpbmUgIT09IHRoaXNTdHlsZS5vdmVybGluZSB8fFxuICAgICAgICBwcmV2U3R5bGUudW5kZXJsaW5lICE9PSB0aGlzU3R5bGUudW5kZXJsaW5lIHx8XG4gICAgICAgIHByZXZTdHlsZS5saW5ldGhyb3VnaCAhPT0gdGhpc1N0eWxlLmxpbmV0aHJvdWdoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggaW5kZXggdGV4dCBsaW5lXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBMaW5lIGxlZnQgb2Zmc2V0XG4gICAgICovXG4gICAgX2dldExpbmVMZWZ0T2Zmc2V0OiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIHZhciBsaW5lV2lkdGggPSB0aGlzLmdldExpbmVXaWR0aChsaW5lSW5kZXgpLFxuICAgICAgICAgIGxpbmVEaWZmID0gdGhpcy53aWR0aCAtIGxpbmVXaWR0aCwgdGV4dEFsaWduID0gdGhpcy50ZXh0QWxpZ24sIGRpcmVjdGlvbiA9IHRoaXMuZGlyZWN0aW9uLFxuICAgICAgICAgIGlzRW5kT2ZXcmFwcGluZywgbGVmdE9mZnNldCA9IDAsIGlzRW5kT2ZXcmFwcGluZyA9IHRoaXMuaXNFbmRPZldyYXBwaW5nKGxpbmVJbmRleCk7XG4gICAgICBpZiAodGV4dEFsaWduID09PSAnanVzdGlmeSdcbiAgICAgICAgfHwgKHRleHRBbGlnbiA9PT0gJ2p1c3RpZnktY2VudGVyJyAmJiAhaXNFbmRPZldyYXBwaW5nKVxuICAgICAgICB8fCAodGV4dEFsaWduID09PSAnanVzdGlmeS1yaWdodCcgJiYgIWlzRW5kT2ZXcmFwcGluZylcbiAgICAgICAgfHwgKHRleHRBbGlnbiA9PT0gJ2p1c3RpZnktbGVmdCcgJiYgIWlzRW5kT2ZXcmFwcGluZylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIGxlZnRPZmZzZXQgPSBsaW5lRGlmZiAvIDI7XG4gICAgICB9XG4gICAgICBpZiAodGV4dEFsaWduID09PSAncmlnaHQnKSB7XG4gICAgICAgIGxlZnRPZmZzZXQgPSBsaW5lRGlmZjtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdqdXN0aWZ5LWNlbnRlcicpIHtcbiAgICAgICAgbGVmdE9mZnNldCA9IGxpbmVEaWZmIC8gMjtcbiAgICAgIH1cbiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdqdXN0aWZ5LXJpZ2h0Jykge1xuICAgICAgICBsZWZ0T2Zmc2V0ID0gbGluZURpZmY7XG4gICAgICB9XG4gICAgICBpZiAoZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICBsZWZ0T2Zmc2V0IC09IGxpbmVEaWZmO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxlZnRPZmZzZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NsZWFyQ2FjaGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fX2xpbmVXaWR0aHMgPSBbXTtcbiAgICAgIHRoaXMuX19saW5lSGVpZ2h0cyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYXJCb3VuZHMgPSBbXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2hvdWxkQ2xlYXJEaW1lbnNpb25DYWNoZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2hvdWxkQ2xlYXIgPSB0aGlzLl9mb3JjZUNsZWFyQ2FjaGU7XG4gICAgICBzaG91bGRDbGVhciB8fCAoc2hvdWxkQ2xlYXIgPSB0aGlzLmhhc1N0YXRlQ2hhbmdlZCgnX2RpbWVuc2lvbkFmZmVjdGluZ1Byb3BzJykpO1xuICAgICAgaWYgKHNob3VsZENsZWFyKSB7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9mb3JjZUNsZWFyQ2FjaGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaG91bGRDbGVhcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWVhc3VyZSBhIHNpbmdsZSBsaW5lIGdpdmVuIGl0cyBpbmRleC4gVXNlZCB0byBjYWxjdWxhdGUgdGhlIGluaXRpYWxcbiAgICAgKiB0ZXh0IGJvdW5kaW5nIGJveC4gVGhlIHZhbHVlcyBhcmUgY2FsY3VsYXRlZCBhbmQgc3RvcmVkIGluIF9fbGluZVdpZHRocyBjYWNoZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggbGluZSBudW1iZXJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IExpbmUgd2lkdGhcbiAgICAgKi9cbiAgICBnZXRMaW5lV2lkdGg6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgaWYgKHRoaXMuX19saW5lV2lkdGhzW2xpbmVJbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2xpbmVXaWR0aHNbbGluZUluZGV4XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGxpbmVJbmZvID0gdGhpcy5tZWFzdXJlTGluZShsaW5lSW5kZXgpO1xuICAgICAgdmFyIHdpZHRoID0gbGluZUluZm8ud2lkdGg7XG4gICAgICB0aGlzLl9fbGluZVdpZHRoc1tsaW5lSW5kZXhdID0gd2lkdGg7XG4gICAgICByZXR1cm4gd2lkdGg7XG4gICAgfSxcblxuICAgIF9nZXRXaWR0aE9mQ2hhclNwYWNpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuY2hhclNwYWNpbmcgIT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9udFNpemUgKiB0aGlzLmNoYXJTcGFjaW5nIC8gMTAwMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIG9mIHByb3BlcnR5IGF0IGdpdmVuIGNoYXJhY3RlciBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggdGhlIGxpbmUgbnVtYmVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleCB0aGUgY2hhcmFjdGVyIG51bWJlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSB0aGUgcHJvcGVydHkgbmFtZVxuICAgICAqIEByZXR1cm5zIHRoZSB2YWx1ZSBvZiAncHJvcGVydHknXG4gICAgICovXG4gICAgZ2V0VmFsdWVPZlByb3BlcnR5QXQ6IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4LCBwcm9wZXJ0eSkge1xuICAgICAgdmFyIGNoYXJTdHlsZSA9IHRoaXMuX2dldFN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBjaGFySW5kZXgpO1xuICAgICAgaWYgKGNoYXJTdHlsZSAmJiB0eXBlb2YgY2hhclN0eWxlW3Byb3BlcnR5XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJTdHlsZVtwcm9wZXJ0eV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1twcm9wZXJ0eV07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCBDb250ZXh0IHRvIHJlbmRlciBvblxuICAgICAqL1xuICAgIF9yZW5kZXJUZXh0RGVjb3JhdGlvbjogZnVuY3Rpb24oY3R4LCB0eXBlKSB7XG4gICAgICBpZiAoIXRoaXNbdHlwZV0gJiYgIXRoaXMuc3R5bGVIYXModHlwZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGhlaWdodE9mTGluZSwgc2l6ZSwgX3NpemUsXG4gICAgICAgICAgbGluZUxlZnRPZmZzZXQsIGR5LCBfZHksXG4gICAgICAgICAgbGluZSwgbGFzdERlY29yYXRpb24sXG4gICAgICAgICAgbGVmdE9mZnNldCA9IHRoaXMuX2dldExlZnRPZmZzZXQoKSxcbiAgICAgICAgICB0b3BPZmZzZXQgPSB0aGlzLl9nZXRUb3BPZmZzZXQoKSwgdG9wLFxuICAgICAgICAgIGJveFN0YXJ0LCBib3hXaWR0aCwgY2hhckJveCwgY3VycmVudERlY29yYXRpb24sXG4gICAgICAgICAgbWF4SGVpZ2h0LCBjdXJyZW50RmlsbCwgbGFzdEZpbGwsIHBhdGggPSB0aGlzLnBhdGgsXG4gICAgICAgICAgY2hhclNwYWNpbmcgPSB0aGlzLl9nZXRXaWR0aE9mQ2hhclNwYWNpbmcoKSxcbiAgICAgICAgICBvZmZzZXRZID0gdGhpcy5vZmZzZXRzW3R5cGVdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGhlaWdodE9mTGluZSA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpO1xuICAgICAgICBpZiAoIXRoaXNbdHlwZV0gJiYgIXRoaXMuc3R5bGVIYXModHlwZSwgaSkpIHtcbiAgICAgICAgICB0b3BPZmZzZXQgKz0gaGVpZ2h0T2ZMaW5lO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUgPSB0aGlzLl90ZXh0TGluZXNbaV07XG4gICAgICAgIG1heEhlaWdodCA9IGhlaWdodE9mTGluZSAvIHRoaXMubGluZUhlaWdodDtcbiAgICAgICAgbGluZUxlZnRPZmZzZXQgPSB0aGlzLl9nZXRMaW5lTGVmdE9mZnNldChpKTtcbiAgICAgICAgYm94U3RhcnQgPSAwO1xuICAgICAgICBib3hXaWR0aCA9IDA7XG4gICAgICAgIGxhc3REZWNvcmF0aW9uID0gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChpLCAwLCB0eXBlKTtcbiAgICAgICAgbGFzdEZpbGwgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIDAsICdmaWxsJyk7XG4gICAgICAgIHRvcCA9IHRvcE9mZnNldCArIG1heEhlaWdodCAqICgxIC0gdGhpcy5fZm9udFNpemVGcmFjdGlvbik7XG4gICAgICAgIHNpemUgPSB0aGlzLmdldEhlaWdodE9mQ2hhcihpLCAwKTtcbiAgICAgICAgZHkgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIDAsICdkZWx0YVknKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsZW4gPSBsaW5lLmxlbmd0aDsgaiA8IGpsZW47IGorKykge1xuICAgICAgICAgIGNoYXJCb3ggPSB0aGlzLl9fY2hhckJvdW5kc1tpXVtqXTtcbiAgICAgICAgICBjdXJyZW50RGVjb3JhdGlvbiA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgaiwgdHlwZSk7XG4gICAgICAgICAgY3VycmVudEZpbGwgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIGosICdmaWxsJyk7XG4gICAgICAgICAgX3NpemUgPSB0aGlzLmdldEhlaWdodE9mQ2hhcihpLCBqKTtcbiAgICAgICAgICBfZHkgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIGosICdkZWx0YVknKTtcbiAgICAgICAgICBpZiAocGF0aCAmJiBjdXJyZW50RGVjb3JhdGlvbiAmJiBjdXJyZW50RmlsbCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYXN0RmlsbDtcbiAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY2hhckJveC5yZW5kZXJMZWZ0LCBjaGFyQm94LnJlbmRlclRvcCk7XG4gICAgICAgICAgICBjdHgucm90YXRlKGNoYXJCb3guYW5nbGUpO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KFxuICAgICAgICAgICAgICAtY2hhckJveC5rZXJuZWRXaWR0aCAvIDIsXG4gICAgICAgICAgICAgIG9mZnNldFkgKiBfc2l6ZSArIF9keSxcbiAgICAgICAgICAgICAgY2hhckJveC5rZXJuZWRXaWR0aCxcbiAgICAgICAgICAgICAgdGhpcy5mb250U2l6ZSAvIDE1XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoXG4gICAgICAgICAgICAoY3VycmVudERlY29yYXRpb24gIT09IGxhc3REZWNvcmF0aW9uIHx8IGN1cnJlbnRGaWxsICE9PSBsYXN0RmlsbCB8fCBfc2l6ZSAhPT0gc2l6ZSB8fCBfZHkgIT09IGR5KVxuICAgICAgICAgICAgJiYgYm94V2lkdGggPiAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB2YXIgZHJhd1N0YXJ0ID0gbGVmdE9mZnNldCArIGxpbmVMZWZ0T2Zmc2V0ICsgYm94U3RhcnQ7XG4gICAgICAgICAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICAgICAgICAgIGRyYXdTdGFydCA9IHRoaXMud2lkdGggLSBkcmF3U3RhcnQgLSBib3hXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsYXN0RGVjb3JhdGlvbiAmJiBsYXN0RmlsbCkge1xuICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFzdEZpbGw7XG4gICAgICAgICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAgICAgICBkcmF3U3RhcnQsXG4gICAgICAgICAgICAgICAgdG9wICsgb2Zmc2V0WSAqIHNpemUgKyBkeSxcbiAgICAgICAgICAgICAgICBib3hXaWR0aCxcbiAgICAgICAgICAgICAgICB0aGlzLmZvbnRTaXplIC8gMTVcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJveFN0YXJ0ID0gY2hhckJveC5sZWZ0O1xuICAgICAgICAgICAgYm94V2lkdGggPSBjaGFyQm94LndpZHRoO1xuICAgICAgICAgICAgbGFzdERlY29yYXRpb24gPSBjdXJyZW50RGVjb3JhdGlvbjtcbiAgICAgICAgICAgIGxhc3RGaWxsID0gY3VycmVudEZpbGw7XG4gICAgICAgICAgICBzaXplID0gX3NpemU7XG4gICAgICAgICAgICBkeSA9IF9keTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib3hXaWR0aCArPSBjaGFyQm94Lmtlcm5lZFdpZHRoO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZHJhd1N0YXJ0ID0gbGVmdE9mZnNldCArIGxpbmVMZWZ0T2Zmc2V0ICsgYm94U3RhcnQ7XG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICBkcmF3U3RhcnQgPSB0aGlzLndpZHRoIC0gZHJhd1N0YXJ0IC0gYm94V2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGN1cnJlbnRGaWxsO1xuICAgICAgICBjdXJyZW50RGVjb3JhdGlvbiAmJiBjdXJyZW50RmlsbCAmJiBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgZHJhd1N0YXJ0LFxuICAgICAgICAgIHRvcCArIG9mZnNldFkgKiBzaXplICsgZHksXG4gICAgICAgICAgYm94V2lkdGggLSBjaGFyU3BhY2luZyxcbiAgICAgICAgICB0aGlzLmZvbnRTaXplIC8gMTVcbiAgICAgICAgKTtcbiAgICAgICAgdG9wT2Zmc2V0ICs9IGhlaWdodE9mTGluZTtcbiAgICAgIH1cbiAgICAgIC8vIGlmIHRoZXJlIGlzIHRleHQgYmFja2dyb3VuZCBjb2xvciBub1xuICAgICAgLy8gb3RoZXIgc2hhZG93cyBzaG91bGQgYmUgY2FzdGVkXG4gICAgICB0aGlzLl9yZW1vdmVTaGFkb3coY3R4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIGZvbnQgZGVjbGFyYXRpb24gc3RyaW5nIGZvciBjYW52YXMgY29udGV4dFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3R5bGVPYmplY3RdIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IGZvbnQgZGVjbGFyYXRpb24gZm9ybWF0dGVkIGZvciBjYW52YXMgY29udGV4dC5cbiAgICAgKi9cbiAgICBfZ2V0Rm9udERlY2xhcmF0aW9uOiBmdW5jdGlvbihzdHlsZU9iamVjdCwgZm9yTWVhc3VyaW5nKSB7XG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZU9iamVjdCB8fCB0aGlzLCBmYW1pbHkgPSB0aGlzLmZvbnRGYW1pbHksXG4gICAgICAgICAgZm9udElzR2VuZXJpYyA9IGZhYnJpYy5UZXh0LmdlbmVyaWNGb250cy5pbmRleE9mKGZhbWlseS50b0xvd2VyQ2FzZSgpKSA+IC0xO1xuICAgICAgdmFyIGZvbnRGYW1pbHkgPSBmYW1pbHkgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgZmFtaWx5LmluZGV4T2YoJ1xcJycpID4gLTEgfHwgZmFtaWx5LmluZGV4T2YoJywnKSA+IC0xIHx8XG4gICAgICBmYW1pbHkuaW5kZXhPZignXCInKSA+IC0xIHx8IGZvbnRJc0dlbmVyaWNcbiAgICAgICAgPyBzdHlsZS5mb250RmFtaWx5IDogJ1wiJyArIHN0eWxlLmZvbnRGYW1pbHkgKyAnXCInO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLy8gbm9kZS1jYW52YXMgbmVlZHMgXCJ3ZWlnaHQgc3R5bGVcIiwgd2hpbGUgYnJvd3NlcnMgbmVlZCBcInN0eWxlIHdlaWdodFwiXG4gICAgICAgIC8vIHZlcmlmeSBpZiB0aGlzIGNhbiBiZSBmaXhlZCBpbiBKU0RPTVxuICAgICAgICAoZmFicmljLmlzTGlrZWx5Tm9kZSA/IHN0eWxlLmZvbnRXZWlnaHQgOiBzdHlsZS5mb250U3R5bGUpLFxuICAgICAgICAoZmFicmljLmlzTGlrZWx5Tm9kZSA/IHN0eWxlLmZvbnRTdHlsZSA6IHN0eWxlLmZvbnRXZWlnaHQpLFxuICAgICAgICBmb3JNZWFzdXJpbmcgPyB0aGlzLkNBQ0hFX0ZPTlRfU0laRSArICdweCcgOiBzdHlsZS5mb250U2l6ZSArICdweCcsXG4gICAgICAgIGZvbnRGYW1pbHlcbiAgICAgIF0uam9pbignICcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRleHQgaW5zdGFuY2Ugb24gYSBzcGVjaWZpZWQgY29udGV4dFxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICByZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgLy8gZG8gbm90IHJlbmRlciBpZiBvYmplY3QgaXMgbm90IHZpc2libGVcbiAgICAgIGlmICghdGhpcy52aXNpYmxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5za2lwT2Zmc2NyZWVuICYmICF0aGlzLmdyb3VwICYmICF0aGlzLmlzT25TY3JlZW4oKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fc2hvdWxkQ2xlYXJEaW1lbnNpb25DYWNoZSgpKSB7XG4gICAgICAgIHRoaXMuaW5pdERpbWVuc2lvbnMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdyZW5kZXInLCBjdHgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZXh0IGFzIGFuIGFycmF5IG9mIGxpbmVzLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0ZXh0IHRleHQgdG8gc3BsaXRcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IExpbmVzIGluIHRoZSB0ZXh0XG4gICAgICovXG4gICAgX3NwbGl0VGV4dEludG9MaW5lczogZnVuY3Rpb24odGV4dCkge1xuICAgICAgdmFyIGxpbmVzID0gdGV4dC5zcGxpdCh0aGlzLl9yZU5ld2xpbmUpLFxuICAgICAgICAgIG5ld0xpbmVzID0gbmV3IEFycmF5KGxpbmVzLmxlbmd0aCksXG4gICAgICAgICAgbmV3TGluZSA9IFsnXFxuJ10sXG4gICAgICAgICAgbmV3VGV4dCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdMaW5lc1tpXSA9IGZhYnJpYy51dGlsLnN0cmluZy5ncmFwaGVtZVNwbGl0KGxpbmVzW2ldKTtcbiAgICAgICAgbmV3VGV4dCA9IG5ld1RleHQuY29uY2F0KG5ld0xpbmVzW2ldLCBuZXdMaW5lKTtcbiAgICAgIH1cbiAgICAgIG5ld1RleHQucG9wKCk7XG4gICAgICByZXR1cm4geyBfdW53cmFwcGVkTGluZXM6IG5ld0xpbmVzLCBsaW5lczogbGluZXMsIGdyYXBoZW1lVGV4dDogbmV3VGV4dCwgZ3JhcGhlbWVMaW5lczogbmV3TGluZXMgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcGVydGllc1RvSW5jbHVkZV0gQW55IHByb3BlcnRpZXMgdGhhdCB5b3UgbWlnaHQgd2FudCB0byBhZGRpdGlvbmFsbHkgaW5jbHVkZSBpbiB0aGUgb3V0cHV0XG4gICAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b09iamVjdDogZnVuY3Rpb24ocHJvcGVydGllc1RvSW5jbHVkZSkge1xuICAgICAgdmFyIGFsbFByb3BlcnRpZXMgPSBhZGRpdGlvbmFsUHJvcHMuY29uY2F0KHByb3BlcnRpZXNUb0luY2x1ZGUpO1xuICAgICAgdmFyIG9iaiA9IHRoaXMuY2FsbFN1cGVyKCd0b09iamVjdCcsIGFsbFByb3BlcnRpZXMpO1xuICAgICAgLy8gc3R5bGVzIHdpbGwgYmUgb3ZlcnJpZGRlbiB3aXRoIGEgcHJvcGVybHkgY2xvbmVkIHN0cnVjdHVyZVxuICAgICAgb2JqLnN0eWxlcyA9IGNsb25lKHRoaXMuc3R5bGVzLCB0cnVlKTtcbiAgICAgIGlmIChvYmoucGF0aCkge1xuICAgICAgICBvYmoucGF0aCA9IHRoaXMucGF0aC50b09iamVjdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0cyBwcm9wZXJ0eSB0byBhIGdpdmVuIHZhbHVlLiBXaGVuIGNoYW5naW5nIHBvc2l0aW9uL2RpbWVuc2lvbiAtcmVsYXRlZCBwcm9wZXJ0aWVzIChsZWZ0LCB0b3AsIHNjYWxlLCBhbmdsZSwgZXRjLikgYHNldGAgZG9lcyBub3QgdXBkYXRlIHBvc2l0aW9uIG9mIG9iamVjdCdzIGJvcmRlcnMvY29udHJvbHMuIElmIHlvdSBuZWVkIHRvIHVwZGF0ZSB0aG9zZSwgY2FsbCBgc2V0Q29vcmRzKClgLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0ga2V5IFByb3BlcnR5IG5hbWUgb3Igb2JqZWN0IChpZiBvYmplY3QsIGl0ZXJhdGUgb3ZlciB0aGUgb2JqZWN0IHByb3BlcnRpZXMpXG4gICAgICogQHBhcmFtIHtPYmplY3R8RnVuY3Rpb259IHZhbHVlIFByb3BlcnR5IHZhbHVlIChpZiBmdW5jdGlvbiwgdGhlIHZhbHVlIGlzIHBhc3NlZCBpbnRvIGl0IGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIHVzZWQgYXMgYSBuZXcgb25lKVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5PYmplY3R9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignc2V0Jywga2V5LCB2YWx1ZSk7XG4gICAgICB2YXIgbmVlZHNEaW1zID0gZmFsc2U7XG4gICAgICB2YXIgaXNBZGRpbmdQYXRoID0gZmFsc2U7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIgX2tleSBpbiBrZXkpIHtcbiAgICAgICAgICBpZiAoX2tleSA9PT0gJ3BhdGgnKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBhdGhJbmZvKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5lZWRzRGltcyA9IG5lZWRzRGltcyB8fCB0aGlzLl9kaW1lbnNpb25BZmZlY3RpbmdQcm9wcy5pbmRleE9mKF9rZXkpICE9PSAtMTtcbiAgICAgICAgICBpc0FkZGluZ1BhdGggPSBpc0FkZGluZ1BhdGggfHwgX2tleSA9PT0gJ3BhdGgnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbmVlZHNEaW1zID0gdGhpcy5fZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMuaW5kZXhPZihrZXkpICE9PSAtMTtcbiAgICAgICAgaXNBZGRpbmdQYXRoID0ga2V5ID09PSAncGF0aCc7XG4gICAgICB9XG4gICAgICBpZiAoaXNBZGRpbmdQYXRoKSB7XG4gICAgICAgIHRoaXMuc2V0UGF0aEluZm8oKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkc0RpbXMpIHtcbiAgICAgICAgdGhpcy5pbml0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY29tcGxleGl0eSBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gY29tcGxleGl0eVxuICAgICAqL1xuICAgIGNvbXBsZXhpdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICB9KTtcblxuICAvKiBfRlJPTV9TVkdfU1RBUlRfICovXG4gIC8qKlxuICAgKiBMaXN0IG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhY2NvdW50IGZvciB3aGVuIHBhcnNpbmcgU1ZHIGVsZW1lbnQgKHVzZWQgYnkge0BsaW5rIGZhYnJpYy5UZXh0LmZyb21FbGVtZW50fSlcbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlRleHRcbiAgICogQHNlZTogaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3RleHQuaHRtbCNUZXh0RWxlbWVudFxuICAgKi9cbiAgZmFicmljLlRleHQuQVRUUklCVVRFX05BTUVTID0gZmFicmljLlNIQVJFRF9BVFRSSUJVVEVTLmNvbmNhdChcbiAgICAneCB5IGR4IGR5IGZvbnQtZmFtaWx5IGZvbnQtc3R5bGUgZm9udC13ZWlnaHQgZm9udC1zaXplIGxldHRlci1zcGFjaW5nIHRleHQtZGVjb3JhdGlvbiB0ZXh0LWFuY2hvcicuc3BsaXQoJyAnKSk7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgU1ZHIGZvbnQgc2l6ZVxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuVGV4dFxuICAgKi9cbiAgZmFicmljLlRleHQuREVGQVVMVF9TVkdfRk9OVF9TSVpFID0gMTY7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFicmljLlRleHQgaW5zdGFuY2UgZnJvbSBhbiBTVkcgZWxlbWVudCAoPGI+bm90IHlldCBpbXBsZW1lbnRlZDwvYj4pXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIGZhYnJpYy5UZXh0XG4gICAqIEBwYXJhbSB7U1ZHRWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGNhbGxiYWNrIGZ1bmN0aW9uIGludm9rZWQgYWZ0ZXIgcGFyc2luZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICBmYWJyaWMuVGV4dC5mcm9tRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIHBhcnNlZEF0dHJpYnV0ZXMgPSBmYWJyaWMucGFyc2VBdHRyaWJ1dGVzKGVsZW1lbnQsIGZhYnJpYy5UZXh0LkFUVFJJQlVURV9OQU1FUyksXG4gICAgICAgIHBhcnNlZEFuY2hvciA9IHBhcnNlZEF0dHJpYnV0ZXMudGV4dEFuY2hvciB8fCAnbGVmdCc7XG4gICAgb3B0aW9ucyA9IGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoKG9wdGlvbnMgPyBjbG9uZShvcHRpb25zKSA6IHsgfSksIHBhcnNlZEF0dHJpYnV0ZXMpO1xuXG4gICAgb3B0aW9ucy50b3AgPSBvcHRpb25zLnRvcCB8fCAwO1xuICAgIG9wdGlvbnMubGVmdCA9IG9wdGlvbnMubGVmdCB8fCAwO1xuICAgIGlmIChwYXJzZWRBdHRyaWJ1dGVzLnRleHREZWNvcmF0aW9uKSB7XG4gICAgICB2YXIgdGV4dERlY29yYXRpb24gPSBwYXJzZWRBdHRyaWJ1dGVzLnRleHREZWNvcmF0aW9uO1xuICAgICAgaWYgKHRleHREZWNvcmF0aW9uLmluZGV4T2YoJ3VuZGVybGluZScpICE9PSAtMSkge1xuICAgICAgICBvcHRpb25zLnVuZGVybGluZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGV4dERlY29yYXRpb24uaW5kZXhPZignb3ZlcmxpbmUnKSAhPT0gLTEpIHtcbiAgICAgICAgb3B0aW9ucy5vdmVybGluZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGV4dERlY29yYXRpb24uaW5kZXhPZignbGluZS10aHJvdWdoJykgIT09IC0xKSB7XG4gICAgICAgIG9wdGlvbnMubGluZXRocm91Z2ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgZGVsZXRlIG9wdGlvbnMudGV4dERlY29yYXRpb247XG4gICAgfVxuICAgIGlmICgnZHgnIGluIHBhcnNlZEF0dHJpYnV0ZXMpIHtcbiAgICAgIG9wdGlvbnMubGVmdCArPSBwYXJzZWRBdHRyaWJ1dGVzLmR4O1xuICAgIH1cbiAgICBpZiAoJ2R5JyBpbiBwYXJzZWRBdHRyaWJ1dGVzKSB7XG4gICAgICBvcHRpb25zLnRvcCArPSBwYXJzZWRBdHRyaWJ1dGVzLmR5O1xuICAgIH1cbiAgICBpZiAoISgnZm9udFNpemUnIGluIG9wdGlvbnMpKSB7XG4gICAgICBvcHRpb25zLmZvbnRTaXplID0gZmFicmljLlRleHQuREVGQVVMVF9TVkdfRk9OVF9TSVpFO1xuICAgIH1cblxuICAgIHZhciB0ZXh0Q29udGVudCA9ICcnO1xuXG4gICAgLy8gVGhlIFhNTCBpcyBub3QgcHJvcGVybHkgcGFyc2VkIGluIElFOSBzbyBhIHdvcmthcm91bmQgdG8gZ2V0XG4gICAgLy8gdGV4dENvbnRlbnQgaXMgdGhyb3VnaCBmaXJzdENoaWxkLmRhdGEuIEFub3RoZXIgd29ya2Fyb3VuZCB3b3VsZCBiZVxuICAgIC8vIHRvIGNvbnZlcnQgWE1MIGxvYWRlZCBmcm9tIGEgZmlsZSB0byBiZSBjb252ZXJ0ZWQgdXNpbmcgRE9NUGFyc2VyIChzYW1lIHdheSBsb2FkU1ZHRnJvbVN0cmluZygpIGRvZXMpXG4gICAgaWYgKCEoJ3RleHRDb250ZW50JyBpbiBlbGVtZW50KSkge1xuICAgICAgaWYgKCdmaXJzdENoaWxkJyBpbiBlbGVtZW50ICYmIGVsZW1lbnQuZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoJ2RhdGEnIGluIGVsZW1lbnQuZmlyc3RDaGlsZCAmJiBlbGVtZW50LmZpcnN0Q2hpbGQuZGF0YSAhPT0gbnVsbCkge1xuICAgICAgICAgIHRleHRDb250ZW50ID0gZWxlbWVudC5maXJzdENoaWxkLmRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0ZXh0Q29udGVudCA9IGVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgfVxuXG4gICAgdGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudC5yZXBsYWNlKC9eXFxzK3xcXHMrJHxcXG4rL2csICcnKS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgdmFyIG9yaWdpbmFsU3Ryb2tlV2lkdGggPSBvcHRpb25zLnN0cm9rZVdpZHRoO1xuICAgIG9wdGlvbnMuc3Ryb2tlV2lkdGggPSAwO1xuXG4gICAgdmFyIHRleHQgPSBuZXcgZmFicmljLlRleHQodGV4dENvbnRlbnQsIG9wdGlvbnMpLFxuICAgICAgICB0ZXh0SGVpZ2h0U2NhbGVGYWN0b3IgPSB0ZXh0LmdldFNjYWxlZEhlaWdodCgpIC8gdGV4dC5oZWlnaHQsXG4gICAgICAgIGxpbmVIZWlnaHREaWZmID0gKHRleHQuaGVpZ2h0ICsgdGV4dC5zdHJva2VXaWR0aCkgKiB0ZXh0LmxpbmVIZWlnaHQgLSB0ZXh0LmhlaWdodCxcbiAgICAgICAgc2NhbGVkRGlmZiA9IGxpbmVIZWlnaHREaWZmICogdGV4dEhlaWdodFNjYWxlRmFjdG9yLFxuICAgICAgICB0ZXh0SGVpZ2h0ID0gdGV4dC5nZXRTY2FsZWRIZWlnaHQoKSArIHNjYWxlZERpZmYsXG4gICAgICAgIG9mZlggPSAwO1xuICAgIC8qXG4gICAgICBBZGp1c3QgcG9zaXRpb25pbmc6XG4gICAgICAgIHgveSBhdHRyaWJ1dGVzIGluIFNWRyBjb3JyZXNwb25kIHRvIHRoZSBib3R0b20tbGVmdCBjb3JuZXIgb2YgdGV4dCBib3VuZGluZyBib3hcbiAgICAgICAgZmFicmljIG91dHB1dCBieSBkZWZhdWx0IGF0IHRvcCwgbGVmdC5cbiAgICAqL1xuICAgIGlmIChwYXJzZWRBbmNob3IgPT09ICdjZW50ZXInKSB7XG4gICAgICBvZmZYID0gdGV4dC5nZXRTY2FsZWRXaWR0aCgpIC8gMjtcbiAgICB9XG4gICAgaWYgKHBhcnNlZEFuY2hvciA9PT0gJ3JpZ2h0Jykge1xuICAgICAgb2ZmWCA9IHRleHQuZ2V0U2NhbGVkV2lkdGgoKTtcbiAgICB9XG4gICAgdGV4dC5zZXQoe1xuICAgICAgbGVmdDogdGV4dC5sZWZ0IC0gb2ZmWCxcbiAgICAgIHRvcDogdGV4dC50b3AgLSAodGV4dEhlaWdodCAtIHRleHQuZm9udFNpemUgKiAoMC4wNyArIHRleHQuX2ZvbnRTaXplRnJhY3Rpb24pKSAvIHRleHQubGluZUhlaWdodCxcbiAgICAgIHN0cm9rZVdpZHRoOiB0eXBlb2Ygb3JpZ2luYWxTdHJva2VXaWR0aCAhPT0gJ3VuZGVmaW5lZCcgPyBvcmlnaW5hbFN0cm9rZVdpZHRoIDogMSxcbiAgICB9KTtcbiAgICBjYWxsYmFjayh0ZXh0KTtcbiAgfTtcbiAgLyogX0ZST01fU1ZHX0VORF8gKi9cblxuICAvKipcbiAgICogUmV0dXJucyBmYWJyaWMuVGV4dCBpbnN0YW5jZSBmcm9tIGFuIG9iamVjdCByZXByZXNlbnRhdGlvblxuICAgKiBAc3RhdGljXG4gICAqIEBtZW1iZXJPZiBmYWJyaWMuVGV4dFxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IHBsYWluIGpzIE9iamVjdCB0byBjcmVhdGUgYW4gaW5zdGFuY2UgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIENhbGxiYWNrIHRvIGludm9rZSB3aGVuIGFuIGZhYnJpYy5UZXh0IGluc3RhbmNlIGlzIGNyZWF0ZWRcbiAgICovXG4gIGZhYnJpYy5UZXh0LmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgdmFyIG9iamVjdENvcHkgPSBjbG9uZShvYmplY3QpLCBwYXRoID0gb2JqZWN0LnBhdGg7XG4gICAgZGVsZXRlIG9iamVjdENvcHkucGF0aDtcbiAgICByZXR1cm4gZmFicmljLk9iamVjdC5fZnJvbU9iamVjdCgnVGV4dCcsIG9iamVjdENvcHksIGZ1bmN0aW9uKHRleHRJbnN0YW5jZSkge1xuICAgICAgaWYgKHBhdGgpIHtcbiAgICAgICAgZmFicmljLk9iamVjdC5fZnJvbU9iamVjdCgnUGF0aCcsIHBhdGgsIGZ1bmN0aW9uKHBhdGhJbnN0YW5jZSkge1xuICAgICAgICAgIHRleHRJbnN0YW5jZS5zZXQoJ3BhdGgnLCBwYXRoSW5zdGFuY2UpO1xuICAgICAgICAgIGNhbGxiYWNrKHRleHRJbnN0YW5jZSk7XG4gICAgICAgIH0sICdwYXRoJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodGV4dEluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9LCAndGV4dCcpO1xuICB9O1xuXG4gIGZhYnJpYy5UZXh0LmdlbmVyaWNGb250cyA9IFsnc2Fucy1zZXJpZicsICdzZXJpZicsICdjdXJzaXZlJywgJ2ZhbnRhc3knLCAnbW9ub3NwYWNlJ107XG5cbiAgZmFicmljLnV0aWwuY3JlYXRlQWNjZXNzb3JzICYmIGZhYnJpYy51dGlsLmNyZWF0ZUFjY2Vzc29ycyhmYWJyaWMuVGV4dCk7XG5cbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oKSB7XG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLlRleHQucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5UZXh0LnByb3RvdHlwZSAqLyB7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBoYXMgbm8gc3R5bGluZyBvciBubyBzdHlsaW5nIGluIGEgbGluZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggLCBsaW5lSW5kZXggaXMgb24gd3JhcHBlZCBsaW5lcy5cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIGlzRW1wdHlTdHlsZXM6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGluZUluZGV4ICE9PSAndW5kZWZpbmVkJyAmJiAhdGhpcy5zdHlsZXNbbGluZUluZGV4XSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBvYmogPSB0eXBlb2YgbGluZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc3R5bGVzIDogeyBsaW5lOiB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdIH07XG4gICAgICBmb3IgKHZhciBwMSBpbiBvYmopIHtcbiAgICAgICAgZm9yICh2YXIgcDIgaW4gb2JqW3AxXSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgICAgIGZvciAodmFyIHAzIGluIG9ialtwMV1bcDJdKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIG9iamVjdCBoYXMgYSBzdHlsZSBwcm9wZXJ0eSBvciBoYXMgaXQgaW5hIHNwZWNpZmllZCBsaW5lXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGRldGVjdCBpZiBhIHRleHQgd2lsbCB1c2UgYSBwYXJ0aWN1bGFyIHByb3BlcnR5IG9yIG5vdC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcGVydHkgdG8gY2hlY2sgZm9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCB0byBjaGVjayB0aGUgc3R5bGUgb25cbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAqL1xuICAgIHN0eWxlSGFzOiBmdW5jdGlvbihwcm9wZXJ0eSwgbGluZUluZGV4KSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzIHx8ICFwcm9wZXJ0eSB8fCBwcm9wZXJ0eSA9PT0gJycpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsaW5lSW5kZXggIT09ICd1bmRlZmluZWQnICYmICF0aGlzLnN0eWxlc1tsaW5lSW5kZXhdKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciBvYmogPSB0eXBlb2YgbGluZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHRoaXMuc3R5bGVzIDogeyAwOiB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdIH07XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGZvciAodmFyIHAxIGluIG9iaikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgZm9yICh2YXIgcDIgaW4gb2JqW3AxXSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW3AxXVtwMl1bcHJvcGVydHldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGNoYXJhY3RlcnMgaW4gYSB0ZXh0IGhhdmUgYSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eVxuICAgICAqIHdob3NlIHZhbHVlIG1hdGNoZXMgdGhlIHRleHRib3gncyB2YWx1ZSBmb3IgdGhhdCBwcm9wZXJ0eS4gIElmIHNvLFxuICAgICAqIHRoZSBjaGFyYWN0ZXItbGV2ZWwgcHJvcGVydHkgaXMgZGVsZXRlZC4gIElmIHRoZSBjaGFyYWN0ZXJcbiAgICAgKiBoYXMgbm8gb3RoZXIgcHJvcGVydGllcywgdGhlbiBpdCBpcyBhbHNvIGRlbGV0ZWQuICBGaW5hbGx5LFxuICAgICAqIGlmIHRoZSBsaW5lIGNvbnRhaW5pbmcgdGhhdCBjaGFyYWN0ZXIgaGFzIG5vIG90aGVyIGNoYXJhY3RlcnNcbiAgICAgKiB0aGVuIGl0IGFsc28gaXMgZGVsZXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9wZXJ0eSBUaGUgcHJvcGVydHkgdG8gY29tcGFyZSBiZXR3ZWVuIGNoYXJhY3RlcnMgYW5kIHRleHQuXG4gICAgICovXG4gICAgY2xlYW5TdHlsZTogZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZXMgfHwgIXByb3BlcnR5IHx8IHByb3BlcnR5ID09PSAnJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgb2JqID0gdGhpcy5zdHlsZXMsIHN0eWxlc0NvdW50ID0gMCwgbGV0dGVyQ291bnQsIHN0eWxlUHJvcGVydHlWYWx1ZSxcbiAgICAgICAgICBhbGxTdHlsZU9iamVjdFByb3BlcnRpZXNNYXRjaCA9IHRydWUsIGdyYXBoZW1lQ291bnQgPSAwLCBzdHlsZU9iamVjdDtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZm9yICh2YXIgcDEgaW4gb2JqKSB7XG4gICAgICAgIGxldHRlckNvdW50ID0gMDtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGZvciAodmFyIHAyIGluIG9ialtwMV0pIHtcbiAgICAgICAgICB2YXIgc3R5bGVPYmplY3QgPSBvYmpbcDFdW3AyXSxcbiAgICAgICAgICAgICAgc3R5bGVQcm9wZXJ0eUhhc0JlZW5TZXQgPSBzdHlsZU9iamVjdC5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSk7XG5cbiAgICAgICAgICBzdHlsZXNDb3VudCsrO1xuXG4gICAgICAgICAgaWYgKHN0eWxlUHJvcGVydHlIYXNCZWVuU2V0KSB7XG4gICAgICAgICAgICBpZiAoIXN0eWxlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICBzdHlsZVByb3BlcnR5VmFsdWUgPSBzdHlsZU9iamVjdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzdHlsZU9iamVjdFtwcm9wZXJ0eV0gIT09IHN0eWxlUHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICBhbGxTdHlsZU9iamVjdFByb3BlcnRpZXNNYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3R5bGVPYmplY3RbcHJvcGVydHldID09PSB0aGlzW3Byb3BlcnR5XSkge1xuICAgICAgICAgICAgICBkZWxldGUgc3R5bGVPYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFsbFN0eWxlT2JqZWN0UHJvcGVydGllc01hdGNoID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN0eWxlT2JqZWN0KS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGxldHRlckNvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIG9ialtwMV1bcDJdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZXR0ZXJDb3VudCA9PT0gMCkge1xuICAgICAgICAgIGRlbGV0ZSBvYmpbcDFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBpZiBldmVyeSBncmFwaGVtZSBoYXMgdGhlIHNhbWUgc3R5bGUgc2V0IHRoZW5cbiAgICAgIC8vIGRlbGV0ZSB0aG9zZSBzdHlsZXMgYW5kIHNldCBpdCBvbiB0aGUgcGFyZW50XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3RleHRMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBncmFwaGVtZUNvdW50ICs9IHRoaXMuX3RleHRMaW5lc1tpXS5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAoYWxsU3R5bGVPYmplY3RQcm9wZXJ0aWVzTWF0Y2ggJiYgc3R5bGVzQ291bnQgPT09IGdyYXBoZW1lQ291bnQpIHtcbiAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBzdHlsZVByb3BlcnR5VmFsdWU7XG4gICAgICAgIHRoaXMucmVtb3ZlU3R5bGUocHJvcGVydHkpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBzdHlsZSBwcm9wZXJ0eSBvciBwcm9wZXJ0aWVzIGZyb20gYWxsIGluZGl2aWR1YWwgY2hhcmFjdGVyIHN0eWxlc1xuICAgICAqIGluIGEgdGV4dCBvYmplY3QuICBEZWxldGVzIHRoZSBjaGFyYWN0ZXIgc3R5bGUgb2JqZWN0IGlmIGl0IGNvbnRhaW5zIG5vIG90aGVyIHN0eWxlXG4gICAgICogcHJvcHMuICBEZWxldGVzIGEgbGluZSBzdHlsZSBvYmplY3QgaWYgaXQgY29udGFpbnMgbm8gb3RoZXIgY2hhcmFjdGVyIHN0eWxlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wcyBUaGUgcHJvcGVydHkgdG8gcmVtb3ZlIGZyb20gY2hhcmFjdGVyIHN0eWxlcy5cbiAgICAgKi9cbiAgICByZW1vdmVTdHlsZTogZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZXMgfHwgIXByb3BlcnR5IHx8IHByb3BlcnR5ID09PSAnJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgb2JqID0gdGhpcy5zdHlsZXMsIGxpbmUsIGxpbmVOdW0sIGNoYXJOdW07XG4gICAgICBmb3IgKGxpbmVOdW0gaW4gb2JqKSB7XG4gICAgICAgIGxpbmUgPSBvYmpbbGluZU51bV07XG4gICAgICAgIGZvciAoY2hhck51bSBpbiBsaW5lKSB7XG4gICAgICAgICAgZGVsZXRlIGxpbmVbY2hhck51bV1bcHJvcGVydHldO1xuICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhsaW5lW2NoYXJOdW1dKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsaW5lW2NoYXJOdW1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmtleXMobGluZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIG9ialtsaW5lTnVtXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9leHRlbmRTdHlsZXM6IGZ1bmN0aW9uKGluZGV4LCBzdHlsZXMpIHtcbiAgICAgIHZhciBsb2MgPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24oaW5kZXgpO1xuXG4gICAgICBpZiAoIXRoaXMuX2dldExpbmVTdHlsZShsb2MubGluZUluZGV4KSkge1xuICAgICAgICB0aGlzLl9zZXRMaW5lU3R5bGUobG9jLmxpbmVJbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5fZ2V0U3R5bGVEZWNsYXJhdGlvbihsb2MubGluZUluZGV4LCBsb2MuY2hhckluZGV4KSkge1xuICAgICAgICB0aGlzLl9zZXRTdHlsZURlY2xhcmF0aW9uKGxvYy5saW5lSW5kZXgsIGxvYy5jaGFySW5kZXgsIHt9KTtcbiAgICAgIH1cblxuICAgICAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZCh0aGlzLl9nZXRTdHlsZURlY2xhcmF0aW9uKGxvYy5saW5lSW5kZXgsIGxvYy5jaGFySW5kZXgpLCBzdHlsZXMpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIDJkIHJlcHJlc2VudGF0aW9uIChsaW5lSW5kZXggYW5kIGNoYXJJbmRleCkgb2YgY3Vyc29yIChvciBzZWxlY3Rpb24gc3RhcnQpXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzZWxlY3Rpb25TdGFydF0gT3B0aW9uYWwgaW5kZXguIFdoZW4gbm90IGdpdmVuLCBjdXJyZW50IHNlbGVjdGlvblN0YXJ0IGlzIHVzZWQuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbc2tpcFdyYXBwaW5nXSBjb25zaWRlciB0aGUgbG9jYXRpb24gZm9yIHVud3JhcHBlZCBsaW5lcy4gdXNlZnVsIHRvIG1hbmFnZSBzdHlsZXMuXG4gICAgICovXG4gICAgZ2V0MkRDdXJzb3JMb2NhdGlvbjogZnVuY3Rpb24oc2VsZWN0aW9uU3RhcnQsIHNraXBXcmFwcGluZykge1xuICAgICAgaWYgKHR5cGVvZiBzZWxlY3Rpb25TdGFydCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZWN0aW9uU3RhcnQgPSB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgfVxuICAgICAgdmFyIGxpbmVzID0gc2tpcFdyYXBwaW5nID8gdGhpcy5fdW53cmFwcGVkVGV4dExpbmVzIDogdGhpcy5fdGV4dExpbmVzLFxuICAgICAgICAgIGxlbiA9IGxpbmVzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHNlbGVjdGlvblN0YXJ0IDw9IGxpbmVzW2ldLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsaW5lSW5kZXg6IGksXG4gICAgICAgICAgICBjaGFySW5kZXg6IHNlbGVjdGlvblN0YXJ0XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3Rpb25TdGFydCAtPSBsaW5lc1tpXS5sZW5ndGggKyB0aGlzLm1pc3NpbmdOZXdsaW5lT2Zmc2V0KGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZUluZGV4OiBpIC0gMSxcbiAgICAgICAgY2hhckluZGV4OiBsaW5lc1tpIC0gMV0ubGVuZ3RoIDwgc2VsZWN0aW9uU3RhcnQgPyBsaW5lc1tpIC0gMV0ubGVuZ3RoIDogc2VsZWN0aW9uU3RhcnRcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldHMgc3R5bGUgb2YgYSBjdXJyZW50IHNlbGVjdGlvbi9jdXJzb3IgKGF0IHRoZSBzdGFydCBwb3NpdGlvbilcbiAgICAgKiBpZiBzdGFydEluZGV4IG9yIGVuZEluZGV4IGFyZSBub3QgcHJvdmlkZWQsIHNlbGVjdGlvblN0YXJ0IG9yIHNlbGVjdGlvbkVuZCB3aWxsIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtzdGFydEluZGV4XSBTdGFydCBpbmRleCB0byBnZXQgc3R5bGVzIGF0XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtlbmRJbmRleF0gRW5kIGluZGV4IHRvIGdldCBzdHlsZXMgYXQsIGlmIG5vdCBzcGVjaWZpZWQgc2VsZWN0aW9uRW5kIG9yIHN0YXJ0SW5kZXggKyAxXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbY29tcGxldGVdIGdldCBmdWxsIHN0eWxlIG9yIG5vdFxuICAgICAqIEByZXR1cm4ge0FycmF5fSBzdHlsZXMgYW4gYXJyYXkgd2l0aCBvbmUsIHplcm8gb3IgbW9yZSBTdHlsZSBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0U2VsZWN0aW9uU3R5bGVzOiBmdW5jdGlvbihzdGFydEluZGV4LCBlbmRJbmRleCwgY29tcGxldGUpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RhcnRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3RhcnRJbmRleCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQgfHwgMDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZW5kSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVuZEluZGV4ID0gdGhpcy5zZWxlY3Rpb25FbmQgfHwgc3RhcnRJbmRleDtcbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICBzdHlsZXMucHVzaCh0aGlzLmdldFN0eWxlQXRQb3NpdGlvbihpLCBjb21wbGV0ZSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0eWxlcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0cyBzdHlsZSBvZiBhIGN1cnJlbnQgc2VsZWN0aW9uL2N1cnNvciBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAgdG8gZ2V0IHN0eWxlcyBhdFxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2NvbXBsZXRlXSBmdWxsIHN0eWxlIGlmIHRydWVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHN0eWxlIFN0eWxlIG9iamVjdCBhdCBhIHNwZWNpZmllZCBpbmRleFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0U3R5bGVBdFBvc2l0aW9uOiBmdW5jdGlvbihwb3NpdGlvbiwgY29tcGxldGUpIHtcbiAgICAgIHZhciBsb2MgPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24ocG9zaXRpb24pLFxuICAgICAgICAgIHN0eWxlID0gY29tcGxldGUgPyB0aGlzLmdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbihsb2MubGluZUluZGV4LCBsb2MuY2hhckluZGV4KSA6XG4gICAgICAgICAgICB0aGlzLl9nZXRTdHlsZURlY2xhcmF0aW9uKGxvYy5saW5lSW5kZXgsIGxvYy5jaGFySW5kZXgpO1xuICAgICAgcmV0dXJuIHN0eWxlIHx8IHt9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHN0eWxlIG9mIGEgY3VycmVudCBzZWxlY3Rpb24sIGlmIG5vIHNlbGVjdGlvbiBleGlzdCwgZG8gbm90IHNldCBhbnl0aGluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0eWxlc10gU3R5bGVzIG9iamVjdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc3RhcnRJbmRleF0gU3RhcnQgaW5kZXggdG8gZ2V0IHN0eWxlcyBhdFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbZW5kSW5kZXhdIEVuZCBpbmRleCB0byBnZXQgc3R5bGVzIGF0LCBpZiBub3Qgc3BlY2lmaWVkIHNlbGVjdGlvbkVuZCBvciBzdGFydEluZGV4ICsgMVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5JVGV4dH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBzZXRTZWxlY3Rpb25TdHlsZXM6IGZ1bmN0aW9uKHN0eWxlcywgc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICAgIGlmICh0eXBlb2Ygc3RhcnRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3RhcnRJbmRleCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQgfHwgMDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZW5kSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVuZEluZGV4ID0gdGhpcy5zZWxlY3Rpb25FbmQgfHwgc3RhcnRJbmRleDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICB0aGlzLl9leHRlbmRTdHlsZXMoaSwgc3R5bGVzKTtcbiAgICAgIH1cbiAgICAgIC8qIG5vdCBpbmNsdWRlZCBpbiBfZXh0ZW5kU3R5bGVzIHRvIGF2b2lkIGNsZWFyaW5nIGNhY2hlIG1vcmUgdGhhbiBvbmNlICovXG4gICAgICB0aGlzLl9mb3JjZUNsZWFyQ2FjaGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGdldCB0aGUgcmVmZXJlbmNlLCBub3QgYSBjbG9uZSwgb2YgdGhlIHN0eWxlIG9iamVjdCBmb3IgYSBnaXZlbiBjaGFyYWN0ZXJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleFxuICAgICAqIEByZXR1cm4ge09iamVjdH0gc3R5bGUgb2JqZWN0XG4gICAgICovXG4gICAgX2dldFN0eWxlRGVjbGFyYXRpb246IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4KSB7XG4gICAgICB2YXIgbGluZVN0eWxlID0gdGhpcy5zdHlsZXMgJiYgdGhpcy5zdHlsZXNbbGluZUluZGV4XTtcbiAgICAgIGlmICghbGluZVN0eWxlKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpbmVTdHlsZVtjaGFySW5kZXhdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gYSBuZXcgb2JqZWN0IHRoYXQgY29udGFpbnMgYWxsIHRoZSBzdHlsZSBwcm9wZXJ0eSBmb3IgYSBjaGFyYWN0ZXJcbiAgICAgKiB0aGUgb2JqZWN0IHJldHVybmVkIGlzIG5ld2x5IGNyZWF0ZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4IG9mIHRoZSBsaW5lIHdoZXJlIHRoZSBjaGFyYWN0ZXIgaXNcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4IHBvc2l0aW9uIG9mIHRoZSBjaGFyYWN0ZXIgb24gdGhlIGxpbmVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHN0eWxlIG9iamVjdFxuICAgICAqL1xuICAgIGdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbjogZnVuY3Rpb24obGluZUluZGV4LCBjaGFySW5kZXgpIHtcbiAgICAgIHZhciBzdHlsZSA9IHRoaXMuX2dldFN0eWxlRGVjbGFyYXRpb24obGluZUluZGV4LCBjaGFySW5kZXgpIHx8IHsgfSxcbiAgICAgICAgICBzdHlsZU9iamVjdCA9IHsgfSwgcHJvcDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc3R5bGVQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHByb3AgPSB0aGlzLl9zdHlsZVByb3BlcnRpZXNbaV07XG4gICAgICAgIHN0eWxlT2JqZWN0W3Byb3BdID0gdHlwZW9mIHN0eWxlW3Byb3BdID09PSAndW5kZWZpbmVkJyA/IHRoaXNbcHJvcF0gOiBzdHlsZVtwcm9wXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXhcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3R5bGVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRTdHlsZURlY2xhcmF0aW9uOiBmdW5jdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCwgc3R5bGUpIHtcbiAgICAgIHRoaXMuc3R5bGVzW2xpbmVJbmRleF1bY2hhckluZGV4XSA9IHN0eWxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZGVsZXRlU3R5bGVEZWNsYXJhdGlvbjogZnVuY3Rpb24obGluZUluZGV4LCBjaGFySW5kZXgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdW2NoYXJJbmRleF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBpZiB0aGUgbGluZSBleGlzdHMgb3Igbm90XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0TGluZVN0eWxlOiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuc3R5bGVzW2xpbmVJbmRleF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbGluZSBzdHlsZSB0byBhbiBlbXB0eSBvYmplY3Qgc28gdGhhdCBpcyBpbml0aWFsaXplZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZXRMaW5lU3R5bGU6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgdGhpcy5zdHlsZXNbbGluZUluZGV4XSA9IHt9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZGVsZXRlTGluZVN0eWxlOiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuXG5cbihmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBwYXJzZURlY29yYXRpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdC50ZXh0RGVjb3JhdGlvbikge1xuICAgICAgb2JqZWN0LnRleHREZWNvcmF0aW9uLmluZGV4T2YoJ3VuZGVybGluZScpID4gLTEgJiYgKG9iamVjdC51bmRlcmxpbmUgPSB0cnVlKTtcbiAgICAgIG9iamVjdC50ZXh0RGVjb3JhdGlvbi5pbmRleE9mKCdsaW5lLXRocm91Z2gnKSA+IC0xICYmIChvYmplY3QubGluZXRocm91Z2ggPSB0cnVlKTtcbiAgICAgIG9iamVjdC50ZXh0RGVjb3JhdGlvbi5pbmRleE9mKCdvdmVybGluZScpID4gLTEgJiYgKG9iamVjdC5vdmVybGluZSA9IHRydWUpO1xuICAgICAgZGVsZXRlIG9iamVjdC50ZXh0RGVjb3JhdGlvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSVRleHQgY2xhc3MgKGludHJvZHVjZWQgaW4gPGI+djEuNDwvYj4pIEV2ZW50cyBhcmUgYWxzbyBmaXJlZCB3aXRoIFwidGV4dDpcIlxuICAgKiBwcmVmaXggd2hlbiBvYnNlcnZpbmcgY2FudmFzLlxuICAgKiBAY2xhc3MgZmFicmljLklUZXh0XG4gICAqIEBleHRlbmRzIGZhYnJpYy5UZXh0XG4gICAqIEBtaXhlcyBmYWJyaWMuT2JzZXJ2YWJsZVxuICAgKlxuICAgKiBAZmlyZXMgY2hhbmdlZFxuICAgKiBAZmlyZXMgc2VsZWN0aW9uOmNoYW5nZWRcbiAgICogQGZpcmVzIGVkaXRpbmc6ZW50ZXJlZFxuICAgKiBAZmlyZXMgZWRpdGluZzpleGl0ZWRcbiAgICpcbiAgICogQHJldHVybiB7ZmFicmljLklUZXh0fSB0aGlzQXJnXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5JVGV4dCNpbml0aWFsaXplfSBmb3IgY29uc3RydWN0b3IgZGVmaW5pdGlvblxuICAgKlxuICAgKiA8cD5TdXBwb3J0ZWQga2V5IGNvbWJpbmF0aW9uczo8L3A+XG4gICAqIDxwcmU+XG4gICAqICAgTW92ZSBjdXJzb3I6ICAgICAgICAgICAgICAgICAgICBsZWZ0LCByaWdodCwgdXAsIGRvd25cbiAgICogICBTZWxlY3QgY2hhcmFjdGVyOiAgICAgICAgICAgICAgIHNoaWZ0ICsgbGVmdCwgc2hpZnQgKyByaWdodFxuICAgKiAgIFNlbGVjdCB0ZXh0IHZlcnRpY2FsbHk6ICAgICAgICAgc2hpZnQgKyB1cCwgc2hpZnQgKyBkb3duXG4gICAqICAgTW92ZSBjdXJzb3IgYnkgd29yZDogICAgICAgICAgICBhbHQgKyBsZWZ0LCBhbHQgKyByaWdodFxuICAgKiAgIFNlbGVjdCB3b3JkczogICAgICAgICAgICAgICAgICAgc2hpZnQgKyBhbHQgKyBsZWZ0LCBzaGlmdCArIGFsdCArIHJpZ2h0XG4gICAqICAgTW92ZSBjdXJzb3IgdG8gbGluZSBzdGFydC9lbmQ6ICBjbWQgKyBsZWZ0LCBjbWQgKyByaWdodCBvciBob21lLCBlbmRcbiAgICogICBTZWxlY3QgdGlsbCBzdGFydC9lbmQgb2YgbGluZTogIGNtZCArIHNoaWZ0ICsgbGVmdCwgY21kICsgc2hpZnQgKyByaWdodCBvciBzaGlmdCArIGhvbWUsIHNoaWZ0ICsgZW5kXG4gICAqICAgSnVtcCB0byBzdGFydC9lbmQgb2YgdGV4dDogICAgICBjbWQgKyB1cCwgY21kICsgZG93blxuICAgKiAgIFNlbGVjdCB0aWxsIHN0YXJ0L2VuZCBvZiB0ZXh0OiAgY21kICsgc2hpZnQgKyB1cCwgY21kICsgc2hpZnQgKyBkb3duIG9yIHNoaWZ0ICsgcGdVcCwgc2hpZnQgKyBwZ0Rvd25cbiAgICogICBEZWxldGUgY2hhcmFjdGVyOiAgICAgICAgICAgICAgIGJhY2tzcGFjZVxuICAgKiAgIERlbGV0ZSB3b3JkOiAgICAgICAgICAgICAgICAgICAgYWx0ICsgYmFja3NwYWNlXG4gICAqICAgRGVsZXRlIGxpbmU6ICAgICAgICAgICAgICAgICAgICBjbWQgKyBiYWNrc3BhY2VcbiAgICogICBGb3J3YXJkIGRlbGV0ZTogICAgICAgICAgICAgICAgIGRlbGV0ZVxuICAgKiAgIENvcHkgdGV4dDogICAgICAgICAgICAgICAgICAgICAgY3RybC9jbWQgKyBjXG4gICAqICAgUGFzdGUgdGV4dDogICAgICAgICAgICAgICAgICAgICBjdHJsL2NtZCArIHZcbiAgICogICBDdXQgdGV4dDogICAgICAgICAgICAgICAgICAgICAgIGN0cmwvY21kICsgeFxuICAgKiAgIFNlbGVjdCBlbnRpcmUgdGV4dDogICAgICAgICAgICAgY3RybC9jbWQgKyBhXG4gICAqICAgUXVpdCBlZGl0aW5nICAgICAgICAgICAgICAgICAgICB0YWIgb3IgZXNjXG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiA8cD5TdXBwb3J0ZWQgbW91c2UvdG91Y2ggY29tYmluYXRpb248L3A+XG4gICAqIDxwcmU+XG4gICAqICAgUG9zaXRpb24gY3Vyc29yOiAgICAgICAgICAgICAgICBjbGljay90b3VjaFxuICAgKiAgIENyZWF0ZSBzZWxlY3Rpb246ICAgICAgICAgICAgICAgY2xpY2svdG91Y2ggJiBkcmFnXG4gICAqICAgQ3JlYXRlIHNlbGVjdGlvbjogICAgICAgICAgICAgICBjbGljayAmIHNoaWZ0ICsgY2xpY2tcbiAgICogICBTZWxlY3Qgd29yZDogICAgICAgICAgICAgICAgICAgIGRvdWJsZSBjbGlja1xuICAgKiAgIFNlbGVjdCBsaW5lOiAgICAgICAgICAgICAgICAgICAgdHJpcGxlIGNsaWNrXG4gICAqIDwvcHJlPlxuICAgKi9cbiAgZmFicmljLklUZXh0ID0gZmFicmljLnV0aWwuY3JlYXRlQ2xhc3MoZmFicmljLlRleHQsIGZhYnJpYy5PYnNlcnZhYmxlLCAvKiogQGxlbmRzIGZhYnJpYy5JVGV4dC5wcm90b3R5cGUgKi8ge1xuXG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBhbiBvYmplY3RcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHR5cGU6ICdpLXRleHQnLFxuXG4gICAgLyoqXG4gICAgICogSW5kZXggd2hlcmUgdGV4dCBzZWxlY3Rpb24gc3RhcnRzIChvciB3aGVyZSBjdXJzb3IgaXMgd2hlbiB0aGVyZSBpcyBubyBzZWxlY3Rpb24pXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzZWxlY3Rpb25TdGFydDogMCxcblxuICAgIC8qKlxuICAgICAqIEluZGV4IHdoZXJlIHRleHQgc2VsZWN0aW9uIGVuZHNcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHNlbGVjdGlvbkVuZDogMCxcblxuICAgIC8qKlxuICAgICAqIENvbG9yIG9mIHRleHQgc2VsZWN0aW9uXG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBzZWxlY3Rpb25Db2xvcjogJ3JnYmEoMTcsMTE5LDI1NSwwLjMpJyxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRleHQgaXMgaW4gZWRpdGluZyBtb2RlXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgaXNFZGl0aW5nOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIGEgdGV4dCBjYW4gYmUgZWRpdGVkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgZWRpdGFibGU6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBCb3JkZXIgY29sb3Igb2YgdGV4dCBvYmplY3Qgd2hpbGUgaXQncyBpbiBlZGl0aW5nIG1vZGVcbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGVkaXRpbmdCb3JkZXJDb2xvcjogJ3JnYmEoMTAyLDE1MywyNTUsMC4yNSknLFxuXG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgY3Vyc29yIChpbiBweClcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGN1cnNvcldpZHRoOiAyLFxuXG4gICAgLyoqXG4gICAgICogQ29sb3Igb2YgdGV4dCBjdXJzb3IgY29sb3IgaW4gZWRpdGluZyBtb2RlLlxuICAgICAqIGlmIG5vdCBzZXQgKGRlZmF1bHQpIHdpbGwgdGFrZSBjb2xvciBmcm9tIHRoZSB0ZXh0LlxuICAgICAqIGlmIHNldCB0byBhIGNvbG9yIHZhbHVlIHRoYXQgZmFicmljIGNhbiB1bmRlcnN0YW5kLCBpdCB3aWxsXG4gICAgICogYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBjb2xvciBvZiB0aGUgdGV4dCBhdCB0aGUgY3VycmVudCBwb3NpdGlvbi5cbiAgICAgKiBAdHlwZSBTdHJpbmdcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGN1cnNvckNvbG9yOiAnJyxcblxuICAgIC8qKlxuICAgICAqIERlbGF5IGJldHdlZW4gY3Vyc29yIGJsaW5rIChpbiBtcylcbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGN1cnNvckRlbGF5OiAxMDAwLFxuXG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gb2YgY3Vyc29yIGZhZGVpbiAoaW4gbXMpXG4gICAgICogQHR5cGUgTnVtYmVyXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICBjdXJzb3JEdXJhdGlvbjogNjAwLFxuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgaW50ZXJuYWwgdGV4dCBjaGFyIHdpZHRocyBjYW4gYmUgY2FjaGVkXG4gICAgICogQHR5cGUgQm9vbGVhblxuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgY2FjaGluZzogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIERPTSBjb250YWluZXIgdG8gYXBwZW5kIHRoZSBoaWRkZW5UZXh0YXJlYS5cbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBhdHRhY2hpbmcgdG8gdGhlIGRvY3VtZW50LmJvZHkuXG4gICAgICogVXNlZnVsIHRvIHJlZHVjZSBsYWdnaXNoIHJlZHJhdyBvZiB0aGUgZnVsbCBkb2N1bWVudC5ib2R5IHRyZWUgYW5kXG4gICAgICogYWxzbyB3aXRoIG1vZGFscyBldmVudCBjYXB0dXJpbmcgdGhhdCB3b24ndCBsZXQgdGhlIHRleHRhcmVhIHRha2UgZm9jdXMuXG4gICAgICogQHR5cGUgSFRNTEVsZW1lbnRcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGhpZGRlblRleHRhcmVhQ29udGFpbmVyOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVTcGFjZTogL1xcc3xcXG4vLFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY3VycmVudEN1cnNvck9wYWNpdHk6IDAsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9zZWxlY3Rpb25EaXJlY3Rpb246IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hYm9ydEN1cnNvckFuaW1hdGlvbjogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9fd2lkdGhPZlNwYWNlOiBbXSxcblxuICAgIC8qKlxuICAgICAqIEhlbHBzIGRldGVybWluaW5nIHdoZW4gdGhlIHRleHQgaXMgaW4gY29tcG9zaXRpb24sIHNvIHRoYXQgdGhlIGN1cnNvclxuICAgICAqIHJlbmRlcmluZyBpcyBhbHRlcmVkLlxuICAgICAqL1xuICAgIGluQ29tcG9zaXRpb25Nb2RlOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgVGV4dCBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgb2JqZWN0XG4gICAgICogQHJldHVybiB7ZmFicmljLklUZXh0fSB0aGlzQXJnXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24odGV4dCwgb3B0aW9ucykge1xuICAgICAgdGhpcy5jYWxsU3VwZXIoJ2luaXRpYWxpemUnLCB0ZXh0LCBvcHRpb25zKTtcbiAgICAgIHRoaXMuaW5pdEJlaGF2aW9yKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFNldHMgc2VsZWN0aW9uIHN0YXJ0IChsZWZ0IGJvdW5kYXJ5IG9mIGEgc2VsZWN0aW9uKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBJbmRleCB0byBzZXQgc2VsZWN0aW9uIHN0YXJ0IHRvXG4gICAgICovXG4gICAgc2V0U2VsZWN0aW9uU3RhcnQ6IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICBpbmRleCA9IE1hdGgubWF4KGluZGV4LCAwKTtcbiAgICAgIHRoaXMuX3VwZGF0ZUFuZEZpcmUoJ3NlbGVjdGlvblN0YXJ0JywgaW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHNlbGVjdGlvbiBlbmQgKHJpZ2h0IGJvdW5kYXJ5IG9mIGEgc2VsZWN0aW9uKVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBJbmRleCB0byBzZXQgc2VsZWN0aW9uIGVuZCB0b1xuICAgICAqL1xuICAgIHNldFNlbGVjdGlvbkVuZDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRoaXMudGV4dC5sZW5ndGgpO1xuICAgICAgdGhpcy5fdXBkYXRlQW5kRmlyZSgnc2VsZWN0aW9uRW5kJywgaW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eSAnc2VsZWN0aW9uU3RhcnQnIG9yICdzZWxlY3Rpb25FbmQnXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IG5ldyBwb3NpdGlvbiBvZiBwcm9wZXJ0eVxuICAgICAqL1xuICAgIF91cGRhdGVBbmRGaXJlOiBmdW5jdGlvbihwcm9wZXJ0eSwgaW5kZXgpIHtcbiAgICAgIGlmICh0aGlzW3Byb3BlcnR5XSAhPT0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBpbmRleDtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpcmVzIHRoZSBldmVuIG9mIHNlbGVjdGlvbiBjaGFuZ2VkXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZmlyZVNlbGVjdGlvbkNoYW5nZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5maXJlKCdzZWxlY3Rpb246Y2hhbmdlZCcpO1xuICAgICAgdGhpcy5jYW52YXMgJiYgdGhpcy5jYW52YXMuZmlyZSgndGV4dDpzZWxlY3Rpb246Y2hhbmdlZCcsIHsgdGFyZ2V0OiB0aGlzIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRleHQgZGltZW5zaW9ucy4gUmVuZGVyIGFsbCB0ZXh0IG9uIGdpdmVuIGNvbnRleHRcbiAgICAgKiBvciBvbiBhIG9mZnNjcmVlbiBjYW52YXMgdG8gZ2V0IHRoZSB0ZXh0IHdpZHRoIHdpdGggbWVhc3VyZVRleHQuXG4gICAgICogVXBkYXRlcyB0aGlzLndpZHRoIGFuZCB0aGlzLmhlaWdodCB3aXRoIHRoZSBwcm9wZXIgdmFsdWVzLlxuICAgICAqIERvZXMgbm90IHJldHVybiBkaW1lbnNpb25zLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgaW5pdERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pc0VkaXRpbmcgJiYgdGhpcy5pbml0RGVsYXllZEN1cnNvcigpO1xuICAgICAgdGhpcy5jbGVhckNvbnRleHRUb3AoKTtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdpbml0RGltZW5zaW9ucycpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjdHggQ29udGV4dCB0byByZW5kZXIgb25cbiAgICAgKi9cbiAgICByZW5kZXI6IGZ1bmN0aW9uKGN0eCkge1xuICAgICAgdGhpcy5jbGVhckNvbnRleHRUb3AoKTtcbiAgICAgIHRoaXMuY2FsbFN1cGVyKCdyZW5kZXInLCBjdHgpO1xuICAgICAgLy8gY2xlYXIgdGhlIGN1cnNvck9mZnNldENhY2hlLCBzbyB3ZSBlbnN1cmUgdG8gY2FsY3VsYXRlIG9uY2UgcGVyIHJlbmRlckN1cnNvclxuICAgICAgLy8gdGhlIGNvcnJlY3QgcG9zaXRpb24gYnV0IG5vdCBhdCBldmVyeSBjdXJzb3IgYW5pbWF0aW9uLlxuICAgICAgdGhpcy5jdXJzb3JPZmZzZXRDYWNoZSA9IHsgfTtcbiAgICAgIHRoaXMucmVuZGVyQ3Vyc29yT3JTZWxlY3Rpb24oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IENvbnRleHQgdG8gcmVuZGVyIG9uXG4gICAgICovXG4gICAgX3JlbmRlcjogZnVuY3Rpb24oY3R4KSB7XG4gICAgICB0aGlzLmNhbGxTdXBlcignX3JlbmRlcicsIGN0eCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFByZXBhcmUgYW5kIGNsZWFuIHRoZSBjb250ZXh0VG9wXG4gICAgICovXG4gICAgY2xlYXJDb250ZXh0VG9wOiBmdW5jdGlvbihza2lwUmVzdG9yZSkge1xuICAgICAgaWYgKCF0aGlzLmlzRWRpdGluZyB8fCAhdGhpcy5jYW52YXMgfHwgIXRoaXMuY2FudmFzLmNvbnRleHRUb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzLmNvbnRleHRUb3AsIHYgPSB0aGlzLmNhbnZhcy52aWV3cG9ydFRyYW5zZm9ybTtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNmb3JtKHZbMF0sIHZbMV0sIHZbMl0sIHZbM10sIHZbNF0sIHZbNV0pO1xuICAgICAgdGhpcy50cmFuc2Zvcm0oY3R4KTtcbiAgICAgIHRoaXMuX2NsZWFyVGV4dEFyZWEoY3R4KTtcbiAgICAgIHNraXBSZXN0b3JlIHx8IGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGN1cnNvciBvciBzZWxlY3Rpb24gKGRlcGVuZGluZyBvbiB3aGF0IGV4aXN0cylcbiAgICAgKiBpdCBkb2VzIG9uIHRoZSBjb250ZXh0VG9wLiBJZiBjb250ZXh0VG9wIGlzIG5vdCBhdmFpbGFibGUsIGRvIG5vdGhpbmcuXG4gICAgICovXG4gICAgcmVuZGVyQ3Vyc29yT3JTZWxlY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLmlzRWRpdGluZyB8fCAhdGhpcy5jYW52YXMgfHwgIXRoaXMuY2FudmFzLmNvbnRleHRUb3ApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGJvdW5kYXJpZXMgPSB0aGlzLl9nZXRDdXJzb3JCb3VuZGFyaWVzKCksXG4gICAgICAgICAgY3R4ID0gdGhpcy5jYW52YXMuY29udGV4dFRvcDtcbiAgICAgIHRoaXMuY2xlYXJDb250ZXh0VG9wKHRydWUpO1xuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPT09IHRoaXMuc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgIHRoaXMucmVuZGVyQ3Vyc29yKGJvdW5kYXJpZXMsIGN0eCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTZWxlY3Rpb24oYm91bmRhcmllcywgY3R4KTtcbiAgICAgIH1cbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfSxcblxuICAgIF9jbGVhclRleHRBcmVhOiBmdW5jdGlvbihjdHgpIHtcbiAgICAgIC8vIHdlIGFkZCA0IHBpeGVsLCB0byBiZSBzdXJlIHRvIGRvIG5vdCBsZWF2ZSBhbnkgcGl4ZWwgb3V0XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoICsgNCwgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKyA0O1xuICAgICAgY3R4LmNsZWFyUmVjdCgtd2lkdGggLyAyLCAtaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY3Vyc29yIGJvdW5kYXJpZXMgKGxlZnQsIHRvcCwgbGVmdE9mZnNldCwgdG9wT2Zmc2V0KVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gY2hhcnMgQXJyYXkgb2YgY2hhcmFjdGVyc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlT2ZCb3VuZGFyaWVzXG4gICAgICovXG4gICAgX2dldEN1cnNvckJvdW5kYXJpZXM6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG5cbiAgICAgIC8vIGxlZnQvdG9wIGFyZSBsZWZ0L3RvcCBvZiBlbnRpcmUgdGV4dCBib3hcbiAgICAgIC8vIGxlZnRPZmZzZXQvdG9wT2Zmc2V0IGFyZSBvZmZzZXQgZnJvbSB0aGF0IGxlZnQvdG9wIHBvaW50IG9mIGEgdGV4dCBib3hcblxuICAgICAgaWYgKHR5cGVvZiBwb3NpdGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcG9zaXRpb24gPSB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVmdCA9IHRoaXMuX2dldExlZnRPZmZzZXQoKSxcbiAgICAgICAgICB0b3AgPSB0aGlzLl9nZXRUb3BPZmZzZXQoKSxcbiAgICAgICAgICBvZmZzZXRzID0gdGhpcy5fZ2V0Q3Vyc29yQm91bmRhcmllc09mZnNldHMocG9zaXRpb24pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgIGxlZnRPZmZzZXQ6IG9mZnNldHMubGVmdCxcbiAgICAgICAgdG9wT2Zmc2V0OiBvZmZzZXRzLnRvcFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0Q3Vyc29yQm91bmRhcmllc09mZnNldHM6IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICBpZiAodGhpcy5jdXJzb3JPZmZzZXRDYWNoZSAmJiAndG9wJyBpbiB0aGlzLmN1cnNvck9mZnNldENhY2hlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnNvck9mZnNldENhY2hlO1xuICAgICAgfVxuICAgICAgdmFyIGxpbmVMZWZ0T2Zmc2V0LFxuICAgICAgICAgIGxpbmVJbmRleCxcbiAgICAgICAgICBjaGFySW5kZXgsXG4gICAgICAgICAgdG9wT2Zmc2V0ID0gMCxcbiAgICAgICAgICBsZWZ0T2Zmc2V0ID0gMCxcbiAgICAgICAgICBib3VuZGFyaWVzLFxuICAgICAgICAgIGN1cnNvclBvc2l0aW9uID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKHBvc2l0aW9uKTtcbiAgICAgIGNoYXJJbmRleCA9IGN1cnNvclBvc2l0aW9uLmNoYXJJbmRleDtcbiAgICAgIGxpbmVJbmRleCA9IGN1cnNvclBvc2l0aW9uLmxpbmVJbmRleDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZUluZGV4OyBpKyspIHtcbiAgICAgICAgdG9wT2Zmc2V0ICs9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpO1xuICAgICAgfVxuICAgICAgbGluZUxlZnRPZmZzZXQgPSB0aGlzLl9nZXRMaW5lTGVmdE9mZnNldChsaW5lSW5kZXgpO1xuICAgICAgdmFyIGJvdW5kID0gdGhpcy5fX2NoYXJCb3VuZHNbbGluZUluZGV4XVtjaGFySW5kZXhdO1xuICAgICAgYm91bmQgJiYgKGxlZnRPZmZzZXQgPSBib3VuZC5sZWZ0KTtcbiAgICAgIGlmICh0aGlzLmNoYXJTcGFjaW5nICE9PSAwICYmIGNoYXJJbmRleCA9PT0gdGhpcy5fdGV4dExpbmVzW2xpbmVJbmRleF0ubGVuZ3RoKSB7XG4gICAgICAgIGxlZnRPZmZzZXQgLT0gdGhpcy5fZ2V0V2lkdGhPZkNoYXJTcGFjaW5nKCk7XG4gICAgICB9XG4gICAgICBib3VuZGFyaWVzID0ge1xuICAgICAgICB0b3A6IHRvcE9mZnNldCxcbiAgICAgICAgbGVmdDogbGluZUxlZnRPZmZzZXQgKyAobGVmdE9mZnNldCA+IDAgPyBsZWZ0T2Zmc2V0IDogMCksXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICBib3VuZGFyaWVzLmxlZnQgKj0gLTE7XG4gICAgICB9XG4gICAgICB0aGlzLmN1cnNvck9mZnNldENhY2hlID0gYm91bmRhcmllcztcbiAgICAgIHJldHVybiB0aGlzLmN1cnNvck9mZnNldENhY2hlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGN1cnNvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBib3VuZGFyaWVzXG4gICAgICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCB0cmFuc2Zvcm1lZCBjb250ZXh0IHRvIGRyYXcgb25cbiAgICAgKi9cbiAgICByZW5kZXJDdXJzb3I6IGZ1bmN0aW9uKGJvdW5kYXJpZXMsIGN0eCkge1xuICAgICAgdmFyIGN1cnNvckxvY2F0aW9uID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKCksXG4gICAgICAgICAgbGluZUluZGV4ID0gY3Vyc29yTG9jYXRpb24ubGluZUluZGV4LFxuICAgICAgICAgIGNoYXJJbmRleCA9IGN1cnNvckxvY2F0aW9uLmNoYXJJbmRleCA+IDAgPyBjdXJzb3JMb2NhdGlvbi5jaGFySW5kZXggLSAxIDogMCxcbiAgICAgICAgICBjaGFySGVpZ2h0ID0gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChsaW5lSW5kZXgsIGNoYXJJbmRleCwgJ2ZvbnRTaXplJyksXG4gICAgICAgICAgbXVsdGlwbGllciA9IHRoaXMuc2NhbGVYICogdGhpcy5jYW52YXMuZ2V0Wm9vbSgpLFxuICAgICAgICAgIGN1cnNvcldpZHRoID0gdGhpcy5jdXJzb3JXaWR0aCAvIG11bHRpcGxpZXIsXG4gICAgICAgICAgdG9wT2Zmc2V0ID0gYm91bmRhcmllcy50b3BPZmZzZXQsXG4gICAgICAgICAgZHkgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGxpbmVJbmRleCwgY2hhckluZGV4LCAnZGVsdGFZJyk7XG4gICAgICB0b3BPZmZzZXQgKz0gKDEgLSB0aGlzLl9mb250U2l6ZUZyYWN0aW9uKSAqIHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGxpbmVJbmRleCkgLyB0aGlzLmxpbmVIZWlnaHRcbiAgICAgICAgLSBjaGFySGVpZ2h0ICogKDEgLSB0aGlzLl9mb250U2l6ZUZyYWN0aW9uKTtcblxuICAgICAgaWYgKHRoaXMuaW5Db21wb3NpdGlvbk1vZGUpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTZWxlY3Rpb24oYm91bmRhcmllcywgY3R4KTtcbiAgICAgIH1cbiAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmN1cnNvckNvbG9yIHx8IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQobGluZUluZGV4LCBjaGFySW5kZXgsICdmaWxsJyk7XG4gICAgICBjdHguZ2xvYmFsQWxwaGEgPSB0aGlzLl9faXNNb3VzZWRvd24gPyAxIDogdGhpcy5fY3VycmVudEN1cnNvck9wYWNpdHk7XG4gICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgIGJvdW5kYXJpZXMubGVmdCArIGJvdW5kYXJpZXMubGVmdE9mZnNldCAtIGN1cnNvcldpZHRoIC8gMixcbiAgICAgICAgdG9wT2Zmc2V0ICsgYm91bmRhcmllcy50b3AgKyBkeSxcbiAgICAgICAgY3Vyc29yV2lkdGgsXG4gICAgICAgIGNoYXJIZWlnaHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRleHQgc2VsZWN0aW9uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGJvdW5kYXJpZXMgT2JqZWN0IHdpdGggbGVmdC90b3AvbGVmdE9mZnNldC90b3BPZmZzZXRcbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4IHRyYW5zZm9ybWVkIGNvbnRleHQgdG8gZHJhdyBvblxuICAgICAqL1xuICAgIHJlbmRlclNlbGVjdGlvbjogZnVuY3Rpb24oYm91bmRhcmllcywgY3R4KSB7XG5cbiAgICAgIHZhciBzZWxlY3Rpb25TdGFydCA9IHRoaXMuaW5Db21wb3NpdGlvbk1vZGUgPyB0aGlzLmhpZGRlblRleHRhcmVhLnNlbGVjdGlvblN0YXJ0IDogdGhpcy5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBzZWxlY3Rpb25FbmQgPSB0aGlzLmluQ29tcG9zaXRpb25Nb2RlID8gdGhpcy5oaWRkZW5UZXh0YXJlYS5zZWxlY3Rpb25FbmQgOiB0aGlzLnNlbGVjdGlvbkVuZCxcbiAgICAgICAgICBpc0p1c3RpZnkgPSB0aGlzLnRleHRBbGlnbi5pbmRleE9mKCdqdXN0aWZ5JykgIT09IC0xLFxuICAgICAgICAgIHN0YXJ0ID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKHNlbGVjdGlvblN0YXJ0KSxcbiAgICAgICAgICBlbmQgPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24oc2VsZWN0aW9uRW5kKSxcbiAgICAgICAgICBzdGFydExpbmUgPSBzdGFydC5saW5lSW5kZXgsXG4gICAgICAgICAgZW5kTGluZSA9IGVuZC5saW5lSW5kZXgsXG4gICAgICAgICAgc3RhcnRDaGFyID0gc3RhcnQuY2hhckluZGV4IDwgMCA/IDAgOiBzdGFydC5jaGFySW5kZXgsXG4gICAgICAgICAgZW5kQ2hhciA9IGVuZC5jaGFySW5kZXggPCAwID8gMCA6IGVuZC5jaGFySW5kZXg7XG5cbiAgICAgIGZvciAodmFyIGkgPSBzdGFydExpbmU7IGkgPD0gZW5kTGluZTsgaSsrKSB7XG4gICAgICAgIHZhciBsaW5lT2Zmc2V0ID0gdGhpcy5fZ2V0TGluZUxlZnRPZmZzZXQoaSkgfHwgMCxcbiAgICAgICAgICAgIGxpbmVIZWlnaHQgPSB0aGlzLmdldEhlaWdodE9mTGluZShpKSxcbiAgICAgICAgICAgIHJlYWxMaW5lSGVpZ2h0ID0gMCwgYm94U3RhcnQgPSAwLCBib3hFbmQgPSAwO1xuXG4gICAgICAgIGlmIChpID09PSBzdGFydExpbmUpIHtcbiAgICAgICAgICBib3hTdGFydCA9IHRoaXMuX19jaGFyQm91bmRzW3N0YXJ0TGluZV1bc3RhcnRDaGFyXS5sZWZ0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpID49IHN0YXJ0TGluZSAmJiBpIDwgZW5kTGluZSkge1xuICAgICAgICAgIGJveEVuZCA9IGlzSnVzdGlmeSAmJiAhdGhpcy5pc0VuZE9mV3JhcHBpbmcoaSkgPyB0aGlzLndpZHRoIDogdGhpcy5nZXRMaW5lV2lkdGgoaSkgfHwgNTsgLy8gV1RGIGlzIHRoaXMgNT9cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpID09PSBlbmRMaW5lKSB7XG4gICAgICAgICAgaWYgKGVuZENoYXIgPT09IDApIHtcbiAgICAgICAgICAgIGJveEVuZCA9IHRoaXMuX19jaGFyQm91bmRzW2VuZExpbmVdW2VuZENoYXJdLmxlZnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNoYXJTcGFjaW5nID0gdGhpcy5fZ2V0V2lkdGhPZkNoYXJTcGFjaW5nKCk7XG4gICAgICAgICAgICBib3hFbmQgPSB0aGlzLl9fY2hhckJvdW5kc1tlbmRMaW5lXVtlbmRDaGFyIC0gMV0ubGVmdFxuICAgICAgICAgICAgICArIHRoaXMuX19jaGFyQm91bmRzW2VuZExpbmVdW2VuZENoYXIgLSAxXS53aWR0aCAtIGNoYXJTcGFjaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZWFsTGluZUhlaWdodCA9IGxpbmVIZWlnaHQ7XG4gICAgICAgIGlmICh0aGlzLmxpbmVIZWlnaHQgPCAxIHx8IChpID09PSBlbmRMaW5lICYmIHRoaXMubGluZUhlaWdodCA+IDEpKSB7XG4gICAgICAgICAgbGluZUhlaWdodCAvPSB0aGlzLmxpbmVIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRyYXdTdGFydCA9IGJvdW5kYXJpZXMubGVmdCArIGxpbmVPZmZzZXQgKyBib3hTdGFydCxcbiAgICAgICAgICAgIGRyYXdXaWR0aCA9IGJveEVuZCAtIGJveFN0YXJ0LFxuICAgICAgICAgICAgZHJhd0hlaWdodCA9IGxpbmVIZWlnaHQsIGV4dHJhVG9wID0gMDtcbiAgICAgICAgaWYgKHRoaXMuaW5Db21wb3NpdGlvbk1vZGUpIHtcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5jb21wb3NpdGlvbkNvbG9yIHx8ICdibGFjayc7XG4gICAgICAgICAgZHJhd0hlaWdodCA9IDE7XG4gICAgICAgICAgZXh0cmFUb3AgPSBsaW5lSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnNlbGVjdGlvbkNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICAgICAgICBkcmF3U3RhcnQgPSB0aGlzLndpZHRoIC0gZHJhd1N0YXJ0IC0gZHJhd1dpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICBkcmF3U3RhcnQsXG4gICAgICAgICAgYm91bmRhcmllcy50b3AgKyBib3VuZGFyaWVzLnRvcE9mZnNldCArIGV4dHJhVG9wLFxuICAgICAgICAgIGRyYXdXaWR0aCxcbiAgICAgICAgICBkcmF3SGVpZ2h0KTtcbiAgICAgICAgYm91bmRhcmllcy50b3BPZmZzZXQgKz0gcmVhbExpbmVIZWlnaHQ7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEhpZ2ggbGV2ZWwgZnVuY3Rpb24gdG8ga25vdyB0aGUgaGVpZ2h0IG9mIHRoZSBjdXJzb3IuXG4gICAgICogdGhlIGN1cnJlbnRDaGFyIGlzIHRoZSBvbmUgdGhhdCBwcmVjZWRlcyB0aGUgY3Vyc29yXG4gICAgICogUmV0dXJucyBmb250U2l6ZSBvZiBjaGFyIGF0IHRoZSBjdXJyZW50IGN1cnNvclxuICAgICAqIFVudXNlZCBmcm9tIHRoZSBsaWJyYXJ5LCBpcyBmb3IgdGhlIGVuZCB1c2VyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBDaGFyYWN0ZXIgZm9udCBzaXplXG4gICAgICovXG4gICAgZ2V0Q3VycmVudENoYXJGb250U2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3AgPSB0aGlzLl9nZXRDdXJyZW50Q2hhckluZGV4KCk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChjcC5sLCBjcC5jLCAnZm9udFNpemUnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSGlnaCBsZXZlbCBmdW5jdGlvbiB0byBrbm93IHRoZSBjb2xvciBvZiB0aGUgY3Vyc29yLlxuICAgICAqIHRoZSBjdXJyZW50Q2hhciBpcyB0aGUgb25lIHRoYXQgcHJlY2VkZXMgdGhlIGN1cnNvclxuICAgICAqIFJldHVybnMgY29sb3IgKGZpbGwpIG9mIGNoYXIgYXQgdGhlIGN1cnJlbnQgY3Vyc29yXG4gICAgICogaWYgdGhlIHRleHQgb2JqZWN0IGhhcyBhIHBhdHRlcm4gb3IgZ3JhZGllbnQgZm9yIGZpbGxlciwgaXQgd2lsbCByZXR1cm4gdGhhdC5cbiAgICAgKiBVbnVzZWQgYnkgdGhlIGxpYnJhcnksIGlzIGZvciB0aGUgZW5kIHVzZXJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmcgfCBmYWJyaWMuR3JhZGllbnQgfCBmYWJyaWMuUGF0dGVybn0gQ2hhcmFjdGVyIGNvbG9yIChmaWxsKVxuICAgICAqL1xuICAgIGdldEN1cnJlbnRDaGFyQ29sb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGNwID0gdGhpcy5fZ2V0Q3VycmVudENoYXJJbmRleCgpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoY3AubCwgY3AuYywgJ2ZpbGwnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3Vyc29yIHBvc2l0aW9uIGZvciB0aGUgZ2V0Q3VycmVudC4uIGZ1bmN0aW9uc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldEN1cnJlbnRDaGFySW5kZXg6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnNvclBvc2l0aW9uID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKHRoaXMuc2VsZWN0aW9uU3RhcnQsIHRydWUpLFxuICAgICAgICAgIGNoYXJJbmRleCA9IGN1cnNvclBvc2l0aW9uLmNoYXJJbmRleCA+IDAgPyBjdXJzb3JQb3NpdGlvbi5jaGFySW5kZXggLSAxIDogMDtcbiAgICAgIHJldHVybiB7IGw6IGN1cnNvclBvc2l0aW9uLmxpbmVJbmRleCwgYzogY2hhckluZGV4IH07XG4gICAgfVxuICB9KTtcblxuICAvKipcbiAgICogUmV0dXJucyBmYWJyaWMuSVRleHQgaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLklUZXh0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBmcm9tXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gaW52b2tlZCB3aXRoIG5ldyBpbnN0YW5jZSBhcyBhcmd1bWVudFxuICAgKi9cbiAgZmFicmljLklUZXh0LmZyb21PYmplY3QgPSBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgcGFyc2VEZWNvcmF0aW9uKG9iamVjdCk7XG4gICAgaWYgKG9iamVjdC5zdHlsZXMpIHtcbiAgICAgIGZvciAodmFyIGkgaW4gb2JqZWN0LnN0eWxlcykge1xuICAgICAgICBmb3IgKHZhciBqIGluIG9iamVjdC5zdHlsZXNbaV0pIHtcbiAgICAgICAgICBwYXJzZURlY29yYXRpb24ob2JqZWN0LnN0eWxlc1tpXVtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZmFicmljLk9iamVjdC5fZnJvbU9iamVjdCgnSVRleHQnLCBvYmplY3QsIGNhbGxiYWNrLCAndGV4dCcpO1xuICB9O1xufSkoKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGNsb25lID0gZmFicmljLnV0aWwub2JqZWN0LmNsb25lO1xuXG4gIGZhYnJpYy51dGlsLm9iamVjdC5leHRlbmQoZmFicmljLklUZXh0LnByb3RvdHlwZSwgLyoqIEBsZW5kcyBmYWJyaWMuSVRleHQucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFsbCB0aGUgaW50ZXJhY3RpdmUgYmVoYXZpb3Igb2YgSVRleHRcbiAgICAgKi9cbiAgICBpbml0QmVoYXZpb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pbml0QWRkZWRIYW5kbGVyKCk7XG4gICAgICB0aGlzLmluaXRSZW1vdmVkSGFuZGxlcigpO1xuICAgICAgdGhpcy5pbml0Q3Vyc29yU2VsZWN0aW9uSGFuZGxlcnMoKTtcbiAgICAgIHRoaXMuaW5pdERvdWJsZUNsaWNrU2ltdWxhdGlvbigpO1xuICAgICAgdGhpcy5tb3VzZU1vdmVIYW5kbGVyID0gdGhpcy5tb3VzZU1vdmVIYW5kbGVyLmJpbmQodGhpcyk7XG4gICAgfSxcblxuICAgIG9uRGVzZWxlY3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5pc0VkaXRpbmcgJiYgdGhpcy5leGl0RWRpdGluZygpO1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBcImFkZGVkXCIgZXZlbnQgaGFuZGxlclxuICAgICAqL1xuICAgIGluaXRBZGRlZEhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHRoaXMub24oJ2FkZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBfdGhpcy5jYW52YXM7XG4gICAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgICBpZiAoIWNhbnZhcy5faGFzSVRleHRIYW5kbGVycykge1xuICAgICAgICAgICAgY2FudmFzLl9oYXNJVGV4dEhhbmRsZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIF90aGlzLl9pbml0Q2FudmFzSGFuZGxlcnMoY2FudmFzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FudmFzLl9pVGV4dEluc3RhbmNlcyA9IGNhbnZhcy5faVRleHRJbnN0YW5jZXMgfHwgW107XG4gICAgICAgICAgY2FudmFzLl9pVGV4dEluc3RhbmNlcy5wdXNoKF90aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGluaXRSZW1vdmVkSGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgdGhpcy5vbigncmVtb3ZlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FudmFzID0gX3RoaXMuY2FudmFzO1xuICAgICAgICBpZiAoY2FudmFzKSB7XG4gICAgICAgICAgY2FudmFzLl9pVGV4dEluc3RhbmNlcyA9IGNhbnZhcy5faVRleHRJbnN0YW5jZXMgfHwgW107XG4gICAgICAgICAgZmFicmljLnV0aWwucmVtb3ZlRnJvbUFycmF5KGNhbnZhcy5faVRleHRJbnN0YW5jZXMsIF90aGlzKTtcbiAgICAgICAgICBpZiAoY2FudmFzLl9pVGV4dEluc3RhbmNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNhbnZhcy5faGFzSVRleHRIYW5kbGVycyA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMuX3JlbW92ZUNhbnZhc0hhbmRsZXJzKGNhbnZhcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVnaXN0ZXIgY2FudmFzIGV2ZW50IHRvIG1hbmFnZSBleGl0aW5nIG9uIG90aGVyIGluc3RhbmNlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2luaXRDYW52YXNIYW5kbGVyczogZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICBjYW52YXMuX21vdXNlVXBJVGV4dEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNhbnZhcy5faVRleHRJbnN0YW5jZXMpIHtcbiAgICAgICAgICBjYW52YXMuX2lUZXh0SW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBvYmouX19pc01vdXNlZG93biA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY2FudmFzLm9uKCdtb3VzZTp1cCcsIGNhbnZhcy5fbW91c2VVcElUZXh0SGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSBjYW52YXMgZXZlbnQgdG8gbWFuYWdlIGV4aXRpbmcgb24gb3RoZXIgaW5zdGFuY2VzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVtb3ZlQ2FudmFzSGFuZGxlcnM6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgY2FudmFzLm9mZignbW91c2U6dXAnLCBjYW52YXMuX21vdXNlVXBJVGV4dEhhbmRsZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF90aWNrOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUaWNrU3RhdGUgPSB0aGlzLl9hbmltYXRlQ3Vyc29yKHRoaXMsIDEsIHRoaXMuY3Vyc29yRHVyYXRpb24sICdfb25UaWNrQ29tcGxldGUnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfYW5pbWF0ZUN1cnNvcjogZnVuY3Rpb24ob2JqLCB0YXJnZXRPcGFjaXR5LCBkdXJhdGlvbiwgY29tcGxldGVNZXRob2QpIHtcblxuICAgICAgdmFyIHRpY2tTdGF0ZTtcblxuICAgICAgdGlja1N0YXRlID0ge1xuICAgICAgICBpc0Fib3J0ZWQ6IGZhbHNlLFxuICAgICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGhpcy5pc0Fib3J0ZWQgPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgb2JqLmFuaW1hdGUoJ19jdXJyZW50Q3Vyc29yT3BhY2l0eScsIHRhcmdldE9wYWNpdHksIHtcbiAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICBvbkNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIXRpY2tTdGF0ZS5pc0Fib3J0ZWQpIHtcbiAgICAgICAgICAgIG9ialtjb21wbGV0ZU1ldGhvZF0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAvLyB3ZSBkbyBub3Qgd2FudCB0byBhbmltYXRlIGEgc2VsZWN0aW9uLCBvbmx5IGN1cnNvclxuICAgICAgICAgIGlmIChvYmouY2FudmFzICYmIG9iai5zZWxlY3Rpb25TdGFydCA9PT0gb2JqLnNlbGVjdGlvbkVuZCkge1xuICAgICAgICAgICAgb2JqLnJlbmRlckN1cnNvck9yU2VsZWN0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhYm9ydDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRpY2tTdGF0ZS5pc0Fib3J0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRpY2tTdGF0ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfb25UaWNrQ29tcGxldGU6IGZ1bmN0aW9uKCkge1xuXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fY3Vyc29yVGltZW91dDEpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2N1cnNvclRpbWVvdXQxKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2N1cnNvclRpbWVvdXQxID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuX2N1cnJlbnRUaWNrQ29tcGxldGVTdGF0ZSA9IF90aGlzLl9hbmltYXRlQ3Vyc29yKF90aGlzLCAwLCB0aGlzLmN1cnNvckR1cmF0aW9uIC8gMiwgJ190aWNrJyk7XG4gICAgICB9LCAxMDApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBkZWxheWVkIGN1cnNvclxuICAgICAqL1xuICAgIGluaXREZWxheWVkQ3Vyc29yOiBmdW5jdGlvbihyZXN0YXJ0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxuICAgICAgICAgIGRlbGF5ID0gcmVzdGFydCA/IDAgOiB0aGlzLmN1cnNvckRlbGF5O1xuXG4gICAgICB0aGlzLmFib3J0Q3Vyc29yQW5pbWF0aW9uKCk7XG4gICAgICB0aGlzLl9jdXJyZW50Q3Vyc29yT3BhY2l0eSA9IDE7XG4gICAgICB0aGlzLl9jdXJzb3JUaW1lb3V0MiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLl90aWNrKCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEFib3J0cyBjdXJzb3IgYW5pbWF0aW9uIGFuZCBjbGVhcnMgYWxsIHRpbWVvdXRzXG4gICAgICovXG4gICAgYWJvcnRDdXJzb3JBbmltYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNob3VsZENsZWFyID0gdGhpcy5fY3VycmVudFRpY2tTdGF0ZSB8fCB0aGlzLl9jdXJyZW50VGlja0NvbXBsZXRlU3RhdGUsXG4gICAgICAgICAgY2FudmFzID0gdGhpcy5jYW52YXM7XG4gICAgICB0aGlzLl9jdXJyZW50VGlja1N0YXRlICYmIHRoaXMuX2N1cnJlbnRUaWNrU3RhdGUuYWJvcnQoKTtcbiAgICAgIHRoaXMuX2N1cnJlbnRUaWNrQ29tcGxldGVTdGF0ZSAmJiB0aGlzLl9jdXJyZW50VGlja0NvbXBsZXRlU3RhdGUuYWJvcnQoKTtcblxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2N1cnNvclRpbWVvdXQxKTtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9jdXJzb3JUaW1lb3V0Mik7XG5cbiAgICAgIHRoaXMuX2N1cnJlbnRDdXJzb3JPcGFjaXR5ID0gMDtcbiAgICAgIC8vIHRvIGNsZWFyIGp1c3QgaXRleHQgYXJlYSB3ZSBuZWVkIHRvIHRyYW5zZm9ybSB0aGUgY29udGV4dFxuICAgICAgLy8gaXQgbWF5IG5vdCBiZSB3b3J0aCBpdFxuICAgICAgaWYgKHNob3VsZENsZWFyICYmIGNhbnZhcykge1xuICAgICAgICBjYW52YXMuY2xlYXJDb250ZXh0KGNhbnZhcy5jb250ZXh0VG9wIHx8IGNhbnZhcy5jb250ZXh0Q29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGVudGlyZSB0ZXh0XG4gICAgICogQHJldHVybiB7ZmFicmljLklUZXh0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNlbGVjdEFsbDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5fdGV4dC5sZW5ndGg7XG4gICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dGFyZWEoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHNlbGVjdGVkIHRleHRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRUZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl90ZXh0LnNsaWNlKHRoaXMuc2VsZWN0aW9uU3RhcnQsIHRoaXMuc2VsZWN0aW9uRW5kKS5qb2luKCcnKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRmluZCBuZXcgc2VsZWN0aW9uIGluZGV4IHJlcHJlc2VudGluZyBzdGFydCBvZiBjdXJyZW50IHdvcmQgYWNjb3JkaW5nIHRvIGN1cnJlbnQgc2VsZWN0aW9uIGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0RnJvbSBDdXJyZW50IHNlbGVjdGlvbiBpbmRleFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gTmV3IHNlbGVjdGlvbiBpbmRleFxuICAgICAqL1xuICAgIGZpbmRXb3JkQm91bmRhcnlMZWZ0OiBmdW5jdGlvbihzdGFydEZyb20pIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwLCBpbmRleCA9IHN0YXJ0RnJvbSAtIDE7XG5cbiAgICAgIC8vIHJlbW92ZSBzcGFjZSBiZWZvcmUgY3Vyc29yIGZpcnN0XG4gICAgICBpZiAodGhpcy5fcmVTcGFjZS50ZXN0KHRoaXMuX3RleHRbaW5kZXhdKSkge1xuICAgICAgICB3aGlsZSAodGhpcy5fcmVTcGFjZS50ZXN0KHRoaXMuX3RleHRbaW5kZXhdKSkge1xuICAgICAgICAgIG9mZnNldCsrO1xuICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgvXFxTLy50ZXN0KHRoaXMuX3RleHRbaW5kZXhdKSAmJiBpbmRleCA+IC0xKSB7XG4gICAgICAgIG9mZnNldCsrO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhcnRGcm9tIC0gb2Zmc2V0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kIG5ldyBzZWxlY3Rpb24gaW5kZXggcmVwcmVzZW50aW5nIGVuZCBvZiBjdXJyZW50IHdvcmQgYWNjb3JkaW5nIHRvIGN1cnJlbnQgc2VsZWN0aW9uIGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0RnJvbSBDdXJyZW50IHNlbGVjdGlvbiBpbmRleFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gTmV3IHNlbGVjdGlvbiBpbmRleFxuICAgICAqL1xuICAgIGZpbmRXb3JkQm91bmRhcnlSaWdodDogZnVuY3Rpb24oc3RhcnRGcm9tKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gMCwgaW5kZXggPSBzdGFydEZyb207XG5cbiAgICAgIC8vIHJlbW92ZSBzcGFjZSBhZnRlciBjdXJzb3IgZmlyc3RcbiAgICAgIGlmICh0aGlzLl9yZVNwYWNlLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9yZVNwYWNlLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pKSB7XG4gICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgd2hpbGUgKC9cXFMvLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pICYmIGluZGV4IDwgdGhpcy5fdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFydEZyb20gKyBvZmZzZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmQgbmV3IHNlbGVjdGlvbiBpbmRleCByZXByZXNlbnRpbmcgc3RhcnQgb2YgY3VycmVudCBsaW5lIGFjY29yZGluZyB0byBjdXJyZW50IHNlbGVjdGlvbiBpbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydEZyb20gQ3VycmVudCBzZWxlY3Rpb24gaW5kZXhcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE5ldyBzZWxlY3Rpb24gaW5kZXhcbiAgICAgKi9cbiAgICBmaW5kTGluZUJvdW5kYXJ5TGVmdDogZnVuY3Rpb24oc3RhcnRGcm9tKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gMCwgaW5kZXggPSBzdGFydEZyb20gLSAxO1xuXG4gICAgICB3aGlsZSAoIS9cXG4vLnRlc3QodGhpcy5fdGV4dFtpbmRleF0pICYmIGluZGV4ID4gLTEpIHtcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGFydEZyb20gLSBvZmZzZXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZpbmQgbmV3IHNlbGVjdGlvbiBpbmRleCByZXByZXNlbnRpbmcgZW5kIG9mIGN1cnJlbnQgbGluZSBhY2NvcmRpbmcgdG8gY3VycmVudCBzZWxlY3Rpb24gaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRGcm9tIEN1cnJlbnQgc2VsZWN0aW9uIGluZGV4XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBOZXcgc2VsZWN0aW9uIGluZGV4XG4gICAgICovXG4gICAgZmluZExpbmVCb3VuZGFyeVJpZ2h0OiBmdW5jdGlvbihzdGFydEZyb20pIHtcbiAgICAgIHZhciBvZmZzZXQgPSAwLCBpbmRleCA9IHN0YXJ0RnJvbTtcblxuICAgICAgd2hpbGUgKCEvXFxuLy50ZXN0KHRoaXMuX3RleHRbaW5kZXhdKSAmJiBpbmRleCA8IHRoaXMuX3RleHQubGVuZ3RoKSB7XG4gICAgICAgIG9mZnNldCsrO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhcnRGcm9tICsgb2Zmc2V0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBpbmRleCBjb3JyZXNwb25kaW5nIHRvIGJlZ2lubmluZyBvciBlbmQgb2YgYSB3b3JkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlbGVjdGlvblN0YXJ0IEluZGV4IG9mIGEgY2hhcmFjdGVyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGRpcmVjdGlvbiAxIG9yIC0xXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBJbmRleCBvZiB0aGUgYmVnaW5uaW5nIG9yIGVuZCBvZiBhIHdvcmRcbiAgICAgKi9cbiAgICBzZWFyY2hXb3JkQm91bmRhcnk6IGZ1bmN0aW9uKHNlbGVjdGlvblN0YXJ0LCBkaXJlY3Rpb24pIHtcbiAgICAgIHZhciB0ZXh0ID0gdGhpcy5fdGV4dCxcbiAgICAgICAgICBpbmRleCAgICAgPSB0aGlzLl9yZVNwYWNlLnRlc3QodGV4dFtzZWxlY3Rpb25TdGFydF0pID8gc2VsZWN0aW9uU3RhcnQgLSAxIDogc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgX2NoYXIgICAgID0gdGV4dFtpbmRleF0sXG4gICAgICAgICAgLy8gd3JvbmdcbiAgICAgICAgICByZU5vbldvcmQgPSBmYWJyaWMucmVOb25Xb3JkO1xuXG4gICAgICB3aGlsZSAoIXJlTm9uV29yZC50ZXN0KF9jaGFyKSAmJiBpbmRleCA+IDAgJiYgaW5kZXggPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICBpbmRleCArPSBkaXJlY3Rpb247XG4gICAgICAgIF9jaGFyID0gdGV4dFtpbmRleF07XG4gICAgICB9XG4gICAgICBpZiAocmVOb25Xb3JkLnRlc3QoX2NoYXIpKSB7XG4gICAgICAgIGluZGV4ICs9IGRpcmVjdGlvbiA9PT0gMSA/IDAgOiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3RzIGEgd29yZCBiYXNlZCBvbiB0aGUgaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2VsZWN0aW9uU3RhcnQgSW5kZXggb2YgYSBjaGFyYWN0ZXJcbiAgICAgKi9cbiAgICBzZWxlY3RXb3JkOiBmdW5jdGlvbihzZWxlY3Rpb25TdGFydCkge1xuICAgICAgc2VsZWN0aW9uU3RhcnQgPSBzZWxlY3Rpb25TdGFydCB8fCB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgdmFyIG5ld1NlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWFyY2hXb3JkQm91bmRhcnkoc2VsZWN0aW9uU3RhcnQsIC0xKSwgLyogc2VhcmNoIGJhY2t3YXJkcyAqL1xuICAgICAgICAgIG5ld1NlbGVjdGlvbkVuZCA9IHRoaXMuc2VhcmNoV29yZEJvdW5kYXJ5KHNlbGVjdGlvblN0YXJ0LCAxKTsgLyogc2VhcmNoIGZvcndhcmQgKi9cblxuICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvblN0YXJ0O1xuICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSBuZXdTZWxlY3Rpb25FbmQ7XG4gICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgdGhpcy5fdXBkYXRlVGV4dGFyZWEoKTtcbiAgICAgIHRoaXMucmVuZGVyQ3Vyc29yT3JTZWxlY3Rpb24oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0cyBhIGxpbmUgYmFzZWQgb24gdGhlIGluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHNlbGVjdGlvblN0YXJ0IEluZGV4IG9mIGEgY2hhcmFjdGVyXG4gICAgICogQHJldHVybiB7ZmFicmljLklUZXh0fSB0aGlzQXJnXG4gICAgICogQGNoYWluYWJsZVxuICAgICAqL1xuICAgIHNlbGVjdExpbmU6IGZ1bmN0aW9uKHNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICBzZWxlY3Rpb25TdGFydCA9IHNlbGVjdGlvblN0YXJ0IHx8IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICB2YXIgbmV3U2VsZWN0aW9uU3RhcnQgPSB0aGlzLmZpbmRMaW5lQm91bmRhcnlMZWZ0KHNlbGVjdGlvblN0YXJ0KSxcbiAgICAgICAgICBuZXdTZWxlY3Rpb25FbmQgPSB0aGlzLmZpbmRMaW5lQm91bmRhcnlSaWdodChzZWxlY3Rpb25TdGFydCk7XG5cbiAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBuZXdTZWxlY3Rpb25TdGFydDtcbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gbmV3U2VsZWN0aW9uRW5kO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRW50ZXJzIGVkaXRpbmcgc3RhdGVcbiAgICAgKiBAcmV0dXJuIHtmYWJyaWMuSVRleHR9IHRoaXNBcmdcbiAgICAgKiBAY2hhaW5hYmxlXG4gICAgICovXG4gICAgZW50ZXJFZGl0aW5nOiBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAodGhpcy5pc0VkaXRpbmcgfHwgIXRoaXMuZWRpdGFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMuY2FsY09mZnNldCgpO1xuICAgICAgICB0aGlzLmV4aXRFZGl0aW5nT25PdGhlcnModGhpcy5jYW52YXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmlzRWRpdGluZyA9IHRydWU7XG5cbiAgICAgIHRoaXMuaW5pdEhpZGRlblRleHRhcmVhKGUpO1xuICAgICAgdGhpcy5oaWRkZW5UZXh0YXJlYS5mb2N1cygpO1xuICAgICAgdGhpcy5oaWRkZW5UZXh0YXJlYS52YWx1ZSA9IHRoaXMudGV4dDtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgICB0aGlzLl9zYXZlRWRpdGluZ1Byb3BzKCk7XG4gICAgICB0aGlzLl9zZXRFZGl0aW5nUHJvcHMoKTtcbiAgICAgIHRoaXMuX3RleHRCZWZvcmVFZGl0ID0gdGhpcy50ZXh0O1xuXG4gICAgICB0aGlzLl90aWNrKCk7XG4gICAgICB0aGlzLmZpcmUoJ2VkaXRpbmc6ZW50ZXJlZCcpO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB0aGlzLmNhbnZhcy5maXJlKCd0ZXh0OmVkaXRpbmc6ZW50ZXJlZCcsIHsgdGFyZ2V0OiB0aGlzIH0pO1xuICAgICAgdGhpcy5pbml0TW91c2VNb3ZlSGFuZGxlcigpO1xuICAgICAgdGhpcy5jYW52YXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIGV4aXRFZGl0aW5nT25PdGhlcnM6IGZ1bmN0aW9uKGNhbnZhcykge1xuICAgICAgaWYgKGNhbnZhcy5faVRleHRJbnN0YW5jZXMpIHtcbiAgICAgICAgY2FudmFzLl9pVGV4dEluc3RhbmNlcy5mb3JFYWNoKGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgIG9iai5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChvYmouaXNFZGl0aW5nKSB7XG4gICAgICAgICAgICBvYmouZXhpdEVkaXRpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBcIm1vdXNlbW92ZVwiIGV2ZW50IGhhbmRsZXJcbiAgICAgKi9cbiAgICBpbml0TW91c2VNb3ZlSGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNhbnZhcy5vbignbW91c2U6bW92ZScsIHRoaXMubW91c2VNb3ZlSGFuZGxlcik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgbW91c2VNb3ZlSGFuZGxlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKCF0aGlzLl9faXNNb3VzZWRvd24gfHwgIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld1NlbGVjdGlvblN0YXJ0ID0gdGhpcy5nZXRTZWxlY3Rpb25TdGFydEZyb21Qb2ludGVyKG9wdGlvbnMuZSksXG4gICAgICAgICAgY3VycmVudFN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBjdXJyZW50RW5kID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgICBpZiAoXG4gICAgICAgIChuZXdTZWxlY3Rpb25TdGFydCAhPT0gdGhpcy5fX3NlbGVjdGlvblN0YXJ0T25Nb3VzZURvd24gfHwgY3VycmVudFN0YXJ0ID09PSBjdXJyZW50RW5kKVxuICAgICAgICAmJlxuICAgICAgICAoY3VycmVudFN0YXJ0ID09PSBuZXdTZWxlY3Rpb25TdGFydCB8fCBjdXJyZW50RW5kID09PSBuZXdTZWxlY3Rpb25TdGFydClcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobmV3U2VsZWN0aW9uU3RhcnQgPiB0aGlzLl9fc2VsZWN0aW9uU3RhcnRPbk1vdXNlRG93bikge1xuICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gdGhpcy5fX3NlbGVjdGlvblN0YXJ0T25Nb3VzZURvd247XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gbmV3U2VsZWN0aW9uU3RhcnQ7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG5ld1NlbGVjdGlvblN0YXJ0O1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHRoaXMuX19zZWxlY3Rpb25TdGFydE9uTW91c2VEb3duO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgIT09IGN1cnJlbnRTdGFydCB8fCB0aGlzLnNlbGVjdGlvbkVuZCAhPT0gY3VycmVudEVuZCkge1xuICAgICAgICB0aGlzLnJlc3RhcnRDdXJzb3JJZk5lZWRlZCgpO1xuICAgICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlZCgpO1xuICAgICAgICB0aGlzLl91cGRhdGVUZXh0YXJlYSgpO1xuICAgICAgICB0aGlzLnJlbmRlckN1cnNvck9yU2VsZWN0aW9uKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldEVkaXRpbmdQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmhvdmVyQ3Vyc29yID0gJ3RleHQnO1xuXG4gICAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMuZGVmYXVsdEN1cnNvciA9IHRoaXMuY2FudmFzLm1vdmVDdXJzb3IgPSAndGV4dCc7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSB0aGlzLmVkaXRpbmdCb3JkZXJDb2xvcjtcbiAgICAgIHRoaXMuaGFzQ29udHJvbHMgPSB0aGlzLnNlbGVjdGFibGUgPSBmYWxzZTtcbiAgICAgIHRoaXMubG9ja01vdmVtZW50WCA9IHRoaXMubG9ja01vdmVtZW50WSA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvbnZlcnQgZnJvbSB0ZXh0YXJlYSB0byBncmFwaGVtZSBpbmRleGVzXG4gICAgICovXG4gICAgZnJvbVN0cmluZ1RvR3JhcGhlbWVTZWxlY3Rpb246IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHRleHQpIHtcbiAgICAgIHZhciBzbWFsbGVyVGV4dFN0YXJ0ID0gdGV4dC5zbGljZSgwLCBzdGFydCksXG4gICAgICAgICAgZ3JhcGhlbWVTdGFydCA9IGZhYnJpYy51dGlsLnN0cmluZy5ncmFwaGVtZVNwbGl0KHNtYWxsZXJUZXh0U3RhcnQpLmxlbmd0aDtcbiAgICAgIGlmIChzdGFydCA9PT0gZW5kKSB7XG4gICAgICAgIHJldHVybiB7IHNlbGVjdGlvblN0YXJ0OiBncmFwaGVtZVN0YXJ0LCBzZWxlY3Rpb25FbmQ6IGdyYXBoZW1lU3RhcnQgfTtcbiAgICAgIH1cbiAgICAgIHZhciBzbWFsbGVyVGV4dEVuZCA9IHRleHQuc2xpY2Uoc3RhcnQsIGVuZCksXG4gICAgICAgICAgZ3JhcGhlbWVFbmQgPSBmYWJyaWMudXRpbC5zdHJpbmcuZ3JhcGhlbWVTcGxpdChzbWFsbGVyVGV4dEVuZCkubGVuZ3RoO1xuICAgICAgcmV0dXJuIHsgc2VsZWN0aW9uU3RhcnQ6IGdyYXBoZW1lU3RhcnQsIHNlbGVjdGlvbkVuZDogZ3JhcGhlbWVTdGFydCArIGdyYXBoZW1lRW5kIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvbnZlcnQgZnJvbSBmYWJyaWMgdG8gdGV4dGFyZWEgdmFsdWVzXG4gICAgICovXG4gICAgZnJvbUdyYXBoZW1lVG9TdHJpbmdTZWxlY3Rpb246IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIF90ZXh0KSB7XG4gICAgICB2YXIgc21hbGxlclRleHRTdGFydCA9IF90ZXh0LnNsaWNlKDAsIHN0YXJ0KSxcbiAgICAgICAgICBncmFwaGVtZVN0YXJ0ID0gc21hbGxlclRleHRTdGFydC5qb2luKCcnKS5sZW5ndGg7XG4gICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xuICAgICAgICByZXR1cm4geyBzZWxlY3Rpb25TdGFydDogZ3JhcGhlbWVTdGFydCwgc2VsZWN0aW9uRW5kOiBncmFwaGVtZVN0YXJ0IH07XG4gICAgICB9XG4gICAgICB2YXIgc21hbGxlclRleHRFbmQgPSBfdGV4dC5zbGljZShzdGFydCwgZW5kKSxcbiAgICAgICAgICBncmFwaGVtZUVuZCA9IHNtYWxsZXJUZXh0RW5kLmpvaW4oJycpLmxlbmd0aDtcbiAgICAgIHJldHVybiB7IHNlbGVjdGlvblN0YXJ0OiBncmFwaGVtZVN0YXJ0LCBzZWxlY3Rpb25FbmQ6IGdyYXBoZW1lU3RhcnQgKyBncmFwaGVtZUVuZCB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF91cGRhdGVUZXh0YXJlYTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmN1cnNvck9mZnNldENhY2hlID0geyB9O1xuICAgICAgaWYgKCF0aGlzLmhpZGRlblRleHRhcmVhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pbkNvbXBvc2l0aW9uTW9kZSkge1xuICAgICAgICB2YXIgbmV3U2VsZWN0aW9uID0gdGhpcy5mcm9tR3JhcGhlbWVUb1N0cmluZ1NlbGVjdGlvbih0aGlzLnNlbGVjdGlvblN0YXJ0LCB0aGlzLnNlbGVjdGlvbkVuZCwgdGhpcy5fdGV4dCk7XG4gICAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQgPSBuZXdTZWxlY3Rpb24uc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2VsZWN0aW9uRW5kID0gbmV3U2VsZWN0aW9uLnNlbGVjdGlvbkVuZDtcbiAgICAgIH1cbiAgICAgIHRoaXMudXBkYXRlVGV4dGFyZWFQb3NpdGlvbigpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHVwZGF0ZUZyb21UZXh0QXJlYTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuaGlkZGVuVGV4dGFyZWEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJzb3JPZmZzZXRDYWNoZSA9IHsgfTtcbiAgICAgIHRoaXMudGV4dCA9IHRoaXMuaGlkZGVuVGV4dGFyZWEudmFsdWU7XG4gICAgICBpZiAodGhpcy5fc2hvdWxkQ2xlYXJEaW1lbnNpb25DYWNoZSgpKSB7XG4gICAgICAgIHRoaXMuaW5pdERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5zZXRDb29yZHMoKTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdTZWxlY3Rpb24gPSB0aGlzLmZyb21TdHJpbmdUb0dyYXBoZW1lU2VsZWN0aW9uKFxuICAgICAgICB0aGlzLmhpZGRlblRleHRhcmVhLnNlbGVjdGlvblN0YXJ0LCB0aGlzLmhpZGRlblRleHRhcmVhLnNlbGVjdGlvbkVuZCwgdGhpcy5oaWRkZW5UZXh0YXJlYS52YWx1ZSk7XG4gICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBuZXdTZWxlY3Rpb24uc2VsZWN0aW9uRW5kO1xuICAgICAgaWYgKCF0aGlzLmluQ29tcG9zaXRpb25Nb2RlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBuZXdTZWxlY3Rpb24uc2VsZWN0aW9uU3RhcnQ7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZVRleHRhcmVhUG9zaXRpb24oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB1cGRhdGVUZXh0YXJlYVBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLl9jYWxjVGV4dGFyZWFQb3NpdGlvbigpO1xuICAgICAgICB0aGlzLmhpZGRlblRleHRhcmVhLnN0eWxlLmxlZnQgPSBzdHlsZS5sZWZ0O1xuICAgICAgICB0aGlzLmhpZGRlblRleHRhcmVhLnN0eWxlLnRvcCA9IHN0eWxlLnRvcDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHN0eWxlIGNvbnRhaW5zIHN0eWxlIGZvciBoaWRkZW5UZXh0YXJlYVxuICAgICAqL1xuICAgIF9jYWxjVGV4dGFyZWFQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuY2FudmFzKSB7XG4gICAgICAgIHJldHVybiB7IHg6IDEsIHk6IDEgfTtcbiAgICAgIH1cbiAgICAgIHZhciBkZXNpcmVkUG9zaXRpb24gPSB0aGlzLmluQ29tcG9zaXRpb25Nb2RlID8gdGhpcy5jb21wb3NpdGlvblN0YXJ0IDogdGhpcy5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBib3VuZGFyaWVzID0gdGhpcy5fZ2V0Q3Vyc29yQm91bmRhcmllcyhkZXNpcmVkUG9zaXRpb24pLFxuICAgICAgICAgIGN1cnNvckxvY2F0aW9uID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKGRlc2lyZWRQb3NpdGlvbiksXG4gICAgICAgICAgbGluZUluZGV4ID0gY3Vyc29yTG9jYXRpb24ubGluZUluZGV4LFxuICAgICAgICAgIGNoYXJJbmRleCA9IGN1cnNvckxvY2F0aW9uLmNoYXJJbmRleCxcbiAgICAgICAgICBjaGFySGVpZ2h0ID0gdGhpcy5nZXRWYWx1ZU9mUHJvcGVydHlBdChsaW5lSW5kZXgsIGNoYXJJbmRleCwgJ2ZvbnRTaXplJykgKiB0aGlzLmxpbmVIZWlnaHQsXG4gICAgICAgICAgbGVmdE9mZnNldCA9IGJvdW5kYXJpZXMubGVmdE9mZnNldCxcbiAgICAgICAgICBtID0gdGhpcy5jYWxjVHJhbnNmb3JtTWF0cml4KCksXG4gICAgICAgICAgcCA9IHtcbiAgICAgICAgICAgIHg6IGJvdW5kYXJpZXMubGVmdCArIGxlZnRPZmZzZXQsXG4gICAgICAgICAgICB5OiBib3VuZGFyaWVzLnRvcCArIGJvdW5kYXJpZXMudG9wT2Zmc2V0ICsgY2hhckhlaWdodFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcmV0aW5hU2NhbGluZyA9IHRoaXMuY2FudmFzLmdldFJldGluYVNjYWxpbmcoKSxcbiAgICAgICAgICB1cHBlckNhbnZhcyA9IHRoaXMuY2FudmFzLnVwcGVyQ2FudmFzRWwsXG4gICAgICAgICAgdXBwZXJDYW52YXNXaWR0aCA9IHVwcGVyQ2FudmFzLndpZHRoIC8gcmV0aW5hU2NhbGluZyxcbiAgICAgICAgICB1cHBlckNhbnZhc0hlaWdodCA9IHVwcGVyQ2FudmFzLmhlaWdodCAvIHJldGluYVNjYWxpbmcsXG4gICAgICAgICAgbWF4V2lkdGggPSB1cHBlckNhbnZhc1dpZHRoIC0gY2hhckhlaWdodCxcbiAgICAgICAgICBtYXhIZWlnaHQgPSB1cHBlckNhbnZhc0hlaWdodCAtIGNoYXJIZWlnaHQsXG4gICAgICAgICAgc2NhbGVYID0gdXBwZXJDYW52YXMuY2xpZW50V2lkdGggLyB1cHBlckNhbnZhc1dpZHRoLFxuICAgICAgICAgIHNjYWxlWSA9IHVwcGVyQ2FudmFzLmNsaWVudEhlaWdodCAvIHVwcGVyQ2FudmFzSGVpZ2h0O1xuXG4gICAgICBwID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQocCwgbSk7XG4gICAgICBwID0gZmFicmljLnV0aWwudHJhbnNmb3JtUG9pbnQocCwgdGhpcy5jYW52YXMudmlld3BvcnRUcmFuc2Zvcm0pO1xuICAgICAgcC54ICo9IHNjYWxlWDtcbiAgICAgIHAueSAqPSBzY2FsZVk7XG4gICAgICBpZiAocC54IDwgMCkge1xuICAgICAgICBwLnggPSAwO1xuICAgICAgfVxuICAgICAgaWYgKHAueCA+IG1heFdpZHRoKSB7XG4gICAgICAgIHAueCA9IG1heFdpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKHAueSA8IDApIHtcbiAgICAgICAgcC55ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChwLnkgPiBtYXhIZWlnaHQpIHtcbiAgICAgICAgcC55ID0gbWF4SGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgY2FudmFzIG9mZnNldCBvbiBkb2N1bWVudFxuICAgICAgcC54ICs9IHRoaXMuY2FudmFzLl9vZmZzZXQubGVmdDtcbiAgICAgIHAueSArPSB0aGlzLmNhbnZhcy5fb2Zmc2V0LnRvcDtcblxuICAgICAgcmV0dXJuIHsgbGVmdDogcC54ICsgJ3B4JywgdG9wOiBwLnkgKyAncHgnLCBmb250U2l6ZTogY2hhckhlaWdodCArICdweCcsIGNoYXJIZWlnaHQ6IGNoYXJIZWlnaHQgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2F2ZUVkaXRpbmdQcm9wczogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9zYXZlZFByb3BzID0ge1xuICAgICAgICBoYXNDb250cm9sczogdGhpcy5oYXNDb250cm9scyxcbiAgICAgICAgYm9yZGVyQ29sb3I6IHRoaXMuYm9yZGVyQ29sb3IsXG4gICAgICAgIGxvY2tNb3ZlbWVudFg6IHRoaXMubG9ja01vdmVtZW50WCxcbiAgICAgICAgbG9ja01vdmVtZW50WTogdGhpcy5sb2NrTW92ZW1lbnRZLFxuICAgICAgICBob3ZlckN1cnNvcjogdGhpcy5ob3ZlckN1cnNvcixcbiAgICAgICAgc2VsZWN0YWJsZTogdGhpcy5zZWxlY3RhYmxlLFxuICAgICAgICBkZWZhdWx0Q3Vyc29yOiB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5kZWZhdWx0Q3Vyc29yLFxuICAgICAgICBtb3ZlQ3Vyc29yOiB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5tb3ZlQ3Vyc29yXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9yZXN0b3JlRWRpdGluZ1Byb3BzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5fc2F2ZWRQcm9wcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaG92ZXJDdXJzb3IgPSB0aGlzLl9zYXZlZFByb3BzLmhvdmVyQ3Vyc29yO1xuICAgICAgdGhpcy5oYXNDb250cm9scyA9IHRoaXMuX3NhdmVkUHJvcHMuaGFzQ29udHJvbHM7XG4gICAgICB0aGlzLmJvcmRlckNvbG9yID0gdGhpcy5fc2F2ZWRQcm9wcy5ib3JkZXJDb2xvcjtcbiAgICAgIHRoaXMuc2VsZWN0YWJsZSA9IHRoaXMuX3NhdmVkUHJvcHMuc2VsZWN0YWJsZTtcbiAgICAgIHRoaXMubG9ja01vdmVtZW50WCA9IHRoaXMuX3NhdmVkUHJvcHMubG9ja01vdmVtZW50WDtcbiAgICAgIHRoaXMubG9ja01vdmVtZW50WSA9IHRoaXMuX3NhdmVkUHJvcHMubG9ja01vdmVtZW50WTtcblxuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHRoaXMuY2FudmFzLmRlZmF1bHRDdXJzb3IgPSB0aGlzLl9zYXZlZFByb3BzLmRlZmF1bHRDdXJzb3I7XG4gICAgICAgIHRoaXMuY2FudmFzLm1vdmVDdXJzb3IgPSB0aGlzLl9zYXZlZFByb3BzLm1vdmVDdXJzb3I7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEV4aXRzIGZyb20gZWRpdGluZyBzdGF0ZVxuICAgICAqIEByZXR1cm4ge2ZhYnJpYy5JVGV4dH0gdGhpc0FyZ1xuICAgICAqIEBjaGFpbmFibGVcbiAgICAgKi9cbiAgICBleGl0RWRpdGluZzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaXNUZXh0Q2hhbmdlZCA9ICh0aGlzLl90ZXh0QmVmb3JlRWRpdCAhPT0gdGhpcy50ZXh0KTtcbiAgICAgIHZhciBoaWRkZW5UZXh0YXJlYSA9IHRoaXMuaGlkZGVuVGV4dGFyZWE7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmlzRWRpdGluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG5cbiAgICAgIGlmIChoaWRkZW5UZXh0YXJlYSkge1xuICAgICAgICBoaWRkZW5UZXh0YXJlYS5ibHVyICYmIGhpZGRlblRleHRhcmVhLmJsdXIoKTtcbiAgICAgICAgaGlkZGVuVGV4dGFyZWEucGFyZW50Tm9kZSAmJiBoaWRkZW5UZXh0YXJlYS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGhpZGRlblRleHRhcmVhKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEgPSBudWxsO1xuICAgICAgdGhpcy5hYm9ydEN1cnNvckFuaW1hdGlvbigpO1xuICAgICAgdGhpcy5fcmVzdG9yZUVkaXRpbmdQcm9wcygpO1xuICAgICAgdGhpcy5fY3VycmVudEN1cnNvck9wYWNpdHkgPSAwO1xuICAgICAgaWYgKHRoaXMuX3Nob3VsZENsZWFyRGltZW5zaW9uQ2FjaGUoKSkge1xuICAgICAgICB0aGlzLmluaXREaW1lbnNpb25zKCk7XG4gICAgICAgIHRoaXMuc2V0Q29vcmRzKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmZpcmUoJ2VkaXRpbmc6ZXhpdGVkJyk7XG4gICAgICBpc1RleHRDaGFuZ2VkICYmIHRoaXMuZmlyZSgnbW9kaWZpZWQnKTtcbiAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICB0aGlzLmNhbnZhcy5vZmYoJ21vdXNlOm1vdmUnLCB0aGlzLm1vdXNlTW92ZUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmNhbnZhcy5maXJlKCd0ZXh0OmVkaXRpbmc6ZXhpdGVkJywgeyB0YXJnZXQ6IHRoaXMgfSk7XG4gICAgICAgIGlzVGV4dENoYW5nZWQgJiYgdGhpcy5jYW52YXMuZmlyZSgnb2JqZWN0Om1vZGlmaWVkJywgeyB0YXJnZXQ6IHRoaXMgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVtb3ZlRXh0cmFuZW91c1N0eWxlczogZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuc3R5bGVzKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGV4dExpbmVzW3Byb3BdKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSBhbmQgcmVmbG93IGEgc3R5bGUgYmxvY2sgZnJvbSBzdGFydCB0byBlbmQuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHN0YXJ0IGxpbmVhciBzdGFydCBwb3NpdGlvbiBmb3IgcmVtb3ZhbCAoaW5jbHVkZWQgaW4gcmVtb3ZhbClcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIGxpbmVhciBlbmQgcG9zaXRpb24gZm9yIHJlbW92YWwgKCBleGNsdWRlZCBmcm9tIHJlbW92YWwgKVxuICAgICAqL1xuICAgIHJlbW92ZVN0eWxlRnJvbVRvOiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgY3Vyc29yU3RhcnQgPSB0aGlzLmdldDJEQ3Vyc29yTG9jYXRpb24oc3RhcnQsIHRydWUpLFxuICAgICAgICAgIGN1cnNvckVuZCA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihlbmQsIHRydWUpLFxuICAgICAgICAgIGxpbmVTdGFydCA9IGN1cnNvclN0YXJ0LmxpbmVJbmRleCxcbiAgICAgICAgICBjaGFyU3RhcnQgPSBjdXJzb3JTdGFydC5jaGFySW5kZXgsXG4gICAgICAgICAgbGluZUVuZCA9IGN1cnNvckVuZC5saW5lSW5kZXgsXG4gICAgICAgICAgY2hhckVuZCA9IGN1cnNvckVuZC5jaGFySW5kZXgsXG4gICAgICAgICAgaSwgc3R5bGVPYmo7XG4gICAgICBpZiAobGluZVN0YXJ0ICE9PSBsaW5lRW5kKSB7XG4gICAgICAgIC8vIHN0ZXAxIHJlbW92ZSB0aGUgdHJhaWxpbmcgb2YgbGluZVN0YXJ0XG4gICAgICAgIGlmICh0aGlzLnN0eWxlc1tsaW5lU3RhcnRdKSB7XG4gICAgICAgICAgZm9yIChpID0gY2hhclN0YXJ0OyBpIDwgdGhpcy5fdW53cmFwcGVkVGV4dExpbmVzW2xpbmVTdGFydF0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlc1tsaW5lU3RhcnRdW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBzdGVwMiBtb3ZlIHRoZSB0cmFpbGluZyBvZiBsaW5lRW5kIHRvIGxpbmVTdGFydCBpZiBuZWVkZWRcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVzW2xpbmVFbmRdKSB7XG4gICAgICAgICAgZm9yIChpID0gY2hhckVuZDsgaSA8IHRoaXMuX3Vud3JhcHBlZFRleHRMaW5lc1tsaW5lRW5kXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3R5bGVPYmogPSB0aGlzLnN0eWxlc1tsaW5lRW5kXVtpXTtcbiAgICAgICAgICAgIGlmIChzdHlsZU9iaikge1xuICAgICAgICAgICAgICB0aGlzLnN0eWxlc1tsaW5lU3RhcnRdIHx8ICh0aGlzLnN0eWxlc1tsaW5lU3RhcnRdID0geyB9KTtcbiAgICAgICAgICAgICAgdGhpcy5zdHlsZXNbbGluZVN0YXJ0XVtjaGFyU3RhcnQgKyBpIC0gY2hhckVuZF0gPSBzdHlsZU9iajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RlcDMgZGV0ZWN0cyBsaW5lcyB3aWxsIGJlIGNvbXBsZXRlbHkgcmVtb3ZlZC5cbiAgICAgICAgZm9yIChpID0gbGluZVN0YXJ0ICsgMTsgaSA8PSBsaW5lRW5kOyBpKyspIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5zdHlsZXNbaV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gc3RlcDQgc2hpZnQgcmVtYWluaW5nIGxpbmVzLlxuICAgICAgICB0aGlzLnNoaWZ0TGluZVN0eWxlcyhsaW5lRW5kLCBsaW5lU3RhcnQgLSBsaW5lRW5kKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyByZW1vdmUgYW5kIHNoaWZ0IGxlZnQgb24gdGhlIHNhbWUgbGluZVxuICAgICAgICBpZiAodGhpcy5zdHlsZXNbbGluZVN0YXJ0XSkge1xuICAgICAgICAgIHN0eWxlT2JqID0gdGhpcy5zdHlsZXNbbGluZVN0YXJ0XTtcbiAgICAgICAgICB2YXIgZGlmZiA9IGNoYXJFbmQgLSBjaGFyU3RhcnQsIG51bWVyaWNDaGFyLCBfY2hhcjtcbiAgICAgICAgICBmb3IgKGkgPSBjaGFyU3RhcnQ7IGkgPCBjaGFyRW5kOyBpKyspIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdHlsZU9ialtpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChfY2hhciBpbiB0aGlzLnN0eWxlc1tsaW5lU3RhcnRdKSB7XG4gICAgICAgICAgICBudW1lcmljQ2hhciA9IHBhcnNlSW50KF9jaGFyLCAxMCk7XG4gICAgICAgICAgICBpZiAobnVtZXJpY0NoYXIgPj0gY2hhckVuZCkge1xuICAgICAgICAgICAgICBzdHlsZU9ialtudW1lcmljQ2hhciAtIGRpZmZdID0gc3R5bGVPYmpbX2NoYXJdO1xuICAgICAgICAgICAgICBkZWxldGUgc3R5bGVPYmpbX2NoYXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTaGlmdHMgbGluZSBzdHlsZXMgdXAgb3IgZG93blxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggSW5kZXggb2YgYSBsaW5lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBDYW4gYW55IG51bWJlcj9cbiAgICAgKi9cbiAgICBzaGlmdExpbmVTdHlsZXM6IGZ1bmN0aW9uKGxpbmVJbmRleCwgb2Zmc2V0KSB7XG4gICAgICAvLyBzaGlmdCBhbGwgbGluZSBzdHlsZXMgYnkgb2Zmc2V0IHVwd2FyZCBvciBkb3dud2FyZFxuICAgICAgLy8gZG8gbm90IGNsb25lIGRlZXAuIHdlIG5lZWQgbmV3IGFycmF5LCBub3QgbmV3IHN0eWxlIG9iamVjdHNcbiAgICAgIHZhciBjbG9uZWRTdHlsZXMgPSBjbG9uZSh0aGlzLnN0eWxlcyk7XG4gICAgICBmb3IgKHZhciBsaW5lIGluIHRoaXMuc3R5bGVzKSB7XG4gICAgICAgIHZhciBudW1lcmljTGluZSA9IHBhcnNlSW50KGxpbmUsIDEwKTtcbiAgICAgICAgaWYgKG51bWVyaWNMaW5lID4gbGluZUluZGV4KSB7XG4gICAgICAgICAgdGhpcy5zdHlsZXNbbnVtZXJpY0xpbmUgKyBvZmZzZXRdID0gY2xvbmVkU3R5bGVzW251bWVyaWNMaW5lXTtcbiAgICAgICAgICBpZiAoIWNsb25lZFN0eWxlc1tudW1lcmljTGluZSAtIG9mZnNldF0pIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlc1tudW1lcmljTGluZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlc3RhcnRDdXJzb3JJZk5lZWRlZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXRoaXMuX2N1cnJlbnRUaWNrU3RhdGUgfHwgdGhpcy5fY3VycmVudFRpY2tTdGF0ZS5pc0Fib3J0ZWRcbiAgICAgICAgfHwgIXRoaXMuX2N1cnJlbnRUaWNrQ29tcGxldGVTdGF0ZSB8fCB0aGlzLl9jdXJyZW50VGlja0NvbXBsZXRlU3RhdGUuaXNBYm9ydGVkXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5pbml0RGVsYXllZEN1cnNvcigpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgaW5zZXJ0aW9uIG9mIG1vcmUgY29uc2VjdXRpdmUgc3R5bGUgbGluZXMgZm9yIHdoZW4gb25lIG9yIG1vcmVcbiAgICAgKiBuZXdsaW5lcyBnZXRzIGFkZGVkIHRvIHRoZSB0ZXh0LiBTaW5jZSBjdXJyZW50IHN0eWxlIG5lZWRzIHRvIGJlIHNoaWZ0ZWRcbiAgICAgKiBmaXJzdCB3ZSBzaGlmdCB0aGUgY3VycmVudCBzdHlsZSBvZiB0aGUgbnVtYmVyIGxpbmVzIG5lZWRlZCwgdGhlbiB3ZSBhZGRcbiAgICAgKiBuZXcgbGluZXMgZnJvbSB0aGUgbGFzdCB0byB0aGUgZmlyc3QuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCBJbmRleCBvZiBhIGxpbmVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4IEluZGV4IG9mIGEgY2hhclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBxdHkgbnVtYmVyIG9mIGxpbmVzIHRvIGFkZFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvcGllZFN0eWxlIEFycmF5IG9mIG9iamVjdHMgc3R5bGVzXG4gICAgICovXG4gICAgaW5zZXJ0TmV3bGluZVN0eWxlT2JqZWN0OiBmdW5jdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCwgcXR5LCBjb3BpZWRTdHlsZSkge1xuICAgICAgdmFyIGN1cnJlbnRDaGFyU3R5bGUsXG4gICAgICAgICAgbmV3TGluZVN0eWxlcyA9IHt9LFxuICAgICAgICAgIHNvbWV0aGluZ0FkZGVkID0gZmFsc2UsXG4gICAgICAgICAgaXNFbmRPZkxpbmUgPSB0aGlzLl91bndyYXBwZWRUZXh0TGluZXNbbGluZUluZGV4XS5sZW5ndGggPT09IGNoYXJJbmRleDtcblxuICAgICAgcXR5IHx8IChxdHkgPSAxKTtcbiAgICAgIHRoaXMuc2hpZnRMaW5lU3R5bGVzKGxpbmVJbmRleCwgcXR5KTtcbiAgICAgIGlmICh0aGlzLnN0eWxlc1tsaW5lSW5kZXhdKSB7XG4gICAgICAgIGN1cnJlbnRDaGFyU3R5bGUgPSB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdW2NoYXJJbmRleCA9PT0gMCA/IGNoYXJJbmRleCA6IGNoYXJJbmRleCAtIDFdO1xuICAgICAgfVxuICAgICAgLy8gd2UgY2xvbmUgc3R5bGVzIG9mIGFsbCBjaGFyc1xuICAgICAgLy8gYWZ0ZXIgY3Vyc29yIG9udG8gdGhlIGN1cnJlbnQgbGluZVxuICAgICAgZm9yICh2YXIgaW5kZXggaW4gdGhpcy5zdHlsZXNbbGluZUluZGV4XSkge1xuICAgICAgICB2YXIgbnVtSW5kZXggPSBwYXJzZUludChpbmRleCwgMTApO1xuICAgICAgICBpZiAobnVtSW5kZXggPj0gY2hhckluZGV4KSB7XG4gICAgICAgICAgc29tZXRoaW5nQWRkZWQgPSB0cnVlO1xuICAgICAgICAgIG5ld0xpbmVTdHlsZXNbbnVtSW5kZXggLSBjaGFySW5kZXhdID0gdGhpcy5zdHlsZXNbbGluZUluZGV4XVtpbmRleF07XG4gICAgICAgICAgLy8gcmVtb3ZlIGxpbmVzIGZyb20gdGhlIHByZXZpb3VzIGxpbmUgc2luY2UgdGhleSdyZSBvbiBhIG5ldyBsaW5lIG5vd1xuICAgICAgICAgIGlmICghKGlzRW5kT2ZMaW5lICYmIGNoYXJJbmRleCA9PT0gMCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdW2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBzdHlsZUNhcnJpZWRPdmVyID0gZmFsc2U7XG4gICAgICBpZiAoc29tZXRoaW5nQWRkZWQgJiYgIWlzRW5kT2ZMaW5lKSB7XG4gICAgICAgIC8vIGlmIGlzIGVuZCBvZiBsaW5lLCB0aGUgZXh0cmEgc3R5bGUgd2UgY29waWVkXG4gICAgICAgIC8vIGlzIHByb2JhYmx5IG5vdCBzb21ldGhpbmcgd2Ugd2FudFxuICAgICAgICB0aGlzLnN0eWxlc1tsaW5lSW5kZXggKyBxdHldID0gbmV3TGluZVN0eWxlcztcbiAgICAgICAgc3R5bGVDYXJyaWVkT3ZlciA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGVDYXJyaWVkT3Zlcikge1xuICAgICAgICAvLyBza2lwIHRoZSBsYXN0IGxpbmUgb2Ygc2luY2Ugd2UgYWxyZWFkeSBwcmVwYXJlZCBpdC5cbiAgICAgICAgcXR5LS07XG4gICAgICB9XG4gICAgICAvLyBmb3IgdGhlIGFsbCB0aGUgbGluZXMgb3IgYWxsIHRoZSBvdGhlciBsaW5lc1xuICAgICAgLy8gd2UgY2xvbmUgY3VycmVudCBjaGFyIHN0eWxlIG9udG8gdGhlIG5leHQgKG90aGVyd2lzZSBlbXB0eSkgbGluZVxuICAgICAgd2hpbGUgKHF0eSA+IDApIHtcbiAgICAgICAgaWYgKGNvcGllZFN0eWxlICYmIGNvcGllZFN0eWxlW3F0eSAtIDFdKSB7XG4gICAgICAgICAgdGhpcy5zdHlsZXNbbGluZUluZGV4ICsgcXR5XSA9IHsgMDogY2xvbmUoY29waWVkU3R5bGVbcXR5IC0gMV0pIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VycmVudENoYXJTdHlsZSkge1xuICAgICAgICAgIHRoaXMuc3R5bGVzW2xpbmVJbmRleCArIHF0eV0gPSB7IDA6IGNsb25lKGN1cnJlbnRDaGFyU3R5bGUpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW2xpbmVJbmRleCArIHF0eV07XG4gICAgICAgIH1cbiAgICAgICAgcXR5LS07XG4gICAgICB9XG4gICAgICB0aGlzLl9mb3JjZUNsZWFyQ2FjaGUgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBJbnNlcnRzIHN0eWxlIG9iamVjdCBmb3IgYSBnaXZlbiBsaW5lL2NoYXIgaW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4IEluZGV4IG9mIGEgbGluZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXggSW5kZXggb2YgYSBjaGFyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHF1YW50aXR5IG51bWJlciBTdHlsZSBvYmplY3QgdG8gaW5zZXJ0LCBpZiBnaXZlblxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGNvcGllZFN0eWxlIGFycmF5IG9mIHN0eWxlIG9iamVjdHNcbiAgICAgKi9cbiAgICBpbnNlcnRDaGFyU3R5bGVPYmplY3Q6IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4LCBxdWFudGl0eSwgY29waWVkU3R5bGUpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZXMpIHtcbiAgICAgICAgdGhpcy5zdHlsZXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBjdXJyZW50TGluZVN0eWxlcyAgICAgICA9IHRoaXMuc3R5bGVzW2xpbmVJbmRleF0sXG4gICAgICAgICAgY3VycmVudExpbmVTdHlsZXNDbG9uZWQgPSBjdXJyZW50TGluZVN0eWxlcyA/IGNsb25lKGN1cnJlbnRMaW5lU3R5bGVzKSA6IHt9O1xuXG4gICAgICBxdWFudGl0eSB8fCAocXVhbnRpdHkgPSAxKTtcbiAgICAgIC8vIHNoaWZ0IGFsbCBjaGFyIHN0eWxlcyBieSBxdWFudGl0eSBmb3J3YXJkXG4gICAgICAvLyAwLDEsMiwzIC0+IChjaGFySW5kZXg9MikgLT4gMCwxLDMsNCAtPiAoaW5zZXJ0IDIpIC0+IDAsMSwyLDMsNFxuICAgICAgZm9yICh2YXIgaW5kZXggaW4gY3VycmVudExpbmVTdHlsZXNDbG9uZWQpIHtcbiAgICAgICAgdmFyIG51bWVyaWNJbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgICAgIGlmIChudW1lcmljSW5kZXggPj0gY2hhckluZGV4KSB7XG4gICAgICAgICAgY3VycmVudExpbmVTdHlsZXNbbnVtZXJpY0luZGV4ICsgcXVhbnRpdHldID0gY3VycmVudExpbmVTdHlsZXNDbG9uZWRbbnVtZXJpY0luZGV4XTtcbiAgICAgICAgICAvLyBvbmx5IGRlbGV0ZSB0aGUgc3R5bGUgaWYgdGhlcmUgd2FzIG5vdGhpbmcgbW92ZWQgdGhlcmVcbiAgICAgICAgICBpZiAoIWN1cnJlbnRMaW5lU3R5bGVzQ2xvbmVkW251bWVyaWNJbmRleCAtIHF1YW50aXR5XSkge1xuICAgICAgICAgICAgZGVsZXRlIGN1cnJlbnRMaW5lU3R5bGVzW251bWVyaWNJbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9mb3JjZUNsZWFyQ2FjaGUgPSB0cnVlO1xuICAgICAgaWYgKGNvcGllZFN0eWxlKSB7XG4gICAgICAgIHdoaWxlIChxdWFudGl0eS0tKSB7XG4gICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhjb3BpZWRTdHlsZVtxdWFudGl0eV0pLmxlbmd0aCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy5zdHlsZXNbbGluZUluZGV4XSkge1xuICAgICAgICAgICAgdGhpcy5zdHlsZXNbbGluZUluZGV4XSA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdW2NoYXJJbmRleCArIHF1YW50aXR5XSA9IGNsb25lKGNvcGllZFN0eWxlW3F1YW50aXR5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFjdXJyZW50TGluZVN0eWxlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3U3R5bGUgPSBjdXJyZW50TGluZVN0eWxlc1tjaGFySW5kZXggPyBjaGFySW5kZXggLSAxIDogMV07XG4gICAgICB3aGlsZSAobmV3U3R5bGUgJiYgcXVhbnRpdHktLSkge1xuICAgICAgICB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdW2NoYXJJbmRleCArIHF1YW50aXR5XSA9IGNsb25lKG5ld1N0eWxlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyBzdHlsZSBvYmplY3QocylcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBpbnNlcnRlZFRleHQgQ2hhcmFjdGVycyBhdCB0aGUgbG9jYXRpb24gd2hlcmUgc3R5bGUgaXMgaW5zZXJ0ZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnQgY3Vyc29yIGluZGV4IGZvciBpbnNlcnRpbmcgc3R5bGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbY29waWVkU3R5bGVdIGFycmF5IG9mIHN0eWxlIG9iamVjdHMgdG8gaW5zZXJ0LlxuICAgICAqL1xuICAgIGluc2VydE5ld1N0eWxlQmxvY2s6IGZ1bmN0aW9uKGluc2VydGVkVGV4dCwgc3RhcnQsIGNvcGllZFN0eWxlKSB7XG4gICAgICB2YXIgY3Vyc29yTG9jID0gdGhpcy5nZXQyREN1cnNvckxvY2F0aW9uKHN0YXJ0LCB0cnVlKSxcbiAgICAgICAgICBhZGRlZExpbmVzID0gWzBdLCBsaW5lc0xlbmd0aCA9IDA7XG4gICAgICAvLyBnZXQgYW4gYXJyYXkgb2YgaG93IG1hbnkgY2hhciBwZXIgbGluZXMgYXJlIGJlaW5nIGFkZGVkLlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnNlcnRlZFRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluc2VydGVkVGV4dFtpXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICBsaW5lc0xlbmd0aCsrO1xuICAgICAgICAgIGFkZGVkTGluZXNbbGluZXNMZW5ndGhdID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhZGRlZExpbmVzW2xpbmVzTGVuZ3RoXSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBmb3IgdGhlIGZpcnN0IGxpbmUgY29weSB0aGUgc3R5bGUgZnJvbSB0aGUgY3VycmVudCBjaGFyIHBvc2l0aW9uLlxuICAgICAgaWYgKGFkZGVkTGluZXNbMF0gPiAwKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0Q2hhclN0eWxlT2JqZWN0KGN1cnNvckxvYy5saW5lSW5kZXgsIGN1cnNvckxvYy5jaGFySW5kZXgsIGFkZGVkTGluZXNbMF0sIGNvcGllZFN0eWxlKTtcbiAgICAgICAgY29waWVkU3R5bGUgPSBjb3BpZWRTdHlsZSAmJiBjb3BpZWRTdHlsZS5zbGljZShhZGRlZExpbmVzWzBdICsgMSk7XG4gICAgICB9XG4gICAgICBsaW5lc0xlbmd0aCAmJiB0aGlzLmluc2VydE5ld2xpbmVTdHlsZU9iamVjdChcbiAgICAgICAgY3Vyc29yTG9jLmxpbmVJbmRleCwgY3Vyc29yTG9jLmNoYXJJbmRleCArIGFkZGVkTGluZXNbMF0sIGxpbmVzTGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGluZXNMZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYWRkZWRMaW5lc1tpXSA+IDApIHtcbiAgICAgICAgICB0aGlzLmluc2VydENoYXJTdHlsZU9iamVjdChjdXJzb3JMb2MubGluZUluZGV4ICsgaSwgMCwgYWRkZWRMaW5lc1tpXSwgY29waWVkU3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvcGllZFN0eWxlKSB7XG4gICAgICAgICAgLy8gdGhpcyB0ZXN0IGlzIHJlcXVpcmVkIGluIG9yZGVyIHRvIGNsb3NlICM2ODQxXG4gICAgICAgICAgLy8gd2hlbiBhIHBhc3RlZCBidWZmZXIgYmVnaW5zIHdpdGggYSBuZXdsaW5lIHRoZW5cbiAgICAgICAgICAvLyB0aGlzLnN0eWxlc1tjdXJzb3JMb2MubGluZUluZGV4ICsgaV0gYW5kIGNvcGllZFN0eWxlWzBdXG4gICAgICAgICAgLy8gbWF5IGJlIHVuZGVmaW5lZCBmb3Igc29tZSByZWFzb25cbiAgICAgICAgICBpZiAodGhpcy5zdHlsZXNbY3Vyc29yTG9jLmxpbmVJbmRleCArIGldICYmIGNvcGllZFN0eWxlWzBdKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlc1tjdXJzb3JMb2MubGluZUluZGV4ICsgaV1bMF0gPSBjb3BpZWRTdHlsZVswXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29waWVkU3R5bGUgPSBjb3BpZWRTdHlsZSAmJiBjb3BpZWRTdHlsZS5zbGljZShhZGRlZExpbmVzW2ldICsgMSk7XG4gICAgICB9XG4gICAgICAvLyB3ZSB1c2UgaSBvdXRzaWRlIHRoZSBsb29wIHRvIGdldCBpdCBsaWtlIGxpbmVzTGVuZ3RoXG4gICAgICBpZiAoYWRkZWRMaW5lc1tpXSA+IDApIHtcbiAgICAgICAgdGhpcy5pbnNlcnRDaGFyU3R5bGVPYmplY3QoY3Vyc29yTG9jLmxpbmVJbmRleCArIGksIDAsIGFkZGVkTGluZXNbaV0sIGNvcGllZFN0eWxlKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzZWxlY3Rpb25TdGFydCBhbmQgc2VsZWN0aW9uRW5kIGFjY29yZGluZyB0byB0aGUgbmV3IHBvc2l0aW9uIG9mIGN1cnNvclxuICAgICAqIG1pbWljIHRoZSBrZXkgLSBtb3VzZSBuYXZpZ2F0aW9uIHdoZW4gc2hpZnQgaXMgcHJlc3NlZC5cbiAgICAgKi9cbiAgICBzZXRTZWxlY3Rpb25TdGFydEVuZFdpdGhTaGlmdDogZnVuY3Rpb24oc3RhcnQsIGVuZCwgbmV3U2VsZWN0aW9uKSB7XG4gICAgICBpZiAobmV3U2VsZWN0aW9uIDw9IHN0YXJ0KSB7XG4gICAgICAgIGlmIChlbmQgPT09IHN0YXJ0KSB7XG4gICAgICAgICAgdGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID0gJ2xlZnQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBuZXdTZWxlY3Rpb247XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChuZXdTZWxlY3Rpb24gPiBzdGFydCAmJiBuZXdTZWxlY3Rpb24gPCBlbmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gbmV3U2VsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBuZXdTZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBuZXdTZWxlY3Rpb24gaXMgPiBzZWxlY3Rpb24gc3RhcnQgYW5kIGVuZFxuICAgICAgICBpZiAoZW5kID09PSBzdGFydCkge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9ICdyaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID09PSAnbGVmdCcpIHtcbiAgICAgICAgICB0aGlzLl9zZWxlY3Rpb25EaXJlY3Rpb24gPSAncmlnaHQnO1xuICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBlbmQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSBuZXdTZWxlY3Rpb247XG4gICAgICB9XG4gICAgfSxcblxuICAgIHNldFNlbGVjdGlvbkluQm91bmRhcmllczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gdGhpcy50ZXh0Lmxlbmd0aDtcbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID4gbGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0IDwgMCkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNlbGVjdGlvbkVuZCA+IGxlbmd0aCkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMuc2VsZWN0aW9uRW5kIDwgMCkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn0pKCk7XG5cblxuZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuSVRleHQucHJvdG90eXBlLCAvKiogQGxlbmRzIGZhYnJpYy5JVGV4dC5wcm90b3R5cGUgKi8ge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgXCJkYmNsaWNrXCIgZXZlbnQgaGFuZGxlclxuICAgKi9cbiAgaW5pdERvdWJsZUNsaWNrU2ltdWxhdGlvbjogZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBmb3IgZG91YmxlIGNsaWNrXG4gICAgdGhpcy5fX2xhc3RDbGlja1RpbWUgPSArbmV3IERhdGUoKTtcblxuICAgIC8vIGZvciB0cmlwbGUgY2xpY2tcbiAgICB0aGlzLl9fbGFzdExhc3RDbGlja1RpbWUgPSArbmV3IERhdGUoKTtcblxuICAgIHRoaXMuX19sYXN0UG9pbnRlciA9IHsgfTtcblxuICAgIHRoaXMub24oJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGV2ZW50IGhhbmRsZXIgdG8gc2ltdWxhdGUgdHJpcGxlIGNsaWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBvbk1vdXNlRG93bjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fX25ld0NsaWNrVGltZSA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBuZXdQb2ludGVyID0gb3B0aW9ucy5wb2ludGVyO1xuICAgIGlmICh0aGlzLmlzVHJpcGxlQ2xpY2sobmV3UG9pbnRlcikpIHtcbiAgICAgIHRoaXMuZmlyZSgndHJpcGxlY2xpY2snLCBvcHRpb25zKTtcbiAgICAgIHRoaXMuX3N0b3BFdmVudChvcHRpb25zLmUpO1xuICAgIH1cbiAgICB0aGlzLl9fbGFzdExhc3RDbGlja1RpbWUgPSB0aGlzLl9fbGFzdENsaWNrVGltZTtcbiAgICB0aGlzLl9fbGFzdENsaWNrVGltZSA9IHRoaXMuX19uZXdDbGlja1RpbWU7XG4gICAgdGhpcy5fX2xhc3RQb2ludGVyID0gbmV3UG9pbnRlcjtcbiAgICB0aGlzLl9fbGFzdElzRWRpdGluZyA9IHRoaXMuaXNFZGl0aW5nO1xuICAgIHRoaXMuX19sYXN0U2VsZWN0ZWQgPSB0aGlzLnNlbGVjdGVkO1xuICB9LFxuXG4gIGlzVHJpcGxlQ2xpY2s6IGZ1bmN0aW9uKG5ld1BvaW50ZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fX25ld0NsaWNrVGltZSAtIHRoaXMuX19sYXN0Q2xpY2tUaW1lIDwgNTAwICYmXG4gICAgICAgIHRoaXMuX19sYXN0Q2xpY2tUaW1lIC0gdGhpcy5fX2xhc3RMYXN0Q2xpY2tUaW1lIDwgNTAwICYmXG4gICAgICAgIHRoaXMuX19sYXN0UG9pbnRlci54ID09PSBuZXdQb2ludGVyLnggJiZcbiAgICAgICAgdGhpcy5fX2xhc3RQb2ludGVyLnkgPT09IG5ld1BvaW50ZXIueTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9zdG9wRXZlbnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0ICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbiAmJiBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBldmVudCBoYW5kbGVycyByZWxhdGVkIHRvIGN1cnNvciBvciBzZWxlY3Rpb25cbiAgICovXG4gIGluaXRDdXJzb3JTZWxlY3Rpb25IYW5kbGVyczogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbml0TW91c2Vkb3duSGFuZGxlcigpO1xuICAgIHRoaXMuaW5pdE1vdXNldXBIYW5kbGVyKCk7XG4gICAgdGhpcy5pbml0Q2xpY2tzKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlZmF1bHQgaGFuZGxlciBmb3IgZG91YmxlIGNsaWNrLCBzZWxlY3QgYSB3b3JkXG4gICAqL1xuICBkb3VibGVDbGlja0hhbmRsZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0V29yZCh0aGlzLmdldFNlbGVjdGlvblN0YXJ0RnJvbVBvaW50ZXIob3B0aW9ucy5lKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlZmF1bHQgaGFuZGxlciBmb3IgdHJpcGxlIGNsaWNrLCBzZWxlY3QgYSBsaW5lXG4gICAqL1xuICB0cmlwbGVDbGlja0hhbmRsZXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAoIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0TGluZSh0aGlzLmdldFNlbGVjdGlvblN0YXJ0RnJvbVBvaW50ZXIob3B0aW9ucy5lKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGRvdWJsZSBhbmQgdHJpcGxlIGNsaWNrIGV2ZW50IGhhbmRsZXJzXG4gICAqL1xuICBpbml0Q2xpY2tzOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9uKCdtb3VzZWRibGNsaWNrJywgdGhpcy5kb3VibGVDbGlja0hhbmRsZXIpO1xuICAgIHRoaXMub24oJ3RyaXBsZWNsaWNrJywgdGhpcy50cmlwbGVDbGlja0hhbmRsZXIpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXMgbmVlZGVkIG9uIF9tb3VzZURvd25cbiAgICogY2FuIGJlIG92ZXJyaWRkZW4gdG8gZG8gc29tZXRoaW5nIGRpZmZlcmVudC5cbiAgICogU2NvcGUgb2YgdGhpcyBpbXBsZW1lbnRhdGlvbiBpczogZmluZCB0aGUgY2xpY2sgcG9zaXRpb24sIHNldCBzZWxlY3Rpb25TdGFydFxuICAgKiBmaW5kIHNlbGVjdGlvbkVuZCwgaW5pdGlhbGl6ZSB0aGUgZHJhd2luZyBvZiBlaXRoZXIgY3Vyc29yIG9yIHNlbGVjdGlvbiBhcmVhXG4gICAqIGluaXRpYWxpemluZyBhIG1vdXNlZERvd24gb24gYSB0ZXh0IGFyZWEgd2lsbCBjYW5jZWwgZmFicmljanMga25vd2xlZGdlIG9mXG4gICAqIGN1cnJlbnQgY29tcG9zaXRpb25Nb2RlLiBJdCB3aWxsIGJlIHNldCB0byBmYWxzZS5cbiAgICovXG4gIF9tb3VzZURvd25IYW5kbGVyOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmNhbnZhcyB8fCAhdGhpcy5lZGl0YWJsZSB8fCAob3B0aW9ucy5lLmJ1dHRvbiAmJiBvcHRpb25zLmUuYnV0dG9uICE9PSAxKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX19pc01vdXNlZG93biA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5zZWxlY3RlZCkge1xuICAgICAgdGhpcy5pbkNvbXBvc2l0aW9uTW9kZSA9IGZhbHNlO1xuICAgICAgdGhpcy5zZXRDdXJzb3JCeUNsaWNrKG9wdGlvbnMuZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICB0aGlzLl9fc2VsZWN0aW9uU3RhcnRPbk1vdXNlRG93biA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCA9PT0gdGhpcy5zZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgdGhpcy5hYm9ydEN1cnNvckFuaW1hdGlvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZW5kZXJDdXJzb3JPclNlbGVjdGlvbigpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVmYXVsdCBldmVudCBoYW5kbGVyIGZvciB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzIG5lZWRlZCBvbiBtb3VzZWRvd246YmVmb3JlXG4gICAqIGNhbiBiZSBvdmVycmlkZGVuIHRvIGRvIHNvbWV0aGluZyBkaWZmZXJlbnQuXG4gICAqIFNjb3BlIG9mIHRoaXMgaW1wbGVtZW50YXRpb24gaXM6IHZlcmlmeSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgc2VsZWN0ZWQgd2hlbiBtb3VzaW5nIGRvd25cbiAgICovXG4gIF9tb3VzZURvd25IYW5kbGVyQmVmb3JlOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmNhbnZhcyB8fCAhdGhpcy5lZGl0YWJsZSB8fCAob3B0aW9ucy5lLmJ1dHRvbiAmJiBvcHRpb25zLmUuYnV0dG9uICE9PSAxKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB3ZSB3YW50IHRvIGF2b2lkIHRoYXQgYW4gb2JqZWN0IHRoYXQgd2FzIHNlbGVjdGVkIGFuZCB0aGVuIGJlY29tZXMgdW5zZWxlY3RhYmxlLFxuICAgIC8vIG1heSB0cmlnZ2VyIGVkaXRpbmcgbW9kZSBpbiBzb21lIHdheS5cbiAgICB0aGlzLnNlbGVjdGVkID0gdGhpcyA9PT0gdGhpcy5jYW52YXMuX2FjdGl2ZU9iamVjdDtcbiAgfSxcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgXCJtb3VzZWRvd25cIiBldmVudCBoYW5kbGVyXG4gICAqL1xuICBpbml0TW91c2Vkb3duSGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vbignbW91c2Vkb3duJywgdGhpcy5fbW91c2VEb3duSGFuZGxlcik7XG4gICAgdGhpcy5vbignbW91c2Vkb3duOmJlZm9yZScsIHRoaXMuX21vdXNlRG93bkhhbmRsZXJCZWZvcmUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBcIm1vdXNldXBcIiBldmVudCBoYW5kbGVyXG4gICAqL1xuICBpbml0TW91c2V1cEhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMub24oJ21vdXNldXAnLCB0aGlzLm1vdXNlVXBIYW5kbGVyKTtcbiAgfSxcblxuICAvKipcbiAgICogc3RhbmRhcmQgaGFuZGxlciBmb3IgbW91c2UgdXAsIG92ZXJyaWRhYmxlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBtb3VzZVVwSGFuZGxlcjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuX19pc01vdXNlZG93biA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5lZGl0YWJsZSB8fCB0aGlzLmdyb3VwIHx8XG4gICAgICAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb3B0aW9ucy50cmFuc2Zvcm0uYWN0aW9uUGVyZm9ybWVkKSB8fFxuICAgICAgKG9wdGlvbnMuZS5idXR0b24gJiYgb3B0aW9ucy5lLmJ1dHRvbiAhPT0gMSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgIHZhciBjdXJyZW50QWN0aXZlID0gdGhpcy5jYW52YXMuX2FjdGl2ZU9iamVjdDtcbiAgICAgIGlmIChjdXJyZW50QWN0aXZlICYmIGN1cnJlbnRBY3RpdmUgIT09IHRoaXMpIHtcbiAgICAgICAgLy8gYXZvaWQgcnVubmluZyB0aGlzIGxvZ2ljIHdoZW4gdGhlcmUgaXMgYW4gYWN0aXZlIG9iamVjdFxuICAgICAgICAvLyB0aGlzIGJlY2F1c2UgaXMgcG9zc2libGUgd2l0aCBzaGlmdCBjbGljayBhbmQgZmFzdCBjbGlja3MsXG4gICAgICAgIC8vIHRvIHJhcGlkbHkgZGVzZWxlY3QgYW5kIHJlc2VsZWN0IHRoaXMgb2JqZWN0IGFuZCB0cmlnZ2VyIGFuIGVudGVyRWRpdFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX19sYXN0U2VsZWN0ZWQgJiYgIXRoaXMuX19jb3JuZXIpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX19sYXN0U2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZW50ZXJFZGl0aW5nKG9wdGlvbnMuZSk7XG4gICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCA9PT0gdGhpcy5zZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgdGhpcy5pbml0RGVsYXllZEN1cnNvcih0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlckN1cnNvck9yU2VsZWN0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIGN1cnNvciBsb2NhdGlvbiBpbiBhIHRleHQgZGVwZW5kaW5nIG9uIHBhc3NlZCBwb2ludGVyICh4L3kpIG9iamVjdFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgc2V0Q3Vyc29yQnlDbGljazogZnVuY3Rpb24oZSkge1xuICAgIHZhciBuZXdTZWxlY3Rpb24gPSB0aGlzLmdldFNlbGVjdGlvblN0YXJ0RnJvbVBvaW50ZXIoZSksXG4gICAgICAgIHN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25TdGFydCwgZW5kID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgIHRoaXMuc2V0U2VsZWN0aW9uU3RhcnRFbmRXaXRoU2hpZnQoc3RhcnQsIGVuZCwgbmV3U2VsZWN0aW9uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gbmV3U2VsZWN0aW9uO1xuICAgICAgdGhpcy5zZWxlY3Rpb25FbmQgPSBuZXdTZWxlY3Rpb247XG4gICAgfVxuICAgIGlmICh0aGlzLmlzRWRpdGluZykge1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGluZGV4IG9mIGEgY2hhcmFjdGVyIGNvcnJlc3BvbmRpbmcgdG8gd2hlcmUgYW4gb2JqZWN0IHdhcyBjbGlja2VkXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEByZXR1cm4ge051bWJlcn0gSW5kZXggb2YgYSBjaGFyYWN0ZXJcbiAgICovXG4gIGdldFNlbGVjdGlvblN0YXJ0RnJvbVBvaW50ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgbW91c2VPZmZzZXQgPSB0aGlzLmdldExvY2FsUG9pbnRlcihlKSxcbiAgICAgICAgcHJldldpZHRoID0gMCxcbiAgICAgICAgd2lkdGggPSAwLFxuICAgICAgICBoZWlnaHQgPSAwLFxuICAgICAgICBjaGFySW5kZXggPSAwLFxuICAgICAgICBsaW5lSW5kZXggPSAwLFxuICAgICAgICBsaW5lTGVmdE9mZnNldCxcbiAgICAgICAgbGluZTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaGVpZ2h0IDw9IG1vdXNlT2Zmc2V0LnkpIHtcbiAgICAgICAgaGVpZ2h0ICs9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpICogdGhpcy5zY2FsZVk7XG4gICAgICAgIGxpbmVJbmRleCA9IGk7XG4gICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgIGNoYXJJbmRleCArPSB0aGlzLl90ZXh0TGluZXNbaSAtIDFdLmxlbmd0aCArIHRoaXMubWlzc2luZ05ld2xpbmVPZmZzZXQoaSAtIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGxpbmVMZWZ0T2Zmc2V0ID0gdGhpcy5fZ2V0TGluZUxlZnRPZmZzZXQobGluZUluZGV4KTtcbiAgICB3aWR0aCA9IGxpbmVMZWZ0T2Zmc2V0ICogdGhpcy5zY2FsZVg7XG4gICAgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tsaW5lSW5kZXhdO1xuICAgIC8vIGhhbmRsaW5nIG9mIFJUTDogaW4gb3JkZXIgdG8gZ2V0IHRoaW5ncyB3b3JrIGNvcnJlY3RseSxcbiAgICAvLyB3ZSBhc3N1bWUgUlRMIHdyaXRpbmcgaXMgbWlycm9yZWQgY29tcGFyZWQgdG8gTFRSIHdyaXRpbmcuXG4gICAgLy8gc28gaW4gcG9zaXRpb24gZGV0ZWN0aW9uIHdlIG1pcnJvciB0aGUgWCBvZmZzZXQsIGFuZCB3aGVuIGlzIHRpbWVcbiAgICAvLyBvZiByZW5kZXJpbmcgaXQsIHdlIG1pcnJvciBpdCBhZ2Fpbi5cbiAgICBpZiAodGhpcy5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgICBtb3VzZU9mZnNldC54ID0gdGhpcy53aWR0aCAqIHRoaXMuc2NhbGVYIC0gbW91c2VPZmZzZXQueCArIHdpZHRoO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMCwgamxlbiA9IGxpbmUubGVuZ3RoOyBqIDwgamxlbjsgaisrKSB7XG4gICAgICBwcmV2V2lkdGggPSB3aWR0aDtcbiAgICAgIC8vIGkgcmVtb3ZlZCBzb21ldGhpbmcgYWJvdXQgZmxpcFggaGVyZSwgY2hlY2suXG4gICAgICB3aWR0aCArPSB0aGlzLl9fY2hhckJvdW5kc1tsaW5lSW5kZXhdW2pdLmtlcm5lZFdpZHRoICogdGhpcy5zY2FsZVg7XG4gICAgICBpZiAod2lkdGggPD0gbW91c2VPZmZzZXQueCkge1xuICAgICAgICBjaGFySW5kZXgrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2dldE5ld1NlbGVjdGlvblN0YXJ0RnJvbU9mZnNldChtb3VzZU9mZnNldCwgcHJldldpZHRoLCB3aWR0aCwgY2hhckluZGV4LCBqbGVuKTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXROZXdTZWxlY3Rpb25TdGFydEZyb21PZmZzZXQ6IGZ1bmN0aW9uKG1vdXNlT2Zmc2V0LCBwcmV2V2lkdGgsIHdpZHRoLCBpbmRleCwgamxlbikge1xuICAgIC8vIHdlIG5lZWQgTWF0aC5hYnMgYmVjYXVzZSB3aGVuIHdpZHRoIGlzIGFmdGVyIHRoZSBsYXN0IGNoYXIsIHRoZSBvZmZzZXQgaXMgZ2l2ZW4gYXMgMSwgd2hpbGUgaXMgMFxuICAgIHZhciBkaXN0YW5jZUJ0d0xhc3RDaGFyQW5kQ3Vyc29yID0gbW91c2VPZmZzZXQueCAtIHByZXZXaWR0aCxcbiAgICAgICAgZGlzdGFuY2VCdHdOZXh0Q2hhckFuZEN1cnNvciA9IHdpZHRoIC0gbW91c2VPZmZzZXQueCxcbiAgICAgICAgb2Zmc2V0ID0gZGlzdGFuY2VCdHdOZXh0Q2hhckFuZEN1cnNvciA+IGRpc3RhbmNlQnR3TGFzdENoYXJBbmRDdXJzb3IgfHxcbiAgICAgICAgICBkaXN0YW5jZUJ0d05leHRDaGFyQW5kQ3Vyc29yIDwgMCA/IDAgOiAxLFxuICAgICAgICBuZXdTZWxlY3Rpb25TdGFydCA9IGluZGV4ICsgb2Zmc2V0O1xuICAgIC8vIGlmIG9iamVjdCBpcyBob3Jpem9udGFsbHkgZmxpcHBlZCwgbWlycm9yIGN1cnNvciBsb2NhdGlvbiBmcm9tIHRoZSBlbmRcbiAgICBpZiAodGhpcy5mbGlwWCkge1xuICAgICAgbmV3U2VsZWN0aW9uU3RhcnQgPSBqbGVuIC0gbmV3U2VsZWN0aW9uU3RhcnQ7XG4gICAgfVxuXG4gICAgaWYgKG5ld1NlbGVjdGlvblN0YXJ0ID4gdGhpcy5fdGV4dC5sZW5ndGgpIHtcbiAgICAgIG5ld1NlbGVjdGlvblN0YXJ0ID0gdGhpcy5fdGV4dC5sZW5ndGg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ld1NlbGVjdGlvblN0YXJ0O1xuICB9XG59KTtcblxuXG5mYWJyaWMudXRpbC5vYmplY3QuZXh0ZW5kKGZhYnJpYy5JVGV4dC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLklUZXh0LnByb3RvdHlwZSAqLyB7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIGhpZGRlbiB0ZXh0YXJlYSAobmVlZGVkIHRvIGJyaW5nIHVwIGtleWJvYXJkIGluIGlPUylcbiAgICovXG4gIGluaXRIaWRkZW5UZXh0YXJlYTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5oaWRkZW5UZXh0YXJlYSA9IGZhYnJpYy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhdXRvY2FwaXRhbGl6ZScsICdvZmYnKTtcbiAgICB0aGlzLmhpZGRlblRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXV0b2NvcnJlY3QnLCAnb2ZmJyk7XG4gICAgdGhpcy5oaWRkZW5UZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ2F1dG9jb21wbGV0ZScsICdvZmYnKTtcbiAgICB0aGlzLmhpZGRlblRleHRhcmVhLnNldEF0dHJpYnV0ZSgnc3BlbGxjaGVjaycsICdmYWxzZScpO1xuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2V0QXR0cmlidXRlKCdkYXRhLWZhYnJpYy1oaWRkZW50ZXh0YXJlYScsICcnKTtcbiAgICB0aGlzLmhpZGRlblRleHRhcmVhLnNldEF0dHJpYnV0ZSgnd3JhcCcsICdvZmYnKTtcbiAgICB2YXIgc3R5bGUgPSB0aGlzLl9jYWxjVGV4dGFyZWFQb3NpdGlvbigpO1xuICAgIC8vIGxpbmUtaGVpZ2h0OiAxcHg7IHdhcyByZW1vdmVkIGZyb20gdGhlIHN0eWxlIHRvIGZpeCB0aGlzOlxuICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTg3MDk2NlxuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogJyArIHN0eWxlLnRvcCArXG4gICAgJzsgbGVmdDogJyArIHN0eWxlLmxlZnQgKyAnOyB6LWluZGV4OiAtOTk5OyBvcGFjaXR5OiAwOyB3aWR0aDogMXB4OyBoZWlnaHQ6IDFweDsgZm9udC1zaXplOiAxcHg7JyArXG4gICAgJyBwYWRkaW5n772wdG9wOiAnICsgc3R5bGUuZm9udFNpemUgKyAnOyc7XG5cbiAgICBpZiAodGhpcy5oaWRkZW5UZXh0YXJlYUNvbnRhaW5lcikge1xuICAgICAgdGhpcy5oaWRkZW5UZXh0YXJlYUNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlblRleHRhcmVhKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmYWJyaWMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlblRleHRhcmVhKTtcbiAgICB9XG5cbiAgICBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcih0aGlzLmhpZGRlblRleHRhcmVhLCAna2V5ZG93bicsIHRoaXMub25LZXlEb3duLmJpbmQodGhpcykpO1xuICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuaGlkZGVuVGV4dGFyZWEsICdrZXl1cCcsIHRoaXMub25LZXlVcC5iaW5kKHRoaXMpKTtcbiAgICBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcih0aGlzLmhpZGRlblRleHRhcmVhLCAnaW5wdXQnLCB0aGlzLm9uSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIodGhpcy5oaWRkZW5UZXh0YXJlYSwgJ2NvcHknLCB0aGlzLmNvcHkuYmluZCh0aGlzKSk7XG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIodGhpcy5oaWRkZW5UZXh0YXJlYSwgJ2N1dCcsIHRoaXMuY29weS5iaW5kKHRoaXMpKTtcbiAgICBmYWJyaWMudXRpbC5hZGRMaXN0ZW5lcih0aGlzLmhpZGRlblRleHRhcmVhLCAncGFzdGUnLCB0aGlzLnBhc3RlLmJpbmQodGhpcykpO1xuICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuaGlkZGVuVGV4dGFyZWEsICdjb21wb3NpdGlvbnN0YXJ0JywgdGhpcy5vbkNvbXBvc2l0aW9uU3RhcnQuYmluZCh0aGlzKSk7XG4gICAgZmFicmljLnV0aWwuYWRkTGlzdGVuZXIodGhpcy5oaWRkZW5UZXh0YXJlYSwgJ2NvbXBvc2l0aW9udXBkYXRlJywgdGhpcy5vbkNvbXBvc2l0aW9uVXBkYXRlLmJpbmQodGhpcykpO1xuICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuaGlkZGVuVGV4dGFyZWEsICdjb21wb3NpdGlvbmVuZCcsIHRoaXMub25Db21wb3NpdGlvbkVuZC5iaW5kKHRoaXMpKTtcblxuICAgIGlmICghdGhpcy5fY2xpY2tIYW5kbGVySW5pdGlhbGl6ZWQgJiYgdGhpcy5jYW52YXMpIHtcbiAgICAgIGZhYnJpYy51dGlsLmFkZExpc3RlbmVyKHRoaXMuY2FudmFzLnVwcGVyQ2FudmFzRWwsICdjbGljaycsIHRoaXMub25DbGljay5iaW5kKHRoaXMpKTtcbiAgICAgIHRoaXMuX2NsaWNrSGFuZGxlckluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZvciBmdW5jdGlvbmFsaXRpZXMgb24ga2V5RG93blxuICAgKiBNYXAgYSBzcGVjaWFsIGtleSB0byBhIGZ1bmN0aW9uIG9mIHRoZSBpbnN0YW5jZS9wcm90b3R5cGVcbiAgICogSWYgeW91IG5lZWQgZGlmZmVyZW50IGJlaGF2aW91ciBmb3IgRVNDIG9yIFRBQiBvciBhcnJvd3MsIHlvdSBoYXZlIHRvIGNoYW5nZVxuICAgKiB0aGlzIG1hcCBzZXR0aW5nIHRoZSBuYW1lIG9mIGEgZnVuY3Rpb24gdGhhdCB5b3UgYnVpbGQgb24gdGhlIGZhYnJpYy5JdGV4dCBvclxuICAgKiB5b3VyIHByb3RvdHlwZS5cbiAgICogdGhlIG1hcCBjaGFuZ2Ugd2lsbCBhZmZlY3QgYWxsIEluc3RhbmNlcyB1bmxlc3MgeW91IG5lZWQgZm9yIG9ubHkgc29tZSB0ZXh0IEluc3RhbmNlc1xuICAgKiBpbiB0aGF0IGNhc2UgeW91IGhhdmUgdG8gY2xvbmUgdGhpcyBvYmplY3QgYW5kIGFzc2lnbiB5b3VyIEluc3RhbmNlLlxuICAgKiB0aGlzLmtleXNNYXAgPSBmYWJyaWMudXRpbC5vYmplY3QuY2xvbmUodGhpcy5rZXlzTWFwKTtcbiAgICogVGhlIGZ1bmN0aW9uIG11c3QgYmUgaW4gZmFicmljLkl0ZXh0LnByb3RvdHlwZS5teUZ1bmN0aW9uIEFuZCB3aWxsIHJlY2VpdmUgZXZlbnQgYXMgYXJnc1swXVxuICAgKi9cbiAga2V5c01hcDoge1xuICAgIDk6ICAnZXhpdEVkaXRpbmcnLFxuICAgIDI3OiAnZXhpdEVkaXRpbmcnLFxuICAgIDMzOiAnbW92ZUN1cnNvclVwJyxcbiAgICAzNDogJ21vdmVDdXJzb3JEb3duJyxcbiAgICAzNTogJ21vdmVDdXJzb3JSaWdodCcsXG4gICAgMzY6ICdtb3ZlQ3Vyc29yTGVmdCcsXG4gICAgMzc6ICdtb3ZlQ3Vyc29yTGVmdCcsXG4gICAgMzg6ICdtb3ZlQ3Vyc29yVXAnLFxuICAgIDM5OiAnbW92ZUN1cnNvclJpZ2h0JyxcbiAgICA0MDogJ21vdmVDdXJzb3JEb3duJyxcbiAgfSxcblxuICBrZXlzTWFwUnRsOiB7XG4gICAgOTogICdleGl0RWRpdGluZycsXG4gICAgMjc6ICdleGl0RWRpdGluZycsXG4gICAgMzM6ICdtb3ZlQ3Vyc29yVXAnLFxuICAgIDM0OiAnbW92ZUN1cnNvckRvd24nLFxuICAgIDM1OiAnbW92ZUN1cnNvckxlZnQnLFxuICAgIDM2OiAnbW92ZUN1cnNvclJpZ2h0JyxcbiAgICAzNzogJ21vdmVDdXJzb3JSaWdodCcsXG4gICAgMzg6ICdtb3ZlQ3Vyc29yVXAnLFxuICAgIDM5OiAnbW92ZUN1cnNvckxlZnQnLFxuICAgIDQwOiAnbW92ZUN1cnNvckRvd24nLFxuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgZnVuY3Rpb25hbGl0aWVzIG9uIGtleVVwICsgY3RybCB8fCBjbWRcbiAgICovXG4gIGN0cmxLZXlzTWFwVXA6IHtcbiAgICA2NzogJ2NvcHknLFxuICAgIDg4OiAnY3V0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3IgZnVuY3Rpb25hbGl0aWVzIG9uIGtleURvd24gKyBjdHJsIHx8IGNtZFxuICAgKi9cbiAgY3RybEtleXNNYXBEb3duOiB7XG4gICAgNjU6ICdzZWxlY3RBbGwnXG4gIH0sXG5cbiAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgLy8gTm8gbmVlZCB0byB0cmlnZ2VyIGNsaWNrIGV2ZW50IGhlcmUsIGZvY3VzIGlzIGVub3VnaCB0byBoYXZlIHRoZSBrZXlib2FyZCBhcHBlYXIgb24gQW5kcm9pZFxuICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEgJiYgdGhpcy5oaWRkZW5UZXh0YXJlYS5mb2N1cygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGtleWRvd24gZXZlbnRcbiAgICogb25seSB1c2VkIGZvciBhcnJvd3MgYW5kIGNvbWJpbmF0aW9uIG9mIG1vZGlmaWVyIGtleXMuXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBvbktleURvd246IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBrZXlNYXAgPSB0aGlzLmRpcmVjdGlvbiA9PT0gJ3J0bCcgPyB0aGlzLmtleXNNYXBSdGwgOiB0aGlzLmtleXNNYXA7XG4gICAgaWYgKGUua2V5Q29kZSBpbiBrZXlNYXApIHtcbiAgICAgIHRoaXNba2V5TWFwW2Uua2V5Q29kZV1dKGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICgoZS5rZXlDb2RlIGluIHRoaXMuY3RybEtleXNNYXBEb3duKSAmJiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkpIHtcbiAgICAgIHRoaXNbdGhpcy5jdHJsS2V5c01hcERvd25bZS5rZXlDb2RlXV0oZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZS5rZXlDb2RlID49IDMzICYmIGUua2V5Q29kZSA8PSA0MCkge1xuICAgICAgLy8gaWYgaSBwcmVzcyBhbiBhcnJvdyBrZXkganVzdCB1cGRhdGUgc2VsZWN0aW9uXG4gICAgICB0aGlzLmluQ29tcG9zaXRpb25Nb2RlID0gZmFsc2U7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dFRvcCgpO1xuICAgICAgdGhpcy5yZW5kZXJDdXJzb3JPclNlbGVjdGlvbigpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuY2FudmFzICYmIHRoaXMuY2FudmFzLnJlcXVlc3RSZW5kZXJBbGwoKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMga2V5dXAgZXZlbnRcbiAgICogV2UgaGFuZGxlIEtleVVwIGJlY2F1c2UgaWUxMSBhbmQgZWRnZSBoYXZlIGRpZmZpY3VsdGllcyBjb3B5L3Bhc3RpbmdcbiAgICogaWYgYSBjb3B5L2N1dCBldmVudCBmaXJlZCwga2V5dXAgaXMgZGlzbWlzc2VkXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBvbktleVVwOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKCF0aGlzLmlzRWRpdGluZyB8fCB0aGlzLl9jb3B5RG9uZSB8fCB0aGlzLmluQ29tcG9zaXRpb25Nb2RlKSB7XG4gICAgICB0aGlzLl9jb3B5RG9uZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoKGUua2V5Q29kZSBpbiB0aGlzLmN0cmxLZXlzTWFwVXApICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSkge1xuICAgICAgdGhpc1t0aGlzLmN0cmxLZXlzTWFwVXBbZS5rZXlDb2RlXV0oZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmNhbnZhcyAmJiB0aGlzLmNhbnZhcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEhhbmRsZXMgb25JbnB1dCBldmVudFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgb25JbnB1dDogZnVuY3Rpb24oZSkge1xuICAgIHZhciBmcm9tUGFzdGUgPSB0aGlzLmZyb21QYXN0ZTtcbiAgICB0aGlzLmZyb21QYXN0ZSA9IGZhbHNlO1xuICAgIGUgJiYgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGRlY2lzaW9ucyBhYm91dCBzdHlsZSBjaGFuZ2VzLlxuICAgIHZhciBuZXh0VGV4dCA9IHRoaXMuX3NwbGl0VGV4dEludG9MaW5lcyh0aGlzLmhpZGRlblRleHRhcmVhLnZhbHVlKS5ncmFwaGVtZVRleHQsXG4gICAgICAgIGNoYXJDb3VudCA9IHRoaXMuX3RleHQubGVuZ3RoLFxuICAgICAgICBuZXh0Q2hhckNvdW50ID0gbmV4dFRleHQubGVuZ3RoLFxuICAgICAgICByZW1vdmVkVGV4dCwgaW5zZXJ0ZWRUZXh0LFxuICAgICAgICBjaGFyRGlmZiA9IG5leHRDaGFyQ291bnQgLSBjaGFyQ291bnQsXG4gICAgICAgIHNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25FbmQsXG4gICAgICAgIHNlbGVjdGlvbiA9IHNlbGVjdGlvblN0YXJ0ICE9PSBzZWxlY3Rpb25FbmQsXG4gICAgICAgIGNvcGllZFN0eWxlLCByZW1vdmVGcm9tLCByZW1vdmVUbztcbiAgICBpZiAodGhpcy5oaWRkZW5UZXh0YXJlYS52YWx1ZSA9PT0gJycpIHtcbiAgICAgIHRoaXMuc3R5bGVzID0geyB9O1xuICAgICAgdGhpcy51cGRhdGVGcm9tVGV4dEFyZWEoKTtcbiAgICAgIHRoaXMuZmlyZSgnY2hhbmdlZCcpO1xuICAgICAgaWYgKHRoaXMuY2FudmFzKSB7XG4gICAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ3RleHQ6Y2hhbmdlZCcsIHsgdGFyZ2V0OiB0aGlzIH0pO1xuICAgICAgICB0aGlzLmNhbnZhcy5yZXF1ZXN0UmVuZGVyQWxsKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRleHRhcmVhU2VsZWN0aW9uID0gdGhpcy5mcm9tU3RyaW5nVG9HcmFwaGVtZVNlbGVjdGlvbihcbiAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQsXG4gICAgICB0aGlzLmhpZGRlblRleHRhcmVhLnNlbGVjdGlvbkVuZCxcbiAgICAgIHRoaXMuaGlkZGVuVGV4dGFyZWEudmFsdWVcbiAgICApO1xuICAgIHZhciBiYWNrRGVsZXRlID0gc2VsZWN0aW9uU3RhcnQgPiB0ZXh0YXJlYVNlbGVjdGlvbi5zZWxlY3Rpb25TdGFydDtcblxuICAgIGlmIChzZWxlY3Rpb24pIHtcbiAgICAgIHJlbW92ZWRUZXh0ID0gdGhpcy5fdGV4dC5zbGljZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKTtcbiAgICAgIGNoYXJEaWZmICs9IHNlbGVjdGlvbkVuZCAtIHNlbGVjdGlvblN0YXJ0O1xuICAgIH1cbiAgICBlbHNlIGlmIChuZXh0Q2hhckNvdW50IDwgY2hhckNvdW50KSB7XG4gICAgICBpZiAoYmFja0RlbGV0ZSkge1xuICAgICAgICByZW1vdmVkVGV4dCA9IHRoaXMuX3RleHQuc2xpY2Uoc2VsZWN0aW9uRW5kICsgY2hhckRpZmYsIHNlbGVjdGlvbkVuZCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVtb3ZlZFRleHQgPSB0aGlzLl90ZXh0LnNsaWNlKHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25TdGFydCAtIGNoYXJEaWZmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW5zZXJ0ZWRUZXh0ID0gbmV4dFRleHQuc2xpY2UodGV4dGFyZWFTZWxlY3Rpb24uc2VsZWN0aW9uRW5kIC0gY2hhckRpZmYsIHRleHRhcmVhU2VsZWN0aW9uLnNlbGVjdGlvbkVuZCk7XG4gICAgaWYgKHJlbW92ZWRUZXh0ICYmIHJlbW92ZWRUZXh0Lmxlbmd0aCkge1xuICAgICAgaWYgKGluc2VydGVkVGV4dC5sZW5ndGgpIHtcbiAgICAgICAgLy8gbGV0J3MgY29weSBzb21lIHN0eWxlIGJlZm9yZSBkZWxldGluZy5cbiAgICAgICAgLy8gd2Ugd2FudCB0byBjb3B5IHRoZSBzdHlsZSBiZWZvcmUgdGhlIGN1cnNvciBPUiB0aGUgc3R5bGUgYXQgdGhlIGN1cnNvciBpZiBzZWxlY3Rpb25cbiAgICAgICAgLy8gaXMgYmlnZ2VyIHRoYW4gMC5cbiAgICAgICAgY29waWVkU3R5bGUgPSB0aGlzLmdldFNlbGVjdGlvblN0eWxlcyhzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uU3RhcnQgKyAxLCBmYWxzZSk7XG4gICAgICAgIC8vIG5vdyBkdXBsaWNhdGUgdGhlIHN0eWxlIG9uZSBmb3IgZWFjaCBpbnNlcnRlZCB0ZXh0LlxuICAgICAgICBjb3BpZWRTdHlsZSA9IGluc2VydGVkVGV4dC5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgLy8gdGhpcyByZXR1cm4gYW4gYXJyYXkgb2YgcmVmZXJlbmNlcywgYnV0IHRoYXQgaXMgZmluZSBzaW5jZSB3ZSBhcmVcbiAgICAgICAgICAvLyBjb3B5aW5nIHRoZSBzdHlsZSBsYXRlci5cbiAgICAgICAgICByZXR1cm4gY29waWVkU3R5bGVbMF07XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgICByZW1vdmVGcm9tID0gc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgIHJlbW92ZVRvID0gc2VsZWN0aW9uRW5kO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoYmFja0RlbGV0ZSkge1xuICAgICAgICAvLyBkZXRlY3QgZGlmZmVyZW5jZXMgYmV0d2VlbiBmb3J3YXJkRGVsZXRlIGFuZCBiYWNrRGVsZXRlXG4gICAgICAgIHJlbW92ZUZyb20gPSBzZWxlY3Rpb25FbmQgLSByZW1vdmVkVGV4dC5sZW5ndGg7XG4gICAgICAgIHJlbW92ZVRvID0gc2VsZWN0aW9uRW5kO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJlbW92ZUZyb20gPSBzZWxlY3Rpb25FbmQ7XG4gICAgICAgIHJlbW92ZVRvID0gc2VsZWN0aW9uRW5kICsgcmVtb3ZlZFRleHQubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdGhpcy5yZW1vdmVTdHlsZUZyb21UbyhyZW1vdmVGcm9tLCByZW1vdmVUbyk7XG4gICAgfVxuICAgIGlmIChpbnNlcnRlZFRleHQubGVuZ3RoKSB7XG4gICAgICBpZiAoZnJvbVBhc3RlICYmIGluc2VydGVkVGV4dC5qb2luKCcnKSA9PT0gZmFicmljLmNvcGllZFRleHQgJiYgIWZhYnJpYy5kaXNhYmxlU3R5bGVDb3B5UGFzdGUpIHtcbiAgICAgICAgY29waWVkU3R5bGUgPSBmYWJyaWMuY29waWVkVGV4dFN0eWxlO1xuICAgICAgfVxuICAgICAgdGhpcy5pbnNlcnROZXdTdHlsZUJsb2NrKGluc2VydGVkVGV4dCwgc2VsZWN0aW9uU3RhcnQsIGNvcGllZFN0eWxlKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVGcm9tVGV4dEFyZWEoKTtcbiAgICB0aGlzLmZpcmUoJ2NoYW5nZWQnKTtcbiAgICBpZiAodGhpcy5jYW52YXMpIHtcbiAgICAgIHRoaXMuY2FudmFzLmZpcmUoJ3RleHQ6Y2hhbmdlZCcsIHsgdGFyZ2V0OiB0aGlzIH0pO1xuICAgICAgdGhpcy5jYW52YXMucmVxdWVzdFJlbmRlckFsbCgpO1xuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIENvbXBvc2l0aW9uIHN0YXJ0XG4gICAqL1xuICBvbkNvbXBvc2l0aW9uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5Db21wb3NpdGlvbk1vZGUgPSB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wb3NpdGlvbiBlbmRcbiAgICovXG4gIG9uQ29tcG9zaXRpb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5Db21wb3NpdGlvbk1vZGUgPSBmYWxzZTtcbiAgfSxcblxuICAvLyAvKipcbiAgLy8gICogQ29tcG9zaXRpb24gdXBkYXRlXG4gIC8vICAqL1xuICBvbkNvbXBvc2l0aW9uVXBkYXRlOiBmdW5jdGlvbihlKSB7XG4gICAgdGhpcy5jb21wb3NpdGlvblN0YXJ0ID0gZS50YXJnZXQuc2VsZWN0aW9uU3RhcnQ7XG4gICAgdGhpcy5jb21wb3NpdGlvbkVuZCA9IGUudGFyZ2V0LnNlbGVjdGlvbkVuZDtcbiAgICB0aGlzLnVwZGF0ZVRleHRhcmVhUG9zaXRpb24oKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29waWVzIHNlbGVjdGVkIHRleHRcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgLy9kbyBub3QgY3V0LWNvcHkgaWYgbm8gc2VsZWN0aW9uXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZmFicmljLmNvcGllZFRleHQgPSB0aGlzLmdldFNlbGVjdGVkVGV4dCgpO1xuICAgIGlmICghZmFicmljLmRpc2FibGVTdHlsZUNvcHlQYXN0ZSkge1xuICAgICAgZmFicmljLmNvcGllZFRleHRTdHlsZSA9IHRoaXMuZ2V0U2VsZWN0aW9uU3R5bGVzKHRoaXMuc2VsZWN0aW9uU3RhcnQsIHRoaXMuc2VsZWN0aW9uRW5kLCB0cnVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmYWJyaWMuY29waWVkVGV4dFN0eWxlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5fY29weURvbmUgPSB0cnVlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQYXN0ZXMgdGV4dFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgcGFzdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZnJvbVBhc3RlID0gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQHJldHVybiB7T2JqZWN0fSBDbGlwYm9hcmQgZGF0YSBvYmplY3RcbiAgICovXG4gIF9nZXRDbGlwYm9hcmREYXRhOiBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIChlICYmIGUuY2xpcGJvYXJkRGF0YSkgfHwgZmFicmljLndpbmRvdy5jbGlwYm9hcmREYXRhO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgd2lkdGggaW4gcGl4ZWxzIGJlZm9yZSB0aGUgY3Vyc29yIG9uIHRoZSBzYW1lIGxpbmVcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgKiBAcGFyYW0ge051bWJlcn0gY2hhckluZGV4XG4gICAqIEByZXR1cm4ge051bWJlcn0gd2lkdGhCZWZvcmVDdXJzb3Igd2lkdGggYmVmb3JlIGN1cnNvclxuICAgKi9cbiAgX2dldFdpZHRoQmVmb3JlQ3Vyc29yOiBmdW5jdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCkge1xuICAgIHZhciB3aWR0aEJlZm9yZUN1cnNvciA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGxpbmVJbmRleCksIGJvdW5kO1xuXG4gICAgaWYgKGNoYXJJbmRleCA+IDApIHtcbiAgICAgIGJvdW5kID0gdGhpcy5fX2NoYXJCb3VuZHNbbGluZUluZGV4XVtjaGFySW5kZXggLSAxXTtcbiAgICAgIHdpZHRoQmVmb3JlQ3Vyc29yICs9IGJvdW5kLmxlZnQgKyBib3VuZC53aWR0aDtcbiAgICB9XG4gICAgcmV0dXJuIHdpZHRoQmVmb3JlQ3Vyc29yO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHN0YXJ0IG9mZnNldCBvZiBhIHNlbGVjdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmlnaHRcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgZ2V0RG93bkN1cnNvck9mZnNldDogZnVuY3Rpb24oZSwgaXNSaWdodCkge1xuICAgIHZhciBzZWxlY3Rpb25Qcm9wID0gdGhpcy5fZ2V0U2VsZWN0aW9uRm9yT2Zmc2V0KGUsIGlzUmlnaHQpLFxuICAgICAgICBjdXJzb3JMb2NhdGlvbiA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihzZWxlY3Rpb25Qcm9wKSxcbiAgICAgICAgbGluZUluZGV4ID0gY3Vyc29yTG9jYXRpb24ubGluZUluZGV4O1xuICAgIC8vIGlmIG9uIGxhc3QgbGluZSwgZG93biBjdXJzb3IgZ29lcyB0byBlbmQgb2YgbGluZVxuICAgIGlmIChsaW5lSW5kZXggPT09IHRoaXMuX3RleHRMaW5lcy5sZW5ndGggLSAxIHx8IGUubWV0YUtleSB8fCBlLmtleUNvZGUgPT09IDM0KSB7XG4gICAgICAvLyBtb3ZlIHRvIHRoZSBlbmQgb2YgYSB0ZXh0XG4gICAgICByZXR1cm4gdGhpcy5fdGV4dC5sZW5ndGggLSBzZWxlY3Rpb25Qcm9wO1xuICAgIH1cbiAgICB2YXIgY2hhckluZGV4ID0gY3Vyc29yTG9jYXRpb24uY2hhckluZGV4LFxuICAgICAgICB3aWR0aEJlZm9yZUN1cnNvciA9IHRoaXMuX2dldFdpZHRoQmVmb3JlQ3Vyc29yKGxpbmVJbmRleCwgY2hhckluZGV4KSxcbiAgICAgICAgaW5kZXhPbk90aGVyTGluZSA9IHRoaXMuX2dldEluZGV4T25MaW5lKGxpbmVJbmRleCArIDEsIHdpZHRoQmVmb3JlQ3Vyc29yKSxcbiAgICAgICAgdGV4dEFmdGVyQ3Vyc29yID0gdGhpcy5fdGV4dExpbmVzW2xpbmVJbmRleF0uc2xpY2UoY2hhckluZGV4KTtcbiAgICByZXR1cm4gdGV4dEFmdGVyQ3Vyc29yLmxlbmd0aCArIGluZGV4T25PdGhlckxpbmUgKyAxICsgdGhpcy5taXNzaW5nTmV3bGluZU9mZnNldChsaW5lSW5kZXgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBwcml2YXRlXG4gICAqIEhlbHBzIGZpbmRpbmcgaWYgdGhlIG9mZnNldCBzaG91bGQgYmUgY291bnRlZCBmcm9tIFN0YXJ0IG9yIEVuZFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmlnaHRcbiAgICogQHJldHVybiB7TnVtYmVyfVxuICAgKi9cbiAgX2dldFNlbGVjdGlvbkZvck9mZnNldDogZnVuY3Rpb24oZSwgaXNSaWdodCkge1xuICAgIGlmIChlLnNoaWZ0S2V5ICYmIHRoaXMuc2VsZWN0aW9uU3RhcnQgIT09IHRoaXMuc2VsZWN0aW9uRW5kICYmIGlzUmlnaHQpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbkVuZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSaWdodFxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAqL1xuICBnZXRVcEN1cnNvck9mZnNldDogZnVuY3Rpb24oZSwgaXNSaWdodCkge1xuICAgIHZhciBzZWxlY3Rpb25Qcm9wID0gdGhpcy5fZ2V0U2VsZWN0aW9uRm9yT2Zmc2V0KGUsIGlzUmlnaHQpLFxuICAgICAgICBjdXJzb3JMb2NhdGlvbiA9IHRoaXMuZ2V0MkRDdXJzb3JMb2NhdGlvbihzZWxlY3Rpb25Qcm9wKSxcbiAgICAgICAgbGluZUluZGV4ID0gY3Vyc29yTG9jYXRpb24ubGluZUluZGV4O1xuICAgIGlmIChsaW5lSW5kZXggPT09IDAgfHwgZS5tZXRhS2V5IHx8IGUua2V5Q29kZSA9PT0gMzMpIHtcbiAgICAgIC8vIGlmIG9uIGZpcnN0IGxpbmUsIHVwIGN1cnNvciBnb2VzIHRvIHN0YXJ0IG9mIGxpbmVcbiAgICAgIHJldHVybiAtc2VsZWN0aW9uUHJvcDtcbiAgICB9XG4gICAgdmFyIGNoYXJJbmRleCA9IGN1cnNvckxvY2F0aW9uLmNoYXJJbmRleCxcbiAgICAgICAgd2lkdGhCZWZvcmVDdXJzb3IgPSB0aGlzLl9nZXRXaWR0aEJlZm9yZUN1cnNvcihsaW5lSW5kZXgsIGNoYXJJbmRleCksXG4gICAgICAgIGluZGV4T25PdGhlckxpbmUgPSB0aGlzLl9nZXRJbmRleE9uTGluZShsaW5lSW5kZXggLSAxLCB3aWR0aEJlZm9yZUN1cnNvciksXG4gICAgICAgIHRleHRCZWZvcmVDdXJzb3IgPSB0aGlzLl90ZXh0TGluZXNbbGluZUluZGV4XS5zbGljZSgwLCBjaGFySW5kZXgpLFxuICAgICAgICBtaXNzaW5nTmV3bGluZU9mZnNldCA9IHRoaXMubWlzc2luZ05ld2xpbmVPZmZzZXQobGluZUluZGV4IC0gMSk7XG4gICAgLy8gcmV0dXJuIGEgbmVnYXRpdmUgb2Zmc2V0XG4gICAgcmV0dXJuIC10aGlzLl90ZXh0TGluZXNbbGluZUluZGV4IC0gMV0ubGVuZ3RoXG4gICAgICsgaW5kZXhPbk90aGVyTGluZSAtIHRleHRCZWZvcmVDdXJzb3IubGVuZ3RoICsgKDEgLSBtaXNzaW5nTmV3bGluZU9mZnNldCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGZvciBhIGdpdmVuIHdpZHRoIGl0IGZvdW5kcyB0aGUgbWF0Y2hpbmcgY2hhcmFjdGVyLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEluZGV4T25MaW5lOiBmdW5jdGlvbihsaW5lSW5kZXgsIHdpZHRoKSB7XG5cbiAgICB2YXIgbGluZSA9IHRoaXMuX3RleHRMaW5lc1tsaW5lSW5kZXhdLFxuICAgICAgICBsaW5lTGVmdE9mZnNldCA9IHRoaXMuX2dldExpbmVMZWZ0T2Zmc2V0KGxpbmVJbmRleCksXG4gICAgICAgIHdpZHRoT2ZDaGFyc09uTGluZSA9IGxpbmVMZWZ0T2Zmc2V0LFxuICAgICAgICBpbmRleE9uTGluZSA9IDAsIGNoYXJXaWR0aCwgZm91bmRNYXRjaDtcblxuICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gbGluZS5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgIGNoYXJXaWR0aCA9IHRoaXMuX19jaGFyQm91bmRzW2xpbmVJbmRleF1bal0ud2lkdGg7XG4gICAgICB3aWR0aE9mQ2hhcnNPbkxpbmUgKz0gY2hhcldpZHRoO1xuICAgICAgaWYgKHdpZHRoT2ZDaGFyc09uTGluZSA+IHdpZHRoKSB7XG4gICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgICAgICB2YXIgbGVmdEVkZ2UgPSB3aWR0aE9mQ2hhcnNPbkxpbmUgLSBjaGFyV2lkdGgsXG4gICAgICAgICAgICByaWdodEVkZ2UgPSB3aWR0aE9mQ2hhcnNPbkxpbmUsXG4gICAgICAgICAgICBvZmZzZXRGcm9tTGVmdEVkZ2UgPSBNYXRoLmFicyhsZWZ0RWRnZSAtIHdpZHRoKSxcbiAgICAgICAgICAgIG9mZnNldEZyb21SaWdodEVkZ2UgPSBNYXRoLmFicyhyaWdodEVkZ2UgLSB3aWR0aCk7XG5cbiAgICAgICAgaW5kZXhPbkxpbmUgPSBvZmZzZXRGcm9tUmlnaHRFZGdlIDwgb2Zmc2V0RnJvbUxlZnRFZGdlID8gaiA6IChqIC0gMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHJlYWNoZWQgZW5kXG4gICAgaWYgKCFmb3VuZE1hdGNoKSB7XG4gICAgICBpbmRleE9uTGluZSA9IGxpbmUubGVuZ3RoIC0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5kZXhPbkxpbmU7XG4gIH0sXG5cblxuICAvKipcbiAgICogTW92ZXMgY3Vyc29yIGRvd25cbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIG1vdmVDdXJzb3JEb3duOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPj0gdGhpcy5fdGV4dC5sZW5ndGggJiYgdGhpcy5zZWxlY3Rpb25FbmQgPj0gdGhpcy5fdGV4dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbW92ZUN1cnNvclVwT3JEb3duKCdEb3duJywgZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciB1cFxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgbW92ZUN1cnNvclVwOiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgPT09IDAgJiYgdGhpcy5zZWxlY3Rpb25FbmQgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fbW92ZUN1cnNvclVwT3JEb3duKCdVcCcsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3IgdXAgb3IgZG93biwgZmlyZXMgdGhlIGV2ZW50c1xuICAgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uICdVcCcgb3IgJ0Rvd24nXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBfbW92ZUN1cnNvclVwT3JEb3duOiBmdW5jdGlvbihkaXJlY3Rpb24sIGUpIHtcbiAgICAvLyBnZXRVcEN1cnNvck9mZnNldFxuICAgIC8vIGdldERvd25DdXJzb3JPZmZzZXRcbiAgICB2YXIgYWN0aW9uID0gJ2dldCcgKyBkaXJlY3Rpb24gKyAnQ3Vyc29yT2Zmc2V0JyxcbiAgICAgICAgb2Zmc2V0ID0gdGhpc1thY3Rpb25dKGUsIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9PT0gJ3JpZ2h0Jyk7XG4gICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcldpdGhTaGlmdChvZmZzZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMubW92ZUN1cnNvcldpdGhvdXRTaGlmdChvZmZzZXQpO1xuICAgIH1cbiAgICBpZiAob2Zmc2V0ICE9PSAwKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvbkluQm91bmRhcmllcygpO1xuICAgICAgdGhpcy5hYm9ydEN1cnNvckFuaW1hdGlvbigpO1xuICAgICAgdGhpcy5fY3VycmVudEN1cnNvck9wYWNpdHkgPSAxO1xuICAgICAgdGhpcy5pbml0RGVsYXllZEN1cnNvcigpO1xuICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICAgIHRoaXMuX3VwZGF0ZVRleHRhcmVhKCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3Igd2l0aCBzaGlmdFxuICAgKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0XG4gICAqL1xuICBtb3ZlQ3Vyc29yV2l0aFNoaWZ0OiBmdW5jdGlvbihvZmZzZXQpIHtcbiAgICB2YXIgbmV3U2VsZWN0aW9uID0gdGhpcy5fc2VsZWN0aW9uRGlyZWN0aW9uID09PSAnbGVmdCdcbiAgICAgID8gdGhpcy5zZWxlY3Rpb25TdGFydCArIG9mZnNldFxuICAgICAgOiB0aGlzLnNlbGVjdGlvbkVuZCArIG9mZnNldDtcbiAgICB0aGlzLnNldFNlbGVjdGlvblN0YXJ0RW5kV2l0aFNoaWZ0KHRoaXMuc2VsZWN0aW9uU3RhcnQsIHRoaXMuc2VsZWN0aW9uRW5kLCBuZXdTZWxlY3Rpb24pO1xuICAgIHJldHVybiBvZmZzZXQgIT09IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciB1cCB3aXRob3V0IHNoaWZ0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXRcbiAgICovXG4gIG1vdmVDdXJzb3JXaXRob3V0U2hpZnQ6IGZ1bmN0aW9uKG9mZnNldCkge1xuICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ICs9IG9mZnNldDtcbiAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGlvbkVuZCArPSBvZmZzZXQ7XG4gICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQgIT09IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciBsZWZ0XG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBtb3ZlQ3Vyc29yTGVmdDogZnVuY3Rpb24oZSkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID09PSAwICYmIHRoaXMuc2VsZWN0aW9uRW5kID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX21vdmVDdXJzb3JMZWZ0T3JSaWdodCgnTGVmdCcsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGEgY2hhbmdlIGhhcHBlbmVkXG4gICAqL1xuICBfbW92ZTogZnVuY3Rpb24oZSwgcHJvcCwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIG5ld1ZhbHVlO1xuICAgIGlmIChlLmFsdEtleSkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzWydmaW5kV29yZEJvdW5kYXJ5JyArIGRpcmVjdGlvbl0odGhpc1twcm9wXSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGUubWV0YUtleSB8fCBlLmtleUNvZGUgPT09IDM1IHx8ICBlLmtleUNvZGUgPT09IDM2ICkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzWydmaW5kTGluZUJvdW5kYXJ5JyArIGRpcmVjdGlvbl0odGhpc1twcm9wXSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpc1twcm9wXSArPSBkaXJlY3Rpb24gPT09ICdMZWZ0JyA/IC0xIDogMTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgJiYgdGhpc1twcm9wXSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIHRoaXNbcHJvcF0gPSBuZXdWYWx1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9tb3ZlTGVmdDogZnVuY3Rpb24oZSwgcHJvcCkge1xuICAgIHJldHVybiB0aGlzLl9tb3ZlKGUsIHByb3AsICdMZWZ0Jyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbW92ZVJpZ2h0OiBmdW5jdGlvbihlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHRoaXMuX21vdmUoZSwgcHJvcCwgJ1JpZ2h0Jyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciBsZWZ0IHdpdGhvdXQga2VlcGluZyBzZWxlY3Rpb25cbiAgICogQHBhcmFtIHtFdmVudH0gZVxuICAgKi9cbiAgbW92ZUN1cnNvckxlZnRXaXRob3V0U2hpZnQ6IGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgY2hhbmdlID0gdHJ1ZTtcbiAgICB0aGlzLl9zZWxlY3Rpb25EaXJlY3Rpb24gPSAnbGVmdCc7XG5cbiAgICAvLyBvbmx5IG1vdmUgY3Vyc29yIHdoZW4gdGhlcmUgaXMgbm8gc2VsZWN0aW9uLFxuICAgIC8vIG90aGVyd2lzZSB3ZSBkaXNjYXJkIGl0LCBhbmQgbGVhdmUgY3Vyc29yIG9uIHNhbWUgcGxhY2VcbiAgICBpZiAodGhpcy5zZWxlY3Rpb25FbmQgPT09IHRoaXMuc2VsZWN0aW9uU3RhcnQgJiYgdGhpcy5zZWxlY3Rpb25TdGFydCAhPT0gMCkge1xuICAgICAgY2hhbmdlID0gdGhpcy5fbW92ZUxlZnQoZSwgJ3NlbGVjdGlvblN0YXJ0Jyk7XG5cbiAgICB9XG4gICAgdGhpcy5zZWxlY3Rpb25FbmQgPSB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgIHJldHVybiBjaGFuZ2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vdmVzIGN1cnNvciBsZWZ0IHdoaWxlIGtlZXBpbmcgc2VsZWN0aW9uXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICovXG4gIG1vdmVDdXJzb3JMZWZ0V2l0aFNoaWZ0OiBmdW5jdGlvbihlKSB7XG4gICAgaWYgKHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9PT0gJ3JpZ2h0JyAmJiB0aGlzLnNlbGVjdGlvblN0YXJ0ICE9PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21vdmVMZWZ0KGUsICdzZWxlY3Rpb25FbmQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCAhPT0gMCl7XG4gICAgICB0aGlzLl9zZWxlY3Rpb25EaXJlY3Rpb24gPSAnbGVmdCc7XG4gICAgICByZXR1cm4gdGhpcy5fbW92ZUxlZnQoZSwgJ3NlbGVjdGlvblN0YXJ0Jyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3IgcmlnaHRcbiAgICogQHBhcmFtIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIG1vdmVDdXJzb3JSaWdodDogZnVuY3Rpb24oZSkge1xuICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ID49IHRoaXMuX3RleHQubGVuZ3RoICYmIHRoaXMuc2VsZWN0aW9uRW5kID49IHRoaXMuX3RleHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX21vdmVDdXJzb3JMZWZ0T3JSaWdodCgnUmlnaHQnLCBlKTtcbiAgfSxcblxuICAvKipcbiAgICogTW92ZXMgY3Vyc29yIHJpZ2h0IG9yIExlZnQsIGZpcmVzIGV2ZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBkaXJlY3Rpb24gJ0xlZnQnLCAnUmlnaHQnXG4gICAqIEBwYXJhbSB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBfbW92ZUN1cnNvckxlZnRPclJpZ2h0OiBmdW5jdGlvbihkaXJlY3Rpb24sIGUpIHtcbiAgICB2YXIgYWN0aW9uTmFtZSA9ICdtb3ZlQ3Vyc29yJyArIGRpcmVjdGlvbiArICdXaXRoJztcbiAgICB0aGlzLl9jdXJyZW50Q3Vyc29yT3BhY2l0eSA9IDE7XG5cbiAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgYWN0aW9uTmFtZSArPSAnU2hpZnQnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGFjdGlvbk5hbWUgKz0gJ291dFNoaWZ0JztcbiAgICB9XG4gICAgaWYgKHRoaXNbYWN0aW9uTmFtZV0oZSkpIHtcbiAgICAgIHRoaXMuYWJvcnRDdXJzb3JBbmltYXRpb24oKTtcbiAgICAgIHRoaXMuaW5pdERlbGF5ZWRDdXJzb3IoKTtcbiAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25DaGFuZ2VkKCk7XG4gICAgICB0aGlzLl91cGRhdGVUZXh0YXJlYSgpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTW92ZXMgY3Vyc29yIHJpZ2h0IHdoaWxlIGtlZXBpbmcgc2VsZWN0aW9uXG4gICAqIEBwYXJhbSB7RXZlbnR9IGVcbiAgICovXG4gIG1vdmVDdXJzb3JSaWdodFdpdGhTaGlmdDogZnVuY3Rpb24oZSkge1xuICAgIGlmICh0aGlzLl9zZWxlY3Rpb25EaXJlY3Rpb24gPT09ICdsZWZ0JyAmJiB0aGlzLnNlbGVjdGlvblN0YXJ0ICE9PSB0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgcmV0dXJuIHRoaXMuX21vdmVSaWdodChlLCAnc2VsZWN0aW9uU3RhcnQnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodGhpcy5zZWxlY3Rpb25FbmQgIT09IHRoaXMuX3RleHQubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9zZWxlY3Rpb25EaXJlY3Rpb24gPSAncmlnaHQnO1xuICAgICAgcmV0dXJuIHRoaXMuX21vdmVSaWdodChlLCAnc2VsZWN0aW9uRW5kJyk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb3ZlcyBjdXJzb3IgcmlnaHQgd2l0aG91dCBrZWVwaW5nIHNlbGVjdGlvblxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgbW92ZUN1cnNvclJpZ2h0V2l0aG91dFNoaWZ0OiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGNoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMuX3NlbGVjdGlvbkRpcmVjdGlvbiA9ICdyaWdodCc7XG5cbiAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCA9PT0gdGhpcy5zZWxlY3Rpb25FbmQpIHtcbiAgICAgIGNoYW5nZWQgPSB0aGlzLl9tb3ZlUmlnaHQoZSwgJ3NlbGVjdGlvblN0YXJ0Jyk7XG4gICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IHRoaXMuc2VsZWN0aW9uRW5kO1xuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBjaGFyYWN0ZXJzIGZyb20gc3RhcnQvZW5kXG4gICAqIHN0YXJ0L2VuZCBhciBwZXIgZ3JhcGhlbWUgcG9zaXRpb24gaW4gX3RleHQgYXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzdGFydFxuICAgKiBAcGFyYW0ge051bWJlcn0gZW5kIGRlZmF1bHQgdG8gc3RhcnQgKyAxXG4gICAqL1xuICByZW1vdmVDaGFyczogZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIGlmICh0eXBlb2YgZW5kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZW5kID0gc3RhcnQgKyAxO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZVN0eWxlRnJvbVRvKHN0YXJ0LCBlbmQpO1xuICAgIHRoaXMuX3RleHQuc3BsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCk7XG4gICAgdGhpcy50ZXh0ID0gdGhpcy5fdGV4dC5qb2luKCcnKTtcbiAgICB0aGlzLnNldCgnZGlydHknLCB0cnVlKTtcbiAgICBpZiAodGhpcy5fc2hvdWxkQ2xlYXJEaW1lbnNpb25DYWNoZSgpKSB7XG4gICAgICB0aGlzLmluaXREaW1lbnNpb25zKCk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgIH1cbiAgICB0aGlzLl9yZW1vdmVFeHRyYW5lb3VzU3R5bGVzKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGluc2VydCBjaGFyYWN0ZXJzIGF0IHN0YXJ0IHBvc2l0aW9uLCBiZWZvcmUgc3RhcnQgcG9zaXRpb24uXG4gICAqIHN0YXJ0ICBlcXVhbCAxIGl0IG1lYW5zIHRoZSB0ZXh0IGdldCBpbnNlcnRlZCBiZXR3ZWVuIGFjdHVhbCBncmFwaGVtZSAwIGFuZCAxXG4gICAqIGlmIHN0eWxlIGFycmF5IGlzIHByb3ZpZGVkLCBpdCBtdXN0IGJlIGFzIHRoZSBzYW1lIGxlbmd0aCBvZiB0ZXh0IGluIGdyYXBoZW1lc1xuICAgKiBpZiBlbmQgaXMgcHJvdmlkZWQgYW5kIGlzIGJpZ2dlciB0aGFuIHN0YXJ0LCBvbGQgdGV4dCBpcyByZXBsYWNlZC5cbiAgICogc3RhcnQvZW5kIGFyIHBlciBncmFwaGVtZSBwb3NpdGlvbiBpbiBfdGV4dCBhcnJheS5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGV4dCB0byBpbnNlcnRcbiAgICogQHBhcmFtIHtBcnJheX0gc3R5bGUgYXJyYXkgb2Ygc3R5bGUgb2JqZWN0c1xuICAgKiBAcGFyYW0ge051bWJlcn0gc3RhcnRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZCBkZWZhdWx0IHRvIHN0YXJ0ICsgMVxuICAgKi9cbiAgaW5zZXJ0Q2hhcnM6IGZ1bmN0aW9uKHRleHQsIHN0eWxlLCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKHR5cGVvZiBlbmQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICB9XG4gICAgaWYgKGVuZCA+IHN0YXJ0KSB7XG4gICAgICB0aGlzLnJlbW92ZVN0eWxlRnJvbVRvKHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICB2YXIgZ3JhcGhlbWVzID0gZmFicmljLnV0aWwuc3RyaW5nLmdyYXBoZW1lU3BsaXQodGV4dCk7XG4gICAgdGhpcy5pbnNlcnROZXdTdHlsZUJsb2NrKGdyYXBoZW1lcywgc3RhcnQsIHN0eWxlKTtcbiAgICB0aGlzLl90ZXh0ID0gW10uY29uY2F0KHRoaXMuX3RleHQuc2xpY2UoMCwgc3RhcnQpLCBncmFwaGVtZXMsIHRoaXMuX3RleHQuc2xpY2UoZW5kKSk7XG4gICAgdGhpcy50ZXh0ID0gdGhpcy5fdGV4dC5qb2luKCcnKTtcbiAgICB0aGlzLnNldCgnZGlydHknLCB0cnVlKTtcbiAgICBpZiAodGhpcy5fc2hvdWxkQ2xlYXJEaW1lbnNpb25DYWNoZSgpKSB7XG4gICAgICB0aGlzLmluaXREaW1lbnNpb25zKCk7XG4gICAgICB0aGlzLnNldENvb3JkcygpO1xuICAgIH1cbiAgICB0aGlzLl9yZW1vdmVFeHRyYW5lb3VzU3R5bGVzKCk7XG4gIH0sXG5cbn0pO1xuXG5cbi8qIF9UT19TVkdfU1RBUlRfICovXG4oZnVuY3Rpb24oKSB7XG4gIHZhciB0b0ZpeGVkID0gZmFicmljLnV0aWwudG9GaXhlZCxcbiAgICAgIG11bHRpcGxlU3BhY2VzUmVnZXggPSAvICArL2c7XG5cbiAgZmFicmljLnV0aWwub2JqZWN0LmV4dGVuZChmYWJyaWMuVGV4dC5wcm90b3R5cGUsIC8qKiBAbGVuZHMgZmFicmljLlRleHQucHJvdG90eXBlICovIHtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgU1ZHIHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jldml2ZXJdIE1ldGhvZCBmb3IgZnVydGhlciBwYXJzaW5nIG9mIHN2ZyByZXByZXNlbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9IHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIF90b1NWRzogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2Zmc2V0cyA9IHRoaXMuX2dldFNWR0xlZnRUb3BPZmZzZXRzKCksXG4gICAgICAgICAgdGV4dEFuZEJnID0gdGhpcy5fZ2V0U1ZHVGV4dEFuZEJnKG9mZnNldHMudGV4dFRvcCwgb2Zmc2V0cy50ZXh0TGVmdCk7XG4gICAgICByZXR1cm4gdGhpcy5fd3JhcFNWR1RleHRBbmRCZyh0ZXh0QW5kQmcpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN2ZyByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXZpdmVyXSBNZXRob2QgZm9yIGZ1cnRoZXIgcGFyc2luZyBvZiBzdmcgcmVwcmVzZW50YXRpb24uXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBzdmcgcmVwcmVzZW50YXRpb24gb2YgYW4gaW5zdGFuY2VcbiAgICAgKi9cbiAgICB0b1NWRzogZnVuY3Rpb24ocmV2aXZlcikge1xuICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUJhc2VTVkdNYXJrdXAoXG4gICAgICAgIHRoaXMuX3RvU1ZHKCksXG4gICAgICAgIHsgcmV2aXZlcjogcmV2aXZlciwgbm9TdHlsZTogdHJ1ZSwgd2l0aFNoYWRvdzogdHJ1ZSB9XG4gICAgICApO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRTVkdMZWZ0VG9wT2Zmc2V0czogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0TGVmdDogLXRoaXMud2lkdGggLyAyLFxuICAgICAgICB0ZXh0VG9wOiAtdGhpcy5oZWlnaHQgLyAyLFxuICAgICAgICBsaW5lVG9wOiB0aGlzLmdldEhlaWdodE9mTGluZSgwKVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfd3JhcFNWR1RleHRBbmRCZzogZnVuY3Rpb24odGV4dEFuZEJnKSB7XG4gICAgICB2YXIgbm9TaGFkb3cgPSB0cnVlLFxuICAgICAgICAgIHRleHREZWNvcmF0aW9uID0gdGhpcy5nZXRTdmdUZXh0RGVjb3JhdGlvbih0aGlzKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHRleHRBbmRCZy50ZXh0QmdSZWN0cy5qb2luKCcnKSxcbiAgICAgICAgJ1xcdFxcdDx0ZXh0IHhtbDpzcGFjZT1cInByZXNlcnZlXCIgJyxcbiAgICAgICAgKHRoaXMuZm9udEZhbWlseSA/ICdmb250LWZhbWlseT1cIicgKyB0aGlzLmZvbnRGYW1pbHkucmVwbGFjZSgvXCIvZywgJ1xcJycpICsgJ1wiICcgOiAnJyksXG4gICAgICAgICh0aGlzLmZvbnRTaXplID8gJ2ZvbnQtc2l6ZT1cIicgKyB0aGlzLmZvbnRTaXplICsgJ1wiICcgOiAnJyksXG4gICAgICAgICh0aGlzLmZvbnRTdHlsZSA/ICdmb250LXN0eWxlPVwiJyArIHRoaXMuZm9udFN0eWxlICsgJ1wiICcgOiAnJyksXG4gICAgICAgICh0aGlzLmZvbnRXZWlnaHQgPyAnZm9udC13ZWlnaHQ9XCInICsgdGhpcy5mb250V2VpZ2h0ICsgJ1wiICcgOiAnJyksXG4gICAgICAgICh0ZXh0RGVjb3JhdGlvbiA/ICd0ZXh0LWRlY29yYXRpb249XCInICsgdGV4dERlY29yYXRpb24gKyAnXCIgJyA6ICcnKSxcbiAgICAgICAgJ3N0eWxlPVwiJywgdGhpcy5nZXRTdmdTdHlsZXMobm9TaGFkb3cpLCAnXCInLCB0aGlzLmFkZFBhaW50T3JkZXIoKSwgJyA+JyxcbiAgICAgICAgdGV4dEFuZEJnLnRleHRTcGFucy5qb2luKCcnKSxcbiAgICAgICAgJzwvdGV4dD5cXG4nXG4gICAgICBdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0ZXh0VG9wT2Zmc2V0IFRleHQgdG9wIG9mZnNldFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0ZXh0TGVmdE9mZnNldCBUZXh0IGxlZnQgb2Zmc2V0XG4gICAgICogQHJldHVybiB7T2JqZWN0fVxuICAgICAqL1xuICAgIF9nZXRTVkdUZXh0QW5kQmc6IGZ1bmN0aW9uKHRleHRUb3BPZmZzZXQsIHRleHRMZWZ0T2Zmc2V0KSB7XG4gICAgICB2YXIgdGV4dFNwYW5zID0gW10sXG4gICAgICAgICAgdGV4dEJnUmVjdHMgPSBbXSxcbiAgICAgICAgICBoZWlnaHQgPSB0ZXh0VG9wT2Zmc2V0LCBsaW5lT2Zmc2V0O1xuICAgICAgLy8gYm91bmRpbmctYm94IGJhY2tncm91bmRcbiAgICAgIHRoaXMuX3NldFNWR0JnKHRleHRCZ1JlY3RzKTtcblxuICAgICAgLy8gdGV4dCBhbmQgdGV4dC1iYWNrZ3JvdW5kXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5fdGV4dExpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGxpbmVPZmZzZXQgPSB0aGlzLl9nZXRMaW5lTGVmdE9mZnNldChpKTtcbiAgICAgICAgaWYgKHRoaXMudGV4dEJhY2tncm91bmRDb2xvciB8fCB0aGlzLnN0eWxlSGFzKCd0ZXh0QmFja2dyb3VuZENvbG9yJywgaSkpIHtcbiAgICAgICAgICB0aGlzLl9zZXRTVkdUZXh0TGluZUJnKHRleHRCZ1JlY3RzLCBpLCB0ZXh0TGVmdE9mZnNldCArIGxpbmVPZmZzZXQsIGhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0U1ZHVGV4dExpbmVUZXh0KHRleHRTcGFucywgaSwgdGV4dExlZnRPZmZzZXQgKyBsaW5lT2Zmc2V0LCBoZWlnaHQpO1xuICAgICAgICBoZWlnaHQgKz0gdGhpcy5nZXRIZWlnaHRPZkxpbmUoaSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRleHRTcGFuczogdGV4dFNwYW5zLFxuICAgICAgICB0ZXh0QmdSZWN0czogdGV4dEJnUmVjdHNcbiAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NyZWF0ZVRleHRDaGFyU3BhbjogZnVuY3Rpb24oX2NoYXIsIHN0eWxlRGVjbCwgbGVmdCwgdG9wKSB7XG4gICAgICB2YXIgc2hvdWxkVXNlV2hpdGVzcGFjZSA9IF9jaGFyICE9PSBfY2hhci50cmltKCkgfHwgX2NoYXIubWF0Y2gobXVsdGlwbGVTcGFjZXNSZWdleCksXG4gICAgICAgICAgc3R5bGVQcm9wcyA9IHRoaXMuZ2V0U3ZnU3BhblN0eWxlcyhzdHlsZURlY2wsIHNob3VsZFVzZVdoaXRlc3BhY2UpLFxuICAgICAgICAgIGZpbGxTdHlsZXMgPSBzdHlsZVByb3BzID8gJ3N0eWxlPVwiJyArIHN0eWxlUHJvcHMgKyAnXCInIDogJycsXG4gICAgICAgICAgZHkgPSBzdHlsZURlY2wuZGVsdGFZLCBkeVNwYW4gPSAnJyxcbiAgICAgICAgICBOVU1fRlJBQ1RJT05fRElHSVRTID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTO1xuICAgICAgaWYgKGR5KSB7XG4gICAgICAgIGR5U3BhbiA9ICcgZHk9XCInICsgdG9GaXhlZChkeSwgTlVNX0ZSQUNUSU9OX0RJR0lUUykgKyAnXCIgJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBbXG4gICAgICAgICc8dHNwYW4geD1cIicsIHRvRml4ZWQobGVmdCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksICdcIiB5PVwiJyxcbiAgICAgICAgdG9GaXhlZCh0b3AsIE5VTV9GUkFDVElPTl9ESUdJVFMpLCAnXCIgJywgZHlTcGFuLFxuICAgICAgICBmaWxsU3R5bGVzLCAnPicsXG4gICAgICAgIGZhYnJpYy51dGlsLnN0cmluZy5lc2NhcGVYbWwoX2NoYXIpLFxuICAgICAgICAnPC90c3Bhbj4nXG4gICAgICBdLmpvaW4oJycpO1xuICAgIH0sXG5cbiAgICBfc2V0U1ZHVGV4dExpbmVUZXh0OiBmdW5jdGlvbih0ZXh0U3BhbnMsIGxpbmVJbmRleCwgdGV4dExlZnRPZmZzZXQsIHRleHRUb3BPZmZzZXQpIHtcbiAgICAgIC8vIHNldCBwcm9wZXIgbGluZSBvZmZzZXRcbiAgICAgIHZhciBsaW5lSGVpZ2h0ID0gdGhpcy5nZXRIZWlnaHRPZkxpbmUobGluZUluZGV4KSxcbiAgICAgICAgICBpc0p1c3RpZnkgPSB0aGlzLnRleHRBbGlnbi5pbmRleE9mKCdqdXN0aWZ5JykgIT09IC0xLFxuICAgICAgICAgIGFjdHVhbFN0eWxlLFxuICAgICAgICAgIG5leHRTdHlsZSxcbiAgICAgICAgICBjaGFyc1RvUmVuZGVyID0gJycsXG4gICAgICAgICAgY2hhckJveCwgc3R5bGUsXG4gICAgICAgICAgYm94V2lkdGggPSAwLFxuICAgICAgICAgIGxpbmUgPSB0aGlzLl90ZXh0TGluZXNbbGluZUluZGV4XSxcbiAgICAgICAgICB0aW1lVG9SZW5kZXI7XG5cbiAgICAgIHRleHRUb3BPZmZzZXQgKz0gbGluZUhlaWdodCAqICgxIC0gdGhpcy5fZm9udFNpemVGcmFjdGlvbikgLyB0aGlzLmxpbmVIZWlnaHQ7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGluZS5sZW5ndGggLSAxOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgICAgIHRpbWVUb1JlbmRlciA9IGkgPT09IGxlbiB8fCB0aGlzLmNoYXJTcGFjaW5nO1xuICAgICAgICBjaGFyc1RvUmVuZGVyICs9IGxpbmVbaV07XG4gICAgICAgIGNoYXJCb3ggPSB0aGlzLl9fY2hhckJvdW5kc1tsaW5lSW5kZXhdW2ldO1xuICAgICAgICBpZiAoYm94V2lkdGggPT09IDApIHtcbiAgICAgICAgICB0ZXh0TGVmdE9mZnNldCArPSBjaGFyQm94Lmtlcm5lZFdpZHRoIC0gY2hhckJveC53aWR0aDtcbiAgICAgICAgICBib3hXaWR0aCArPSBjaGFyQm94LndpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJveFdpZHRoICs9IGNoYXJCb3gua2VybmVkV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSnVzdGlmeSAmJiAhdGltZVRvUmVuZGVyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX3JlU3BhY2VBbmRUYWIudGVzdChsaW5lW2ldKSkge1xuICAgICAgICAgICAgdGltZVRvUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aW1lVG9SZW5kZXIpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGNoYXJTcGFjaW5nLCB3ZSByZW5kZXIgY2hhciBieSBjaGFyXG4gICAgICAgICAgYWN0dWFsU3R5bGUgPSBhY3R1YWxTdHlsZSB8fCB0aGlzLmdldENvbXBsZXRlU3R5bGVEZWNsYXJhdGlvbihsaW5lSW5kZXgsIGkpO1xuICAgICAgICAgIG5leHRTdHlsZSA9IHRoaXMuZ2V0Q29tcGxldGVTdHlsZURlY2xhcmF0aW9uKGxpbmVJbmRleCwgaSArIDEpO1xuICAgICAgICAgIHRpbWVUb1JlbmRlciA9IHRoaXMuX2hhc1N0eWxlQ2hhbmdlZEZvclN2ZyhhY3R1YWxTdHlsZSwgbmV4dFN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZVRvUmVuZGVyKSB7XG4gICAgICAgICAgc3R5bGUgPSB0aGlzLl9nZXRTdHlsZURlY2xhcmF0aW9uKGxpbmVJbmRleCwgaSkgfHwgeyB9O1xuICAgICAgICAgIHRleHRTcGFucy5wdXNoKHRoaXMuX2NyZWF0ZVRleHRDaGFyU3BhbihjaGFyc1RvUmVuZGVyLCBzdHlsZSwgdGV4dExlZnRPZmZzZXQsIHRleHRUb3BPZmZzZXQpKTtcbiAgICAgICAgICBjaGFyc1RvUmVuZGVyID0gJyc7XG4gICAgICAgICAgYWN0dWFsU3R5bGUgPSBuZXh0U3R5bGU7XG4gICAgICAgICAgdGV4dExlZnRPZmZzZXQgKz0gYm94V2lkdGg7XG4gICAgICAgICAgYm94V2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9wdXNoVGV4dEJnUmVjdDogZnVuY3Rpb24odGV4dEJnUmVjdHMsIGNvbG9yLCBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHZhciBOVU1fRlJBQ1RJT05fRElHSVRTID0gZmFicmljLk9iamVjdC5OVU1fRlJBQ1RJT05fRElHSVRTO1xuICAgICAgdGV4dEJnUmVjdHMucHVzaChcbiAgICAgICAgJ1xcdFxcdDxyZWN0ICcsXG4gICAgICAgIHRoaXMuX2dldEZpbGxBdHRyaWJ1dGVzKGNvbG9yKSxcbiAgICAgICAgJyB4PVwiJyxcbiAgICAgICAgdG9GaXhlZChsZWZ0LCBOVU1fRlJBQ1RJT05fRElHSVRTKSxcbiAgICAgICAgJ1wiIHk9XCInLFxuICAgICAgICB0b0ZpeGVkKHRvcCwgTlVNX0ZSQUNUSU9OX0RJR0lUUyksXG4gICAgICAgICdcIiB3aWR0aD1cIicsXG4gICAgICAgIHRvRml4ZWQod2lkdGgsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAnXCIgaGVpZ2h0PVwiJyxcbiAgICAgICAgdG9GaXhlZChoZWlnaHQsIE5VTV9GUkFDVElPTl9ESUdJVFMpLFxuICAgICAgICAnXCI+PC9yZWN0PlxcbicpO1xuICAgIH0sXG5cbiAgICBfc2V0U1ZHVGV4dExpbmVCZzogZnVuY3Rpb24odGV4dEJnUmVjdHMsIGksIGxlZnRPZmZzZXQsIHRleHRUb3BPZmZzZXQpIHtcbiAgICAgIHZhciBsaW5lID0gdGhpcy5fdGV4dExpbmVzW2ldLFxuICAgICAgICAgIGhlaWdodE9mTGluZSA9IHRoaXMuZ2V0SGVpZ2h0T2ZMaW5lKGkpIC8gdGhpcy5saW5lSGVpZ2h0LFxuICAgICAgICAgIGJveFdpZHRoID0gMCxcbiAgICAgICAgICBib3hTdGFydCA9IDAsXG4gICAgICAgICAgY2hhckJveCwgY3VycmVudENvbG9yLFxuICAgICAgICAgIGxhc3RDb2xvciA9IHRoaXMuZ2V0VmFsdWVPZlByb3BlcnR5QXQoaSwgMCwgJ3RleHRCYWNrZ3JvdW5kQ29sb3InKTtcbiAgICAgIGZvciAodmFyIGogPSAwLCBqbGVuID0gbGluZS5sZW5ndGg7IGogPCBqbGVuOyBqKyspIHtcbiAgICAgICAgY2hhckJveCA9IHRoaXMuX19jaGFyQm91bmRzW2ldW2pdO1xuICAgICAgICBjdXJyZW50Q29sb3IgPSB0aGlzLmdldFZhbHVlT2ZQcm9wZXJ0eUF0KGksIGosICd0ZXh0QmFja2dyb3VuZENvbG9yJyk7XG4gICAgICAgIGlmIChjdXJyZW50Q29sb3IgIT09IGxhc3RDb2xvcikge1xuICAgICAgICAgIGxhc3RDb2xvciAmJiB0aGlzLl9wdXNoVGV4dEJnUmVjdCh0ZXh0QmdSZWN0cywgbGFzdENvbG9yLCBsZWZ0T2Zmc2V0ICsgYm94U3RhcnQsXG4gICAgICAgICAgICB0ZXh0VG9wT2Zmc2V0LCBib3hXaWR0aCwgaGVpZ2h0T2ZMaW5lKTtcbiAgICAgICAgICBib3hTdGFydCA9IGNoYXJCb3gubGVmdDtcbiAgICAgICAgICBib3hXaWR0aCA9IGNoYXJCb3gud2lkdGg7XG4gICAgICAgICAgbGFzdENvbG9yID0gY3VycmVudENvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJveFdpZHRoICs9IGNoYXJCb3gua2VybmVkV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGN1cnJlbnRDb2xvciAmJiB0aGlzLl9wdXNoVGV4dEJnUmVjdCh0ZXh0QmdSZWN0cywgY3VycmVudENvbG9yLCBsZWZ0T2Zmc2V0ICsgYm94U3RhcnQsXG4gICAgICAgIHRleHRUb3BPZmZzZXQsIGJveFdpZHRoLCBoZWlnaHRPZkxpbmUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBBZG9iZSBJbGx1c3RyYXRvciAoYXQgbGVhc3QgQ1M1KSBpcyB1bmFibGUgdG8gcmVuZGVyIHJnYmEoKS1iYXNlZCBmaWxsIHZhbHVlc1xuICAgICAqIHdlIHdvcmsgYXJvdW5kIGl0IGJ5IFwibW92aW5nXCIgYWxwaGEgY2hhbm5lbCBpbnRvIG9wYWNpdHkgYXR0cmlidXRlIGFuZCBzZXR0aW5nIGZpbGwncyBhbHBoYSB0byAxXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgX2dldEZpbGxBdHRyaWJ1dGVzOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGZpbGxDb2xvciA9ICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSA/IG5ldyBmYWJyaWMuQ29sb3IodmFsdWUpIDogJyc7XG4gICAgICBpZiAoIWZpbGxDb2xvciB8fCAhZmlsbENvbG9yLmdldFNvdXJjZSgpIHx8IGZpbGxDb2xvci5nZXRBbHBoYSgpID09PSAxKSB7XG4gICAgICAgIHJldHVybiAnZmlsbD1cIicgKyB2YWx1ZSArICdcIic7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ29wYWNpdHk9XCInICsgZmlsbENvbG9yLmdldEFscGhhKCkgKyAnXCIgZmlsbD1cIicgKyBmaWxsQ29sb3Iuc2V0QWxwaGEoMSkudG9SZ2IoKSArICdcIic7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2dldFNWR0xpbmVUb3BPZmZzZXQ6IGZ1bmN0aW9uKGxpbmVJbmRleCkge1xuICAgICAgdmFyIGxpbmVUb3BPZmZzZXQgPSAwLCBsYXN0SGVpZ2h0ID0gMDtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGluZUluZGV4OyBqKyspIHtcbiAgICAgICAgbGluZVRvcE9mZnNldCArPSB0aGlzLmdldEhlaWdodE9mTGluZShqKTtcbiAgICAgIH1cbiAgICAgIGxhc3RIZWlnaHQgPSB0aGlzLmdldEhlaWdodE9mTGluZShqKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbmVUb3A6IGxpbmVUb3BPZmZzZXQsXG4gICAgICAgIG9mZnNldDogKHRoaXMuX2ZvbnRTaXplTXVsdCAtIHRoaXMuX2ZvbnRTaXplRnJhY3Rpb24pICogbGFzdEhlaWdodCAvICh0aGlzLmxpbmVIZWlnaHQgKiB0aGlzLl9mb250U2l6ZU11bHQpXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHN0eWxlcy1zdHJpbmcgZm9yIHN2Zy1leHBvcnRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHNraXBTaGFkb3cgYSBib29sZWFuIHRvIHNraXAgc2hhZG93IGZpbHRlciBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAgICovXG4gICAgZ2V0U3ZnU3R5bGVzOiBmdW5jdGlvbihza2lwU2hhZG93KSB7XG4gICAgICB2YXIgc3ZnU3R5bGUgPSBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5nZXRTdmdTdHlsZXMuY2FsbCh0aGlzLCBza2lwU2hhZG93KTtcbiAgICAgIHJldHVybiBzdmdTdHlsZSArICcgd2hpdGUtc3BhY2U6IHByZTsnO1xuICAgIH0sXG4gIH0pO1xufSkoKTtcbi8qIF9UT19TVkdfRU5EXyAqL1xuXG5cbihmdW5jdGlvbihnbG9iYWwpIHtcblxuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIGZhYnJpYyA9IGdsb2JhbC5mYWJyaWMgfHwgKGdsb2JhbC5mYWJyaWMgPSB7fSk7XG5cbiAgLyoqXG4gICAqIFRleHRib3ggY2xhc3MsIGJhc2VkIG9uIElUZXh0LCBhbGxvd3MgdGhlIHVzZXIgdG8gcmVzaXplIHRoZSB0ZXh0IHJlY3RhbmdsZVxuICAgKiBhbmQgd3JhcHMgbGluZXMgYXV0b21hdGljYWxseS4gVGV4dGJveGVzIGhhdmUgdGhlaXIgWSBzY2FsaW5nIGxvY2tlZCwgdGhlXG4gICAqIHVzZXIgY2FuIG9ubHkgY2hhbmdlIHdpZHRoLiBIZWlnaHQgaXMgYWRqdXN0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiB0aGVcbiAgICogd3JhcHBpbmcgb2YgbGluZXMuXG4gICAqIEBjbGFzcyBmYWJyaWMuVGV4dGJveFxuICAgKiBAZXh0ZW5kcyBmYWJyaWMuSVRleHRcbiAgICogQG1peGVzIGZhYnJpYy5PYnNlcnZhYmxlXG4gICAqIEByZXR1cm4ge2ZhYnJpYy5UZXh0Ym94fSB0aGlzQXJnXG4gICAqIEBzZWUge0BsaW5rIGZhYnJpYy5UZXh0Ym94I2luaXRpYWxpemV9IGZvciBjb25zdHJ1Y3RvciBkZWZpbml0aW9uXG4gICAqL1xuICBmYWJyaWMuVGV4dGJveCA9IGZhYnJpYy51dGlsLmNyZWF0ZUNsYXNzKGZhYnJpYy5JVGV4dCwgZmFicmljLk9ic2VydmFibGUsIHtcblxuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgYW4gb2JqZWN0XG4gICAgICogQHR5cGUgU3RyaW5nXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0eXBlOiAndGV4dGJveCcsXG5cbiAgICAvKipcbiAgICAgKiBNaW5pbXVtIHdpZHRoIG9mIHRleHRib3gsIGluIHBpeGVscy5cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIG1pbldpZHRoOiAyMCxcblxuICAgIC8qKlxuICAgICAqIE1pbmltdW0gY2FsY3VsYXRlZCB3aWR0aCBvZiBhIHRleHRib3gsIGluIHBpeGVscy5cbiAgICAgKiBmaXhlZCB0byAyIHNvIHRoYXQgYW4gZW1wdHkgdGV4dGJveCBjYW5ub3QgZ28gdG8gMFxuICAgICAqIGFuZCBpcyBzdGlsbCBzZWxlY3RhYmxlIHdpdGhvdXQgdGV4dC5cbiAgICAgKiBAdHlwZSBOdW1iZXJcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIGR5bmFtaWNNaW5XaWR0aDogMixcblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBhcnJheSBvZiB0ZXh0IHdyYXBwaW5nLlxuICAgICAqIEB0eXBlIEFycmF5XG4gICAgICovXG4gICAgX19jYWNoZWRMaW5lczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHN0YW5kYXJkIE9iamVjdCBjbGFzcyB2YWx1ZXNcbiAgICAgKi9cbiAgICBsb2NrU2NhbGluZ0ZsaXA6IHRydWUsXG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBzdGFuZGFyZCBPYmplY3QgY2xhc3MgdmFsdWVzXG4gICAgICogVGV4dGJveCBuZWVkcyB0aGlzIG9uIGZhbHNlXG4gICAgICovXG4gICAgbm9TY2FsZUNhY2hlOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgd2hpY2ggd2hlbiBzZXQgY2F1c2Ugb2JqZWN0IHRvIGNoYW5nZSBkaW1lbnNpb25zXG4gICAgICogQHR5cGUgT2JqZWN0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZGltZW5zaW9uQWZmZWN0aW5nUHJvcHM6IGZhYnJpYy5UZXh0LnByb3RvdHlwZS5fZGltZW5zaW9uQWZmZWN0aW5nUHJvcHMuY29uY2F0KCd3aWR0aCcpLFxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgcmVndWxhciBleHByZXNzaW9uIHRvIHNwbGl0IHN0cmluZ3MgaW4gYnJlYWthYmxlIGxpbmVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfd29yZEpvaW5lcnM6IC9bIFxcdFxccl0vLFxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoaXMgYm9vbGVhbiBwcm9wZXJ0eSBpbiBvcmRlciB0byBzcGxpdCBzdHJpbmdzIHRoYXQgaGF2ZSBubyB3aGl0ZSBzcGFjZSBjb25jZXB0LlxuICAgICAqIHRoaXMgaXMgYSBjaGVhcCB3YXkgdG8gaGVscCB3aXRoIGNoaW5lc2UvamFwYW5lc2VcbiAgICAgKiBAdHlwZSBCb29sZWFuXG4gICAgICogQHNpbmNlIDIuNi4wXG4gICAgICovXG4gICAgc3BsaXRCeUdyYXBoZW1lOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIFVubGlrZSBzdXBlcmNsYXNzJ3MgdmVyc2lvbiBvZiB0aGlzIGZ1bmN0aW9uLCBUZXh0Ym94IGRvZXMgbm90IHVwZGF0ZVxuICAgICAqIGl0cyB3aWR0aC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIGluaXREaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9fc2tpcERpbWVuc2lvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmlzRWRpdGluZyAmJiB0aGlzLmluaXREZWxheWVkQ3Vyc29yKCk7XG4gICAgICB0aGlzLmNsZWFyQ29udGV4dFRvcCgpO1xuICAgICAgdGhpcy5fY2xlYXJDYWNoZSgpO1xuICAgICAgLy8gY2xlYXIgZHluYW1pY01pbldpZHRoIGFzIGl0IHdpbGwgYmUgZGlmZmVyZW50IGFmdGVyIHdlIHJlLXdyYXAgbGluZVxuICAgICAgdGhpcy5keW5hbWljTWluV2lkdGggPSAwO1xuICAgICAgLy8gd3JhcCBsaW5lc1xuICAgICAgdGhpcy5fc3R5bGVNYXAgPSB0aGlzLl9nZW5lcmF0ZVN0eWxlTWFwKHRoaXMuX3NwbGl0VGV4dCgpKTtcbiAgICAgIC8vIGlmIGFmdGVyIHdyYXBwaW5nLCB0aGUgd2lkdGggaXMgc21hbGxlciB0aGFuIGR5bmFtaWNNaW5XaWR0aCwgY2hhbmdlIHRoZSB3aWR0aCBhbmQgcmUtd3JhcFxuICAgICAgaWYgKHRoaXMuZHluYW1pY01pbldpZHRoID4gdGhpcy53aWR0aCkge1xuICAgICAgICB0aGlzLl9zZXQoJ3dpZHRoJywgdGhpcy5keW5hbWljTWluV2lkdGgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudGV4dEFsaWduLmluZGV4T2YoJ2p1c3RpZnknKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gb25jZSB0ZXh0IGlzIG1lYXN1cmVkIHdlIG5lZWQgdG8gbWFrZSBzcGFjZSBmYXR0ZXIgdG8gbWFrZSBqdXN0aWZpZWQgdGV4dC5cbiAgICAgICAgdGhpcy5lbmxhcmdlU3BhY2VzKCk7XG4gICAgICB9XG4gICAgICAvLyBjbGVhciBjYWNoZSBhbmQgcmUtY2FsY3VsYXRlIGhlaWdodFxuICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmNhbGNUZXh0SGVpZ2h0KCk7XG4gICAgICB0aGlzLnNhdmVTdGF0ZSh7IHByb3BlcnR5U2V0OiAnX2RpbWVuc2lvbkFmZmVjdGluZ1Byb3BzJyB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYW4gb2JqZWN0IHRoYXQgdHJhbnNsYXRlcyB0aGUgc3R5bGUgb2JqZWN0IHNvIHRoYXQgaXQgaXNcbiAgICAgKiBicm9rZW4gdXAgYnkgdmlzdWFsIGxpbmVzIChuZXcgbGluZXMgYW5kIGF1dG9tYXRpYyB3cmFwcGluZykuXG4gICAgICogVGhlIG9yaWdpbmFsIHRleHQgc3R5bGVzIG9iamVjdCBpcyBicm9rZW4gdXAgYnkgYWN0dWFsIGxpbmVzIChuZXcgbGluZXMgb25seSksXG4gICAgICogd2hpY2ggaXMgb25seSBzdWZmaWNpZW50IGZvciBUZXh0IC8gSVRleHRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZW5lcmF0ZVN0eWxlTWFwOiBmdW5jdGlvbih0ZXh0SW5mbykge1xuICAgICAgdmFyIHJlYWxMaW5lQ291bnQgICAgID0gMCxcbiAgICAgICAgICByZWFsTGluZUNoYXJDb3VudCA9IDAsXG4gICAgICAgICAgY2hhckNvdW50ICAgICAgICAgPSAwLFxuICAgICAgICAgIG1hcCAgICAgICAgICAgICAgID0ge307XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dEluZm8uZ3JhcGhlbWVMaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGV4dEluZm8uZ3JhcGhlbWVUZXh0W2NoYXJDb3VudF0gPT09ICdcXG4nICYmIGkgPiAwKSB7XG4gICAgICAgICAgcmVhbExpbmVDaGFyQ291bnQgPSAwO1xuICAgICAgICAgIGNoYXJDb3VudCsrO1xuICAgICAgICAgIHJlYWxMaW5lQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5zcGxpdEJ5R3JhcGhlbWUgJiYgdGhpcy5fcmVTcGFjZUFuZFRhYi50ZXN0KHRleHRJbmZvLmdyYXBoZW1lVGV4dFtjaGFyQ291bnRdKSAmJiBpID4gMCkge1xuICAgICAgICAgIC8vIHRoaXMgY2FzZSBkZWFscyB3aXRoIHNwYWNlJ3MgdGhhdCBhcmUgcmVtb3ZlZCBmcm9tIGVuZCBvZiBsaW5lcyB3aGVuIHdyYXBwaW5nXG4gICAgICAgICAgcmVhbExpbmVDaGFyQ291bnQrKztcbiAgICAgICAgICBjaGFyQ291bnQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcFtpXSA9IHsgbGluZTogcmVhbExpbmVDb3VudCwgb2Zmc2V0OiByZWFsTGluZUNoYXJDb3VudCB9O1xuXG4gICAgICAgIGNoYXJDb3VudCArPSB0ZXh0SW5mby5ncmFwaGVtZUxpbmVzW2ldLmxlbmd0aDtcbiAgICAgICAgcmVhbExpbmVDaGFyQ291bnQgKz0gdGV4dEluZm8uZ3JhcGhlbWVMaW5lc1tpXS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiBvYmplY3QgaGFzIGEgc3R5bGUgcHJvcGVydHkgb3IgaGFzIGl0IG9uIGEgc3BlY2lmaWVkIGxpbmVcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBzdHlsZUhhczogZnVuY3Rpb24ocHJvcGVydHksIGxpbmVJbmRleCkge1xuICAgICAgaWYgKHRoaXMuX3N0eWxlTWFwICYmICF0aGlzLmlzV3JhcHBpbmcpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMuX3N0eWxlTWFwW2xpbmVJbmRleF07XG4gICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICBsaW5lSW5kZXggPSBtYXAubGluZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhYnJpYy5UZXh0LnByb3RvdHlwZS5zdHlsZUhhcy5jYWxsKHRoaXMsIHByb3BlcnR5LCBsaW5lSW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgb2JqZWN0IGhhcyBubyBzdHlsaW5nIG9yIG5vIHN0eWxpbmcgaW4gYSBsaW5lXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleCAsIGxpbmVJbmRleCBpcyBvbiB3cmFwcGVkIGxpbmVzLlxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNFbXB0eVN0eWxlczogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IDAsIG5leHRMaW5lSW5kZXggPSBsaW5lSW5kZXggKyAxLCBuZXh0T2Zmc2V0LCBvYmosIHNob3VsZExpbWl0ID0gZmFsc2UsXG4gICAgICAgICAgbWFwID0gdGhpcy5fc3R5bGVNYXBbbGluZUluZGV4XSwgbWFwTmV4dExpbmUgPSB0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXggKyAxXTtcbiAgICAgIGlmIChtYXApIHtcbiAgICAgICAgbGluZUluZGV4ID0gbWFwLmxpbmU7XG4gICAgICAgIG9mZnNldCA9IG1hcC5vZmZzZXQ7XG4gICAgICB9XG4gICAgICBpZiAobWFwTmV4dExpbmUpIHtcbiAgICAgICAgbmV4dExpbmVJbmRleCA9IG1hcE5leHRMaW5lLmxpbmU7XG4gICAgICAgIHNob3VsZExpbWl0ID0gbmV4dExpbmVJbmRleCA9PT0gbGluZUluZGV4O1xuICAgICAgICBuZXh0T2Zmc2V0ID0gbWFwTmV4dExpbmUub2Zmc2V0O1xuICAgICAgfVxuICAgICAgb2JqID0gdHlwZW9mIGxpbmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyB0aGlzLnN0eWxlcyA6IHsgbGluZTogdGhpcy5zdHlsZXNbbGluZUluZGV4XSB9O1xuICAgICAgZm9yICh2YXIgcDEgaW4gb2JqKSB7XG4gICAgICAgIGZvciAodmFyIHAyIGluIG9ialtwMV0pIHtcbiAgICAgICAgICBpZiAocDIgPj0gb2Zmc2V0ICYmICghc2hvdWxkTGltaXQgfHwgcDIgPCBuZXh0T2Zmc2V0KSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICAgICAgICBmb3IgKHZhciBwMyBpbiBvYmpbcDFdW3AyXSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBjaGFySW5kZXhcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9nZXRTdHlsZURlY2xhcmF0aW9uOiBmdW5jdGlvbihsaW5lSW5kZXgsIGNoYXJJbmRleCkge1xuICAgICAgaWYgKHRoaXMuX3N0eWxlTWFwICYmICF0aGlzLmlzV3JhcHBpbmcpIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMuX3N0eWxlTWFwW2xpbmVJbmRleF07XG4gICAgICAgIGlmICghbWFwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGluZUluZGV4ID0gbWFwLmxpbmU7XG4gICAgICAgIGNoYXJJbmRleCA9IG1hcC5vZmZzZXQgKyBjaGFySW5kZXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWxsU3VwZXIoJ19nZXRTdHlsZURlY2xhcmF0aW9uJywgbGluZUluZGV4LCBjaGFySW5kZXgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3NldFN0eWxlRGVjbGFyYXRpb246IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4LCBzdHlsZSkge1xuICAgICAgdmFyIG1hcCA9IHRoaXMuX3N0eWxlTWFwW2xpbmVJbmRleF07XG4gICAgICBsaW5lSW5kZXggPSBtYXAubGluZTtcbiAgICAgIGNoYXJJbmRleCA9IG1hcC5vZmZzZXQgKyBjaGFySW5kZXg7XG5cbiAgICAgIHRoaXMuc3R5bGVzW2xpbmVJbmRleF1bY2hhckluZGV4XSA9IHN0eWxlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNoYXJJbmRleFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2RlbGV0ZVN0eWxlRGVjbGFyYXRpb246IGZ1bmN0aW9uKGxpbmVJbmRleCwgY2hhckluZGV4KSB7XG4gICAgICB2YXIgbWFwID0gdGhpcy5fc3R5bGVNYXBbbGluZUluZGV4XTtcbiAgICAgIGxpbmVJbmRleCA9IG1hcC5saW5lO1xuICAgICAgY2hhckluZGV4ID0gbWFwLm9mZnNldCArIGNoYXJJbmRleDtcbiAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlc1tsaW5lSW5kZXhdW2NoYXJJbmRleF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHByb2JhYmx5IGJyb2tlbiBuZWVkIGEgZml4XG4gICAgICogUmV0dXJucyB0aGUgcmVhbCBzdHlsZSBsaW5lIHRoYXQgY29ycmVzcG9uZCB0byB0aGUgd3JhcHBlZCBsaW5lSW5kZXggbGluZVxuICAgICAqIFVzZWQganVzdCB0byB2ZXJpZnkgaWYgdGhlIGxpbmUgZG9lcyBleGlzdCBvciBub3QuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxpbmVJbmRleFxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBpZiB0aGUgbGluZSBleGlzdHMgb3Igbm90XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfZ2V0TGluZVN0eWxlOiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIHZhciBtYXAgPSB0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXhdO1xuICAgICAgcmV0dXJuICEhdGhpcy5zdHlsZXNbbWFwLmxpbmVdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGxpbmUgc3R5bGUgdG8gYW4gZW1wdHkgb2JqZWN0IHNvIHRoYXQgaXMgaW5pdGlhbGl6ZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfc2V0TGluZVN0eWxlOiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIHZhciBtYXAgPSB0aGlzLl9zdHlsZU1hcFtsaW5lSW5kZXhdO1xuICAgICAgdGhpcy5zdHlsZXNbbWFwLmxpbmVdID0ge307XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFdyYXBzIHRleHQgdXNpbmcgdGhlICd3aWR0aCcgcHJvcGVydHkgb2YgVGV4dGJveC4gRmlyc3QgdGhpcyBmdW5jdGlvblxuICAgICAqIHNwbGl0cyB0ZXh0IG9uIG5ld2xpbmVzLCBzbyB3ZSBwcmVzZXJ2ZSBuZXdsaW5lcyBlbnRlcmVkIGJ5IHRoZSB1c2VyLlxuICAgICAqIFRoZW4gaXQgd3JhcHMgZWFjaCBsaW5lIHVzaW5nIHRoZSB3aWR0aCBvZiB0aGUgVGV4dGJveCBieSBjYWxsaW5nXG4gICAgICogX3dyYXBMaW5lKCkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gbGluZXMgVGhlIHN0cmluZyBhcnJheSBvZiB0ZXh0IHRoYXQgaXMgc3BsaXQgaW50byBsaW5lc1xuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkZXNpcmVkV2lkdGggd2lkdGggeW91IHdhbnQgdG8gd3JhcCB0b1xuICAgICAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgb2YgbGluZXNcbiAgICAgKi9cbiAgICBfd3JhcFRleHQ6IGZ1bmN0aW9uKGxpbmVzLCBkZXNpcmVkV2lkdGgpIHtcbiAgICAgIHZhciB3cmFwcGVkID0gW10sIGk7XG4gICAgICB0aGlzLmlzV3JhcHBpbmcgPSB0cnVlO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdyYXBwZWQgPSB3cmFwcGVkLmNvbmNhdCh0aGlzLl93cmFwTGluZShsaW5lc1tpXSwgaSwgZGVzaXJlZFdpZHRoKSk7XG4gICAgICB9XG4gICAgICB0aGlzLmlzV3JhcHBpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybiB3cmFwcGVkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBIZWxwZXIgZnVuY3Rpb24gdG8gbWVhc3VyZSBhIHN0cmluZyBvZiB0ZXh0LCBnaXZlbiBpdHMgbGluZUluZGV4IGFuZCBjaGFySW5kZXggb2Zmc2V0XG4gICAgICogaXQgZ2V0cyBjYWxsZWQgd2hlbiBjaGFyQm91bmRzIGFyZSBub3QgYXZhaWxhYmxlIHlldC5cbiAgICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gY3R4XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGluZUluZGV4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNoYXJPZmZzZXRcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX21lYXN1cmVXb3JkOiBmdW5jdGlvbih3b3JkLCBsaW5lSW5kZXgsIGNoYXJPZmZzZXQpIHtcbiAgICAgIHZhciB3aWR0aCA9IDAsIHByZXZHcmFwaGVtZSwgc2tpcExlZnQgPSB0cnVlO1xuICAgICAgY2hhck9mZnNldCA9IGNoYXJPZmZzZXQgfHwgMDtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB3b3JkLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBib3ggPSB0aGlzLl9nZXRHcmFwaGVtZUJveCh3b3JkW2ldLCBsaW5lSW5kZXgsIGkgKyBjaGFyT2Zmc2V0LCBwcmV2R3JhcGhlbWUsIHNraXBMZWZ0KTtcbiAgICAgICAgd2lkdGggKz0gYm94Lmtlcm5lZFdpZHRoO1xuICAgICAgICBwcmV2R3JhcGhlbWUgPSB3b3JkW2ldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBXcmFwcyBhIGxpbmUgb2YgdGV4dCB1c2luZyB0aGUgd2lkdGggb2YgdGhlIFRleHRib3ggYW5kIGEgY29udGV4dC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBsaW5lIFRoZSBncmFwaGVtZSBhcnJheSB0aGF0IHJlcHJlc2VudCB0aGUgbGluZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXhcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZGVzaXJlZFdpZHRoIHdpZHRoIHlvdSB3YW50IHRvIHdyYXAgdGhlIGxpbmUgdG9cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVzZXJ2ZWRTcGFjZSBzcGFjZSB0byByZW1vdmUgZnJvbSB3cmFwcGluZyBmb3IgY3VzdG9tIGZ1bmN0aW9uYWxpdGllc1xuICAgICAqIEByZXR1cm5zIHtBcnJheX0gQXJyYXkgb2YgbGluZShzKSBpbnRvIHdoaWNoIHRoZSBnaXZlbiB0ZXh0IGlzIHdyYXBwZWRcbiAgICAgKiB0by5cbiAgICAgKi9cbiAgICBfd3JhcExpbmU6IGZ1bmN0aW9uKF9saW5lLCBsaW5lSW5kZXgsIGRlc2lyZWRXaWR0aCwgcmVzZXJ2ZWRTcGFjZSkge1xuICAgICAgdmFyIGxpbmVXaWR0aCA9IDAsXG4gICAgICAgICAgc3BsaXRCeUdyYXBoZW1lID0gdGhpcy5zcGxpdEJ5R3JhcGhlbWUsXG4gICAgICAgICAgZ3JhcGhlbWVMaW5lcyA9IFtdLFxuICAgICAgICAgIGxpbmUgPSBbXSxcbiAgICAgICAgICAvLyBzcGFjZXMgaW4gZGlmZmVyZW50IGxhbmd1YWdlcz9cbiAgICAgICAgICB3b3JkcyA9IHNwbGl0QnlHcmFwaGVtZSA/IGZhYnJpYy51dGlsLnN0cmluZy5ncmFwaGVtZVNwbGl0KF9saW5lKSA6IF9saW5lLnNwbGl0KHRoaXMuX3dvcmRKb2luZXJzKSxcbiAgICAgICAgICB3b3JkID0gJycsXG4gICAgICAgICAgb2Zmc2V0ID0gMCxcbiAgICAgICAgICBpbmZpeCA9IHNwbGl0QnlHcmFwaGVtZSA/ICcnIDogJyAnLFxuICAgICAgICAgIHdvcmRXaWR0aCA9IDAsXG4gICAgICAgICAgaW5maXhXaWR0aCA9IDAsXG4gICAgICAgICAgbGFyZ2VzdFdvcmRXaWR0aCA9IDAsXG4gICAgICAgICAgbGluZUp1c3RTdGFydGVkID0gdHJ1ZSxcbiAgICAgICAgICBhZGRpdGlvbmFsU3BhY2UgPSB0aGlzLl9nZXRXaWR0aE9mQ2hhclNwYWNpbmcoKSxcbiAgICAgICAgICByZXNlcnZlZFNwYWNlID0gcmVzZXJ2ZWRTcGFjZSB8fCAwO1xuICAgICAgLy8gZml4IGEgZGlmZmVyZW5jZSBiZXR3ZWVuIHNwbGl0IGFuZCBncmFwaGVtZVNwbGl0XG4gICAgICBpZiAod29yZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHdvcmRzLnB1c2goW10pO1xuICAgICAgfVxuICAgICAgZGVzaXJlZFdpZHRoIC09IHJlc2VydmVkU3BhY2U7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGlmIHVzaW5nIHNwbGl0QnlHcmFwaGVtZSB3b3JkcyBhcmUgYWxyZWFkeSBpbiBncmFwaGVtZXMuXG4gICAgICAgIHdvcmQgPSBzcGxpdEJ5R3JhcGhlbWUgPyB3b3Jkc1tpXSA6IGZhYnJpYy51dGlsLnN0cmluZy5ncmFwaGVtZVNwbGl0KHdvcmRzW2ldKTtcbiAgICAgICAgd29yZFdpZHRoID0gdGhpcy5fbWVhc3VyZVdvcmQod29yZCwgbGluZUluZGV4LCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQgKz0gd29yZC5sZW5ndGg7XG5cbiAgICAgICAgbGluZVdpZHRoICs9IGluZml4V2lkdGggKyB3b3JkV2lkdGggLSBhZGRpdGlvbmFsU3BhY2U7XG4gICAgICAgIGlmIChsaW5lV2lkdGggPiBkZXNpcmVkV2lkdGggJiYgIWxpbmVKdXN0U3RhcnRlZCkge1xuICAgICAgICAgIGdyYXBoZW1lTGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgICBsaW5lID0gW107XG4gICAgICAgICAgbGluZVdpZHRoID0gd29yZFdpZHRoO1xuICAgICAgICAgIGxpbmVKdXN0U3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgbGluZVdpZHRoICs9IGFkZGl0aW9uYWxTcGFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbGluZUp1c3RTdGFydGVkICYmICFzcGxpdEJ5R3JhcGhlbWUpIHtcbiAgICAgICAgICBsaW5lLnB1c2goaW5maXgpO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUgPSBsaW5lLmNvbmNhdCh3b3JkKTtcblxuICAgICAgICBpbmZpeFdpZHRoID0gc3BsaXRCeUdyYXBoZW1lID8gMCA6IHRoaXMuX21lYXN1cmVXb3JkKFtpbmZpeF0sIGxpbmVJbmRleCwgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgIGxpbmVKdXN0U3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGxhcmdlc3Qgd29yZFxuICAgICAgICBpZiAod29yZFdpZHRoID4gbGFyZ2VzdFdvcmRXaWR0aCkge1xuICAgICAgICAgIGxhcmdlc3RXb3JkV2lkdGggPSB3b3JkV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaSAmJiBncmFwaGVtZUxpbmVzLnB1c2gobGluZSk7XG5cbiAgICAgIGlmIChsYXJnZXN0V29yZFdpZHRoICsgcmVzZXJ2ZWRTcGFjZSA+IHRoaXMuZHluYW1pY01pbldpZHRoKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY01pbldpZHRoID0gbGFyZ2VzdFdvcmRXaWR0aCAtIGFkZGl0aW9uYWxTcGFjZSArIHJlc2VydmVkU3BhY2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gZ3JhcGhlbWVMaW5lcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGlmIHRoZSB0ZXh0IGxpbmUgaXMgZW5kZWQgd2l0aCBhbiBoYXJkIGJyZWFrXG4gICAgICogdGV4dCBhbmQgaXRleHQgZG8gbm90IGhhdmUgd3JhcHBpbmcsIHJldHVybiBmYWxzZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsaW5lSW5kZXggdGV4dCB0byBzcGxpdFxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICovXG4gICAgaXNFbmRPZldyYXBwaW5nOiBmdW5jdGlvbihsaW5lSW5kZXgpIHtcbiAgICAgIGlmICghdGhpcy5fc3R5bGVNYXBbbGluZUluZGV4ICsgMV0pIHtcbiAgICAgICAgLy8gaXMgbGFzdCBsaW5lLCByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fc3R5bGVNYXBbbGluZUluZGV4ICsgMV0ubGluZSAhPT0gdGhpcy5fc3R5bGVNYXBbbGluZUluZGV4XS5saW5lKSB7XG4gICAgICAgIC8vIHRoaXMgaXMgbGFzdCBsaW5lIGJlZm9yZSBhIGxpbmUgYnJlYWssIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGlmIGEgbGluZSBoYXMgYSBsaW5lYnJlYWsgYW5kIHNvIHdlIG5lZWQgdG8gYWNjb3VudCBmb3IgaXQgd2hlbiBtb3ZpbmdcbiAgICAgKiBhbmQgY291bnRpbmcgc3R5bGUuXG4gICAgICogQHJldHVybiBOdW1iZXJcbiAgICAgKi9cbiAgICBtaXNzaW5nTmV3bGluZU9mZnNldDogZnVuY3Rpb24obGluZUluZGV4KSB7XG4gICAgICBpZiAodGhpcy5zcGxpdEJ5R3JhcGhlbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNFbmRPZldyYXBwaW5nKGxpbmVJbmRleCkgPyAxIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAxO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAqIEdldHMgbGluZXMgb2YgdGV4dCB0byByZW5kZXIgaW4gdGhlIFRleHRib3guIFRoaXMgZnVuY3Rpb24gY2FsY3VsYXRlc1xuICAgICogdGV4dCB3cmFwcGluZyBvbiB0aGUgZmx5IGV2ZXJ5IHRpbWUgaXQgaXMgY2FsbGVkLlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHRleHQgdGV4dCB0byBzcGxpdFxuICAgICogQHJldHVybnMge0FycmF5fSBBcnJheSBvZiBsaW5lcyBpbiB0aGUgVGV4dGJveC5cbiAgICAqIEBvdmVycmlkZVxuICAgICovXG4gICAgX3NwbGl0VGV4dEludG9MaW5lczogZnVuY3Rpb24odGV4dCkge1xuICAgICAgdmFyIG5ld1RleHQgPSBmYWJyaWMuVGV4dC5wcm90b3R5cGUuX3NwbGl0VGV4dEludG9MaW5lcy5jYWxsKHRoaXMsIHRleHQpLFxuICAgICAgICAgIGdyYXBoZW1lTGluZXMgPSB0aGlzLl93cmFwVGV4dChuZXdUZXh0LmxpbmVzLCB0aGlzLndpZHRoKSxcbiAgICAgICAgICBsaW5lcyA9IG5ldyBBcnJheShncmFwaGVtZUxpbmVzLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyYXBoZW1lTGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGluZXNbaV0gPSBncmFwaGVtZUxpbmVzW2ldLmpvaW4oJycpO1xuICAgICAgfVxuICAgICAgbmV3VGV4dC5saW5lcyA9IGxpbmVzO1xuICAgICAgbmV3VGV4dC5ncmFwaGVtZUxpbmVzID0gZ3JhcGhlbWVMaW5lcztcbiAgICAgIHJldHVybiBuZXdUZXh0O1xuICAgIH0sXG5cbiAgICBnZXRNaW5XaWR0aDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5taW5XaWR0aCwgdGhpcy5keW5hbWljTWluV2lkdGgpO1xuICAgIH0sXG5cbiAgICBfcmVtb3ZlRXh0cmFuZW91c1N0eWxlczogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbGluZXNUb0tlZXAgPSB7fTtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5fc3R5bGVNYXApIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHRMaW5lc1twcm9wXSkge1xuICAgICAgICAgIGxpbmVzVG9LZWVwW3RoaXMuX3N0eWxlTWFwW3Byb3BdLmxpbmVdID0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgcHJvcCBpbiB0aGlzLnN0eWxlcykge1xuICAgICAgICBpZiAoIWxpbmVzVG9LZWVwW3Byb3BdKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuc3R5bGVzW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIGFuIGluc3RhbmNlXG4gICAgICogQG1ldGhvZCB0b09iamVjdFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wZXJ0aWVzVG9JbmNsdWRlXSBBbnkgcHJvcGVydGllcyB0aGF0IHlvdSBtaWdodCB3YW50IHRvIGFkZGl0aW9uYWxseSBpbmNsdWRlIGluIHRoZSBvdXRwdXRcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiBhbiBpbnN0YW5jZVxuICAgICAqL1xuICAgIHRvT2JqZWN0OiBmdW5jdGlvbihwcm9wZXJ0aWVzVG9JbmNsdWRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxsU3VwZXIoJ3RvT2JqZWN0JywgWydtaW5XaWR0aCcsICdzcGxpdEJ5R3JhcGhlbWUnXS5jb25jYXQocHJvcGVydGllc1RvSW5jbHVkZSkpO1xuICAgIH1cbiAgfSk7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmFicmljLlRleHRib3ggaW5zdGFuY2UgZnJvbSBhbiBvYmplY3QgcmVwcmVzZW50YXRpb25cbiAgICogQHN0YXRpY1xuICAgKiBAbWVtYmVyT2YgZmFicmljLlRleHRib3hcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gY3JlYXRlIGFuIGluc3RhbmNlIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSBDYWxsYmFjayB0byBpbnZva2Ugd2hlbiBhbiBmYWJyaWMuVGV4dGJveCBpbnN0YW5jZSBpcyBjcmVhdGVkXG4gICAqL1xuICBmYWJyaWMuVGV4dGJveC5mcm9tT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiBmYWJyaWMuT2JqZWN0Ll9mcm9tT2JqZWN0KCdUZXh0Ym94Jywgb2JqZWN0LCBjYWxsYmFjaywgJ3RleHQnKTtcbiAgfTtcbn0pKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJyA/IGV4cG9ydHMgOiB0aGlzKTtcblxuXG4oZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGNvbnRyb2xzVXRpbHMgPSBmYWJyaWMuY29udHJvbHNVdGlscyxcbiAgICAgIHNjYWxlU2tld1N0eWxlSGFuZGxlciA9IGNvbnRyb2xzVXRpbHMuc2NhbGVTa2V3Q3Vyc29yU3R5bGVIYW5kbGVyLFxuICAgICAgc2NhbGVTdHlsZUhhbmRsZXIgPSBjb250cm9sc1V0aWxzLnNjYWxlQ3Vyc29yU3R5bGVIYW5kbGVyLFxuICAgICAgc2NhbGluZ0VxdWFsbHkgPSBjb250cm9sc1V0aWxzLnNjYWxpbmdFcXVhbGx5LFxuICAgICAgc2NhbGluZ1lPclNrZXdpbmdYID0gY29udHJvbHNVdGlscy5zY2FsaW5nWU9yU2tld2luZ1gsXG4gICAgICBzY2FsaW5nWE9yU2tld2luZ1kgPSBjb250cm9sc1V0aWxzLnNjYWxpbmdYT3JTa2V3aW5nWSxcbiAgICAgIHNjYWxlT3JTa2V3QWN0aW9uTmFtZSA9IGNvbnRyb2xzVXRpbHMuc2NhbGVPclNrZXdBY3Rpb25OYW1lLFxuICAgICAgb2JqZWN0Q29udHJvbHMgPSBmYWJyaWMuT2JqZWN0LnByb3RvdHlwZS5jb250cm9scztcblxuICBvYmplY3RDb250cm9scy5tbCA9IG5ldyBmYWJyaWMuQ29udHJvbCh7XG4gICAgeDogLTAuNSxcbiAgICB5OiAwLFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTa2V3U3R5bGVIYW5kbGVyLFxuICAgIGFjdGlvbkhhbmRsZXI6IHNjYWxpbmdYT3JTa2V3aW5nWSxcbiAgICBnZXRBY3Rpb25OYW1lOiBzY2FsZU9yU2tld0FjdGlvbk5hbWUsXG4gIH0pO1xuXG4gIG9iamVjdENvbnRyb2xzLm1yID0gbmV3IGZhYnJpYy5Db250cm9sKHtcbiAgICB4OiAwLjUsXG4gICAgeTogMCxcbiAgICBjdXJzb3JTdHlsZUhhbmRsZXI6IHNjYWxlU2tld1N0eWxlSGFuZGxlcixcbiAgICBhY3Rpb25IYW5kbGVyOiBzY2FsaW5nWE9yU2tld2luZ1ksXG4gICAgZ2V0QWN0aW9uTmFtZTogc2NhbGVPclNrZXdBY3Rpb25OYW1lLFxuICB9KTtcblxuICBvYmplY3RDb250cm9scy5tYiA9IG5ldyBmYWJyaWMuQ29udHJvbCh7XG4gICAgeDogMCxcbiAgICB5OiAwLjUsXG4gICAgY3Vyc29yU3R5bGVIYW5kbGVyOiBzY2FsZVNrZXdTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ1lPclNrZXdpbmdYLFxuICAgIGdldEFjdGlvbk5hbWU6IHNjYWxlT3JTa2V3QWN0aW9uTmFtZSxcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMubXQgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAsXG4gICAgeTogLTAuNSxcbiAgICBjdXJzb3JTdHlsZUhhbmRsZXI6IHNjYWxlU2tld1N0eWxlSGFuZGxlcixcbiAgICBhY3Rpb25IYW5kbGVyOiBzY2FsaW5nWU9yU2tld2luZ1gsXG4gICAgZ2V0QWN0aW9uTmFtZTogc2NhbGVPclNrZXdBY3Rpb25OYW1lLFxuICB9KTtcblxuICBvYmplY3RDb250cm9scy50bCA9IG5ldyBmYWJyaWMuQ29udHJvbCh7XG4gICAgeDogLTAuNSxcbiAgICB5OiAtMC41LFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ0VxdWFsbHlcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMudHIgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAuNSxcbiAgICB5OiAtMC41LFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ0VxdWFsbHlcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMuYmwgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IC0wLjUsXG4gICAgeTogMC41LFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTdHlsZUhhbmRsZXIsXG4gICAgYWN0aW9uSGFuZGxlcjogc2NhbGluZ0VxdWFsbHlcbiAgfSk7XG5cbiAgb2JqZWN0Q29udHJvbHMuYnIgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAuNSxcbiAgICB5OiAwLjUsXG4gICAgY3Vyc29yU3R5bGVIYW5kbGVyOiBzY2FsZVN0eWxlSGFuZGxlcixcbiAgICBhY3Rpb25IYW5kbGVyOiBzY2FsaW5nRXF1YWxseVxuICB9KTtcblxuICBvYmplY3RDb250cm9scy5tdHIgPSBuZXcgZmFicmljLkNvbnRyb2woe1xuICAgIHg6IDAsXG4gICAgeTogLTAuNSxcbiAgICBhY3Rpb25IYW5kbGVyOiBjb250cm9sc1V0aWxzLnJvdGF0aW9uV2l0aFNuYXBwaW5nLFxuICAgIGN1cnNvclN0eWxlSGFuZGxlcjogY29udHJvbHNVdGlscy5yb3RhdGlvblN0eWxlSGFuZGxlcixcbiAgICBvZmZzZXRZOiAtNDAsXG4gICAgd2l0aENvbm5lY3Rpb246IHRydWUsXG4gICAgYWN0aW9uTmFtZTogJ3JvdGF0ZScsXG4gIH0pO1xuXG4gIGlmIChmYWJyaWMuVGV4dGJveCkge1xuICAgIC8vIHRoaXMgaXMgYnJlYWtpbmcgdGhlIHByb3RvdHlwZSBpbmhlcml0YW5jZSwgbm8gdGltZSAvIGlkZWFzIHRvIGZpeCBpdC5cbiAgICAvLyBpcyBpbXBvcnRhbnQgdG8gZG9jdW1lbnQgdGhhdCBpZiB5b3Ugd2FudCB0byBoYXZlIGFsbCBvYmplY3RzIHRvIGhhdmUgYVxuICAgIC8vIHNwZWNpZmljIGN1c3RvbSBjb250cm9sLCB5b3UgaGF2ZSB0byBhZGQgaXQgdG8gT2JqZWN0IHByb3RvdHlwZSBhbmQgdG8gVGV4dGJveFxuICAgIC8vIHByb3RvdHlwZS4gVGhlIGNvbnRyb2xzIGFyZSBzaGFyZWQgYXMgcmVmZXJlbmNlcy4gU28gY2hhbmdlcyB0byBjb250cm9sIGB0cmBcbiAgICAvLyBjYW4gc3RpbGwgYXBwbHkgdG8gYWxsIG9iamVjdHMgaWYgbmVlZGVkLlxuICAgIHZhciB0ZXh0Qm94Q29udHJvbHMgPSBmYWJyaWMuVGV4dGJveC5wcm90b3R5cGUuY29udHJvbHMgPSB7IH07XG5cbiAgICB0ZXh0Qm94Q29udHJvbHMubXRyID0gb2JqZWN0Q29udHJvbHMubXRyO1xuICAgIHRleHRCb3hDb250cm9scy50ciA9IG9iamVjdENvbnRyb2xzLnRyO1xuICAgIHRleHRCb3hDb250cm9scy5iciA9IG9iamVjdENvbnRyb2xzLmJyO1xuICAgIHRleHRCb3hDb250cm9scy50bCA9IG9iamVjdENvbnRyb2xzLnRsO1xuICAgIHRleHRCb3hDb250cm9scy5ibCA9IG9iamVjdENvbnRyb2xzLmJsO1xuICAgIHRleHRCb3hDb250cm9scy5tdCA9IG9iamVjdENvbnRyb2xzLm10O1xuICAgIHRleHRCb3hDb250cm9scy5tYiA9IG9iamVjdENvbnRyb2xzLm1iO1xuXG4gICAgdGV4dEJveENvbnRyb2xzLm1yID0gbmV3IGZhYnJpYy5Db250cm9sKHtcbiAgICAgIHg6IDAuNSxcbiAgICAgIHk6IDAsXG4gICAgICBhY3Rpb25IYW5kbGVyOiBjb250cm9sc1V0aWxzLmNoYW5nZVdpZHRoLFxuICAgICAgY3Vyc29yU3R5bGVIYW5kbGVyOiBzY2FsZVNrZXdTdHlsZUhhbmRsZXIsXG4gICAgICBhY3Rpb25OYW1lOiAncmVzaXppbmcnLFxuICAgIH0pO1xuXG4gICAgdGV4dEJveENvbnRyb2xzLm1sID0gbmV3IGZhYnJpYy5Db250cm9sKHtcbiAgICAgIHg6IC0wLjUsXG4gICAgICB5OiAwLFxuICAgICAgYWN0aW9uSGFuZGxlcjogY29udHJvbHNVdGlscy5jaGFuZ2VXaWR0aCxcbiAgICAgIGN1cnNvclN0eWxlSGFuZGxlcjogc2NhbGVTa2V3U3R5bGVIYW5kbGVyLFxuICAgICAgYWN0aW9uTmFtZTogJ3Jlc2l6aW5nJyxcbiAgICB9KTtcbiAgfVxufSkoKTtcblxuIiwiKGZ1bmN0aW9uKGEsYil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxiKTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzKWIoKTtlbHNle2IoKSxhLkZpbGVTYXZlcj17ZXhwb3J0czp7fX0uZXhwb3J0c319KSh0aGlzLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihhLGIpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBiP2I9e2F1dG9Cb206ITF9Olwib2JqZWN0XCIhPXR5cGVvZiBiJiYoY29uc29sZS53YXJuKFwiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3RcIiksYj17YXV0b0JvbTohYn0pLGIuYXV0b0JvbSYmL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoYS50eXBlKT9uZXcgQmxvYihbXCJcXHVGRUZGXCIsYV0se3R5cGU6YS50eXBlfSk6YX1mdW5jdGlvbiBjKGEsYixjKXt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSksZC5yZXNwb25zZVR5cGU9XCJibG9iXCIsZC5vbmxvYWQ9ZnVuY3Rpb24oKXtnKGQucmVzcG9uc2UsYixjKX0sZC5vbmVycm9yPWZ1bmN0aW9uKCl7Y29uc29sZS5lcnJvcihcImNvdWxkIG5vdCBkb3dubG9hZCBmaWxlXCIpfSxkLnNlbmQoKX1mdW5jdGlvbiBkKGEpe3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJIRUFEXCIsYSwhMSk7dHJ5e2Iuc2VuZCgpfWNhdGNoKGEpe31yZXR1cm4gMjAwPD1iLnN0YXR1cyYmMjk5Pj1iLnN0YXR1c31mdW5jdGlvbiBlKGEpe3RyeXthLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9Y2F0Y2goYyl7dmFyIGI9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtiLmluaXRNb3VzZUV2ZW50KFwiY2xpY2tcIiwhMCwhMCx3aW5kb3csMCwwLDAsODAsMjAsITEsITEsITEsITEsMCxudWxsKSxhLmRpc3BhdGNoRXZlbnQoYil9fXZhciBmPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy53aW5kb3c9PT13aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmP3NlbGY6XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbD9nbG9iYWw6dm9pZCAwLGE9Zi5uYXZpZ2F0b3ImJi9NYWNpbnRvc2gvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9BcHBsZVdlYktpdC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIS9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksZz1mLnNhdmVBc3x8KFwib2JqZWN0XCIhPXR5cGVvZiB3aW5kb3d8fHdpbmRvdyE9PWY/ZnVuY3Rpb24oKXt9OlwiZG93bmxvYWRcImluIEhUTUxBbmNob3JFbGVtZW50LnByb3RvdHlwZSYmIWE/ZnVuY3Rpb24oYixnLGgpe3ZhciBpPWYuVVJMfHxmLndlYmtpdFVSTCxqPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2c9Z3x8Yi5uYW1lfHxcImRvd25sb2FkXCIsai5kb3dubG9hZD1nLGoucmVsPVwibm9vcGVuZXJcIixcInN0cmluZ1wiPT10eXBlb2YgYj8oai5ocmVmPWIsai5vcmlnaW49PT1sb2NhdGlvbi5vcmlnaW4/ZShqKTpkKGouaHJlZik/YyhiLGcsaCk6ZShqLGoudGFyZ2V0PVwiX2JsYW5rXCIpKTooai5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKGIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLnJldm9rZU9iamVjdFVSTChqLmhyZWYpfSw0RTQpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGopfSwwKSl9OlwibXNTYXZlT3JPcGVuQmxvYlwiaW4gbmF2aWdhdG9yP2Z1bmN0aW9uKGYsZyxoKXtpZihnPWd8fGYubmFtZXx8XCJkb3dubG9hZFwiLFwic3RyaW5nXCIhPXR5cGVvZiBmKW5hdmlnYXRvci5tc1NhdmVPck9wZW5CbG9iKGIoZixoKSxnKTtlbHNlIGlmKGQoZikpYyhmLGcsaCk7ZWxzZXt2YXIgaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtpLmhyZWY9ZixpLnRhcmdldD1cIl9ibGFua1wiLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtlKGkpfSl9fTpmdW5jdGlvbihiLGQsZSxnKXtpZihnPWd8fG9wZW4oXCJcIixcIl9ibGFua1wiKSxnJiYoZy5kb2N1bWVudC50aXRsZT1nLmRvY3VtZW50LmJvZHkuaW5uZXJUZXh0PVwiZG93bmxvYWRpbmcuLi5cIiksXCJzdHJpbmdcIj09dHlwZW9mIGIpcmV0dXJuIGMoYixkLGUpO3ZhciBoPVwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI9PT1iLnR5cGUsaT0vY29uc3RydWN0b3IvaS50ZXN0KGYuSFRNTEVsZW1lbnQpfHxmLnNhZmFyaSxqPS9DcmlPU1xcL1tcXGRdKy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtpZigoanx8aCYmaXx8YSkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyKXt2YXIgaz1uZXcgRmlsZVJlYWRlcjtrLm9ubG9hZGVuZD1mdW5jdGlvbigpe3ZhciBhPWsucmVzdWx0O2E9aj9hOmEucmVwbGFjZSgvXmRhdGE6W147XSo7LyxcImRhdGE6YXR0YWNobWVudC9maWxlO1wiKSxnP2cubG9jYXRpb24uaHJlZj1hOmxvY2F0aW9uPWEsZz1udWxsfSxrLnJlYWRBc0RhdGFVUkwoYil9ZWxzZXt2YXIgbD1mLlVSTHx8Zi53ZWJraXRVUkwsbT1sLmNyZWF0ZU9iamVjdFVSTChiKTtnP2cubG9jYXRpb249bTpsb2NhdGlvbi5ocmVmPW0sZz1udWxsLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtsLnJldm9rZU9iamVjdFVSTChtKX0sNEU0KX19KTtmLnNhdmVBcz1nLnNhdmVBcz1nLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJihtb2R1bGUuZXhwb3J0cz1nKX0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1GaWxlU2F2ZXIubWluLmpzLm1hcCIsIiFmdW5jdGlvbihlKXt2YXIgdD17fTtmdW5jdGlvbiBuKG8pe2lmKHRbb10pcmV0dXJuIHRbb10uZXhwb3J0czt2YXIgaT10W29dPXtpOm8sbDohMSxleHBvcnRzOnt9fTtyZXR1cm4gZVtvXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmw9ITAsaS5leHBvcnRzfW4ubT1lLG4uYz10LG4uZD1mdW5jdGlvbihlLHQsbyl7bi5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2VudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5yPWZ1bmN0aW9uKGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcIk1vZHVsZVwifSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9LG4udD1mdW5jdGlvbihlLHQpe2lmKDEmdCYmKGU9bihlKSksOCZ0KXJldHVybiBlO2lmKDQmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJmUmJmUuX19lc01vZHVsZSlyZXR1cm4gZTt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO2lmKG4ucihvKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxcImRlZmF1bHRcIix7ZW51bWVyYWJsZTohMCx2YWx1ZTplfSksMiZ0JiZcInN0cmluZ1wiIT10eXBlb2YgZSlmb3IodmFyIGkgaW4gZSluLmQobyxpLGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfS5iaW5kKG51bGwsaSkpO3JldHVybiBvfSxuLm49ZnVuY3Rpb24oZSl7dmFyIHQ9ZSYmZS5fX2VzTW9kdWxlP2Z1bmN0aW9uKCl7cmV0dXJuIGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gZX07cmV0dXJuIG4uZCh0LFwiYVwiLHQpLHR9LG4ubz1mdW5jdGlvbihlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX0sbi5wPVwiXCIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7ZS5leHBvcnRzPW4oMSl9LGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX0odGhpcyxlKSx0aGlzLm9wdGlvbnM9e292ZXJsYXlCYWNrZ3JvdW5kQ29sb3I6XCIjNjY2NjY2XCIsb3ZlcmxheU9wYWNpdHk6LjYsc3Bpbm5lckljb246XCJiYWxsLWNpcmN1c1wiLHNwaW5uZXJDb2xvcjpcIiMwMDBcIixzcGlubmVyU2l6ZTpcIjN4XCIsb3ZlcmxheUlETmFtZTpcIm92ZXJsYXlcIixzcGlubmVySUROYW1lOlwic3Bpbm5lclwiLG9mZnNldFk6MCxvZmZzZXRYOjAsbG9ja1Njcm9sbDohMSxjb250YWluZXJJRDpudWxsLHNwaW5uZXJaSW5kZXg6OTk5OTksb3ZlcmxheVpJbmRleDo5OTk5OH0sdGhpcy5zdHlsZXNoZWV0QmFzZVVSTD1cImh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vbG9hZC1hd2Vzb21lQDEuMS4wL2Nzcy9cIix0aGlzLnNwaW5uZXI9bnVsbCx0aGlzLnNwaW5uZXJTdHlsZXNoZWV0VVJMPW51bGwsdGhpcy5udW1iZXJPZkVtcHR5RGl2Rm9yU3Bpbm5lcj17XCJiYWxsLThiaXRzXCI6MTYsXCJiYWxsLWF0b21cIjo0LFwiYmFsbC1iZWF0XCI6MyxcImJhbGwtY2lyY3VzXCI6NSxcImJhbGwtY2xpbWJpbmctZG90XCI6MSxcImJhbGwtY2xpcC1yb3RhdGVcIjoxLFwiYmFsbC1jbGlwLXJvdGF0ZS1tdWx0aXBsZVwiOjIsXCJiYWxsLWNsaXAtcm90YXRlLXB1bHNlXCI6MixcImJhbGwtZWxhc3RpYy1kb3RzXCI6NSxcImJhbGwtZmFsbFwiOjMsXCJiYWxsLWZ1c3Npb25cIjo0LFwiYmFsbC1ncmlkLWJlYXRcIjo5LFwiYmFsbC1ncmlkLXB1bHNlXCI6OSxcImJhbGwtbmV3dG9uLWNyYWRsZVwiOjQsXCJiYWxsLXB1bHNlXCI6MyxcImJhbGwtcHVsc2UtcmlzZVwiOjUsXCJiYWxsLXB1bHNlLXN5bmNcIjozLFwiYmFsbC1yb3RhdGVcIjoxLFwiYmFsbC1ydW5uaW5nLWRvdHNcIjo1LFwiYmFsbC1zY2FsZVwiOjEsXCJiYWxsLXNjYWxlLW11bHRpcGxlXCI6MyxcImJhbGwtc2NhbGUtcHVsc2VcIjoyLFwiYmFsbC1zY2FsZS1yaXBwbGVcIjoxLFwiYmFsbC1zY2FsZS1yaXBwbGUtbXVsdGlwbGVcIjozLFwiYmFsbC1zcGluXCI6OCxcImJhbGwtc3Bpbi1jbG9ja3dpc2VcIjo4LFwiYmFsbC1zcGluLWNsb2Nrd2lzZS1mYWRlXCI6OCxcImJhbGwtc3Bpbi1jbG9ja3dpc2UtZmFkZS1yb3RhdGluZ1wiOjgsXCJiYWxsLXNwaW4tZmFkZVwiOjgsXCJiYWxsLXNwaW4tZmFkZS1yb3RhdGluZ1wiOjgsXCJiYWxsLXNwaW4tcm90YXRlXCI6MixcImJhbGwtc3F1YXJlLWNsb2Nrd2lzZS1zcGluXCI6OCxcImJhbGwtc3F1YXJlLXNwaW5cIjo4LFwiYmFsbC10cmlhbmdsZS1wYXRoXCI6MyxcImJhbGwtemlnLXphZ1wiOjIsXCJiYWxsLXppZy16YWctZGVmbGVjdFwiOjIsY29nOjEsXCJjdWJlLXRyYW5zaXRpb25cIjoyLGZpcmU6MyxcImxpbmUtc2NhbGVcIjo1LFwibGluZS1zY2FsZS1wYXJ0eVwiOjUsXCJsaW5lLXNjYWxlLXB1bHNlLW91dFwiOjUsXCJsaW5lLXNjYWxlLXB1bHNlLW91dC1yYXBpZFwiOjUsXCJsaW5lLXNwaW4tY2xvY2t3aXNlLWZhZGVcIjo4LFwibGluZS1zcGluLWNsb2Nrd2lzZS1mYWRlLXJvdGF0aW5nXCI6OCxcImxpbmUtc3Bpbi1mYWRlXCI6OCxcImxpbmUtc3Bpbi1mYWRlLXJvdGF0aW5nXCI6OCxwYWNtYW46NixcInNxdWFyZS1qZWxseS1ib3hcIjoyLFwic3F1YXJlLWxvYWRlclwiOjEsXCJzcXVhcmUtc3BpblwiOjEsdGltZXI6MSxcInRyaWFuZ2xlLXNrZXctc3BpblwiOjF9fXZhciB0LG8saTtyZXR1cm4gdD1lLChvPVt7a2V5Olwic2hvd1wiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuc2V0T3B0aW9ucyhlKSx0aGlzLmFkZFNwaW5uZXJTdHlsZXNoZWV0KCksdGhpcy5nZW5lcmF0ZVNwaW5uZXJFbGVtZW50KCksdGhpcy5vcHRpb25zLmxvY2tTY3JvbGwmJihkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIpLHRoaXMuZ2VuZXJhdGVBbmRBZGRPdmVybGF5RWxlbWVudCgpfX0se2tleTpcImhpZGVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMub3B0aW9ucy5sb2NrU2Nyb2xsJiYoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdz1cIlwiLGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdz1cIlwiKTt2YXIgZT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmctb3ZlcmxheS1zdHlsZXNoZWV0XCIpO2UmJihlLmRpc2FibGVkPSEwLGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKSxkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm9wdGlvbnMub3ZlcmxheUlETmFtZSkucmVtb3ZlKCksZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5vcHRpb25zLnNwaW5uZXJJRE5hbWUpLnJlbW92ZSgpKX19LHtrZXk6XCJzZXRPcHRpb25zXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYodm9pZCAwIT09ZSlmb3IodmFyIHQgaW4gZSl0aGlzLm9wdGlvbnNbdF09ZVt0XX19LHtrZXk6XCJnZW5lcmF0ZUFuZEFkZE92ZXJsYXlFbGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1cIjUwJVwiOzAhPT10aGlzLm9wdGlvbnMub2Zmc2V0WCYmKGU9XCJjYWxjKDUwJSArIFwiK3RoaXMub3B0aW9ucy5vZmZzZXRYK1wiKVwiKTt2YXIgdD1cIjUwJVwiO2lmKDAhPT10aGlzLm9wdGlvbnMub2Zmc2V0WSYmKHQ9XCJjYWxjKDUwJSArIFwiK3RoaXMub3B0aW9ucy5vZmZzZXRZK1wiKVwiKSx0aGlzLm9wdGlvbnMuY29udGFpbmVySUQmJmRvY3VtZW50LmJvZHkuY29udGFpbnMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5vcHRpb25zLmNvbnRhaW5lcklEKSkpe3ZhciBuPSc8ZGl2IGlkPVwiJy5jb25jYXQodGhpcy5vcHRpb25zLm92ZXJsYXlJRE5hbWUsJ1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IG92ZXJmbG93OiBhdXRvOyBvcGFjaXR5OiAnKS5jb25jYXQodGhpcy5vcHRpb25zLm92ZXJsYXlPcGFjaXR5LFwiOyBiYWNrZ3JvdW5kOiBcIikuY29uY2F0KHRoaXMub3B0aW9ucy5vdmVybGF5QmFja2dyb3VuZENvbG9yLCc7IHotaW5kZXg6IDUwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlO1wiPjwvZGl2PjxkaXYgaWQ9XCInKS5jb25jYXQodGhpcy5vcHRpb25zLnNwaW5uZXJJRE5hbWUsJ1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6ICcpLmNvbmNhdCh0LFwiOyBsZWZ0OiBcIikuY29uY2F0KGUsJzsgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTsgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTsgei1pbmRleDogOTk5OTtcIj4nKS5jb25jYXQodGhpcy5zcGlubmVyLFwiPC9kaXY+XCIpLG89ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5vcHRpb25zLmNvbnRhaW5lcklEKTtyZXR1cm4gby5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIsdm9pZCBvLmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLG4pfXZhciBpPSc8ZGl2IGlkPVwiJy5jb25jYXQodGhpcy5vcHRpb25zLm92ZXJsYXlJRE5hbWUsJ1wiIHN0eWxlPVwiZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDsgcG9zaXRpb246IGZpeGVkOyB0b3A6IDA7IGxlZnQ6IDA7IG92ZXJmbG93OiBhdXRvOyBvcGFjaXR5OiAnKS5jb25jYXQodGhpcy5vcHRpb25zLm92ZXJsYXlPcGFjaXR5LFwiOyBiYWNrZ3JvdW5kOiBcIikuY29uY2F0KHRoaXMub3B0aW9ucy5vdmVybGF5QmFja2dyb3VuZENvbG9yLFwiOyB6LWluZGV4OiBcIikuY29uY2F0KHRoaXMub3B0aW9ucy5vdmVybGF5WkluZGV4LCc7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7XCI+PC9kaXY+PGRpdiBpZD1cIicpLmNvbmNhdCh0aGlzLm9wdGlvbnMuc3Bpbm5lcklETmFtZSwnXCIgc3R5bGU9XCJkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OyBwb3NpdGlvbjogZml4ZWQ7IHRvcDogJykuY29uY2F0KHQsXCI7IGxlZnQ6IFwiKS5jb25jYXQoZSxcIjsgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTsgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUpOyB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlKTsgei1pbmRleDogXCIpLmNvbmNhdCh0aGlzLm9wdGlvbnMuc3Bpbm5lclpJbmRleCwnO1wiPicpLmNvbmNhdCh0aGlzLnNwaW5uZXIsXCI8L2Rpdj5cIik7ZG9jdW1lbnQuYm9keS5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIixpKX19LHtrZXk6XCJnZW5lcmF0ZVNwaW5uZXJFbGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9T2JqZWN0LmtleXModGhpcy5udW1iZXJPZkVtcHR5RGl2Rm9yU3Bpbm5lcikuZmluZCgoZnVuY3Rpb24odCl7cmV0dXJuIHQ9PT1lLm9wdGlvbnMuc3Bpbm5lckljb259KSksbj10aGlzLmdlbmVyYXRlRW1wdHlEaXZFbGVtZW50KHRoaXMubnVtYmVyT2ZFbXB0eURpdkZvclNwaW5uZXJbdF0pO3RoaXMuc3Bpbm5lcj0nPGRpdiBzdHlsZT1cImNvbG9yOiAnLmNvbmNhdCh0aGlzLm9wdGlvbnMuc3Bpbm5lckNvbG9yLCdcIiBjbGFzcz1cImxhLScpLmNvbmNhdCh0aGlzLm9wdGlvbnMuc3Bpbm5lckljb24sXCIgbGEtXCIpLmNvbmNhdCh0aGlzLm9wdGlvbnMuc3Bpbm5lclNpemUsJ1wiPicpLmNvbmNhdChuLFwiPC9kaXY+XCIpfX0se2tleTpcImFkZFNwaW5uZXJTdHlsZXNoZWV0XCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnNldFNwaW5uZXJTdHlsZXNoZWV0VVJMKCk7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7ZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLFwibG9hZGluZy1vdmVybGF5LXN0eWxlc2hlZXRcIiksZS5zZXRBdHRyaWJ1dGUoXCJyZWxcIixcInN0eWxlc2hlZXRcIiksZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJ0ZXh0L2Nzc1wiKSxlLnNldEF0dHJpYnV0ZShcImhyZWZcIix0aGlzLnNwaW5uZXJTdHlsZXNoZWV0VVJMKSxkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoZSl9fSx7a2V5Olwic2V0U3Bpbm5lclN0eWxlc2hlZXRVUkxcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuc3Bpbm5lclN0eWxlc2hlZXRVUkw9dGhpcy5zdHlsZXNoZWV0QmFzZVVSTCt0aGlzLm9wdGlvbnMuc3Bpbm5lckljb24rXCIubWluLmNzc1wifX0se2tleTpcImdlbmVyYXRlRW1wdHlEaXZFbGVtZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwiXCIsbj0xO248PWU7bisrKXQrPVwiPGRpdj48L2Rpdj5cIjtyZXR1cm4gdH19XSkmJm4odC5wcm90b3R5cGUsbyksaSYmbih0LGkpLGV9KCk7d2luZG93LkpzTG9hZGluZ092ZXJsYXk9bmV3IG8sZS5leHBvcnRzPUpzTG9hZGluZ092ZXJsYXl9XSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qcy1sb2FkaW5nLW92ZXJsYXkubWluLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICB9LCBfdHlwZW9mKG9iaik7XG59IiwiLy8gREVGTEFURSBpcyBhIGNvbXBsZXggZm9ybWF0OyB0byByZWFkIHRoaXMgY29kZSwgeW91IHNob3VsZCBwcm9iYWJseSBjaGVjayB0aGUgUkZDIGZpcnN0OlxuLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzE5NTFcbi8vIFlvdSBtYXkgYWxzbyB3aXNoIHRvIHRha2UgYSBsb29rIGF0IHRoZSBndWlkZSBJIG1hZGUgYWJvdXQgdGhpcyBwcm9ncmFtOlxuLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTAxYXJyb3d6LzI1M2YzMWViNWFiYzNkOTI3NWFiOTQzMDAzZmZlY2FkXG4vLyBNdWNoIG9mIHRoZSBmb2xsb3dpbmcgY29kZSBpcyBzaW1pbGFyIHRvIHRoYXQgb2YgVVpJUC5qczpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waG90b3BlYS9VWklQLmpzXG4vLyBNYW55IG9wdGltaXphdGlvbnMgaGF2ZSBiZWVuIG1hZGUsIHNvIHRoZSBidW5kbGUgc2l6ZSBpcyB1bHRpbWF0ZWx5IHNtYWxsZXIgYnV0IHBlcmZvcm1hbmNlIGlzIHNpbWlsYXIuXG4vLyBTb21ldGltZXMgMCB3aWxsIGFwcGVhciB3aGVyZSAtMSB3b3VsZCBiZSBtb3JlIGFwcHJvcHJpYXRlLiBUaGlzIGlzIGJlY2F1c2UgdXNpbmcgYSB1aW50XG4vLyBpcyBiZXR0ZXIgZm9yIG1lbW9yeSBpbiBtb3N0IGVuZ2luZXMgKEkgKnRoaW5rKikuXG52YXIgY2gyID0ge307XG52YXIgd2sgPSAoZnVuY3Rpb24gKGMsIGlkLCBtc2csIHRyYW5zZmVyLCBjYikge1xuICAgIHZhciB1ID0gY2gyW2lkXSB8fCAoY2gyW2lkXSA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW2NdLCB7IHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnIH0pKSk7XG4gICAgdmFyIHcgPSBuZXcgV29ya2VyKHUpO1xuICAgIHcub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBjYihlLmVycm9yLCBudWxsKTsgfTtcbiAgICB3Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBjYihudWxsLCBlLmRhdGEpOyB9O1xuICAgIHcucG9zdE1lc3NhZ2UobXNnLCB0cmFuc2Zlcik7XG4gICAgcmV0dXJuIHc7XG59KTtcblxuLy8gYWxpYXNlcyBmb3Igc2hvcnRlciBjb21wcmVzc2VkIGNvZGUgKG1vc3QgbWluaWZlcnMgZG9uJ3QgZG8gdGhpcylcbnZhciB1OCA9IFVpbnQ4QXJyYXksIHUxNiA9IFVpbnQxNkFycmF5LCB1MzIgPSBVaW50MzJBcnJheTtcbi8vIGZpeGVkIGxlbmd0aCBleHRyYSBiaXRzXG52YXIgZmxlYiA9IG5ldyB1OChbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMSwgMSwgMSwgMiwgMiwgMiwgMiwgMywgMywgMywgMywgNCwgNCwgNCwgNCwgNSwgNSwgNSwgNSwgMCwgLyogdW51c2VkICovIDAsIDAsIC8qIGltcG9zc2libGUgKi8gMF0pO1xuLy8gZml4ZWQgZGlzdGFuY2UgZXh0cmEgYml0c1xuLy8gc2VlIGZsZWIgbm90ZVxudmFyIGZkZWIgPSBuZXcgdTgoWzAsIDAsIDAsIDAsIDEsIDEsIDIsIDIsIDMsIDMsIDQsIDQsIDUsIDUsIDYsIDYsIDcsIDcsIDgsIDgsIDksIDksIDEwLCAxMCwgMTEsIDExLCAxMiwgMTIsIDEzLCAxMywgLyogdW51c2VkICovIDAsIDBdKTtcbi8vIGNvZGUgbGVuZ3RoIGluZGV4IG1hcFxudmFyIGNsaW0gPSBuZXcgdTgoWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdKTtcbi8vIGdldCBiYXNlLCByZXZlcnNlIGluZGV4IG1hcCBmcm9tIGV4dHJhIGJpdHNcbnZhciBmcmViID0gZnVuY3Rpb24gKGViLCBzdGFydCkge1xuICAgIHZhciBiID0gbmV3IHUxNigzMSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAzMTsgKytpKSB7XG4gICAgICAgIGJbaV0gPSBzdGFydCArPSAxIDw8IGViW2kgLSAxXTtcbiAgICB9XG4gICAgLy8gbnVtYmVycyBoZXJlIGFyZSBhdCBtYXggMTggYml0c1xuICAgIHZhciByID0gbmV3IHUzMihiWzMwXSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCAzMDsgKytpKSB7XG4gICAgICAgIGZvciAodmFyIGogPSBiW2ldOyBqIDwgYltpICsgMV07ICsraikge1xuICAgICAgICAgICAgcltqXSA9ICgoaiAtIGJbaV0pIDw8IDUpIHwgaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW2IsIHJdO1xufTtcbnZhciBfYSA9IGZyZWIoZmxlYiwgMiksIGZsID0gX2FbMF0sIHJldmZsID0gX2FbMV07XG4vLyB3ZSBjYW4gaWdub3JlIHRoZSBmYWN0IHRoYXQgdGhlIG90aGVyIG51bWJlcnMgYXJlIHdyb25nOyB0aGV5IG5ldmVyIGhhcHBlbiBhbnl3YXlcbmZsWzI4XSA9IDI1OCwgcmV2ZmxbMjU4XSA9IDI4O1xudmFyIF9iID0gZnJlYihmZGViLCAwKSwgZmQgPSBfYlswXSwgcmV2ZmQgPSBfYlsxXTtcbi8vIG1hcCBvZiB2YWx1ZSB0byByZXZlcnNlIChhc3N1bWluZyAxNiBiaXRzKVxudmFyIHJldiA9IG5ldyB1MTYoMzI3NjgpO1xuZm9yICh2YXIgaSA9IDA7IGkgPCAzMjc2ODsgKytpKSB7XG4gICAgLy8gcmV2ZXJzZSB0YWJsZSBhbGdvcml0aG0gZnJvbSBTT1xuICAgIHZhciB4ID0gKChpICYgMHhBQUFBKSA+Pj4gMSkgfCAoKGkgJiAweDU1NTUpIDw8IDEpO1xuICAgIHggPSAoKHggJiAweENDQ0MpID4+PiAyKSB8ICgoeCAmIDB4MzMzMykgPDwgMik7XG4gICAgeCA9ICgoeCAmIDB4RjBGMCkgPj4+IDQpIHwgKCh4ICYgMHgwRjBGKSA8PCA0KTtcbiAgICByZXZbaV0gPSAoKCh4ICYgMHhGRjAwKSA+Pj4gOCkgfCAoKHggJiAweDAwRkYpIDw8IDgpKSA+Pj4gMTtcbn1cbi8vIGNyZWF0ZSBodWZmbWFuIHRyZWUgZnJvbSB1OCBcIm1hcFwiOiBpbmRleCAtPiBjb2RlIGxlbmd0aCBmb3IgY29kZSBpbmRleFxuLy8gbWIgKG1heCBiaXRzKSBtdXN0IGJlIGF0IG1vc3QgMTVcbi8vIFRPRE86IG9wdGltaXplL3NwbGl0IHVwP1xudmFyIGhNYXAgPSAoZnVuY3Rpb24gKGNkLCBtYiwgcikge1xuICAgIHZhciBzID0gY2QubGVuZ3RoO1xuICAgIC8vIGluZGV4XG4gICAgdmFyIGkgPSAwO1xuICAgIC8vIHUxNiBcIm1hcFwiOiBpbmRleCAtPiAjIG9mIGNvZGVzIHdpdGggYml0IGxlbmd0aCA9IGluZGV4XG4gICAgdmFyIGwgPSBuZXcgdTE2KG1iKTtcbiAgICAvLyBsZW5ndGggb2YgY2QgbXVzdCBiZSAyODggKHRvdGFsICMgb2YgY29kZXMpXG4gICAgZm9yICg7IGkgPCBzOyArK2kpXG4gICAgICAgICsrbFtjZFtpXSAtIDFdO1xuICAgIC8vIHUxNiBcIm1hcFwiOiBpbmRleCAtPiBtaW5pbXVtIGNvZGUgZm9yIGJpdCBsZW5ndGggPSBpbmRleFxuICAgIHZhciBsZSA9IG5ldyB1MTYobWIpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBtYjsgKytpKSB7XG4gICAgICAgIGxlW2ldID0gKGxlW2kgLSAxXSArIGxbaSAtIDFdKSA8PCAxO1xuICAgIH1cbiAgICB2YXIgY287XG4gICAgaWYgKHIpIHtcbiAgICAgICAgLy8gdTE2IFwibWFwXCI6IGluZGV4IC0+IG51bWJlciBvZiBhY3R1YWwgYml0cywgc3ltYm9sIGZvciBjb2RlXG4gICAgICAgIGNvID0gbmV3IHUxNigxIDw8IG1iKTtcbiAgICAgICAgLy8gYml0cyB0byByZW1vdmUgZm9yIHJldmVyc2VyXG4gICAgICAgIHZhciBydmIgPSAxNSAtIG1iO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgczsgKytpKSB7XG4gICAgICAgICAgICAvLyBpZ25vcmUgMCBsZW5ndGhzXG4gICAgICAgICAgICBpZiAoY2RbaV0pIHtcbiAgICAgICAgICAgICAgICAvLyBudW0gZW5jb2RpbmcgYm90aCBzeW1ib2wgYW5kIGJpdHMgcmVhZFxuICAgICAgICAgICAgICAgIHZhciBzdiA9IChpIDw8IDQpIHwgY2RbaV07XG4gICAgICAgICAgICAgICAgLy8gZnJlZSBiaXRzXG4gICAgICAgICAgICAgICAgdmFyIHJfMSA9IG1iIC0gY2RbaV07XG4gICAgICAgICAgICAgICAgLy8gc3RhcnQgdmFsdWVcbiAgICAgICAgICAgICAgICB2YXIgdiA9IGxlW2NkW2ldIC0gMV0rKyA8PCByXzE7XG4gICAgICAgICAgICAgICAgLy8gbSBpcyBlbmQgdmFsdWVcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtID0gdiB8ICgoMSA8PCByXzEpIC0gMSk7IHYgPD0gbTsgKyt2KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZXJ5IDE2IGJpdCB2YWx1ZSBzdGFydGluZyB3aXRoIHRoZSBjb2RlIHlpZWxkcyB0aGUgc2FtZSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgY29bcmV2W3ZdID4+PiBydmJdID0gc3Y7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjbyA9IG5ldyB1MTYocyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzOyArK2kpXG4gICAgICAgICAgICBjb1tpXSA9IHJldltsZVtjZFtpXSAtIDFdKytdID4+PiAoMTUgLSBjZFtpXSk7XG4gICAgfVxuICAgIHJldHVybiBjbztcbn0pO1xuLy8gZml4ZWQgbGVuZ3RoIHRyZWVcbnZhciBmbHQgPSBuZXcgdTgoMjg4KTtcbmZvciAodmFyIGkgPSAwOyBpIDwgMTQ0OyArK2kpXG4gICAgZmx0W2ldID0gODtcbmZvciAodmFyIGkgPSAxNDQ7IGkgPCAyNTY7ICsraSlcbiAgICBmbHRbaV0gPSA5O1xuZm9yICh2YXIgaSA9IDI1NjsgaSA8IDI4MDsgKytpKVxuICAgIGZsdFtpXSA9IDc7XG5mb3IgKHZhciBpID0gMjgwOyBpIDwgMjg4OyArK2kpXG4gICAgZmx0W2ldID0gODtcbi8vIGZpeGVkIGRpc3RhbmNlIHRyZWVcbnZhciBmZHQgPSBuZXcgdTgoMzIpO1xuZm9yICh2YXIgaSA9IDA7IGkgPCAzMjsgKytpKVxuICAgIGZkdFtpXSA9IDU7XG4vLyBmaXhlZCBsZW5ndGggbWFwXG52YXIgZmxtID0gLyojX19QVVJFX18qLyBoTWFwKGZsdCwgOSwgMCksIGZscm0gPSAvKiNfX1BVUkVfXyovIGhNYXAoZmx0LCA5LCAxKTtcbi8vIGZpeGVkIGRpc3RhbmNlIG1hcFxudmFyIGZkbSA9IC8qI19fUFVSRV9fKi8gaE1hcChmZHQsIDUsIDApLCBmZHJtID0gLyojX19QVVJFX18qLyBoTWFwKGZkdCwgNSwgMSk7XG4vLyBmaW5kIG1heCBvZiBhcnJheVxudmFyIG1heCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIG0gPSBhWzBdO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoYVtpXSA+IG0pXG4gICAgICAgICAgICBtID0gYVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIG07XG59O1xuLy8gcmVhZCBkLCBzdGFydGluZyBhdCBiaXQgcCBhbmQgbWFzayB3aXRoIG1cbnZhciBiaXRzID0gZnVuY3Rpb24gKGQsIHAsIG0pIHtcbiAgICB2YXIgbyA9IChwIC8gOCkgPj4gMDtcbiAgICByZXR1cm4gKChkW29dIHwgKGRbbyArIDFdIDw8IDgpKSA+Pj4gKHAgJiA3KSkgJiBtO1xufTtcbi8vIHJlYWQgZCwgc3RhcnRpbmcgYXQgYml0IHAgY29udGludWluZyBmb3IgYXQgbGVhc3QgMTYgYml0c1xudmFyIGJpdHMxNiA9IGZ1bmN0aW9uIChkLCBwKSB7XG4gICAgdmFyIG8gPSAocCAvIDgpID4+IDA7XG4gICAgcmV0dXJuICgoZFtvXSB8IChkW28gKyAxXSA8PCA4KSB8IChkW28gKyAyXSA8PCAxNikpID4+PiAocCAmIDcpKTtcbn07XG4vLyBnZXQgZW5kIG9mIGJ5dGVcbnZhciBzaGZ0ID0gZnVuY3Rpb24gKHApIHsgcmV0dXJuICgocCAvIDgpID4+IDApICsgKHAgJiA3ICYmIDEpOyB9O1xuLy8gdHlwZWQgYXJyYXkgc2xpY2UgLSBhbGxvd3MgZ2FyYmFnZSBjb2xsZWN0b3IgdG8gZnJlZSBvcmlnaW5hbCByZWZlcmVuY2UsXG4vLyB3aGlsZSBiZWluZyBtb3JlIGNvbXBhdGlibGUgdGhhbiAuc2xpY2VcbnZhciBzbGMgPSBmdW5jdGlvbiAodiwgcywgZSkge1xuICAgIGlmIChzID09IG51bGwgfHwgcyA8IDApXG4gICAgICAgIHMgPSAwO1xuICAgIGlmIChlID09IG51bGwgfHwgZSA+IHYubGVuZ3RoKVxuICAgICAgICBlID0gdi5sZW5ndGg7XG4gICAgLy8gY2FuJ3QgdXNlIC5jb25zdHJ1Y3RvciBpbiBjYXNlIHVzZXItc3VwcGxpZWRcbiAgICB2YXIgbiA9IG5ldyAodiBpbnN0YW5jZW9mIHUxNiA/IHUxNiA6IHYgaW5zdGFuY2VvZiB1MzIgPyB1MzIgOiB1OCkoZSAtIHMpO1xuICAgIG4uc2V0KHYuc3ViYXJyYXkocywgZSkpO1xuICAgIHJldHVybiBuO1xufTtcbi8vIGV4cGFuZHMgcmF3IERFRkxBVEUgZGF0YVxudmFyIGluZmx0ID0gZnVuY3Rpb24gKGRhdCwgYnVmLCBzdCkge1xuICAgIC8vIHNvdXJjZSBsZW5ndGhcbiAgICB2YXIgc2wgPSBkYXQubGVuZ3RoO1xuICAgIC8vIGhhdmUgdG8gZXN0aW1hdGUgc2l6ZVxuICAgIHZhciBub0J1ZiA9ICFidWYgfHwgc3Q7XG4gICAgLy8gbm8gc3RhdGVcbiAgICB2YXIgbm9TdCA9ICFzdCB8fCBzdC5pO1xuICAgIGlmICghc3QpXG4gICAgICAgIHN0ID0ge307XG4gICAgLy8gQXNzdW1lcyByb3VnaGx5IDMzJSBjb21wcmVzc2lvbiByYXRpbyBhdmVyYWdlXG4gICAgaWYgKCFidWYpXG4gICAgICAgIGJ1ZiA9IG5ldyB1OChzbCAqIDMpO1xuICAgIC8vIGVuc3VyZSBidWZmZXIgY2FuIGZpdCBhdCBsZWFzdCBsIGVsZW1lbnRzXG4gICAgdmFyIGNidWYgPSBmdW5jdGlvbiAobCkge1xuICAgICAgICB2YXIgYmwgPSBidWYubGVuZ3RoO1xuICAgICAgICAvLyBuZWVkIHRvIGluY3JlYXNlIHNpemUgdG8gZml0XG4gICAgICAgIGlmIChsID4gYmwpIHtcbiAgICAgICAgICAgIC8vIERvdWJsZSBvciBzZXQgdG8gbmVjZXNzYXJ5LCB3aGljaGV2ZXIgaXMgZ3JlYXRlclxuICAgICAgICAgICAgdmFyIG5idWYgPSBuZXcgdTgoTWF0aC5tYXgoYmwgKiAyLCBsKSk7XG4gICAgICAgICAgICBuYnVmLnNldChidWYpO1xuICAgICAgICAgICAgYnVmID0gbmJ1ZjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gIGxhc3QgY2h1bmsgICAgICAgICBiaXRwb3MgICAgICAgICAgIGJ5dGVzXG4gICAgdmFyIGZpbmFsID0gc3QuZiB8fCAwLCBwb3MgPSBzdC5wIHx8IDAsIGJ0ID0gc3QuYiB8fCAwLCBsbSA9IHN0LmwsIGRtID0gc3QuZCwgbGJ0ID0gc3QubSwgZGJ0ID0gc3QubjtcbiAgICAvLyB0b3RhbCBiaXRzXG4gICAgdmFyIHRidHMgPSBzbCAqIDg7XG4gICAgZG8ge1xuICAgICAgICBpZiAoIWxtKSB7XG4gICAgICAgICAgICAvLyBCRklOQUwgLSB0aGlzIGlzIG9ubHkgMSB3aGVuIGxhc3QgY2h1bmsgaXMgbmV4dFxuICAgICAgICAgICAgc3QuZiA9IGZpbmFsID0gYml0cyhkYXQsIHBvcywgMSk7XG4gICAgICAgICAgICAvLyB0eXBlOiAwID0gbm8gY29tcHJlc3Npb24sIDEgPSBmaXhlZCBodWZmbWFuLCAyID0gZHluYW1pYyBodWZmbWFuXG4gICAgICAgICAgICB2YXIgdHlwZSA9IGJpdHMoZGF0LCBwb3MgKyAxLCAzKTtcbiAgICAgICAgICAgIHBvcyArPSAzO1xuICAgICAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICAgICAgLy8gZ28gdG8gZW5kIG9mIGJ5dGUgYm91bmRhcnlcbiAgICAgICAgICAgICAgICB2YXIgcyA9IHNoZnQocG9zKSArIDQsIGwgPSBkYXRbcyAtIDRdIHwgKGRhdFtzIC0gM10gPDwgOCksIHQgPSBzICsgbDtcbiAgICAgICAgICAgICAgICBpZiAodCA+IHNsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub1N0KVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ3VuZXhwZWN0ZWQgRU9GJztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBzaXplXG4gICAgICAgICAgICAgICAgaWYgKG5vQnVmKVxuICAgICAgICAgICAgICAgICAgICBjYnVmKGJ0ICsgbCk7XG4gICAgICAgICAgICAgICAgLy8gQ29weSBvdmVyIHVuY29tcHJlc3NlZCBkYXRhXG4gICAgICAgICAgICAgICAgYnVmLnNldChkYXQuc3ViYXJyYXkocywgdCksIGJ0KTtcbiAgICAgICAgICAgICAgICAvLyBHZXQgbmV3IGJpdHBvcywgdXBkYXRlIGJ5dGUgY291bnRcbiAgICAgICAgICAgICAgICBzdC5iID0gYnQgKz0gbCwgc3QucCA9IHBvcyA9IHQgKiA4O1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PSAxKVxuICAgICAgICAgICAgICAgIGxtID0gZmxybSwgZG0gPSBmZHJtLCBsYnQgPSA5LCBkYnQgPSA1O1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZSA9PSAyKSB7XG4gICAgICAgICAgICAgICAgLy8gIGxpdGVyYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3Roc1xuICAgICAgICAgICAgICAgIHZhciBoTGl0ID0gYml0cyhkYXQsIHBvcywgMzEpICsgMjU3LCBoY0xlbiA9IGJpdHMoZGF0LCBwb3MgKyAxMCwgMTUpICsgNDtcbiAgICAgICAgICAgICAgICB2YXIgdGwgPSBoTGl0ICsgYml0cyhkYXQsIHBvcyArIDUsIDMxKSArIDE7XG4gICAgICAgICAgICAgICAgcG9zICs9IDE0O1xuICAgICAgICAgICAgICAgIC8vIGxlbmd0aCtkaXN0YW5jZSB0cmVlXG4gICAgICAgICAgICAgICAgdmFyIGxkdCA9IG5ldyB1OCh0bCk7XG4gICAgICAgICAgICAgICAgLy8gY29kZSBsZW5ndGggdHJlZVxuICAgICAgICAgICAgICAgIHZhciBjbHQgPSBuZXcgdTgoMTkpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGNMZW47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB1c2UgaW5kZXggbWFwIHRvIGdldCByZWFsIGNvZGVcbiAgICAgICAgICAgICAgICAgICAgY2x0W2NsaW1baV1dID0gYml0cyhkYXQsIHBvcyArIGkgKiAzLCA3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcG9zICs9IGhjTGVuICogMztcbiAgICAgICAgICAgICAgICAvLyBjb2RlIGxlbmd0aHMgYml0c1xuICAgICAgICAgICAgICAgIHZhciBjbGIgPSBtYXgoY2x0KSwgY2xibXNrID0gKDEgPDwgY2xiKSAtIDE7XG4gICAgICAgICAgICAgICAgaWYgKCFub1N0ICYmIHBvcyArIHRsICogKGNsYiArIDcpID4gdGJ0cylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gY29kZSBsZW5ndGhzIG1hcFxuICAgICAgICAgICAgICAgIHZhciBjbG0gPSBoTWFwKGNsdCwgY2xiLCAxKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRsOykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGNsbVtiaXRzKGRhdCwgcG9zLCBjbGJtc2spXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYml0cyByZWFkXG4gICAgICAgICAgICAgICAgICAgIHBvcyArPSByICYgMTU7XG4gICAgICAgICAgICAgICAgICAgIC8vIHN5bWJvbFxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IHIgPj4+IDQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvZGUgbGVuZ3RoIHRvIGNvcHlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgPCAxNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGR0W2krK10gPSBzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIGNvcHkgICBjb3VudFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSAwLCBuID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09IDE2KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAzICsgYml0cyhkYXQsIHBvcywgMyksIHBvcyArPSAyLCBjID0gbGR0W2kgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHMgPT0gMTcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IDMgKyBiaXRzKGRhdCwgcG9zLCA3KSwgcG9zICs9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzID09IDE4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAxMSArIGJpdHMoZGF0LCBwb3MsIDEyNyksIHBvcyArPSA3O1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4tLSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZHRbaSsrXSA9IGM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gICAgbGVuZ3RoIHRyZWUgICAgICAgICAgICAgICAgIGRpc3RhbmNlIHRyZWVcbiAgICAgICAgICAgICAgICB2YXIgbHQgPSBsZHQuc3ViYXJyYXkoMCwgaExpdCksIGR0ID0gbGR0LnN1YmFycmF5KGhMaXQpO1xuICAgICAgICAgICAgICAgIC8vIG1heCBsZW5ndGggYml0c1xuICAgICAgICAgICAgICAgIGxidCA9IG1heChsdCk7XG4gICAgICAgICAgICAgICAgLy8gbWF4IGRpc3QgYml0c1xuICAgICAgICAgICAgICAgIGRidCA9IG1heChkdCk7XG4gICAgICAgICAgICAgICAgbG0gPSBoTWFwKGx0LCBsYnQsIDEpO1xuICAgICAgICAgICAgICAgIGRtID0gaE1hcChkdCwgZGJ0LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyAnaW52YWxpZCBibG9jayB0eXBlJztcbiAgICAgICAgICAgIGlmIChwb3MgPiB0YnRzKVxuICAgICAgICAgICAgICAgIHRocm93ICd1bmV4cGVjdGVkIEVPRic7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBidWZmZXIgY2FuIGhvbGQgdGhpcyArIHRoZSBsYXJnZXN0IHBvc3NpYmxlIGFkZGl0aW9uXG4gICAgICAgIC8vIE1heGltdW0gY2h1bmsgc2l6ZSAocHJhY3RpY2FsbHksIHRoZW9yZXRpY2FsbHkgaW5maW5pdGUpIGlzIDJeMTc7XG4gICAgICAgIGlmIChub0J1ZilcbiAgICAgICAgICAgIGNidWYoYnQgKyAxMzEwNzIpO1xuICAgICAgICB2YXIgbG1zID0gKDEgPDwgbGJ0KSAtIDEsIGRtcyA9ICgxIDw8IGRidCkgLSAxO1xuICAgICAgICB2YXIgbXhhID0gbGJ0ICsgZGJ0ICsgMTg7XG4gICAgICAgIHdoaWxlIChub1N0IHx8IHBvcyArIG14YSA8IHRidHMpIHtcbiAgICAgICAgICAgIC8vIGJpdHMgcmVhZCwgY29kZVxuICAgICAgICAgICAgdmFyIGMgPSBsbVtiaXRzMTYoZGF0LCBwb3MpICYgbG1zXSwgc3ltID0gYyA+Pj4gNDtcbiAgICAgICAgICAgIHBvcyArPSBjICYgMTU7XG4gICAgICAgICAgICBpZiAocG9zID4gdGJ0cylcbiAgICAgICAgICAgICAgICB0aHJvdyAndW5leHBlY3RlZCBFT0YnO1xuICAgICAgICAgICAgaWYgKCFjKVxuICAgICAgICAgICAgICAgIHRocm93ICdpbnZhbGlkIGxlbmd0aC9saXRlcmFsJztcbiAgICAgICAgICAgIGlmIChzeW0gPCAyNTYpXG4gICAgICAgICAgICAgICAgYnVmW2J0KytdID0gc3ltO1xuICAgICAgICAgICAgZWxzZSBpZiAoc3ltID09IDI1Nikge1xuICAgICAgICAgICAgICAgIGxtID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBhZGQgPSBzeW0gLSAyNTQ7XG4gICAgICAgICAgICAgICAgLy8gbm8gZXh0cmEgYml0cyBuZWVkZWQgaWYgbGVzc1xuICAgICAgICAgICAgICAgIGlmIChzeW0gPiAyNjQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBzeW0gLSAyNTcsIGIgPSBmbGViW2ldO1xuICAgICAgICAgICAgICAgICAgICBhZGQgPSBiaXRzKGRhdCwgcG9zLCAoMSA8PCBiKSAtIDEpICsgZmxbaV07XG4gICAgICAgICAgICAgICAgICAgIHBvcyArPSBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBkaXN0XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBkbVtiaXRzMTYoZGF0LCBwb3MpICYgZG1zXSwgZHN5bSA9IGQgPj4+IDQ7XG4gICAgICAgICAgICAgICAgaWYgKCFkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnaW52YWxpZCBkaXN0YW5jZSc7XG4gICAgICAgICAgICAgICAgcG9zICs9IGQgJiAxNTtcbiAgICAgICAgICAgICAgICB2YXIgZHQgPSBmZFtkc3ltXTtcbiAgICAgICAgICAgICAgICBpZiAoZHN5bSA+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSBmZGViW2RzeW1dO1xuICAgICAgICAgICAgICAgICAgICBkdCArPSBiaXRzMTYoZGF0LCBwb3MpICYgKCgxIDw8IGIpIC0gMSksIHBvcyArPSBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocG9zID4gdGJ0cylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ3VuZXhwZWN0ZWQgRU9GJztcbiAgICAgICAgICAgICAgICBpZiAobm9CdWYpXG4gICAgICAgICAgICAgICAgICAgIGNidWYoYnQgKyAxMzEwNzIpO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBidCArIGFkZDtcbiAgICAgICAgICAgICAgICBmb3IgKDsgYnQgPCBlbmQ7IGJ0ICs9IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmW2J0XSA9IGJ1ZltidCAtIGR0XTtcbiAgICAgICAgICAgICAgICAgICAgYnVmW2J0ICsgMV0gPSBidWZbYnQgKyAxIC0gZHRdO1xuICAgICAgICAgICAgICAgICAgICBidWZbYnQgKyAyXSA9IGJ1ZltidCArIDIgLSBkdF07XG4gICAgICAgICAgICAgICAgICAgIGJ1ZltidCArIDNdID0gYnVmW2J0ICsgMyAtIGR0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3QubCA9IGxtLCBzdC5wID0gcG9zLCBzdC5iID0gYnQ7XG4gICAgICAgIGlmIChsbSlcbiAgICAgICAgICAgIGZpbmFsID0gMSwgc3QubSA9IGxidCwgc3QuZCA9IGRtLCBzdC5uID0gZGJ0O1xuICAgIH0gd2hpbGUgKCFmaW5hbCk7XG4gICAgcmV0dXJuIGJ0ID09IGJ1Zi5sZW5ndGggPyBidWYgOiBzbGMoYnVmLCAwLCBidCk7XG59O1xuLy8gc3RhcnRpbmcgYXQgcCwgd3JpdGUgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGJpdHMgdGhhdCBjYW4gaG9sZCB2IHRvIGRcbnZhciB3Yml0cyA9IGZ1bmN0aW9uIChkLCBwLCB2KSB7XG4gICAgdiA8PD0gcCAmIDc7XG4gICAgdmFyIG8gPSAocCAvIDgpID4+IDA7XG4gICAgZFtvXSB8PSB2O1xuICAgIGRbbyArIDFdIHw9IHYgPj4+IDg7XG59O1xuLy8gc3RhcnRpbmcgYXQgcCwgd3JpdGUgdGhlIG1pbmltdW0gbnVtYmVyIG9mIGJpdHMgKD44KSB0aGF0IGNhbiBob2xkIHYgdG8gZFxudmFyIHdiaXRzMTYgPSBmdW5jdGlvbiAoZCwgcCwgdikge1xuICAgIHYgPDw9IHAgJiA3O1xuICAgIHZhciBvID0gKHAgLyA4KSA+PiAwO1xuICAgIGRbb10gfD0gdjtcbiAgICBkW28gKyAxXSB8PSB2ID4+PiA4O1xuICAgIGRbbyArIDJdIHw9IHYgPj4+IDE2O1xufTtcbi8vIGNyZWF0ZXMgY29kZSBsZW5ndGhzIGZyb20gYSBmcmVxdWVuY3kgdGFibGVcbnZhciBoVHJlZSA9IGZ1bmN0aW9uIChkLCBtYikge1xuICAgIC8vIE5lZWQgZXh0cmEgaW5mbyB0byBtYWtlIGEgdHJlZVxuICAgIHZhciB0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChkW2ldKVxuICAgICAgICAgICAgdC5wdXNoKHsgczogaSwgZjogZFtpXSB9KTtcbiAgICB9XG4gICAgdmFyIHMgPSB0Lmxlbmd0aDtcbiAgICB2YXIgdDIgPSB0LnNsaWNlKCk7XG4gICAgaWYgKCFzKVxuICAgICAgICByZXR1cm4gW25ldyB1OCgwKSwgMF07XG4gICAgaWYgKHMgPT0gMSkge1xuICAgICAgICB2YXIgdiA9IG5ldyB1OCh0WzBdLnMgKyAxKTtcbiAgICAgICAgdlt0WzBdLnNdID0gMTtcbiAgICAgICAgcmV0dXJuIFt2LCAxXTtcbiAgICB9XG4gICAgdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmYgLSBiLmY7IH0pO1xuICAgIC8vIGFmdGVyIGkyIHJlYWNoZXMgbGFzdCBpbmQsIHdpbGwgYmUgc3RvcHBlZFxuICAgIC8vIGZyZXEgbXVzdCBiZSBncmVhdGVyIHRoYW4gbGFyZ2VzdCBwb3NzaWJsZSBudW1iZXIgb2Ygc3ltYm9sc1xuICAgIHQucHVzaCh7IHM6IC0xLCBmOiAyNTAwMSB9KTtcbiAgICB2YXIgbCA9IHRbMF0sIHIgPSB0WzFdLCBpMCA9IDAsIGkxID0gMSwgaTIgPSAyO1xuICAgIHRbMF0gPSB7IHM6IC0xLCBmOiBsLmYgKyByLmYsIGw6IGwsIHI6IHIgfTtcbiAgICAvLyBlZmZpY2llbnQgYWxnb3JpdGhtIGZyb20gVVpJUC5qc1xuICAgIC8vIGkwIGlzIGxvb2tiZWhpbmQsIGkyIGlzIGxvb2thaGVhZCAtIGFmdGVyIHByb2Nlc3NpbmcgdHdvIGxvdy1mcmVxXG4gICAgLy8gc3ltYm9scyB0aGF0IGNvbWJpbmVkIGhhdmUgaGlnaCBmcmVxLCB3aWxsIHN0YXJ0IHByb2Nlc3NpbmcgaTIgKGhpZ2gtZnJlcSxcbiAgICAvLyBub24tY29tcG9zaXRlKSBzeW1ib2xzIGluc3RlYWRcbiAgICAvLyBzZWUgaHR0cHM6Ly9yZWRkaXQuY29tL3IvcGhvdG9wZWEvY29tbWVudHMvaWtla2h0L3V6aXBqc19xdWVzdGlvbnMvXG4gICAgd2hpbGUgKGkxICE9IHMgLSAxKSB7XG4gICAgICAgIGwgPSB0W3RbaTBdLmYgPCB0W2kyXS5mID8gaTArKyA6IGkyKytdO1xuICAgICAgICByID0gdFtpMCAhPSBpMSAmJiB0W2kwXS5mIDwgdFtpMl0uZiA/IGkwKysgOiBpMisrXTtcbiAgICAgICAgdFtpMSsrXSA9IHsgczogLTEsIGY6IGwuZiArIHIuZiwgbDogbCwgcjogciB9O1xuICAgIH1cbiAgICB2YXIgbWF4U3ltID0gdDJbMF0ucztcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHM7ICsraSkge1xuICAgICAgICBpZiAodDJbaV0ucyA+IG1heFN5bSlcbiAgICAgICAgICAgIG1heFN5bSA9IHQyW2ldLnM7XG4gICAgfVxuICAgIC8vIGNvZGUgbGVuZ3Roc1xuICAgIHZhciB0ciA9IG5ldyB1MTYobWF4U3ltICsgMSk7XG4gICAgLy8gbWF4IGJpdHMgaW4gdHJlZVxuICAgIHZhciBtYnQgPSBsbih0W2kxIC0gMV0sIHRyLCAwKTtcbiAgICBpZiAobWJ0ID4gbWIpIHtcbiAgICAgICAgLy8gbW9yZSBhbGdvcml0aG1zIGZyb20gVVpJUC5qc1xuICAgICAgICAvLyBUT0RPOiBmaW5kIG91dCBob3cgdGhpcyBjb2RlIHdvcmtzIChkZWJ0KVxuICAgICAgICAvLyAgaW5kICAgIGRlYnRcbiAgICAgICAgdmFyIGkgPSAwLCBkdCA9IDA7XG4gICAgICAgIC8vICAgIGxlZnQgICAgICAgICAgICBjb3N0XG4gICAgICAgIHZhciBsZnQgPSBtYnQgLSBtYiwgY3N0ID0gMSA8PCBsZnQ7XG4gICAgICAgIHQyLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIHRyW2Iuc10gLSB0clthLnNdIHx8IGEuZiAtIGIuZjsgfSk7XG4gICAgICAgIGZvciAoOyBpIDwgczsgKytpKSB7XG4gICAgICAgICAgICB2YXIgaTJfMSA9IHQyW2ldLnM7XG4gICAgICAgICAgICBpZiAodHJbaTJfMV0gPiBtYikge1xuICAgICAgICAgICAgICAgIGR0ICs9IGNzdCAtICgxIDw8IChtYnQgLSB0cltpMl8xXSkpO1xuICAgICAgICAgICAgICAgIHRyW2kyXzFdID0gbWI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZHQgPj4+PSBsZnQ7XG4gICAgICAgIHdoaWxlIChkdCA+IDApIHtcbiAgICAgICAgICAgIHZhciBpMl8yID0gdDJbaV0ucztcbiAgICAgICAgICAgIGlmICh0cltpMl8yXSA8IG1iKVxuICAgICAgICAgICAgICAgIGR0IC09IDEgPDwgKG1iIC0gdHJbaTJfMl0rKyAtIDEpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICsraTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA+PSAwICYmIGR0OyAtLWkpIHtcbiAgICAgICAgICAgIHZhciBpMl8zID0gdDJbaV0ucztcbiAgICAgICAgICAgIGlmICh0cltpMl8zXSA9PSBtYikge1xuICAgICAgICAgICAgICAgIC0tdHJbaTJfM107XG4gICAgICAgICAgICAgICAgKytkdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYnQgPSBtYjtcbiAgICB9XG4gICAgcmV0dXJuIFtuZXcgdTgodHIpLCBtYnRdO1xufTtcbi8vIGdldCB0aGUgbWF4IGxlbmd0aCBhbmQgYXNzaWduIGxlbmd0aCBjb2Rlc1xudmFyIGxuID0gZnVuY3Rpb24gKG4sIGwsIGQpIHtcbiAgICByZXR1cm4gbi5zID09IC0xXG4gICAgICAgID8gTWF0aC5tYXgobG4obi5sLCBsLCBkICsgMSksIGxuKG4uciwgbCwgZCArIDEpKVxuICAgICAgICA6IChsW24uc10gPSBkKTtcbn07XG4vLyBsZW5ndGggY29kZXMgZ2VuZXJhdGlvblxudmFyIGxjID0gZnVuY3Rpb24gKGMpIHtcbiAgICB2YXIgcyA9IGMubGVuZ3RoO1xuICAgIC8vIE5vdGUgdGhhdCB0aGUgc2VtaWNvbG9uIHdhcyBpbnRlbnRpb25hbFxuICAgIHdoaWxlIChzICYmICFjWy0tc10pXG4gICAgICAgIDtcbiAgICB2YXIgY2wgPSBuZXcgdTE2KCsrcyk7XG4gICAgLy8gIGluZCAgICAgIG51bSAgICAgICAgIHN0cmVha1xuICAgIHZhciBjbGkgPSAwLCBjbG4gPSBjWzBdLCBjbHMgPSAxO1xuICAgIHZhciB3ID0gZnVuY3Rpb24gKHYpIHsgY2xbY2xpKytdID0gdjsgfTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBzOyArK2kpIHtcbiAgICAgICAgaWYgKGNbaV0gPT0gY2xuICYmIGkgIT0gcylcbiAgICAgICAgICAgICsrY2xzO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghY2xuICYmIGNscyA+IDIpIHtcbiAgICAgICAgICAgICAgICBmb3IgKDsgY2xzID4gMTM4OyBjbHMgLT0gMTM4KVxuICAgICAgICAgICAgICAgICAgICB3KDMyNzU0KTtcbiAgICAgICAgICAgICAgICBpZiAoY2xzID4gMikge1xuICAgICAgICAgICAgICAgICAgICB3KGNscyA+IDEwID8gKChjbHMgLSAxMSkgPDwgNSkgfCAyODY5MCA6ICgoY2xzIC0gMykgPDwgNSkgfCAxMjMwNSk7XG4gICAgICAgICAgICAgICAgICAgIGNscyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2xzID4gMykge1xuICAgICAgICAgICAgICAgIHcoY2xuKSwgLS1jbHM7XG4gICAgICAgICAgICAgICAgZm9yICg7IGNscyA+IDY7IGNscyAtPSA2KVxuICAgICAgICAgICAgICAgICAgICB3KDgzMDQpO1xuICAgICAgICAgICAgICAgIGlmIChjbHMgPiAyKVxuICAgICAgICAgICAgICAgICAgICB3KCgoY2xzIC0gMykgPDwgNSkgfCA4MjA4KSwgY2xzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjbHMtLSlcbiAgICAgICAgICAgICAgICB3KGNsbik7XG4gICAgICAgICAgICBjbHMgPSAxO1xuICAgICAgICAgICAgY2xuID0gY1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW2NsLnN1YmFycmF5KDAsIGNsaSksIHNdO1xufTtcbi8vIGNhbGN1bGF0ZSB0aGUgbGVuZ3RoIG9mIG91dHB1dCBmcm9tIHRyZWUsIGNvZGUgbGVuZ3Roc1xudmFyIGNsZW4gPSBmdW5jdGlvbiAoY2YsIGNsKSB7XG4gICAgdmFyIGwgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2wubGVuZ3RoOyArK2kpXG4gICAgICAgIGwgKz0gY2ZbaV0gKiBjbFtpXTtcbiAgICByZXR1cm4gbDtcbn07XG4vLyB3cml0ZXMgYSBmaXhlZCBibG9ja1xuLy8gcmV0dXJucyB0aGUgbmV3IGJpdCBwb3NcbnZhciB3ZmJsayA9IGZ1bmN0aW9uIChvdXQsIHBvcywgZGF0KSB7XG4gICAgLy8gbm8gbmVlZCB0byB3cml0ZSAwMCBhcyB0eXBlOiBUeXBlZEFycmF5IGRlZmF1bHRzIHRvIDBcbiAgICB2YXIgcyA9IGRhdC5sZW5ndGg7XG4gICAgdmFyIG8gPSBzaGZ0KHBvcyArIDIpO1xuICAgIG91dFtvXSA9IHMgJiAyNTU7XG4gICAgb3V0W28gKyAxXSA9IHMgPj4+IDg7XG4gICAgb3V0W28gKyAyXSA9IG91dFtvXSBeIDI1NTtcbiAgICBvdXRbbyArIDNdID0gb3V0W28gKyAxXSBeIDI1NTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7ICsraSlcbiAgICAgICAgb3V0W28gKyBpICsgNF0gPSBkYXRbaV07XG4gICAgcmV0dXJuIChvICsgNCArIHMpICogODtcbn07XG4vLyB3cml0ZXMgYSBibG9ja1xudmFyIHdibGsgPSBmdW5jdGlvbiAoZGF0LCBvdXQsIGZpbmFsLCBzeW1zLCBsZiwgZGYsIGViLCBsaSwgYnMsIGJsLCBwKSB7XG4gICAgd2JpdHMob3V0LCBwKyssIGZpbmFsKTtcbiAgICArK2xmWzI1Nl07XG4gICAgdmFyIF9hID0gaFRyZWUobGYsIDE1KSwgZGx0ID0gX2FbMF0sIG1sYiA9IF9hWzFdO1xuICAgIHZhciBfYiA9IGhUcmVlKGRmLCAxNSksIGRkdCA9IF9iWzBdLCBtZGIgPSBfYlsxXTtcbiAgICB2YXIgX2MgPSBsYyhkbHQpLCBsY2x0ID0gX2NbMF0sIG5sYyA9IF9jWzFdO1xuICAgIHZhciBfZCA9IGxjKGRkdCksIGxjZHQgPSBfZFswXSwgbmRjID0gX2RbMV07XG4gICAgdmFyIGxjZnJlcSA9IG5ldyB1MTYoMTkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGNsdC5sZW5ndGg7ICsraSlcbiAgICAgICAgbGNmcmVxW2xjbHRbaV0gJiAzMV0rKztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxjZHQubGVuZ3RoOyArK2kpXG4gICAgICAgIGxjZnJlcVtsY2R0W2ldICYgMzFdKys7XG4gICAgdmFyIF9lID0gaFRyZWUobGNmcmVxLCA3KSwgbGN0ID0gX2VbMF0sIG1sY2IgPSBfZVsxXTtcbiAgICB2YXIgbmxjYyA9IDE5O1xuICAgIGZvciAoOyBubGNjID4gNCAmJiAhbGN0W2NsaW1bbmxjYyAtIDFdXTsgLS1ubGNjKVxuICAgICAgICA7XG4gICAgdmFyIGZsZW4gPSAoYmwgKyA1KSA8PCAzO1xuICAgIHZhciBmdGxlbiA9IGNsZW4obGYsIGZsdCkgKyBjbGVuKGRmLCBmZHQpICsgZWI7XG4gICAgdmFyIGR0bGVuID0gY2xlbihsZiwgZGx0KSArIGNsZW4oZGYsIGRkdCkgKyBlYiArIDE0ICsgMyAqIG5sY2MgKyBjbGVuKGxjZnJlcSwgbGN0KSArICgyICogbGNmcmVxWzE2XSArIDMgKiBsY2ZyZXFbMTddICsgNyAqIGxjZnJlcVsxOF0pO1xuICAgIGlmIChmbGVuIDw9IGZ0bGVuICYmIGZsZW4gPD0gZHRsZW4pXG4gICAgICAgIHJldHVybiB3ZmJsayhvdXQsIHAsIGRhdC5zdWJhcnJheShicywgYnMgKyBibCkpO1xuICAgIHZhciBsbSwgbGwsIGRtLCBkbDtcbiAgICB3Yml0cyhvdXQsIHAsIDEgKyAoZHRsZW4gPCBmdGxlbikpLCBwICs9IDI7XG4gICAgaWYgKGR0bGVuIDwgZnRsZW4pIHtcbiAgICAgICAgbG0gPSBoTWFwKGRsdCwgbWxiLCAwKSwgbGwgPSBkbHQsIGRtID0gaE1hcChkZHQsIG1kYiwgMCksIGRsID0gZGR0O1xuICAgICAgICB2YXIgbGxtID0gaE1hcChsY3QsIG1sY2IsIDApO1xuICAgICAgICB3Yml0cyhvdXQsIHAsIG5sYyAtIDI1Nyk7XG4gICAgICAgIHdiaXRzKG91dCwgcCArIDUsIG5kYyAtIDEpO1xuICAgICAgICB3Yml0cyhvdXQsIHAgKyAxMCwgbmxjYyAtIDQpO1xuICAgICAgICBwICs9IDE0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5sY2M7ICsraSlcbiAgICAgICAgICAgIHdiaXRzKG91dCwgcCArIDMgKiBpLCBsY3RbY2xpbVtpXV0pO1xuICAgICAgICBwICs9IDMgKiBubGNjO1xuICAgICAgICB2YXIgbGN0cyA9IFtsY2x0LCBsY2R0XTtcbiAgICAgICAgZm9yICh2YXIgaXQgPSAwOyBpdCA8IDI7ICsraXQpIHtcbiAgICAgICAgICAgIHZhciBjbGN0ID0gbGN0c1tpdF07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsY3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gY2xjdFtpXSAmIDMxO1xuICAgICAgICAgICAgICAgIHdiaXRzKG91dCwgcCwgbGxtW2xlbl0pLCBwICs9IGxjdFtsZW5dO1xuICAgICAgICAgICAgICAgIGlmIChsZW4gPiAxNSlcbiAgICAgICAgICAgICAgICAgICAgd2JpdHMob3V0LCBwLCAoY2xjdFtpXSA+Pj4gNSkgJiAxMjcpLCBwICs9IGNsY3RbaV0gPj4+IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsbSA9IGZsbSwgbGwgPSBmbHQsIGRtID0gZmRtLCBkbCA9IGZkdDtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaTsgKytpKSB7XG4gICAgICAgIGlmIChzeW1zW2ldID4gMjU1KSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gKHN5bXNbaV0gPj4+IDE4KSAmIDMxO1xuICAgICAgICAgICAgd2JpdHMxNihvdXQsIHAsIGxtW2xlbiArIDI1N10pLCBwICs9IGxsW2xlbiArIDI1N107XG4gICAgICAgICAgICBpZiAobGVuID4gNylcbiAgICAgICAgICAgICAgICB3Yml0cyhvdXQsIHAsIChzeW1zW2ldID4+PiAyMykgJiAzMSksIHAgKz0gZmxlYltsZW5dO1xuICAgICAgICAgICAgdmFyIGRzdCA9IHN5bXNbaV0gJiAzMTtcbiAgICAgICAgICAgIHdiaXRzMTYob3V0LCBwLCBkbVtkc3RdKSwgcCArPSBkbFtkc3RdO1xuICAgICAgICAgICAgaWYgKGRzdCA+IDMpXG4gICAgICAgICAgICAgICAgd2JpdHMxNihvdXQsIHAsIChzeW1zW2ldID4+PiA1KSAmIDgxOTEpLCBwICs9IGZkZWJbZHN0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdiaXRzMTYob3V0LCBwLCBsbVtzeW1zW2ldXSksIHAgKz0gbGxbc3ltc1tpXV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2JpdHMxNihvdXQsIHAsIGxtWzI1Nl0pO1xuICAgIHJldHVybiBwICsgbGxbMjU2XTtcbn07XG4vLyBkZWZsYXRlIG9wdGlvbnMgKG5pY2UgPDwgMTMpIHwgY2hhaW5cbnZhciBkZW8gPSAvKiNfX1BVUkVfXyovIG5ldyB1MzIoWzY1NTQwLCAxMzEwODAsIDEzMTA4OCwgMTMxMTA0LCAyNjIxNzYsIDEwNDg3MDQsIDEwNDg4MzIsIDIxMTQ1NjAsIDIxMTc2MzJdKTtcbi8vIGVtcHR5XG52YXIgZXQgPSAvKiNfX1BVUkVfXyovIG5ldyB1OCgwKTtcbi8vIGNvbXByZXNzZXMgZGF0YSBpbnRvIGEgcmF3IERFRkxBVEUgYnVmZmVyXG52YXIgZGZsdCA9IGZ1bmN0aW9uIChkYXQsIGx2bCwgcGx2bCwgcHJlLCBwb3N0LCBsc3QpIHtcbiAgICB2YXIgcyA9IGRhdC5sZW5ndGg7XG4gICAgdmFyIG8gPSBuZXcgdTgocHJlICsgcyArIDUgKiAoMSArIE1hdGguZmxvb3IocyAvIDcwMDApKSArIHBvc3QpO1xuICAgIC8vIHdyaXRpbmcgdG8gdGhpcyB3cml0ZXMgdG8gdGhlIG91dHB1dCBidWZmZXJcbiAgICB2YXIgdyA9IG8uc3ViYXJyYXkocHJlLCBvLmxlbmd0aCAtIHBvc3QpO1xuICAgIHZhciBwb3MgPSAwO1xuICAgIGlmICghbHZsIHx8IHMgPCA4KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHM7IGkgKz0gNjU1MzUpIHtcbiAgICAgICAgICAgIC8vIGVuZFxuICAgICAgICAgICAgdmFyIGUgPSBpICsgNjU1MzU7XG4gICAgICAgICAgICBpZiAoZSA8IHMpIHtcbiAgICAgICAgICAgICAgICAvLyB3cml0ZSBmdWxsIGJsb2NrXG4gICAgICAgICAgICAgICAgcG9zID0gd2ZibGsodywgcG9zLCBkYXQuc3ViYXJyYXkoaSwgZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd3JpdGUgZmluYWwgYmxvY2tcbiAgICAgICAgICAgICAgICB3W2ldID0gbHN0O1xuICAgICAgICAgICAgICAgIHBvcyA9IHdmYmxrKHcsIHBvcywgZGF0LnN1YmFycmF5KGksIHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIG9wdCA9IGRlb1tsdmwgLSAxXTtcbiAgICAgICAgdmFyIG4gPSBvcHQgPj4+IDEzLCBjID0gb3B0ICYgODE5MTtcbiAgICAgICAgdmFyIG1za18xID0gKDEgPDwgcGx2bCkgLSAxO1xuICAgICAgICAvLyAgICBwcmV2IDItYnl0ZSB2YWwgbWFwICAgIGN1cnIgMi1ieXRlIHZhbCBtYXBcbiAgICAgICAgdmFyIHByZXYgPSBuZXcgdTE2KDMyNzY4KSwgaGVhZCA9IG5ldyB1MTYobXNrXzEgKyAxKTtcbiAgICAgICAgdmFyIGJzMV8xID0gTWF0aC5jZWlsKHBsdmwgLyAzKSwgYnMyXzEgPSAyICogYnMxXzE7XG4gICAgICAgIHZhciBoc2ggPSBmdW5jdGlvbiAoaSkgeyByZXR1cm4gKGRhdFtpXSBeIChkYXRbaSArIDFdIDw8IGJzMV8xKSBeIChkYXRbaSArIDJdIDw8IGJzMl8xKSkgJiBtc2tfMTsgfTtcbiAgICAgICAgLy8gMjQ1NzYgaXMgYW4gYXJiaXRyYXJ5IG51bWJlciBvZiBtYXhpbXVtIHN5bWJvbHMgcGVyIGJsb2NrXG4gICAgICAgIC8vIDQyNCBidWZmZXIgZm9yIGxhc3QgYmxvY2tcbiAgICAgICAgdmFyIHN5bXMgPSBuZXcgdTMyKDI1MDAwKTtcbiAgICAgICAgLy8gbGVuZ3RoL2xpdGVyYWwgZnJlcSAgIGRpc3RhbmNlIGZyZXFcbiAgICAgICAgdmFyIGxmID0gbmV3IHUxNigyODgpLCBkZiA9IG5ldyB1MTYoMzIpO1xuICAgICAgICAvLyAgbC9sY250ICBleGJpdHMgIGluZGV4ICBsL2xpbmQgIHdhaXRkeCAgYml0cG9zXG4gICAgICAgIHZhciBsY18xID0gMCwgZWIgPSAwLCBpID0gMCwgbGkgPSAwLCB3aSA9IDAsIGJzID0gMDtcbiAgICAgICAgZm9yICg7IGkgPCBzOyArK2kpIHtcbiAgICAgICAgICAgIC8vIGhhc2ggdmFsdWVcbiAgICAgICAgICAgIHZhciBodiA9IGhzaChpKTtcbiAgICAgICAgICAgIC8vIGluZGV4IG1vZCAzMjc2OFxuICAgICAgICAgICAgdmFyIGltb2QgPSBpICYgMzI3Njc7XG4gICAgICAgICAgICAvLyBwcmV2aW91cyBpbmRleCB3aXRoIHRoaXMgdmFsdWVcbiAgICAgICAgICAgIHZhciBwaW1vZCA9IGhlYWRbaHZdO1xuICAgICAgICAgICAgcHJldltpbW9kXSA9IHBpbW9kO1xuICAgICAgICAgICAgaGVhZFtodl0gPSBpbW9kO1xuICAgICAgICAgICAgLy8gV2UgYWx3YXlzIHNob3VsZCBtb2RpZnkgaGVhZCBhbmQgcHJldiwgYnV0IG9ubHkgYWRkIHN5bWJvbHMgaWZcbiAgICAgICAgICAgIC8vIHRoaXMgZGF0YSBpcyBub3QgeWV0IHByb2Nlc3NlZCAoXCJ3YWl0XCIgZm9yIHdhaXQgaW5kZXgpXG4gICAgICAgICAgICBpZiAod2kgPD0gaSkge1xuICAgICAgICAgICAgICAgIC8vIGJ5dGVzIHJlbWFpbmluZ1xuICAgICAgICAgICAgICAgIHZhciByZW0gPSBzIC0gaTtcbiAgICAgICAgICAgICAgICBpZiAoKGxjXzEgPiA3MDAwIHx8IGxpID4gMjQ1NzYpICYmIHJlbSA+IDQyMykge1xuICAgICAgICAgICAgICAgICAgICBwb3MgPSB3YmxrKGRhdCwgdywgMCwgc3ltcywgbGYsIGRmLCBlYiwgbGksIGJzLCBpIC0gYnMsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgIGxpID0gbGNfMSA9IGViID0gMCwgYnMgPSBpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDI4NjsgKytqKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGZbal0gPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDMwOyArK2opXG4gICAgICAgICAgICAgICAgICAgICAgICBkZltqXSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICBsZW4gICAgZGlzdCAgIGNoYWluXG4gICAgICAgICAgICAgICAgdmFyIGwgPSAyLCBkID0gMCwgY2hfMSA9IGMsIGRpZiA9IChpbW9kIC0gcGltb2QpICYgMzI3Njc7XG4gICAgICAgICAgICAgICAgaWYgKHJlbSA+IDIgJiYgaHYgPT0gaHNoKGkgLSBkaWYpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhuID0gTWF0aC5taW4obiwgcmVtKSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXhkID0gTWF0aC5taW4oMzI3NjcsIGkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXggcG9zc2libGUgbGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBjYXBwZWQgYXQgZGlmIGJlY2F1c2UgZGVjb21wcmVzc29ycyBpbXBsZW1lbnQgXCJyb2xsaW5nXCIgaW5kZXggcG9wdWxhdGlvblxuICAgICAgICAgICAgICAgICAgICB2YXIgbWwgPSBNYXRoLm1pbigyNTgsIHJlbSk7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChkaWYgPD0gbWF4ZCAmJiAtLWNoXzEgJiYgaW1vZCAhPSBwaW1vZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdFtpICsgbF0gPT0gZGF0W2kgKyBsIC0gZGlmXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBubCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IG5sIDwgbWwgJiYgZGF0W2kgKyBubF0gPT0gZGF0W2kgKyBubCAtIGRpZl07ICsrbmwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmwgPiBsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBubCwgZCA9IGRpZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJlYWsgb3V0IGVhcmx5IHdoZW4gd2UgcmVhY2ggXCJuaWNlXCIgKHdlIGFyZSBzYXRpc2ZpZWQgZW5vdWdoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmwgPiBtYXhuKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vdywgZmluZCB0aGUgcmFyZXN0IDItYnl0ZSBzZXF1ZW5jZSB3aXRoaW4gdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsZW5ndGggb2YgbGl0ZXJhbHMgYW5kIHNlYXJjaCBmb3IgdGhhdCBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNdWNoIGZhc3RlciB0aGFuIGp1c3QgdXNpbmcgdGhlIHN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtbWQgPSBNYXRoLm1pbihkaWYsIG5sIC0gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbW1kOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aSA9IChpIC0gZGlmICsgaiArIDMyNzY4KSAmIDMyNzY3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB0aSA9IHByZXZbdGldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNkID0gKHRpIC0gcHRpICsgMzI3NjgpICYgMzI3Njc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2QgPiBtZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZCA9IGNkLCBwaW1vZCA9IHRpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgdGhlIHByZXZpb3VzIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICBpbW9kID0gcGltb2QsIHBpbW9kID0gcHJldltpbW9kXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZiArPSAoaW1vZCAtIHBpbW9kICsgMzI3NjgpICYgMzI3Njc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZCB3aWxsIGJlIG5vbnplcm8gb25seSB3aGVuIGEgbWF0Y2ggd2FzIGZvdW5kXG4gICAgICAgICAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmUgYm90aCBkaXN0IGFuZCBsZW4gZGF0YSBpbiBvbmUgVWludDMyXG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGlzIGlzIHJlY29nbml6ZWQgYXMgYSBsZW4vZGlzdCB3aXRoIDI4dGggYml0ICgyXjI4KVxuICAgICAgICAgICAgICAgICAgICBzeW1zW2xpKytdID0gMjY4NDM1NDU2IHwgKHJldmZsW2xdIDw8IDE4KSB8IHJldmZkW2RdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGluID0gcmV2ZmxbbF0gJiAzMSwgZGluID0gcmV2ZmRbZF0gJiAzMTtcbiAgICAgICAgICAgICAgICAgICAgZWIgKz0gZmxlYltsaW5dICsgZmRlYltkaW5dO1xuICAgICAgICAgICAgICAgICAgICArK2xmWzI1NyArIGxpbl07XG4gICAgICAgICAgICAgICAgICAgICsrZGZbZGluXTtcbiAgICAgICAgICAgICAgICAgICAgd2kgPSBpICsgbDtcbiAgICAgICAgICAgICAgICAgICAgKytsY18xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3ltc1tsaSsrXSA9IGRhdFtpXTtcbiAgICAgICAgICAgICAgICAgICAgKytsZltkYXRbaV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3MgPSB3YmxrKGRhdCwgdywgbHN0LCBzeW1zLCBsZiwgZGYsIGViLCBsaSwgYnMsIGkgLSBicywgcG9zKTtcbiAgICAgICAgLy8gdGhpcyBpcyB0aGUgZWFzaWVzdCB3YXkgdG8gYXZvaWQgbmVlZGluZyB0byBtYWludGFpbiBzdGF0ZVxuICAgICAgICBpZiAoIWxzdClcbiAgICAgICAgICAgIHBvcyA9IHdmYmxrKHcsIHBvcywgZXQpO1xuICAgIH1cbiAgICByZXR1cm4gc2xjKG8sIDAsIHByZSArIHNoZnQocG9zKSArIHBvc3QpO1xufTtcbi8vIENSQzMyIHRhYmxlXG52YXIgY3JjdCA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdCA9IG5ldyB1MzIoMjU2KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIHZhciBjID0gaSwgayA9IDk7XG4gICAgICAgIHdoaWxlICgtLWspXG4gICAgICAgICAgICBjID0gKChjICYgMSkgJiYgMHhFREI4ODMyMCkgXiAoYyA+Pj4gMSk7XG4gICAgICAgIHRbaV0gPSBjO1xuICAgIH1cbiAgICByZXR1cm4gdDtcbn0pKCk7XG4vLyBDUkMzMlxudmFyIGNyYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYyA9IDB4RkZGRkZGRkY7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcDogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIC8vIGNsb3N1cmVzIGhhdmUgYXdmdWwgcGVyZm9ybWFuY2VcbiAgICAgICAgICAgIHZhciBjciA9IGM7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgY3IgPSBjcmN0WyhjciAmIDI1NSkgXiBkW2ldXSBeIChjciA+Pj4gOCk7XG4gICAgICAgICAgICBjID0gY3I7XG4gICAgICAgIH0sXG4gICAgICAgIGQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGMgXiAweEZGRkZGRkZGOyB9XG4gICAgfTtcbn07XG4vLyBBbGRlcjMyXG52YXIgYWRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGEgPSAxLCBiID0gMDtcbiAgICByZXR1cm4ge1xuICAgICAgICBwOiBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgLy8gY2xvc3VyZXMgaGF2ZSBhd2Z1bCBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgdmFyIG4gPSBhLCBtID0gYjtcbiAgICAgICAgICAgIHZhciBsID0gZC5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSAhPSBsOykge1xuICAgICAgICAgICAgICAgIHZhciBlID0gTWF0aC5taW4oaSArIDU1NTIsIGwpO1xuICAgICAgICAgICAgICAgIGZvciAoOyBpIDwgZTsgKytpKVxuICAgICAgICAgICAgICAgICAgICBuICs9IGRbaV0sIG0gKz0gbjtcbiAgICAgICAgICAgICAgICBuICU9IDY1NTIxLCBtICU9IDY1NTIxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSA9IG4sIGIgPSBtO1xuICAgICAgICB9LFxuICAgICAgICBkOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoKGEgPj4+IDgpIDw8IDE2IHwgKGIgJiAyNTUpIDw8IDggfCAoYiA+Pj4gOCkpICsgKChhICYgMjU1KSA8PCAyMykgKiAyOyB9XG4gICAgfTtcbn07XG47XG4vLyBkZWZsYXRlIHdpdGggb3B0c1xudmFyIGRvcHQgPSBmdW5jdGlvbiAoZGF0LCBvcHQsIHByZSwgcG9zdCwgc3QpIHtcbiAgICByZXR1cm4gZGZsdChkYXQsIG9wdC5sZXZlbCA9PSBudWxsID8gNiA6IG9wdC5sZXZlbCwgb3B0Lm1lbSA9PSBudWxsID8gTWF0aC5jZWlsKE1hdGgubWF4KDgsIE1hdGgubWluKDEzLCBNYXRoLmxvZyhkYXQubGVuZ3RoKSkpICogMS41KSA6ICgxMiArIG9wdC5tZW0pLCBwcmUsIHBvc3QsICFzdCk7XG59O1xuLy8gV2FsbWFydCBvYmplY3Qgc3ByZWFkXG52YXIgbXJnID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgbyA9IHt9O1xuICAgIGZvciAodmFyIGsgaW4gYSlcbiAgICAgICAgb1trXSA9IGFba107XG4gICAgZm9yICh2YXIgayBpbiBiKVxuICAgICAgICBvW2tdID0gYltrXTtcbiAgICByZXR1cm4gbztcbn07XG4vLyB3b3JrZXIgY2xvbmVcbi8vIFRoaXMgaXMgcG9zc2libHkgdGhlIGNyYXppZXN0IHBhcnQgb2YgdGhlIGVudGlyZSBjb2RlYmFzZSwgZGVzcGl0ZSBob3cgc2ltcGxlIGl0IG1heSBzZWVtLlxuLy8gVGhlIG9ubHkgcGFyYW1ldGVyIHRvIHRoaXMgZnVuY3Rpb24gaXMgYSBjbG9zdXJlIHRoYXQgcmV0dXJucyBhbiBhcnJheSBvZiB2YXJpYWJsZXMgb3V0c2lkZSBvZiB0aGUgZnVuY3Rpb24gc2NvcGUuXG4vLyBXZSdyZSBnb2luZyB0byB0cnkgdG8gZmlndXJlIG91dCB0aGUgdmFyaWFibGUgbmFtZXMgdXNlZCBpbiB0aGUgY2xvc3VyZSBhcyBzdHJpbmdzIGJlY2F1c2UgdGhhdCBpcyBjcnVjaWFsIGZvciB3b3JrZXJpemF0aW9uLlxuLy8gV2Ugd2lsbCByZXR1cm4gYW4gb2JqZWN0IG1hcHBpbmcgb2YgdHJ1ZSB2YXJpYWJsZSBuYW1lIHRvIHZhbHVlIChiYXNpY2FsbHksIHRoZSBjdXJyZW50IHNjb3BlIGFzIGEgSlMgb2JqZWN0KS5cbi8vIFRoZSByZWFzb24gd2UgY2FuJ3QganVzdCB1c2UgdGhlIG9yaWdpbmFsIHZhcmlhYmxlIG5hbWVzIGlzIG1pbmlmaWVycyBtYW5nbGluZyB0aGUgdG9wbGV2ZWwgc2NvcGUuXG4vLyBUaGlzIHRvb2sgbWUgdGhyZWUgd2Vla3MgdG8gZmlndXJlIG91dCBob3cgdG8gZG8uXG52YXIgd2NsbiA9IGZ1bmN0aW9uIChmbiwgZm5TdHIsIHRkKSB7XG4gICAgdmFyIGR0ID0gZm4oKTtcbiAgICB2YXIgc3QgPSBmbi50b1N0cmluZygpO1xuICAgIHZhciBrcyA9IHN0LnNsaWNlKHN0LmluZGV4T2YoJ1snKSArIDEsIHN0Lmxhc3RJbmRleE9mKCddJykpLnJlcGxhY2UoLyAvZywgJycpLnNwbGl0KCcsJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkdC5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgdiA9IGR0W2ldLCBrID0ga3NbaV07XG4gICAgICAgIGlmICh0eXBlb2YgdiA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBmblN0ciArPSAnOycgKyBrICsgJz0nO1xuICAgICAgICAgICAgdmFyIHN0XzEgPSB2LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAodi5wcm90b3R5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyBmb3IgZ2xvYmFsIG9iamVjdHNcbiAgICAgICAgICAgICAgICBpZiAoc3RfMS5pbmRleE9mKCdbbmF0aXZlIGNvZGVdJykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwSW5kID0gc3RfMS5pbmRleE9mKCcgJywgOCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICBmblN0ciArPSBzdF8xLnNsaWNlKHNwSW5kLCBzdF8xLmluZGV4T2YoJygnLCBzcEluZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm5TdHIgKz0gc3RfMTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCBpbiB2LnByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuU3RyICs9ICc7JyArIGsgKyAnLnByb3RvdHlwZS4nICsgdCArICc9JyArIHYucHJvdG90eXBlW3RdLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGZuU3RyICs9IHN0XzE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGRba10gPSB2O1xuICAgIH1cbiAgICByZXR1cm4gW2ZuU3RyLCB0ZF07XG59O1xudmFyIGNoID0gW107XG4vLyBjbG9uZSBidWZzXG52YXIgY2JmcyA9IGZ1bmN0aW9uICh2KSB7XG4gICAgdmFyIHRsID0gW107XG4gICAgZm9yICh2YXIgayBpbiB2KSB7XG4gICAgICAgIGlmICh2W2tdIGluc3RhbmNlb2YgdTggfHwgdltrXSBpbnN0YW5jZW9mIHUxNiB8fCB2W2tdIGluc3RhbmNlb2YgdTMyKVxuICAgICAgICAgICAgdGwucHVzaCgodltrXSA9IG5ldyB2W2tdLmNvbnN0cnVjdG9yKHZba10pKS5idWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gdGw7XG59O1xuLy8gdXNlIGEgd29ya2VyIHRvIGV4ZWN1dGUgY29kZVxudmFyIHdya3IgPSBmdW5jdGlvbiAoZm5zLCBpbml0LCBpZCwgY2IpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFjaFtpZF0pIHtcbiAgICAgICAgdmFyIGZuU3RyID0gJycsIHRkXzEgPSB7fSwgbSA9IGZucy5sZW5ndGggLSAxO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG07ICsraSlcbiAgICAgICAgICAgIF9hID0gd2NsbihmbnNbaV0sIGZuU3RyLCB0ZF8xKSwgZm5TdHIgPSBfYVswXSwgdGRfMSA9IF9hWzFdO1xuICAgICAgICBjaFtpZF0gPSB3Y2xuKGZuc1ttXSwgZm5TdHIsIHRkXzEpO1xuICAgIH1cbiAgICB2YXIgdGQgPSBtcmcoe30sIGNoW2lkXVsxXSk7XG4gICAgcmV0dXJuIHdrKGNoW2lkXVswXSArICc7b25tZXNzYWdlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgayBpbiBlLmRhdGEpc2VsZltrXT1lLmRhdGFba107b25tZXNzYWdlPScgKyBpbml0LnRvU3RyaW5nKCkgKyAnfScsIGlkLCB0ZCwgY2Jmcyh0ZCksIGNiKTtcbn07XG4vLyBiYXNlIGFzeW5jIGluZmxhdGUgZm5cbnZhciBiSW5mbHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbdTgsIHUxNiwgdTMyLCBmbGViLCBmZGViLCBjbGltLCBmbCwgZmQsIGZscm0sIGZkcm0sIHJldiwgaE1hcCwgbWF4LCBiaXRzLCBiaXRzMTYsIHNoZnQsIHNsYywgaW5mbHQsIGluZmxhdGVTeW5jLCBwYmYsIGd1OF07IH07XG52YXIgYkRmbHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbdTgsIHUxNiwgdTMyLCBmbGViLCBmZGViLCBjbGltLCByZXZmbCwgcmV2ZmQsIGZsbSwgZmx0LCBmZG0sIGZkdCwgcmV2LCBkZW8sIGV0LCBoTWFwLCB3Yml0cywgd2JpdHMxNiwgaFRyZWUsIGxuLCBsYywgY2xlbiwgd2ZibGssIHdibGssIHNoZnQsIHNsYywgZGZsdCwgZG9wdCwgZGVmbGF0ZVN5bmMsIHBiZl07IH07XG4vLyBnemlwIGV4dHJhXG52YXIgZ3plID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW2d6aCwgZ3pobCwgd2J5dGVzLCBjcmMsIGNyY3RdOyB9O1xuLy8gZ3VuemlwIGV4dHJhXG52YXIgZ3V6ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtnenMsIGd6bF07IH07XG4vLyB6bGliIGV4dHJhXG52YXIgemxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW3psaCwgd2J5dGVzLCBhZGxlcl07IH07XG4vLyB1bnpsaWIgZXh0cmFcbnZhciB6dWxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW3psdl07IH07XG4vLyBwb3N0IGJ1ZlxudmFyIHBiZiA9IGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIHBvc3RNZXNzYWdlKG1zZywgW21zZy5idWZmZXJdKTsgfTtcbi8vIGdldCB1OFxudmFyIGd1OCA9IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIG8uc2l6ZSAmJiBuZXcgdTgoby5zaXplKTsgfTtcbi8vIGFzeW5jIGhlbHBlclxudmFyIGNiaWZ5ID0gZnVuY3Rpb24gKGRhdCwgb3B0cywgZm5zLCBpbml0LCBpZCwgY2IpIHtcbiAgICB2YXIgdyA9IHdya3IoZm5zLCBpbml0LCBpZCwgZnVuY3Rpb24gKGVyciwgZGF0KSB7XG4gICAgICAgIHcudGVybWluYXRlKCk7XG4gICAgICAgIGNiKGVyciwgZGF0KTtcbiAgICB9KTtcbiAgICBpZiAoIW9wdHMuY29uc3VtZSlcbiAgICAgICAgZGF0ID0gbmV3IHU4KGRhdCk7XG4gICAgdy5wb3N0TWVzc2FnZShbZGF0LCBvcHRzXSwgW2RhdC5idWZmZXJdKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyB3LnRlcm1pbmF0ZSgpOyB9O1xufTtcbi8vIGF1dG8gc3RyZWFtXG52YXIgYXN0cm0gPSBmdW5jdGlvbiAoc3RybSkge1xuICAgIHN0cm0ub25kYXRhID0gZnVuY3Rpb24gKGRhdCwgZmluYWwpIHsgcmV0dXJuIHBvc3RNZXNzYWdlKFtkYXQsIGZpbmFsXSwgW2RhdC5idWZmZXJdKTsgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2KSB7IHJldHVybiBzdHJtLnB1c2goZXYuZGF0YVswXSwgZXYuZGF0YVsxXSk7IH07XG59O1xuLy8gYXN5bmMgc3RyZWFtIGF0dGFjaFxudmFyIGFzdHJtaWZ5ID0gZnVuY3Rpb24gKGZucywgc3RybSwgb3B0cywgaW5pdCwgaWQpIHtcbiAgICB2YXIgdDtcbiAgICB2YXIgdyA9IHdya3IoZm5zLCBpbml0LCBpZCwgZnVuY3Rpb24gKGVyciwgZGF0KSB7XG4gICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICB3LnRlcm1pbmF0ZSgpLCBzdHJtLm9uZGF0YS5jYWxsKHN0cm0sIGVycik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRhdFsxXSlcbiAgICAgICAgICAgICAgICB3LnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgc3RybS5vbmRhdGEuY2FsbChzdHJtLCBlcnIsIGRhdFswXSwgZGF0WzFdKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHcucG9zdE1lc3NhZ2Uob3B0cyk7XG4gICAgc3RybS5wdXNoID0gZnVuY3Rpb24gKGQsIGYpIHtcbiAgICAgICAgaWYgKHQpXG4gICAgICAgICAgICB0aHJvdyAnc3RyZWFtIGZpbmlzaGVkJztcbiAgICAgICAgaWYgKCFzdHJtLm9uZGF0YSlcbiAgICAgICAgICAgIHRocm93ICdubyBzdHJlYW0gaGFuZGxlcic7XG4gICAgICAgIHcucG9zdE1lc3NhZ2UoW2QsIHQgPSBmXSwgW2QuYnVmZmVyXSk7XG4gICAgfTtcbiAgICBzdHJtLnRlcm1pbmF0ZSA9IGZ1bmN0aW9uICgpIHsgdy50ZXJtaW5hdGUoKTsgfTtcbn07XG4vLyByZWFkIDIgYnl0ZXNcbnZhciBiMiA9IGZ1bmN0aW9uIChkLCBiKSB7IHJldHVybiBkW2JdIHwgKGRbYiArIDFdIDw8IDgpOyB9O1xuLy8gcmVhZCA0IGJ5dGVzXG52YXIgYjQgPSBmdW5jdGlvbiAoZCwgYikgeyByZXR1cm4gKGRbYl0gfCAoZFtiICsgMV0gPDwgOCkgfCAoZFtiICsgMl0gPDwgMTYpKSArIChkW2IgKyAzXSA8PCAyMykgKiAyOyB9O1xuLy8gd3JpdGUgYnl0ZXNcbnZhciB3Ynl0ZXMgPSBmdW5jdGlvbiAoZCwgYiwgdikge1xuICAgIGZvciAoOyB2OyArK2IpXG4gICAgICAgIGRbYl0gPSB2LCB2ID4+Pj0gODtcbn07XG4vLyBnemlwIGhlYWRlclxudmFyIGd6aCA9IGZ1bmN0aW9uIChjLCBvKSB7XG4gICAgdmFyIGZuID0gby5maWxlbmFtZTtcbiAgICBjWzBdID0gMzEsIGNbMV0gPSAxMzksIGNbMl0gPSA4LCBjWzhdID0gby5sZXZlbCA8IDIgPyA0IDogby5sZXZlbCA9PSA5ID8gMiA6IDAsIGNbOV0gPSAzOyAvLyBhc3N1bWUgVW5peFxuICAgIGlmIChvLm10aW1lICE9IDApXG4gICAgICAgIHdieXRlcyhjLCA0LCBNYXRoLmZsb29yKG5ldyBEYXRlKG8ubXRpbWUgfHwgRGF0ZS5ub3coKSkgLyAxMDAwKSk7XG4gICAgaWYgKGZuKSB7XG4gICAgICAgIGNbM10gPSA4O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBmbi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIGNbaSArIDEwXSA9IGZuLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxufTtcbi8vIGd6aXAgZm9vdGVyOiAtOCB0byAtNCA9IENSQywgLTQgdG8gLTAgaXMgbGVuZ3RoXG4vLyBnemlwIHN0YXJ0XG52YXIgZ3pzID0gZnVuY3Rpb24gKGQpIHtcbiAgICBpZiAoZFswXSAhPSAzMSB8fCBkWzFdICE9IDEzOSB8fCBkWzJdICE9IDgpXG4gICAgICAgIHRocm93ICdpbnZhbGlkIGd6aXAgZGF0YSc7XG4gICAgdmFyIGZsZyA9IGRbM107XG4gICAgdmFyIHN0ID0gMTA7XG4gICAgaWYgKGZsZyAmIDQpXG4gICAgICAgIHN0ICs9IGRbMTBdIHwgKGRbMTFdIDw8IDgpICsgMjtcbiAgICBmb3IgKHZhciB6cyA9IChmbGcgPj4gMyAmIDEpICsgKGZsZyA+PiA0ICYgMSk7IHpzID4gMDsgenMgLT0gIWRbc3QrK10pXG4gICAgICAgIDtcbiAgICByZXR1cm4gc3QgKyAoZmxnICYgMik7XG59O1xuLy8gZ3ppcCBsZW5ndGhcbnZhciBnemwgPSBmdW5jdGlvbiAoZCkge1xuICAgIHZhciBsID0gZC5sZW5ndGg7XG4gICAgcmV0dXJuIChkW2wgLSA0XSB8IGRbbCAtIDNdIDw8IDggfCBkW2wgLSAyXSA8PCAxNikgKyAoMiAqIChkW2wgLSAxXSA8PCAyMykpO1xufTtcbi8vIGd6aXAgaGVhZGVyIGxlbmd0aFxudmFyIGd6aGwgPSBmdW5jdGlvbiAobykgeyByZXR1cm4gMTAgKyAoKG8uZmlsZW5hbWUgJiYgKG8uZmlsZW5hbWUubGVuZ3RoICsgMSkpIHx8IDApOyB9O1xuLy8gemxpYiBoZWFkZXJcbnZhciB6bGggPSBmdW5jdGlvbiAoYywgbykge1xuICAgIHZhciBsdiA9IG8ubGV2ZWwsIGZsID0gbHYgPT0gMCA/IDAgOiBsdiA8IDYgPyAxIDogbHYgPT0gOSA/IDMgOiAyO1xuICAgIGNbMF0gPSAxMjAsIGNbMV0gPSAoZmwgPDwgNikgfCAoZmwgPyAoMzIgLSAyICogZmwpIDogMSk7XG59O1xuLy8gemxpYiB2YWxpZFxudmFyIHpsdiA9IGZ1bmN0aW9uIChkKSB7XG4gICAgaWYgKChkWzBdICYgMTUpICE9IDggfHwgKGRbMF0gPj4+IDQpID4gNyB8fCAoKGRbMF0gPDwgOCB8IGRbMV0pICUgMzEpKVxuICAgICAgICB0aHJvdyAnaW52YWxpZCB6bGliIGRhdGEnO1xuICAgIGlmIChkWzFdICYgMzIpXG4gICAgICAgIHRocm93ICdpbnZhbGlkIHpsaWIgZGF0YTogcHJlc2V0IGRpY3Rpb25hcmllcyBub3Qgc3VwcG9ydGVkJztcbn07XG5mdW5jdGlvbiBBc3luY0NtcFN0cm0ob3B0cywgY2IpIHtcbiAgICBpZiAoIWNiICYmIHR5cGVvZiBvcHRzID09ICdmdW5jdGlvbicpXG4gICAgICAgIGNiID0gb3B0cywgb3B0cyA9IHt9O1xuICAgIHRoaXMub25kYXRhID0gY2I7XG4gICAgcmV0dXJuIG9wdHM7XG59XG4vLyB6bGliIGZvb3RlcjogLTQgdG8gLTAgaXMgQWRsZXIzMlxuLyoqXG4gKiBTdHJlYW1pbmcgREVGTEFURSBjb21wcmVzc2lvblxuICovXG52YXIgRGVmbGF0ZSA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZWZsYXRlKG9wdHMsIGNiKSB7XG4gICAgICAgIGlmICghY2IgJiYgdHlwZW9mIG9wdHMgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGNiID0gb3B0cywgb3B0cyA9IHt9O1xuICAgICAgICB0aGlzLm9uZGF0YSA9IGNiO1xuICAgICAgICB0aGlzLm8gPSBvcHRzIHx8IHt9O1xuICAgIH1cbiAgICBEZWZsYXRlLnByb3RvdHlwZS5wID0gZnVuY3Rpb24gKGMsIGYpIHtcbiAgICAgICAgdGhpcy5vbmRhdGEoZG9wdChjLCB0aGlzLm8sIDAsIDAsICFmKSwgZik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQdXNoZXMgYSBjaHVuayB0byBiZSBkZWZsYXRlZFxuICAgICAqIEBwYXJhbSBjaHVuayBUaGUgY2h1bmsgdG8gcHVzaFxuICAgICAqIEBwYXJhbSBmaW5hbCBXaGV0aGVyIHRoaXMgaXMgdGhlIGxhc3QgY2h1bmtcbiAgICAgKi9cbiAgICBEZWZsYXRlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBmaW5hbCkge1xuICAgICAgICBpZiAodGhpcy5kKVxuICAgICAgICAgICAgdGhyb3cgJ3N0cmVhbSBmaW5pc2hlZCc7XG4gICAgICAgIGlmICghdGhpcy5vbmRhdGEpXG4gICAgICAgICAgICB0aHJvdyAnbm8gc3RyZWFtIGhhbmRsZXInO1xuICAgICAgICB0aGlzLmQgPSBmaW5hbDtcbiAgICAgICAgdGhpcy5wKGNodW5rLCBmaW5hbCB8fCBmYWxzZSk7XG4gICAgfTtcbiAgICByZXR1cm4gRGVmbGF0ZTtcbn0oKSk7XG5leHBvcnQgeyBEZWZsYXRlIH07XG4vKipcbiAqIEFzeW5jaHJvbm91cyBzdHJlYW1pbmcgREVGTEFURSBjb21wcmVzc2lvblxuICovXG52YXIgQXN5bmNEZWZsYXRlID0gLyojX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFzeW5jRGVmbGF0ZShvcHRzLCBjYikge1xuICAgICAgICBhc3RybWlmeShbXG4gICAgICAgICAgICBiRGZsdCxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFthc3RybSwgRGVmbGF0ZV07IH1cbiAgICAgICAgXSwgdGhpcywgQXN5bmNDbXBTdHJtLmNhbGwodGhpcywgb3B0cywgY2IpLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzdHJtID0gbmV3IERlZmxhdGUoZXYuZGF0YSk7XG4gICAgICAgICAgICBvbm1lc3NhZ2UgPSBhc3RybShzdHJtKTtcbiAgICAgICAgfSwgNik7XG4gICAgfVxuICAgIHJldHVybiBBc3luY0RlZmxhdGU7XG59KCkpO1xuZXhwb3J0IHsgQXN5bmNEZWZsYXRlIH07XG5leHBvcnQgZnVuY3Rpb24gZGVmbGF0ZShkYXRhLCBvcHRzLCBjYikge1xuICAgIGlmICghY2IpXG4gICAgICAgIGNiID0gb3B0cywgb3B0cyA9IHt9O1xuICAgIGlmICh0eXBlb2YgY2IgIT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgJ25vIGNhbGxiYWNrJztcbiAgICByZXR1cm4gY2JpZnkoZGF0YSwgb3B0cywgW1xuICAgICAgICBiRGZsdCxcbiAgICBdLCBmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIHBiZihkZWZsYXRlU3luYyhldi5kYXRhWzBdLCBldi5kYXRhWzFdKSk7IH0sIDAsIGNiKTtcbn1cbi8qKlxuICogQ29tcHJlc3NlcyBkYXRhIHdpdGggREVGTEFURSB3aXRob3V0IGFueSB3cmFwcGVyXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBjb21wcmVzc1xuICogQHBhcmFtIG9wdHMgVGhlIGNvbXByZXNzaW9uIG9wdGlvbnNcbiAqIEByZXR1cm5zIFRoZSBkZWZsYXRlZCB2ZXJzaW9uIG9mIHRoZSBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZsYXRlU3luYyhkYXRhLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICByZXR1cm4gZG9wdChkYXRhLCBvcHRzLCAwLCAwKTtcbn1cbi8qKlxuICogU3RyZWFtaW5nIERFRkxBVEUgZGVjb21wcmVzc2lvblxuICovXG52YXIgSW5mbGF0ZSA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluZmxhdGlvbiBzdHJlYW1cbiAgICAgKiBAcGFyYW0gY2IgVGhlIGNhbGxiYWNrIHRvIGNhbGwgd2hlbmV2ZXIgZGF0YSBpcyBpbmZsYXRlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEluZmxhdGUoY2IpIHtcbiAgICAgICAgdGhpcy5zID0ge307XG4gICAgICAgIHRoaXMucCA9IG5ldyB1OCgwKTtcbiAgICAgICAgdGhpcy5vbmRhdGEgPSBjYjtcbiAgICB9XG4gICAgSW5mbGF0ZS5wcm90b3R5cGUuZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmICh0aGlzLmQpXG4gICAgICAgICAgICB0aHJvdyAnc3RyZWFtIGZpbmlzaGVkJztcbiAgICAgICAgaWYgKCF0aGlzLm9uZGF0YSlcbiAgICAgICAgICAgIHRocm93ICdubyBzdHJlYW0gaGFuZGxlcic7XG4gICAgICAgIHZhciBsID0gdGhpcy5wLmxlbmd0aDtcbiAgICAgICAgdmFyIG4gPSBuZXcgdTgobCArIGMubGVuZ3RoKTtcbiAgICAgICAgbi5zZXQodGhpcy5wKSwgbi5zZXQoYywgbCksIHRoaXMucCA9IG47XG4gICAgfTtcbiAgICBJbmZsYXRlLnByb3RvdHlwZS5jID0gZnVuY3Rpb24gKGZpbmFsKSB7XG4gICAgICAgIHRoaXMuZCA9IHRoaXMucy5pID0gZmluYWwgfHwgZmFsc2U7XG4gICAgICAgIHZhciBidHMgPSB0aGlzLnMuYjtcbiAgICAgICAgdmFyIGR0ID0gaW5mbHQodGhpcy5wLCB0aGlzLm8sIHRoaXMucyk7XG4gICAgICAgIHRoaXMub25kYXRhKHNsYyhkdCwgYnRzLCB0aGlzLnMuYiksIHRoaXMuZCk7XG4gICAgICAgIHRoaXMubyA9IHNsYyhkdCwgdGhpcy5zLmIgLSAzMjc2OCksIHRoaXMucy5iID0gdGhpcy5vLmxlbmd0aDtcbiAgICAgICAgdGhpcy5wID0gc2xjKHRoaXMucCwgKHRoaXMucy5wIC8gOCkgPj4gMCksIHRoaXMucy5wICY9IDc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQdXNoZXMgYSBjaHVuayB0byBiZSBpbmZsYXRlZFxuICAgICAqIEBwYXJhbSBjaHVuayBUaGUgY2h1bmsgdG8gcHVzaFxuICAgICAqIEBwYXJhbSBmaW5hbCBXaGV0aGVyIHRoaXMgaXMgdGhlIGZpbmFsIGNodW5rXG4gICAgICovXG4gICAgSW5mbGF0ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZmluYWwpIHtcbiAgICAgICAgdGhpcy5lKGNodW5rKSwgdGhpcy5jKGZpbmFsKTtcbiAgICB9O1xuICAgIHJldHVybiBJbmZsYXRlO1xufSgpKTtcbmV4cG9ydCB7IEluZmxhdGUgfTtcbi8qKlxuICogQXN5bmNocm9ub3VzIHN0cmVhbWluZyBERUZMQVRFIGRlY29tcHJlc3Npb25cbiAqL1xudmFyIEFzeW5jSW5mbGF0ZSA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFzeW5jaHJvbm91cyBpbmZsYXRpb24gc3RyZWFtXG4gICAgICogQHBhcmFtIGNiIFRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW5ldmVyIGRhdGEgaXMgZGVmbGF0ZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBc3luY0luZmxhdGUoY2IpIHtcbiAgICAgICAgdGhpcy5vbmRhdGEgPSBjYjtcbiAgICAgICAgYXN0cm1pZnkoW1xuICAgICAgICAgICAgYkluZmx0LFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gW2FzdHJtLCBJbmZsYXRlXTsgfVxuICAgICAgICBdLCB0aGlzLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RybSA9IG5ldyBJbmZsYXRlKCk7XG4gICAgICAgICAgICBvbm1lc3NhZ2UgPSBhc3RybShzdHJtKTtcbiAgICAgICAgfSwgNyk7XG4gICAgfVxuICAgIHJldHVybiBBc3luY0luZmxhdGU7XG59KCkpO1xuZXhwb3J0IHsgQXN5bmNJbmZsYXRlIH07XG5leHBvcnQgZnVuY3Rpb24gaW5mbGF0ZShkYXRhLCBvcHRzLCBjYikge1xuICAgIGlmICghY2IpXG4gICAgICAgIGNiID0gb3B0cywgb3B0cyA9IHt9O1xuICAgIGlmICh0eXBlb2YgY2IgIT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgJ25vIGNhbGxiYWNrJztcbiAgICByZXR1cm4gY2JpZnkoZGF0YSwgb3B0cywgW1xuICAgICAgICBiSW5mbHRcbiAgICBdLCBmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIHBiZihpbmZsYXRlU3luYyhldi5kYXRhWzBdLCBndTgoZXYuZGF0YVsxXSkpKTsgfSwgMSwgY2IpO1xufVxuLyoqXG4gKiBFeHBhbmRzIERFRkxBVEUgZGF0YSB3aXRoIG5vIHdyYXBwZXJcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGRlY29tcHJlc3NcbiAqIEBwYXJhbSBvdXQgV2hlcmUgdG8gd3JpdGUgdGhlIGRhdGEuIFNhdmVzIG1lbW9yeSBpZiB5b3Uga25vdyB0aGUgZGVjb21wcmVzc2VkIHNpemUgYW5kIHByb3ZpZGUgYW4gb3V0cHV0IGJ1ZmZlciBvZiB0aGF0IGxlbmd0aC5cbiAqIEByZXR1cm5zIFRoZSBkZWNvbXByZXNzZWQgdmVyc2lvbiBvZiB0aGUgZGF0YVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5mbGF0ZVN5bmMoZGF0YSwgb3V0KSB7XG4gICAgcmV0dXJuIGluZmx0KGRhdGEsIG91dCk7XG59XG4vLyBiZWZvcmUgeW91IHllbGwgYXQgbWUgZm9yIG5vdCBqdXN0IHVzaW5nIGV4dGVuZHMsIG15IHJlYXNvbiBpcyB0aGF0IFRTIGluaGVyaXRhbmNlIGlzIGhhcmQgdG8gd29ya2VyaXplLlxuLyoqXG4gKiBTdHJlYW1pbmcgR1pJUCBjb21wcmVzc2lvblxuICovXG52YXIgR3ppcCA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHemlwKG9wdHMsIGNiKSB7XG4gICAgICAgIHRoaXMuYyA9IGNyYygpO1xuICAgICAgICB0aGlzLmwgPSAwO1xuICAgICAgICB0aGlzLnYgPSAxO1xuICAgICAgICBEZWZsYXRlLmNhbGwodGhpcywgb3B0cywgY2IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQdXNoZXMgYSBjaHVuayB0byBiZSBHWklQcGVkXG4gICAgICogQHBhcmFtIGNodW5rIFRoZSBjaHVuayB0byBwdXNoXG4gICAgICogQHBhcmFtIGZpbmFsIFdoZXRoZXIgdGhpcyBpcyB0aGUgbGFzdCBjaHVua1xuICAgICAqL1xuICAgIEd6aXAucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGZpbmFsKSB7XG4gICAgICAgIERlZmxhdGUucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZmluYWwpO1xuICAgIH07XG4gICAgR3ppcC5wcm90b3R5cGUucCA9IGZ1bmN0aW9uIChjLCBmKSB7XG4gICAgICAgIHRoaXMuYy5wKGMpO1xuICAgICAgICB0aGlzLmwgKz0gYy5sZW5ndGg7XG4gICAgICAgIHZhciByYXcgPSBkb3B0KGMsIHRoaXMubywgdGhpcy52ICYmIGd6aGwodGhpcy5vKSwgZiAmJiA4LCAhZik7XG4gICAgICAgIGlmICh0aGlzLnYpXG4gICAgICAgICAgICBnemgocmF3LCB0aGlzLm8pLCB0aGlzLnYgPSAwO1xuICAgICAgICBpZiAoZilcbiAgICAgICAgICAgIHdieXRlcyhyYXcsIHJhdy5sZW5ndGggLSA4LCB0aGlzLmMuZCgpKSwgd2J5dGVzKHJhdywgcmF3Lmxlbmd0aCAtIDQsIHRoaXMubCk7XG4gICAgICAgIHRoaXMub25kYXRhKHJhdywgZik7XG4gICAgfTtcbiAgICByZXR1cm4gR3ppcDtcbn0oKSk7XG5leHBvcnQgeyBHemlwIH07XG4vKipcbiAqIEFzeW5jaHJvbm91cyBzdHJlYW1pbmcgR1pJUCBjb21wcmVzc2lvblxuICovXG52YXIgQXN5bmNHemlwID0gLyojX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFzeW5jR3ppcChvcHRzLCBjYikge1xuICAgICAgICBhc3RybWlmeShbXG4gICAgICAgICAgICBiRGZsdCxcbiAgICAgICAgICAgIGd6ZSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFthc3RybSwgRGVmbGF0ZSwgR3ppcF07IH1cbiAgICAgICAgXSwgdGhpcywgQXN5bmNDbXBTdHJtLmNhbGwodGhpcywgb3B0cywgY2IpLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzdHJtID0gbmV3IEd6aXAoZXYuZGF0YSk7XG4gICAgICAgICAgICBvbm1lc3NhZ2UgPSBhc3RybShzdHJtKTtcbiAgICAgICAgfSwgOCk7XG4gICAgfVxuICAgIHJldHVybiBBc3luY0d6aXA7XG59KCkpO1xuZXhwb3J0IHsgQXN5bmNHemlwIH07XG5leHBvcnQgZnVuY3Rpb24gZ3ppcChkYXRhLCBvcHRzLCBjYikge1xuICAgIGlmICghY2IpXG4gICAgICAgIGNiID0gb3B0cywgb3B0cyA9IHt9O1xuICAgIGlmICh0eXBlb2YgY2IgIT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgJ25vIGNhbGxiYWNrJztcbiAgICByZXR1cm4gY2JpZnkoZGF0YSwgb3B0cywgW1xuICAgICAgICBiRGZsdCxcbiAgICAgICAgZ3plLFxuICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBbZ3ppcFN5bmNdOyB9XG4gICAgXSwgZnVuY3Rpb24gKGV2KSB7IHJldHVybiBwYmYoZ3ppcFN5bmMoZXYuZGF0YVswXSwgZXYuZGF0YVsxXSkpOyB9LCAyLCBjYik7XG59XG4vKipcbiAqIENvbXByZXNzZXMgZGF0YSB3aXRoIEdaSVBcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGNvbXByZXNzXG4gKiBAcGFyYW0gb3B0cyBUaGUgY29tcHJlc3Npb24gb3B0aW9uc1xuICogQHJldHVybnMgVGhlIGd6aXBwZWQgdmVyc2lvbiBvZiB0aGUgZGF0YVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ3ppcFN5bmMoZGF0YSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IHt9OyB9XG4gICAgdmFyIGMgPSBjcmMoKSwgbCA9IGRhdGEubGVuZ3RoO1xuICAgIGMucChkYXRhKTtcbiAgICB2YXIgZCA9IGRvcHQoZGF0YSwgb3B0cywgZ3pobChvcHRzKSwgOCksIHMgPSBkLmxlbmd0aDtcbiAgICByZXR1cm4gZ3poKGQsIG9wdHMpLCB3Ynl0ZXMoZCwgcyAtIDgsIGMuZCgpKSwgd2J5dGVzKGQsIHMgLSA0LCBsKSwgZDtcbn1cbi8qKlxuICogU3RyZWFtaW5nIEdaSVAgZGVjb21wcmVzc2lvblxuICovXG52YXIgR3VuemlwID0gLyojX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBHVU5aSVAgc3RyZWFtXG4gICAgICogQHBhcmFtIGNiIFRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW5ldmVyIGRhdGEgaXMgaW5mbGF0ZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBHdW56aXAoY2IpIHtcbiAgICAgICAgdGhpcy52ID0gMTtcbiAgICAgICAgSW5mbGF0ZS5jYWxsKHRoaXMsIGNiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHVzaGVzIGEgY2h1bmsgdG8gYmUgR1VOWklQcGVkXG4gICAgICogQHBhcmFtIGNodW5rIFRoZSBjaHVuayB0byBwdXNoXG4gICAgICogQHBhcmFtIGZpbmFsIFdoZXRoZXIgdGhpcyBpcyB0aGUgbGFzdCBjaHVua1xuICAgICAqL1xuICAgIEd1bnppcC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZmluYWwpIHtcbiAgICAgICAgSW5mbGF0ZS5wcm90b3R5cGUuZS5jYWxsKHRoaXMsIGNodW5rKTtcbiAgICAgICAgaWYgKHRoaXMudikge1xuICAgICAgICAgICAgdmFyIHMgPSBnenModGhpcy5wKTtcbiAgICAgICAgICAgIGlmIChzID49IHRoaXMucC5sZW5ndGggJiYgIWZpbmFsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMucCA9IHRoaXMucC5zdWJhcnJheShzKSwgdGhpcy52ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmluYWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnAubGVuZ3RoIDwgOClcbiAgICAgICAgICAgICAgICB0aHJvdyAnaW52YWxpZCBnemlwIHN0cmVhbSc7XG4gICAgICAgICAgICB0aGlzLnAgPSB0aGlzLnAuc3ViYXJyYXkoMCwgLTgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5lY2Vzc2FyeSB0byBwcmV2ZW50IFRTIGZyb20gdXNpbmcgdGhlIGNsb3N1cmUgdmFsdWVcbiAgICAgICAgLy8gVGhpcyBhbGxvd3MgZm9yIHdvcmtlcml6YXRpb24gdG8gZnVuY3Rpb24gY29ycmVjdGx5XG4gICAgICAgIEluZmxhdGUucHJvdG90eXBlLmMuY2FsbCh0aGlzLCBmaW5hbCk7XG4gICAgfTtcbiAgICByZXR1cm4gR3VuemlwO1xufSgpKTtcbmV4cG9ydCB7IEd1bnppcCB9O1xuLyoqXG4gKiBBc3luY2hyb25vdXMgc3RyZWFtaW5nIEdaSVAgZGVjb21wcmVzc2lvblxuICovXG52YXIgQXN5bmNHdW56aXAgPSAvKiNfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhc3luY2hyb25vdXMgR1VOWklQIHN0cmVhbVxuICAgICAqIEBwYXJhbSBjYiBUaGUgY2FsbGJhY2sgdG8gY2FsbCB3aGVuZXZlciBkYXRhIGlzIGRlZmxhdGVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gQXN5bmNHdW56aXAoY2IpIHtcbiAgICAgICAgdGhpcy5vbmRhdGEgPSBjYjtcbiAgICAgICAgYXN0cm1pZnkoW1xuICAgICAgICAgICAgYkluZmx0LFxuICAgICAgICAgICAgZ3V6ZSxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFthc3RybSwgSW5mbGF0ZSwgR3VuemlwXTsgfVxuICAgICAgICBdLCB0aGlzLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RybSA9IG5ldyBHdW56aXAoKTtcbiAgICAgICAgICAgIG9ubWVzc2FnZSA9IGFzdHJtKHN0cm0pO1xuICAgICAgICB9LCA5KTtcbiAgICB9XG4gICAgcmV0dXJuIEFzeW5jR3VuemlwO1xufSgpKTtcbmV4cG9ydCB7IEFzeW5jR3VuemlwIH07XG5leHBvcnQgZnVuY3Rpb24gZ3VuemlwKGRhdGEsIG9wdHMsIGNiKSB7XG4gICAgaWYgKCFjYilcbiAgICAgICAgY2IgPSBvcHRzLCBvcHRzID0ge307XG4gICAgaWYgKHR5cGVvZiBjYiAhPSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyAnbm8gY2FsbGJhY2snO1xuICAgIHJldHVybiBjYmlmeShkYXRhLCBvcHRzLCBbXG4gICAgICAgIGJJbmZsdCxcbiAgICAgICAgZ3V6ZSxcbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gW2d1bnppcFN5bmNdOyB9XG4gICAgXSwgZnVuY3Rpb24gKGV2KSB7IHJldHVybiBwYmYoZ3VuemlwU3luYyhldi5kYXRhWzBdKSk7IH0sIDMsIGNiKTtcbn1cbi8qKlxuICogRXhwYW5kcyBHWklQIGRhdGFcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGRlY29tcHJlc3NcbiAqIEBwYXJhbSBvdXQgV2hlcmUgdG8gd3JpdGUgdGhlIGRhdGEuIEdaSVAgYWxyZWFkeSBlbmNvZGVzIHRoZSBvdXRwdXQgc2l6ZSwgc28gcHJvdmlkaW5nIHRoaXMgZG9lc24ndCBzYXZlIG1lbW9yeS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvbXByZXNzZWQgdmVyc2lvbiBvZiB0aGUgZGF0YVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ3VuemlwU3luYyhkYXRhLCBvdXQpIHtcbiAgICByZXR1cm4gaW5mbHQoZGF0YS5zdWJhcnJheShnenMoZGF0YSksIC04KSwgb3V0IHx8IG5ldyB1OChnemwoZGF0YSkpKTtcbn1cbi8qKlxuICogU3RyZWFtaW5nIFpsaWIgY29tcHJlc3Npb25cbiAqL1xudmFyIFpsaWIgPSAvKiNfX1BVUkVfXyovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gWmxpYihvcHRzLCBjYikge1xuICAgICAgICB0aGlzLmMgPSBhZGxlcigpO1xuICAgICAgICB0aGlzLnYgPSAxO1xuICAgICAgICBEZWZsYXRlLmNhbGwodGhpcywgb3B0cywgY2IpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQdXNoZXMgYSBjaHVuayB0byBiZSB6bGliYmVkXG4gICAgICogQHBhcmFtIGNodW5rIFRoZSBjaHVuayB0byBwdXNoXG4gICAgICogQHBhcmFtIGZpbmFsIFdoZXRoZXIgdGhpcyBpcyB0aGUgbGFzdCBjaHVua1xuICAgICAqL1xuICAgIFpsaWIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGZpbmFsKSB7XG4gICAgICAgIERlZmxhdGUucHJvdG90eXBlLnB1c2guY2FsbCh0aGlzLCBjaHVuaywgZmluYWwpO1xuICAgIH07XG4gICAgWmxpYi5wcm90b3R5cGUucCA9IGZ1bmN0aW9uIChjLCBmKSB7XG4gICAgICAgIHRoaXMuYy5wKGMpO1xuICAgICAgICB2YXIgcmF3ID0gZG9wdChjLCB0aGlzLm8sIHRoaXMudiAmJiAyLCBmICYmIDQsICFmKTtcbiAgICAgICAgaWYgKHRoaXMudilcbiAgICAgICAgICAgIHpsaChyYXcsIHRoaXMubyksIHRoaXMudiA9IDA7XG4gICAgICAgIGlmIChmKVxuICAgICAgICAgICAgd2J5dGVzKHJhdywgcmF3Lmxlbmd0aCAtIDQsIHRoaXMuYy5kKCkpO1xuICAgICAgICB0aGlzLm9uZGF0YShyYXcsIGYpO1xuICAgIH07XG4gICAgcmV0dXJuIFpsaWI7XG59KCkpO1xuZXhwb3J0IHsgWmxpYiB9O1xuLyoqXG4gKiBBc3luY2hyb25vdXMgc3RyZWFtaW5nIFpsaWIgY29tcHJlc3Npb25cbiAqL1xudmFyIEFzeW5jWmxpYiA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBc3luY1psaWIob3B0cywgY2IpIHtcbiAgICAgICAgYXN0cm1pZnkoW1xuICAgICAgICAgICAgYkRmbHQsXG4gICAgICAgICAgICB6bGUsXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7IHJldHVybiBbYXN0cm0sIERlZmxhdGUsIFpsaWJdOyB9XG4gICAgICAgIF0sIHRoaXMsIEFzeW5jQ21wU3RybS5jYWxsKHRoaXMsIG9wdHMsIGNiKSwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc3RybSA9IG5ldyBabGliKGV2LmRhdGEpO1xuICAgICAgICAgICAgb25tZXNzYWdlID0gYXN0cm0oc3RybSk7XG4gICAgICAgIH0sIDEwKTtcbiAgICB9XG4gICAgcmV0dXJuIEFzeW5jWmxpYjtcbn0oKSk7XG5leHBvcnQgeyBBc3luY1psaWIgfTtcbmV4cG9ydCBmdW5jdGlvbiB6bGliKGRhdGEsIG9wdHMsIGNiKSB7XG4gICAgaWYgKCFjYilcbiAgICAgICAgY2IgPSBvcHRzLCBvcHRzID0ge307XG4gICAgaWYgKHR5cGVvZiBjYiAhPSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyAnbm8gY2FsbGJhY2snO1xuICAgIHJldHVybiBjYmlmeShkYXRhLCBvcHRzLCBbXG4gICAgICAgIGJEZmx0LFxuICAgICAgICB6bGUsXG4gICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFt6bGliU3luY107IH1cbiAgICBdLCBmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIHBiZih6bGliU3luYyhldi5kYXRhWzBdLCBldi5kYXRhWzFdKSk7IH0sIDQsIGNiKTtcbn1cbi8qKlxuICogQ29tcHJlc3MgZGF0YSB3aXRoIFpsaWJcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGNvbXByZXNzXG4gKiBAcGFyYW0gb3B0cyBUaGUgY29tcHJlc3Npb24gb3B0aW9uc1xuICogQHJldHVybnMgVGhlIHpsaWItY29tcHJlc3NlZCB2ZXJzaW9uIG9mIHRoZSBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB6bGliU3luYyhkYXRhLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkgeyBvcHRzID0ge307IH1cbiAgICB2YXIgYSA9IGFkbGVyKCk7XG4gICAgYS5wKGRhdGEpO1xuICAgIHZhciBkID0gZG9wdChkYXRhLCBvcHRzLCAyLCA0KTtcbiAgICByZXR1cm4gemxoKGQsIG9wdHMpLCB3Ynl0ZXMoZCwgZC5sZW5ndGggLSA0LCBhLmQoKSksIGQ7XG59XG4vKipcbiAqIFN0cmVhbWluZyBabGliIGRlY29tcHJlc3Npb25cbiAqL1xudmFyIFVuemxpYiA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgWmxpYiBkZWNvbXByZXNzaW9uIHN0cmVhbVxuICAgICAqIEBwYXJhbSBjYiBUaGUgY2FsbGJhY2sgdG8gY2FsbCB3aGVuZXZlciBkYXRhIGlzIGluZmxhdGVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gVW56bGliKGNiKSB7XG4gICAgICAgIHRoaXMudiA9IDE7XG4gICAgICAgIEluZmxhdGUuY2FsbCh0aGlzLCBjYik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFB1c2hlcyBhIGNodW5rIHRvIGJlIHVuemxpYmJlZFxuICAgICAqIEBwYXJhbSBjaHVuayBUaGUgY2h1bmsgdG8gcHVzaFxuICAgICAqIEBwYXJhbSBmaW5hbCBXaGV0aGVyIHRoaXMgaXMgdGhlIGxhc3QgY2h1bmtcbiAgICAgKi9cbiAgICBVbnpsaWIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGZpbmFsKSB7XG4gICAgICAgIEluZmxhdGUucHJvdG90eXBlLmUuY2FsbCh0aGlzLCBjaHVuayk7XG4gICAgICAgIGlmICh0aGlzLnYpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnAubGVuZ3RoIDwgMiAmJiAhZmluYWwpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5wID0gdGhpcy5wLnN1YmFycmF5KDIpLCB0aGlzLnYgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaW5hbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucC5sZW5ndGggPCA0KVxuICAgICAgICAgICAgICAgIHRocm93ICdpbnZhbGlkIHpsaWIgc3RyZWFtJztcbiAgICAgICAgICAgIHRoaXMucCA9IHRoaXMucC5zdWJhcnJheSgwLCAtNCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbmVjZXNzYXJ5IHRvIHByZXZlbnQgVFMgZnJvbSB1c2luZyB0aGUgY2xvc3VyZSB2YWx1ZVxuICAgICAgICAvLyBUaGlzIGFsbG93cyBmb3Igd29ya2VyaXphdGlvbiB0byBmdW5jdGlvbiBjb3JyZWN0bHlcbiAgICAgICAgSW5mbGF0ZS5wcm90b3R5cGUuYy5jYWxsKHRoaXMsIGZpbmFsKTtcbiAgICB9O1xuICAgIHJldHVybiBVbnpsaWI7XG59KCkpO1xuZXhwb3J0IHsgVW56bGliIH07XG4vKipcbiAqIEFzeW5jaHJvbm91cyBzdHJlYW1pbmcgWmxpYiBkZWNvbXByZXNzaW9uXG4gKi9cbnZhciBBc3luY1VuemxpYiA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFzeW5jaHJvbm91cyBabGliIGRlY29tcHJlc3Npb24gc3RyZWFtXG4gICAgICogQHBhcmFtIGNiIFRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW5ldmVyIGRhdGEgaXMgZGVmbGF0ZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBc3luY1VuemxpYihjYikge1xuICAgICAgICB0aGlzLm9uZGF0YSA9IGNiO1xuICAgICAgICBhc3RybWlmeShbXG4gICAgICAgICAgICBiSW5mbHQsXG4gICAgICAgICAgICB6dWxlLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gW2FzdHJtLCBJbmZsYXRlLCBVbnpsaWJdOyB9XG4gICAgICAgIF0sIHRoaXMsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdHJtID0gbmV3IFVuemxpYigpO1xuICAgICAgICAgICAgb25tZXNzYWdlID0gYXN0cm0oc3RybSk7XG4gICAgICAgIH0sIDExKTtcbiAgICB9XG4gICAgcmV0dXJuIEFzeW5jVW56bGliO1xufSgpKTtcbmV4cG9ydCB7IEFzeW5jVW56bGliIH07XG5leHBvcnQgZnVuY3Rpb24gdW56bGliKGRhdGEsIG9wdHMsIGNiKSB7XG4gICAgaWYgKCFjYilcbiAgICAgICAgY2IgPSBvcHRzLCBvcHRzID0ge307XG4gICAgaWYgKHR5cGVvZiBjYiAhPSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyAnbm8gY2FsbGJhY2snO1xuICAgIHJldHVybiBjYmlmeShkYXRhLCBvcHRzLCBbXG4gICAgICAgIGJJbmZsdCxcbiAgICAgICAgenVsZSxcbiAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gW3VuemxpYlN5bmNdOyB9XG4gICAgXSwgZnVuY3Rpb24gKGV2KSB7IHJldHVybiBwYmYodW56bGliU3luYyhldi5kYXRhWzBdLCBndTgoZXYuZGF0YVsxXSkpKTsgfSwgNSwgY2IpO1xufVxuLyoqXG4gKiBFeHBhbmRzIFpsaWIgZGF0YVxuICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gZGVjb21wcmVzc1xuICogQHBhcmFtIG91dCBXaGVyZSB0byB3cml0ZSB0aGUgZGF0YS4gU2F2ZXMgbWVtb3J5IGlmIHlvdSBrbm93IHRoZSBkZWNvbXByZXNzZWQgc2l6ZSBhbmQgcHJvdmlkZSBhbiBvdXRwdXQgYnVmZmVyIG9mIHRoYXQgbGVuZ3RoLlxuICogQHJldHVybnMgVGhlIGRlY29tcHJlc3NlZCB2ZXJzaW9uIG9mIHRoZSBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnpsaWJTeW5jKGRhdGEsIG91dCkge1xuICAgIHJldHVybiBpbmZsdCgoemx2KGRhdGEpLCBkYXRhLnN1YmFycmF5KDIsIC00KSksIG91dCk7XG59XG4vLyBEZWZhdWx0IGFsZ29yaXRobSBmb3IgY29tcHJlc3Npb24gKHVzZWQgYmVjYXVzZSBoYXZpbmcgYSBrbm93biBvdXRwdXQgc2l6ZSBhbGxvd3MgZmFzdGVyIGRlY29tcHJlc3Npb24pXG5leHBvcnQgeyBnemlwIGFzIGNvbXByZXNzLCBBc3luY0d6aXAgYXMgQXN5bmNDb21wcmVzcyB9O1xuLy8gRGVmYXVsdCBhbGdvcml0aG0gZm9yIGNvbXByZXNzaW9uICh1c2VkIGJlY2F1c2UgaGF2aW5nIGEga25vd24gb3V0cHV0IHNpemUgYWxsb3dzIGZhc3RlciBkZWNvbXByZXNzaW9uKVxuZXhwb3J0IHsgZ3ppcFN5bmMgYXMgY29tcHJlc3NTeW5jLCBHemlwIGFzIENvbXByZXNzIH07XG4vKipcbiAqIFN0cmVhbWluZyBHWklQLCBabGliLCBvciByYXcgREVGTEFURSBkZWNvbXByZXNzaW9uXG4gKi9cbnZhciBEZWNvbXByZXNzID0gLyojX19QVVJFX18qLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkZWNvbXByZXNzaW9uIHN0cmVhbVxuICAgICAqIEBwYXJhbSBjYiBUaGUgY2FsbGJhY2sgdG8gY2FsbCB3aGVuZXZlciBkYXRhIGlzIGRlY29tcHJlc3NlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIERlY29tcHJlc3MoY2IpIHtcbiAgICAgICAgdGhpcy5HID0gR3VuemlwO1xuICAgICAgICB0aGlzLkkgPSBJbmZsYXRlO1xuICAgICAgICB0aGlzLlogPSBVbnpsaWI7XG4gICAgICAgIHRoaXMub25kYXRhID0gY2I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFB1c2hlcyBhIGNodW5rIHRvIGJlIGRlY29tcHJlc3NlZFxuICAgICAqIEBwYXJhbSBjaHVuayBUaGUgY2h1bmsgdG8gcHVzaFxuICAgICAqIEBwYXJhbSBmaW5hbCBXaGV0aGVyIHRoaXMgaXMgdGhlIGxhc3QgY2h1bmtcbiAgICAgKi9cbiAgICBEZWNvbXByZXNzLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBmaW5hbCkge1xuICAgICAgICBpZiAoIXRoaXMub25kYXRhKVxuICAgICAgICAgICAgdGhyb3cgJ25vIHN0cmVhbSBoYW5kbGVyJztcbiAgICAgICAgaWYgKCF0aGlzLnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnAgJiYgdGhpcy5wLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gbmV3IHU4KHRoaXMucC5sZW5ndGggKyBjaHVuay5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIG4uc2V0KHRoaXMucCksIG4uc2V0KGNodW5rLCB0aGlzLnAubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLnAgPSBjaHVuaztcbiAgICAgICAgICAgIGlmICh0aGlzLnAubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgICAgIHZhciBfdGhpc18xID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgY2IgPSBmdW5jdGlvbiAoKSB7IF90aGlzXzEub25kYXRhLmFwcGx5KF90aGlzXzEsIGFyZ3VtZW50cyk7IH07XG4gICAgICAgICAgICAgICAgdGhpcy5zID0gKHRoaXMucFswXSA9PSAzMSAmJiB0aGlzLnBbMV0gPT0gMTM5ICYmIHRoaXMucFsyXSA9PSA4KVxuICAgICAgICAgICAgICAgICAgICA/IG5ldyB0aGlzLkcoY2IpXG4gICAgICAgICAgICAgICAgICAgIDogKCh0aGlzLnBbMF0gJiAxNSkgIT0gOCB8fCAodGhpcy5wWzBdID4+IDQpID4gNyB8fCAoKHRoaXMucFswXSA8PCA4IHwgdGhpcy5wWzFdKSAlIDMxKSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV3IHRoaXMuSShjYilcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IHRoaXMuWihjYik7XG4gICAgICAgICAgICAgICAgdGhpcy5zLnB1c2godGhpcy5wLCBmaW5hbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLnMucHVzaChjaHVuaywgZmluYWwpO1xuICAgIH07XG4gICAgcmV0dXJuIERlY29tcHJlc3M7XG59KCkpO1xuZXhwb3J0IHsgRGVjb21wcmVzcyB9O1xuLyoqXG4gKiBBc3luY2hyb25vdXMgc3RyZWFtaW5nIEdaSVAsIFpsaWIsIG9yIHJhdyBERUZMQVRFIGRlY29tcHJlc3Npb25cbiAqL1xudmFyIEFzeW5jRGVjb21wcmVzcyA9IC8qI19fUFVSRV9fKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICogQ3JlYXRlcyBhbiBhc3luY2hyb25vdXMgZGVjb21wcmVzc2lvbiBzdHJlYW1cbiAgICogQHBhcmFtIGNiIFRoZSBjYWxsYmFjayB0byBjYWxsIHdoZW5ldmVyIGRhdGEgaXMgZGVjb21wcmVzc2VkXG4gICAqL1xuICAgIGZ1bmN0aW9uIEFzeW5jRGVjb21wcmVzcyhjYikge1xuICAgICAgICB0aGlzLkcgPSBBc3luY0d1bnppcDtcbiAgICAgICAgdGhpcy5JID0gQXN5bmNJbmZsYXRlO1xuICAgICAgICB0aGlzLlogPSBBc3luY1VuemxpYjtcbiAgICAgICAgdGhpcy5vbmRhdGEgPSBjYjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHVzaGVzIGEgY2h1bmsgdG8gYmUgZGVjb21wcmVzc2VkXG4gICAgICogQHBhcmFtIGNodW5rIFRoZSBjaHVuayB0byBwdXNoXG4gICAgICogQHBhcmFtIGZpbmFsIFdoZXRoZXIgdGhpcyBpcyB0aGUgbGFzdCBjaHVua1xuICAgICAqL1xuICAgIEFzeW5jRGVjb21wcmVzcy5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChjaHVuaywgZmluYWwpIHtcbiAgICAgICAgRGVjb21wcmVzcy5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBmaW5hbCk7XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNEZWNvbXByZXNzO1xufSgpKTtcbmV4cG9ydCB7IEFzeW5jRGVjb21wcmVzcyB9O1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcHJlc3MoZGF0YSwgb3B0cywgY2IpIHtcbiAgICBpZiAoIWNiKVxuICAgICAgICBjYiA9IG9wdHMsIG9wdHMgPSB7fTtcbiAgICBpZiAodHlwZW9mIGNiICE9ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93ICdubyBjYWxsYmFjayc7XG4gICAgcmV0dXJuIChkYXRhWzBdID09IDMxICYmIGRhdGFbMV0gPT0gMTM5ICYmIGRhdGFbMl0gPT0gOClcbiAgICAgICAgPyBndW56aXAoZGF0YSwgb3B0cywgY2IpXG4gICAgICAgIDogKChkYXRhWzBdICYgMTUpICE9IDggfHwgKGRhdGFbMF0gPj4gNCkgPiA3IHx8ICgoZGF0YVswXSA8PCA4IHwgZGF0YVsxXSkgJSAzMSkpXG4gICAgICAgICAgICA/IGluZmxhdGUoZGF0YSwgb3B0cywgY2IpXG4gICAgICAgICAgICA6IHVuemxpYihkYXRhLCBvcHRzLCBjYik7XG59XG4vKipcbiAqIEV4cGFuZHMgY29tcHJlc3NlZCBHWklQLCBabGliLCBvciByYXcgREVGTEFURSBkYXRhLCBhdXRvbWF0aWNhbGx5IGRldGVjdGluZyB0aGUgZm9ybWF0XG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBkZWNvbXByZXNzXG4gKiBAcGFyYW0gb3V0IFdoZXJlIHRvIHdyaXRlIHRoZSBkYXRhLiBTYXZlcyBtZW1vcnkgaWYgeW91IGtub3cgdGhlIGRlY29tcHJlc3NlZCBzaXplIGFuZCBwcm92aWRlIGFuIG91dHB1dCBidWZmZXIgb2YgdGhhdCBsZW5ndGguXG4gKiBAcmV0dXJucyBUaGUgZGVjb21wcmVzc2VkIHZlcnNpb24gb2YgdGhlIGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29tcHJlc3NTeW5jKGRhdGEsIG91dCkge1xuICAgIHJldHVybiAoZGF0YVswXSA9PSAzMSAmJiBkYXRhWzFdID09IDEzOSAmJiBkYXRhWzJdID09IDgpXG4gICAgICAgID8gZ3VuemlwU3luYyhkYXRhLCBvdXQpXG4gICAgICAgIDogKChkYXRhWzBdICYgMTUpICE9IDggfHwgKGRhdGFbMF0gPj4gNCkgPiA3IHx8ICgoZGF0YVswXSA8PCA4IHwgZGF0YVsxXSkgJSAzMSkpXG4gICAgICAgICAgICA/IGluZmxhdGVTeW5jKGRhdGEsIG91dClcbiAgICAgICAgICAgIDogdW56bGliU3luYyhkYXRhLCBvdXQpO1xufVxuLy8gZmxhdHRlbiBhIGRpcmVjdG9yeSBzdHJ1Y3R1cmVcbnZhciBmbHRuID0gZnVuY3Rpb24gKGQsIHAsIHQsIG8pIHtcbiAgICBmb3IgKHZhciBrIGluIGQpIHtcbiAgICAgICAgdmFyIHZhbCA9IGRba10sIG4gPSBwICsgaztcbiAgICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIHU4KVxuICAgICAgICAgICAgdFtuXSA9IFt2YWwsIG9dO1xuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbCkpXG4gICAgICAgICAgICB0W25dID0gW3ZhbFswXSwgbXJnKG8sIHZhbFsxXSldO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmbHRuKHZhbCwgbiArICcvJywgdCwgbyk7XG4gICAgfVxufTtcbi8qKlxuICogQ29udmVydHMgYSBzdHJpbmcgaW50byBhIFVpbnQ4QXJyYXkgZm9yIHVzZSB3aXRoIGNvbXByZXNzaW9uL2RlY29tcHJlc3Npb24gbWV0aG9kc1xuICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIGVuY29kZVxuICogQHBhcmFtIGxhdGluMSBXaGV0aGVyIG9yIG5vdCB0byBpbnRlcnByZXQgdGhlIGRhdGEgYXMgTGF0aW4tMS4gVGhpcyBzaG91bGRcbiAqICAgICAgICAgICAgICAgbm90IG5lZWQgdG8gYmUgdHJ1ZSB1bmxlc3MgZGVjb2RpbmcgYSBiaW5hcnkgc3RyaW5nLlxuICogQHJldHVybnMgVGhlIHN0cmluZyBlbmNvZGVkIGluIFVURi04L0xhdGluLTEgYmluYXJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJUb1U4KHN0ciwgbGF0aW4xKSB7XG4gICAgdmFyIGwgPSBzdHIubGVuZ3RoO1xuICAgIGlmICghbGF0aW4xICYmIHR5cGVvZiBUZXh0RW5jb2RlciAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShzdHIpO1xuICAgIHZhciBhciA9IG5ldyB1OChzdHIubGVuZ3RoICsgKHN0ci5sZW5ndGggPj4+IDEpKTtcbiAgICB2YXIgYWkgPSAwO1xuICAgIHZhciB3ID0gZnVuY3Rpb24gKHYpIHsgYXJbYWkrK10gPSB2OyB9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIGlmIChhaSArIDUgPiBhci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBuID0gbmV3IHU4KGFpICsgOCArICgobCAtIGkpIDw8IDEpKTtcbiAgICAgICAgICAgIG4uc2V0KGFyKTtcbiAgICAgICAgICAgIGFyID0gbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoYyA8IDEyOCB8fCBsYXRpbjEpXG4gICAgICAgICAgICB3KGMpO1xuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OClcbiAgICAgICAgICAgIHcoMTkyIHwgKGMgPj4+IDYpKSwgdygxMjggfCAoYyAmIDYzKSk7XG4gICAgICAgIGVsc2UgaWYgKGMgPiA1NTI5NSAmJiBjIDwgNTczNDQpXG4gICAgICAgICAgICBjID0gNjU1MzYgKyAoYyAmIDEwMjMgPDwgMTApIHwgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAxMDIzKSxcbiAgICAgICAgICAgICAgICB3KDI0MCB8IChjID4+PiAxOCkpLCB3KDEyOCB8ICgoYyA+Pj4gMTIpICYgNjMpKSwgdygxMjggfCAoKGMgPj4+IDYpICYgNjMpKSwgdygxMjggfCAoYyAmIDYzKSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHcoMjI0IHwgKGMgPj4+IDEyKSksIHcoMTI4IHwgKChjID4+PiA2KSAmIDYzKSksIHcoMTI4IHwgKGMgJiA2MykpO1xuICAgIH1cbiAgICByZXR1cm4gc2xjKGFyLCAwLCBhaSk7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgVWludDhBcnJheSB0byBhIHN0cmluZ1xuICogQHBhcmFtIGRhdCBUaGUgZGF0YSB0byBkZWNvZGUgdG8gc3RyaW5nXG4gKiBAcGFyYW0gbGF0aW4xIFdoZXRoZXIgb3Igbm90IHRvIGludGVycHJldCB0aGUgZGF0YSBhcyBMYXRpbi0xLiBUaGlzIHNob3VsZFxuICogICAgICAgICAgICAgICBub3QgbmVlZCB0byBiZSB0cnVlIHVubGVzcyBlbmNvZGluZyB0byBiaW5hcnkgc3RyaW5nLlxuICogQHJldHVybnMgVGhlIG9yaWdpbmFsIFVURi04L0xhdGluLTEgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJGcm9tVTgoZGF0LCBsYXRpbjEpIHtcbiAgICB2YXIgciA9ICcnO1xuICAgIGlmICghbGF0aW4xICYmIHR5cGVvZiBUZXh0RGVjb2RlciAhPSAndW5kZWZpbmVkJylcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShkYXQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0Lmxlbmd0aDspIHtcbiAgICAgICAgdmFyIGMgPSBkYXRbaSsrXTtcbiAgICAgICAgaWYgKGMgPCAxMjggfHwgbGF0aW4xKVxuICAgICAgICAgICAgciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgICAgICBlbHNlIGlmIChjIDwgMjI0KVxuICAgICAgICAgICAgciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgMzEpIDw8IDYgfCAoZGF0W2krK10gJiA2MykpO1xuICAgICAgICBlbHNlIGlmIChjIDwgMjQwKVxuICAgICAgICAgICAgciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChjICYgMTUpIDw8IDEyIHwgKGRhdFtpKytdICYgNjMpIDw8IDYgfCAoZGF0W2krK10gJiA2MykpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBjID0gKChjICYgMTUpIDw8IDE4IHwgKGRhdFtpKytdICYgNjMpIDw8IDEyIHwgKGRhdFtpKytdICYgNjMpIDw8IDYgfCAoZGF0W2krK10gJiA2MykpIC0gNjU1MzYsXG4gICAgICAgICAgICAgICAgciArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgKGMgPj4gMTApLCA1NjMyMCB8IChjICYgMTAyMykpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbjtcbi8vIHNraXAgbG9jYWwgemlwIGhlYWRlclxudmFyIHNsemggPSBmdW5jdGlvbiAoZCwgYikgeyByZXR1cm4gYiArIDMwICsgYjIoZCwgYiArIDI2KSArIGIyKGQsIGIgKyAyOCk7IH07XG4vLyByZWFkIHppcCBoZWFkZXJcbnZhciB6aCA9IGZ1bmN0aW9uIChkLCBiLCB6KSB7XG4gICAgdmFyIGZubCA9IGIyKGQsIGIgKyAyOCksIGZuID0gc3RyRnJvbVU4KGQuc3ViYXJyYXkoYiArIDQ2LCBiICsgNDYgKyBmbmwpLCAhKGIyKGQsIGIgKyA4KSAmIDIwNDgpKSwgZXMgPSBiICsgNDYgKyBmbmw7XG4gICAgdmFyIF9hID0geiA/IHo2NGUoZCwgZXMpIDogW2I0KGQsIGIgKyAyMCksIGI0KGQsIGIgKyAyNCksIGI0KGQsIGIgKyA0MildLCBzYyA9IF9hWzBdLCBzdSA9IF9hWzFdLCBvZmYgPSBfYVsyXTtcbiAgICByZXR1cm4gW2IyKGQsIGIgKyAxMCksIHNjLCBzdSwgZm4sIGVzICsgYjIoZCwgYiArIDMwKSArIGIyKGQsIGIgKyAzMiksIG9mZl07XG59O1xuLy8gcmVhZCB6aXA2NCBleHRyYSBmaWVsZFxudmFyIHo2NGUgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgIGZvciAoOyBiMihkLCBiKSAhPSAxOyBiICs9IDQgKyBiMihkLCBiICsgMikpXG4gICAgICAgIDtcbiAgICByZXR1cm4gW2I0KGQsIGIgKyAxMiksIGI0KGQsIGIgKyA0KSwgYjQoZCwgYiArIDIwKV07XG59O1xuLy8gd3JpdGUgemlwIGhlYWRlclxudmFyIHd6aCA9IGZ1bmN0aW9uIChkLCBiLCBjLCBjbXAsIHN1LCBmbiwgdSwgbywgY2UsIHQpIHtcbiAgICB2YXIgZmwgPSBmbi5sZW5ndGgsIGwgPSBjbXAubGVuZ3RoO1xuICAgIHdieXRlcyhkLCBiLCBjZSAhPSBudWxsID8gMHgyMDE0QjUwIDogMHg0MDM0QjUwKSwgYiArPSA0O1xuICAgIGlmIChjZSAhPSBudWxsKVxuICAgICAgICBkW2JdID0gMjAsIGIgKz0gMjtcbiAgICBkW2JdID0gMjAsIGIgKz0gMjsgLy8gc3BlYyBjb21wbGlhbmNlPyB3aGF0J3MgdGhhdD9cbiAgICBkW2IrK10gPSAodCA9PSA4ICYmIChvLmxldmVsID09IDEgPyA2IDogby5sZXZlbCA8IDYgPyA0IDogby5sZXZlbCA9PSA5ID8gMiA6IDApKSwgZFtiKytdID0gdSAmJiA4O1xuICAgIGRbYl0gPSB0LCBiICs9IDI7XG4gICAgdmFyIGR0ID0gbmV3IERhdGUoby5tdGltZSB8fCBEYXRlLm5vdygpKSwgeSA9IGR0LmdldEZ1bGxZZWFyKCkgLSAxOTgwO1xuICAgIGlmICh5IDwgMCB8fCB5ID4gMTE5KVxuICAgICAgICB0aHJvdyAnZGF0ZSBub3QgaW4gcmFuZ2UgMTk4MC0yMDk5JztcbiAgICB3Ynl0ZXMoZCwgYiwgKCh5IDw8IDI0KSAqIDIpIHwgKChkdC5nZXRNb250aCgpICsgMSkgPDwgMjEpIHwgKGR0LmdldERhdGUoKSA8PCAxNikgfCAoZHQuZ2V0SG91cnMoKSA8PCAxMSkgfCAoZHQuZ2V0TWludXRlcygpIDw8IDUpIHwgKGR0LmdldFNlY29uZHMoKSA+Pj4gMSkpO1xuICAgIGIgKz0gNDtcbiAgICB3Ynl0ZXMoZCwgYiwgYyk7XG4gICAgd2J5dGVzKGQsIGIgKyA0LCBsKTtcbiAgICB3Ynl0ZXMoZCwgYiArIDgsIHN1KTtcbiAgICB3Ynl0ZXMoZCwgYiArIDEyLCBmbCksIGIgKz0gMTY7IC8vIHNraXAgZXh0cmEgZmllbGQsIGNvbW1lbnRcbiAgICBpZiAoY2UgIT0gbnVsbClcbiAgICAgICAgd2J5dGVzKGQsIGIgKz0gMTAsIGNlKSwgYiArPSA0O1xuICAgIGQuc2V0KGZuLCBiKTtcbiAgICBiICs9IGZsO1xuICAgIGlmIChjZSA9PSBudWxsKVxuICAgICAgICBkLnNldChjbXAsIGIpO1xufTtcbi8vIHdyaXRlIHppcCBmb290ZXIgKGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeSlcbnZhciB3emYgPSBmdW5jdGlvbiAobywgYiwgYywgZCwgZSkge1xuICAgIHdieXRlcyhvLCBiLCAweDYwNTRCNTApOyAvLyBza2lwIGRpc2tcbiAgICB3Ynl0ZXMobywgYiArIDgsIGMpO1xuICAgIHdieXRlcyhvLCBiICsgMTAsIGMpO1xuICAgIHdieXRlcyhvLCBiICsgMTIsIGQpO1xuICAgIHdieXRlcyhvLCBiICsgMTYsIGUpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB6aXAoZGF0YSwgb3B0cywgY2IpIHtcbiAgICBpZiAoIWNiKVxuICAgICAgICBjYiA9IG9wdHMsIG9wdHMgPSB7fTtcbiAgICBpZiAodHlwZW9mIGNiICE9ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93ICdubyBjYWxsYmFjayc7XG4gICAgdmFyIHIgPSB7fTtcbiAgICBmbHRuKGRhdGEsICcnLCByLCBvcHRzKTtcbiAgICB2YXIgayA9IE9iamVjdC5rZXlzKHIpO1xuICAgIHZhciBsZnQgPSBrLmxlbmd0aCwgbyA9IDAsIHRvdCA9IDA7XG4gICAgdmFyIHNsZnQgPSBsZnQsIGZpbGVzID0gbmV3IEFycmF5KGxmdCk7XG4gICAgdmFyIHRlcm0gPSBbXTtcbiAgICB2YXIgdEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXJtLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgdGVybVtpXSgpO1xuICAgIH07XG4gICAgdmFyIGNiZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG91dCA9IG5ldyB1OCh0b3QgKyAyMiksIG9lID0gbywgY2RsID0gdG90IC0gbztcbiAgICAgICAgdG90ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGZ0OyArK2kpIHtcbiAgICAgICAgICAgIHZhciBmID0gZmlsZXNbaV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHd6aChvdXQsIHRvdCwgZi5jLCBmLmQsIGYubSwgZi5uLCBmLnUsIGYucCwgbnVsbCwgZi50KTtcbiAgICAgICAgICAgICAgICB3emgob3V0LCBvLCBmLmMsIGYuZCwgZi5tLCBmLm4sIGYudSwgZi5wLCB0b3QsIGYudCksIG8gKz0gNDYgKyBmLm4ubGVuZ3RoLCB0b3QgKz0gMzAgKyBmLm4ubGVuZ3RoICsgZi5kLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNiKGUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHd6ZihvdXQsIG8sIGZpbGVzLmxlbmd0aCwgY2RsLCBvZSk7XG4gICAgICAgIGNiKG51bGwsIG91dCk7XG4gICAgfTtcbiAgICBpZiAoIWxmdClcbiAgICAgICAgY2JmKCk7XG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICB2YXIgZm4gPSBrW2ldO1xuICAgICAgICB2YXIgX2EgPSByW2ZuXSwgZmlsZSA9IF9hWzBdLCBwID0gX2FbMV07XG4gICAgICAgIHZhciBjID0gY3JjKCksIG0gPSBmaWxlLmxlbmd0aDtcbiAgICAgICAgYy5wKGZpbGUpO1xuICAgICAgICB2YXIgbiA9IHN0clRvVTgoZm4pLCBzID0gbi5sZW5ndGg7XG4gICAgICAgIHZhciB0ID0gcC5sZXZlbCA9PSAwID8gMCA6IDg7XG4gICAgICAgIHZhciBjYmwgPSBmdW5jdGlvbiAoZSwgZCkge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgICB0QWxsKCk7XG4gICAgICAgICAgICAgICAgY2IoZSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IGQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGZpbGVzW2ldID0ge1xuICAgICAgICAgICAgICAgICAgICB0OiB0LFxuICAgICAgICAgICAgICAgICAgICBkOiBkLFxuICAgICAgICAgICAgICAgICAgICBtOiBtLFxuICAgICAgICAgICAgICAgICAgICBjOiBjLmQoKSxcbiAgICAgICAgICAgICAgICAgICAgdTogZm4ubGVuZ3RoICE9IGwsXG4gICAgICAgICAgICAgICAgICAgIG46IG4sXG4gICAgICAgICAgICAgICAgICAgIHA6IHBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG8gKz0gMzAgKyBzICsgbDtcbiAgICAgICAgICAgICAgICB0b3QgKz0gNzYgKyAyICogcyArIGw7XG4gICAgICAgICAgICAgICAgaWYgKCEtLWxmdClcbiAgICAgICAgICAgICAgICAgICAgY2JmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChuLmxlbmd0aCA+IDY1NTM1KVxuICAgICAgICAgICAgY2JsKCdmaWxlbmFtZSB0b28gbG9uZycsIG51bGwpO1xuICAgICAgICBpZiAoIXQpXG4gICAgICAgICAgICBjYmwobnVsbCwgZmlsZSk7XG4gICAgICAgIGVsc2UgaWYgKG0gPCAxNjAwMDApIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2JsKG51bGwsIGRlZmxhdGVTeW5jKGZpbGUsIHApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY2JsKGUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRlcm0ucHVzaChkZWZsYXRlKGZpbGUsIHAsIGNibCkpO1xuICAgIH07XG4gICAgLy8gQ2Fubm90IHVzZSBsZnQgYmVjYXVzZSBpdCBjYW4gZGVjcmVhc2VcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsZnQ7ICsraSkge1xuICAgICAgICBfbG9vcF8xKGkpO1xuICAgIH1cbiAgICByZXR1cm4gdEFsbDtcbn1cbi8qKlxuICogU3luY2hyb25vdXNseSBjcmVhdGVzIGEgWklQIGZpbGUuIFByZWZlciB1c2luZyBgemlwYCBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlXG4gKiB3aXRoIG1vcmUgdGhhbiBvbmUgZmlsZS5cbiAqIEBwYXJhbSBkYXRhIFRoZSBkaXJlY3Rvcnkgc3RydWN0dXJlIGZvciB0aGUgWklQIGFyY2hpdmVcbiAqIEBwYXJhbSBvcHRzIFRoZSBtYWluIG9wdGlvbnMsIG1lcmdlZCB3aXRoIHBlci1maWxlIG9wdGlvbnNcbiAqIEByZXR1cm5zIFRoZSBnZW5lcmF0ZWQgWklQIGFyY2hpdmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHppcFN5bmMoZGF0YSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHsgb3B0cyA9IHt9OyB9XG4gICAgdmFyIHIgPSB7fTtcbiAgICB2YXIgZmlsZXMgPSBbXTtcbiAgICBmbHRuKGRhdGEsICcnLCByLCBvcHRzKTtcbiAgICB2YXIgbyA9IDA7XG4gICAgdmFyIHRvdCA9IDA7XG4gICAgZm9yICh2YXIgZm4gaW4gcikge1xuICAgICAgICB2YXIgX2EgPSByW2ZuXSwgZmlsZSA9IF9hWzBdLCBwID0gX2FbMV07XG4gICAgICAgIHZhciB0ID0gcC5sZXZlbCA9PSAwID8gMCA6IDg7XG4gICAgICAgIHZhciBuID0gc3RyVG9VOChmbiksIHMgPSBuLmxlbmd0aDtcbiAgICAgICAgaWYgKG4ubGVuZ3RoID4gNjU1MzUpXG4gICAgICAgICAgICB0aHJvdyAnZmlsZW5hbWUgdG9vIGxvbmcnO1xuICAgICAgICB2YXIgZCA9IHQgPyBkZWZsYXRlU3luYyhmaWxlLCBwKSA6IGZpbGUsIGwgPSBkLmxlbmd0aDtcbiAgICAgICAgdmFyIGMgPSBjcmMoKTtcbiAgICAgICAgYy5wKGZpbGUpO1xuICAgICAgICBmaWxlcy5wdXNoKHtcbiAgICAgICAgICAgIHQ6IHQsXG4gICAgICAgICAgICBkOiBkLFxuICAgICAgICAgICAgbTogZmlsZS5sZW5ndGgsXG4gICAgICAgICAgICBjOiBjLmQoKSxcbiAgICAgICAgICAgIHU6IGZuLmxlbmd0aCAhPSBzLFxuICAgICAgICAgICAgbjogbixcbiAgICAgICAgICAgIG86IG8sXG4gICAgICAgICAgICBwOiBwXG4gICAgICAgIH0pO1xuICAgICAgICBvICs9IDMwICsgcyArIGw7XG4gICAgICAgIHRvdCArPSA3NiArIDIgKiBzICsgbDtcbiAgICB9XG4gICAgdmFyIG91dCA9IG5ldyB1OCh0b3QgKyAyMiksIG9lID0gbywgY2RsID0gdG90IC0gbztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBmID0gZmlsZXNbaV07XG4gICAgICAgIHd6aChvdXQsIGYubywgZi5jLCBmLmQsIGYubSwgZi5uLCBmLnUsIGYucCwgbnVsbCwgZi50KTtcbiAgICAgICAgd3poKG91dCwgbywgZi5jLCBmLmQsIGYubSwgZi5uLCBmLnUsIGYucCwgZi5vLCBmLnQpLCBvICs9IDQ2ICsgZi5uLmxlbmd0aDtcbiAgICB9XG4gICAgd3pmKG91dCwgbywgZmlsZXMubGVuZ3RoLCBjZGwsIG9lKTtcbiAgICByZXR1cm4gb3V0O1xufVxuLyoqXG4gKiBBc3luY2hyb25vdXNseSBkZWNvbXByZXNzZXMgYSBaSVAgYXJjaGl2ZVxuICogQHBhcmFtIGRhdGEgVGhlIHJhdyBjb21wcmVzc2VkIFpJUCBmaWxlXG4gKiBAcGFyYW0gY2IgVGhlIGNhbGxiYWNrIHRvIGNhbGwgd2l0aCB0aGUgZGVjb21wcmVzc2VkIGZpbGVzXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gaW1tZWRpYXRlbHkgdGVybWluYXRlIHRoZSB1bnppcHBpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVuemlwKGRhdGEsIGNiKSB7XG4gICAgaWYgKHR5cGVvZiBjYiAhPSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyAnbm8gY2FsbGJhY2snO1xuICAgIHZhciB0ZXJtID0gW107XG4gICAgdmFyIHRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVybS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgIHRlcm1baV0oKTtcbiAgICB9O1xuICAgIHZhciBmaWxlcyA9IHt9O1xuICAgIHZhciBlID0gZGF0YS5sZW5ndGggLSAyMjtcbiAgICBmb3IgKDsgYjQoZGF0YSwgZSkgIT0gMHg2MDU0QjUwOyAtLWUpIHtcbiAgICAgICAgaWYgKCFlIHx8IGRhdGEubGVuZ3RoIC0gZSA+IDY1NTU4KSB7XG4gICAgICAgICAgICBjYignaW52YWxpZCB6aXAgZmlsZScsIG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIDtcbiAgICB2YXIgbGZ0ID0gYjIoZGF0YSwgZSArIDgpO1xuICAgIGlmICghbGZ0KVxuICAgICAgICBjYihudWxsLCB7fSk7XG4gICAgdmFyIGMgPSBsZnQ7XG4gICAgdmFyIG8gPSBiNChkYXRhLCBlICsgMTYpO1xuICAgIHZhciB6ID0gbyA9PSA0Mjk0OTY3Mjk1O1xuICAgIGlmICh6KSB7XG4gICAgICAgIGUgPSBiNChkYXRhLCBlIC0gMTIpO1xuICAgICAgICBpZiAoYjQoZGF0YSwgZSkgIT0gMHg2MDY0QjUwKVxuICAgICAgICAgICAgdGhyb3cgJ2ludmFsaWQgemlwIGZpbGUnO1xuICAgICAgICBjID0gbGZ0ID0gYjQoZGF0YSwgZSArIDMyKTtcbiAgICAgICAgbyA9IGI0KGRhdGEsIGUgKyA0OCk7XG4gICAgfVxuICAgIHZhciBfbG9vcF8yID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdmFyIF9hID0gemgoZGF0YSwgbywgeiksIGNfMSA9IF9hWzBdLCBzYyA9IF9hWzFdLCBzdSA9IF9hWzJdLCBmbiA9IF9hWzNdLCBubyA9IF9hWzRdLCBvZmYgPSBfYVs1XSwgYiA9IHNsemgoZGF0YSwgb2ZmKTtcbiAgICAgICAgbyA9IG5vO1xuICAgICAgICB2YXIgY2JsID0gZnVuY3Rpb24gKGUsIGQpIHtcbiAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgICAgdEFsbCgpO1xuICAgICAgICAgICAgICAgIGNiKGUsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZmlsZXNbZm5dID0gZDtcbiAgICAgICAgICAgICAgICBpZiAoIS0tbGZ0KVxuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBmaWxlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICghY18xKVxuICAgICAgICAgICAgY2JsKG51bGwsIHNsYyhkYXRhLCBiLCBiICsgc2MpKTtcbiAgICAgICAgZWxzZSBpZiAoY18xID09IDgpIHtcbiAgICAgICAgICAgIHZhciBpbmZsID0gZGF0YS5zdWJhcnJheShiLCBiICsgc2MpO1xuICAgICAgICAgICAgaWYgKHNjIDwgMzIwMDAwKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY2JsKG51bGwsIGluZmxhdGVTeW5jKGluZmwsIG5ldyB1OChzdSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2JsKGUsIG51bGwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0ZXJtLnB1c2goaW5mbGF0ZShpbmZsLCB7IHNpemU6IHN1IH0sIGNibCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNibCgndW5rbm93biBjb21wcmVzc2lvbiB0eXBlICcgKyBjXzEsIG51bGwpO1xuICAgIH07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjOyArK2kpIHtcbiAgICAgICAgX2xvb3BfMihpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRBbGw7XG59XG4vKipcbiAqIFN5bmNocm9ub3VzbHkgZGVjb21wcmVzc2VzIGEgWklQIGFyY2hpdmUuIFByZWZlciB1c2luZyBgdW56aXBgIGZvciBiZXR0ZXJcbiAqIHBlcmZvcm1hbmNlIHdpdGggbW9yZSB0aGFuIG9uZSBmaWxlLlxuICogQHBhcmFtIGRhdGEgVGhlIHJhdyBjb21wcmVzc2VkIFpJUCBmaWxlXG4gKiBAcmV0dXJucyBUaGUgZGVjb21wcmVzc2VkIGZpbGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnppcFN5bmMoZGF0YSkge1xuICAgIHZhciBmaWxlcyA9IHt9O1xuICAgIHZhciBlID0gZGF0YS5sZW5ndGggLSAyMjtcbiAgICBmb3IgKDsgYjQoZGF0YSwgZSkgIT0gMHg2MDU0QjUwOyAtLWUpIHtcbiAgICAgICAgaWYgKCFlIHx8IGRhdGEubGVuZ3RoIC0gZSA+IDY1NTU4KVxuICAgICAgICAgICAgdGhyb3cgJ2ludmFsaWQgemlwIGZpbGUnO1xuICAgIH1cbiAgICA7XG4gICAgdmFyIGMgPSBiMihkYXRhLCBlICsgOCk7XG4gICAgaWYgKCFjKVxuICAgICAgICByZXR1cm4ge307XG4gICAgdmFyIG8gPSBiNChkYXRhLCBlICsgMTYpO1xuICAgIHZhciB6ID0gbyA9PSA0Mjk0OTY3Mjk1O1xuICAgIGlmICh6KSB7XG4gICAgICAgIGUgPSBiNChkYXRhLCBlIC0gMTIpO1xuICAgICAgICBpZiAoYjQoZGF0YSwgZSkgIT0gMHg2MDY0QjUwKVxuICAgICAgICAgICAgdGhyb3cgJ2ludmFsaWQgemlwIGZpbGUnO1xuICAgICAgICBjID0gYjQoZGF0YSwgZSArIDMyKTtcbiAgICAgICAgbyA9IGI0KGRhdGEsIGUgKyA0OCk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYzsgKytpKSB7XG4gICAgICAgIHZhciBfYSA9IHpoKGRhdGEsIG8sIHopLCBjXzIgPSBfYVswXSwgc2MgPSBfYVsxXSwgc3UgPSBfYVsyXSwgZm4gPSBfYVszXSwgbm8gPSBfYVs0XSwgb2ZmID0gX2FbNV0sIGIgPSBzbHpoKGRhdGEsIG9mZik7XG4gICAgICAgIG8gPSBubztcbiAgICAgICAgaWYgKCFjXzIpXG4gICAgICAgICAgICBmaWxlc1tmbl0gPSBzbGMoZGF0YSwgYiwgYiArIHNjKTtcbiAgICAgICAgZWxzZSBpZiAoY18yID09IDgpXG4gICAgICAgICAgICBmaWxlc1tmbl0gPSBpbmZsYXRlU3luYyhkYXRhLnN1YmFycmF5KGIsIGIgKyBzYyksIG5ldyB1OChzdSkpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyAndW5rbm93biBjb21wcmVzc2lvbiB0eXBlICcgKyBjXzI7XG4gICAgfVxuICAgIHJldHVybiBmaWxlcztcbn1cbiIsIi8qKiBAbGljZW5zZVxuICpcbiAqIGpzUERGIC0gUERGIERvY3VtZW50IGNyZWF0aW9uIGZyb20gSmF2YVNjcmlwdFxuICogVmVyc2lvbiAyLjUuMSBCdWlsdCBvbiAyMDIyLTAxLTI4VDE1OjM3OjU3Ljc5MVpcbiAqICAgICAgICAgICAgICAgICAgICAgIENvbW1pdElEIDAwMDAwMDAwXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEwLTIwMjEgSmFtZXMgSGFsbCA8amFtZXNAcGFyYWxsLmF4PiwgaHR0cHM6Ly9naXRodWIuY29tL01yUmlvL2pzUERGXG4gKiAgICAgICAgICAgICAgIDIwMTUtMjAyMSB5V29ya3MgR21iSCwgaHR0cDovL3d3dy55d29ya3MuY29tXG4gKiAgICAgICAgICAgICAgIDIwMTUtMjAyMSBMdWthcyBIb2xsw6RuZGVyIDxsdWthcy5ob2xsYWVuZGVyQHl3b3Jrcy5jb20+LCBodHRwczovL2dpdGh1Yi5jb20vSGFja2JyZXR0WFhYXG4gKiAgICAgICAgICAgICAgIDIwMTYtMjAxOCBBcmFzIEFiYmFzaSA8YXJhcy5hYmJhc2lAZ21haWwuY29tPlxuICogICAgICAgICAgICAgICAyMDEwIEFhcm9uIFNwaWtlLCBodHRwczovL2dpdGh1Yi5jb20vYWNzcGlrZVxuICogICAgICAgICAgICAgICAyMDEyIFdpbGxvdyBTeXN0ZW1zIENvcnBvcmF0aW9uLCBodHRwczovL2dpdGh1Yi5jb20vd2lsbG93c3lzdGVtc1xuICogICAgICAgICAgICAgICAyMDEyIFBhYmxvIEhlc3MsIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWJsb2hlc3NcbiAqICAgICAgICAgICAgICAgMjAxMiBGbG9yaWFuIEplbmV0dCwgaHR0cHM6Ly9naXRodWIuY29tL2ZqZW5ldHRcbiAqICAgICAgICAgICAgICAgMjAxMyBXYXJyZW4gV2Vja2Vzc2VyLCBodHRwczovL2dpdGh1Yi5jb20vd2FycmVud2Vja2Vzc2VyXG4gKiAgICAgICAgICAgICAgIDIwMTMgWW91c3NlZiBCZWRkYWQsIGh0dHBzOi8vZ2l0aHViLmNvbS9saWZvZlxuICogICAgICAgICAgICAgICAyMDEzIExlZSBEcmlzY29sbCwgaHR0cHM6Ly9naXRodWIuY29tL2xzZHJpc2NvbGxcbiAqICAgICAgICAgICAgICAgMjAxMyBTdGVmYW4gU2xvbmV2c2tpeSwgaHR0cHM6Ly9naXRodWIuY29tL3N0ZWZzbG9uXG4gKiAgICAgICAgICAgICAgIDIwMTMgSmVyZW15IE1vcmVsLCBodHRwczovL2dpdGh1Yi5jb20vam1vcmVsXG4gKiAgICAgICAgICAgICAgIDIwMTMgQ2hyaXN0b3BoIEhhcnRtYW5uLCBodHRwczovL2dpdGh1Yi5jb20vY2hyaXMtcm9ja1xuICogICAgICAgICAgICAgICAyMDE0IEp1YW4gUGFibG8gR2F2aXJpYSwgaHR0cHM6Ly9naXRodWIuY29tL2p1YW5wZ2F2aXJpYVxuICogICAgICAgICAgICAgICAyMDE0IEphbWVzIE1ha2VzLCBodHRwczovL2dpdGh1Yi5jb20vZG9sbGFydXdcbiAqICAgICAgICAgICAgICAgMjAxNCBEaWVnbyBDYXNvcnJhbiwgaHR0cHM6Ly9naXRodWIuY29tL2RpZWdvY3JcbiAqICAgICAgICAgICAgICAgMjAxNCBTdGV2ZW4gU3B1bmdpbiwgaHR0cHM6Ly9naXRodWIuY29tL0ZsYW1lbmNvXG4gKiAgICAgICAgICAgICAgIDIwMTQgS2VubmV0aCBHbGFzc2V5LCBodHRwczovL2dpdGh1Yi5jb20vR2F2dmVyc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4gKiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbiAqIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICpcbiAqIENvbnRyaWJ1dG9yKHMpOlxuICogICAgc2llZmtlbmosIGFod29sZiwgcmlja3lndSwgTWlkbml0aCwgc2FpbnRjbGFpciwgZWFwYXJhbmdvLFxuICogICAga2ltM2VyLCBtZm8sIGFsbm9ydGgsIEZsYW1lbmNvXG4gKi9cblxuaW1wb3J0IHQgZnJvbVwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2ZcIjtpbXBvcnR7emxpYlN5bmMgYXMgZSx1bnpsaWJTeW5jIGFzIHJ9ZnJvbVwiZmZsYXRlXCI7dmFyIG49ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXN9KCk7ZnVuY3Rpb24gaSgpe24uY29uc29sZSYmXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5jb25zb2xlLmxvZyYmbi5jb25zb2xlLmxvZy5hcHBseShuLmNvbnNvbGUsYXJndW1lbnRzKX12YXIgYT17bG9nOmksd2FybjpmdW5jdGlvbih0KXtuLmNvbnNvbGUmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLmNvbnNvbGUud2Fybj9uLmNvbnNvbGUud2Fybi5hcHBseShuLmNvbnNvbGUsYXJndW1lbnRzKTppLmNhbGwobnVsbCxhcmd1bWVudHMpKX0sZXJyb3I6ZnVuY3Rpb24odCl7bi5jb25zb2xlJiYoXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5jb25zb2xlLmVycm9yP24uY29uc29sZS5lcnJvci5hcHBseShuLmNvbnNvbGUsYXJndW1lbnRzKTppKHQpKX19O2Z1bmN0aW9uIG8odCxlLHIpe3ZhciBuPW5ldyBYTUxIdHRwUmVxdWVzdDtuLm9wZW4oXCJHRVRcIix0KSxuLnJlc3BvbnNlVHlwZT1cImJsb2JcIixuLm9ubG9hZD1mdW5jdGlvbigpe2wobi5yZXNwb25zZSxlLHIpfSxuLm9uZXJyb3I9ZnVuY3Rpb24oKXthLmVycm9yKFwiY291bGQgbm90IGRvd25sb2FkIGZpbGVcIil9LG4uc2VuZCgpfWZ1bmN0aW9uIHModCl7dmFyIGU9bmV3IFhNTEh0dHBSZXF1ZXN0O2Uub3BlbihcIkhFQURcIix0LCExKTt0cnl7ZS5zZW5kKCl9Y2F0Y2godCl7fXJldHVybiBlLnN0YXR1cz49MjAwJiZlLnN0YXR1czw9Mjk5fWZ1bmN0aW9uIGModCl7dHJ5e3QuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudChcImNsaWNrXCIpKX1jYXRjaChyKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFdmVudChcIk1vdXNlRXZlbnRzXCIpO2UuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCEwLCEwLHdpbmRvdywwLDAsMCw4MCwyMCwhMSwhMSwhMSwhMSwwLG51bGwpLHQuZGlzcGF0Y2hFdmVudChlKX19dmFyIHUsaCxsPW4uc2F2ZUFzfHwoXCJvYmplY3RcIiE9PShcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93P1widW5kZWZpbmVkXCI6dCh3aW5kb3cpKXx8d2luZG93IT09bj9mdW5jdGlvbigpe306XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxBbmNob3JFbGVtZW50JiZcImRvd25sb2FkXCJpbiBIVE1MQW5jaG9yRWxlbWVudC5wcm90b3R5cGU/ZnVuY3Rpb24odCxlLHIpe3ZhciBpPW4uVVJMfHxuLndlYmtpdFVSTCxhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2U9ZXx8dC5uYW1lfHxcImRvd25sb2FkXCIsYS5kb3dubG9hZD1lLGEucmVsPVwibm9vcGVuZXJcIixcInN0cmluZ1wiPT10eXBlb2YgdD8oYS5ocmVmPXQsYS5vcmlnaW4hPT1sb2NhdGlvbi5vcmlnaW4/cyhhLmhyZWYpP28odCxlLHIpOmMoYSxhLnRhcmdldD1cIl9ibGFua1wiKTpjKGEpKTooYS5ocmVmPWkuY3JlYXRlT2JqZWN0VVJMKHQpLHNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7aS5yZXZva2VPYmplY3RVUkwoYS5ocmVmKX0pLDRlNCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtjKGEpfSksMCkpfTpcIm1zU2F2ZU9yT3BlbkJsb2JcImluIG5hdmlnYXRvcj9mdW5jdGlvbihlLHIsbil7aWYocj1yfHxlLm5hbWV8fFwiZG93bmxvYWRcIixcInN0cmluZ1wiPT10eXBlb2YgZSlpZihzKGUpKW8oZSxyLG4pO2Vsc2V7dmFyIGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7aS5ocmVmPWUsaS50YXJnZXQ9XCJfYmxhbmtcIixzZXRUaW1lb3V0KChmdW5jdGlvbigpe2MoaSl9KSl9ZWxzZSBuYXZpZ2F0b3IubXNTYXZlT3JPcGVuQmxvYihmdW5jdGlvbihlLHIpe3JldHVybiB2b2lkIDA9PT1yP3I9e2F1dG9Cb206ITF9Olwib2JqZWN0XCIhPT10KHIpJiYoYS53YXJuKFwiRGVwcmVjYXRlZDogRXhwZWN0ZWQgdGhpcmQgYXJndW1lbnQgdG8gYmUgYSBvYmplY3RcIikscj17YXV0b0JvbTohcn0pLHIuYXV0b0JvbSYmL15cXHMqKD86dGV4dFxcL1xcUyp8YXBwbGljYXRpb25cXC94bWx8XFxTKlxcL1xcUypcXCt4bWwpXFxzKjsuKmNoYXJzZXRcXHMqPVxccyp1dGYtOC9pLnRlc3QoZS50eXBlKT9uZXcgQmxvYihbU3RyaW5nLmZyb21DaGFyQ29kZSg2NTI3OSksZV0se3R5cGU6ZS50eXBlfSk6ZX0oZSxuKSxyKX06ZnVuY3Rpb24oZSxyLGksYSl7aWYoKGE9YXx8b3BlbihcIlwiLFwiX2JsYW5rXCIpKSYmKGEuZG9jdW1lbnQudGl0bGU9YS5kb2N1bWVudC5ib2R5LmlubmVyVGV4dD1cImRvd25sb2FkaW5nLi4uXCIpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXJldHVybiBvKGUscixpKTt2YXIgcz1cImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiPT09ZS50eXBlLGM9L2NvbnN0cnVjdG9yL2kudGVzdChuLkhUTUxFbGVtZW50KXx8bi5zYWZhcmksdT0vQ3JpT1NcXC9bXFxkXSsvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7aWYoKHV8fHMmJmMpJiZcIm9iamVjdFwiPT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBGaWxlUmVhZGVyP1widW5kZWZpbmVkXCI6dChGaWxlUmVhZGVyKSkpe3ZhciBoPW5ldyBGaWxlUmVhZGVyO2gub25sb2FkZW5kPWZ1bmN0aW9uKCl7dmFyIHQ9aC5yZXN1bHQ7dD11P3Q6dC5yZXBsYWNlKC9eZGF0YTpbXjtdKjsvLFwiZGF0YTphdHRhY2htZW50L2ZpbGU7XCIpLGE/YS5sb2NhdGlvbi5ocmVmPXQ6bG9jYXRpb249dCxhPW51bGx9LGgucmVhZEFzRGF0YVVSTChlKX1lbHNle3ZhciBsPW4uVVJMfHxuLndlYmtpdFVSTCxmPWwuY3JlYXRlT2JqZWN0VVJMKGUpO2E/YS5sb2NhdGlvbj1mOmxvY2F0aW9uLmhyZWY9ZixhPW51bGwsc2V0VGltZW91dCgoZnVuY3Rpb24oKXtsLnJldm9rZU9iamVjdFVSTChmKX0pLDRlNCl9fSk7XG4vKipcbiAqIEEgY2xhc3MgdG8gcGFyc2UgY29sb3IgdmFsdWVzXG4gKiBAYXV0aG9yIFN0b3lhbiBTdGVmYW5vdiA8c3N0b29AZ21haWwuY29tPlxuICoge0BsaW5rICAgaHR0cDovL3d3dy5waHBpZWQuY29tL3JnYi1jb2xvci1wYXJzZXItaW4tamF2YXNjcmlwdC99XG4gKiBAbGljZW5zZSBVc2UgaXQgaWYgeW91IGxpa2UgaXRcbiAqL2Z1bmN0aW9uIGYodCl7dmFyIGU7dD10fHxcIlwiLHRoaXMub2s9ITEsXCIjXCI9PXQuY2hhckF0KDApJiYodD10LnN1YnN0cigxLDYpKTt0PXthbGljZWJsdWU6XCJmMGY4ZmZcIixhbnRpcXVld2hpdGU6XCJmYWViZDdcIixhcXVhOlwiMDBmZmZmXCIsYXF1YW1hcmluZTpcIjdmZmZkNFwiLGF6dXJlOlwiZjBmZmZmXCIsYmVpZ2U6XCJmNWY1ZGNcIixiaXNxdWU6XCJmZmU0YzRcIixibGFjazpcIjAwMDAwMFwiLGJsYW5jaGVkYWxtb25kOlwiZmZlYmNkXCIsYmx1ZTpcIjAwMDBmZlwiLGJsdWV2aW9sZXQ6XCI4YTJiZTJcIixicm93bjpcImE1MmEyYVwiLGJ1cmx5d29vZDpcImRlYjg4N1wiLGNhZGV0Ymx1ZTpcIjVmOWVhMFwiLGNoYXJ0cmV1c2U6XCI3ZmZmMDBcIixjaG9jb2xhdGU6XCJkMjY5MWVcIixjb3JhbDpcImZmN2Y1MFwiLGNvcm5mbG93ZXJibHVlOlwiNjQ5NWVkXCIsY29ybnNpbGs6XCJmZmY4ZGNcIixjcmltc29uOlwiZGMxNDNjXCIsY3lhbjpcIjAwZmZmZlwiLGRhcmtibHVlOlwiMDAwMDhiXCIsZGFya2N5YW46XCIwMDhiOGJcIixkYXJrZ29sZGVucm9kOlwiYjg4NjBiXCIsZGFya2dyYXk6XCJhOWE5YTlcIixkYXJrZ3JlZW46XCIwMDY0MDBcIixkYXJra2hha2k6XCJiZGI3NmJcIixkYXJrbWFnZW50YTpcIjhiMDA4YlwiLGRhcmtvbGl2ZWdyZWVuOlwiNTU2YjJmXCIsZGFya29yYW5nZTpcImZmOGMwMFwiLGRhcmtvcmNoaWQ6XCI5OTMyY2NcIixkYXJrcmVkOlwiOGIwMDAwXCIsZGFya3NhbG1vbjpcImU5OTY3YVwiLGRhcmtzZWFncmVlbjpcIjhmYmM4ZlwiLGRhcmtzbGF0ZWJsdWU6XCI0ODNkOGJcIixkYXJrc2xhdGVncmF5OlwiMmY0ZjRmXCIsZGFya3R1cnF1b2lzZTpcIjAwY2VkMVwiLGRhcmt2aW9sZXQ6XCI5NDAwZDNcIixkZWVwcGluazpcImZmMTQ5M1wiLGRlZXBza3libHVlOlwiMDBiZmZmXCIsZGltZ3JheTpcIjY5Njk2OVwiLGRvZGdlcmJsdWU6XCIxZTkwZmZcIixmZWxkc3BhcjpcImQxOTI3NVwiLGZpcmVicmljazpcImIyMjIyMlwiLGZsb3JhbHdoaXRlOlwiZmZmYWYwXCIsZm9yZXN0Z3JlZW46XCIyMjhiMjJcIixmdWNoc2lhOlwiZmYwMGZmXCIsZ2FpbnNib3JvOlwiZGNkY2RjXCIsZ2hvc3R3aGl0ZTpcImY4ZjhmZlwiLGdvbGQ6XCJmZmQ3MDBcIixnb2xkZW5yb2Q6XCJkYWE1MjBcIixncmF5OlwiODA4MDgwXCIsZ3JlZW46XCIwMDgwMDBcIixncmVlbnllbGxvdzpcImFkZmYyZlwiLGhvbmV5ZGV3OlwiZjBmZmYwXCIsaG90cGluazpcImZmNjliNFwiLGluZGlhbnJlZDpcImNkNWM1Y1wiLGluZGlnbzpcIjRiMDA4MlwiLGl2b3J5OlwiZmZmZmYwXCIsa2hha2k6XCJmMGU2OGNcIixsYXZlbmRlcjpcImU2ZTZmYVwiLGxhdmVuZGVyYmx1c2g6XCJmZmYwZjVcIixsYXduZ3JlZW46XCI3Y2ZjMDBcIixsZW1vbmNoaWZmb246XCJmZmZhY2RcIixsaWdodGJsdWU6XCJhZGQ4ZTZcIixsaWdodGNvcmFsOlwiZjA4MDgwXCIsbGlnaHRjeWFuOlwiZTBmZmZmXCIsbGlnaHRnb2xkZW5yb2R5ZWxsb3c6XCJmYWZhZDJcIixsaWdodGdyZXk6XCJkM2QzZDNcIixsaWdodGdyZWVuOlwiOTBlZTkwXCIsbGlnaHRwaW5rOlwiZmZiNmMxXCIsbGlnaHRzYWxtb246XCJmZmEwN2FcIixsaWdodHNlYWdyZWVuOlwiMjBiMmFhXCIsbGlnaHRza3libHVlOlwiODdjZWZhXCIsbGlnaHRzbGF0ZWJsdWU6XCI4NDcwZmZcIixsaWdodHNsYXRlZ3JheTpcIjc3ODg5OVwiLGxpZ2h0c3RlZWxibHVlOlwiYjBjNGRlXCIsbGlnaHR5ZWxsb3c6XCJmZmZmZTBcIixsaW1lOlwiMDBmZjAwXCIsbGltZWdyZWVuOlwiMzJjZDMyXCIsbGluZW46XCJmYWYwZTZcIixtYWdlbnRhOlwiZmYwMGZmXCIsbWFyb29uOlwiODAwMDAwXCIsbWVkaXVtYXF1YW1hcmluZTpcIjY2Y2RhYVwiLG1lZGl1bWJsdWU6XCIwMDAwY2RcIixtZWRpdW1vcmNoaWQ6XCJiYTU1ZDNcIixtZWRpdW1wdXJwbGU6XCI5MzcwZDhcIixtZWRpdW1zZWFncmVlbjpcIjNjYjM3MVwiLG1lZGl1bXNsYXRlYmx1ZTpcIjdiNjhlZVwiLG1lZGl1bXNwcmluZ2dyZWVuOlwiMDBmYTlhXCIsbWVkaXVtdHVycXVvaXNlOlwiNDhkMWNjXCIsbWVkaXVtdmlvbGV0cmVkOlwiYzcxNTg1XCIsbWlkbmlnaHRibHVlOlwiMTkxOTcwXCIsbWludGNyZWFtOlwiZjVmZmZhXCIsbWlzdHlyb3NlOlwiZmZlNGUxXCIsbW9jY2FzaW46XCJmZmU0YjVcIixuYXZham93aGl0ZTpcImZmZGVhZFwiLG5hdnk6XCIwMDAwODBcIixvbGRsYWNlOlwiZmRmNWU2XCIsb2xpdmU6XCI4MDgwMDBcIixvbGl2ZWRyYWI6XCI2YjhlMjNcIixvcmFuZ2U6XCJmZmE1MDBcIixvcmFuZ2VyZWQ6XCJmZjQ1MDBcIixvcmNoaWQ6XCJkYTcwZDZcIixwYWxlZ29sZGVucm9kOlwiZWVlOGFhXCIscGFsZWdyZWVuOlwiOThmYjk4XCIscGFsZXR1cnF1b2lzZTpcImFmZWVlZVwiLHBhbGV2aW9sZXRyZWQ6XCJkODcwOTNcIixwYXBheWF3aGlwOlwiZmZlZmQ1XCIscGVhY2hwdWZmOlwiZmZkYWI5XCIscGVydTpcImNkODUzZlwiLHBpbms6XCJmZmMwY2JcIixwbHVtOlwiZGRhMGRkXCIscG93ZGVyYmx1ZTpcImIwZTBlNlwiLHB1cnBsZTpcIjgwMDA4MFwiLHJlZDpcImZmMDAwMFwiLHJvc3licm93bjpcImJjOGY4ZlwiLHJveWFsYmx1ZTpcIjQxNjllMVwiLHNhZGRsZWJyb3duOlwiOGI0NTEzXCIsc2FsbW9uOlwiZmE4MDcyXCIsc2FuZHlicm93bjpcImY0YTQ2MFwiLHNlYWdyZWVuOlwiMmU4YjU3XCIsc2Vhc2hlbGw6XCJmZmY1ZWVcIixzaWVubmE6XCJhMDUyMmRcIixzaWx2ZXI6XCJjMGMwYzBcIixza3libHVlOlwiODdjZWViXCIsc2xhdGVibHVlOlwiNmE1YWNkXCIsc2xhdGVncmF5OlwiNzA4MDkwXCIsc25vdzpcImZmZmFmYVwiLHNwcmluZ2dyZWVuOlwiMDBmZjdmXCIsc3RlZWxibHVlOlwiNDY4MmI0XCIsdGFuOlwiZDJiNDhjXCIsdGVhbDpcIjAwODA4MFwiLHRoaXN0bGU6XCJkOGJmZDhcIix0b21hdG86XCJmZjYzNDdcIix0dXJxdW9pc2U6XCI0MGUwZDBcIix2aW9sZXQ6XCJlZTgyZWVcIix2aW9sZXRyZWQ6XCJkMDIwOTBcIix3aGVhdDpcImY1ZGViM1wiLHdoaXRlOlwiZmZmZmZmXCIsd2hpdGVzbW9rZTpcImY1ZjVmNVwiLHllbGxvdzpcImZmZmYwMFwiLHllbGxvd2dyZWVuOlwiOWFjZDMyXCJ9W3Q9KHQ9dC5yZXBsYWNlKC8gL2csXCJcIikpLnRvTG93ZXJDYXNlKCldfHx0O2Zvcih2YXIgcj1be3JlOi9ecmdiXFwoKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KSxcXHMqKFxcZHsxLDN9KVxcKSQvLGV4YW1wbGU6W1wicmdiKDEyMywgMjM0LCA0NSlcIixcInJnYigyNTUsMjM0LDI0NSlcIl0scHJvY2VzczpmdW5jdGlvbih0KXtyZXR1cm5bcGFyc2VJbnQodFsxXSkscGFyc2VJbnQodFsyXSkscGFyc2VJbnQodFszXSldfX0se3JlOi9eKFxcd3syfSkoXFx3ezJ9KShcXHd7Mn0pJC8sZXhhbXBsZTpbXCIjMDBmZjAwXCIsXCIzMzY2OTlcIl0scHJvY2VzczpmdW5jdGlvbih0KXtyZXR1cm5bcGFyc2VJbnQodFsxXSwxNikscGFyc2VJbnQodFsyXSwxNikscGFyc2VJbnQodFszXSwxNildfX0se3JlOi9eKFxcd3sxfSkoXFx3ezF9KShcXHd7MX0pJC8sZXhhbXBsZTpbXCIjZmIwXCIsXCJmMGZcIl0scHJvY2VzczpmdW5jdGlvbih0KXtyZXR1cm5bcGFyc2VJbnQodFsxXSt0WzFdLDE2KSxwYXJzZUludCh0WzJdK3RbMl0sMTYpLHBhcnNlSW50KHRbM10rdFszXSwxNildfX1dLG49MDtuPHIubGVuZ3RoO24rKyl7dmFyIGk9cltuXS5yZSxhPXJbbl0ucHJvY2VzcyxvPWkuZXhlYyh0KTtvJiYoZT1hKG8pLHRoaXMucj1lWzBdLHRoaXMuZz1lWzFdLHRoaXMuYj1lWzJdLHRoaXMub2s9ITApfXRoaXMucj10aGlzLnI8MHx8aXNOYU4odGhpcy5yKT8wOnRoaXMucj4yNTU/MjU1OnRoaXMucix0aGlzLmc9dGhpcy5nPDB8fGlzTmFOKHRoaXMuZyk/MDp0aGlzLmc+MjU1PzI1NTp0aGlzLmcsdGhpcy5iPXRoaXMuYjwwfHxpc05hTih0aGlzLmIpPzA6dGhpcy5iPjI1NT8yNTU6dGhpcy5iLHRoaXMudG9SR0I9ZnVuY3Rpb24oKXtyZXR1cm5cInJnYihcIit0aGlzLnIrXCIsIFwiK3RoaXMuZytcIiwgXCIrdGhpcy5iK1wiKVwifSx0aGlzLnRvSGV4PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5yLnRvU3RyaW5nKDE2KSxlPXRoaXMuZy50b1N0cmluZygxNikscj10aGlzLmIudG9TdHJpbmcoMTYpO3JldHVybiAxPT10Lmxlbmd0aCYmKHQ9XCIwXCIrdCksMT09ZS5sZW5ndGgmJihlPVwiMFwiK2UpLDE9PXIubGVuZ3RoJiYocj1cIjBcIityKSxcIiNcIit0K2Urcn19XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBKb3NlcGggTXllcnMgZG9lcyBub3Qgc3BlY2lmeSBhIHBhcnRpY3VsYXIgbGljZW5zZSBmb3IgaGlzIHdvcmsuXG4gKlxuICogQXV0aG9yOiBKb3NlcGggTXllcnNcbiAqIEFjY2Vzc2VkIGZyb206IGh0dHA6Ly93d3cubXllcnNkYWlseS5vcmcvam9zZXBoL2phdmFzY3JpcHQvbWQ1LmpzXG4gKlxuICogTW9kaWZpZWQgYnk6IE93ZW4gTGVvbmdcbiAqL1xuZnVuY3Rpb24gZCh0LGUpe3ZhciByPXRbMF0sbj10WzFdLGk9dFsyXSxhPXRbM107cj1nKHIsbixpLGEsZVswXSw3LC02ODA4NzY5MzYpLGE9ZyhhLHIsbixpLGVbMV0sMTIsLTM4OTU2NDU4NiksaT1nKGksYSxyLG4sZVsyXSwxNyw2MDYxMDU4MTkpLG49ZyhuLGksYSxyLGVbM10sMjIsLTEwNDQ1MjUzMzApLHI9ZyhyLG4saSxhLGVbNF0sNywtMTc2NDE4ODk3KSxhPWcoYSxyLG4saSxlWzVdLDEyLDEyMDAwODA0MjYpLGk9ZyhpLGEscixuLGVbNl0sMTcsLTE0NzMyMzEzNDEpLG49ZyhuLGksYSxyLGVbN10sMjIsLTQ1NzA1OTgzKSxyPWcocixuLGksYSxlWzhdLDcsMTc3MDAzNTQxNiksYT1nKGEscixuLGksZVs5XSwxMiwtMTk1ODQxNDQxNyksaT1nKGksYSxyLG4sZVsxMF0sMTcsLTQyMDYzKSxuPWcobixpLGEscixlWzExXSwyMiwtMTk5MDQwNDE2Mikscj1nKHIsbixpLGEsZVsxMl0sNywxODA0NjAzNjgyKSxhPWcoYSxyLG4saSxlWzEzXSwxMiwtNDAzNDExMDEpLGk9ZyhpLGEscixuLGVbMTRdLDE3LC0xNTAyMDAyMjkwKSxyPW0ocixuPWcobixpLGEscixlWzE1XSwyMiwxMjM2NTM1MzI5KSxpLGEsZVsxXSw1LC0xNjU3OTY1MTApLGE9bShhLHIsbixpLGVbNl0sOSwtMTA2OTUwMTYzMiksaT1tKGksYSxyLG4sZVsxMV0sMTQsNjQzNzE3NzEzKSxuPW0obixpLGEscixlWzBdLDIwLC0zNzM4OTczMDIpLHI9bShyLG4saSxhLGVbNV0sNSwtNzAxNTU4NjkxKSxhPW0oYSxyLG4saSxlWzEwXSw5LDM4MDE2MDgzKSxpPW0oaSxhLHIsbixlWzE1XSwxNCwtNjYwNDc4MzM1KSxuPW0obixpLGEscixlWzRdLDIwLC00MDU1Mzc4NDgpLHI9bShyLG4saSxhLGVbOV0sNSw1Njg0NDY0MzgpLGE9bShhLHIsbixpLGVbMTRdLDksLTEwMTk4MDM2OTApLGk9bShpLGEscixuLGVbM10sMTQsLTE4NzM2Mzk2MSksbj1tKG4saSxhLHIsZVs4XSwyMCwxMTYzNTMxNTAxKSxyPW0ocixuLGksYSxlWzEzXSw1LC0xNDQ0NjgxNDY3KSxhPW0oYSxyLG4saSxlWzJdLDksLTUxNDAzNzg0KSxpPW0oaSxhLHIsbixlWzddLDE0LDE3MzUzMjg0NzMpLHI9dihyLG49bShuLGksYSxyLGVbMTJdLDIwLC0xOTI2NjA3NzM0KSxpLGEsZVs1XSw0LC0zNzg1NTgpLGE9dihhLHIsbixpLGVbOF0sMTEsLTIwMjI1NzQ0NjMpLGk9dihpLGEscixuLGVbMTFdLDE2LDE4MzkwMzA1NjIpLG49dihuLGksYSxyLGVbMTRdLDIzLC0zNTMwOTU1Nikscj12KHIsbixpLGEsZVsxXSw0LC0xNTMwOTkyMDYwKSxhPXYoYSxyLG4saSxlWzRdLDExLDEyNzI4OTMzNTMpLGk9dihpLGEscixuLGVbN10sMTYsLTE1NTQ5NzYzMiksbj12KG4saSxhLHIsZVsxMF0sMjMsLTEwOTQ3MzA2NDApLHI9dihyLG4saSxhLGVbMTNdLDQsNjgxMjc5MTc0KSxhPXYoYSxyLG4saSxlWzBdLDExLC0zNTg1MzcyMjIpLGk9dihpLGEscixuLGVbM10sMTYsLTcyMjUyMTk3OSksbj12KG4saSxhLHIsZVs2XSwyMyw3NjAyOTE4OSkscj12KHIsbixpLGEsZVs5XSw0LC02NDAzNjQ0ODcpLGE9dihhLHIsbixpLGVbMTJdLDExLC00MjE4MTU4MzUpLGk9dihpLGEscixuLGVbMTVdLDE2LDUzMDc0MjUyMCkscj1iKHIsbj12KG4saSxhLHIsZVsyXSwyMywtOTk1MzM4NjUxKSxpLGEsZVswXSw2LC0xOTg2MzA4NDQpLGE9YihhLHIsbixpLGVbN10sMTAsMTEyNjg5MTQxNSksaT1iKGksYSxyLG4sZVsxNF0sMTUsLTE0MTYzNTQ5MDUpLG49YihuLGksYSxyLGVbNV0sMjEsLTU3NDM0MDU1KSxyPWIocixuLGksYSxlWzEyXSw2LDE3MDA0ODU1NzEpLGE9YihhLHIsbixpLGVbM10sMTAsLTE4OTQ5ODY2MDYpLGk9YihpLGEscixuLGVbMTBdLDE1LC0xMDUxNTIzKSxuPWIobixpLGEscixlWzFdLDIxLC0yMDU0OTIyNzk5KSxyPWIocixuLGksYSxlWzhdLDYsMTg3MzMxMzM1OSksYT1iKGEscixuLGksZVsxNV0sMTAsLTMwNjExNzQ0KSxpPWIoaSxhLHIsbixlWzZdLDE1LC0xNTYwMTk4MzgwKSxuPWIobixpLGEscixlWzEzXSwyMSwxMzA5MTUxNjQ5KSxyPWIocixuLGksYSxlWzRdLDYsLTE0NTUyMzA3MCksYT1iKGEscixuLGksZVsxMV0sMTAsLTExMjAyMTAzNzkpLGk9YihpLGEscixuLGVbMl0sMTUsNzE4Nzg3MjU5KSxuPWIobixpLGEscixlWzldLDIxLC0zNDM0ODU1NTEpLHRbMF09XyhyLHRbMF0pLHRbMV09XyhuLHRbMV0pLHRbMl09XyhpLHRbMl0pLHRbM109XyhhLHRbM10pfWZ1bmN0aW9uIHAodCxlLHIsbixpLGEpe3JldHVybiBlPV8oXyhlLHQpLF8obixhKSksXyhlPDxpfGU+Pj4zMi1pLHIpfWZ1bmN0aW9uIGcodCxlLHIsbixpLGEsbyl7cmV0dXJuIHAoZSZyfH5lJm4sdCxlLGksYSxvKX1mdW5jdGlvbiBtKHQsZSxyLG4saSxhLG8pe3JldHVybiBwKGUmbnxyJn5uLHQsZSxpLGEsbyl9ZnVuY3Rpb24gdih0LGUscixuLGksYSxvKXtyZXR1cm4gcChlXnJebix0LGUsaSxhLG8pfWZ1bmN0aW9uIGIodCxlLHIsbixpLGEsbyl7cmV0dXJuIHAocl4oZXx+biksdCxlLGksYSxvKX1mdW5jdGlvbiB5KHQpe3ZhciBlLHI9dC5sZW5ndGgsbj1bMTczMjU4NDE5MywtMjcxNzMzODc5LC0xNzMyNTg0MTk0LDI3MTczMzg3OF07Zm9yKGU9NjQ7ZTw9dC5sZW5ndGg7ZSs9NjQpZChuLHcodC5zdWJzdHJpbmcoZS02NCxlKSkpO3Q9dC5zdWJzdHJpbmcoZS02NCk7dmFyIGk9WzAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDBdO2ZvcihlPTA7ZTx0Lmxlbmd0aDtlKyspaVtlPj4yXXw9dC5jaGFyQ29kZUF0KGUpPDwoZSU0PDwzKTtpZihpW2U+PjJdfD0xMjg8PChlJTQ8PDMpLGU+NTUpZm9yKGQobixpKSxlPTA7ZTwxNjtlKyspaVtlXT0wO3JldHVybiBpWzE0XT04KnIsZChuLGkpLG59ZnVuY3Rpb24gdyh0KXt2YXIgZSxyPVtdO2ZvcihlPTA7ZTw2NDtlKz00KXJbZT4+Ml09dC5jaGFyQ29kZUF0KGUpKyh0LmNoYXJDb2RlQXQoZSsxKTw8OCkrKHQuY2hhckNvZGVBdChlKzIpPDwxNikrKHQuY2hhckNvZGVBdChlKzMpPDwyNCk7cmV0dXJuIHJ9dT1uLmF0b2IuYmluZChuKSxoPW4uYnRvYS5iaW5kKG4pO3ZhciBOPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLnNwbGl0KFwiXCIpO2Z1bmN0aW9uIEwodCl7Zm9yKHZhciBlPVwiXCIscj0wO3I8NDtyKyspZSs9Tlt0Pj44KnIrNCYxNV0rTlt0Pj44KnImMTVdO3JldHVybiBlfWZ1bmN0aW9uIEEodCl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKDI1NSZ0KT4+MCwoNjUyODAmdCk+PjgsKDE2NzExNjgwJnQpPj4xNiwoNDI3ODE5MDA4MCZ0KT4+MjQpfWZ1bmN0aW9uIHgodCl7cmV0dXJuIHkodCkubWFwKEEpLmpvaW4oXCJcIil9dmFyIFM9XCI1ZDQxNDAyYWJjNGIyYTc2Yjk3MTlkOTExMDE3YzU5MlwiIT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKyl0W2VdPUwodFtlXSk7cmV0dXJuIHQuam9pbihcIlwiKX0oeShcImhlbGxvXCIpKTtmdW5jdGlvbiBfKHQsZSl7aWYoUyl7dmFyIHI9KDY1NTM1JnQpKyg2NTUzNSZlKTtyZXR1cm4odD4+MTYpKyhlPj4xNikrKHI+PjE2KTw8MTZ8NjU1MzUmcn1yZXR1cm4gdCtlJjQyOTQ5NjcyOTV9XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBGUERGIGlzIHJlbGVhc2VkIHVuZGVyIGEgcGVybWlzc2l2ZSBsaWNlbnNlOiB0aGVyZSBpcyBubyB1c2FnZSByZXN0cmljdGlvbi5cbiAqIFlvdSBtYXkgZW1iZWQgaXQgZnJlZWx5IGluIHlvdXIgYXBwbGljYXRpb24gKGNvbW1lcmNpYWwgb3Igbm90KSwgd2l0aCBvclxuICogd2l0aG91dCBtb2RpZmljYXRpb25zLlxuICpcbiAqIFJlZmVyZW5jZTogaHR0cDovL3d3dy5mcGRmLm9yZy9lbi9zY3JpcHQvc2NyaXB0MzcucGhwXG4gKi9mdW5jdGlvbiBQKHQsZSl7dmFyIHIsbixpLGE7aWYodCE9PXIpe2Zvcih2YXIgbz0oaT10LGE9MSsoMjU2L3QubGVuZ3RoPj4wKSxuZXcgQXJyYXkoYSsxKS5qb2luKGkpKSxzPVtdLGM9MDtjPDI1NjtjKyspc1tjXT1jO3ZhciB1PTA7Zm9yKGM9MDtjPDI1NjtjKyspe3ZhciBoPXNbY107dT0odStoK28uY2hhckNvZGVBdChjKSklMjU2LHNbY109c1t1XSxzW3VdPWh9cj10LG49c31lbHNlIHM9bjt2YXIgbD1lLmxlbmd0aCxmPTAsZD0wLHA9XCJcIjtmb3IoYz0wO2M8bDtjKyspZD0oZCsoaD1zW2Y9KGYrMSklMjU2XSkpJTI1NixzW2ZdPXNbZF0sc1tkXT1oLG89c1soc1tmXStzW2RdKSUyNTZdLHArPVN0cmluZy5mcm9tQ2hhckNvZGUoZS5jaGFyQ29kZUF0KGMpXm8pO3JldHVybiBwfVxuLyoqXG4gKiBAbGljZW5zZVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKiBBdXRob3I6IE93ZW4gTGVvbmcgKEBvd2VubDEzMSlcbiAqIERhdGU6IDE1IE9jdCAyMDIwXG4gKiBSZWZlcmVuY2VzOlxuICogaHR0cHM6Ly93d3cuY3MuY211LmVkdS9+ZHN0L0Fkb2JlL0dhbGxlcnkvYW5vbjIxanVsMDEtcGRmLWVuY3J5cHRpb24udHh0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZm9saW9qcy9wZGZraXQvYmxvYi9tYXN0ZXIvbGliL3NlY3VyaXR5LmpzXG4gKiBodHRwOi8vd3d3LmZwZGYub3JnL2VuL3NjcmlwdC9zY3JpcHQzNy5waHBcbiAqL3ZhciBrPXtwcmludDo0LG1vZGlmeTo4LGNvcHk6MTYsXCJhbm5vdC1mb3Jtc1wiOjMyfTtmdW5jdGlvbiBJKHQsZSxyLG4pe3RoaXMudj0xLHRoaXMucj0yO3ZhciBpPTE5Mjt0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PWsucGVybSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBlcm1pc3Npb246IFwiK3QpO2krPWtbdF19KSksdGhpcy5wYWRkaW5nPVwiKMK/Tl5OdcKKQWRcXDBOVsO/w7pcdTAwMDFcXGIuLlxcMMK2w5BoPsKAL1xcZsKpw75kU2l6XCI7dmFyIGE9KGUrdGhpcy5wYWRkaW5nKS5zdWJzdHIoMCwzMiksbz0ocit0aGlzLnBhZGRpbmcpLnN1YnN0cigwLDMyKTt0aGlzLk89dGhpcy5wcm9jZXNzT3duZXJQYXNzd29yZChhLG8pLHRoaXMuUD0tKDErKDI1NV5pKSksdGhpcy5lbmNyeXB0aW9uS2V5PXgoYSt0aGlzLk8rdGhpcy5sc2JGaXJzdFdvcmQodGhpcy5QKSt0aGlzLmhleFRvQnl0ZXMobikpLnN1YnN0cigwLDUpLHRoaXMuVT1QKHRoaXMuZW5jcnlwdGlvbktleSx0aGlzLnBhZGRpbmcpfWZ1bmN0aW9uIEYodCl7aWYoL1teXFx1MDAwMC1cXHUwMGZmXS8udGVzdCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFBERiBOYW1lIE9iamVjdDogXCIrdCtcIiwgT25seSBhY2NlcHQgQVNDSUkgY2hhcmFjdGVycy5cIik7Zm9yKHZhciBlPVwiXCIscj10Lmxlbmd0aCxuPTA7bjxyO24rKyl7dmFyIGk9dC5jaGFyQ29kZUF0KG4pO2lmKGk8MzN8fDM1PT09aXx8Mzc9PT1pfHw0MD09PWl8fDQxPT09aXx8NDc9PT1pfHw2MD09PWl8fDYyPT09aXx8OTE9PT1pfHw5Mz09PWl8fDEyMz09PWl8fDEyNT09PWl8fGk+MTI2KWUrPVwiI1wiKyhcIjBcIitpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO2Vsc2UgZSs9dFtuXX1yZXR1cm4gZX1mdW5jdGlvbiBDKGUpe2lmKFwib2JqZWN0XCIhPT10KGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQ29udGV4dCBwYXNzZWQgdG8gaW5pdGlhbGl6ZSBQdWJTdWIgKGpzUERGLW1vZHVsZSlcIik7dmFyIHI9e307dGhpcy5zdWJzY3JpYmU9ZnVuY3Rpb24odCxlLG4pe2lmKG49bnx8ITEsXCJzdHJpbmdcIiE9dHlwZW9mIHR8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGV8fFwiYm9vbGVhblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8gUHViU3ViLnN1YnNjcmliZSAoanNQREYtbW9kdWxlKVwiKTtyLmhhc093blByb3BlcnR5KHQpfHwoclt0XT17fSk7dmFyIGk9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNSk7cmV0dXJuIHJbdF1baV09W2UsISFuXSxpfSx0aGlzLnVuc3Vic2NyaWJlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiByKWlmKHJbZV1bdF0pcmV0dXJuIGRlbGV0ZSByW2VdW3RdLDA9PT1PYmplY3Qua2V5cyhyW2VdKS5sZW5ndGgmJmRlbGV0ZSByW2VdLCEwO3JldHVybiExfSx0aGlzLnB1Ymxpc2g9ZnVuY3Rpb24odCl7aWYoci5oYXNPd25Qcm9wZXJ0eSh0KSl7dmFyIGk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpLG89W107Zm9yKHZhciBzIGluIHJbdF0pe3ZhciBjPXJbdF1bc107dHJ5e2NbMF0uYXBwbHkoZSxpKX1jYXRjaCh0KXtuLmNvbnNvbGUmJmEuZXJyb3IoXCJqc1BERiBQdWJTdWIgRXJyb3JcIix0Lm1lc3NhZ2UsdCl9Y1sxXSYmby5wdXNoKHMpfW8ubGVuZ3RoJiZvLmZvckVhY2godGhpcy51bnN1YnNjcmliZSl9fSx0aGlzLmdldFRvcGljcz1mdW5jdGlvbigpe3JldHVybiByfX1mdW5jdGlvbiBqKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGopKXJldHVybiBuZXcgaih0KTt2YXIgZT1cIm9wYWNpdHksc3Ryb2tlLW9wYWNpdHlcIi5zcGxpdChcIixcIik7Zm9yKHZhciByIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShyKSYmZS5pbmRleE9mKHIpPj0wJiYodGhpc1tyXT10W3JdKTt0aGlzLmlkPVwiXCIsdGhpcy5vYmplY3ROdW1iZXI9LTF9ZnVuY3Rpb24gTyh0LGUpe3RoaXMuZ1N0YXRlPXQsdGhpcy5tYXRyaXg9ZSx0aGlzLmlkPVwiXCIsdGhpcy5vYmplY3ROdW1iZXI9LTF9ZnVuY3Rpb24gQih0LGUscixuLGkpe2lmKCEodGhpcyBpbnN0YW5jZW9mIEIpKXJldHVybiBuZXcgQih0LGUscixuLGkpO3RoaXMudHlwZT1cImF4aWFsXCI9PT10PzI6Myx0aGlzLmNvb3Jkcz1lLHRoaXMuY29sb3JzPXIsTy5jYWxsKHRoaXMsbixpKX1mdW5jdGlvbiBNKHQsZSxyLG4saSl7aWYoISh0aGlzIGluc3RhbmNlb2YgTSkpcmV0dXJuIG5ldyBNKHQsZSxyLG4saSk7dGhpcy5ib3VuZGluZ0JveD10LHRoaXMueFN0ZXA9ZSx0aGlzLnlTdGVwPXIsdGhpcy5zdHJlYW09XCJcIix0aGlzLmNsb25lSW5kZXg9MCxPLmNhbGwodGhpcyxuLGkpfWZ1bmN0aW9uIEUoZSl7dmFyIHIsaT1cInN0cmluZ1wiPT10eXBlb2YgYXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTpcInBcIixvPWFyZ3VtZW50c1sxXSxzPWFyZ3VtZW50c1syXSxjPWFyZ3VtZW50c1szXSx1PVtdLGQ9MSxwPTE2LGc9XCJTXCIsbT1udWxsO1wib2JqZWN0XCI9PT10KGU9ZXx8e30pJiYoaT1lLm9yaWVudGF0aW9uLG89ZS51bml0fHxvLHM9ZS5mb3JtYXR8fHMsYz1lLmNvbXByZXNzfHxlLmNvbXByZXNzUGRmfHxjLG51bGwhPT0obT1lLmVuY3J5cHRpb258fG51bGwpJiYobS51c2VyUGFzc3dvcmQ9bS51c2VyUGFzc3dvcmR8fFwiXCIsbS5vd25lclBhc3N3b3JkPW0ub3duZXJQYXNzd29yZHx8XCJcIixtLnVzZXJQZXJtaXNzaW9ucz1tLnVzZXJQZXJtaXNzaW9uc3x8W10pLGQ9XCJudW1iZXJcIj09dHlwZW9mIGUudXNlclVuaXQ/TWF0aC5hYnMoZS51c2VyVW5pdCk6MSx2b2lkIDAhPT1lLnByZWNpc2lvbiYmKHI9ZS5wcmVjaXNpb24pLHZvaWQgMCE9PWUuZmxvYXRQcmVjaXNpb24mJihwPWUuZmxvYXRQcmVjaXNpb24pLGc9ZS5kZWZhdWx0UGF0aE9wZXJhdGlvbnx8XCJTXCIpLHU9ZS5maWx0ZXJzfHwoITA9PT1jP1tcIkZsYXRlRW5jb2RlXCJdOnUpLG89b3x8XCJtbVwiLGk9KFwiXCIrKGl8fFwiUFwiKSkudG9Mb3dlckNhc2UoKTt2YXIgdj1lLnB1dE9ubHlVc2VkRm9udHN8fCExLGI9e30seT17aW50ZXJuYWw6e30sX19wcml2YXRlX186e319O3kuX19wcml2YXRlX18uUHViU3ViPUM7dmFyIHc9XCIxLjNcIixOPXkuX19wcml2YXRlX18uZ2V0UGRmVmVyc2lvbj1mdW5jdGlvbigpe3JldHVybiB3fTt5Ll9fcHJpdmF0ZV9fLnNldFBkZlZlcnNpb249ZnVuY3Rpb24odCl7dz10fTt2YXIgTD17YTA6WzIzODMuOTQsMzM3MC4zOV0sYTE6WzE2ODMuNzgsMjM4My45NF0sYTI6WzExOTAuNTUsMTY4My43OF0sYTM6Wzg0MS44OSwxMTkwLjU1XSxhNDpbNTk1LjI4LDg0MS44OV0sYTU6WzQxOS41Myw1OTUuMjhdLGE2OlsyOTcuNjQsNDE5LjUzXSxhNzpbMjA5Ljc2LDI5Ny42NF0sYTg6WzE0Ny40LDIwOS43Nl0sYTk6WzEwNC44OCwxNDcuNF0sYTEwOls3My43LDEwNC44OF0sYjA6WzI4MzQuNjUsNDAwOC4xOV0sYjE6WzIwMDQuMDksMjgzNC42NV0sYjI6WzE0MTcuMzIsMjAwNC4wOV0sYjM6WzEwMDAuNjMsMTQxNy4zMl0sYjQ6WzcwOC42NiwxMDAwLjYzXSxiNTpbNDk4LjksNzA4LjY2XSxiNjpbMzU0LjMzLDQ5OC45XSxiNzpbMjQ5LjQ1LDM1NC4zM10sYjg6WzE3NS43NSwyNDkuNDVdLGI5OlsxMjQuNzIsMTc1Ljc1XSxiMTA6Wzg3Ljg3LDEyNC43Ml0sYzA6WzI1OTkuMzcsMzY3Ni41NF0sYzE6WzE4MzYuODUsMjU5OS4zN10sYzI6WzEyOTguMjcsMTgzNi44NV0sYzM6WzkxOC40MywxMjk4LjI3XSxjNDpbNjQ5LjEzLDkxOC40M10sYzU6WzQ1OS4yMSw2NDkuMTNdLGM2OlszMjMuMTUsNDU5LjIxXSxjNzpbMjI5LjYxLDMyMy4xNV0sYzg6WzE2MS41NywyMjkuNjFdLGM5OlsxMTMuMzksMTYxLjU3XSxjMTA6Wzc5LjM3LDExMy4zOV0sZGw6WzMxMS44MSw2MjMuNjJdLGxldHRlcjpbNjEyLDc5Ml0sXCJnb3Zlcm5tZW50LWxldHRlclwiOls1NzYsNzU2XSxsZWdhbDpbNjEyLDEwMDhdLFwianVuaW9yLWxlZ2FsXCI6WzU3NiwzNjBdLGxlZGdlcjpbMTIyNCw3OTJdLHRhYmxvaWQ6Wzc5MiwxMjI0XSxcImNyZWRpdC1jYXJkXCI6WzE1MywyNDNdfTt5Ll9fcHJpdmF0ZV9fLmdldFBhZ2VGb3JtYXRzPWZ1bmN0aW9uKCl7cmV0dXJuIEx9O3ZhciBBPXkuX19wcml2YXRlX18uZ2V0UGFnZUZvcm1hdD1mdW5jdGlvbih0KXtyZXR1cm4gTFt0XX07cz1zfHxcImE0XCI7dmFyIHg9e0NPTVBBVDpcImNvbXBhdFwiLEFEVkFOQ0VEOlwiYWR2YW5jZWRcIn0sUz14LkNPTVBBVDtmdW5jdGlvbiBfKCl7dGhpcy5zYXZlR3JhcGhpY3NTdGF0ZSgpLGx0KG5ldyBWdChfdCwwLDAsLV90LDAsUnIoKSpfdCkudG9TdHJpbmcoKStcIiBjbVwiKSx0aGlzLnNldEZvbnRTaXplKHRoaXMuZ2V0Rm9udFNpemUoKS9fdCksZz1cIm5cIixTPXguQURWQU5DRUR9ZnVuY3Rpb24gUCgpe3RoaXMucmVzdG9yZUdyYXBoaWNzU3RhdGUoKSxnPVwiU1wiLFM9eC5DT01QQVR9dmFyIGs9eS5fX3ByaXZhdGVfXy5jb21iaW5lRm9udFN0eWxlQW5kRm9udFdlaWdodD1mdW5jdGlvbih0LGUpe2lmKFwiYm9sZFwiPT10JiZcIm5vcm1hbFwiPT1lfHxcImJvbGRcIj09dCYmNDAwPT1lfHxcIm5vcm1hbFwiPT10JiZcIml0YWxpY1wiPT1lfHxcImJvbGRcIj09dCYmXCJpdGFsaWNcIj09ZSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIENvbWJpbmF0aW9uIG9mIGZvbnR3ZWlnaHQgYW5kIGZvbnRzdHlsZVwiKTtyZXR1cm4gZSYmKHQ9NDAwPT1lfHxcIm5vcm1hbFwiPT09ZT9cIml0YWxpY1wiPT09dD9cIml0YWxpY1wiOlwibm9ybWFsXCI6NzAwIT1lJiZcImJvbGRcIiE9PWV8fFwibm9ybWFsXCIhPT10Pyg3MDA9PWU/XCJib2xkXCI6ZSkrXCJcIit0OlwiYm9sZFwiKSx0fTt5LmFkdmFuY2VkQVBJPWZ1bmN0aW9uKHQpe3ZhciBlPVM9PT14LkNPTVBBVDtyZXR1cm4gZSYmXy5jYWxsKHRoaXMpLFwiZnVuY3Rpb25cIiE9dHlwZW9mIHR8fCh0KHRoaXMpLGUmJlAuY2FsbCh0aGlzKSksdGhpc30seS5jb21wYXRBUEk9ZnVuY3Rpb24odCl7dmFyIGU9Uz09PXguQURWQU5DRUQ7cmV0dXJuIGUmJlAuY2FsbCh0aGlzKSxcImZ1bmN0aW9uXCIhPXR5cGVvZiB0fHwodCh0aGlzKSxlJiZfLmNhbGwodGhpcykpLHRoaXN9LHkuaXNBZHZhbmNlZEFQST1mdW5jdGlvbigpe3JldHVybiBTPT09eC5BRFZBTkNFRH07dmFyIE8scT1mdW5jdGlvbih0KXtpZihTIT09eC5BRFZBTkNFRCl0aHJvdyBuZXcgRXJyb3IodCtcIiBpcyBvbmx5IGF2YWlsYWJsZSBpbiAnYWR2YW5jZWQnIEFQSSBtb2RlLiBZb3UgbmVlZCB0byBjYWxsIGFkdmFuY2VkQVBJKCkgZmlyc3QuXCIpfSxEPXkucm91bmRUb1ByZWNpc2lvbj15Ll9fcHJpdmF0ZV9fLnJvdW5kVG9QcmVjaXNpb249ZnVuY3Rpb24odCxlKXt2YXIgbj1yfHxlO2lmKGlzTmFOKHQpfHxpc05hTihuKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5yb3VuZFRvUHJlY2lzaW9uXCIpO3JldHVybiB0LnRvRml4ZWQobikucmVwbGFjZSgvMCskLyxcIlwiKX07Tz15LmhwZj15Ll9fcHJpdmF0ZV9fLmhwZj1cIm51bWJlclwiPT10eXBlb2YgcD9mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5ocGZcIik7cmV0dXJuIEQodCxwKX06XCJzbWFydFwiPT09cD9mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5ocGZcIik7cmV0dXJuIEQodCx0Pi0xJiZ0PDE/MTY6NSl9OmZ1bmN0aW9uKHQpe2lmKGlzTmFOKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLmhwZlwiKTtyZXR1cm4gRCh0LDE2KX07dmFyIFI9eS5mMj15Ll9fcHJpdmF0ZV9fLmYyPWZ1bmN0aW9uKHQpe2lmKGlzTmFOKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLmYyXCIpO3JldHVybiBEKHQsMil9LFQ9eS5fX3ByaXZhdGVfXy5mMz1mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5mM1wiKTtyZXR1cm4gRCh0LDMpfSxVPXkuc2NhbGU9eS5fX3ByaXZhdGVfXy5zY2FsZT1mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5zY2FsZVwiKTtyZXR1cm4gUz09PXguQ09NUEFUP3QqX3Q6Uz09PXguQURWQU5DRUQ/dDp2b2lkIDB9LHo9ZnVuY3Rpb24odCl7cmV0dXJuIFM9PT14LkNPTVBBVD9ScigpLXQ6Uz09PXguQURWQU5DRUQ/dDp2b2lkIDB9LEg9ZnVuY3Rpb24odCl7cmV0dXJuIFUoeih0KSl9O3kuX19wcml2YXRlX18uc2V0UHJlY2lzaW9uPXkuc2V0UHJlY2lzaW9uPWZ1bmN0aW9uKHQpe1wibnVtYmVyXCI9PXR5cGVvZiBwYXJzZUludCh0LDEwKSYmKHI9cGFyc2VJbnQodCwxMCkpfTt2YXIgVyxWPVwiMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDBcIixHPXkuX19wcml2YXRlX18uZ2V0RmlsZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFZ9LFk9eS5fX3ByaXZhdGVfXy5zZXRGaWxlSWQ9ZnVuY3Rpb24odCl7cmV0dXJuIFY9dm9pZCAwIT09dCYmL15bYS1mQS1GMC05XXszMn0kLy50ZXN0KHQpP3QudG9VcHBlckNhc2UoKTpWLnNwbGl0KFwiXCIpLm1hcCgoZnVuY3Rpb24oKXtyZXR1cm5cIkFCQ0RFRjAxMjM0NTY3ODlcIi5jaGFyQXQoTWF0aC5mbG9vcigxNipNYXRoLnJhbmRvbSgpKSl9KSkuam9pbihcIlwiKSxudWxsIT09bSYmKFllPW5ldyBJKG0udXNlclBlcm1pc3Npb25zLG0udXNlclBhc3N3b3JkLG0ub3duZXJQYXNzd29yZCxWKSksVn07eS5zZXRGaWxlSWQ9ZnVuY3Rpb24odCl7cmV0dXJuIFkodCksdGhpc30seS5nZXRGaWxlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gRygpfTt2YXIgSj15Ll9fcHJpdmF0ZV9fLmNvbnZlcnREYXRlVG9QREZEYXRlPWZ1bmN0aW9uKHQpe3ZhciBlPXQuZ2V0VGltZXpvbmVPZmZzZXQoKSxyPWU8MD9cIitcIjpcIi1cIixuPU1hdGguZmxvb3IoTWF0aC5hYnMoZS82MCkpLGk9TWF0aC5hYnMoZSU2MCksYT1bcixRKG4pLFwiJ1wiLFEoaSksXCInXCJdLmpvaW4oXCJcIik7cmV0dXJuW1wiRDpcIix0LmdldEZ1bGxZZWFyKCksUSh0LmdldE1vbnRoKCkrMSksUSh0LmdldERhdGUoKSksUSh0LmdldEhvdXJzKCkpLFEodC5nZXRNaW51dGVzKCkpLFEodC5nZXRTZWNvbmRzKCkpLGFdLmpvaW4oXCJcIil9LFg9eS5fX3ByaXZhdGVfXy5jb252ZXJ0UERGRGF0ZVRvRGF0ZT1mdW5jdGlvbih0KXt2YXIgZT1wYXJzZUludCh0LnN1YnN0cigyLDQpLDEwKSxyPXBhcnNlSW50KHQuc3Vic3RyKDYsMiksMTApLTEsbj1wYXJzZUludCh0LnN1YnN0cig4LDIpLDEwKSxpPXBhcnNlSW50KHQuc3Vic3RyKDEwLDIpLDEwKSxhPXBhcnNlSW50KHQuc3Vic3RyKDEyLDIpLDEwKSxvPXBhcnNlSW50KHQuc3Vic3RyKDE0LDIpLDEwKTtyZXR1cm4gbmV3IERhdGUoZSxyLG4saSxhLG8sMCl9LEs9eS5fX3ByaXZhdGVfXy5zZXRDcmVhdGlvbkRhdGU9ZnVuY3Rpb24odCl7dmFyIGU7aWYodm9pZCAwPT09dCYmKHQ9bmV3IERhdGUpLHQgaW5zdGFuY2VvZiBEYXRlKWU9Sih0KTtlbHNle2lmKCEvXkQ6KDIwWzAtMl1bMC05XXwyMDNbMC03XXwxOVs3LTldWzAtOV0pKDBbMC05XXwxWzAtMl0pKFswLTJdWzAtOV18M1swLTFdKSgwWzAtOV18MVswLTldfDJbMC0zXSkoMFswLTldfFsxLTVdWzAtOV0pKDBbMC05XXxbMS01XVswLTldKShcXCswWzAtOV18XFwrMVswLTRdfC0wWzAtOV18LTFbMC0xXSknKDBbMC05XXxbMS01XVswLTldKSc/JC8udGVzdCh0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5zZXRDcmVhdGlvbkRhdGVcIik7ZT10fXJldHVybiBXPWV9LFo9eS5fX3ByaXZhdGVfXy5nZXRDcmVhdGlvbkRhdGU9ZnVuY3Rpb24odCl7dmFyIGU9VztyZXR1cm5cImpzRGF0ZVwiPT09dCYmKGU9WChXKSksZX07eS5zZXRDcmVhdGlvbkRhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIEsodCksdGhpc30seS5nZXRDcmVhdGlvbkRhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIFoodCl9O3ZhciAkLFE9eS5fX3ByaXZhdGVfXy5wYWRkMj1mdW5jdGlvbih0KXtyZXR1cm4oXCIwXCIrcGFyc2VJbnQodCkpLnNsaWNlKC0yKX0sdHQ9eS5fX3ByaXZhdGVfXy5wYWRkMkhleD1mdW5jdGlvbih0KXtyZXR1cm4oXCIwMFwiKyh0PXQudG9TdHJpbmcoKSkpLnN1YnN0cih0Lmxlbmd0aCl9LGV0PTAscnQ9W10sbnQ9W10saXQ9MCxhdD1bXSxvdD1bXSxzdD0hMSxjdD1udCx1dD1mdW5jdGlvbigpe2V0PTAsaXQ9MCxudD1bXSxydD1bXSxhdD1bXSxRdD1LdCgpLHRlPUt0KCl9O3kuX19wcml2YXRlX18uc2V0Q3VzdG9tT3V0cHV0RGVzdGluYXRpb249ZnVuY3Rpb24odCl7c3Q9ITAsY3Q9dH07dmFyIGh0PWZ1bmN0aW9uKHQpe3N0fHwoY3Q9dCl9O3kuX19wcml2YXRlX18ucmVzZXRDdXN0b21PdXRwdXREZXN0aW5hdGlvbj1mdW5jdGlvbigpe3N0PSExLGN0PW50fTt2YXIgbHQ9eS5fX3ByaXZhdGVfXy5vdXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dC50b1N0cmluZygpLGl0Kz10Lmxlbmd0aCsxLGN0LnB1c2godCksY3R9LGZ0PXkuX19wcml2YXRlX18ud3JpdGU9ZnVuY3Rpb24odCl7cmV0dXJuIGx0KDE9PT1hcmd1bWVudHMubGVuZ3RoP3QudG9TdHJpbmcoKTpBcnJheS5wcm90b3R5cGUuam9pbi5jYWxsKGFyZ3VtZW50cyxcIiBcIikpfSxkdD15Ll9fcHJpdmF0ZV9fLmdldEFycmF5QnVmZmVyPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lmxlbmd0aCxyPW5ldyBBcnJheUJ1ZmZlcihlKSxuPW5ldyBVaW50OEFycmF5KHIpO2UtLTspbltlXT10LmNoYXJDb2RlQXQoZSk7cmV0dXJuIHJ9LHB0PVtbXCJIZWx2ZXRpY2FcIixcImhlbHZldGljYVwiLFwibm9ybWFsXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiSGVsdmV0aWNhLUJvbGRcIixcImhlbHZldGljYVwiLFwiYm9sZFwiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIkhlbHZldGljYS1PYmxpcXVlXCIsXCJoZWx2ZXRpY2FcIixcIml0YWxpY1wiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiLFwiaGVsdmV0aWNhXCIsXCJib2xkaXRhbGljXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiQ291cmllclwiLFwiY291cmllclwiLFwibm9ybWFsXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiQ291cmllci1Cb2xkXCIsXCJjb3VyaWVyXCIsXCJib2xkXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiQ291cmllci1PYmxpcXVlXCIsXCJjb3VyaWVyXCIsXCJpdGFsaWNcIixcIldpbkFuc2lFbmNvZGluZ1wiXSxbXCJDb3VyaWVyLUJvbGRPYmxpcXVlXCIsXCJjb3VyaWVyXCIsXCJib2xkaXRhbGljXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiVGltZXMtUm9tYW5cIixcInRpbWVzXCIsXCJub3JtYWxcIixcIldpbkFuc2lFbmNvZGluZ1wiXSxbXCJUaW1lcy1Cb2xkXCIsXCJ0aW1lc1wiLFwiYm9sZFwiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIlRpbWVzLUl0YWxpY1wiLFwidGltZXNcIixcIml0YWxpY1wiLFwiV2luQW5zaUVuY29kaW5nXCJdLFtcIlRpbWVzLUJvbGRJdGFsaWNcIixcInRpbWVzXCIsXCJib2xkaXRhbGljXCIsXCJXaW5BbnNpRW5jb2RpbmdcIl0sW1wiWmFwZkRpbmdiYXRzXCIsXCJ6YXBmZGluZ2JhdHNcIixcIm5vcm1hbFwiLG51bGxdLFtcIlN5bWJvbFwiLFwic3ltYm9sXCIsXCJub3JtYWxcIixudWxsXV07eS5fX3ByaXZhdGVfXy5nZXRTdGFuZGFyZEZvbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHB0fTt2YXIgZ3Q9ZS5mb250U2l6ZXx8MTY7eS5fX3ByaXZhdGVfXy5zZXRGb250U2l6ZT15LnNldEZvbnRTaXplPWZ1bmN0aW9uKHQpe3JldHVybiBndD1TPT09eC5BRFZBTkNFRD90L190OnQsdGhpc307dmFyIG10LHZ0PXkuX19wcml2YXRlX18uZ2V0Rm9udFNpemU9eS5nZXRGb250U2l6ZT1mdW5jdGlvbigpe3JldHVybiBTPT09eC5DT01QQVQ/Z3Q6Z3QqX3R9LGJ0PWUuUjJMfHwhMTt5Ll9fcHJpdmF0ZV9fLnNldFIyTD15LnNldFIyTD1mdW5jdGlvbih0KXtyZXR1cm4gYnQ9dCx0aGlzfSx5Ll9fcHJpdmF0ZV9fLmdldFIyTD15LmdldFIyTD1mdW5jdGlvbigpe3JldHVybiBidH07dmFyIHl0LHd0PXkuX19wcml2YXRlX18uc2V0Wm9vbU1vZGU9ZnVuY3Rpb24odCl7dmFyIGU9W3ZvaWQgMCxudWxsLFwiZnVsbHdpZHRoXCIsXCJmdWxsaGVpZ2h0XCIsXCJmdWxscGFnZVwiLFwib3JpZ2luYWxcIl07aWYoL14oPzpcXGQrXFwuXFxkKnxcXGQqXFwuXFxkK3xcXGQrKSUkLy50ZXN0KHQpKW10PXQ7ZWxzZSBpZihpc05hTih0KSl7aWYoLTE9PT1lLmluZGV4T2YodCkpdGhyb3cgbmV3IEVycm9yKCd6b29tIG11c3QgYmUgSW50ZWdlciAoZS5nLiAyKSwgYSBwZXJjZW50YWdlIFZhbHVlIChlLmcuIDMwMCUpIG9yIGZ1bGx3aWR0aCwgZnVsbGhlaWdodCwgZnVsbHBhZ2UsIG9yaWdpbmFsLiBcIicrdCsnXCIgaXMgbm90IHJlY29nbml6ZWQuJyk7bXQ9dH1lbHNlIG10PXBhcnNlSW50KHQsMTApfTt5Ll9fcHJpdmF0ZV9fLmdldFpvb21Nb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIG10fTt2YXIgTnQsTHQ9eS5fX3ByaXZhdGVfXy5zZXRQYWdlTW9kZT1mdW5jdGlvbih0KXtpZigtMT09W3ZvaWQgMCxudWxsLFwiVXNlTm9uZVwiLFwiVXNlT3V0bGluZXNcIixcIlVzZVRodW1ic1wiLFwiRnVsbFNjcmVlblwiXS5pbmRleE9mKHQpKXRocm93IG5ldyBFcnJvcignUGFnZSBtb2RlIG11c3QgYmUgb25lIG9mIFVzZU5vbmUsIFVzZU91dGxpbmVzLCBVc2VUaHVtYnMsIG9yIEZ1bGxTY3JlZW4uIFwiJyt0KydcIiBpcyBub3QgcmVjb2duaXplZC4nKTt5dD10fTt5Ll9fcHJpdmF0ZV9fLmdldFBhZ2VNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHl0fTt2YXIgQXQ9eS5fX3ByaXZhdGVfXy5zZXRMYXlvdXRNb2RlPWZ1bmN0aW9uKHQpe2lmKC0xPT1bdm9pZCAwLG51bGwsXCJjb250aW51b3VzXCIsXCJzaW5nbGVcIixcInR3b2xlZnRcIixcInR3b3JpZ2h0XCIsXCJ0d29cIl0uaW5kZXhPZih0KSl0aHJvdyBuZXcgRXJyb3IoJ0xheW91dCBtb2RlIG11c3QgYmUgb25lIG9mIGNvbnRpbnVvdXMsIHNpbmdsZSwgdHdvbGVmdCwgdHdvcmlnaHQuIFwiJyt0KydcIiBpcyBub3QgcmVjb2duaXplZC4nKTtOdD10fTt5Ll9fcHJpdmF0ZV9fLmdldExheW91dE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTnR9LHkuX19wcml2YXRlX18uc2V0RGlzcGxheU1vZGU9eS5zZXREaXNwbGF5TW9kZT1mdW5jdGlvbih0LGUscil7cmV0dXJuIHd0KHQpLEF0KGUpLEx0KHIpLHRoaXN9O3ZhciB4dD17dGl0bGU6XCJcIixzdWJqZWN0OlwiXCIsYXV0aG9yOlwiXCIsa2V5d29yZHM6XCJcIixjcmVhdG9yOlwiXCJ9O3kuX19wcml2YXRlX18uZ2V0RG9jdW1lbnRQcm9wZXJ0eT1mdW5jdGlvbih0KXtpZigtMT09PU9iamVjdC5rZXlzKHh0KS5pbmRleE9mKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLmdldERvY3VtZW50UHJvcGVydHlcIik7cmV0dXJuIHh0W3RdfSx5Ll9fcHJpdmF0ZV9fLmdldERvY3VtZW50UHJvcGVydGllcz1mdW5jdGlvbigpe3JldHVybiB4dH0seS5fX3ByaXZhdGVfXy5zZXREb2N1bWVudFByb3BlcnRpZXM9eS5zZXRQcm9wZXJ0aWVzPXkuc2V0RG9jdW1lbnRQcm9wZXJ0aWVzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiB4dCl4dC5oYXNPd25Qcm9wZXJ0eShlKSYmdFtlXSYmKHh0W2VdPXRbZV0pO3JldHVybiB0aGlzfSx5Ll9fcHJpdmF0ZV9fLnNldERvY3VtZW50UHJvcGVydHk9ZnVuY3Rpb24odCxlKXtpZigtMT09PU9iamVjdC5rZXlzKHh0KS5pbmRleE9mKHQpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5zZXREb2N1bWVudFByb3BlcnR5XCIpO3JldHVybiB4dFt0XT1lfTt2YXIgU3QsX3QsUHQsa3QsSXQsRnQ9e30sQ3Q9e30sanQ9W10sT3Q9e30sQnQ9e30sTXQ9e30sRXQ9e30scXQ9bnVsbCxEdD0wLFJ0PVtdLFR0PW5ldyBDKHkpLFV0PWUuaG90Zml4ZXN8fFtdLHp0PXt9LEh0PXt9LFd0PVtdLFZ0PWZ1bmN0aW9uIHQoZSxyLG4saSxhLG8pe2lmKCEodGhpcyBpbnN0YW5jZW9mIHQpKXJldHVybiBuZXcgdChlLHIsbixpLGEsbyk7aXNOYU4oZSkmJihlPTEpLGlzTmFOKHIpJiYocj0wKSxpc05hTihuKSYmKG49MCksaXNOYU4oaSkmJihpPTEpLGlzTmFOKGEpJiYoYT0wKSxpc05hTihvKSYmKG89MCksdGhpcy5fbWF0cml4PVtlLHIsbixpLGEsb119O09iamVjdC5kZWZpbmVQcm9wZXJ0eShWdC5wcm90b3R5cGUsXCJzeFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF0cml4WzBdfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fbWF0cml4WzBdPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LnByb3RvdHlwZSxcInNoeVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF0cml4WzFdfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fbWF0cml4WzFdPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LnByb3RvdHlwZSxcInNoeFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF0cml4WzJdfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fbWF0cml4WzJdPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LnByb3RvdHlwZSxcInN5XCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9tYXRyaXhbM119LHNldDpmdW5jdGlvbih0KXt0aGlzLl9tYXRyaXhbM109dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoVnQucHJvdG90eXBlLFwidHhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21hdHJpeFs0XX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX21hdHJpeFs0XT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdC5wcm90b3R5cGUsXCJ0eVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF0cml4WzVdfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fbWF0cml4WzVdPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LnByb3RvdHlwZSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21hdHJpeFswXX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX21hdHJpeFswXT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdC5wcm90b3R5cGUsXCJiXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9tYXRyaXhbMV19LHNldDpmdW5jdGlvbih0KXt0aGlzLl9tYXRyaXhbMV09dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoVnQucHJvdG90eXBlLFwiY1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF0cml4WzJdfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fbWF0cml4WzJdPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LnByb3RvdHlwZSxcImRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21hdHJpeFszXX0sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX21hdHJpeFszXT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdC5wcm90b3R5cGUsXCJlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9tYXRyaXhbNF19LHNldDpmdW5jdGlvbih0KXt0aGlzLl9tYXRyaXhbNF09dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoVnQucHJvdG90eXBlLFwiZlwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbWF0cml4WzVdfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fbWF0cml4WzVdPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LnByb3RvdHlwZSxcInJvdGF0aW9uXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBNYXRoLmF0YW4yKHRoaXMuc2h4LHRoaXMuc3gpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdC5wcm90b3R5cGUsXCJzY2FsZVhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGVjb21wb3NlKCkuc2NhbGUuc3h9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ0LnByb3RvdHlwZSxcInNjYWxlWVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kZWNvbXBvc2UoKS5zY2FsZS5zeX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoVnQucHJvdG90eXBlLFwiaXNJZGVudGl0eVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gMT09PXRoaXMuc3gmJigwPT09dGhpcy5zaHkmJigwPT09dGhpcy5zaHgmJigxPT09dGhpcy5zeSYmKDA9PT10aGlzLnR4JiYwPT09dGhpcy50eSkpKSl9fSksVnQucHJvdG90eXBlLmpvaW49ZnVuY3Rpb24odCl7cmV0dXJuW3RoaXMuc3gsdGhpcy5zaHksdGhpcy5zaHgsdGhpcy5zeSx0aGlzLnR4LHRoaXMudHldLm1hcChPKS5qb2luKHQpfSxWdC5wcm90b3R5cGUubXVsdGlwbHk9ZnVuY3Rpb24odCl7dmFyIGU9dC5zeCp0aGlzLnN4K3Quc2h5KnRoaXMuc2h4LHI9dC5zeCp0aGlzLnNoeSt0LnNoeSp0aGlzLnN5LG49dC5zaHgqdGhpcy5zeCt0LnN5KnRoaXMuc2h4LGk9dC5zaHgqdGhpcy5zaHkrdC5zeSp0aGlzLnN5LGE9dC50eCp0aGlzLnN4K3QudHkqdGhpcy5zaHgrdGhpcy50eCxvPXQudHgqdGhpcy5zaHkrdC50eSp0aGlzLnN5K3RoaXMudHk7cmV0dXJuIG5ldyBWdChlLHIsbixpLGEsbyl9LFZ0LnByb3RvdHlwZS5kZWNvbXBvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN4LGU9dGhpcy5zaHkscj10aGlzLnNoeCxuPXRoaXMuc3ksaT10aGlzLnR4LGE9dGhpcy50eSxvPU1hdGguc3FydCh0KnQrZSplKSxzPSh0Lz1vKSpyKyhlLz1vKSpuO3ItPXQqcyxuLT1lKnM7dmFyIGM9TWF0aC5zcXJ0KHIqcituKm4pO3JldHVybiBzLz1jLHQqKG4vPWMpPGUqKHIvPWMpJiYodD0tdCxlPS1lLHM9LXMsbz0tbykse3NjYWxlOm5ldyBWdChvLDAsMCxjLDAsMCksdHJhbnNsYXRlOm5ldyBWdCgxLDAsMCwxLGksYSkscm90YXRlOm5ldyBWdCh0LGUsLWUsdCwwLDApLHNrZXc6bmV3IFZ0KDEsMCxzLDEsMCwwKX19LFZ0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5qb2luKFwiIFwiKX0sVnQucHJvdG90eXBlLmludmVyc2VkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5zeCxlPXRoaXMuc2h5LHI9dGhpcy5zaHgsbj10aGlzLnN5LGk9dGhpcy50eCxhPXRoaXMudHksbz0xLyh0Km4tZSpyKSxzPW4qbyxjPS1lKm8sdT0tcipvLGg9dCpvO3JldHVybiBuZXcgVnQocyxjLHUsaCwtcyppLXUqYSwtYyppLWgqYSl9LFZ0LnByb3RvdHlwZS5hcHBseVRvUG9pbnQ9ZnVuY3Rpb24odCl7dmFyIGU9dC54KnRoaXMuc3grdC55KnRoaXMuc2h4K3RoaXMudHgscj10LngqdGhpcy5zaHkrdC55KnRoaXMuc3krdGhpcy50eTtyZXR1cm4gbmV3IENyKGUscil9LFZ0LnByb3RvdHlwZS5hcHBseVRvUmVjdGFuZ2xlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYXBwbHlUb1BvaW50KHQpLHI9dGhpcy5hcHBseVRvUG9pbnQobmV3IENyKHQueCt0LncsdC55K3QuaCkpO3JldHVybiBuZXcganIoZS54LGUueSxyLngtZS54LHIueS1lLnkpfSxWdC5wcm90b3R5cGUuY2xvbmU9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnN4LGU9dGhpcy5zaHkscj10aGlzLnNoeCxuPXRoaXMuc3ksaT10aGlzLnR4LGE9dGhpcy50eTtyZXR1cm4gbmV3IFZ0KHQsZSxyLG4saSxhKX0seS5NYXRyaXg9VnQ7dmFyIEd0PXkubWF0cml4TXVsdD1mdW5jdGlvbih0LGUpe3JldHVybiBlLm11bHRpcGx5KHQpfSxZdD1uZXcgVnQoMSwwLDAsMSwwLDApO3kudW5pdE1hdHJpeD15LmlkZW50aXR5TWF0cml4PVl0O3ZhciBKdD1mdW5jdGlvbih0LGUpe2lmKCFCdFt0XSl7dmFyIHI9KGUgaW5zdGFuY2VvZiBCP1wiU2hcIjpcIlBcIikrKE9iamVjdC5rZXlzKE90KS5sZW5ndGgrMSkudG9TdHJpbmcoMTApO2UuaWQ9cixCdFt0XT1yLE90W3JdPWUsVHQucHVibGlzaChcImFkZFBhdHRlcm5cIixlKX19O3kuU2hhZGluZ1BhdHRlcm49Qix5LlRpbGluZ1BhdHRlcm49TSx5LmFkZFNoYWRpbmdQYXR0ZXJuPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHEoXCJhZGRTaGFkaW5nUGF0dGVybigpXCIpLEp0KHQsZSksdGhpc30seS5iZWdpblRpbGluZ1BhdHRlcm49ZnVuY3Rpb24odCl7cShcImJlZ2luVGlsaW5nUGF0dGVybigpXCIpLEJyKHQuYm91bmRpbmdCb3hbMF0sdC5ib3VuZGluZ0JveFsxXSx0LmJvdW5kaW5nQm94WzJdLXQuYm91bmRpbmdCb3hbMF0sdC5ib3VuZGluZ0JveFszXS10LmJvdW5kaW5nQm94WzFdLHQubWF0cml4KX0seS5lbmRUaWxpbmdQYXR0ZXJuPWZ1bmN0aW9uKHQsZSl7cShcImVuZFRpbGluZ1BhdHRlcm4oKVwiKSxlLnN0cmVhbT1vdFskXS5qb2luKFwiXFxuXCIpLEp0KHQsZSksVHQucHVibGlzaChcImVuZFRpbGluZ1BhdHRlcm5cIixlKSxXdC5wb3AoKS5yZXN0b3JlKCl9O3ZhciBYdD15Ll9fcHJpdmF0ZV9fLm5ld09iamVjdD1mdW5jdGlvbigpe3ZhciB0PUt0KCk7cmV0dXJuIFp0KHQsITApLHR9LEt0PXkuX19wcml2YXRlX18ubmV3T2JqZWN0RGVmZXJyZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXQrKyxydFtldF09ZnVuY3Rpb24oKXtyZXR1cm4gaXR9LGV0fSxadD1mdW5jdGlvbih0LGUpe3JldHVybiBlPVwiYm9vbGVhblwiPT10eXBlb2YgZSYmZSxydFt0XT1pdCxlJiZsdCh0K1wiIDAgb2JqXCIpLHR9LCR0PXkuX19wcml2YXRlX18ubmV3QWRkaXRpb25hbE9iamVjdD1mdW5jdGlvbigpe3ZhciB0PXtvYmpJZDpLdCgpLGNvbnRlbnQ6XCJcIn07cmV0dXJuIGF0LnB1c2godCksdH0sUXQ9S3QoKSx0ZT1LdCgpLGVlPXkuX19wcml2YXRlX18uZGVjb2RlQ29sb3JTdHJpbmc9ZnVuY3Rpb24odCl7dmFyIGU9dC5zcGxpdChcIiBcIik7aWYoMiE9PWUubGVuZ3RofHxcImdcIiE9PWVbMV0mJlwiR1wiIT09ZVsxXSl7aWYoNT09PWUubGVuZ3RoJiYoXCJrXCI9PT1lWzRdfHxcIktcIj09PWVbNF0pKXtlPVsoMS1lWzBdKSooMS1lWzNdKSwoMS1lWzFdKSooMS1lWzNdKSwoMS1lWzJdKSooMS1lWzNdKSxcInJcIl19fWVsc2V7dmFyIHI9cGFyc2VGbG9hdChlWzBdKTtlPVtyLHIscixcInJcIl19Zm9yKHZhciBuPVwiI1wiLGk9MDtpPDM7aSsrKW4rPShcIjBcIitNYXRoLmZsb29yKDI1NSpwYXJzZUZsb2F0KGVbaV0pKS50b1N0cmluZygxNikpLnNsaWNlKC0yKTtyZXR1cm4gbn0scmU9eS5fX3ByaXZhdGVfXy5lbmNvZGVDb2xvclN0cmluZz1mdW5jdGlvbihlKXt2YXIgcjtcInN0cmluZ1wiPT10eXBlb2YgZSYmKGU9e2NoMTplfSk7dmFyIG49ZS5jaDEsaT1lLmNoMixhPWUuY2gzLG89ZS5jaDQscz1cImRyYXdcIj09PWUucGRmQ29sb3JUeXBlP1tcIkdcIixcIlJHXCIsXCJLXCJdOltcImdcIixcInJnXCIsXCJrXCJdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuJiZcIiNcIiE9PW4uY2hhckF0KDApKXt2YXIgYz1uZXcgZihuKTtpZihjLm9rKW49Yy50b0hleCgpO2Vsc2UgaWYoIS9eXFxkKlxcLj9cXGQqJC8udGVzdChuKSl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29sb3IgXCInK24rJ1wiIHBhc3NlZCB0byBqc1BERi5lbmNvZGVDb2xvclN0cmluZy4nKX1pZihcInN0cmluZ1wiPT10eXBlb2YgbiYmL14jWzAtOUEtRmEtZl17M30kLy50ZXN0KG4pJiYobj1cIiNcIituWzFdK25bMV0rblsyXStuWzJdK25bM10rblszXSksXCJzdHJpbmdcIj09dHlwZW9mIG4mJi9eI1swLTlBLUZhLWZdezZ9JC8udGVzdChuKSl7dmFyIHU9cGFyc2VJbnQobi5zdWJzdHIoMSksMTYpO249dT4+MTYmMjU1LGk9dT4+OCYyNTUsYT0yNTUmdX1pZih2b2lkIDA9PT1pfHx2b2lkIDA9PT1vJiZuPT09aSYmaT09PWEpaWYoXCJzdHJpbmdcIj09dHlwZW9mIG4pcj1uK1wiIFwiK3NbMF07ZWxzZSBzd2l0Y2goZS5wcmVjaXNpb24pe2Nhc2UgMjpyPVIobi8yNTUpK1wiIFwiK3NbMF07YnJlYWs7Y2FzZSAzOmRlZmF1bHQ6cj1UKG4vMjU1KStcIiBcIitzWzBdfWVsc2UgaWYodm9pZCAwPT09b3x8XCJvYmplY3RcIj09PXQobykpe2lmKG8mJiFpc05hTihvLmEpJiYwPT09by5hKXJldHVybiByPVtcIjEuXCIsXCIxLlwiLFwiMS5cIixzWzFdXS5qb2luKFwiIFwiKTtpZihcInN0cmluZ1wiPT10eXBlb2YgbilyPVtuLGksYSxzWzFdXS5qb2luKFwiIFwiKTtlbHNlIHN3aXRjaChlLnByZWNpc2lvbil7Y2FzZSAyOnI9W1Iobi8yNTUpLFIoaS8yNTUpLFIoYS8yNTUpLHNbMV1dLmpvaW4oXCIgXCIpO2JyZWFrO2RlZmF1bHQ6Y2FzZSAzOnI9W1Qobi8yNTUpLFQoaS8yNTUpLFQoYS8yNTUpLHNbMV1dLmpvaW4oXCIgXCIpfX1lbHNlIGlmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXI9W24saSxhLG8sc1syXV0uam9pbihcIiBcIik7ZWxzZSBzd2l0Y2goZS5wcmVjaXNpb24pe2Nhc2UgMjpyPVtSKG4pLFIoaSksUihhKSxSKG8pLHNbMl1dLmpvaW4oXCIgXCIpO2JyZWFrO2Nhc2UgMzpkZWZhdWx0OnI9W1QobiksVChpKSxUKGEpLFQobyksc1syXV0uam9pbihcIiBcIil9cmV0dXJuIHJ9LG5lPXkuX19wcml2YXRlX18uZ2V0RmlsdGVycz1mdW5jdGlvbigpe3JldHVybiB1fSxpZT15Ll9fcHJpdmF0ZV9fLnB1dFN0cmVhbT1mdW5jdGlvbih0KXt2YXIgZT0odD10fHx7fSkuZGF0YXx8XCJcIixyPXQuZmlsdGVyc3x8bmUoKSxuPXQuYWxyZWFkeUFwcGxpZWRGaWx0ZXJzfHxbXSxpPXQuYWRkTGVuZ3RoMXx8ITEsYT1lLmxlbmd0aCxvPXQub2JqZWN0SWQscz1mdW5jdGlvbih0KXtyZXR1cm4gdH07aWYobnVsbCE9PW0mJnZvaWQgMD09PW8pdGhyb3cgbmV3IEVycm9yKFwiT2JqZWN0SWQgbXVzdCBiZSBwYXNzZWQgdG8gcHV0U3RyZWFtIGZvciBmaWxlIGVuY3J5cHRpb25cIik7bnVsbCE9PW0mJihzPVllLmVuY3J5cHRvcihvLDApKTt2YXIgYz17fTshMD09PXImJihyPVtcIkZsYXRlRW5jb2RlXCJdKTt2YXIgdT10LmFkZGl0aW9uYWxLZXlWYWx1ZXN8fFtdLGg9KGM9dm9pZCAwIT09RS5BUEkucHJvY2Vzc0RhdGFCeUZpbHRlcnM/RS5BUEkucHJvY2Vzc0RhdGFCeUZpbHRlcnMoZSxyKTp7ZGF0YTplLHJldmVyc2VDaGFpbjpbXX0pLnJldmVyc2VDaGFpbisoQXJyYXkuaXNBcnJheShuKT9uLmpvaW4oXCIgXCIpOm4udG9TdHJpbmcoKSk7aWYoMCE9PWMuZGF0YS5sZW5ndGgmJih1LnB1c2goe2tleTpcIkxlbmd0aFwiLHZhbHVlOmMuZGF0YS5sZW5ndGh9KSwhMD09PWkmJnUucHVzaCh7a2V5OlwiTGVuZ3RoMVwiLHZhbHVlOmF9KSksMCE9aC5sZW5ndGgpaWYoaC5zcGxpdChcIi9cIikubGVuZ3RoLTE9PTEpdS5wdXNoKHtrZXk6XCJGaWx0ZXJcIix2YWx1ZTpofSk7ZWxzZXt1LnB1c2goe2tleTpcIkZpbHRlclwiLHZhbHVlOlwiW1wiK2grXCJdXCJ9KTtmb3IodmFyIGw9MDtsPHUubGVuZ3RoO2wrPTEpaWYoXCJEZWNvZGVQYXJtc1wiPT09dVtsXS5rZXkpe2Zvcih2YXIgZj1bXSxkPTA7ZDxjLnJldmVyc2VDaGFpbi5zcGxpdChcIi9cIikubGVuZ3RoLTE7ZCs9MSlmLnB1c2goXCJudWxsXCIpO2YucHVzaCh1W2xdLnZhbHVlKSx1W2xdLnZhbHVlPVwiW1wiK2Yuam9pbihcIiBcIikrXCJdXCJ9fWx0KFwiPDxcIik7Zm9yKHZhciBwPTA7cDx1Lmxlbmd0aDtwKyspbHQoXCIvXCIrdVtwXS5rZXkrXCIgXCIrdVtwXS52YWx1ZSk7bHQoXCI+PlwiKSwwIT09Yy5kYXRhLmxlbmd0aCYmKGx0KFwic3RyZWFtXCIpLGx0KHMoYy5kYXRhKSksbHQoXCJlbmRzdHJlYW1cIikpfSxhZT15Ll9fcHJpdmF0ZV9fLnB1dFBhZ2U9ZnVuY3Rpb24odCl7dmFyIGU9dC5udW1iZXIscj10LmRhdGEsbj10Lm9iaklkLGk9dC5jb250ZW50c09iaklkO1p0KG4sITApLGx0KFwiPDwvVHlwZSAvUGFnZVwiKSxsdChcIi9QYXJlbnQgXCIrdC5yb290RGljdGlvbmFyeU9iaklkK1wiIDAgUlwiKSxsdChcIi9SZXNvdXJjZXMgXCIrdC5yZXNvdXJjZURpY3Rpb25hcnlPYmpJZCtcIiAwIFJcIiksbHQoXCIvTWVkaWFCb3ggW1wiK3BhcnNlRmxvYXQoTyh0Lm1lZGlhQm94LmJvdHRvbUxlZnRYKSkrXCIgXCIrcGFyc2VGbG9hdChPKHQubWVkaWFCb3guYm90dG9tTGVmdFkpKStcIiBcIitPKHQubWVkaWFCb3gudG9wUmlnaHRYKStcIiBcIitPKHQubWVkaWFCb3gudG9wUmlnaHRZKStcIl1cIiksbnVsbCE9PXQuY3JvcEJveCYmbHQoXCIvQ3JvcEJveCBbXCIrTyh0LmNyb3BCb3guYm90dG9tTGVmdFgpK1wiIFwiK08odC5jcm9wQm94LmJvdHRvbUxlZnRZKStcIiBcIitPKHQuY3JvcEJveC50b3BSaWdodFgpK1wiIFwiK08odC5jcm9wQm94LnRvcFJpZ2h0WSkrXCJdXCIpLG51bGwhPT10LmJsZWVkQm94JiZsdChcIi9CbGVlZEJveCBbXCIrTyh0LmJsZWVkQm94LmJvdHRvbUxlZnRYKStcIiBcIitPKHQuYmxlZWRCb3guYm90dG9tTGVmdFkpK1wiIFwiK08odC5ibGVlZEJveC50b3BSaWdodFgpK1wiIFwiK08odC5ibGVlZEJveC50b3BSaWdodFkpK1wiXVwiKSxudWxsIT09dC50cmltQm94JiZsdChcIi9UcmltQm94IFtcIitPKHQudHJpbUJveC5ib3R0b21MZWZ0WCkrXCIgXCIrTyh0LnRyaW1Cb3guYm90dG9tTGVmdFkpK1wiIFwiK08odC50cmltQm94LnRvcFJpZ2h0WCkrXCIgXCIrTyh0LnRyaW1Cb3gudG9wUmlnaHRZKStcIl1cIiksbnVsbCE9PXQuYXJ0Qm94JiZsdChcIi9BcnRCb3ggW1wiK08odC5hcnRCb3guYm90dG9tTGVmdFgpK1wiIFwiK08odC5hcnRCb3guYm90dG9tTGVmdFkpK1wiIFwiK08odC5hcnRCb3gudG9wUmlnaHRYKStcIiBcIitPKHQuYXJ0Qm94LnRvcFJpZ2h0WSkrXCJdXCIpLFwibnVtYmVyXCI9PXR5cGVvZiB0LnVzZXJVbml0JiYxIT09dC51c2VyVW5pdCYmbHQoXCIvVXNlclVuaXQgXCIrdC51c2VyVW5pdCksVHQucHVibGlzaChcInB1dFBhZ2VcIix7b2JqSWQ6bixwYWdlQ29udGV4dDpSdFtlXSxwYWdlTnVtYmVyOmUscGFnZTpyfSksbHQoXCIvQ29udGVudHMgXCIraStcIiAwIFJcIiksbHQoXCI+PlwiKSxsdChcImVuZG9ialwiKTt2YXIgYT1yLmpvaW4oXCJcXG5cIik7cmV0dXJuIFM9PT14LkFEVkFOQ0VEJiYoYSs9XCJcXG5RXCIpLFp0KGksITApLGllKHtkYXRhOmEsZmlsdGVyczpuZSgpLG9iamVjdElkOml9KSxsdChcImVuZG9ialwiKSxufSxvZT15Ll9fcHJpdmF0ZV9fLnB1dFBhZ2VzPWZ1bmN0aW9uKCl7dmFyIHQsZSxyPVtdO2Zvcih0PTE7dDw9RHQ7dCsrKVJ0W3RdLm9iaklkPUt0KCksUnRbdF0uY29udGVudHNPYmpJZD1LdCgpO2Zvcih0PTE7dDw9RHQ7dCsrKXIucHVzaChhZSh7bnVtYmVyOnQsZGF0YTpvdFt0XSxvYmpJZDpSdFt0XS5vYmpJZCxjb250ZW50c09iaklkOlJ0W3RdLmNvbnRlbnRzT2JqSWQsbWVkaWFCb3g6UnRbdF0ubWVkaWFCb3gsY3JvcEJveDpSdFt0XS5jcm9wQm94LGJsZWVkQm94OlJ0W3RdLmJsZWVkQm94LHRyaW1Cb3g6UnRbdF0udHJpbUJveCxhcnRCb3g6UnRbdF0uYXJ0Qm94LHVzZXJVbml0OlJ0W3RdLnVzZXJVbml0LHJvb3REaWN0aW9uYXJ5T2JqSWQ6UXQscmVzb3VyY2VEaWN0aW9uYXJ5T2JqSWQ6dGV9KSk7WnQoUXQsITApLGx0KFwiPDwvVHlwZSAvUGFnZXNcIik7dmFyIG49XCIvS2lkcyBbXCI7Zm9yKGU9MDtlPER0O2UrKyluKz1yW2VdK1wiIDAgUiBcIjtsdChuK1wiXVwiKSxsdChcIi9Db3VudCBcIitEdCksbHQoXCI+PlwiKSxsdChcImVuZG9ialwiKSxUdC5wdWJsaXNoKFwicG9zdFB1dFBhZ2VzXCIpfSxzZT1mdW5jdGlvbih0KXtUdC5wdWJsaXNoKFwicHV0Rm9udFwiLHtmb250OnQsb3V0Omx0LG5ld09iamVjdDpYdCxwdXRTdHJlYW06aWV9KSwhMCE9PXQuaXNBbHJlYWR5UHV0dGVkJiYodC5vYmplY3ROdW1iZXI9WHQoKSxsdChcIjw8XCIpLGx0KFwiL1R5cGUgL0ZvbnRcIiksbHQoXCIvQmFzZUZvbnQgL1wiK0YodC5wb3N0U2NyaXB0TmFtZSkpLGx0KFwiL1N1YnR5cGUgL1R5cGUxXCIpLFwic3RyaW5nXCI9PXR5cGVvZiB0LmVuY29kaW5nJiZsdChcIi9FbmNvZGluZyAvXCIrdC5lbmNvZGluZyksbHQoXCIvRmlyc3RDaGFyIDMyXCIpLGx0KFwiL0xhc3RDaGFyIDI1NVwiKSxsdChcIj4+XCIpLGx0KFwiZW5kb2JqXCIpKX0sY2U9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gRnQpRnQuaGFzT3duUHJvcGVydHkodCkmJighMT09PXZ8fCEwPT09diYmYi5oYXNPd25Qcm9wZXJ0eSh0KSkmJnNlKEZ0W3RdKX0sdWU9ZnVuY3Rpb24odCl7dC5vYmplY3ROdW1iZXI9WHQoKTt2YXIgZT1bXTtlLnB1c2goe2tleTpcIlR5cGVcIix2YWx1ZTpcIi9YT2JqZWN0XCJ9KSxlLnB1c2goe2tleTpcIlN1YnR5cGVcIix2YWx1ZTpcIi9Gb3JtXCJ9KSxlLnB1c2goe2tleTpcIkJCb3hcIix2YWx1ZTpcIltcIitbTyh0LngpLE8odC55KSxPKHQueCt0LndpZHRoKSxPKHQueSt0LmhlaWdodCldLmpvaW4oXCIgXCIpK1wiXVwifSksZS5wdXNoKHtrZXk6XCJNYXRyaXhcIix2YWx1ZTpcIltcIit0Lm1hdHJpeC50b1N0cmluZygpK1wiXVwifSk7dmFyIHI9dC5wYWdlc1sxXS5qb2luKFwiXFxuXCIpO2llKHtkYXRhOnIsYWRkaXRpb25hbEtleVZhbHVlczplLG9iamVjdElkOnQub2JqZWN0TnVtYmVyfSksbHQoXCJlbmRvYmpcIil9LGhlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHp0KXp0Lmhhc093blByb3BlcnR5KHQpJiZ1ZSh6dFt0XSl9LGxlPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbj1bXSxpPTEvKGUtMSk7Zm9yKHI9MDtyPDE7cis9aSluLnB1c2gocik7aWYobi5wdXNoKDEpLDAhPXRbMF0ub2Zmc2V0KXt2YXIgYT17b2Zmc2V0OjAsY29sb3I6dFswXS5jb2xvcn07dC51bnNoaWZ0KGEpfWlmKDEhPXRbdC5sZW5ndGgtMV0ub2Zmc2V0KXt2YXIgbz17b2Zmc2V0OjEsY29sb3I6dFt0Lmxlbmd0aC0xXS5jb2xvcn07dC5wdXNoKG8pfWZvcih2YXIgcz1cIlwiLGM9MCx1PTA7dTxuLmxlbmd0aDt1Kyspe2ZvcihyPW5bdV07cj50W2MrMV0ub2Zmc2V0OyljKys7dmFyIGg9dFtjXS5vZmZzZXQsbD0oci1oKS8odFtjKzFdLm9mZnNldC1oKSxmPXRbY10uY29sb3IsZD10W2MrMV0uY29sb3I7cys9dHQoTWF0aC5yb3VuZCgoMS1sKSpmWzBdK2wqZFswXSkudG9TdHJpbmcoMTYpKSt0dChNYXRoLnJvdW5kKCgxLWwpKmZbMV0rbCpkWzFdKS50b1N0cmluZygxNikpK3R0KE1hdGgucm91bmQoKDEtbCkqZlsyXStsKmRbMl0pLnRvU3RyaW5nKDE2KSl9cmV0dXJuIHMudHJpbSgpfSxmZT1mdW5jdGlvbih0LGUpe2V8fChlPTIxKTt2YXIgcj1YdCgpLG49bGUodC5jb2xvcnMsZSksaT1bXTtpLnB1c2goe2tleTpcIkZ1bmN0aW9uVHlwZVwiLHZhbHVlOlwiMFwifSksaS5wdXNoKHtrZXk6XCJEb21haW5cIix2YWx1ZTpcIlswLjAgMS4wXVwifSksaS5wdXNoKHtrZXk6XCJTaXplXCIsdmFsdWU6XCJbXCIrZStcIl1cIn0pLGkucHVzaCh7a2V5OlwiQml0c1BlclNhbXBsZVwiLHZhbHVlOlwiOFwifSksaS5wdXNoKHtrZXk6XCJSYW5nZVwiLHZhbHVlOlwiWzAuMCAxLjAgMC4wIDEuMCAwLjAgMS4wXVwifSksaS5wdXNoKHtrZXk6XCJEZWNvZGVcIix2YWx1ZTpcIlswLjAgMS4wIDAuMCAxLjAgMC4wIDEuMF1cIn0pLGllKHtkYXRhOm4sYWRkaXRpb25hbEtleVZhbHVlczppLGFscmVhZHlBcHBsaWVkRmlsdGVyczpbXCIvQVNDSUlIZXhEZWNvZGVcIl0sb2JqZWN0SWQ6cn0pLGx0KFwiZW5kb2JqXCIpLHQub2JqZWN0TnVtYmVyPVh0KCksbHQoXCI8PCAvU2hhZGluZ1R5cGUgXCIrdC50eXBlKSxsdChcIi9Db2xvclNwYWNlIC9EZXZpY2VSR0JcIik7dmFyIGE9XCIvQ29vcmRzIFtcIitPKHBhcnNlRmxvYXQodC5jb29yZHNbMF0pKStcIiBcIitPKHBhcnNlRmxvYXQodC5jb29yZHNbMV0pKStcIiBcIjsyPT09dC50eXBlP2ErPU8ocGFyc2VGbG9hdCh0LmNvb3Jkc1syXSkpK1wiIFwiK08ocGFyc2VGbG9hdCh0LmNvb3Jkc1szXSkpOmErPU8ocGFyc2VGbG9hdCh0LmNvb3Jkc1syXSkpK1wiIFwiK08ocGFyc2VGbG9hdCh0LmNvb3Jkc1szXSkpK1wiIFwiK08ocGFyc2VGbG9hdCh0LmNvb3Jkc1s0XSkpK1wiIFwiK08ocGFyc2VGbG9hdCh0LmNvb3Jkc1s1XSkpLGx0KGErPVwiXVwiKSx0Lm1hdHJpeCYmbHQoXCIvTWF0cml4IFtcIit0Lm1hdHJpeC50b1N0cmluZygpK1wiXVwiKSxsdChcIi9GdW5jdGlvbiBcIityK1wiIDAgUlwiKSxsdChcIi9FeHRlbmQgW3RydWUgdHJ1ZV1cIiksbHQoXCI+PlwiKSxsdChcImVuZG9ialwiKX0sZGU9ZnVuY3Rpb24odCxlKXt2YXIgcj1LdCgpLG49WHQoKTtlLnB1c2goe3Jlc291cmNlc09pZDpyLG9iamVjdE9pZDpufSksdC5vYmplY3ROdW1iZXI9bjt2YXIgaT1bXTtpLnB1c2goe2tleTpcIlR5cGVcIix2YWx1ZTpcIi9QYXR0ZXJuXCJ9KSxpLnB1c2goe2tleTpcIlBhdHRlcm5UeXBlXCIsdmFsdWU6XCIxXCJ9KSxpLnB1c2goe2tleTpcIlBhaW50VHlwZVwiLHZhbHVlOlwiMVwifSksaS5wdXNoKHtrZXk6XCJUaWxpbmdUeXBlXCIsdmFsdWU6XCIxXCJ9KSxpLnB1c2goe2tleTpcIkJCb3hcIix2YWx1ZTpcIltcIit0LmJvdW5kaW5nQm94Lm1hcChPKS5qb2luKFwiIFwiKStcIl1cIn0pLGkucHVzaCh7a2V5OlwiWFN0ZXBcIix2YWx1ZTpPKHQueFN0ZXApfSksaS5wdXNoKHtrZXk6XCJZU3RlcFwiLHZhbHVlOk8odC55U3RlcCl9KSxpLnB1c2goe2tleTpcIlJlc291cmNlc1wiLHZhbHVlOnIrXCIgMCBSXCJ9KSx0Lm1hdHJpeCYmaS5wdXNoKHtrZXk6XCJNYXRyaXhcIix2YWx1ZTpcIltcIit0Lm1hdHJpeC50b1N0cmluZygpK1wiXVwifSksaWUoe2RhdGE6dC5zdHJlYW0sYWRkaXRpb25hbEtleVZhbHVlczppLG9iamVjdElkOnQub2JqZWN0TnVtYmVyfSksbHQoXCJlbmRvYmpcIil9LHBlPWZ1bmN0aW9uKHQpe3ZhciBlO2ZvcihlIGluIE90KU90Lmhhc093blByb3BlcnR5KGUpJiYoT3RbZV1pbnN0YW5jZW9mIEI/ZmUoT3RbZV0pOk90W2VdaW5zdGFuY2VvZiBNJiZkZShPdFtlXSx0KSl9LGdlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiB0Lm9iamVjdE51bWJlcj1YdCgpLGx0KFwiPDxcIiksdClzd2l0Y2goZSl7Y2FzZVwib3BhY2l0eVwiOmx0KFwiL2NhIFwiK1IodFtlXSkpO2JyZWFrO2Nhc2VcInN0cm9rZS1vcGFjaXR5XCI6bHQoXCIvQ0EgXCIrUih0W2VdKSl9bHQoXCI+PlwiKSxsdChcImVuZG9ialwiKX0sbWU9ZnVuY3Rpb24oKXt2YXIgdDtmb3IodCBpbiBNdClNdC5oYXNPd25Qcm9wZXJ0eSh0KSYmZ2UoTXRbdF0pfSx2ZT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiBsdChcIi9YT2JqZWN0IDw8XCIpLHp0KXp0Lmhhc093blByb3BlcnR5KHQpJiZ6dFt0XS5vYmplY3ROdW1iZXI+PTAmJmx0KFwiL1wiK3QrXCIgXCIrenRbdF0ub2JqZWN0TnVtYmVyK1wiIDAgUlwiKTtUdC5wdWJsaXNoKFwicHV0WG9iamVjdERpY3RcIiksbHQoXCI+PlwiKX0sYmU9ZnVuY3Rpb24oKXtZZS5vaWQ9WHQoKSxsdChcIjw8XCIpLGx0KFwiL0ZpbHRlciAvU3RhbmRhcmRcIiksbHQoXCIvViBcIitZZS52KSxsdChcIi9SIFwiK1llLnIpLGx0KFwiL1UgPFwiK1llLnRvSGV4U3RyaW5nKFllLlUpK1wiPlwiKSxsdChcIi9PIDxcIitZZS50b0hleFN0cmluZyhZZS5PKStcIj5cIiksbHQoXCIvUCBcIitZZS5QKSxsdChcIj4+XCIpLGx0KFwiZW5kb2JqXCIpfSx5ZT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiBsdChcIi9Gb250IDw8XCIpLEZ0KUZ0Lmhhc093blByb3BlcnR5KHQpJiYoITE9PT12fHwhMD09PXYmJmIuaGFzT3duUHJvcGVydHkodCkpJiZsdChcIi9cIit0K1wiIFwiK0Z0W3RdLm9iamVjdE51bWJlcitcIiAwIFJcIik7bHQoXCI+PlwiKX0sd2U9ZnVuY3Rpb24oKXtpZihPYmplY3Qua2V5cyhPdCkubGVuZ3RoPjApe2Zvcih2YXIgdCBpbiBsdChcIi9TaGFkaW5nIDw8XCIpLE90KU90Lmhhc093blByb3BlcnR5KHQpJiZPdFt0XWluc3RhbmNlb2YgQiYmT3RbdF0ub2JqZWN0TnVtYmVyPj0wJiZsdChcIi9cIit0K1wiIFwiK090W3RdLm9iamVjdE51bWJlcitcIiAwIFJcIik7VHQucHVibGlzaChcInB1dFNoYWRpbmdQYXR0ZXJuRGljdFwiKSxsdChcIj4+XCIpfX0sTmU9ZnVuY3Rpb24odCl7aWYoT2JqZWN0LmtleXMoT3QpLmxlbmd0aD4wKXtmb3IodmFyIGUgaW4gbHQoXCIvUGF0dGVybiA8PFwiKSxPdClPdC5oYXNPd25Qcm9wZXJ0eShlKSYmT3RbZV1pbnN0YW5jZW9mIHkuVGlsaW5nUGF0dGVybiYmT3RbZV0ub2JqZWN0TnVtYmVyPj0wJiZPdFtlXS5vYmplY3ROdW1iZXI8dCYmbHQoXCIvXCIrZStcIiBcIitPdFtlXS5vYmplY3ROdW1iZXIrXCIgMCBSXCIpO1R0LnB1Ymxpc2goXCJwdXRUaWxpbmdQYXR0ZXJuRGljdFwiKSxsdChcIj4+XCIpfX0sTGU9ZnVuY3Rpb24oKXtpZihPYmplY3Qua2V5cyhNdCkubGVuZ3RoPjApe3ZhciB0O2Zvcih0IGluIGx0KFwiL0V4dEdTdGF0ZSA8PFwiKSxNdClNdC5oYXNPd25Qcm9wZXJ0eSh0KSYmTXRbdF0ub2JqZWN0TnVtYmVyPj0wJiZsdChcIi9cIit0K1wiIFwiK010W3RdLm9iamVjdE51bWJlcitcIiAwIFJcIik7VHQucHVibGlzaChcInB1dEdTdGF0ZURpY3RcIiksbHQoXCI+PlwiKX19LEFlPWZ1bmN0aW9uKHQpe1p0KHQucmVzb3VyY2VzT2lkLCEwKSxsdChcIjw8XCIpLGx0KFwiL1Byb2NTZXQgWy9QREYgL1RleHQgL0ltYWdlQiAvSW1hZ2VDIC9JbWFnZUldXCIpLHllKCksd2UoKSxOZSh0Lm9iamVjdE9pZCksTGUoKSx2ZSgpLGx0KFwiPj5cIiksbHQoXCJlbmRvYmpcIil9LHhlPWZ1bmN0aW9uKCl7dmFyIHQ9W107Y2UoKSxtZSgpLGhlKCkscGUodCksVHQucHVibGlzaChcInB1dFJlc291cmNlc1wiKSx0LmZvckVhY2goQWUpLEFlKHtyZXNvdXJjZXNPaWQ6dGUsb2JqZWN0T2lkOk51bWJlci5NQVhfU0FGRV9JTlRFR0VSfSksVHQucHVibGlzaChcInBvc3RQdXRSZXNvdXJjZXNcIil9LFNlPWZ1bmN0aW9uKCl7VHQucHVibGlzaChcInB1dEFkZGl0aW9uYWxPYmplY3RzXCIpO2Zvcih2YXIgdD0wO3Q8YXQubGVuZ3RoO3QrKyl7dmFyIGU9YXRbdF07WnQoZS5vYmpJZCwhMCksbHQoZS5jb250ZW50KSxsdChcImVuZG9ialwiKX1UdC5wdWJsaXNoKFwicG9zdFB1dEFkZGl0aW9uYWxPYmplY3RzXCIpfSxfZT1mdW5jdGlvbih0KXtDdFt0LmZvbnROYW1lXT1DdFt0LmZvbnROYW1lXXx8e30sQ3RbdC5mb250TmFtZV1bdC5mb250U3R5bGVdPXQuaWR9LFBlPWZ1bmN0aW9uKHQsZSxyLG4saSl7dmFyIGE9e2lkOlwiRlwiKyhPYmplY3Qua2V5cyhGdCkubGVuZ3RoKzEpLnRvU3RyaW5nKDEwKSxwb3N0U2NyaXB0TmFtZTp0LGZvbnROYW1lOmUsZm9udFN0eWxlOnIsZW5jb2Rpbmc6bixpc1N0YW5kYXJkRm9udDppfHwhMSxtZXRhZGF0YTp7fX07cmV0dXJuIFR0LnB1Ymxpc2goXCJhZGRGb250XCIse2ZvbnQ6YSxpbnN0YW5jZTp0aGlzfSksRnRbYS5pZF09YSxfZShhKSxhLmlkfSxrZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxyPXB0Lmxlbmd0aDtlPHI7ZSsrKXt2YXIgbj1QZS5jYWxsKHRoaXMsdFtlXVswXSx0W2VdWzFdLHRbZV1bMl0scHRbZV1bM10sITApOyExPT09diYmKGJbbl09ITApO3ZhciBpPXRbZV1bMF0uc3BsaXQoXCItXCIpO19lKHtpZDpuLGZvbnROYW1lOmlbMF0sZm9udFN0eWxlOmlbMV18fFwiXCJ9KX1UdC5wdWJsaXNoKFwiYWRkRm9udHNcIix7Zm9udHM6RnQsZGljdGlvbmFyeTpDdH0pfSxJZT1mdW5jdGlvbih0KXtyZXR1cm4gdC5mb289ZnVuY3Rpb24oKXt0cnl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfWNhdGNoKHQpe3ZhciBlPXQuc3RhY2t8fFwiXCI7fmUuaW5kZXhPZihcIiBhdCBcIikmJihlPWUuc3BsaXQoXCIgYXQgXCIpWzFdKTt2YXIgcj1cIkVycm9yIGluIGZ1bmN0aW9uIFwiK2Uuc3BsaXQoXCJcXG5cIilbMF0uc3BsaXQoXCI8XCIpWzBdK1wiOiBcIit0Lm1lc3NhZ2U7aWYoIW4uY29uc29sZSl0aHJvdyBuZXcgRXJyb3Iocik7bi5jb25zb2xlLmVycm9yKHIsdCksbi5hbGVydCYmYWxlcnQocil9fSx0LmZvby5iYXI9dCx0LmZvb30sRmU9ZnVuY3Rpb24odCxlKXt2YXIgcixuLGksYSxvLHMsYyx1LGg7aWYoaT0oZT1lfHx7fSkuc291cmNlRW5jb2Rpbmd8fFwiVW5pY29kZVwiLG89ZS5vdXRwdXRFbmNvZGluZywoZS5hdXRvZW5jb2RlfHxvKSYmRnRbU3RdLm1ldGFkYXRhJiZGdFtTdF0ubWV0YWRhdGFbaV0mJkZ0W1N0XS5tZXRhZGF0YVtpXS5lbmNvZGluZyYmKGE9RnRbU3RdLm1ldGFkYXRhW2ldLmVuY29kaW5nLCFvJiZGdFtTdF0uZW5jb2RpbmcmJihvPUZ0W1N0XS5lbmNvZGluZyksIW8mJmEuY29kZVBhZ2VzJiYobz1hLmNvZGVQYWdlc1swXSksXCJzdHJpbmdcIj09dHlwZW9mIG8mJihvPWFbb10pLG8pKXtmb3IoYz0hMSxzPVtdLHI9MCxuPXQubGVuZ3RoO3I8bjtyKyspKHU9b1t0LmNoYXJDb2RlQXQocildKT9zLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh1KSk6cy5wdXNoKHRbcl0pLHNbcl0uY2hhckNvZGVBdCgwKT4+OCYmKGM9ITApO3Q9cy5qb2luKFwiXCIpfWZvcihyPXQubGVuZ3RoO3ZvaWQgMD09PWMmJjAhPT1yOyl0LmNoYXJDb2RlQXQoci0xKT4+OCYmKGM9ITApLHItLTtpZighYylyZXR1cm4gdDtmb3Iocz1lLm5vQk9NP1tdOlsyNTQsMjU1XSxyPTAsbj10Lmxlbmd0aDtyPG47cisrKXtpZigoaD0odT10LmNoYXJDb2RlQXQocikpPj44KT4+OCl0aHJvdyBuZXcgRXJyb3IoXCJDaGFyYWN0ZXIgYXQgcG9zaXRpb24gXCIrcitcIiBvZiBzdHJpbmcgJ1wiK3QrXCInIGV4Y2VlZHMgMTZiaXRzLiBDYW5ub3QgYmUgZW5jb2RlZCBpbnRvIFVDUy0yIEJFXCIpO3MucHVzaChoKSxzLnB1c2godS0oaDw8OCkpfXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KHZvaWQgMCxzKX0sQ2U9eS5fX3ByaXZhdGVfXy5wZGZFc2NhcGU9eS5wZGZFc2NhcGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gRmUodCxlKS5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKS5yZXBsYWNlKC9cXCgvZyxcIlxcXFwoXCIpLnJlcGxhY2UoL1xcKS9nLFwiXFxcXClcIil9LGplPXkuX19wcml2YXRlX18uYmVnaW5QYWdlPWZ1bmN0aW9uKHQpe290WysrRHRdPVtdLFJ0W0R0XT17b2JqSWQ6MCxjb250ZW50c09iaklkOjAsdXNlclVuaXQ6TnVtYmVyKGQpLGFydEJveDpudWxsLGJsZWVkQm94Om51bGwsY3JvcEJveDpudWxsLHRyaW1Cb3g6bnVsbCxtZWRpYUJveDp7Ym90dG9tTGVmdFg6MCxib3R0b21MZWZ0WTowLHRvcFJpZ2h0WDpOdW1iZXIodFswXSksdG9wUmlnaHRZOk51bWJlcih0WzFdKX19LE1lKER0KSxodChvdFskXSl9LE9lPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbixvO3N3aXRjaChpPWV8fGksXCJzdHJpbmdcIj09dHlwZW9mIHQmJihyPUEodC50b0xvd2VyQ2FzZSgpKSxBcnJheS5pc0FycmF5KHIpJiYobj1yWzBdLG89clsxXSkpLEFycmF5LmlzQXJyYXkodCkmJihuPXRbMF0qX3Qsbz10WzFdKl90KSxpc05hTihuKSYmKG49c1swXSxvPXNbMV0pLChuPjE0NDAwfHxvPjE0NDAwKSYmKGEud2FybihcIkEgcGFnZSBpbiBhIFBERiBjYW4gbm90IGJlIHdpZGVyIG9yIHRhbGxlciB0aGFuIDE0NDAwIHVzZXJVbml0LiBqc1BERiBsaW1pdHMgdGhlIHdpZHRoL2hlaWdodCB0byAxNDQwMFwiKSxuPU1hdGgubWluKDE0NDAwLG4pLG89TWF0aC5taW4oMTQ0MDAsbykpLHM9W24sb10saS5zdWJzdHIoMCwxKSl7Y2FzZVwibFwiOm8+biYmKHM9W28sbl0pO2JyZWFrO2Nhc2VcInBcIjpuPm8mJihzPVtvLG5dKX1qZShzKSxwcihmciksbHQoTHIpLDAhPT1rciYmbHQoa3IrXCIgSlwiKSwwIT09SXImJmx0KElyK1wiIGpcIiksVHQucHVibGlzaChcImFkZFBhZ2VcIix7cGFnZU51bWJlcjpEdH0pfSxCZT1mdW5jdGlvbih0KXt0PjAmJnQ8PUR0JiYob3Quc3BsaWNlKHQsMSksUnQuc3BsaWNlKHQsMSksRHQtLSwkPkR0JiYoJD1EdCksdGhpcy5zZXRQYWdlKCQpKX0sTWU9ZnVuY3Rpb24odCl7dD4wJiZ0PD1EdCYmKCQ9dCl9LEVlPXkuX19wcml2YXRlX18uZ2V0TnVtYmVyT2ZQYWdlcz15LmdldE51bWJlck9mUGFnZXM9ZnVuY3Rpb24oKXtyZXR1cm4gb3QubGVuZ3RoLTF9LHFlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpPXZvaWQgMDtyZXR1cm4gcj1yfHx7fSx0PXZvaWQgMCE9PXQ/dDpGdFtTdF0uZm9udE5hbWUsZT12b2lkIDAhPT1lP2U6RnRbU3RdLmZvbnRTdHlsZSxuPXQudG9Mb3dlckNhc2UoKSx2b2lkIDAhPT1DdFtuXSYmdm9pZCAwIT09Q3Rbbl1bZV0/aT1DdFtuXVtlXTp2b2lkIDAhPT1DdFt0XSYmdm9pZCAwIT09Q3RbdF1bZV0/aT1DdFt0XVtlXTohMT09PXIuZGlzYWJsZVdhcm5pbmcmJmEud2FybihcIlVuYWJsZSB0byBsb29rIHVwIGZvbnQgbGFiZWwgZm9yIGZvbnQgJ1wiK3QrXCInLCAnXCIrZStcIicuIFJlZmVyIHRvIGdldEZvbnRMaXN0KCkgZm9yIGF2YWlsYWJsZSBmb250cy5cIiksaXx8ci5ub0ZhbGxiYWNrfHxudWxsPT0oaT1DdC50aW1lc1tlXSkmJihpPUN0LnRpbWVzLm5vcm1hbCksaX0sRGU9eS5fX3ByaXZhdGVfXy5wdXRJbmZvPWZ1bmN0aW9uKCl7dmFyIHQ9WHQoKSxlPWZ1bmN0aW9uKHQpe3JldHVybiB0fTtmb3IodmFyIHIgaW4gbnVsbCE9PW0mJihlPVllLmVuY3J5cHRvcih0LDApKSxsdChcIjw8XCIpLGx0KFwiL1Byb2R1Y2VyIChcIitDZShlKFwianNQREYgXCIrRS52ZXJzaW9uKSkrXCIpXCIpLHh0KXh0Lmhhc093blByb3BlcnR5KHIpJiZ4dFtyXSYmbHQoXCIvXCIrci5zdWJzdHIoMCwxKS50b1VwcGVyQ2FzZSgpK3Iuc3Vic3RyKDEpK1wiIChcIitDZShlKHh0W3JdKSkrXCIpXCIpO2x0KFwiL0NyZWF0aW9uRGF0ZSAoXCIrQ2UoZShXKSkrXCIpXCIpLGx0KFwiPj5cIiksbHQoXCJlbmRvYmpcIil9LFJlPXkuX19wcml2YXRlX18ucHV0Q2F0YWxvZz1mdW5jdGlvbih0KXt2YXIgZT0odD10fHx7fSkucm9vdERpY3Rpb25hcnlPYmpJZHx8UXQ7c3dpdGNoKFh0KCksbHQoXCI8PFwiKSxsdChcIi9UeXBlIC9DYXRhbG9nXCIpLGx0KFwiL1BhZ2VzIFwiK2UrXCIgMCBSXCIpLG10fHwobXQ9XCJmdWxsd2lkdGhcIiksbXQpe2Nhc2VcImZ1bGx3aWR0aFwiOmx0KFwiL09wZW5BY3Rpb24gWzMgMCBSIC9GaXRIIG51bGxdXCIpO2JyZWFrO2Nhc2VcImZ1bGxoZWlnaHRcIjpsdChcIi9PcGVuQWN0aW9uIFszIDAgUiAvRml0ViBudWxsXVwiKTticmVhaztjYXNlXCJmdWxscGFnZVwiOmx0KFwiL09wZW5BY3Rpb24gWzMgMCBSIC9GaXRdXCIpO2JyZWFrO2Nhc2VcIm9yaWdpbmFsXCI6bHQoXCIvT3BlbkFjdGlvbiBbMyAwIFIgL1hZWiBudWxsIG51bGwgMV1cIik7YnJlYWs7ZGVmYXVsdDp2YXIgcj1cIlwiK210O1wiJVwiPT09ci5zdWJzdHIoci5sZW5ndGgtMSkmJihtdD1wYXJzZUludChtdCkvMTAwKSxcIm51bWJlclwiPT10eXBlb2YgbXQmJmx0KFwiL09wZW5BY3Rpb24gWzMgMCBSIC9YWVogbnVsbCBudWxsIFwiK1IobXQpK1wiXVwiKX1zd2l0Y2goTnR8fChOdD1cImNvbnRpbnVvdXNcIiksTnQpe2Nhc2VcImNvbnRpbnVvdXNcIjpsdChcIi9QYWdlTGF5b3V0IC9PbmVDb2x1bW5cIik7YnJlYWs7Y2FzZVwic2luZ2xlXCI6bHQoXCIvUGFnZUxheW91dCAvU2luZ2xlUGFnZVwiKTticmVhaztjYXNlXCJ0d29cIjpjYXNlXCJ0d29sZWZ0XCI6bHQoXCIvUGFnZUxheW91dCAvVHdvQ29sdW1uTGVmdFwiKTticmVhaztjYXNlXCJ0d29yaWdodFwiOmx0KFwiL1BhZ2VMYXlvdXQgL1R3b0NvbHVtblJpZ2h0XCIpfXl0JiZsdChcIi9QYWdlTW9kZSAvXCIreXQpLFR0LnB1Ymxpc2goXCJwdXRDYXRhbG9nXCIpLGx0KFwiPj5cIiksbHQoXCJlbmRvYmpcIil9LFRlPXkuX19wcml2YXRlX18ucHV0VHJhaWxlcj1mdW5jdGlvbigpe2x0KFwidHJhaWxlclwiKSxsdChcIjw8XCIpLGx0KFwiL1NpemUgXCIrKGV0KzEpKSxsdChcIi9Sb290IFwiK2V0K1wiIDAgUlwiKSxsdChcIi9JbmZvIFwiKyhldC0xKStcIiAwIFJcIiksbnVsbCE9PW0mJmx0KFwiL0VuY3J5cHQgXCIrWWUub2lkK1wiIDAgUlwiKSxsdChcIi9JRCBbIDxcIitWK1wiPiA8XCIrVitcIj4gXVwiKSxsdChcIj4+XCIpfSxVZT15Ll9fcHJpdmF0ZV9fLnB1dEhlYWRlcj1mdW5jdGlvbigpe2x0KFwiJVBERi1cIit3KSxsdChcIiXCusOfwqzDoFwiKX0semU9eS5fX3ByaXZhdGVfXy5wdXRYUmVmPWZ1bmN0aW9uKCl7dmFyIHQ9XCIwMDAwMDAwMDAwXCI7bHQoXCJ4cmVmXCIpLGx0KFwiMCBcIisoZXQrMSkpLGx0KFwiMDAwMDAwMDAwMCA2NTUzNSBmIFwiKTtmb3IodmFyIGU9MTtlPD1ldDtlKyspe1wiZnVuY3Rpb25cIj09dHlwZW9mIHJ0W2VdP2x0KCh0K3J0W2VdKCkpLnNsaWNlKC0xMCkrXCIgMDAwMDAgbiBcIik6dm9pZCAwIT09cnRbZV0/bHQoKHQrcnRbZV0pLnNsaWNlKC0xMCkrXCIgMDAwMDAgbiBcIik6bHQoXCIwMDAwMDAwMDAwIDAwMDAwIG4gXCIpfX0sSGU9eS5fX3ByaXZhdGVfXy5idWlsZERvY3VtZW50PWZ1bmN0aW9uKCl7dXQoKSxodChudCksVHQucHVibGlzaChcImJ1aWxkRG9jdW1lbnRcIiksVWUoKSxvZSgpLFNlKCkseGUoKSxudWxsIT09bSYmYmUoKSxEZSgpLFJlKCk7dmFyIHQ9aXQ7cmV0dXJuIHplKCksVGUoKSxsdChcInN0YXJ0eHJlZlwiKSxsdChcIlwiK3QpLGx0KFwiJSVFT0ZcIiksaHQob3RbJF0pLG50LmpvaW4oXCJcXG5cIil9LFdlPXkuX19wcml2YXRlX18uZ2V0QmxvYj1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IEJsb2IoW2R0KHQpXSx7dHlwZTpcImFwcGxpY2F0aW9uL3BkZlwifSl9LFZlPXkub3V0cHV0PXkuX19wcml2YXRlX18ub3V0cHV0PUllKChmdW5jdGlvbih0LGUpe3N3aXRjaChcInN0cmluZ1wiPT10eXBlb2YoZT1lfHx7fSk/ZT17ZmlsZW5hbWU6ZX06ZS5maWxlbmFtZT1lLmZpbGVuYW1lfHxcImdlbmVyYXRlZC5wZGZcIix0KXtjYXNlIHZvaWQgMDpyZXR1cm4gSGUoKTtjYXNlXCJzYXZlXCI6eS5zYXZlKGUuZmlsZW5hbWUpO2JyZWFrO2Nhc2VcImFycmF5YnVmZmVyXCI6cmV0dXJuIGR0KEhlKCkpO2Nhc2VcImJsb2JcIjpyZXR1cm4gV2UoSGUoKSk7Y2FzZVwiYmxvYnVyaVwiOmNhc2VcImJsb2J1cmxcIjppZih2b2lkIDAhPT1uLlVSTCYmXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5VUkwuY3JlYXRlT2JqZWN0VVJMKXJldHVybiBuLlVSTCYmbi5VUkwuY3JlYXRlT2JqZWN0VVJMKFdlKEhlKCkpKXx8dm9pZCAwO2Eud2FybihcImJsb2J1cmwgaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIHN5c3RlbSwgYmVjYXVzZSBVUkwuY3JlYXRlT2JqZWN0VVJMIGlzIG5vdCBzdXBwb3J0ZWQgYnkgeW91ciBicm93c2VyLlwiKTticmVhaztjYXNlXCJkYXRhdXJpc3RyaW5nXCI6Y2FzZVwiZGF0YXVybHN0cmluZ1wiOnZhciByPVwiXCIsaT1IZSgpO3RyeXtyPWgoaSl9Y2F0Y2godCl7cj1oKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChpKSkpfXJldHVyblwiZGF0YTphcHBsaWNhdGlvbi9wZGY7ZmlsZW5hbWU9XCIrZS5maWxlbmFtZStcIjtiYXNlNjQsXCIrcjtjYXNlXCJwZGZvYmplY3RuZXd3aW5kb3dcIjppZihcIltvYmplY3QgV2luZG93XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pKXt2YXIgbz1cImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL3BkZm9iamVjdC8yLjEuMS9wZGZvYmplY3QubWluLmpzXCIscz0nIGludGVncml0eT1cInNoYTUxMi00emUvYTkvNGpxdSt0WDlkZk9xSllTdnlZZDVNNnF1bS8zSHBDTHIrL0pxZjB3aGMzN1ZVYmtwTkdIUjcvOHBTbkNGdzQ3VDFmbUlwd0JWN1V5U2gzZz09XCIgY3Jvc3NvcmlnaW49XCJhbm9ueW1vdXNcIic7ZS5wZGZPYmplY3RVcmwmJihvPWUucGRmT2JqZWN0VXJsLHM9XCJcIik7dmFyIGM9JzxodG1sPjxzdHlsZT5odG1sLCBib2R5IHsgcGFkZGluZzogMDsgbWFyZ2luOiAwOyB9IGlmcmFtZSB7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGJvcmRlcjogMDt9ICA8L3N0eWxlPjxib2R5PjxzY3JpcHQgc3JjPVwiJytvKydcIicrcysnPjxcXC9zY3JpcHQ+PHNjcmlwdCA+UERGT2JqZWN0LmVtYmVkKFwiJyt0aGlzLm91dHB1dChcImRhdGF1cmxzdHJpbmdcIikrJ1wiLCAnK0pTT04uc3RyaW5naWZ5KGUpK1wiKTs8XFwvc2NyaXB0PjwvYm9keT48L2h0bWw+XCIsdT1uLm9wZW4oKTtyZXR1cm4gbnVsbCE9PXUmJnUuZG9jdW1lbnQud3JpdGUoYyksdX10aHJvdyBuZXcgRXJyb3IoXCJUaGUgb3B0aW9uIHBkZm9iamVjdG5ld3dpbmRvdyBqdXN0IHdvcmtzIGluIGEgYnJvd3Nlci1lbnZpcm9ubWVudC5cIik7Y2FzZVwicGRmanNuZXd3aW5kb3dcIjppZihcIltvYmplY3QgV2luZG93XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pKXt2YXIgbD0nPGh0bWw+PHN0eWxlPmh0bWwsIGJvZHkgeyBwYWRkaW5nOiAwOyBtYXJnaW46IDA7IH0gaWZyYW1lIHsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYm9yZGVyOiAwO30gIDwvc3R5bGU+PGJvZHk+PGlmcmFtZSBpZD1cInBkZlZpZXdlclwiIHNyYz1cIicrKGUucGRmSnNVcmx8fFwiZXhhbXBsZXMvUERGLmpzL3dlYi92aWV3ZXIuaHRtbFwiKStcIj9maWxlPSZkb3dubG9hZE5hbWU9XCIrZS5maWxlbmFtZSsnXCIgd2lkdGg9XCI1MDBweFwiIGhlaWdodD1cIjQwMHB4XCIgLz48L2JvZHk+PC9odG1sPicsZj1uLm9wZW4oKTtpZihudWxsIT09Zil7Zi5kb2N1bWVudC53cml0ZShsKTt2YXIgZD10aGlzO2YuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjcGRmVmlld2VyXCIpLm9ubG9hZD1mdW5jdGlvbigpe2YuZG9jdW1lbnQudGl0bGU9ZS5maWxlbmFtZSxmLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI3BkZlZpZXdlclwiKS5jb250ZW50V2luZG93LlBERlZpZXdlckFwcGxpY2F0aW9uLm9wZW4oZC5vdXRwdXQoXCJibG9idXJsXCIpKX19cmV0dXJuIGZ9dGhyb3cgbmV3IEVycm9yKFwiVGhlIG9wdGlvbiBwZGZqc25ld3dpbmRvdyBqdXN0IHdvcmtzIGluIGEgYnJvd3Nlci1lbnZpcm9ubWVudC5cIik7Y2FzZVwiZGF0YXVybG5ld3dpbmRvd1wiOmlmKFwiW29iamVjdCBXaW5kb3ddXCIhPT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobikpdGhyb3cgbmV3IEVycm9yKFwiVGhlIG9wdGlvbiBkYXRhdXJsbmV3d2luZG93IGp1c3Qgd29ya3MgaW4gYSBicm93c2VyLWVudmlyb25tZW50LlwiKTt2YXIgcD0nPGh0bWw+PHN0eWxlPmh0bWwsIGJvZHkgeyBwYWRkaW5nOiAwOyBtYXJnaW46IDA7IH0gaWZyYW1lIHsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgYm9yZGVyOiAwO30gIDwvc3R5bGU+PGJvZHk+PGlmcmFtZSBzcmM9XCInK3RoaXMub3V0cHV0KFwiZGF0YXVyaXN0cmluZ1wiLGUpKydcIj48L2lmcmFtZT48L2JvZHk+PC9odG1sPicsZz1uLm9wZW4oKTtpZihudWxsIT09ZyYmKGcuZG9jdW1lbnQud3JpdGUocCksZy5kb2N1bWVudC50aXRsZT1lLmZpbGVuYW1lKSxnfHxcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2FmYXJpKXJldHVybiBnO2JyZWFrO2Nhc2VcImRhdGF1cmlcIjpjYXNlXCJkYXRhdXJsXCI6cmV0dXJuIG4uZG9jdW1lbnQubG9jYXRpb24uaHJlZj10aGlzLm91dHB1dChcImRhdGF1cmlzdHJpbmdcIixlKTtkZWZhdWx0OnJldHVybiBudWxsfX0pKSxHZT1mdW5jdGlvbih0KXtyZXR1cm4hMD09PUFycmF5LmlzQXJyYXkoVXQpJiZVdC5pbmRleE9mKHQpPi0xfTtzd2l0Y2gobyl7Y2FzZVwicHRcIjpfdD0xO2JyZWFrO2Nhc2VcIm1tXCI6X3Q9NzIvMjUuNDticmVhaztjYXNlXCJjbVwiOl90PTcyLzIuNTQ7YnJlYWs7Y2FzZVwiaW5cIjpfdD03MjticmVhaztjYXNlXCJweFwiOl90PTE9PUdlKFwicHhfc2NhbGluZ1wiKT8uNzU6OTYvNzI7YnJlYWs7Y2FzZVwicGNcIjpjYXNlXCJlbVwiOl90PTEyO2JyZWFrO2Nhc2VcImV4XCI6X3Q9NjticmVhaztkZWZhdWx0OmlmKFwibnVtYmVyXCIhPXR5cGVvZiBvKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdW5pdDogXCIrbyk7X3Q9b312YXIgWWU9bnVsbDtLKCksWSgpO3ZhciBKZT1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PW0/WWUuZW5jcnlwdG9yKHQsMCk6ZnVuY3Rpb24odCl7cmV0dXJuIHR9fSxYZT15Ll9fcHJpdmF0ZV9fLmdldFBhZ2VJbmZvPXkuZ2V0UGFnZUluZm89ZnVuY3Rpb24odCl7aWYoaXNOYU4odCl8fHQlMSE9MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5nZXRQYWdlSW5mb1wiKTtyZXR1cm57b2JqSWQ6UnRbdF0ub2JqSWQscGFnZU51bWJlcjp0LHBhZ2VDb250ZXh0OlJ0W3RdfX0sS2U9eS5fX3ByaXZhdGVfXy5nZXRQYWdlSW5mb0J5T2JqSWQ9ZnVuY3Rpb24odCl7aWYoaXNOYU4odCl8fHQlMSE9MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCB0byBqc1BERi5nZXRQYWdlSW5mb0J5T2JqSWRcIik7Zm9yKHZhciBlIGluIFJ0KWlmKFJ0W2VdLm9iaklkPT09dClicmVhaztyZXR1cm4gWGUoZSl9LFplPXkuX19wcml2YXRlX18uZ2V0Q3VycmVudFBhZ2VJbmZvPXkuZ2V0Q3VycmVudFBhZ2VJbmZvPWZ1bmN0aW9uKCl7cmV0dXJue29iaklkOlJ0WyRdLm9iaklkLHBhZ2VOdW1iZXI6JCxwYWdlQ29udGV4dDpSdFskXX19O3kuYWRkUGFnZT1mdW5jdGlvbigpe3JldHVybiBPZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpc30seS5zZXRQYWdlPWZ1bmN0aW9uKCl7cmV0dXJuIE1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxodC5jYWxsKHRoaXMsb3RbJF0pLHRoaXN9LHkuaW5zZXJ0UGFnZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hZGRQYWdlKCksdGhpcy5tb3ZlUGFnZSgkLHQpLHRoaXN9LHkubW92ZVBhZ2U9ZnVuY3Rpb24odCxlKXt2YXIgcixuO2lmKHQ+ZSl7cj1vdFt0XSxuPVJ0W3RdO2Zvcih2YXIgaT10O2k+ZTtpLS0pb3RbaV09b3RbaS0xXSxSdFtpXT1SdFtpLTFdO290W2VdPXIsUnRbZV09bix0aGlzLnNldFBhZ2UoZSl9ZWxzZSBpZih0PGUpe3I9b3RbdF0sbj1SdFt0XTtmb3IodmFyIGE9dDthPGU7YSsrKW90W2FdPW90W2ErMV0sUnRbYV09UnRbYSsxXTtvdFtlXT1yLFJ0W2VdPW4sdGhpcy5zZXRQYWdlKGUpfXJldHVybiB0aGlzfSx5LmRlbGV0ZVBhZ2U9ZnVuY3Rpb24oKXtyZXR1cm4gQmUuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXN9LHkuX19wcml2YXRlX18udGV4dD15LnRleHQ9ZnVuY3Rpb24oZSxyLG4saSxhKXt2YXIgbyxzLGMsdSxoLGwsZixkLHAsZz0oaT1pfHx7fSkuc2NvcGV8fHRoaXM7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUmJlwibnVtYmVyXCI9PXR5cGVvZiByJiYoXCJzdHJpbmdcIj09dHlwZW9mIG58fEFycmF5LmlzQXJyYXkobikpKXt2YXIgbT1uO249cixyPWUsZT1tfWlmKGFyZ3VtZW50c1szXWluc3RhbmNlb2YgVnQ9PSExPyhjPWFyZ3VtZW50c1s0XSx1PWFyZ3VtZW50c1s1XSxcIm9iamVjdFwiPT09dChmPWFyZ3VtZW50c1szXSkmJm51bGwhPT1mfHwoXCJzdHJpbmdcIj09dHlwZW9mIGMmJih1PWMsYz1udWxsKSxcInN0cmluZ1wiPT10eXBlb2YgZiYmKHU9ZixmPW51bGwpLFwibnVtYmVyXCI9PXR5cGVvZiBmJiYoYz1mLGY9bnVsbCksaT17ZmxhZ3M6ZixhbmdsZTpjLGFsaWduOnV9KSk6KHEoXCJUaGUgdHJhbnNmb3JtIHBhcmFtZXRlciBvZiB0ZXh0KCkgd2l0aCBhIE1hdHJpeCB2YWx1ZVwiKSxwPWEpLGlzTmFOKHIpfHxpc05hTihuKXx8bnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYudGV4dFwiKTtpZigwPT09ZS5sZW5ndGgpcmV0dXJuIGc7dmFyIHY9XCJcIix5PSExLHc9XCJudW1iZXJcIj09dHlwZW9mIGkubGluZUhlaWdodEZhY3Rvcj9pLmxpbmVIZWlnaHRGYWN0b3I6bHIsTj1nLmludGVybmFsLnNjYWxlRmFjdG9yO2Z1bmN0aW9uIEwodCl7cmV0dXJuIHQ9dC5zcGxpdChcIlxcdFwiKS5qb2luKEFycmF5KGkuVGFiTGVufHw5KS5qb2luKFwiIFwiKSksQ2UodCxmKX1mdW5jdGlvbiBBKHQpe2Zvcih2YXIgZSxyPXQuY29uY2F0KCksbj1bXSxpPXIubGVuZ3RoO2ktLTspXCJzdHJpbmdcIj09dHlwZW9mKGU9ci5zaGlmdCgpKT9uLnB1c2goZSk6QXJyYXkuaXNBcnJheSh0KSYmKDE9PT1lLmxlbmd0aHx8dm9pZCAwPT09ZVsxXSYmdm9pZCAwPT09ZVsyXSk/bi5wdXNoKGVbMF0pOm4ucHVzaChbZVswXSxlWzFdLGVbMl1dKTtyZXR1cm4gbn1mdW5jdGlvbiBfKHQsZSl7dmFyIHI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQpcj1lKHQpWzBdO2Vsc2UgaWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHZhciBuLGksYT10LmNvbmNhdCgpLG89W10scz1hLmxlbmd0aDtzLS07KVwic3RyaW5nXCI9PXR5cGVvZihuPWEuc2hpZnQoKSk/by5wdXNoKGUobilbMF0pOkFycmF5LmlzQXJyYXkobikmJlwic3RyaW5nXCI9PXR5cGVvZiBuWzBdJiYoaT1lKG5bMF0sblsxXSxuWzJdKSxvLnB1c2goW2lbMF0saVsxXSxpWzJdXSkpO3I9b31yZXR1cm4gcn12YXIgUD0hMSxrPSEwO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKVA9ITA7ZWxzZSBpZihBcnJheS5pc0FycmF5KGUpKXt2YXIgST1lLmNvbmNhdCgpO3M9W107Zm9yKHZhciBGLEM9SS5sZW5ndGg7Qy0tOykoXCJzdHJpbmdcIiE9dHlwZW9mKEY9SS5zaGlmdCgpKXx8QXJyYXkuaXNBcnJheShGKSYmXCJzdHJpbmdcIiE9dHlwZW9mIEZbMF0pJiYoaz0hMSk7UD1rfWlmKCExPT09UCl0aHJvdyBuZXcgRXJyb3IoJ1R5cGUgb2YgdGV4dCBtdXN0IGJlIHN0cmluZyBvciBBcnJheS4gXCInK2UrJ1wiIGlzIG5vdCByZWNvZ25pemVkLicpO1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1lLm1hdGNoKC9bXFxyP1xcbl0vKT9lLnNwbGl0KC9cXHJcXG58XFxyfFxcbi9nKTpbZV0pO3ZhciBqPWd0L2cuaW50ZXJuYWwuc2NhbGVGYWN0b3IsQj1qKih3LTEpO3N3aXRjaChpLmJhc2VsaW5lKXtjYXNlXCJib3R0b21cIjpuLT1CO2JyZWFrO2Nhc2VcInRvcFwiOm4rPWotQjticmVhaztjYXNlXCJoYW5naW5nXCI6bis9ai0yKkI7YnJlYWs7Y2FzZVwibWlkZGxlXCI6bis9ai8yLUJ9aWYoKGw9aS5tYXhXaWR0aHx8MCk+MCYmKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U9Zy5zcGxpdFRleHRUb1NpemUoZSxsKTpcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSkmJihlPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0LmNvbmNhdChnLnNwbGl0VGV4dFRvU2l6ZShlLGwpKX0pLFtdKSkpLG89e3RleHQ6ZSx4OnIseTpuLG9wdGlvbnM6aSxtdXRleDp7cGRmRXNjYXBlOkNlLGFjdGl2ZUZvbnRLZXk6U3QsZm9udHM6RnQsYWN0aXZlRm9udFNpemU6Z3R9fSxUdC5wdWJsaXNoKFwicHJlUHJvY2Vzc1RleHRcIixvKSxlPW8udGV4dCxjPShpPW8ub3B0aW9ucykuYW5nbGUscCBpbnN0YW5jZW9mIFZ0PT0hMSYmYyYmXCJudW1iZXJcIj09dHlwZW9mIGMpe2MqPU1hdGguUEkvMTgwLDA9PT1pLnJvdGF0aW9uRGlyZWN0aW9uJiYoYz0tYyksUz09PXguQURWQU5DRUQmJihjPS1jKTt2YXIgTT1NYXRoLmNvcyhjKSxFPU1hdGguc2luKGMpO3A9bmV3IFZ0KE0sRSwtRSxNLDAsMCl9ZWxzZSBjJiZjIGluc3RhbmNlb2YgVnQmJihwPWMpO1MhPT14LkFEVkFOQ0VEfHxwfHwocD1ZdCksdm9pZCAwIT09KGg9aS5jaGFyU3BhY2V8fF9yKSYmKHYrPU8oVShoKSkrXCIgVGNcXG5cIix0aGlzLnNldENoYXJTcGFjZSh0aGlzLmdldENoYXJTcGFjZSgpfHwwKSksdm9pZCAwIT09KGQ9aS5ob3Jpem9udGFsU2NhbGUpJiYodis9TygxMDAqZCkrXCIgVHpcXG5cIik7aS5sYW5nO3ZhciBEPS0xLFI9dm9pZCAwIT09aS5yZW5kZXJpbmdNb2RlP2kucmVuZGVyaW5nTW9kZTppLnN0cm9rZSxUPWcuaW50ZXJuYWwuZ2V0Q3VycmVudFBhZ2VJbmZvKCkucGFnZUNvbnRleHQ7c3dpdGNoKFIpe2Nhc2UgMDpjYXNlITE6Y2FzZVwiZmlsbFwiOkQ9MDticmVhaztjYXNlIDE6Y2FzZSEwOmNhc2VcInN0cm9rZVwiOkQ9MTticmVhaztjYXNlIDI6Y2FzZVwiZmlsbFRoZW5TdHJva2VcIjpEPTI7YnJlYWs7Y2FzZSAzOmNhc2VcImludmlzaWJsZVwiOkQ9MzticmVhaztjYXNlIDQ6Y2FzZVwiZmlsbEFuZEFkZEZvckNsaXBwaW5nXCI6RD00O2JyZWFrO2Nhc2UgNTpjYXNlXCJzdHJva2VBbmRBZGRQYXRoRm9yQ2xpcHBpbmdcIjpEPTU7YnJlYWs7Y2FzZSA2OmNhc2VcImZpbGxUaGVuU3Ryb2tlQW5kQWRkVG9QYXRoRm9yQ2xpcHBpbmdcIjpEPTY7YnJlYWs7Y2FzZSA3OmNhc2VcImFkZFRvUGF0aEZvckNsaXBwaW5nXCI6RD03fXZhciB6PXZvaWQgMCE9PVQudXNlZFJlbmRlcmluZ01vZGU/VC51c2VkUmVuZGVyaW5nTW9kZTotMTstMSE9PUQ/dis9RCtcIiBUclxcblwiOi0xIT09eiYmKHYrPVwiMCBUclxcblwiKSwtMSE9PUQmJihULnVzZWRSZW5kZXJpbmdNb2RlPUQpLHU9aS5hbGlnbnx8XCJsZWZ0XCI7dmFyIEgsVz1ndCp3LFY9Zy5pbnRlcm5hbC5wYWdlU2l6ZS5nZXRXaWR0aCgpLEc9RnRbU3RdO2g9aS5jaGFyU3BhY2V8fF9yLGw9aS5tYXhXaWR0aHx8MCxmPU9iamVjdC5hc3NpZ24oe2F1dG9lbmNvZGU6ITAsbm9CT006ITB9LGkuZmxhZ3MpO3ZhciBZPVtdO2lmKFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl7dmFyIEo7cz1BKGUpLFwibGVmdFwiIT09dSYmKEg9cy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBnLmdldFN0cmluZ1VuaXRXaWR0aCh0LHtmb250OkcsY2hhclNwYWNlOmgsZm9udFNpemU6Z3QsZG9LZXJuaW5nOiExfSkqZ3QvTn0pKSk7dmFyIFgsSz0wO2lmKFwicmlnaHRcIj09PXUpe3ItPUhbMF0sZT1bXSxDPXMubGVuZ3RoO2Zvcih2YXIgWj0wO1o8QztaKyspMD09PVo/KFg9YnIociksSj15cihuKSk6KFg9VShLLUhbWl0pLEo9LVcpLGUucHVzaChbc1taXSxYLEpdKSxLPUhbWl19ZWxzZSBpZihcImNlbnRlclwiPT09dSl7ci09SFswXS8yLGU9W10sQz1zLmxlbmd0aDtmb3IodmFyICQ9MDskPEM7JCsrKTA9PT0kPyhYPWJyKHIpLEo9eXIobikpOihYPVUoKEstSFskXSkvMiksSj0tVyksZS5wdXNoKFtzWyRdLFgsSl0pLEs9SFskXX1lbHNlIGlmKFwibGVmdFwiPT09dSl7ZT1bXSxDPXMubGVuZ3RoO2Zvcih2YXIgUT0wO1E8QztRKyspZS5wdXNoKHNbUV0pfWVsc2V7aWYoXCJqdXN0aWZ5XCIhPT11KXRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIGFsaWdubWVudCBvcHRpb24sIHVzZSBcImxlZnRcIiwgXCJjZW50ZXJcIiwgXCJyaWdodFwiIG9yIFwianVzdGlmeVwiLicpO2U9W10sQz1zLmxlbmd0aCxsPTAhPT1sP2w6Vjtmb3IodmFyIHR0PTA7dHQ8Qzt0dCsrKUo9MD09PXR0P3lyKG4pOi1XLFg9MD09PXR0P2JyKHIpOjAsdHQ8Qy0xP1kucHVzaChPKFUoKGwtSFt0dF0pLyhzW3R0XS5zcGxpdChcIiBcIikubGVuZ3RoLTEpKSkpOlkucHVzaCgwKSxlLnB1c2goW3NbdHRdLFgsSl0pfX12YXIgZXQ9XCJib29sZWFuXCI9PXR5cGVvZiBpLlIyTD9pLlIyTDpidDshMD09PWV0JiYoZT1fKGUsKGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm5bdC5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSxlLHJdfSkpKSxvPXt0ZXh0OmUseDpyLHk6bixvcHRpb25zOmksbXV0ZXg6e3BkZkVzY2FwZTpDZSxhY3RpdmVGb250S2V5OlN0LGZvbnRzOkZ0LGFjdGl2ZUZvbnRTaXplOmd0fX0sVHQucHVibGlzaChcInBvc3RQcm9jZXNzVGV4dFwiLG8pLGU9by50ZXh0LHk9by5tdXRleC5pc0hleHx8ITE7dmFyIHJ0PUZ0W1N0XS5lbmNvZGluZztcIldpbkFuc2lFbmNvZGluZ1wiIT09cnQmJlwiU3RhbmRhcmRFbmNvZGluZ1wiIT09cnR8fChlPV8oZSwoZnVuY3Rpb24odCxlLHIpe3JldHVybltMKHQpLGUscl19KSkpLHM9QShlKSxlPVtdO2Zvcih2YXIgbnQsaXQsYXQsb3Q9MCxzdD0xLGN0PUFycmF5LmlzQXJyYXkoc1swXSk/c3Q6b3QsdXQ9XCJcIixodD1mdW5jdGlvbih0LGUscil7dmFyIG49XCJcIjtyZXR1cm4gciBpbnN0YW5jZW9mIFZ0PyhyPVwibnVtYmVyXCI9PXR5cGVvZiBpLmFuZ2xlP0d0KHIsbmV3IFZ0KDEsMCwwLDEsdCxlKSk6R3QobmV3IFZ0KDEsMCwwLDEsdCxlKSxyKSxTPT09eC5BRFZBTkNFRCYmKHI9R3QobmV3IFZ0KDEsMCwwLC0xLDAsMCkscikpLG49ci5qb2luKFwiIFwiKStcIiBUbVxcblwiKTpuPU8odCkrXCIgXCIrTyhlKStcIiBUZFxcblwiLG59LGZ0PTA7ZnQ8cy5sZW5ndGg7ZnQrKyl7c3dpdGNoKHV0PVwiXCIsY3Qpe2Nhc2Ugc3Q6YXQ9KHk/XCI8XCI6XCIoXCIpK3NbZnRdWzBdKyh5P1wiPlwiOlwiKVwiKSxudD1wYXJzZUZsb2F0KHNbZnRdWzFdKSxpdD1wYXJzZUZsb2F0KHNbZnRdWzJdKTticmVhaztjYXNlIG90OmF0PSh5P1wiPFwiOlwiKFwiKStzW2Z0XSsoeT9cIj5cIjpcIilcIiksbnQ9YnIociksaXQ9eXIobil9dm9pZCAwIT09WSYmdm9pZCAwIT09WVtmdF0mJih1dD1ZW2Z0XStcIiBUd1xcblwiKSwwPT09ZnQ/ZS5wdXNoKHV0K2h0KG50LGl0LHApK2F0KTpjdD09PW90P2UucHVzaCh1dCthdCk6Y3Q9PT1zdCYmZS5wdXNoKHV0K2h0KG50LGl0LHApK2F0KX1lPWN0PT09b3Q/ZS5qb2luKFwiIFRqXFxuVCogXCIpOmUuam9pbihcIiBUalxcblwiKSxlKz1cIiBUalxcblwiO3ZhciBkdD1cIkJUXFxuL1wiO3JldHVybiBkdCs9U3QrXCIgXCIrZ3QrXCIgVGZcXG5cIixkdCs9TyhndCp3KStcIiBUTFxcblwiLGR0Kz14citcIlxcblwiLGR0Kz12LGR0Kz1lLGx0KGR0Kz1cIkVUXCIpLGJbU3RdPSEwLGd9O3ZhciAkZT15Ll9fcHJpdmF0ZV9fLmNsaXA9eS5jbGlwPWZ1bmN0aW9uKHQpe3JldHVybiBsdChcImV2ZW5vZGRcIj09PXQ/XCJXKlwiOlwiV1wiKSx0aGlzfTt5LmNsaXBFdmVuT2RkPWZ1bmN0aW9uKCl7cmV0dXJuICRlKFwiZXZlbm9kZFwiKX0seS5fX3ByaXZhdGVfXy5kaXNjYXJkUGF0aD15LmRpc2NhcmRQYXRoPWZ1bmN0aW9uKCl7cmV0dXJuIGx0KFwiblwiKSx0aGlzfTt2YXIgUWU9eS5fX3ByaXZhdGVfXy5pc1ZhbGlkU3R5bGU9ZnVuY3Rpb24odCl7dmFyIGU9ITE7cmV0dXJuLTEhPT1bdm9pZCAwLG51bGwsXCJTXCIsXCJEXCIsXCJGXCIsXCJERlwiLFwiRkRcIixcImZcIixcImYqXCIsXCJCXCIsXCJCKlwiLFwiblwiXS5pbmRleE9mKHQpJiYoZT0hMCksZX07eS5fX3ByaXZhdGVfXy5zZXREZWZhdWx0UGF0aE9wZXJhdGlvbj15LnNldERlZmF1bHRQYXRoT3BlcmF0aW9uPWZ1bmN0aW9uKHQpe3JldHVybiBRZSh0KSYmKGc9dCksdGhpc307dmFyIHRyPXkuX19wcml2YXRlX18uZ2V0U3R5bGU9eS5nZXRTdHlsZT1mdW5jdGlvbih0KXt2YXIgZT1nO3N3aXRjaCh0KXtjYXNlXCJEXCI6Y2FzZVwiU1wiOmU9XCJTXCI7YnJlYWs7Y2FzZVwiRlwiOmU9XCJmXCI7YnJlYWs7Y2FzZVwiRkRcIjpjYXNlXCJERlwiOmU9XCJCXCI7YnJlYWs7Y2FzZVwiZlwiOmNhc2VcImYqXCI6Y2FzZVwiQlwiOmNhc2VcIkIqXCI6ZT10fXJldHVybiBlfSxlcj15LmNsb3NlPWZ1bmN0aW9uKCl7cmV0dXJuIGx0KFwiaFwiKSx0aGlzfTt5LnN0cm9rZT1mdW5jdGlvbigpe3JldHVybiBsdChcIlNcIiksdGhpc30seS5maWxsPWZ1bmN0aW9uKHQpe3JldHVybiBycihcImZcIix0KSx0aGlzfSx5LmZpbGxFdmVuT2RkPWZ1bmN0aW9uKHQpe3JldHVybiBycihcImYqXCIsdCksdGhpc30seS5maWxsU3Ryb2tlPWZ1bmN0aW9uKHQpe3JldHVybiBycihcIkJcIix0KSx0aGlzfSx5LmZpbGxTdHJva2VFdmVuT2RkPWZ1bmN0aW9uKHQpe3JldHVybiBycihcIkIqXCIsdCksdGhpc307dmFyIHJyPWZ1bmN0aW9uKGUscil7XCJvYmplY3RcIj09PXQocik/YXIocixlKTpsdChlKX0sbnI9ZnVuY3Rpb24odCl7bnVsbD09PXR8fFM9PT14LkFEVkFOQ0VEJiZ2b2lkIDA9PT10fHwodD10cih0KSxsdCh0KSl9O2Z1bmN0aW9uIGlyKHQsZSxyLG4saSl7dmFyIGE9bmV3IE0oZXx8dGhpcy5ib3VuZGluZ0JveCxyfHx0aGlzLnhTdGVwLG58fHRoaXMueVN0ZXAsdGhpcy5nU3RhdGUsaXx8dGhpcy5tYXRyaXgpO2Euc3RyZWFtPXRoaXMuc3RyZWFtO3ZhciBvPXQrXCIkJFwiK3RoaXMuY2xvbmVJbmRleCsrK1wiJCRcIjtyZXR1cm4gSnQobyxhKSxhfXZhciBhcj1mdW5jdGlvbih0LGUpe3ZhciByPUJ0W3Qua2V5XSxuPU90W3JdO2lmKG4gaW5zdGFuY2VvZiBCKWx0KFwicVwiKSxsdChvcihlKSksbi5nU3RhdGUmJnkuc2V0R1N0YXRlKG4uZ1N0YXRlKSxsdCh0Lm1hdHJpeC50b1N0cmluZygpK1wiIGNtXCIpLGx0KFwiL1wiK3IrXCIgc2hcIiksbHQoXCJRXCIpO2Vsc2UgaWYobiBpbnN0YW5jZW9mIE0pe3ZhciBpPW5ldyBWdCgxLDAsMCwtMSwwLFJyKCkpO3QubWF0cml4JiYoaT1pLm11bHRpcGx5KHQubWF0cml4fHxZdCkscj1pci5jYWxsKG4sdC5rZXksdC5ib3VuZGluZ0JveCx0LnhTdGVwLHQueVN0ZXAsaSkuaWQpLGx0KFwicVwiKSxsdChcIi9QYXR0ZXJuIGNzXCIpLGx0KFwiL1wiK3IrXCIgc2NuXCIpLG4uZ1N0YXRlJiZ5LnNldEdTdGF0ZShuLmdTdGF0ZSksbHQoZSksbHQoXCJRXCIpfX0sb3I9ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2VcImZcIjpjYXNlXCJGXCI6cmV0dXJuXCJXIG5cIjtjYXNlXCJmKlwiOnJldHVyblwiVyogblwiO2Nhc2VcIkJcIjpyZXR1cm5cIlcgU1wiO2Nhc2VcIkIqXCI6cmV0dXJuXCJXKiBTXCI7Y2FzZVwiU1wiOnJldHVyblwiVyBTXCI7Y2FzZVwiblwiOnJldHVyblwiVyBuXCJ9fSxzcj15Lm1vdmVUbz1mdW5jdGlvbih0LGUpe3JldHVybiBsdChPKFUodCkpK1wiIFwiK08oSChlKSkrXCIgbVwiKSx0aGlzfSxjcj15LmxpbmVUbz1mdW5jdGlvbih0LGUpe3JldHVybiBsdChPKFUodCkpK1wiIFwiK08oSChlKSkrXCIgbFwiKSx0aGlzfSx1cj15LmN1cnZlVG89ZnVuY3Rpb24odCxlLHIsbixpLGEpe3JldHVybiBsdChbTyhVKHQpKSxPKEgoZSkpLE8oVShyKSksTyhIKG4pKSxPKFUoaSkpLE8oSChhKSksXCJjXCJdLmpvaW4oXCIgXCIpKSx0aGlzfTt5Ll9fcHJpdmF0ZV9fLmxpbmU9eS5saW5lPWZ1bmN0aW9uKHQsZSxyLG4saSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihyKXx8aXNOYU4obil8fCFRZShpKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYubGluZVwiKTtyZXR1cm4gUz09PXguQ09NUEFUP3RoaXMubGluZXMoW1tyLXQsbi1lXV0sdCxlLFsxLDFdLGl8fFwiU1wiKTp0aGlzLmxpbmVzKFtbci10LG4tZV1dLHQsZSxbMSwxXSkuc3Ryb2tlKCl9LHkuX19wcml2YXRlX18ubGluZXM9eS5saW5lcz1mdW5jdGlvbih0LGUscixuLGksYSl7dmFyIG8scyxjLHUsaCxsLGYsZCxwLGcsbSx2O2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0JiYodj1yLHI9ZSxlPXQsdD12KSxuPW58fFsxLDFdLGE9YXx8ITEsaXNOYU4oZSl8fGlzTmFOKHIpfHwhQXJyYXkuaXNBcnJheSh0KXx8IUFycmF5LmlzQXJyYXkobil8fCFRZShpKXx8XCJib29sZWFuXCIhPXR5cGVvZiBhKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5saW5lc1wiKTtmb3Ioc3IoZSxyKSxvPW5bMF0scz1uWzFdLHU9dC5sZW5ndGgsZz1lLG09cixjPTA7Yzx1O2MrKykyPT09KGg9dFtjXSkubGVuZ3RoPyhnPWhbMF0qbytnLG09aFsxXSpzK20sY3IoZyxtKSk6KGw9aFswXSpvK2csZj1oWzFdKnMrbSxkPWhbMl0qbytnLHA9aFszXSpzK20sZz1oWzRdKm8rZyxtPWhbNV0qcyttLHVyKGwsZixkLHAsZyxtKSk7cmV0dXJuIGEmJmVyKCksbnIoaSksdGhpc30seS5wYXRoPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgcj10W2VdLG49ci5jO3N3aXRjaChyLm9wKXtjYXNlXCJtXCI6c3IoblswXSxuWzFdKTticmVhaztjYXNlXCJsXCI6Y3IoblswXSxuWzFdKTticmVhaztjYXNlXCJjXCI6dXIuYXBwbHkodGhpcyxuKTticmVhaztjYXNlXCJoXCI6ZXIoKX19cmV0dXJuIHRoaXN9LHkuX19wcml2YXRlX18ucmVjdD15LnJlY3Q9ZnVuY3Rpb24odCxlLHIsbixpKXtpZihpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKHIpfHxpc05hTihuKXx8IVFlKGkpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5yZWN0XCIpO3JldHVybiBTPT09eC5DT01QQVQmJihuPS1uKSxsdChbTyhVKHQpKSxPKEgoZSkpLE8oVShyKSksTyhVKG4pKSxcInJlXCJdLmpvaW4oXCIgXCIpKSxucihpKSx0aGlzfSx5Ll9fcHJpdmF0ZV9fLnRyaWFuZ2xlPXkudHJpYW5nbGU9ZnVuY3Rpb24odCxlLHIsbixpLGEsbyl7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihyKXx8aXNOYU4obil8fGlzTmFOKGkpfHxpc05hTihhKXx8IVFlKG8pKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi50cmlhbmdsZVwiKTtyZXR1cm4gdGhpcy5saW5lcyhbW3ItdCxuLWVdLFtpLXIsYS1uXSxbdC1pLGUtYV1dLHQsZSxbMSwxXSxvLCEwKSx0aGlzfSx5Ll9fcHJpdmF0ZV9fLnJvdW5kZWRSZWN0PXkucm91bmRlZFJlY3Q9ZnVuY3Rpb24odCxlLHIsbixpLGEsbyl7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihyKXx8aXNOYU4obil8fGlzTmFOKGkpfHxpc05hTihhKXx8IVFlKG8pKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5yb3VuZGVkUmVjdFwiKTt2YXIgcz00LzMqKE1hdGguU1FSVDItMSk7cmV0dXJuIGk9TWF0aC5taW4oaSwuNSpyKSxhPU1hdGgubWluKGEsLjUqbiksdGhpcy5saW5lcyhbW3ItMippLDBdLFtpKnMsMCxpLGEtYSpzLGksYV0sWzAsbi0yKmFdLFswLGEqcywtaSpzLGEsLWksYV0sWzIqaS1yLDBdLFstaSpzLDAsLWksLWEqcywtaSwtYV0sWzAsMiphLW5dLFswLC1hKnMsaSpzLC1hLGksLWFdXSx0K2ksZSxbMSwxXSxvLCEwKSx0aGlzfSx5Ll9fcHJpdmF0ZV9fLmVsbGlwc2U9eS5lbGxpcHNlPWZ1bmN0aW9uKHQsZSxyLG4saSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihyKXx8aXNOYU4obil8fCFRZShpKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuZWxsaXBzZVwiKTt2YXIgYT00LzMqKE1hdGguU1FSVDItMSkqcixvPTQvMyooTWF0aC5TUVJUMi0xKSpuO3JldHVybiBzcih0K3IsZSksdXIodCtyLGUtbyx0K2EsZS1uLHQsZS1uKSx1cih0LWEsZS1uLHQtcixlLW8sdC1yLGUpLHVyKHQtcixlK28sdC1hLGUrbix0LGUrbiksdXIodCthLGUrbix0K3IsZStvLHQrcixlKSxucihpKSx0aGlzfSx5Ll9fcHJpdmF0ZV9fLmNpcmNsZT15LmNpcmNsZT1mdW5jdGlvbih0LGUscixuKXtpZihpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKHIpfHwhUWUobikpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNpcmNsZVwiKTtyZXR1cm4gdGhpcy5lbGxpcHNlKHQsZSxyLHIsbil9LHkuc2V0Rm9udD1mdW5jdGlvbih0LGUscil7cmV0dXJuIHImJihlPWsoZSxyKSksU3Q9cWUodCxlLHtkaXNhYmxlV2FybmluZzohMX0pLHRoaXN9O3ZhciBocj15Ll9fcHJpdmF0ZV9fLmdldEZvbnQ9eS5nZXRGb250PWZ1bmN0aW9uKCl7cmV0dXJuIEZ0W3FlLmFwcGx5KHksYXJndW1lbnRzKV19O3kuX19wcml2YXRlX18uZ2V0Rm9udExpc3Q9eS5nZXRGb250TGlzdD1mdW5jdGlvbigpe3ZhciB0LGUscj17fTtmb3IodCBpbiBDdClpZihDdC5oYXNPd25Qcm9wZXJ0eSh0KSlmb3IoZSBpbiByW3RdPVtdLEN0W3RdKUN0W3RdLmhhc093blByb3BlcnR5KGUpJiZyW3RdLnB1c2goZSk7cmV0dXJuIHJ9LHkuYWRkRm9udD1mdW5jdGlvbih0LGUscixuLGkpe3ZhciBhPVtcIlN0YW5kYXJkRW5jb2RpbmdcIixcIk1hY1JvbWFuRW5jb2RpbmdcIixcIklkZW50aXR5LUhcIixcIldpbkFuc2lFbmNvZGluZ1wiXTtyZXR1cm4gYXJndW1lbnRzWzNdJiYtMSE9PWEuaW5kZXhPZihhcmd1bWVudHNbM10pP2k9YXJndW1lbnRzWzNdOmFyZ3VtZW50c1szXSYmLTE9PWEuaW5kZXhPZihhcmd1bWVudHNbM10pJiYocj1rKHIsbikpLGk9aXx8XCJJZGVudGl0eS1IXCIsUGUuY2FsbCh0aGlzLHQsZSxyLGkpfTt2YXIgbHIsZnI9ZS5saW5lV2lkdGh8fC4yMDAwMjUsZHI9eS5fX3ByaXZhdGVfXy5nZXRMaW5lV2lkdGg9eS5nZXRMaW5lV2lkdGg9ZnVuY3Rpb24oKXtyZXR1cm4gZnJ9LHByPXkuX19wcml2YXRlX18uc2V0TGluZVdpZHRoPXkuc2V0TGluZVdpZHRoPWZ1bmN0aW9uKHQpe3JldHVybiBmcj10LGx0KE8oVSh0KSkrXCIgd1wiKSx0aGlzfTt5Ll9fcHJpdmF0ZV9fLnNldExpbmVEYXNoPUUuQVBJLnNldExpbmVEYXNoPUUuQVBJLnNldExpbmVEYXNoUGF0dGVybj1mdW5jdGlvbih0LGUpe2lmKHQ9dHx8W10sZT1lfHwwLGlzTmFOKGUpfHwhQXJyYXkuaXNBcnJheSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuc2V0TGluZURhc2hcIik7cmV0dXJuIHQ9dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBPKFUodCkpfSkpLmpvaW4oXCIgXCIpLGU9TyhVKGUpKSxsdChcIltcIit0K1wiXSBcIitlK1wiIGRcIiksdGhpc307dmFyIGdyPXkuX19wcml2YXRlX18uZ2V0TGluZUhlaWdodD15LmdldExpbmVIZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ3QqbHJ9O3kuX19wcml2YXRlX18uZ2V0TGluZUhlaWdodD15LmdldExpbmVIZWlnaHQ9ZnVuY3Rpb24oKXtyZXR1cm4gZ3QqbHJ9O3ZhciBtcj15Ll9fcHJpdmF0ZV9fLnNldExpbmVIZWlnaHRGYWN0b3I9eS5zZXRMaW5lSGVpZ2h0RmFjdG9yPWZ1bmN0aW9uKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZih0PXR8fDEuMTUpJiYobHI9dCksdGhpc30sdnI9eS5fX3ByaXZhdGVfXy5nZXRMaW5lSGVpZ2h0RmFjdG9yPXkuZ2V0TGluZUhlaWdodEZhY3Rvcj1mdW5jdGlvbigpe3JldHVybiBscn07bXIoZS5saW5lSGVpZ2h0KTt2YXIgYnI9eS5fX3ByaXZhdGVfXy5nZXRIb3Jpem9udGFsQ29vcmRpbmF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gVSh0KX0seXI9eS5fX3ByaXZhdGVfXy5nZXRWZXJ0aWNhbENvb3JkaW5hdGU9ZnVuY3Rpb24odCl7cmV0dXJuIFM9PT14LkFEVkFOQ0VEP3Q6UnRbJF0ubWVkaWFCb3gudG9wUmlnaHRZLVJ0WyRdLm1lZGlhQm94LmJvdHRvbUxlZnRZLVUodCl9LHdyPXkuX19wcml2YXRlX18uZ2V0SG9yaXpvbnRhbENvb3JkaW5hdGVTdHJpbmc9eS5nZXRIb3Jpem9udGFsQ29vcmRpbmF0ZVN0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gTyhicih0KSl9LE5yPXkuX19wcml2YXRlX18uZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nPXkuZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nPWZ1bmN0aW9uKHQpe3JldHVybiBPKHlyKHQpKX0sTHI9ZS5zdHJva2VDb2xvcnx8XCIwIEdcIjt5Ll9fcHJpdmF0ZV9fLmdldFN0cm9rZUNvbG9yPXkuZ2V0RHJhd0NvbG9yPWZ1bmN0aW9uKCl7cmV0dXJuIGVlKExyKX0seS5fX3ByaXZhdGVfXy5zZXRTdHJva2VDb2xvcj15LnNldERyYXdDb2xvcj1mdW5jdGlvbih0LGUscixuKXtyZXR1cm4gTHI9cmUoe2NoMTp0LGNoMjplLGNoMzpyLGNoNDpuLHBkZkNvbG9yVHlwZTpcImRyYXdcIixwcmVjaXNpb246Mn0pLGx0KExyKSx0aGlzfTt2YXIgQXI9ZS5maWxsQ29sb3J8fFwiMCBnXCI7eS5fX3ByaXZhdGVfXy5nZXRGaWxsQ29sb3I9eS5nZXRGaWxsQ29sb3I9ZnVuY3Rpb24oKXtyZXR1cm4gZWUoQXIpfSx5Ll9fcHJpdmF0ZV9fLnNldEZpbGxDb2xvcj15LnNldEZpbGxDb2xvcj1mdW5jdGlvbih0LGUscixuKXtyZXR1cm4gQXI9cmUoe2NoMTp0LGNoMjplLGNoMzpyLGNoNDpuLHBkZkNvbG9yVHlwZTpcImZpbGxcIixwcmVjaXNpb246Mn0pLGx0KEFyKSx0aGlzfTt2YXIgeHI9ZS50ZXh0Q29sb3J8fFwiMCBnXCIsU3I9eS5fX3ByaXZhdGVfXy5nZXRUZXh0Q29sb3I9eS5nZXRUZXh0Q29sb3I9ZnVuY3Rpb24oKXtyZXR1cm4gZWUoeHIpfTt5Ll9fcHJpdmF0ZV9fLnNldFRleHRDb2xvcj15LnNldFRleHRDb2xvcj1mdW5jdGlvbih0LGUscixuKXtyZXR1cm4geHI9cmUoe2NoMTp0LGNoMjplLGNoMzpyLGNoNDpuLHBkZkNvbG9yVHlwZTpcInRleHRcIixwcmVjaXNpb246M30pLHRoaXN9O3ZhciBfcj1lLmNoYXJTcGFjZSxQcj15Ll9fcHJpdmF0ZV9fLmdldENoYXJTcGFjZT15LmdldENoYXJTcGFjZT1mdW5jdGlvbigpe3JldHVybiBwYXJzZUZsb2F0KF9yfHwwKX07eS5fX3ByaXZhdGVfXy5zZXRDaGFyU3BhY2U9eS5zZXRDaGFyU3BhY2U9ZnVuY3Rpb24odCl7aWYoaXNOYU4odCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8ganNQREYuc2V0Q2hhclNwYWNlXCIpO3JldHVybiBfcj10LHRoaXN9O3ZhciBrcj0wO3kuQ2FwSm9pblN0eWxlcz17MDowLGJ1dHQ6MCxidXQ6MCxtaXRlcjowLDE6MSxyb3VuZDoxLHJvdW5kZWQ6MSxjaXJjbGU6MSwyOjIscHJvamVjdGluZzoyLHByb2plY3Q6MixzcXVhcmU6MixiZXZlbDoyfSx5Ll9fcHJpdmF0ZV9fLnNldExpbmVDYXA9eS5zZXRMaW5lQ2FwPWZ1bmN0aW9uKHQpe3ZhciBlPXkuQ2FwSm9pblN0eWxlc1t0XTtpZih2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcihcIkxpbmUgY2FwIHN0eWxlIG9mICdcIit0K1wiJyBpcyBub3QgcmVjb2duaXplZC4gU2VlIG9yIGV4dGVuZCAuQ2FwSm9pblN0eWxlcyBwcm9wZXJ0eSBmb3IgdmFsaWQgc3R5bGVzXCIpO3JldHVybiBrcj1lLGx0KGUrXCIgSlwiKSx0aGlzfTt2YXIgSXI9MDt5Ll9fcHJpdmF0ZV9fLnNldExpbmVKb2luPXkuc2V0TGluZUpvaW49ZnVuY3Rpb24odCl7dmFyIGU9eS5DYXBKb2luU3R5bGVzW3RdO2lmKHZvaWQgMD09PWUpdGhyb3cgbmV3IEVycm9yKFwiTGluZSBqb2luIHN0eWxlIG9mICdcIit0K1wiJyBpcyBub3QgcmVjb2duaXplZC4gU2VlIG9yIGV4dGVuZCAuQ2FwSm9pblN0eWxlcyBwcm9wZXJ0eSBmb3IgdmFsaWQgc3R5bGVzXCIpO3JldHVybiBJcj1lLGx0KGUrXCIgalwiKSx0aGlzfSx5Ll9fcHJpdmF0ZV9fLnNldExpbmVNaXRlckxpbWl0PXkuX19wcml2YXRlX18uc2V0TWl0ZXJMaW1pdD15LnNldExpbmVNaXRlckxpbWl0PXkuc2V0TWl0ZXJMaW1pdD1mdW5jdGlvbih0KXtpZih0PXR8fDAsaXNOYU4odCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8ganNQREYuc2V0TGluZU1pdGVyTGltaXRcIik7cmV0dXJuIGx0KE8oVSh0KSkrXCIgTVwiKSx0aGlzfSx5LkdTdGF0ZT1qLHkuc2V0R1N0YXRlPWZ1bmN0aW9uKHQpeyh0PVwic3RyaW5nXCI9PXR5cGVvZiB0P010W0V0W3RdXTpGcihudWxsLHQpKS5lcXVhbHMocXQpfHwobHQoXCIvXCIrdC5pZCtcIiBnc1wiKSxxdD10KX07dmFyIEZyPWZ1bmN0aW9uKHQsZSl7aWYoIXR8fCFFdFt0XSl7dmFyIHI9ITE7Zm9yKHZhciBuIGluIE10KWlmKE10Lmhhc093blByb3BlcnR5KG4pJiZNdFtuXS5lcXVhbHMoZSkpe3I9ITA7YnJlYWt9aWYocillPU10W25dO2Vsc2V7dmFyIGk9XCJHU1wiKyhPYmplY3Qua2V5cyhNdCkubGVuZ3RoKzEpLnRvU3RyaW5nKDEwKTtNdFtpXT1lLGUuaWQ9aX1yZXR1cm4gdCYmKEV0W3RdPWUuaWQpLFR0LnB1Ymxpc2goXCJhZGRHU3RhdGVcIixlKSxlfX07eS5hZGRHU3RhdGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gRnIodCxlKSx0aGlzfSx5LnNhdmVHcmFwaGljc1N0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGx0KFwicVwiKSxqdC5wdXNoKHtrZXk6U3Qsc2l6ZTpndCxjb2xvcjp4cn0pLHRoaXN9LHkucmVzdG9yZUdyYXBoaWNzU3RhdGU9ZnVuY3Rpb24oKXtsdChcIlFcIik7dmFyIHQ9anQucG9wKCk7cmV0dXJuIFN0PXQua2V5LGd0PXQuc2l6ZSx4cj10LmNvbG9yLHF0PW51bGwsdGhpc30seS5zZXRDdXJyZW50VHJhbnNmb3JtYXRpb25NYXRyaXg9ZnVuY3Rpb24odCl7cmV0dXJuIGx0KHQudG9TdHJpbmcoKStcIiBjbVwiKSx0aGlzfSx5LmNvbW1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGx0KFwiI1wiK3QpLHRoaXN9O3ZhciBDcj1mdW5jdGlvbih0LGUpe3ZhciByPXR8fDA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ4XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbih0KXtpc05hTih0KXx8KHI9cGFyc2VGbG9hdCh0KSl9fSk7dmFyIG49ZXx8MDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInlcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKHQpe2lzTmFOKHQpfHwobj1wYXJzZUZsb2F0KHQpKX19KTt2YXIgaT1cInB0XCI7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidHlwZVwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24odCl7aT10LnRvU3RyaW5nKCl9fSksdGhpc30sanI9ZnVuY3Rpb24odCxlLHIsbil7Q3IuY2FsbCh0aGlzLHQsZSksdGhpcy50eXBlPVwicmVjdFwiO3ZhciBpPXJ8fDA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ3XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbih0KXtpc05hTih0KXx8KGk9cGFyc2VGbG9hdCh0KSl9fSk7dmFyIGE9bnx8MDtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJoXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9LHNldDpmdW5jdGlvbih0KXtpc05hTih0KXx8KGE9cGFyc2VGbG9hdCh0KSl9fSksdGhpc30sT3I9ZnVuY3Rpb24oKXt0aGlzLnBhZ2U9RHQsdGhpcy5jdXJyZW50UGFnZT0kLHRoaXMucGFnZXM9b3Quc2xpY2UoMCksdGhpcy5wYWdlc0NvbnRleHQ9UnQuc2xpY2UoMCksdGhpcy54PVB0LHRoaXMueT1rdCx0aGlzLm1hdHJpeD1JdCx0aGlzLndpZHRoPXFyKCQpLHRoaXMuaGVpZ2h0PVJyKCQpLHRoaXMub3V0cHV0RGVzdGluYXRpb249Y3QsdGhpcy5pZD1cIlwiLHRoaXMub2JqZWN0TnVtYmVyPS0xfTtPci5wcm90b3R5cGUucmVzdG9yZT1mdW5jdGlvbigpe0R0PXRoaXMucGFnZSwkPXRoaXMuY3VycmVudFBhZ2UsUnQ9dGhpcy5wYWdlc0NvbnRleHQsb3Q9dGhpcy5wYWdlcyxQdD10aGlzLngsa3Q9dGhpcy55LEl0PXRoaXMubWF0cml4LERyKCQsdGhpcy53aWR0aCksVHIoJCx0aGlzLmhlaWdodCksY3Q9dGhpcy5vdXRwdXREZXN0aW5hdGlvbn07dmFyIEJyPWZ1bmN0aW9uKHQsZSxyLG4saSl7V3QucHVzaChuZXcgT3IpLER0PSQ9MCxvdD1bXSxQdD10LGt0PWUsSXQ9aSxqZShbcixuXSl9LE1yPWZ1bmN0aW9uKHQpe2lmKEh0W3RdKVd0LnBvcCgpLnJlc3RvcmUoKTtlbHNle3ZhciBlPW5ldyBPcixyPVwiWG9cIisoT2JqZWN0LmtleXMoenQpLmxlbmd0aCsxKS50b1N0cmluZygxMCk7ZS5pZD1yLEh0W3RdPXIsenRbcl09ZSxUdC5wdWJsaXNoKFwiYWRkRm9ybU9iamVjdFwiLGUpLFd0LnBvcCgpLnJlc3RvcmUoKX19O2Zvcih2YXIgRXIgaW4geS5iZWdpbkZvcm1PYmplY3Q9ZnVuY3Rpb24odCxlLHIsbixpKXtyZXR1cm4gQnIodCxlLHIsbixpKSx0aGlzfSx5LmVuZEZvcm1PYmplY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIE1yKHQpLHRoaXN9LHkuZG9Gb3JtT2JqZWN0PWZ1bmN0aW9uKHQsZSl7dmFyIHI9enRbSHRbdF1dO3JldHVybiBsdChcInFcIiksbHQoZS50b1N0cmluZygpK1wiIGNtXCIpLGx0KFwiL1wiK3IuaWQrXCIgRG9cIiksbHQoXCJRXCIpLHRoaXN9LHkuZ2V0Rm9ybU9iamVjdD1mdW5jdGlvbih0KXt2YXIgZT16dFtIdFt0XV07cmV0dXJue3g6ZS54LHk6ZS55LHdpZHRoOmUud2lkdGgsaGVpZ2h0OmUuaGVpZ2h0LG1hdHJpeDplLm1hdHJpeH19LHkuc2F2ZT1mdW5jdGlvbih0LGUpe3JldHVybiB0PXR8fFwiZ2VuZXJhdGVkLnBkZlwiLChlPWV8fHt9KS5yZXR1cm5Qcm9taXNlPWUucmV0dXJuUHJvbWlzZXx8ITEsITE9PT1lLnJldHVyblByb21pc2U/KGwoV2UoSGUoKSksdCksXCJmdW5jdGlvblwiPT10eXBlb2YgbC51bmxvYWQmJm4uc2V0VGltZW91dCYmc2V0VGltZW91dChsLnVubG9hZCw5MTEpLHRoaXMpOm5ldyBQcm9taXNlKChmdW5jdGlvbihlLHIpe3RyeXt2YXIgaT1sKFdlKEhlKCkpLHQpO1wiZnVuY3Rpb25cIj09dHlwZW9mIGwudW5sb2FkJiZuLnNldFRpbWVvdXQmJnNldFRpbWVvdXQobC51bmxvYWQsOTExKSxlKGkpfWNhdGNoKHQpe3IodC5tZXNzYWdlKX19KSl9LEUuQVBJKUUuQVBJLmhhc093blByb3BlcnR5KEVyKSYmKFwiZXZlbnRzXCI9PT1FciYmRS5BUEkuZXZlbnRzLmxlbmd0aD9mdW5jdGlvbih0LGUpe3ZhciByLG4saTtmb3IoaT1lLmxlbmd0aC0xOy0xIT09aTtpLS0pcj1lW2ldWzBdLG49ZVtpXVsxXSx0LnN1YnNjcmliZS5hcHBseSh0LFtyXS5jb25jYXQoXCJmdW5jdGlvblwiPT10eXBlb2Ygbj9bbl06bikpfShUdCxFLkFQSS5ldmVudHMpOnlbRXJdPUUuQVBJW0VyXSk7dmFyIHFyPXkuZ2V0UGFnZVdpZHRoPWZ1bmN0aW9uKHQpe3JldHVybihSdFt0PXR8fCRdLm1lZGlhQm94LnRvcFJpZ2h0WC1SdFt0XS5tZWRpYUJveC5ib3R0b21MZWZ0WCkvX3R9LERyPXkuc2V0UGFnZVdpZHRoPWZ1bmN0aW9uKHQsZSl7UnRbdF0ubWVkaWFCb3gudG9wUmlnaHRYPWUqX3QrUnRbdF0ubWVkaWFCb3guYm90dG9tTGVmdFh9LFJyPXkuZ2V0UGFnZUhlaWdodD1mdW5jdGlvbih0KXtyZXR1cm4oUnRbdD10fHwkXS5tZWRpYUJveC50b3BSaWdodFktUnRbdF0ubWVkaWFCb3guYm90dG9tTGVmdFkpL190fSxUcj15LnNldFBhZ2VIZWlnaHQ9ZnVuY3Rpb24odCxlKXtSdFt0XS5tZWRpYUJveC50b3BSaWdodFk9ZSpfdCtSdFt0XS5tZWRpYUJveC5ib3R0b21MZWZ0WX07cmV0dXJuIHkuaW50ZXJuYWw9e3BkZkVzY2FwZTpDZSxnZXRTdHlsZTp0cixnZXRGb250OmhyLGdldEZvbnRTaXplOnZ0LGdldENoYXJTcGFjZTpQcixnZXRUZXh0Q29sb3I6U3IsZ2V0TGluZUhlaWdodDpncixnZXRMaW5lSGVpZ2h0RmFjdG9yOnZyLGdldExpbmVXaWR0aDpkcix3cml0ZTpmdCxnZXRIb3Jpem9udGFsQ29vcmRpbmF0ZTpicixnZXRWZXJ0aWNhbENvb3JkaW5hdGU6eXIsZ2V0Q29vcmRpbmF0ZVN0cmluZzp3cixnZXRWZXJ0aWNhbENvb3JkaW5hdGVTdHJpbmc6TnIsY29sbGVjdGlvbnM6e30sbmV3T2JqZWN0Olh0LG5ld0FkZGl0aW9uYWxPYmplY3Q6JHQsbmV3T2JqZWN0RGVmZXJyZWQ6S3QsbmV3T2JqZWN0RGVmZXJyZWRCZWdpbjpadCxnZXRGaWx0ZXJzOm5lLHB1dFN0cmVhbTppZSxldmVudHM6VHQsc2NhbGVGYWN0b3I6X3QscGFnZVNpemU6e2dldFdpZHRoOmZ1bmN0aW9uKCl7cmV0dXJuIHFyKCQpfSxzZXRXaWR0aDpmdW5jdGlvbih0KXtEcigkLHQpfSxnZXRIZWlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gUnIoJCl9LHNldEhlaWdodDpmdW5jdGlvbih0KXtUcigkLHQpfX0sZW5jcnlwdGlvbk9wdGlvbnM6bSxlbmNyeXB0aW9uOlllLGdldEVuY3J5cHRvcjpKZSxvdXRwdXQ6VmUsZ2V0TnVtYmVyT2ZQYWdlczpFZSxwYWdlczpvdCxvdXQ6bHQsZjI6UixmMzpULGdldFBhZ2VJbmZvOlhlLGdldFBhZ2VJbmZvQnlPYmpJZDpLZSxnZXRDdXJyZW50UGFnZUluZm86WmUsZ2V0UERGVmVyc2lvbjpOLFBvaW50OkNyLFJlY3RhbmdsZTpqcixNYXRyaXg6VnQsaGFzSG90Zml4OkdlfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoeS5pbnRlcm5hbC5wYWdlU2l6ZSxcIndpZHRoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBxcigkKX0sc2V0OmZ1bmN0aW9uKHQpe0RyKCQsdCl9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHkuaW50ZXJuYWwucGFnZVNpemUsXCJoZWlnaHRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFJyKCQpfSxzZXQ6ZnVuY3Rpb24odCl7VHIoJCx0KX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxrZS5jYWxsKHkscHQpLFN0PVwiRjFcIixPZShzLGkpLFR0LnB1Ymxpc2goXCJpbml0aWFsaXplZFwiKSx5fUkucHJvdG90eXBlLmxzYkZpcnN0V29yZD1mdW5jdGlvbih0KXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh0Pj4wJjI1NSx0Pj44JjI1NSx0Pj4xNiYyNTUsdD4+MjQmMjU1KX0sSS5wcm90b3R5cGUudG9IZXhTdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BsaXQoXCJcIikubWFwKChmdW5jdGlvbih0KXtyZXR1cm4oXCIwXCIrKDI1NSZ0LmNoYXJDb2RlQXQoMCkpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfSkpLmpvaW4oXCJcIil9LEkucHJvdG90eXBlLmhleFRvQnl0ZXM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLHI9MDtyPHQubGVuZ3RoO3IrPTIpZS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQodC5zdWJzdHIociwyKSwxNikpKTtyZXR1cm4gZS5qb2luKFwiXCIpfSxJLnByb3RvdHlwZS5wcm9jZXNzT3duZXJQYXNzd29yZD1mdW5jdGlvbih0LGUpe3JldHVybiBQKHgoZSkuc3Vic3RyKDAsNSksdCl9LEkucHJvdG90eXBlLmVuY3J5cHRvcj1mdW5jdGlvbih0LGUpe3ZhciByPXgodGhpcy5lbmNyeXB0aW9uS2V5K1N0cmluZy5mcm9tQ2hhckNvZGUoMjU1JnQsdD4+OCYyNTUsdD4+MTYmMjU1LDI1NSZlLGU+PjgmMjU1KSkuc3Vic3RyKDAsMTApO3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gUChyLHQpfX0sai5wcm90b3R5cGUuZXF1YWxzPWZ1bmN0aW9uKGUpe3ZhciByLG49XCJpZCxvYmplY3ROdW1iZXIsZXF1YWxzXCI7aWYoIWV8fHQoZSkhPT10KHRoaXMpKXJldHVybiExO3ZhciBpPTA7Zm9yKHIgaW4gdGhpcylpZighKG4uaW5kZXhPZihyKT49MCkpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkocikmJiFlLmhhc093blByb3BlcnR5KHIpKXJldHVybiExO2lmKHRoaXNbcl0hPT1lW3JdKXJldHVybiExO2krK31mb3IociBpbiBlKWUuaGFzT3duUHJvcGVydHkocikmJm4uaW5kZXhPZihyKTwwJiZpLS07cmV0dXJuIDA9PT1pfSxFLkFQST17ZXZlbnRzOltdfSxFLnZlcnNpb249XCIyLjUuMVwiO3ZhciBxPUUuQVBJLEQ9MSxSPWZ1bmN0aW9uKHQpe3JldHVybiB0LnJlcGxhY2UoL1xcXFwvZyxcIlxcXFxcXFxcXCIpLnJlcGxhY2UoL1xcKC9nLFwiXFxcXChcIikucmVwbGFjZSgvXFwpL2csXCJcXFxcKVwiKX0sVD1mdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9cXFxcXFxcXC9nLFwiXFxcXFwiKS5yZXBsYWNlKC9cXFxcXFwoL2csXCIoXCIpLnJlcGxhY2UoL1xcXFxcXCkvZyxcIilcIil9LFU9ZnVuY3Rpb24odCl7cmV0dXJuIHQudG9GaXhlZCgyKX0sej1mdW5jdGlvbih0KXtyZXR1cm4gdC50b0ZpeGVkKDUpfTtxLl9fYWNyb2Zvcm1fXz17fTt2YXIgSD1mdW5jdGlvbih0LGUpe3QucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUpLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXR9LFc9ZnVuY3Rpb24odCl7cmV0dXJuIHQqRH0sVj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgdXQscj1BdC5pbnRlcm5hbC5nZXRIZWlnaHQodCl8fDAsbj1BdC5pbnRlcm5hbC5nZXRXaWR0aCh0KXx8MDtyZXR1cm4gZS5CQm94PVswLDAsTnVtYmVyKFUobikpLE51bWJlcihVKHIpKV0sZX0sRz1xLl9fYWNyb2Zvcm1fXy5zZXRCaXQ9ZnVuY3Rpb24odCxlKXtpZih0PXR8fDAsZT1lfHwwLGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuQVBJLl9fYWNyb2Zvcm1fXy5zZXRCaXRcIik7cmV0dXJuIHR8PTE8PGV9LFk9cS5fX2Fjcm9mb3JtX18uY2xlYXJCaXQ9ZnVuY3Rpb24odCxlKXtpZih0PXR8fDAsZT1lfHwwLGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuQVBJLl9fYWNyb2Zvcm1fXy5jbGVhckJpdFwiKTtyZXR1cm4gdCY9figxPDxlKX0sSj1xLl9fYWNyb2Zvcm1fXy5nZXRCaXQ9ZnVuY3Rpb24odCxlKXtpZihpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLkFQSS5fX2Fjcm9mb3JtX18uZ2V0Qml0XCIpO3JldHVybiAwPT0odCYxPDxlKT8wOjF9LFg9cS5fX2Fjcm9mb3JtX18uZ2V0Qml0Rm9yUGRmPWZ1bmN0aW9uKHQsZSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5BUEkuX19hY3JvZm9ybV9fLmdldEJpdEZvclBkZlwiKTtyZXR1cm4gSih0LGUtMSl9LEs9cS5fX2Fjcm9mb3JtX18uc2V0Qml0Rm9yUGRmPWZ1bmN0aW9uKHQsZSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5BUEkuX19hY3JvZm9ybV9fLnNldEJpdEZvclBkZlwiKTtyZXR1cm4gRyh0LGUtMSl9LFo9cS5fX2Fjcm9mb3JtX18uY2xlYXJCaXRGb3JQZGY9ZnVuY3Rpb24odCxlKXtpZihpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLkFQSS5fX2Fjcm9mb3JtX18uY2xlYXJCaXRGb3JQZGZcIik7cmV0dXJuIFkodCxlLTEpfSwkPXEuX19hY3JvZm9ybV9fLmNhbGN1bGF0ZUNvb3JkaW5hdGVzPWZ1bmN0aW9uKHQsZSl7dmFyIHI9ZS5pbnRlcm5hbC5nZXRIb3Jpem9udGFsQ29vcmRpbmF0ZSxuPWUuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlLGk9dFswXSxhPXRbMV0sbz10WzJdLHM9dFszXSxjPXt9O3JldHVybiBjLmxvd2VyTGVmdF9YPXIoaSl8fDAsYy5sb3dlckxlZnRfWT1uKGErcyl8fDAsYy51cHBlclJpZ2h0X1g9cihpK28pfHwwLGMudXBwZXJSaWdodF9ZPW4oYSl8fDAsW051bWJlcihVKGMubG93ZXJMZWZ0X1gpKSxOdW1iZXIoVShjLmxvd2VyTGVmdF9ZKSksTnVtYmVyKFUoYy51cHBlclJpZ2h0X1gpKSxOdW1iZXIoVShjLnVwcGVyUmlnaHRfWSkpXX0sUT1mdW5jdGlvbih0KXtpZih0LmFwcGVhcmFuY2VTdHJlYW1Db250ZW50KXJldHVybiB0LmFwcGVhcmFuY2VTdHJlYW1Db250ZW50O2lmKHQuVnx8dC5EVil7dmFyIGU9W10scj10Ll9WfHx0LkRWLG49dHQodCxyKSxpPXQuc2NvcGUuaW50ZXJuYWwuZ2V0Rm9udCh0LmZvbnROYW1lLHQuZm9udFN0eWxlKS5pZDtlLnB1c2goXCIvVHggQk1DXCIpLGUucHVzaChcInFcIiksZS5wdXNoKFwiQlRcIiksZS5wdXNoKHQuc2NvcGUuX19wcml2YXRlX18uZW5jb2RlQ29sb3JTdHJpbmcodC5jb2xvcikpLGUucHVzaChcIi9cIitpK1wiIFwiK1Uobi5mb250U2l6ZSkrXCIgVGZcIiksZS5wdXNoKFwiMSAwIDAgMSAwIDAgVG1cIiksZS5wdXNoKG4udGV4dCksZS5wdXNoKFwiRVRcIiksZS5wdXNoKFwiUVwiKSxlLnB1c2goXCJFTUNcIik7dmFyIGE9Vih0KTtyZXR1cm4gYS5zY29wZT10LnNjb3BlLGEuc3RyZWFtPWUuam9pbihcIlxcblwiKSxhfX0sdHQ9ZnVuY3Rpb24odCxlKXt2YXIgcj0wPT09dC5mb250U2l6ZT90Lm1heEZvbnRTaXplOnQuZm9udFNpemUsbj17dGV4dDpcIlwiLGZvbnRTaXplOlwiXCJ9LGk9KGU9XCIpXCI9PShlPVwiKFwiPT1lLnN1YnN0cigwLDEpP2Uuc3Vic3RyKDEpOmUpLnN1YnN0cihlLmxlbmd0aC0xKT9lLnN1YnN0cigwLGUubGVuZ3RoLTEpOmUpLnNwbGl0KFwiIFwiKTtpPXQubXVsdGlsaW5lP2kubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zcGxpdChcIlxcblwiKX0pKTppLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuW3RdfSkpO3ZhciBhPXIsbz1BdC5pbnRlcm5hbC5nZXRIZWlnaHQodCl8fDA7bz1vPDA/LW86bzt2YXIgcz1BdC5pbnRlcm5hbC5nZXRXaWR0aCh0KXx8MDtzPXM8MD8tczpzO3ZhciBjPWZ1bmN0aW9uKGUscixuKXtpZihlKzE8aS5sZW5ndGgpe3ZhciBhPXIrXCIgXCIraVtlKzFdWzBdO3JldHVybiBldChhLHQsbikud2lkdGg8PXMtNH1yZXR1cm4hMX07YSsrO3Q6Zm9yKDthPjA7KXtlPVwiXCIsYS0tO3ZhciB1LGgsbD1ldChcIjNcIix0LGEpLmhlaWdodCxmPXQubXVsdGlsaW5lP28tYTooby1sKS8yLGQ9Zis9MixwPTAsZz0wLG09MDtpZihhPD0wKXtlPVwiKC4uLikgVGpcXG5cIixlKz1cIiUgV2lkdGggb2YgVGV4dDogXCIrZXQoZSx0LGE9MTIpLndpZHRoK1wiLCBGaWVsZFdpZHRoOlwiK3MrXCJcXG5cIjticmVha31mb3IodmFyIHY9XCJcIixiPTAseT0wO3k8aS5sZW5ndGg7eSsrKWlmKGkuaGFzT3duUHJvcGVydHkoeSkpe3ZhciB3PSExO2lmKDEhPT1pW3ldLmxlbmd0aCYmbSE9PWlbeV0ubGVuZ3RoLTEpe2lmKChsKzIpKihiKzIpKzI+byljb250aW51ZSB0O3YrPWlbeV1bbV0sdz0hMCxnPXkseS0tfWVsc2V7dj1cIiBcIj09KHYrPWlbeV1bbV0rXCIgXCIpLnN1YnN0cih2Lmxlbmd0aC0xKT92LnN1YnN0cigwLHYubGVuZ3RoLTEpOnY7dmFyIE49cGFyc2VJbnQoeSksTD1jKE4sdixhKSxBPXk+PWkubGVuZ3RoLTE7aWYoTCYmIUEpe3YrPVwiIFwiLG09MDtjb250aW51ZX1pZihMfHxBKXtpZihBKWc9TjtlbHNlIGlmKHQubXVsdGlsaW5lJiYobCsyKSooYisyKSsyPm8pY29udGludWUgdH1lbHNle2lmKCF0Lm11bHRpbGluZSljb250aW51ZSB0O2lmKChsKzIpKihiKzIpKzI+byljb250aW51ZSB0O2c9Tn19Zm9yKHZhciB4PVwiXCIsUz1wO1M8PWc7UysrKXt2YXIgXz1pW1NdO2lmKHQubXVsdGlsaW5lKXtpZihTPT09Zyl7eCs9X1ttXStcIiBcIixtPShtKzEpJV8ubGVuZ3RoO2NvbnRpbnVlfWlmKFM9PT1wKXt4Kz1fW18ubGVuZ3RoLTFdK1wiIFwiO2NvbnRpbnVlfX14Kz1fWzBdK1wiIFwifXN3aXRjaCh4PVwiIFwiPT14LnN1YnN0cih4Lmxlbmd0aC0xKT94LnN1YnN0cigwLHgubGVuZ3RoLTEpOngsaD1ldCh4LHQsYSkud2lkdGgsdC50ZXh0QWxpZ24pe2Nhc2VcInJpZ2h0XCI6dT1zLWgtMjticmVhaztjYXNlXCJjZW50ZXJcIjp1PShzLWgpLzI7YnJlYWs7Y2FzZVwibGVmdFwiOmRlZmF1bHQ6dT0yfWUrPVUodSkrXCIgXCIrVShkKStcIiBUZFxcblwiLGUrPVwiKFwiK1IoeCkrXCIpIFRqXFxuXCIsZSs9LVUodSkrXCIgMCBUZFxcblwiLGQ9LShhKzIpLGg9MCxwPXc/ZzpnKzEsYisrLHY9XCJcIn1lbHNlO2JyZWFrfXJldHVybiBuLnRleHQ9ZSxuLmZvbnRTaXplPWEsbn0sZXQ9ZnVuY3Rpb24odCxlLHIpe3ZhciBuPWUuc2NvcGUuaW50ZXJuYWwuZ2V0Rm9udChlLmZvbnROYW1lLGUuZm9udFN0eWxlKSxpPWUuc2NvcGUuZ2V0U3RyaW5nVW5pdFdpZHRoKHQse2ZvbnQ6bixmb250U2l6ZTpwYXJzZUZsb2F0KHIpLGNoYXJTcGFjZTowfSkqcGFyc2VGbG9hdChyKTtyZXR1cm57aGVpZ2h0OmUuc2NvcGUuZ2V0U3RyaW5nVW5pdFdpZHRoKFwiM1wiLHtmb250Om4sZm9udFNpemU6cGFyc2VGbG9hdChyKSxjaGFyU3BhY2U6MH0pKnBhcnNlRmxvYXQocikqMS41LHdpZHRoOml9fSxydD17ZmllbGRzOltdLHhGb3JtczpbXSxhY3JvRm9ybURpY3Rpb25hcnlSb290Om51bGwscHJpbnRlZE91dDohMSxpbnRlcm5hbDpudWxsLGlzSW5pdGlhbGl6ZWQ6ITF9LG50PWZ1bmN0aW9uKHQsZSl7dmFyIHI9e3R5cGU6XCJyZWZlcmVuY2VcIixvYmplY3Q6dH07dm9pZCAwPT09ZS5pbnRlcm5hbC5nZXRQYWdlSW5mbyh0LnBhZ2UpLnBhZ2VDb250ZXh0LmFubm90YXRpb25zLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnR5cGU9PT1yLnR5cGUmJnQub2JqZWN0PT09ci5vYmplY3R9KSkmJmUuaW50ZXJuYWwuZ2V0UGFnZUluZm8odC5wYWdlKS5wYWdlQ29udGV4dC5hbm5vdGF0aW9ucy5wdXNoKHIpfSxpdD1mdW5jdGlvbihlLHIpe2Zvcih2YXIgbiBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkobikpe3ZhciBpPW4sYT1lW25dO3IuaW50ZXJuYWwubmV3T2JqZWN0RGVmZXJyZWRCZWdpbihhLm9iaklkLCEwKSxcIm9iamVjdFwiPT09dChhKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5wdXRTdHJlYW0mJmEucHV0U3RyZWFtKCksZGVsZXRlIGVbaV19fSxhdD1mdW5jdGlvbihlLHIpe2lmKHIuc2NvcGU9ZSx2b2lkIDAhPT1lLmludGVybmFsJiYodm9pZCAwPT09ZS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbnx8ITE9PT1lLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmlzSW5pdGlhbGl6ZWQpKXtpZihsdC5GaWVsZE51bT0wLGUuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW49SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShydCkpLGUuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdCl0aHJvdyBuZXcgRXJyb3IoXCJFeGNlcHRpb24gd2hpbGUgY3JlYXRpbmcgQWNyb2Zvcm1EaWN0aW9uYXJ5XCIpO0Q9ZS5pbnRlcm5hbC5zY2FsZUZhY3RvcixlLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3Q9bmV3IGh0LGUuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5zY29wZT1lLGUuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5fZXZlbnRJRD1lLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwb3N0UHV0UmVzb3VyY2VzXCIsKGZ1bmN0aW9uKCl7IWZ1bmN0aW9uKHQpe3QuaW50ZXJuYWwuZXZlbnRzLnVuc3Vic2NyaWJlKHQuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5fZXZlbnRJRCksZGVsZXRlIHQuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5fZXZlbnRJRCx0LmludGVybmFsLmFjcm9mb3JtUGx1Z2luLnByaW50ZWRPdXQ9ITB9KGUpfSkpLGUuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcImJ1aWxkRG9jdW1lbnRcIiwoZnVuY3Rpb24oKXshZnVuY3Rpb24odCl7dC5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290Lm9iaklkPXZvaWQgMDt2YXIgZT10LmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3QuRmllbGRzO2Zvcih2YXIgciBpbiBlKWlmKGUuaGFzT3duUHJvcGVydHkocikpe3ZhciBuPWVbcl07bi5vYmpJZD12b2lkIDAsbi5oYXNBbm5vdGF0aW9uJiZudChuLHQpfX0oZSl9KSksZS5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicHV0Q2F0YWxvZ1wiLChmdW5jdGlvbigpeyFmdW5jdGlvbih0KXtpZih2b2lkIDA9PT10LmludGVybmFsLmFjcm9mb3JtUGx1Z2luLmFjcm9Gb3JtRGljdGlvbmFyeVJvb3QpdGhyb3cgbmV3IEVycm9yKFwicHV0Q2F0YWxvZ0NhbGxiYWNrOiBSb290IG1pc3NpbmcuXCIpO3QuaW50ZXJuYWwud3JpdGUoXCIvQWNyb0Zvcm0gXCIrdC5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290Lm9iaklkK1wiIDAgUlwiKX0oZSl9KSksZS5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicG9zdFB1dFBhZ2VzXCIsKGZ1bmN0aW9uKHIpeyFmdW5jdGlvbihlLHIpe3ZhciBuPSFlO2Zvcih2YXIgaSBpbiBlfHwoci5pbnRlcm5hbC5uZXdPYmplY3REZWZlcnJlZEJlZ2luKHIuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5vYmpJZCwhMCksci5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290LnB1dFN0cmVhbSgpKSxlPWV8fHIuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5LaWRzKWlmKGUuaGFzT3duUHJvcGVydHkoaSkpe3ZhciBhPWVbaV0sbz1bXSxzPWEuUmVjdDtpZihhLlJlY3QmJihhLlJlY3Q9JChhLlJlY3QscikpLHIuaW50ZXJuYWwubmV3T2JqZWN0RGVmZXJyZWRCZWdpbihhLm9iaklkLCEwKSxhLkRBPUF0LmNyZWF0ZURlZmF1bHRBcHBlYXJhbmNlU3RyZWFtKGEpLFwib2JqZWN0XCI9PT10KGEpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLmdldEtleVZhbHVlTGlzdEZvclN0cmVhbSYmKG89YS5nZXRLZXlWYWx1ZUxpc3RGb3JTdHJlYW0oKSksYS5SZWN0PXMsYS5oYXNBcHBlYXJhbmNlU3RyZWFtJiYhYS5hcHBlYXJhbmNlU3RyZWFtQ29udGVudCl7dmFyIGM9UShhKTtvLnB1c2goe2tleTpcIkFQXCIsdmFsdWU6XCI8PC9OIFwiK2MrXCI+PlwifSksci5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMucHVzaChjKX1pZihhLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50KXt2YXIgdT1cIlwiO2Zvcih2YXIgaCBpbiBhLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50KWlmKGEuYXBwZWFyYW5jZVN0cmVhbUNvbnRlbnQuaGFzT3duUHJvcGVydHkoaCkpe3ZhciBsPWEuYXBwZWFyYW5jZVN0cmVhbUNvbnRlbnRbaF07aWYodSs9XCIvXCIraCtcIiBcIix1Kz1cIjw8XCIsT2JqZWN0LmtleXMobCkubGVuZ3RoPj0xfHxBcnJheS5pc0FycmF5KGwpKXtmb3IodmFyIGkgaW4gbClpZihsLmhhc093blByb3BlcnR5KGkpKXt2YXIgZj1sW2ldO1wiZnVuY3Rpb25cIj09dHlwZW9mIGYmJihmPWYuY2FsbChyLGEpKSx1Kz1cIi9cIitpK1wiIFwiK2YrXCIgXCIsci5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMuaW5kZXhPZihmKT49MHx8ci5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMucHVzaChmKX19ZWxzZVwiZnVuY3Rpb25cIj09dHlwZW9mKGY9bCkmJihmPWYuY2FsbChyLGEpKSx1Kz1cIi9cIitpK1wiIFwiK2Ysci5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMuaW5kZXhPZihmKT49MHx8ci5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi54Rm9ybXMucHVzaChmKTt1Kz1cIj4+XCJ9by5wdXNoKHtrZXk6XCJBUFwiLHZhbHVlOlwiPDxcXG5cIit1K1wiPj5cIn0pfXIuaW50ZXJuYWwucHV0U3RyZWFtKHthZGRpdGlvbmFsS2V5VmFsdWVzOm8sb2JqZWN0SWQ6YS5vYmpJZH0pLHIuaW50ZXJuYWwub3V0KFwiZW5kb2JqXCIpfW4mJml0KHIuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4ueEZvcm1zLHIpfShyLGUpfSkpLGUuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uaXNJbml0aWFsaXplZD0hMH19LG90PXEuX19hY3JvZm9ybV9fLmFycmF5VG9QZGZBcnJheT1mdW5jdGlvbihlLHIsbil7dmFyIGk9ZnVuY3Rpb24odCl7cmV0dXJuIHR9O2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgYT1cIltcIixvPTA7bzxlLmxlbmd0aDtvKyspc3dpdGNoKDAhPT1vJiYoYSs9XCIgXCIpLHQoZVtvXSkpe2Nhc2VcImJvb2xlYW5cIjpjYXNlXCJudW1iZXJcIjpjYXNlXCJvYmplY3RcIjphKz1lW29dLnRvU3RyaW5nKCk7YnJlYWs7Y2FzZVwic3RyaW5nXCI6XCIvXCIhPT1lW29dLnN1YnN0cigwLDEpPyh2b2lkIDAhPT1yJiZuJiYoaT1uLmludGVybmFsLmdldEVuY3J5cHRvcihyKSksYSs9XCIoXCIrUihpKGVbb10udG9TdHJpbmcoKSkpK1wiKVwiKTphKz1lW29dLnRvU3RyaW5nKCl9cmV0dXJuIGErPVwiXVwifXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIGpzUERGLl9fYWNyb2Zvcm1fXy5hcnJheVRvUGRmQXJyYXlcIil9O3ZhciBzdD1mdW5jdGlvbih0LGUscil7dmFyIG49ZnVuY3Rpb24odCl7cmV0dXJuIHR9O3JldHVybiB2b2lkIDAhPT1lJiZyJiYobj1yLmludGVybmFsLmdldEVuY3J5cHRvcihlKSksKHQ9dHx8XCJcIikudG9TdHJpbmcoKSx0PVwiKFwiK1Iobih0KSkrXCIpXCJ9LGN0PWZ1bmN0aW9uKCl7dGhpcy5fb2JqSWQ9dm9pZCAwLHRoaXMuX3Njb3BlPXZvaWQgMCxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm9iaklkXCIse2dldDpmdW5jdGlvbigpe2lmKHZvaWQgMD09PXRoaXMuX29iaklkKXtpZih2b2lkIDA9PT10aGlzLnNjb3BlKXJldHVybjt0aGlzLl9vYmpJZD10aGlzLnNjb3BlLmludGVybmFsLm5ld09iamVjdERlZmVycmVkKCl9cmV0dXJuIHRoaXMuX29iaklkfSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5fb2JqSWQ9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNjb3BlXCIse3ZhbHVlOnRoaXMuX3Njb3BlLHdyaXRhYmxlOiEwfSl9O2N0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm9iaklkK1wiIDAgUlwifSxjdC5wcm90b3R5cGUucHV0U3RyZWFtPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRLZXlWYWx1ZUxpc3RGb3JTdHJlYW0oKTt0aGlzLnNjb3BlLmludGVybmFsLnB1dFN0cmVhbSh7ZGF0YTp0aGlzLnN0cmVhbSxhZGRpdGlvbmFsS2V5VmFsdWVzOnQsb2JqZWN0SWQ6dGhpcy5vYmpJZH0pLHRoaXMuc2NvcGUuaW50ZXJuYWwub3V0KFwiZW5kb2JqXCIpfSxjdC5wcm90b3R5cGUuZ2V0S2V5VmFsdWVMaXN0Rm9yU3RyZWFtPWZ1bmN0aW9uKCl7dmFyIHQ9W10sZT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVyblwiY29udGVudFwiIT10JiZcImFwcGVhcmFuY2VTdHJlYW1Db250ZW50XCIhPXQmJlwic2NvcGVcIiE9dCYmXCJvYmpJZFwiIT10JiZcIl9cIiE9dC5zdWJzdHJpbmcoMCwxKX0pKTtmb3IodmFyIHIgaW4gZSlpZighMT09PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcyxlW3JdKS5jb25maWd1cmFibGUpe3ZhciBuPWVbcl0saT10aGlzW25dO2kmJihBcnJheS5pc0FycmF5KGkpP3QucHVzaCh7a2V5Om4sdmFsdWU6b3QoaSx0aGlzLm9iaklkLHRoaXMuc2NvcGUpfSk6aSBpbnN0YW5jZW9mIGN0PyhpLnNjb3BlPXRoaXMuc2NvcGUsdC5wdXNoKHtrZXk6bix2YWx1ZTppLm9iaklkK1wiIDAgUlwifSkpOlwiZnVuY3Rpb25cIiE9dHlwZW9mIGkmJnQucHVzaCh7a2V5Om4sdmFsdWU6aX0pKX1yZXR1cm4gdH07dmFyIHV0PWZ1bmN0aW9uKCl7Y3QuY2FsbCh0aGlzKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlR5cGVcIix7dmFsdWU6XCIvWE9iamVjdFwiLGNvbmZpZ3VyYWJsZTohMSx3cml0YWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiU3VidHlwZVwiLHt2YWx1ZTpcIi9Gb3JtXCIsY29uZmlndXJhYmxlOiExLHdyaXRhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJGb3JtVHlwZVwiLHt2YWx1ZToxLGNvbmZpZ3VyYWJsZTohMSx3cml0YWJsZTohMH0pO3ZhciB0LGU9W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJCQm94XCIse2NvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKHQpe2U9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlJlc291cmNlc1wiLHt2YWx1ZTpcIjIgMCBSXCIsY29uZmlndXJhYmxlOiExLHdyaXRhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJzdHJlYW1cIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITAsc2V0OmZ1bmN0aW9uKGUpe3Q9ZS50cmltKCl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0fHxudWxsfX0pfTtIKHV0LGN0KTt2YXIgaHQ9ZnVuY3Rpb24oKXtjdC5jYWxsKHRoaXMpO3ZhciB0LGU9W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJLaWRzXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmxlbmd0aD4wP2U6dm9pZCAwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiRmllbGRzXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBlfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiREFcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7aWYodCl7dmFyIGU9ZnVuY3Rpb24odCl7cmV0dXJuIHR9O3JldHVybiB0aGlzLnNjb3BlJiYoZT10aGlzLnNjb3BlLmludGVybmFsLmdldEVuY3J5cHRvcih0aGlzLm9iaklkKSksXCIoXCIrUihlKHQpKStcIilcIn19LHNldDpmdW5jdGlvbihlKXt0PWV9fSl9O0goaHQsY3QpO3ZhciBsdD1mdW5jdGlvbiB0KCl7Y3QuY2FsbCh0aGlzKTt2YXIgZT00O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiRlwiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX0sc2V0OmZ1bmN0aW9uKHQpe2lmKGlzTmFOKHQpKXRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBcIicrdCsnXCIgZm9yIGF0dHJpYnV0ZSBGIHN1cHBsaWVkLicpO2U9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNob3dXaGVuUHJpbnRlZFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihYKGUsMykpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRj1LKGUsMyk6dGhpcy5GPVooZSwzKX19KTt2YXIgcj0wO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiRmZcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgXCInK3QrJ1wiIGZvciBhdHRyaWJ1dGUgRmYgc3VwcGxpZWQuJyk7cj10fX0pO3ZhciBuPVtdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiUmVjdFwiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtpZigwIT09bi5sZW5ndGgpcmV0dXJuIG59LHNldDpmdW5jdGlvbih0KXtuPXZvaWQgMCE9PXQ/dDpbXX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInhcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIW58fGlzTmFOKG5bMF0pPzA6blswXX0sc2V0OmZ1bmN0aW9uKHQpe25bMF09dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInlcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIW58fGlzTmFOKG5bMV0pPzA6blsxXX0sc2V0OmZ1bmN0aW9uKHQpe25bMV09dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIndpZHRoXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiFufHxpc05hTihuWzJdKT8wOm5bMl19LHNldDpmdW5jdGlvbih0KXtuWzJdPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJoZWlnaHRcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIW58fGlzTmFOKG5bM10pPzA6blszXX0sc2V0OmZ1bmN0aW9uKHQpe25bM109dH19KTt2YXIgaT1cIlwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiRlRcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZVwiL0J0blwiOmNhc2VcIi9UeFwiOmNhc2VcIi9DaFwiOmNhc2VcIi9TaWdcIjppPXQ7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgXCInK3QrJ1wiIGZvciBhdHRyaWJ1dGUgRlQgc3VwcGxpZWQuJyl9fX0pO3ZhciBhPW51bGw7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJUXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKCFhfHxhLmxlbmd0aDwxKXtpZih0aGlzIGluc3RhbmNlb2YgeXQpcmV0dXJuO2E9XCJGaWVsZE9iamVjdFwiK3QuRmllbGROdW0rK312YXIgZT1mdW5jdGlvbih0KXtyZXR1cm4gdH07cmV0dXJuIHRoaXMuc2NvcGUmJihlPXRoaXMuc2NvcGUuaW50ZXJuYWwuZ2V0RW5jcnlwdG9yKHRoaXMub2JqSWQpKSxcIihcIitSKGUoYSkpK1wiKVwifSxzZXQ6ZnVuY3Rpb24odCl7YT10LnRvU3RyaW5nKCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJmaWVsZE5hbWVcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9LHNldDpmdW5jdGlvbih0KXthPXR9fSk7dmFyIG89XCJoZWx2ZXRpY2FcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImZvbnROYW1lXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24odCl7bz10fX0pO3ZhciBzPVwibm9ybWFsXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJmb250U3R5bGVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbih0KXtzPXR9fSk7dmFyIGM9MDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImZvbnRTaXplXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24odCl7Yz10fX0pO3ZhciB1PXZvaWQgMDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm1heEZvbnRTaXplXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT11PzUwL0Q6dX0sc2V0OmZ1bmN0aW9uKHQpe3U9dH19KTt2YXIgaD1cImJsYWNrXCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjb2xvclwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKHQpe2g9dH19KTt2YXIgbD1cIi9GMSAwIFRmIDAgZ1wiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiREFcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7aWYoISghbHx8dGhpcyBpbnN0YW5jZW9mIHl0fHx0aGlzIGluc3RhbmNlb2YgTnQpKXJldHVybiBzdChsLHRoaXMub2JqSWQsdGhpcy5zY29wZSl9LHNldDpmdW5jdGlvbih0KXt0PXQudG9TdHJpbmcoKSxsPXR9fSk7dmFyIGY9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkRWXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKGYpcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBtdD09ITE/c3QoZix0aGlzLm9iaklkLHRoaXMuc2NvcGUpOmZ9LHNldDpmdW5jdGlvbih0KXt0PXQudG9TdHJpbmcoKSxmPXRoaXMgaW5zdGFuY2VvZiBtdD09ITE/XCIoXCI9PT10LnN1YnN0cigwLDEpP1QodC5zdWJzdHIoMSx0Lmxlbmd0aC0yKSk6VCh0KTp0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZGVmYXVsdFZhbHVlXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzIGluc3RhbmNlb2YgbXQ9PSEwP1QoZi5zdWJzdHIoMSxmLmxlbmd0aC0xKSk6Zn0sc2V0OmZ1bmN0aW9uKHQpe3Q9dC50b1N0cmluZygpLGY9dGhpcyBpbnN0YW5jZW9mIG10PT0hMD9cIi9cIit0OnR9fSk7dmFyIGQ9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIl9WXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe2lmKGQpcmV0dXJuIGR9LHNldDpmdW5jdGlvbih0KXt0aGlzLlY9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlZcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7aWYoZClyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIG10PT0hMT9zdChkLHRoaXMub2JqSWQsdGhpcy5zY29wZSk6ZH0sc2V0OmZ1bmN0aW9uKHQpe3Q9dC50b1N0cmluZygpLGQ9dGhpcyBpbnN0YW5jZW9mIG10PT0hMT9cIihcIj09PXQuc3Vic3RyKDAsMSk/VCh0LnN1YnN0cigxLHQubGVuZ3RoLTIpKTpUKHQpOnR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ2YWx1ZVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIG10PT0hMD9UKGQuc3Vic3RyKDEsZC5sZW5ndGgtMSkpOmR9LHNldDpmdW5jdGlvbih0KXt0PXQudG9TdHJpbmcoKSxkPXRoaXMgaW5zdGFuY2VvZiBtdD09ITA/XCIvXCIrdDp0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFzQW5ub3RhdGlvblwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5SZWN0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiVHlwZVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oYXNBbm5vdGF0aW9uP1wiL0Fubm90XCI6bnVsbH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlN1YnR5cGVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzQW5ub3RhdGlvbj9cIi9XaWRnZXRcIjpudWxsfX0pO3ZhciBwLGc9ITE7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJoYXNBcHBlYXJhbmNlU3RyZWFtXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBnfSxzZXQ6ZnVuY3Rpb24odCl7dD1Cb29sZWFuKHQpLGc9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhZ2VcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7aWYocClyZXR1cm4gcH0sc2V0OmZ1bmN0aW9uKHQpe3A9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJlYWRPbmx5XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKFgodGhpcy5GZiwxKSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMSk6dGhpcy5GZj1aKHRoaXMuRmYsMSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJyZXF1aXJlZFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihYKHRoaXMuRmYsMikpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9Syh0aGlzLkZmLDIpOnRoaXMuRmY9Wih0aGlzLkZmLDIpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibm9FeHBvcnRcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDMpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPUsodGhpcy5GZiwzKTp0aGlzLkZmPVoodGhpcy5GZiwzKX19KTt2YXIgbT1udWxsO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiUVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtpZihudWxsIT09bSlyZXR1cm4gbX0sc2V0OmZ1bmN0aW9uKHQpe2lmKC0xPT09WzAsMSwyXS5pbmRleE9mKHQpKXRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBcIicrdCsnXCIgZm9yIGF0dHJpYnV0ZSBRIHN1cHBsaWVkLicpO209dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInRleHRBbGlnblwiLHtnZXQ6ZnVuY3Rpb24oKXt2YXIgdDtzd2l0Y2gobSl7Y2FzZSAwOmRlZmF1bHQ6dD1cImxlZnRcIjticmVhaztjYXNlIDE6dD1cImNlbnRlclwiO2JyZWFrO2Nhc2UgMjp0PVwicmlnaHRcIn1yZXR1cm4gdH0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsc2V0OmZ1bmN0aW9uKHQpe3N3aXRjaCh0KXtjYXNlXCJyaWdodFwiOmNhc2UgMjptPTI7YnJlYWs7Y2FzZVwiY2VudGVyXCI6Y2FzZSAxOm09MTticmVhaztjYXNlXCJsZWZ0XCI6Y2FzZSAwOmRlZmF1bHQ6bT0wfX19KX07SChsdCxjdCk7dmFyIGZ0PWZ1bmN0aW9uKCl7bHQuY2FsbCh0aGlzKSx0aGlzLkZUPVwiL0NoXCIsdGhpcy5WPVwiKClcIix0aGlzLmZvbnROYW1lPVwiemFwZmRpbmdiYXRzXCI7dmFyIHQ9MDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIlRJXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiB0fSxzZXQ6ZnVuY3Rpb24oZSl7dD1lfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidG9wSW5kZXhcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihlKXt0PWV9fSk7dmFyIGU9W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJPcHRcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG90KGUsdGhpcy5vYmpJZCx0aGlzLnNjb3BlKX0sc2V0OmZ1bmN0aW9uKHQpe3ZhciByLG47bj1bXSxcInN0cmluZ1wiPT10eXBlb2Yocj10KSYmKG49ZnVuY3Rpb24odCxlLHIpe3J8fChyPTEpO2Zvcih2YXIgbixpPVtdO249ZS5leGVjKHQpOylpLnB1c2gobltyXSk7cmV0dXJuIGl9KHIsL1xcKCguKj8pXFwpL2cpKSxlPW59fSksdGhpcy5nZXRPcHRpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHRoaXMuc2V0T3B0aW9ucz1mdW5jdGlvbih0KXtlPXQsdGhpcy5zb3J0JiZlLnNvcnQoKX0sdGhpcy5hZGRPcHRpb249ZnVuY3Rpb24odCl7dD0odD10fHxcIlwiKS50b1N0cmluZygpLGUucHVzaCh0KSx0aGlzLnNvcnQmJmUuc29ydCgpfSx0aGlzLnJlbW92ZU9wdGlvbj1mdW5jdGlvbih0LHIpe2ZvcihyPXJ8fCExLHQ9KHQ9dHx8XCJcIikudG9TdHJpbmcoKTstMSE9PWUuaW5kZXhPZih0KSYmKGUuc3BsaWNlKGUuaW5kZXhPZih0KSwxKSwhMSE9PXIpOyk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImNvbWJvXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKFgodGhpcy5GZiwxOCkpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9Syh0aGlzLkZmLDE4KTp0aGlzLkZmPVoodGhpcy5GZiwxOCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJlZGl0XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKFgodGhpcy5GZiwxOSkpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT10aGlzLmNvbWJvJiYoITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9Syh0aGlzLkZmLDE5KTp0aGlzLkZmPVoodGhpcy5GZiwxOSkpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwic29ydFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihYKHRoaXMuRmYsMjApKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT8odGhpcy5GZj1LKHRoaXMuRmYsMjApLGUuc29ydCgpKTp0aGlzLkZmPVoodGhpcy5GZiwyMCl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJtdWx0aVNlbGVjdFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihYKHRoaXMuRmYsMjIpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPUsodGhpcy5GZiwyMik6dGhpcy5GZj1aKHRoaXMuRmYsMjIpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZG9Ob3RTcGVsbENoZWNrXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKFgodGhpcy5GZiwyMykpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9Syh0aGlzLkZmLDIzKTp0aGlzLkZmPVoodGhpcy5GZiwyMyl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjb21taXRPblNlbENoYW5nZVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihYKHRoaXMuRmYsMjcpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPUsodGhpcy5GZiwyNyk6dGhpcy5GZj1aKHRoaXMuRmYsMjcpfX0pLHRoaXMuaGFzQXBwZWFyYW5jZVN0cmVhbT0hMX07SChmdCxsdCk7dmFyIGR0PWZ1bmN0aW9uKCl7ZnQuY2FsbCh0aGlzKSx0aGlzLmZvbnROYW1lPVwiaGVsdmV0aWNhXCIsdGhpcy5jb21ibz0hMX07SChkdCxmdCk7dmFyIHB0PWZ1bmN0aW9uKCl7ZHQuY2FsbCh0aGlzKSx0aGlzLmNvbWJvPSEwfTtIKHB0LGR0KTt2YXIgZ3Q9ZnVuY3Rpb24oKXtwdC5jYWxsKHRoaXMpLHRoaXMuZWRpdD0hMH07SChndCxwdCk7dmFyIG10PWZ1bmN0aW9uKCl7bHQuY2FsbCh0aGlzKSx0aGlzLkZUPVwiL0J0blwiLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibm9Ub2dnbGVUb09mZlwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihYKHRoaXMuRmYsMTUpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPUsodGhpcy5GZiwxNSk6dGhpcy5GZj1aKHRoaXMuRmYsMTUpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicmFkaW9cIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDE2KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMTYpOnRoaXMuRmY9Wih0aGlzLkZmLDE2KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInB1c2hCdXR0b25cIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDE3KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMTcpOnRoaXMuRmY9Wih0aGlzLkZmLDE3KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJhZGlvSXNVbmlzb25cIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDI2KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMjYpOnRoaXMuRmY9Wih0aGlzLkZmLDI2KX19KTt2YXIgZSxyPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiTUtcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24odCl7cmV0dXJuIHR9O2lmKHRoaXMuc2NvcGUmJih0PXRoaXMuc2NvcGUuaW50ZXJuYWwuZ2V0RW5jcnlwdG9yKHRoaXMub2JqSWQpKSwwIT09T2JqZWN0LmtleXMocikubGVuZ3RoKXt2YXIgZSxuPVtdO2ZvcihlIGluIG4ucHVzaChcIjw8XCIpLHIpbi5wdXNoKFwiL1wiK2UrXCIgKFwiK1IodChyW2VdKSkrXCIpXCIpO3JldHVybiBuLnB1c2goXCI+PlwiKSxuLmpvaW4oXCJcXG5cIil9fSxzZXQ6ZnVuY3Rpb24oZSl7XCJvYmplY3RcIj09PXQoZSkmJihyPWUpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY2FwdGlvblwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gci5DQXx8XCJcIn0sc2V0OmZ1bmN0aW9uKHQpe1wic3RyaW5nXCI9PXR5cGVvZiB0JiYoci5DQT10KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIkFTXCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24odCl7ZT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiYXBwZWFyYW5jZVN0YXRlXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLnN1YnN0cigxLGUubGVuZ3RoLTEpfSxzZXQ6ZnVuY3Rpb24odCl7ZT1cIi9cIit0fX0pfTtIKG10LGx0KTt2YXIgdnQ9ZnVuY3Rpb24oKXttdC5jYWxsKHRoaXMpLHRoaXMucHVzaEJ1dHRvbj0hMH07SCh2dCxtdCk7dmFyIGJ0PWZ1bmN0aW9uKCl7bXQuY2FsbCh0aGlzKSx0aGlzLnJhZGlvPSEwLHRoaXMucHVzaEJ1dHRvbj0hMTt2YXIgdD1bXTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIktpZHNcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihlKXt0PXZvaWQgMCE9PWU/ZTpbXX19KX07SChidCxtdCk7dmFyIHl0PWZ1bmN0aW9uKCl7dmFyIGUscjtsdC5jYWxsKHRoaXMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiUGFyZW50XCIse2VudW1lcmFibGU6ITEsY29uZmlndXJhYmxlOiExLGdldDpmdW5jdGlvbigpe3JldHVybiBlfSxzZXQ6ZnVuY3Rpb24odCl7ZT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwib3B0aW9uTmFtZVwiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKHQpe3I9dH19KTt2YXIgbixpPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiTUtcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7dmFyIHQ9ZnVuY3Rpb24odCl7cmV0dXJuIHR9O3RoaXMuc2NvcGUmJih0PXRoaXMuc2NvcGUuaW50ZXJuYWwuZ2V0RW5jcnlwdG9yKHRoaXMub2JqSWQpKTt2YXIgZSxyPVtdO2ZvcihlIGluIHIucHVzaChcIjw8XCIpLGkpci5wdXNoKFwiL1wiK2UrXCIgKFwiK1IodChpW2VdKSkrXCIpXCIpO3JldHVybiByLnB1c2goXCI+PlwiKSxyLmpvaW4oXCJcXG5cIil9LHNldDpmdW5jdGlvbihlKXtcIm9iamVjdFwiPT09dChlKSYmKGk9ZSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjYXB0aW9uXCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBpLkNBfHxcIlwifSxzZXQ6ZnVuY3Rpb24odCl7XCJzdHJpbmdcIj09dHlwZW9mIHQmJihpLkNBPXQpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiQVNcIix7ZW51bWVyYWJsZTohMSxjb25maWd1cmFibGU6ITEsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG59LHNldDpmdW5jdGlvbih0KXtuPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJhcHBlYXJhbmNlU3RhdGVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG4uc3Vic3RyKDEsbi5sZW5ndGgtMSl9LHNldDpmdW5jdGlvbih0KXtuPVwiL1wiK3R9fSksdGhpcy5jYXB0aW9uPVwibFwiLHRoaXMuYXBwZWFyYW5jZVN0YXRlPVwiT2ZmXCIsdGhpcy5fQXBwZWFyYW5jZVR5cGU9QXQuUmFkaW9CdXR0b24uQ2lyY2xlLHRoaXMuYXBwZWFyYW5jZVN0cmVhbUNvbnRlbnQ9dGhpcy5fQXBwZWFyYW5jZVR5cGUuY3JlYXRlQXBwZWFyYW5jZVN0cmVhbSh0aGlzLm9wdGlvbk5hbWUpfTtIKHl0LGx0KSxidC5wcm90b3R5cGUuc2V0QXBwZWFyYW5jZT1mdW5jdGlvbih0KXtpZighKFwiY3JlYXRlQXBwZWFyYW5jZVN0cmVhbVwiaW4gdCl8fCEoXCJnZXRDQVwiaW4gdCkpdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgYXNzaWduIEFwcGVhcmFuY2UgdG8gUmFkaW9CdXR0b24uIEFwcGVhcmFuY2Ugd2FzIEludmFsaWQhXCIpO2Zvcih2YXIgZSBpbiB0aGlzLktpZHMpaWYodGhpcy5LaWRzLmhhc093blByb3BlcnR5KGUpKXt2YXIgcj10aGlzLktpZHNbZV07ci5hcHBlYXJhbmNlU3RyZWFtQ29udGVudD10LmNyZWF0ZUFwcGVhcmFuY2VTdHJlYW0oci5vcHRpb25OYW1lKSxyLmNhcHRpb249dC5nZXRDQSgpfX0sYnQucHJvdG90eXBlLmNyZWF0ZU9wdGlvbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgeXQ7cmV0dXJuIGUuUGFyZW50PXRoaXMsZS5vcHRpb25OYW1lPXQsdGhpcy5LaWRzLnB1c2goZSkseHQuY2FsbCh0aGlzLnNjb3BlLGUpLGV9O3ZhciB3dD1mdW5jdGlvbigpe210LmNhbGwodGhpcyksdGhpcy5mb250TmFtZT1cInphcGZkaW5nYmF0c1wiLHRoaXMuY2FwdGlvbj1cIjNcIix0aGlzLmFwcGVhcmFuY2VTdGF0ZT1cIk9uXCIsdGhpcy52YWx1ZT1cIk9uXCIsdGhpcy50ZXh0QWxpZ249XCJjZW50ZXJcIix0aGlzLmFwcGVhcmFuY2VTdHJlYW1Db250ZW50PUF0LkNoZWNrQm94LmNyZWF0ZUFwcGVhcmFuY2VTdHJlYW0oKX07SCh3dCxtdCk7dmFyIE50PWZ1bmN0aW9uKCl7bHQuY2FsbCh0aGlzKSx0aGlzLkZUPVwiL1R4XCIsT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJtdWx0aWxpbmVcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDEzKSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMTMpOnRoaXMuRmY9Wih0aGlzLkZmLDEzKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImZpbGVTZWxlY3RcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDIxKSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMjEpOnRoaXMuRmY9Wih0aGlzLkZmLDIxKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImRvTm90U3BlbGxDaGVja1wiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihYKHRoaXMuRmYsMjMpKX0sc2V0OmZ1bmN0aW9uKHQpeyEwPT09Qm9vbGVhbih0KT90aGlzLkZmPUsodGhpcy5GZiwyMyk6dGhpcy5GZj1aKHRoaXMuRmYsMjMpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZG9Ob3RTY3JvbGxcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDI0KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMjQpOnRoaXMuRmY9Wih0aGlzLkZmLDI0KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImNvbWJcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDI1KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMjUpOnRoaXMuRmY9Wih0aGlzLkZmLDI1KX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInJpY2hUZXh0XCIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKFgodGhpcy5GZiwyNikpfSxzZXQ6ZnVuY3Rpb24odCl7ITA9PT1Cb29sZWFuKHQpP3RoaXMuRmY9Syh0aGlzLkZmLDI2KTp0aGlzLkZmPVoodGhpcy5GZiwyNil9fSk7dmFyIHQ9bnVsbDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIk1heExlblwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdH0sc2V0OmZ1bmN0aW9uKGUpe3Q9ZX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcIm1heExlbmd0aFwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdH0sc2V0OmZ1bmN0aW9uKGUpe051bWJlci5pc0ludGVnZXIoZSkmJih0PWUpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFzQXBwZWFyYW5jZVN0cmVhbVwiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5WfHx0aGlzLkRWfX0pfTtIKE50LGx0KTt2YXIgTHQ9ZnVuY3Rpb24oKXtOdC5jYWxsKHRoaXMpLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGFzc3dvcmRcIix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4oWCh0aGlzLkZmLDE0KSl9LHNldDpmdW5jdGlvbih0KXshMD09PUJvb2xlYW4odCk/dGhpcy5GZj1LKHRoaXMuRmYsMTQpOnRoaXMuRmY9Wih0aGlzLkZmLDE0KX19KSx0aGlzLnBhc3N3b3JkPSEwfTtIKEx0LE50KTt2YXIgQXQ9e0NoZWNrQm94OntjcmVhdGVBcHBlYXJhbmNlU3RyZWFtOmZ1bmN0aW9uKCl7cmV0dXJue046e09uOkF0LkNoZWNrQm94Llllc05vcm1hbH0sRDp7T246QXQuQ2hlY2tCb3guWWVzUHVzaERvd24sT2ZmOkF0LkNoZWNrQm94Lk9mZlB1c2hEb3dufX19LFllc1B1c2hEb3duOmZ1bmN0aW9uKHQpe3ZhciBlPVYodCk7ZS5zY29wZT10LnNjb3BlO3ZhciByPVtdLG49dC5zY29wZS5pbnRlcm5hbC5nZXRGb250KHQuZm9udE5hbWUsdC5mb250U3R5bGUpLmlkLGk9dC5zY29wZS5fX3ByaXZhdGVfXy5lbmNvZGVDb2xvclN0cmluZyh0LmNvbG9yKSxhPXR0KHQsdC5jYXB0aW9uKTtyZXR1cm4gci5wdXNoKFwiMC43NDkwMjMgZ1wiKSxyLnB1c2goXCIwIDAgXCIrVShBdC5pbnRlcm5hbC5nZXRXaWR0aCh0KSkrXCIgXCIrVShBdC5pbnRlcm5hbC5nZXRIZWlnaHQodCkpK1wiIHJlXCIpLHIucHVzaChcImZcIiksci5wdXNoKFwiQk1DXCIpLHIucHVzaChcInFcIiksci5wdXNoKFwiMCAwIDEgcmdcIiksci5wdXNoKFwiL1wiK24rXCIgXCIrVShhLmZvbnRTaXplKStcIiBUZiBcIitpKSxyLnB1c2goXCJCVFwiKSxyLnB1c2goYS50ZXh0KSxyLnB1c2goXCJFVFwiKSxyLnB1c2goXCJRXCIpLHIucHVzaChcIkVNQ1wiKSxlLnN0cmVhbT1yLmpvaW4oXCJcXG5cIiksZX0sWWVzTm9ybWFsOmZ1bmN0aW9uKHQpe3ZhciBlPVYodCk7ZS5zY29wZT10LnNjb3BlO3ZhciByPXQuc2NvcGUuaW50ZXJuYWwuZ2V0Rm9udCh0LmZvbnROYW1lLHQuZm9udFN0eWxlKS5pZCxuPXQuc2NvcGUuX19wcml2YXRlX18uZW5jb2RlQ29sb3JTdHJpbmcodC5jb2xvciksaT1bXSxhPUF0LmludGVybmFsLmdldEhlaWdodCh0KSxvPUF0LmludGVybmFsLmdldFdpZHRoKHQpLHM9dHQodCx0LmNhcHRpb24pO3JldHVybiBpLnB1c2goXCIxIGdcIiksaS5wdXNoKFwiMCAwIFwiK1UobykrXCIgXCIrVShhKStcIiByZVwiKSxpLnB1c2goXCJmXCIpLGkucHVzaChcInFcIiksaS5wdXNoKFwiMCAwIDEgcmdcIiksaS5wdXNoKFwiMCAwIFwiK1Uoby0xKStcIiBcIitVKGEtMSkrXCIgcmVcIiksaS5wdXNoKFwiV1wiKSxpLnB1c2goXCJuXCIpLGkucHVzaChcIjAgZ1wiKSxpLnB1c2goXCJCVFwiKSxpLnB1c2goXCIvXCIrcitcIiBcIitVKHMuZm9udFNpemUpK1wiIFRmIFwiK24pLGkucHVzaChzLnRleHQpLGkucHVzaChcIkVUXCIpLGkucHVzaChcIlFcIiksZS5zdHJlYW09aS5qb2luKFwiXFxuXCIpLGV9LE9mZlB1c2hEb3duOmZ1bmN0aW9uKHQpe3ZhciBlPVYodCk7ZS5zY29wZT10LnNjb3BlO3ZhciByPVtdO3JldHVybiByLnB1c2goXCIwLjc0OTAyMyBnXCIpLHIucHVzaChcIjAgMCBcIitVKEF0LmludGVybmFsLmdldFdpZHRoKHQpKStcIiBcIitVKEF0LmludGVybmFsLmdldEhlaWdodCh0KSkrXCIgcmVcIiksci5wdXNoKFwiZlwiKSxlLnN0cmVhbT1yLmpvaW4oXCJcXG5cIiksZX19LFJhZGlvQnV0dG9uOntDaXJjbGU6e2NyZWF0ZUFwcGVhcmFuY2VTdHJlYW06ZnVuY3Rpb24odCl7dmFyIGU9e0Q6e09mZjpBdC5SYWRpb0J1dHRvbi5DaXJjbGUuT2ZmUHVzaERvd259LE46e319O3JldHVybiBlLk5bdF09QXQuUmFkaW9CdXR0b24uQ2lyY2xlLlllc05vcm1hbCxlLkRbdF09QXQuUmFkaW9CdXR0b24uQ2lyY2xlLlllc1B1c2hEb3duLGV9LGdldENBOmZ1bmN0aW9uKCl7cmV0dXJuXCJsXCJ9LFllc05vcm1hbDpmdW5jdGlvbih0KXt2YXIgZT1WKHQpO2Uuc2NvcGU9dC5zY29wZTt2YXIgcj1bXSxuPUF0LmludGVybmFsLmdldFdpZHRoKHQpPD1BdC5pbnRlcm5hbC5nZXRIZWlnaHQodCk/QXQuaW50ZXJuYWwuZ2V0V2lkdGgodCkvNDpBdC5pbnRlcm5hbC5nZXRIZWlnaHQodCkvNDtuPU51bWJlcigoLjkqbikudG9GaXhlZCg1KSk7dmFyIGk9QXQuaW50ZXJuYWwuQmV6aWVyX0MsYT1OdW1iZXIoKG4qaSkudG9GaXhlZCg1KSk7cmV0dXJuIHIucHVzaChcInFcIiksci5wdXNoKFwiMSAwIDAgMSBcIit6KEF0LmludGVybmFsLmdldFdpZHRoKHQpLzIpK1wiIFwiK3ooQXQuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzIpK1wiIGNtXCIpLHIucHVzaChuK1wiIDAgbVwiKSxyLnB1c2gobitcIiBcIithK1wiIFwiK2ErXCIgXCIrbitcIiAwIFwiK24rXCIgY1wiKSxyLnB1c2goXCItXCIrYStcIiBcIituK1wiIC1cIituK1wiIFwiK2ErXCIgLVwiK24rXCIgMCBjXCIpLHIucHVzaChcIi1cIituK1wiIC1cIithK1wiIC1cIithK1wiIC1cIituK1wiIDAgLVwiK24rXCIgY1wiKSxyLnB1c2goYStcIiAtXCIrbitcIiBcIituK1wiIC1cIithK1wiIFwiK24rXCIgMCBjXCIpLHIucHVzaChcImZcIiksci5wdXNoKFwiUVwiKSxlLnN0cmVhbT1yLmpvaW4oXCJcXG5cIiksZX0sWWVzUHVzaERvd246ZnVuY3Rpb24odCl7dmFyIGU9Vih0KTtlLnNjb3BlPXQuc2NvcGU7dmFyIHI9W10sbj1BdC5pbnRlcm5hbC5nZXRXaWR0aCh0KTw9QXQuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpP0F0LmludGVybmFsLmdldFdpZHRoKHQpLzQ6QXQuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzQ7bj1OdW1iZXIoKC45Km4pLnRvRml4ZWQoNSkpO3ZhciBpPU51bWJlcigoMipuKS50b0ZpeGVkKDUpKSxhPU51bWJlcigoaSpBdC5pbnRlcm5hbC5CZXppZXJfQykudG9GaXhlZCg1KSksbz1OdW1iZXIoKG4qQXQuaW50ZXJuYWwuQmV6aWVyX0MpLnRvRml4ZWQoNSkpO3JldHVybiByLnB1c2goXCIwLjc0OTAyMyBnXCIpLHIucHVzaChcInFcIiksci5wdXNoKFwiMSAwIDAgMSBcIit6KEF0LmludGVybmFsLmdldFdpZHRoKHQpLzIpK1wiIFwiK3ooQXQuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLzIpK1wiIGNtXCIpLHIucHVzaChpK1wiIDAgbVwiKSxyLnB1c2goaStcIiBcIithK1wiIFwiK2ErXCIgXCIraStcIiAwIFwiK2krXCIgY1wiKSxyLnB1c2goXCItXCIrYStcIiBcIitpK1wiIC1cIitpK1wiIFwiK2ErXCIgLVwiK2krXCIgMCBjXCIpLHIucHVzaChcIi1cIitpK1wiIC1cIithK1wiIC1cIithK1wiIC1cIitpK1wiIDAgLVwiK2krXCIgY1wiKSxyLnB1c2goYStcIiAtXCIraStcIiBcIitpK1wiIC1cIithK1wiIFwiK2krXCIgMCBjXCIpLHIucHVzaChcImZcIiksci5wdXNoKFwiUVwiKSxyLnB1c2goXCIwIGdcIiksci5wdXNoKFwicVwiKSxyLnB1c2goXCIxIDAgMCAxIFwiK3ooQXQuaW50ZXJuYWwuZ2V0V2lkdGgodCkvMikrXCIgXCIreihBdC5pbnRlcm5hbC5nZXRIZWlnaHQodCkvMikrXCIgY21cIiksci5wdXNoKG4rXCIgMCBtXCIpLHIucHVzaChuK1wiIFwiK28rXCIgXCIrbytcIiBcIituK1wiIDAgXCIrbitcIiBjXCIpLHIucHVzaChcIi1cIitvK1wiIFwiK24rXCIgLVwiK24rXCIgXCIrbytcIiAtXCIrbitcIiAwIGNcIiksci5wdXNoKFwiLVwiK24rXCIgLVwiK28rXCIgLVwiK28rXCIgLVwiK24rXCIgMCAtXCIrbitcIiBjXCIpLHIucHVzaChvK1wiIC1cIituK1wiIFwiK24rXCIgLVwiK28rXCIgXCIrbitcIiAwIGNcIiksci5wdXNoKFwiZlwiKSxyLnB1c2goXCJRXCIpLGUuc3RyZWFtPXIuam9pbihcIlxcblwiKSxlfSxPZmZQdXNoRG93bjpmdW5jdGlvbih0KXt2YXIgZT1WKHQpO2Uuc2NvcGU9dC5zY29wZTt2YXIgcj1bXSxuPUF0LmludGVybmFsLmdldFdpZHRoKHQpPD1BdC5pbnRlcm5hbC5nZXRIZWlnaHQodCk/QXQuaW50ZXJuYWwuZ2V0V2lkdGgodCkvNDpBdC5pbnRlcm5hbC5nZXRIZWlnaHQodCkvNDtuPU51bWJlcigoLjkqbikudG9GaXhlZCg1KSk7dmFyIGk9TnVtYmVyKCgyKm4pLnRvRml4ZWQoNSkpLGE9TnVtYmVyKChpKkF0LmludGVybmFsLkJlemllcl9DKS50b0ZpeGVkKDUpKTtyZXR1cm4gci5wdXNoKFwiMC43NDkwMjMgZ1wiKSxyLnB1c2goXCJxXCIpLHIucHVzaChcIjEgMCAwIDEgXCIreihBdC5pbnRlcm5hbC5nZXRXaWR0aCh0KS8yKStcIiBcIit6KEF0LmludGVybmFsLmdldEhlaWdodCh0KS8yKStcIiBjbVwiKSxyLnB1c2goaStcIiAwIG1cIiksci5wdXNoKGkrXCIgXCIrYStcIiBcIithK1wiIFwiK2krXCIgMCBcIitpK1wiIGNcIiksci5wdXNoKFwiLVwiK2ErXCIgXCIraStcIiAtXCIraStcIiBcIithK1wiIC1cIitpK1wiIDAgY1wiKSxyLnB1c2goXCItXCIraStcIiAtXCIrYStcIiAtXCIrYStcIiAtXCIraStcIiAwIC1cIitpK1wiIGNcIiksci5wdXNoKGErXCIgLVwiK2krXCIgXCIraStcIiAtXCIrYStcIiBcIitpK1wiIDAgY1wiKSxyLnB1c2goXCJmXCIpLHIucHVzaChcIlFcIiksZS5zdHJlYW09ci5qb2luKFwiXFxuXCIpLGV9fSxDcm9zczp7Y3JlYXRlQXBwZWFyYW5jZVN0cmVhbTpmdW5jdGlvbih0KXt2YXIgZT17RDp7T2ZmOkF0LlJhZGlvQnV0dG9uLkNyb3NzLk9mZlB1c2hEb3dufSxOOnt9fTtyZXR1cm4gZS5OW3RdPUF0LlJhZGlvQnV0dG9uLkNyb3NzLlllc05vcm1hbCxlLkRbdF09QXQuUmFkaW9CdXR0b24uQ3Jvc3MuWWVzUHVzaERvd24sZX0sZ2V0Q0E6ZnVuY3Rpb24oKXtyZXR1cm5cIjhcIn0sWWVzTm9ybWFsOmZ1bmN0aW9uKHQpe3ZhciBlPVYodCk7ZS5zY29wZT10LnNjb3BlO3ZhciByPVtdLG49QXQuaW50ZXJuYWwuY2FsY3VsYXRlQ3Jvc3ModCk7cmV0dXJuIHIucHVzaChcInFcIiksci5wdXNoKFwiMSAxIFwiK1UoQXQuaW50ZXJuYWwuZ2V0V2lkdGgodCktMikrXCIgXCIrVShBdC5pbnRlcm5hbC5nZXRIZWlnaHQodCktMikrXCIgcmVcIiksci5wdXNoKFwiV1wiKSxyLnB1c2goXCJuXCIpLHIucHVzaChVKG4ueDEueCkrXCIgXCIrVShuLngxLnkpK1wiIG1cIiksci5wdXNoKFUobi54Mi54KStcIiBcIitVKG4ueDIueSkrXCIgbFwiKSxyLnB1c2goVShuLng0LngpK1wiIFwiK1Uobi54NC55KStcIiBtXCIpLHIucHVzaChVKG4ueDMueCkrXCIgXCIrVShuLngzLnkpK1wiIGxcIiksci5wdXNoKFwic1wiKSxyLnB1c2goXCJRXCIpLGUuc3RyZWFtPXIuam9pbihcIlxcblwiKSxlfSxZZXNQdXNoRG93bjpmdW5jdGlvbih0KXt2YXIgZT1WKHQpO2Uuc2NvcGU9dC5zY29wZTt2YXIgcj1BdC5pbnRlcm5hbC5jYWxjdWxhdGVDcm9zcyh0KSxuPVtdO3JldHVybiBuLnB1c2goXCIwLjc0OTAyMyBnXCIpLG4ucHVzaChcIjAgMCBcIitVKEF0LmludGVybmFsLmdldFdpZHRoKHQpKStcIiBcIitVKEF0LmludGVybmFsLmdldEhlaWdodCh0KSkrXCIgcmVcIiksbi5wdXNoKFwiZlwiKSxuLnB1c2goXCJxXCIpLG4ucHVzaChcIjEgMSBcIitVKEF0LmludGVybmFsLmdldFdpZHRoKHQpLTIpK1wiIFwiK1UoQXQuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpLTIpK1wiIHJlXCIpLG4ucHVzaChcIldcIiksbi5wdXNoKFwiblwiKSxuLnB1c2goVShyLngxLngpK1wiIFwiK1Uoci54MS55KStcIiBtXCIpLG4ucHVzaChVKHIueDIueCkrXCIgXCIrVShyLngyLnkpK1wiIGxcIiksbi5wdXNoKFUoci54NC54KStcIiBcIitVKHIueDQueSkrXCIgbVwiKSxuLnB1c2goVShyLngzLngpK1wiIFwiK1Uoci54My55KStcIiBsXCIpLG4ucHVzaChcInNcIiksbi5wdXNoKFwiUVwiKSxlLnN0cmVhbT1uLmpvaW4oXCJcXG5cIiksZX0sT2ZmUHVzaERvd246ZnVuY3Rpb24odCl7dmFyIGU9Vih0KTtlLnNjb3BlPXQuc2NvcGU7dmFyIHI9W107cmV0dXJuIHIucHVzaChcIjAuNzQ5MDIzIGdcIiksci5wdXNoKFwiMCAwIFwiK1UoQXQuaW50ZXJuYWwuZ2V0V2lkdGgodCkpK1wiIFwiK1UoQXQuaW50ZXJuYWwuZ2V0SGVpZ2h0KHQpKStcIiByZVwiKSxyLnB1c2goXCJmXCIpLGUuc3RyZWFtPXIuam9pbihcIlxcblwiKSxlfX19LGNyZWF0ZURlZmF1bHRBcHBlYXJhbmNlU3RyZWFtOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc2NvcGUuaW50ZXJuYWwuZ2V0Rm9udCh0LmZvbnROYW1lLHQuZm9udFN0eWxlKS5pZCxyPXQuc2NvcGUuX19wcml2YXRlX18uZW5jb2RlQ29sb3JTdHJpbmcodC5jb2xvcik7cmV0dXJuXCIvXCIrZStcIiBcIit0LmZvbnRTaXplK1wiIFRmIFwiK3J9fTtBdC5pbnRlcm5hbD17QmV6aWVyX0M6LjU1MTkxNTAyNDQ5NCxjYWxjdWxhdGVDcm9zczpmdW5jdGlvbih0KXt2YXIgZT1BdC5pbnRlcm5hbC5nZXRXaWR0aCh0KSxyPUF0LmludGVybmFsLmdldEhlaWdodCh0KSxuPU1hdGgubWluKGUscik7cmV0dXJue3gxOnt4OihlLW4pLzIseTooci1uKS8yK259LHgyOnt4OihlLW4pLzIrbix5OihyLW4pLzJ9LHgzOnt4OihlLW4pLzIseTooci1uKS8yfSx4NDp7eDooZS1uKS8yK24seTooci1uKS8yK259fX19LEF0LmludGVybmFsLmdldFdpZHRoPWZ1bmN0aW9uKGUpe3ZhciByPTA7cmV0dXJuXCJvYmplY3RcIj09PXQoZSkmJihyPVcoZS5SZWN0WzJdKSkscn0sQXQuaW50ZXJuYWwuZ2V0SGVpZ2h0PWZ1bmN0aW9uKGUpe3ZhciByPTA7cmV0dXJuXCJvYmplY3RcIj09PXQoZSkmJihyPVcoZS5SZWN0WzNdKSkscn07dmFyIHh0PXEuYWRkRmllbGQ9ZnVuY3Rpb24odCl7aWYoYXQodGhpcyx0KSwhKHQgaW5zdGFuY2VvZiBsdCkpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudCBwYXNzZWQgdG8ganNQREYuYWRkRmllbGQuXCIpO3ZhciBlO3JldHVybihlPXQpLnNjb3BlLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLnByaW50ZWRPdXQmJihlLnNjb3BlLmludGVybmFsLmFjcm9mb3JtUGx1Z2luLnByaW50ZWRPdXQ9ITEsZS5zY29wZS5pbnRlcm5hbC5hY3JvZm9ybVBsdWdpbi5hY3JvRm9ybURpY3Rpb25hcnlSb290PW51bGwpLGUuc2NvcGUuaW50ZXJuYWwuYWNyb2Zvcm1QbHVnaW4uYWNyb0Zvcm1EaWN0aW9uYXJ5Um9vdC5GaWVsZHMucHVzaChlKSx0LnBhZ2U9dC5zY29wZS5pbnRlcm5hbC5nZXRDdXJyZW50UGFnZUluZm8oKS5wYWdlTnVtYmVyLHRoaXN9O3EuQWNyb0Zvcm1DaG9pY2VGaWVsZD1mdCxxLkFjcm9Gb3JtTGlzdEJveD1kdCxxLkFjcm9Gb3JtQ29tYm9Cb3g9cHQscS5BY3JvRm9ybUVkaXRCb3g9Z3QscS5BY3JvRm9ybUJ1dHRvbj1tdCxxLkFjcm9Gb3JtUHVzaEJ1dHRvbj12dCxxLkFjcm9Gb3JtUmFkaW9CdXR0b249YnQscS5BY3JvRm9ybUNoZWNrQm94PXd0LHEuQWNyb0Zvcm1UZXh0RmllbGQ9TnQscS5BY3JvRm9ybVBhc3N3b3JkRmllbGQ9THQscS5BY3JvRm9ybUFwcGVhcmFuY2U9QXQscS5BY3JvRm9ybT17Q2hvaWNlRmllbGQ6ZnQsTGlzdEJveDpkdCxDb21ib0JveDpwdCxFZGl0Qm94Omd0LEJ1dHRvbjptdCxQdXNoQnV0dG9uOnZ0LFJhZGlvQnV0dG9uOmJ0LENoZWNrQm94Ond0LFRleHRGaWVsZDpOdCxQYXNzd29yZEZpZWxkOkx0LEFwcGVhcmFuY2U6QXR9LEUuQWNyb0Zvcm09e0Nob2ljZUZpZWxkOmZ0LExpc3RCb3g6ZHQsQ29tYm9Cb3g6cHQsRWRpdEJveDpndCxCdXR0b246bXQsUHVzaEJ1dHRvbjp2dCxSYWRpb0J1dHRvbjpidCxDaGVja0JveDp3dCxUZXh0RmllbGQ6TnQsUGFzc3dvcmRGaWVsZDpMdCxBcHBlYXJhbmNlOkF0fTt2YXIgU3Q9RS5BY3JvRm9ybTtmdW5jdGlvbiBfdCh0KXtyZXR1cm4gdC5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdFtlXT1yLHR9KSx7fSl9IWZ1bmN0aW9uKGUpe2UuX19hZGRpbWFnZV9fPXt9O3ZhciByPVwiVU5LTk9XTlwiLG49e1BORzpbWzEzNyw4MCw3OCw3MV1dLFRJRkY6W1s3Nyw3NywwLDQyXSxbNzMsNzMsNDIsMF1dLEpQRUc6W1syNTUsMjE2LDI1NSwyMjQsdm9pZCAwLHZvaWQgMCw3NCw3MCw3Myw3MCwwXSxbMjU1LDIxNiwyNTUsMjI1LHZvaWQgMCx2b2lkIDAsNjksMTIwLDEwNSwxMDIsMCwwXSxbMjU1LDIxNiwyNTUsMjE5XSxbMjU1LDIxNiwyNTUsMjM4XV0sSlBFRzIwMDA6W1swLDAsMCwxMiwxMDYsODAsMzIsMzJdXSxHSUY4N2E6W1s3MSw3Myw3MCw1Niw1NSw5N11dLEdJRjg5YTpbWzcxLDczLDcwLDU2LDU3LDk3XV0sV0VCUDpbWzgyLDczLDcwLDcwLHZvaWQgMCx2b2lkIDAsdm9pZCAwLHZvaWQgMCw4Nyw2OSw2Niw4MF1dLEJNUDpbWzY2LDc3XSxbNjYsNjVdLFs2Nyw3M10sWzY3LDgwXSxbNzMsNjddLFs4MCw4NF1dfSxpPWUuX19hZGRpbWFnZV9fLmdldEltYWdlRmlsZVR5cGVCeUltYWdlRGF0YT1mdW5jdGlvbih0LGUpe3ZhciBpLGEsbyxzLGMsdT1yO2lmKFwiUkdCQVwiPT09KGU9ZXx8cil8fHZvaWQgMCE9PXQuZGF0YSYmdC5kYXRhIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkmJlwiaGVpZ2h0XCJpbiB0JiZcIndpZHRoXCJpbiB0KXJldHVyblwiUkdCQVwiO2lmKHgodCkpZm9yKGMgaW4gbilmb3Iobz1uW2NdLGk9MDtpPG8ubGVuZ3RoO2krPTEpe2ZvcihzPSEwLGE9MDthPG9baV0ubGVuZ3RoO2ErPTEpaWYodm9pZCAwIT09b1tpXVthXSYmb1tpXVthXSE9PXRbYV0pe3M9ITE7YnJlYWt9aWYoITA9PT1zKXt1PWM7YnJlYWt9fWVsc2UgZm9yKGMgaW4gbilmb3Iobz1uW2NdLGk9MDtpPG8ubGVuZ3RoO2krPTEpe2ZvcihzPSEwLGE9MDthPG9baV0ubGVuZ3RoO2ErPTEpaWYodm9pZCAwIT09b1tpXVthXSYmb1tpXVthXSE9PXQuY2hhckNvZGVBdChhKSl7cz0hMTticmVha31pZighMD09PXMpe3U9YzticmVha319cmV0dXJuIHU9PT1yJiZlIT09ciYmKHU9ZSksdX0sYT1mdW5jdGlvbiB0KGUpe2Zvcih2YXIgcj10aGlzLmludGVybmFsLndyaXRlLG49dGhpcy5pbnRlcm5hbC5wdXRTdHJlYW0saT0oMCx0aGlzLmludGVybmFsLmdldEZpbHRlcnMpKCk7LTEhPT1pLmluZGV4T2YoXCJGbGF0ZUVuY29kZVwiKTspaS5zcGxpY2UoaS5pbmRleE9mKFwiRmxhdGVFbmNvZGVcIiksMSk7ZS5vYmplY3RJZD10aGlzLmludGVybmFsLm5ld09iamVjdCgpO3ZhciBhPVtdO2lmKGEucHVzaCh7a2V5OlwiVHlwZVwiLHZhbHVlOlwiL1hPYmplY3RcIn0pLGEucHVzaCh7a2V5OlwiU3VidHlwZVwiLHZhbHVlOlwiL0ltYWdlXCJ9KSxhLnB1c2goe2tleTpcIldpZHRoXCIsdmFsdWU6ZS53aWR0aH0pLGEucHVzaCh7a2V5OlwiSGVpZ2h0XCIsdmFsdWU6ZS5oZWlnaHR9KSxlLmNvbG9yU3BhY2U9PT1iLklOREVYRUQ/YS5wdXNoKHtrZXk6XCJDb2xvclNwYWNlXCIsdmFsdWU6XCJbL0luZGV4ZWQgL0RldmljZVJHQiBcIisoZS5wYWxldHRlLmxlbmd0aC8zLTEpK1wiIFwiKyhcInNNYXNrXCJpbiBlJiZ2b2lkIDAhPT1lLnNNYXNrP2Uub2JqZWN0SWQrMjplLm9iamVjdElkKzEpK1wiIDAgUl1cIn0pOihhLnB1c2goe2tleTpcIkNvbG9yU3BhY2VcIix2YWx1ZTpcIi9cIitlLmNvbG9yU3BhY2V9KSxlLmNvbG9yU3BhY2U9PT1iLkRFVklDRV9DTVlLJiZhLnB1c2goe2tleTpcIkRlY29kZVwiLHZhbHVlOlwiWzEgMCAxIDAgMSAwIDEgMF1cIn0pKSxhLnB1c2goe2tleTpcIkJpdHNQZXJDb21wb25lbnRcIix2YWx1ZTplLmJpdHNQZXJDb21wb25lbnR9KSxcImRlY29kZVBhcmFtZXRlcnNcImluIGUmJnZvaWQgMCE9PWUuZGVjb2RlUGFyYW1ldGVycyYmYS5wdXNoKHtrZXk6XCJEZWNvZGVQYXJtc1wiLHZhbHVlOlwiPDxcIitlLmRlY29kZVBhcmFtZXRlcnMrXCI+PlwifSksXCJ0cmFuc3BhcmVuY3lcImluIGUmJkFycmF5LmlzQXJyYXkoZS50cmFuc3BhcmVuY3kpKXtmb3IodmFyIG89XCJcIixzPTAsYz1lLnRyYW5zcGFyZW5jeS5sZW5ndGg7czxjO3MrKylvKz1lLnRyYW5zcGFyZW5jeVtzXStcIiBcIitlLnRyYW5zcGFyZW5jeVtzXStcIiBcIjthLnB1c2goe2tleTpcIk1hc2tcIix2YWx1ZTpcIltcIitvK1wiXVwifSl9dm9pZCAwIT09ZS5zTWFzayYmYS5wdXNoKHtrZXk6XCJTTWFza1wiLHZhbHVlOmUub2JqZWN0SWQrMStcIiAwIFJcIn0pO3ZhciB1PXZvaWQgMCE9PWUuZmlsdGVyP1tcIi9cIitlLmZpbHRlcl06dm9pZCAwO2lmKG4oe2RhdGE6ZS5kYXRhLGFkZGl0aW9uYWxLZXlWYWx1ZXM6YSxhbHJlYWR5QXBwbGllZEZpbHRlcnM6dSxvYmplY3RJZDplLm9iamVjdElkfSkscihcImVuZG9ialwiKSxcInNNYXNrXCJpbiBlJiZ2b2lkIDAhPT1lLnNNYXNrKXt2YXIgaD1cIi9QcmVkaWN0b3IgXCIrZS5wcmVkaWN0b3IrXCIgL0NvbG9ycyAxIC9CaXRzUGVyQ29tcG9uZW50IFwiK2UuYml0c1BlckNvbXBvbmVudCtcIiAvQ29sdW1ucyBcIitlLndpZHRoLGw9e3dpZHRoOmUud2lkdGgsaGVpZ2h0OmUuaGVpZ2h0LGNvbG9yU3BhY2U6XCJEZXZpY2VHcmF5XCIsYml0c1BlckNvbXBvbmVudDplLmJpdHNQZXJDb21wb25lbnQsZGVjb2RlUGFyYW1ldGVyczpoLGRhdGE6ZS5zTWFza307XCJmaWx0ZXJcImluIGUmJihsLmZpbHRlcj1lLmZpbHRlciksdC5jYWxsKHRoaXMsbCl9aWYoZS5jb2xvclNwYWNlPT09Yi5JTkRFWEVEKXt2YXIgZj10aGlzLmludGVybmFsLm5ld09iamVjdCgpO24oe2RhdGE6XyhuZXcgVWludDhBcnJheShlLnBhbGV0dGUpKSxvYmplY3RJZDpmfSkscihcImVuZG9ialwiKX19LG89ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmludGVybmFsLmNvbGxlY3Rpb25zLmFkZEltYWdlX2ltYWdlcztmb3IodmFyIGUgaW4gdClhLmNhbGwodGhpcyx0W2VdKX0scz1mdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5pbnRlcm5hbC5jb2xsZWN0aW9ucy5hZGRJbWFnZV9pbWFnZXMscj10aGlzLmludGVybmFsLndyaXRlO2Zvcih2YXIgbiBpbiBlKXIoXCIvSVwiKyh0PWVbbl0pLmluZGV4LHQub2JqZWN0SWQsXCIwXCIsXCJSXCIpfSxjPWZ1bmN0aW9uKCl7dGhpcy5pbnRlcm5hbC5jb2xsZWN0aW9ucy5hZGRJbWFnZV9pbWFnZXN8fCh0aGlzLmludGVybmFsLmNvbGxlY3Rpb25zLmFkZEltYWdlX2ltYWdlcz17fSx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRSZXNvdXJjZXNcIixvKSx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRYb2JqZWN0RGljdFwiLHMpKX0saD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuaW50ZXJuYWwuY29sbGVjdGlvbnMuYWRkSW1hZ2VfaW1hZ2VzO3JldHVybiBjLmNhbGwodGhpcyksdH0sbD1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmludGVybmFsLmNvbGxlY3Rpb25zLmFkZEltYWdlX2ltYWdlcykubGVuZ3RofSxmPWZ1bmN0aW9uKHQpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGVbXCJwcm9jZXNzXCIrdC50b1VwcGVyQ2FzZSgpXX0sZD1mdW5jdGlvbihlKXtyZXR1cm5cIm9iamVjdFwiPT09dChlKSYmMT09PWUubm9kZVR5cGV9LHA9ZnVuY3Rpb24odCxyKXtpZihcIklNR1wiPT09dC5ub2RlTmFtZSYmdC5oYXNBdHRyaWJ1dGUoXCJzcmNcIikpe3ZhciBuPVwiXCIrdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7aWYoMD09PW4uaW5kZXhPZihcImRhdGE6aW1hZ2UvXCIpKXJldHVybiB1KHVuZXNjYXBlKG4pLnNwbGl0KFwiYmFzZTY0LFwiKS5wb3AoKSk7dmFyIGk9ZS5sb2FkRmlsZShuLCEwKTtpZih2b2lkIDAhPT1pKXJldHVybiBpfWlmKFwiQ0FOVkFTXCI9PT10Lm5vZGVOYW1lKXtpZigwPT09dC53aWR0aHx8MD09PXQuaGVpZ2h0KXRocm93IG5ldyBFcnJvcihcIkdpdmVuIGNhbnZhcyBtdXN0IGhhdmUgZGF0YS4gQ2FudmFzIHdpZHRoOiBcIit0LndpZHRoK1wiLCBoZWlnaHQ6IFwiK3QuaGVpZ2h0KTt2YXIgYTtzd2l0Y2gocil7Y2FzZVwiUE5HXCI6YT1cImltYWdlL3BuZ1wiO2JyZWFrO2Nhc2VcIldFQlBcIjphPVwiaW1hZ2Uvd2VicFwiO2JyZWFrO2Nhc2VcIkpQRUdcIjpjYXNlXCJKUEdcIjpkZWZhdWx0OmE9XCJpbWFnZS9qcGVnXCJ9cmV0dXJuIHUodC50b0RhdGFVUkwoYSwxKS5zcGxpdChcImJhc2U2NCxcIikucG9wKCkpfX0sZz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmludGVybmFsLmNvbGxlY3Rpb25zLmFkZEltYWdlX2ltYWdlcztpZihlKWZvcih2YXIgciBpbiBlKWlmKHQ9PT1lW3JdLmFsaWFzKXJldHVybiBlW3JdfSxtPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdHx8ZXx8KHQ9LTk2LGU9LTk2KSx0PDAmJih0PS0xKnIud2lkdGgqNzIvdC90aGlzLmludGVybmFsLnNjYWxlRmFjdG9yKSxlPDAmJihlPS0xKnIuaGVpZ2h0KjcyL2UvdGhpcy5pbnRlcm5hbC5zY2FsZUZhY3RvciksMD09PXQmJih0PWUqci53aWR0aC9yLmhlaWdodCksMD09PWUmJihlPXQqci5oZWlnaHQvci53aWR0aCksW3QsZV19LHY9ZnVuY3Rpb24odCxlLHIsbixpLGEpe3ZhciBvPW0uY2FsbCh0aGlzLHIsbixpKSxzPXRoaXMuaW50ZXJuYWwuZ2V0Q29vcmRpbmF0ZVN0cmluZyxjPXRoaXMuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nLHU9aC5jYWxsKHRoaXMpO2lmKHI9b1swXSxuPW9bMV0sdVtpLmluZGV4XT1pLGEpe2EqPU1hdGguUEkvMTgwO3ZhciBsPU1hdGguY29zKGEpLGY9TWF0aC5zaW4oYSksZD1mdW5jdGlvbih0KXtyZXR1cm4gdC50b0ZpeGVkKDQpfSxwPVtkKGwpLGQoZiksZCgtMSpmKSxkKGwpLDAsMCxcImNtXCJdfXRoaXMuaW50ZXJuYWwud3JpdGUoXCJxXCIpLGE/KHRoaXMuaW50ZXJuYWwud3JpdGUoWzEsXCIwXCIsXCIwXCIsMSxzKHQpLGMoZStuKSxcImNtXCJdLmpvaW4oXCIgXCIpKSx0aGlzLmludGVybmFsLndyaXRlKHAuam9pbihcIiBcIikpLHRoaXMuaW50ZXJuYWwud3JpdGUoW3MociksXCIwXCIsXCIwXCIscyhuKSxcIjBcIixcIjBcIixcImNtXCJdLmpvaW4oXCIgXCIpKSk6dGhpcy5pbnRlcm5hbC53cml0ZShbcyhyKSxcIjBcIixcIjBcIixzKG4pLHModCksYyhlK24pLFwiY21cIl0uam9pbihcIiBcIikpLHRoaXMuaXNBZHZhbmNlZEFQSSgpJiZ0aGlzLmludGVybmFsLndyaXRlKFsxLDAsMCwtMSwwLDAsXCJjbVwiXS5qb2luKFwiIFwiKSksdGhpcy5pbnRlcm5hbC53cml0ZShcIi9JXCIraS5pbmRleCtcIiBEb1wiKSx0aGlzLmludGVybmFsLndyaXRlKFwiUVwiKX0sYj1lLmNvbG9yX3NwYWNlcz17REVWSUNFX1JHQjpcIkRldmljZVJHQlwiLERFVklDRV9HUkFZOlwiRGV2aWNlR3JheVwiLERFVklDRV9DTVlLOlwiRGV2aWNlQ01ZS1wiLENBTF9HUkVZOlwiQ2FsR3JheVwiLENBTF9SR0I6XCJDYWxSR0JcIixMQUI6XCJMYWJcIixJQ0NfQkFTRUQ6XCJJQ0NCYXNlZFwiLElOREVYRUQ6XCJJbmRleGVkXCIsUEFUVEVSTjpcIlBhdHRlcm5cIixTRVBBUkFUSU9OOlwiU2VwYXJhdGlvblwiLERFVklDRV9OOlwiRGV2aWNlTlwifTtlLmRlY29kZT17RENUX0RFQ09ERTpcIkRDVERlY29kZVwiLEZMQVRFX0RFQ09ERTpcIkZsYXRlRGVjb2RlXCIsTFpXX0RFQ09ERTpcIkxaV0RlY29kZVwiLEpQWF9ERUNPREU6XCJKUFhEZWNvZGVcIixKQklHMl9ERUNPREU6XCJKQklHMkRlY29kZVwiLEFTQ0lJODVfREVDT0RFOlwiQVNDSUk4NURlY29kZVwiLEFTQ0lJX0hFWF9ERUNPREU6XCJBU0NJSUhleERlY29kZVwiLFJVTl9MRU5HVEhfREVDT0RFOlwiUnVuTGVuZ3RoRGVjb2RlXCIsQ0NJVFRfRkFYX0RFQ09ERTpcIkNDSVRURmF4RGVjb2RlXCJ9O3ZhciB5PWUuaW1hZ2VfY29tcHJlc3Npb249e05PTkU6XCJOT05FXCIsRkFTVDpcIkZBU1RcIixNRURJVU06XCJNRURJVU1cIixTTE9XOlwiU0xPV1wifSx3PWUuX19hZGRpbWFnZV9fLnNIYXNoQ29kZT1mdW5jdGlvbih0KXt2YXIgZSxyLG49MDtpZihcInN0cmluZ1wiPT10eXBlb2YgdClmb3Iocj10Lmxlbmd0aCxlPTA7ZTxyO2UrKyluPShuPDw1KS1uK3QuY2hhckNvZGVBdChlKSxufD0wO2Vsc2UgaWYoeCh0KSlmb3Iocj10LmJ5dGVMZW5ndGgvMixlPTA7ZTxyO2UrKyluPShuPDw1KS1uK3RbZV0sbnw9MDtyZXR1cm4gbn0sTj1lLl9fYWRkaW1hZ2VfXy52YWxpZGF0ZVN0cmluZ0FzQmFzZTY0PWZ1bmN0aW9uKHQpeyh0PXR8fFwiXCIpLnRvU3RyaW5nKCkudHJpbSgpO3ZhciBlPSEwO3JldHVybiAwPT09dC5sZW5ndGgmJihlPSExKSx0Lmxlbmd0aCU0IT0wJiYoZT0hMSksITE9PT0vXltBLVphLXowLTkrL10rJC8udGVzdCh0LnN1YnN0cigwLHQubGVuZ3RoLTIpKSYmKGU9ITEpLCExPT09L15bQS1aYS16MC05L11bQS1aYS16MC05Ky9dfFtBLVphLXowLTkrL109fD09JC8udGVzdCh0LnN1YnN0cigtMikpJiYoZT0hMSksZX0sTD1lLl9fYWRkaW1hZ2VfXy5leHRyYWN0SW1hZ2VGcm9tRGF0YVVybD1mdW5jdGlvbih0KXt2YXIgZT0odD10fHxcIlwiKS5zcGxpdChcImJhc2U2NCxcIikscj1udWxsO2lmKDI9PT1lLmxlbmd0aCl7dmFyIG49L15kYXRhOihcXHcqXFwvXFx3Kik7KihjaGFyc2V0PSg/IWNoYXJzZXQ9KVtcXHc9LV0qKSo7KiQvLmV4ZWMoZVswXSk7QXJyYXkuaXNBcnJheShuKSYmKHI9e21pbWVUeXBlOm5bMV0sY2hhcnNldDpuWzJdLGRhdGE6ZVsxXX0pfXJldHVybiByfSxBPWUuX19hZGRpbWFnZV9fLnN1cHBvcnRzQXJyYXlCdWZmZXI9ZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgQXJyYXlCdWZmZXImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5fTtlLl9fYWRkaW1hZ2VfXy5pc0FycmF5QnVmZmVyPWZ1bmN0aW9uKHQpe3JldHVybiBBKCkmJnQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcn07dmFyIHg9ZS5fX2FkZGltYWdlX18uaXNBcnJheUJ1ZmZlclZpZXc9ZnVuY3Rpb24odCl7cmV0dXJuIEEoKSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQzMkFycmF5JiYodCBpbnN0YW5jZW9mIEludDhBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OENsYW1wZWRBcnJheSYmdCBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5fHx0IGluc3RhbmNlb2YgSW50MTZBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQxNkFycmF5fHx0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQzMkFycmF5fHx0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHx0IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5KX0sUz1lLl9fYWRkaW1hZ2VfXy5iaW5hcnlTdHJpbmdUb1VpbnQ4QXJyYXk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQubGVuZ3RoLHI9bmV3IFVpbnQ4QXJyYXkoZSksbj0wO248ZTtuKyspcltuXT10LmNoYXJDb2RlQXQobik7cmV0dXJuIHJ9LF89ZS5fX2FkZGltYWdlX18uYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZz1mdW5jdGlvbih0KXtmb3IodmFyIGU9XCJcIixyPXgodCk/dDpuZXcgVWludDhBcnJheSh0KSxuPTA7bjxyLmxlbmd0aDtuKz04MTkyKWUrPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxyLnN1YmFycmF5KG4sbis4MTkyKSk7cmV0dXJuIGV9O2UuYWRkSW1hZ2U9ZnVuY3Rpb24oKXt2YXIgZSxuLGksYSxvLHMsdSxoLGw7aWYoXCJudW1iZXJcIj09dHlwZW9mIGFyZ3VtZW50c1sxXT8obj1yLGk9YXJndW1lbnRzWzFdLGE9YXJndW1lbnRzWzJdLG89YXJndW1lbnRzWzNdLHM9YXJndW1lbnRzWzRdLHU9YXJndW1lbnRzWzVdLGg9YXJndW1lbnRzWzZdLGw9YXJndW1lbnRzWzddKToobj1hcmd1bWVudHNbMV0saT1hcmd1bWVudHNbMl0sYT1hcmd1bWVudHNbM10sbz1hcmd1bWVudHNbNF0scz1hcmd1bWVudHNbNV0sdT1hcmd1bWVudHNbNl0saD1hcmd1bWVudHNbN10sbD1hcmd1bWVudHNbOF0pLFwib2JqZWN0XCI9PT10KGU9YXJndW1lbnRzWzBdKSYmIWQoZSkmJlwiaW1hZ2VEYXRhXCJpbiBlKXt2YXIgZj1lO2U9Zi5pbWFnZURhdGEsbj1mLmZvcm1hdHx8bnx8cixpPWYueHx8aXx8MCxhPWYueXx8YXx8MCxvPWYud3x8Zi53aWR0aHx8byxzPWYuaHx8Zi5oZWlnaHR8fHMsdT1mLmFsaWFzfHx1LGg9Zi5jb21wcmVzc2lvbnx8aCxsPWYucm90YXRpb258fGYuYW5nbGV8fGx9dmFyIHA9dGhpcy5pbnRlcm5hbC5nZXRGaWx0ZXJzKCk7aWYodm9pZCAwPT09aCYmLTEhPT1wLmluZGV4T2YoXCJGbGF0ZUVuY29kZVwiKSYmKGg9XCJTTE9XXCIpLGlzTmFOKGkpfHxpc05hTihhKSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvb3JkaW5hdGVzIHBhc3NlZCB0byBqc1BERi5hZGRJbWFnZVwiKTtjLmNhbGwodGhpcyk7dmFyIGc9UC5jYWxsKHRoaXMsZSxuLHUsaCk7cmV0dXJuIHYuY2FsbCh0aGlzLGksYSxvLHMsZyxsKSx0aGlzfTt2YXIgUD1mdW5jdGlvbih0LG4sYSxvKXt2YXIgcyxjLHU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJmkodCk9PT1yKXt0PXVuZXNjYXBlKHQpO3ZhciBoPWsodCwhMSk7KFwiXCIhPT1ofHx2b2lkIDAhPT0oaD1lLmxvYWRGaWxlKHQsITApKSkmJih0PWgpfWlmKGQodCkmJih0PXAodCxuKSksbj1pKHQsbiksIWYobikpdGhyb3cgbmV3IEVycm9yKFwiYWRkSW1hZ2UgZG9lcyBub3Qgc3VwcG9ydCBmaWxlcyBvZiB0eXBlICdcIituK1wiJywgcGxlYXNlIGVuc3VyZSB0aGF0IGEgcGx1Z2luIGZvciAnXCIrbitcIicgc3VwcG9ydCBpcyBhZGRlZC5cIik7aWYoKG51bGw9PSh1PWEpfHwwPT09dS5sZW5ndGgpJiYoYT1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdHx8eCh0KT93KHQpOngodC5kYXRhKT93KHQuZGF0YSk6bnVsbH0odCkpLChzPWcuY2FsbCh0aGlzLGEpKXx8KEEoKSYmKHQgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxcIlJHQkFcIj09PW58fChjPXQsdD1TKHQpKSkscz10aGlzW1wicHJvY2Vzc1wiK24udG9VcHBlckNhc2UoKV0odCxsLmNhbGwodGhpcyksYSxmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PXQudG9VcHBlckNhc2UoKSksdCBpbiBlLmltYWdlX2NvbXByZXNzaW9uP3Q6eS5OT05FfShvKSxjKSksIXMpdGhyb3cgbmV3IEVycm9yKFwiQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCB3aGlsc3QgcHJvY2Vzc2luZyB0aGUgaW1hZ2UuXCIpO3JldHVybiBzfSxrPWUuX19hZGRpbWFnZV9fLmNvbnZlcnRCYXNlNjRUb0JpbmFyeVN0cmluZz1mdW5jdGlvbih0LGUpe3ZhciByO2U9XCJib29sZWFuXCIhPXR5cGVvZiBlfHxlO3ZhciBuLGk9XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7bj1udWxsIT09KHI9TCh0KSk/ci5kYXRhOnQ7dHJ5e2k9dShuKX1jYXRjaCh0KXtpZihlKXRocm93IE4obik/bmV3IEVycm9yKFwiYXRvYi1FcnJvciBpbiBqc1BERi5jb252ZXJ0QmFzZTY0VG9CaW5hcnlTdHJpbmcgXCIrdC5tZXNzYWdlKTpuZXcgRXJyb3IoXCJTdXBwbGllZCBEYXRhIGlzIG5vdCBhIHZhbGlkIGJhc2U2NC1TdHJpbmcganNQREYuY29udmVydEJhc2U2NFRvQmluYXJ5U3RyaW5nIFwiKX19cmV0dXJuIGl9O2UuZ2V0SW1hZ2VQcm9wZXJ0aWVzPWZ1bmN0aW9uKHQpe3ZhciBuLGEsbz1cIlwiO2lmKGQodCkmJih0PXAodCkpLFwic3RyaW5nXCI9PXR5cGVvZiB0JiZpKHQpPT09ciYmKFwiXCI9PT0obz1rKHQsITEpKSYmKG89ZS5sb2FkRmlsZSh0KXx8XCJcIiksdD1vKSxhPWkodCksIWYoYSkpdGhyb3cgbmV3IEVycm9yKFwiYWRkSW1hZ2UgZG9lcyBub3Qgc3VwcG9ydCBmaWxlcyBvZiB0eXBlICdcIithK1wiJywgcGxlYXNlIGVuc3VyZSB0aGF0IGEgcGx1Z2luIGZvciAnXCIrYStcIicgc3VwcG9ydCBpcyBhZGRlZC5cIik7aWYoIUEoKXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fCh0PVModCkpLCEobj10aGlzW1wicHJvY2Vzc1wiK2EudG9VcHBlckNhc2UoKV0odCkpKXRocm93IG5ldyBFcnJvcihcIkFuIHVua25vd24gZXJyb3Igb2NjdXJyZWQgd2hpbHN0IHByb2Nlc3NpbmcgdGhlIGltYWdlXCIpO3JldHVybiBuLmZpbGVUeXBlPWEsbn19KEUuQVBJKSxcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNCBTdGV2ZW4gU3B1bmdpbiAoVHdlbHZlVG9uZSBMTEMpICBzdGV2ZW5AdHdlbHZldG9uZS50dlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbih0KXtpZih2b2lkIDAhPT10JiZcIlwiIT10KXJldHVybiEwfTtFLkFQSS5ldmVudHMucHVzaChbXCJhZGRQYWdlXCIsZnVuY3Rpb24odCl7dGhpcy5pbnRlcm5hbC5nZXRQYWdlSW5mbyh0LnBhZ2VOdW1iZXIpLnBhZ2VDb250ZXh0LmFubm90YXRpb25zPVtdfV0pLHQuZXZlbnRzLnB1c2goW1wicHV0UGFnZVwiLGZ1bmN0aW9uKHQpe2Zvcih2YXIgcixuLGksYT10aGlzLmludGVybmFsLmdldENvb3JkaW5hdGVTdHJpbmcsbz10aGlzLmludGVybmFsLmdldFZlcnRpY2FsQ29vcmRpbmF0ZVN0cmluZyxzPXRoaXMuaW50ZXJuYWwuZ2V0UGFnZUluZm9CeU9iaklkKHQub2JqSWQpLGM9dC5wYWdlQ29udGV4dC5hbm5vdGF0aW9ucyx1PSExLGg9MDtoPGMubGVuZ3RoJiYhdTtoKyspc3dpdGNoKChyPWNbaF0pLnR5cGUpe2Nhc2VcImxpbmtcIjooZShyLm9wdGlvbnMudXJsKXx8ZShyLm9wdGlvbnMucGFnZU51bWJlcikpJiYodT0hMCk7YnJlYWs7Y2FzZVwicmVmZXJlbmNlXCI6Y2FzZVwidGV4dFwiOmNhc2VcImZyZWV0ZXh0XCI6dT0hMH1pZigwIT11KXt0aGlzLmludGVybmFsLndyaXRlKFwiL0Fubm90cyBbXCIpO2Zvcih2YXIgbD0wO2w8Yy5sZW5ndGg7bCsrKXtyPWNbbF07dmFyIGY9dGhpcy5pbnRlcm5hbC5wZGZFc2NhcGUsZD10aGlzLmludGVybmFsLmdldEVuY3J5cHRvcih0Lm9iaklkKTtzd2l0Y2goci50eXBlKXtjYXNlXCJyZWZlcmVuY2VcIjp0aGlzLmludGVybmFsLndyaXRlKFwiIFwiK3Iub2JqZWN0Lm9iaklkK1wiIDAgUiBcIik7YnJlYWs7Y2FzZVwidGV4dFwiOnZhciBwPXRoaXMuaW50ZXJuYWwubmV3QWRkaXRpb25hbE9iamVjdCgpLGc9dGhpcy5pbnRlcm5hbC5uZXdBZGRpdGlvbmFsT2JqZWN0KCksbT10aGlzLmludGVybmFsLmdldEVuY3J5cHRvcihwLm9iaklkKSx2PXIudGl0bGV8fFwiTm90ZVwiO2k9XCI8PC9UeXBlIC9Bbm5vdCAvU3VidHlwZSAvVGV4dCBcIisobj1cIi9SZWN0IFtcIithKHIuYm91bmRzLngpK1wiIFwiK28oci5ib3VuZHMueStyLmJvdW5kcy5oKStcIiBcIithKHIuYm91bmRzLngrci5ib3VuZHMudykrXCIgXCIrbyhyLmJvdW5kcy55KStcIl0gXCIpK1wiL0NvbnRlbnRzIChcIitmKG0oci5jb250ZW50cykpK1wiKVwiLGkrPVwiIC9Qb3B1cCBcIitnLm9iaklkK1wiIDAgUlwiLGkrPVwiIC9QIFwiK3Mub2JqSWQrXCIgMCBSXCIsaSs9XCIgL1QgKFwiK2YobSh2KSkrXCIpID4+XCIscC5jb250ZW50PWk7dmFyIGI9cC5vYmpJZCtcIiAwIFJcIjtpPVwiPDwvVHlwZSAvQW5ub3QgL1N1YnR5cGUgL1BvcHVwIFwiKyhuPVwiL1JlY3QgW1wiK2Eoci5ib3VuZHMueCszMCkrXCIgXCIrbyhyLmJvdW5kcy55K3IuYm91bmRzLmgpK1wiIFwiK2Eoci5ib3VuZHMueCtyLmJvdW5kcy53KzMwKStcIiBcIitvKHIuYm91bmRzLnkpK1wiXSBcIikrXCIgL1BhcmVudCBcIitiLHIub3BlbiYmKGkrPVwiIC9PcGVuIHRydWVcIiksaSs9XCIgPj5cIixnLmNvbnRlbnQ9aSx0aGlzLmludGVybmFsLndyaXRlKHAub2JqSWQsXCIwIFJcIixnLm9iaklkLFwiMCBSXCIpO2JyZWFrO2Nhc2VcImZyZWV0ZXh0XCI6bj1cIi9SZWN0IFtcIithKHIuYm91bmRzLngpK1wiIFwiK28oci5ib3VuZHMueSkrXCIgXCIrYShyLmJvdW5kcy54K3IuYm91bmRzLncpK1wiIFwiK28oci5ib3VuZHMueStyLmJvdW5kcy5oKStcIl0gXCI7dmFyIHk9ci5jb2xvcnx8XCIjMDAwMDAwXCI7aT1cIjw8L1R5cGUgL0Fubm90IC9TdWJ0eXBlIC9GcmVlVGV4dCBcIituK1wiL0NvbnRlbnRzIChcIitmKGQoci5jb250ZW50cykpK1wiKVwiLGkrPVwiIC9EUyhmb250OiBIZWx2ZXRpY2Esc2Fucy1zZXJpZiAxMi4wcHQ7IHRleHQtYWxpZ246bGVmdDsgY29sb3I6I1wiK3krXCIpXCIsaSs9XCIgL0JvcmRlciBbMCAwIDBdXCIsaSs9XCIgPj5cIix0aGlzLmludGVybmFsLndyaXRlKGkpO2JyZWFrO2Nhc2VcImxpbmtcIjppZihyLm9wdGlvbnMubmFtZSl7dmFyIHc9dGhpcy5hbm5vdGF0aW9ucy5fbmFtZU1hcFtyLm9wdGlvbnMubmFtZV07ci5vcHRpb25zLnBhZ2VOdW1iZXI9dy5wYWdlLHIub3B0aW9ucy50b3A9dy55fWVsc2Ugci5vcHRpb25zLnRvcHx8KHIub3B0aW9ucy50b3A9MCk7aWYobj1cIi9SZWN0IFtcIityLmZpbmFsQm91bmRzLngrXCIgXCIrci5maW5hbEJvdW5kcy55K1wiIFwiK3IuZmluYWxCb3VuZHMudytcIiBcIityLmZpbmFsQm91bmRzLmgrXCJdIFwiLGk9XCJcIixyLm9wdGlvbnMudXJsKWk9XCI8PC9UeXBlIC9Bbm5vdCAvU3VidHlwZSAvTGluayBcIituK1wiL0JvcmRlciBbMCAwIDBdIC9BIDw8L1MgL1VSSSAvVVJJIChcIitmKGQoci5vcHRpb25zLnVybCkpK1wiKSA+PlwiO2Vsc2UgaWYoci5vcHRpb25zLnBhZ2VOdW1iZXIpe3N3aXRjaChpPVwiPDwvVHlwZSAvQW5ub3QgL1N1YnR5cGUgL0xpbmsgXCIrbitcIi9Cb3JkZXIgWzAgMCAwXSAvRGVzdCBbXCIrdGhpcy5pbnRlcm5hbC5nZXRQYWdlSW5mbyhyLm9wdGlvbnMucGFnZU51bWJlcikub2JqSWQrXCIgMCBSXCIsci5vcHRpb25zLm1hZ0ZhY3Rvcj1yLm9wdGlvbnMubWFnRmFjdG9yfHxcIlhZWlwiLHIub3B0aW9ucy5tYWdGYWN0b3Ipe2Nhc2VcIkZpdFwiOmkrPVwiIC9GaXRdXCI7YnJlYWs7Y2FzZVwiRml0SFwiOmkrPVwiIC9GaXRIIFwiK3Iub3B0aW9ucy50b3ArXCJdXCI7YnJlYWs7Y2FzZVwiRml0VlwiOnIub3B0aW9ucy5sZWZ0PXIub3B0aW9ucy5sZWZ0fHwwLGkrPVwiIC9GaXRWIFwiK3Iub3B0aW9ucy5sZWZ0K1wiXVwiO2JyZWFrO2Nhc2VcIlhZWlwiOmRlZmF1bHQ6dmFyIE49byhyLm9wdGlvbnMudG9wKTtyLm9wdGlvbnMubGVmdD1yLm9wdGlvbnMubGVmdHx8MCx2b2lkIDA9PT1yLm9wdGlvbnMuem9vbSYmKHIub3B0aW9ucy56b29tPTApLGkrPVwiIC9YWVogXCIrci5vcHRpb25zLmxlZnQrXCIgXCIrTitcIiBcIityLm9wdGlvbnMuem9vbStcIl1cIn19XCJcIiE9aSYmKGkrPVwiID4+XCIsdGhpcy5pbnRlcm5hbC53cml0ZShpKSl9fXRoaXMuaW50ZXJuYWwud3JpdGUoXCJdXCIpfX1dKSx0LmNyZWF0ZUFubm90YXRpb249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5pbnRlcm5hbC5nZXRDdXJyZW50UGFnZUluZm8oKTtzd2l0Y2godC50eXBlKXtjYXNlXCJsaW5rXCI6dGhpcy5saW5rKHQuYm91bmRzLngsdC5ib3VuZHMueSx0LmJvdW5kcy53LHQuYm91bmRzLmgsdCk7YnJlYWs7Y2FzZVwidGV4dFwiOmNhc2VcImZyZWV0ZXh0XCI6ZS5wYWdlQ29udGV4dC5hbm5vdGF0aW9ucy5wdXNoKHQpfX0sdC5saW5rPWZ1bmN0aW9uKHQsZSxyLG4saSl7dmFyIGE9dGhpcy5pbnRlcm5hbC5nZXRDdXJyZW50UGFnZUluZm8oKSxvPXRoaXMuaW50ZXJuYWwuZ2V0Q29vcmRpbmF0ZVN0cmluZyxzPXRoaXMuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nO2EucGFnZUNvbnRleHQuYW5ub3RhdGlvbnMucHVzaCh7ZmluYWxCb3VuZHM6e3g6byh0KSx5OnMoZSksdzpvKHQrciksaDpzKGUrbil9LG9wdGlvbnM6aSx0eXBlOlwibGlua1wifSl9LHQudGV4dFdpdGhMaW5rPWZ1bmN0aW9uKHQsZSxyLG4pe3ZhciBpLGEsbz10aGlzLmdldFRleHRXaWR0aCh0KSxzPXRoaXMuaW50ZXJuYWwuZ2V0TGluZUhlaWdodCgpL3RoaXMuaW50ZXJuYWwuc2NhbGVGYWN0b3I7aWYodm9pZCAwIT09bi5tYXhXaWR0aCl7YT1uLm1heFdpZHRoO3ZhciBjPXRoaXMuc3BsaXRUZXh0VG9TaXplKHQsYSkubGVuZ3RoO2k9TWF0aC5jZWlsKHMqYyl9ZWxzZSBhPW8saT1zO3JldHVybiB0aGlzLnRleHQodCxlLHIsbikscis9LjIqcyxcImNlbnRlclwiPT09bi5hbGlnbiYmKGUtPW8vMiksXCJyaWdodFwiPT09bi5hbGlnbiYmKGUtPW8pLHRoaXMubGluayhlLHItcyxhLGksbiksb30sdC5nZXRUZXh0V2lkdGg9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5pbnRlcm5hbC5nZXRGb250U2l6ZSgpO3JldHVybiB0aGlzLmdldFN0cmluZ1VuaXRXaWR0aCh0KSplL3RoaXMuaW50ZXJuYWwuc2NhbGVGYWN0b3J9fShFLkFQSSksXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgQXJhcyBBYmJhc2lcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuZnVuY3Rpb24odCl7dmFyIGU9ezE1Njk6WzY1MTUyXSwxNTcwOls2NTE1Myw2NTE1NF0sMTU3MTpbNjUxNTUsNjUxNTZdLDE1NzI6WzY1MTU3LDY1MTU4XSwxNTczOls2NTE1OSw2NTE2MF0sMTU3NDpbNjUxNjEsNjUxNjIsNjUxNjMsNjUxNjRdLDE1NzU6WzY1MTY1LDY1MTY2XSwxNTc2Ols2NTE2Nyw2NTE2OCw2NTE2OSw2NTE3MF0sMTU3NzpbNjUxNzEsNjUxNzJdLDE1Nzg6WzY1MTczLDY1MTc0LDY1MTc1LDY1MTc2XSwxNTc5Ols2NTE3Nyw2NTE3OCw2NTE3OSw2NTE4MF0sMTU4MDpbNjUxODEsNjUxODIsNjUxODMsNjUxODRdLDE1ODE6WzY1MTg1LDY1MTg2LDY1MTg3LDY1MTg4XSwxNTgyOls2NTE4OSw2NTE5MCw2NTE5MSw2NTE5Ml0sMTU4MzpbNjUxOTMsNjUxOTRdLDE1ODQ6WzY1MTk1LDY1MTk2XSwxNTg1Ols2NTE5Nyw2NTE5OF0sMTU4NjpbNjUxOTksNjUyMDBdLDE1ODc6WzY1MjAxLDY1MjAyLDY1MjAzLDY1MjA0XSwxNTg4Ols2NTIwNSw2NTIwNiw2NTIwNyw2NTIwOF0sMTU4OTpbNjUyMDksNjUyMTAsNjUyMTEsNjUyMTJdLDE1OTA6WzY1MjEzLDY1MjE0LDY1MjE1LDY1MjE2XSwxNTkxOls2NTIxNyw2NTIxOCw2NTIxOSw2NTIyMF0sMTU5MjpbNjUyMjEsNjUyMjIsNjUyMjMsNjUyMjRdLDE1OTM6WzY1MjI1LDY1MjI2LDY1MjI3LDY1MjI4XSwxNTk0Ols2NTIyOSw2NTIzMCw2NTIzMSw2NTIzMl0sMTYwMTpbNjUyMzMsNjUyMzQsNjUyMzUsNjUyMzZdLDE2MDI6WzY1MjM3LDY1MjM4LDY1MjM5LDY1MjQwXSwxNjAzOls2NTI0MSw2NTI0Miw2NTI0Myw2NTI0NF0sMTYwNDpbNjUyNDUsNjUyNDYsNjUyNDcsNjUyNDhdLDE2MDU6WzY1MjQ5LDY1MjUwLDY1MjUxLDY1MjUyXSwxNjA2Ols2NTI1Myw2NTI1NCw2NTI1NSw2NTI1Nl0sMTYwNzpbNjUyNTcsNjUyNTgsNjUyNTksNjUyNjBdLDE2MDg6WzY1MjYxLDY1MjYyXSwxNjA5Ols2NTI2Myw2NTI2NCw2NDQ4OCw2NDQ4OV0sMTYxMDpbNjUyNjUsNjUyNjYsNjUyNjcsNjUyNjhdLDE2NDk6WzY0MzM2LDY0MzM3XSwxNjU1Ols2NDQ3N10sMTY1NzpbNjQzNTgsNjQzNTksNjQzNjAsNjQzNjFdLDE2NTg6WzY0MzUwLDY0MzUxLDY0MzUyLDY0MzUzXSwxNjU5Ols2NDMzOCw2NDMzOSw2NDM0MCw2NDM0MV0sMTY2MjpbNjQzNDIsNjQzNDMsNjQzNDQsNjQzNDVdLDE2NjM6WzY0MzU0LDY0MzU1LDY0MzU2LDY0MzU3XSwxNjY0Ols2NDM0Niw2NDM0Nyw2NDM0OCw2NDM0OV0sMTY2NzpbNjQzNzQsNjQzNzUsNjQzNzYsNjQzNzddLDE2Njg6WzY0MzcwLDY0MzcxLDY0MzcyLDY0MzczXSwxNjcwOls2NDM3OCw2NDM3OSw2NDM4MCw2NDM4MV0sMTY3MTpbNjQzODIsNjQzODMsNjQzODQsNjQzODVdLDE2NzI6WzY0MzkyLDY0MzkzXSwxNjc2Ols2NDM4OCw2NDM4OV0sMTY3NzpbNjQzODYsNjQzODddLDE2Nzg6WzY0MzkwLDY0MzkxXSwxNjgxOls2NDM5Niw2NDM5N10sMTY4ODpbNjQzOTQsNjQzOTVdLDE3MDA6WzY0MzYyLDY0MzYzLDY0MzY0LDY0MzY1XSwxNzAyOls2NDM2Niw2NDM2Nyw2NDM2OCw2NDM2OV0sMTcwNTpbNjQzOTgsNjQzOTksNjQ0MDAsNjQ0MDFdLDE3MDk6WzY0NDY3LDY0NDY4LDY0NDY5LDY0NDcwXSwxNzExOls2NDQwMiw2NDQwMyw2NDQwNCw2NDQwNV0sMTcxMzpbNjQ0MTAsNjQ0MTEsNjQ0MTIsNjQ0MTNdLDE3MTU6WzY0NDA2LDY0NDA3LDY0NDA4LDY0NDA5XSwxNzIyOls2NDQxNCw2NDQxNV0sMTcyMzpbNjQ0MTYsNjQ0MTcsNjQ0MTgsNjQ0MTldLDE3MjY6WzY0NDI2LDY0NDI3LDY0NDI4LDY0NDI5XSwxNzI4Ols2NDQyMCw2NDQyMV0sMTcyOTpbNjQ0MjIsNjQ0MjMsNjQ0MjQsNjQ0MjVdLDE3MzM6WzY0NDgwLDY0NDgxXSwxNzM0Ols2NDQ3Myw2NDQ3NF0sMTczNTpbNjQ0NzEsNjQ0NzJdLDE3MzY6WzY0NDc1LDY0NDc2XSwxNzM3Ols2NDQ4Miw2NDQ4M10sMTczOTpbNjQ0NzgsNjQ0NzldLDE3NDA6WzY0NTA4LDY0NTA5LDY0NTEwLDY0NTExXSwxNzQ0Ols2NDQ4NCw2NDQ4NSw2NDQ4Niw2NDQ4N10sMTc0NjpbNjQ0MzAsNjQ0MzFdLDE3NDc6WzY0NDMyLDY0NDMzXX0scj17NjUyNDc6ezY1MTU0OjY1MjY5LDY1MTU2OjY1MjcxLDY1MTYwOjY1MjczLDY1MTY2OjY1Mjc1fSw2NTI0ODp7NjUxNTQ6NjUyNzAsNjUxNTY6NjUyNzIsNjUxNjA6NjUyNzQsNjUxNjY6NjUyNzZ9LDY1MTY1Ons2NTI0Nzp7NjUyNDg6ezY1MjU4OjY1MDEwfX19LDE2MTc6ezE2MTI6NjQ2MDYsMTYxMzo2NDYwNywxNjE0OjY0NjA4LDE2MTU6NjQ2MDksMTYxNjo2NDYxMH19LG49ezE2MTI6NjQ2MDYsMTYxMzo2NDYwNywxNjE0OjY0NjA4LDE2MTU6NjQ2MDksMTYxNjo2NDYxMH0saT1bMTU3MCwxNTcxLDE1NzMsMTU3NV07dC5fX2FyYWJpY1BhcnNlcl9fPXt9O3ZhciBhPXQuX19hcmFiaWNQYXJzZXJfXy5pc0luQXJhYmljU3Vic3RpdHV0aW9uQT1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09ZVt0LmNoYXJDb2RlQXQoMCldfSxvPXQuX19hcmFiaWNQYXJzZXJfXy5pc0FyYWJpY0xldHRlcj1mdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdCYmL15bXFx1MDYwMC1cXHUwNkZGXFx1MDc1MC1cXHUwNzdGXFx1MDhBMC1cXHUwOEZGXFx1RkI1MC1cXHVGREZGXFx1RkU3MC1cXHVGRUZGXSskLy50ZXN0KHQpfSxzPXQuX19hcmFiaWNQYXJzZXJfXy5pc0FyYWJpY0VuZExldHRlcj1mdW5jdGlvbih0KXtyZXR1cm4gbyh0KSYmYSh0KSYmZVt0LmNoYXJDb2RlQXQoMCldLmxlbmd0aDw9Mn0sYz10Ll9fYXJhYmljUGFyc2VyX18uaXNBcmFiaWNBbGZMZXR0ZXI9ZnVuY3Rpb24odCl7cmV0dXJuIG8odCkmJmkuaW5kZXhPZih0LmNoYXJDb2RlQXQoMCkpPj0wfTt0Ll9fYXJhYmljUGFyc2VyX18uYXJhYmljTGV0dGVySGFzSXNvbGF0ZWRGb3JtPWZ1bmN0aW9uKHQpe3JldHVybiBvKHQpJiZhKHQpJiZlW3QuY2hhckNvZGVBdCgwKV0ubGVuZ3RoPj0xfTt2YXIgdT10Ll9fYXJhYmljUGFyc2VyX18uYXJhYmljTGV0dGVySGFzRmluYWxGb3JtPWZ1bmN0aW9uKHQpe3JldHVybiBvKHQpJiZhKHQpJiZlW3QuY2hhckNvZGVBdCgwKV0ubGVuZ3RoPj0yfTt0Ll9fYXJhYmljUGFyc2VyX18uYXJhYmljTGV0dGVySGFzSW5pdGlhbEZvcm09ZnVuY3Rpb24odCl7cmV0dXJuIG8odCkmJmEodCkmJmVbdC5jaGFyQ29kZUF0KDApXS5sZW5ndGg+PTN9O3ZhciBoPXQuX19hcmFiaWNQYXJzZXJfXy5hcmFiaWNMZXR0ZXJIYXNNZWRpYWxGb3JtPWZ1bmN0aW9uKHQpe3JldHVybiBvKHQpJiZhKHQpJiY0PT1lW3QuY2hhckNvZGVBdCgwKV0ubGVuZ3RofSxsPXQuX19hcmFiaWNQYXJzZXJfXy5yZXNvbHZlTGlnYXR1cmVzPWZ1bmN0aW9uKHQpe3ZhciBlPTAsbj1yLGk9XCJcIixhPTA7Zm9yKGU9MDtlPHQubGVuZ3RoO2UrPTEpdm9pZCAwIT09blt0LmNoYXJDb2RlQXQoZSldPyhhKyssXCJudW1iZXJcIj09dHlwZW9mKG49blt0LmNoYXJDb2RlQXQoZSldKSYmKGkrPVN0cmluZy5mcm9tQ2hhckNvZGUobiksbj1yLGE9MCksZT09PXQubGVuZ3RoLTEmJihuPXIsaSs9dC5jaGFyQXQoZS0oYS0xKSksZS09YS0xLGE9MCkpOihuPXIsaSs9dC5jaGFyQXQoZS1hKSxlLT1hLGE9MCk7cmV0dXJuIGl9O3QuX19hcmFiaWNQYXJzZXJfXy5pc0FyYWJpY0RpYWNyaXRpYz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwIT09dCYmdm9pZCAwIT09blt0LmNoYXJDb2RlQXQoMCldfTt2YXIgZj10Ll9fYXJhYmljUGFyc2VyX18uZ2V0Q29ycmVjdEZvcm09ZnVuY3Rpb24odCxlLHIpe3JldHVybiBvKHQpPyExPT09YSh0KT8tMTohdSh0KXx8IW8oZSkmJiFvKHIpfHwhbyhyKSYmcyhlKXx8cyh0KSYmIW8oZSl8fHModCkmJmMoZSl8fHModCkmJnMoZSk/MDpoKHQpJiZvKGUpJiYhcyhlKSYmbyhyKSYmdShyKT8zOnModCl8fCFvKHIpPzE6MjotMX0sZD1mdW5jdGlvbih0KXt2YXIgcj0wLG49MCxpPTAsYT1cIlwiLHM9XCJcIixjPVwiXCIsdT0odD10fHxcIlwiKS5zcGxpdChcIlxcXFxzK1wiKSxoPVtdO2ZvcihyPTA7cjx1Lmxlbmd0aDtyKz0xKXtmb3IoaC5wdXNoKFwiXCIpLG49MDtuPHVbcl0ubGVuZ3RoO24rPTEpYT11W3JdW25dLHM9dVtyXVtuLTFdLGM9dVtyXVtuKzFdLG8oYSk/KGk9ZihhLHMsYyksaFtyXSs9LTEhPT1pP1N0cmluZy5mcm9tQ2hhckNvZGUoZVthLmNoYXJDb2RlQXQoMCldW2ldKTphKTpoW3JdKz1hO2hbcl09bChoW3JdKX1yZXR1cm4gaC5qb2luKFwiIFwiKX0scD10Ll9fYXJhYmljUGFyc2VyX18ucHJvY2Vzc0FyYWJpYz10LnByb2Nlc3NBcmFiaWM9ZnVuY3Rpb24oKXt2YXIgdCxlPVwic3RyaW5nXCI9PXR5cGVvZiBhcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOmFyZ3VtZW50c1swXS50ZXh0LHI9W107aWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIG49MDtmb3Iocj1bXSxuPTA7bjxlLmxlbmd0aDtuKz0xKUFycmF5LmlzQXJyYXkoZVtuXSk/ci5wdXNoKFtkKGVbbl1bMF0pLGVbbl1bMV0sZVtuXVsyXV0pOnIucHVzaChbZChlW25dKV0pO3Q9cn1lbHNlIHQ9ZChlKTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgYXJndW1lbnRzWzBdP3Q6KGFyZ3VtZW50c1swXS50ZXh0PXQsYXJndW1lbnRzWzBdKX07dC5ldmVudHMucHVzaChbXCJwcmVQcm9jZXNzVGV4dFwiLHBdKX0oRS5BUEkpLEUuQVBJLmF1dG9QcmludD1mdW5jdGlvbih0KXt2YXIgZTtzd2l0Y2goKHQ9dHx8e30pLnZhcmlhbnQ9dC52YXJpYW50fHxcIm5vbi1jb25mb3JtXCIsdC52YXJpYW50KXtjYXNlXCJqYXZhc2NyaXB0XCI6dGhpcy5hZGRKUyhcInByaW50KHt9KTtcIik7YnJlYWs7Y2FzZVwibm9uLWNvbmZvcm1cIjpkZWZhdWx0OnRoaXMuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcInBvc3RQdXRSZXNvdXJjZXNcIiwoZnVuY3Rpb24oKXtlPXRoaXMuaW50ZXJuYWwubmV3T2JqZWN0KCksdGhpcy5pbnRlcm5hbC5vdXQoXCI8PFwiKSx0aGlzLmludGVybmFsLm91dChcIi9TIC9OYW1lZFwiKSx0aGlzLmludGVybmFsLm91dChcIi9UeXBlIC9BY3Rpb25cIiksdGhpcy5pbnRlcm5hbC5vdXQoXCIvTiAvUHJpbnRcIiksdGhpcy5pbnRlcm5hbC5vdXQoXCI+PlwiKSx0aGlzLmludGVybmFsLm91dChcImVuZG9ialwiKX0pKSx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRDYXRhbG9nXCIsKGZ1bmN0aW9uKCl7dGhpcy5pbnRlcm5hbC5vdXQoXCIvT3BlbkFjdGlvbiBcIitlK1wiIDAgUlwiKX0pKX1yZXR1cm4gdGhpc30sXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgU3RldmVuIFNwdW5naW4gKFR3ZWx2ZVRvbmUgTExDKSAgc3RldmVuQHR3ZWx2ZXRvbmUudHZcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24oKXt2YXIgdD12b2lkIDA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwZGZcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9LHNldDpmdW5jdGlvbihlKXt0PWV9fSk7dmFyIGU9MTUwO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwid2lkdGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbih0KXtlPWlzTmFOKHQpfHwhMT09PU51bWJlci5pc0ludGVnZXIodCl8fHQ8MD8xNTA6dCx0aGlzLmdldENvbnRleHQoXCIyZFwiKS5wYWdlV3JhcFhFbmFibGVkJiYodGhpcy5nZXRDb250ZXh0KFwiMmRcIikucGFnZVdyYXBYPWUrMSl9fSk7dmFyIHI9MzAwO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGVpZ2h0XCIse2dldDpmdW5jdGlvbigpe3JldHVybiByfSxzZXQ6ZnVuY3Rpb24odCl7cj1pc05hTih0KXx8ITE9PT1OdW1iZXIuaXNJbnRlZ2VyKHQpfHx0PDA/MzAwOnQsdGhpcy5nZXRDb250ZXh0KFwiMmRcIikucGFnZVdyYXBZRW5hYmxlZCYmKHRoaXMuZ2V0Q29udGV4dChcIjJkXCIpLnBhZ2VXcmFwWT1yKzEpfX0pO3ZhciBuPVtdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY2hpbGROb2Rlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKHQpe249dH19KTt2YXIgaT17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInN0eWxlXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24odCl7aT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGFyZW50Tm9kZVwiLHt9KX07ZS5wcm90b3R5cGUuZ2V0Q29udGV4dD1mdW5jdGlvbih0LGUpe3ZhciByO2lmKFwiMmRcIiE9PSh0PXR8fFwiMmRcIikpcmV0dXJuIG51bGw7Zm9yKHIgaW4gZSl0aGlzLnBkZi5jb250ZXh0MmQuaGFzT3duUHJvcGVydHkocikmJih0aGlzLnBkZi5jb250ZXh0MmRbcl09ZVtyXSk7cmV0dXJuIHRoaXMucGRmLmNvbnRleHQyZC5fY2FudmFzPXRoaXMsdGhpcy5wZGYuY29udGV4dDJkfSxlLnByb3RvdHlwZS50b0RhdGFVUkw9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJ0b0RhdGFVUkwgaXMgbm90IGltcGxlbWVudGVkLlwiKX0sdC5ldmVudHMucHVzaChbXCJpbml0aWFsaXplZFwiLGZ1bmN0aW9uKCl7dGhpcy5jYW52YXM9bmV3IGUsdGhpcy5jYW52YXMucGRmPXRoaXN9XSl9KEUuQVBJKSxmdW5jdGlvbihlKXt2YXIgcj17bGVmdDowLHRvcDowLGJvdHRvbTowLHJpZ2h0OjB9LG49ITEsaT1mdW5jdGlvbigpe3ZvaWQgMD09PXRoaXMuaW50ZXJuYWwuX19jZWxsX18mJih0aGlzLmludGVybmFsLl9fY2VsbF9fPXt9LHRoaXMuaW50ZXJuYWwuX19jZWxsX18ucGFkZGluZz0zLHRoaXMuaW50ZXJuYWwuX19jZWxsX18uaGVhZGVyRnVuY3Rpb249dm9pZCAwLHRoaXMuaW50ZXJuYWwuX19jZWxsX18ubWFyZ2lucz1PYmplY3QuYXNzaWduKHt9LHIpLHRoaXMuaW50ZXJuYWwuX19jZWxsX18ubWFyZ2lucy53aWR0aD10aGlzLmdldFBhZ2VXaWR0aCgpLGEuY2FsbCh0aGlzKSl9LGE9ZnVuY3Rpb24oKXt0aGlzLmludGVybmFsLl9fY2VsbF9fLmxhc3RDZWxsPW5ldyBvLHRoaXMuaW50ZXJuYWwuX19jZWxsX18ucGFnZXM9MX0sbz1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50c1swXTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInhcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdH0sc2V0OmZ1bmN0aW9uKGUpe3Q9ZX19KTt2YXIgZT1hcmd1bWVudHNbMV07T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ5XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9LHNldDpmdW5jdGlvbih0KXtlPXR9fSk7dmFyIHI9YXJndW1lbnRzWzJdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwid2lkdGhcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcn0sc2V0OmZ1bmN0aW9uKHQpe3I9dH19KTt2YXIgbj1hcmd1bWVudHNbM107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJoZWlnaHRcIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbn0sc2V0OmZ1bmN0aW9uKHQpe249dH19KTt2YXIgaT1hcmd1bWVudHNbNF07T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJ0ZXh0XCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGl9LHNldDpmdW5jdGlvbih0KXtpPXR9fSk7dmFyIGE9YXJndW1lbnRzWzVdO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGluZU51bWJlclwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBhfSxzZXQ6ZnVuY3Rpb24odCl7YT10fX0pO3ZhciBvPWFyZ3VtZW50c1s2XTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJhbGlnblwiLHtlbnVtZXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24odCl7bz10fX0pLHRoaXN9O28ucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBvKHRoaXMueCx0aGlzLnksdGhpcy53aWR0aCx0aGlzLmhlaWdodCx0aGlzLnRleHQsdGhpcy5saW5lTnVtYmVyLHRoaXMuYWxpZ24pfSxvLnByb3RvdHlwZS50b0FycmF5PWZ1bmN0aW9uKCl7cmV0dXJuW3RoaXMueCx0aGlzLnksdGhpcy53aWR0aCx0aGlzLmhlaWdodCx0aGlzLnRleHQsdGhpcy5saW5lTnVtYmVyLHRoaXMuYWxpZ25dfSxlLnNldEhlYWRlckZ1bmN0aW9uPWZ1bmN0aW9uKHQpe3JldHVybiBpLmNhbGwodGhpcyksdGhpcy5pbnRlcm5hbC5fX2NlbGxfXy5oZWFkZXJGdW5jdGlvbj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6dm9pZCAwLHRoaXN9LGUuZ2V0VGV4dERpbWVuc2lvbnM9ZnVuY3Rpb24odCxlKXtpLmNhbGwodGhpcyk7dmFyIHI9KGU9ZXx8e30pLmZvbnRTaXplfHx0aGlzLmdldEZvbnRTaXplKCksbj1lLmZvbnR8fHRoaXMuZ2V0Rm9udCgpLGE9ZS5zY2FsZUZhY3Rvcnx8dGhpcy5pbnRlcm5hbC5zY2FsZUZhY3RvcixvPTAscz0wLGM9MCx1PXRoaXM7aWYoIUFycmF5LmlzQXJyYXkodCkmJlwic3RyaW5nXCIhPXR5cGVvZiB0KXtpZihcIm51bWJlclwiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJnZXRUZXh0RGltZW5zaW9ucyBleHBlY3RzIHRleHQtcGFyYW1ldGVyIHRvIGJlIG9mIHR5cGUgU3RyaW5nIG9yIHR5cGUgTnVtYmVyIG9yIGFuIEFycmF5IG9mIFN0cmluZ3MuXCIpO3Q9U3RyaW5nKHQpfXZhciBoPWUubWF4V2lkdGg7aD4wP1wic3RyaW5nXCI9PXR5cGVvZiB0P3Q9dGhpcy5zcGxpdFRleHRUb1NpemUodCxoKTpcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCkmJih0PXQucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0LmNvbmNhdCh1LnNwbGl0VGV4dFRvU2l6ZShlLGgpKX0pLFtdKSk6dD1BcnJheS5pc0FycmF5KHQpP3Q6W3RdO2Zvcih2YXIgbD0wO2w8dC5sZW5ndGg7bCsrKW88KGM9dGhpcy5nZXRTdHJpbmdVbml0V2lkdGgodFtsXSx7Zm9udDpufSkqcikmJihvPWMpO3JldHVybiAwIT09byYmKHM9dC5sZW5ndGgpLHt3Om8vPWEsaDpNYXRoLm1heCgocypyKnRoaXMuZ2V0TGluZUhlaWdodEZhY3RvcigpLXIqKHRoaXMuZ2V0TGluZUhlaWdodEZhY3RvcigpLTEpKS9hLDApfX0sZS5jZWxsQWRkUGFnZT1mdW5jdGlvbigpe2kuY2FsbCh0aGlzKSx0aGlzLmFkZFBhZ2UoKTt2YXIgdD10aGlzLmludGVybmFsLl9fY2VsbF9fLm1hcmdpbnN8fHI7cmV0dXJuIHRoaXMuaW50ZXJuYWwuX19jZWxsX18ubGFzdENlbGw9bmV3IG8odC5sZWZ0LHQudG9wLHZvaWQgMCx2b2lkIDApLHRoaXMuaW50ZXJuYWwuX19jZWxsX18ucGFnZXMrPTEsdGhpc307dmFyIHM9ZS5jZWxsPWZ1bmN0aW9uKCl7dmFyIHQ7dD1hcmd1bWVudHNbMF1pbnN0YW5jZW9mIG8/YXJndW1lbnRzWzBdOm5ldyBvKGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0sYXJndW1lbnRzWzJdLGFyZ3VtZW50c1szXSxhcmd1bWVudHNbNF0sYXJndW1lbnRzWzVdKSxpLmNhbGwodGhpcyk7dmFyIGU9dGhpcy5pbnRlcm5hbC5fX2NlbGxfXy5sYXN0Q2VsbCxhPXRoaXMuaW50ZXJuYWwuX19jZWxsX18ucGFkZGluZyxzPXRoaXMuaW50ZXJuYWwuX19jZWxsX18ubWFyZ2luc3x8cixjPXRoaXMuaW50ZXJuYWwuX19jZWxsX18udGFibGVIZWFkZXJSb3csdT10aGlzLmludGVybmFsLl9fY2VsbF9fLnByaW50SGVhZGVycztyZXR1cm4gdm9pZCAwIT09ZS5saW5lTnVtYmVyJiYoZS5saW5lTnVtYmVyPT09dC5saW5lTnVtYmVyPyh0Lng9KGUueHx8MCkrKGUud2lkdGh8fDApLHQueT1lLnl8fDApOmUueStlLmhlaWdodCt0LmhlaWdodCtzLmJvdHRvbT50aGlzLmdldFBhZ2VIZWlnaHQoKT8odGhpcy5jZWxsQWRkUGFnZSgpLHQueT1zLnRvcCx1JiZjJiYodGhpcy5wcmludEhlYWRlclJvdyh0LmxpbmVOdW1iZXIsITApLHQueSs9Y1swXS5oZWlnaHQpKTp0Lnk9ZS55K2UuaGVpZ2h0fHx0LnkpLHZvaWQgMCE9PXQudGV4dFswXSYmKHRoaXMucmVjdCh0LngsdC55LHQud2lkdGgsdC5oZWlnaHQsITA9PT1uP1wiRkRcIjp2b2lkIDApLFwicmlnaHRcIj09PXQuYWxpZ24/dGhpcy50ZXh0KHQudGV4dCx0LngrdC53aWR0aC1hLHQueSthLHthbGlnbjpcInJpZ2h0XCIsYmFzZWxpbmU6XCJ0b3BcIn0pOlwiY2VudGVyXCI9PT10LmFsaWduP3RoaXMudGV4dCh0LnRleHQsdC54K3Qud2lkdGgvMix0LnkrYSx7YWxpZ246XCJjZW50ZXJcIixiYXNlbGluZTpcInRvcFwiLG1heFdpZHRoOnQud2lkdGgtYS1hfSk6dGhpcy50ZXh0KHQudGV4dCx0LngrYSx0LnkrYSx7YWxpZ246XCJsZWZ0XCIsYmFzZWxpbmU6XCJ0b3BcIixtYXhXaWR0aDp0LndpZHRoLWEtYX0pKSx0aGlzLmludGVybmFsLl9fY2VsbF9fLmxhc3RDZWxsPXQsdGhpc307ZS50YWJsZT1mdW5jdGlvbihlLG4sdSxoLGwpe2lmKGkuY2FsbCh0aGlzKSwhdSl0aHJvdyBuZXcgRXJyb3IoXCJObyBkYXRhIGZvciBQREYgdGFibGUuXCIpO3ZhciBmLGQscCxnLG09W10sdj1bXSxiPVtdLHk9e30sdz17fSxOPVtdLEw9W10sQT0obD1sfHx7fSkuYXV0b1NpemV8fCExLHg9ITEhPT1sLnByaW50SGVhZGVycyxTPWwuY3NzJiZ2b2lkIDAhPT1sLmNzc1tcImZvbnQtc2l6ZVwiXT8xNipsLmNzc1tcImZvbnQtc2l6ZVwiXTpsLmZvbnRTaXplfHwxMixfPWwubWFyZ2luc3x8T2JqZWN0LmFzc2lnbih7d2lkdGg6dGhpcy5nZXRQYWdlV2lkdGgoKX0sciksUD1cIm51bWJlclwiPT10eXBlb2YgbC5wYWRkaW5nP2wucGFkZGluZzozLGs9bC5oZWFkZXJCYWNrZ3JvdW5kQ29sb3J8fFwiI2M4YzhjOFwiLEk9bC5oZWFkZXJUZXh0Q29sb3J8fFwiIzAwMFwiO2lmKGEuY2FsbCh0aGlzKSx0aGlzLmludGVybmFsLl9fY2VsbF9fLnByaW50SGVhZGVycz14LHRoaXMuaW50ZXJuYWwuX19jZWxsX18ubWFyZ2lucz1fLHRoaXMuaW50ZXJuYWwuX19jZWxsX18udGFibGVfZm9udF9zaXplPVMsdGhpcy5pbnRlcm5hbC5fX2NlbGxfXy5wYWRkaW5nPVAsdGhpcy5pbnRlcm5hbC5fX2NlbGxfXy5oZWFkZXJCYWNrZ3JvdW5kQ29sb3I9ayx0aGlzLmludGVybmFsLl9fY2VsbF9fLmhlYWRlclRleHRDb2xvcj1JLHRoaXMuc2V0Rm9udFNpemUoUyksbnVsbD09aCl2PW09T2JqZWN0LmtleXModVswXSksYj1tLm1hcCgoZnVuY3Rpb24oKXtyZXR1cm5cImxlZnRcIn0pKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkoaCkmJlwib2JqZWN0XCI9PT10KGhbMF0pKWZvcihtPWgubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lfSkpLHY9aC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnByb21wdHx8dC5uYW1lfHxcIlwifSkpLGI9aC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFsaWdufHxcImxlZnRcIn0pKSxmPTA7ZjxoLmxlbmd0aDtmKz0xKXdbaFtmXS5uYW1lXT1oW2ZdLndpZHRoKigxOS4wNDk5NzYvMjUuNCk7ZWxzZSBBcnJheS5pc0FycmF5KGgpJiZcInN0cmluZ1wiPT10eXBlb2YgaFswXSYmKHY9bT1oLGI9bS5tYXAoKGZ1bmN0aW9uKCl7cmV0dXJuXCJsZWZ0XCJ9KSkpO2lmKEF8fEFycmF5LmlzQXJyYXkoaCkmJlwic3RyaW5nXCI9PXR5cGVvZiBoWzBdKWZvcihmPTA7ZjxtLmxlbmd0aDtmKz0xKXtmb3IoeVtnPW1bZl1dPXUubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdFtnXX0pKSx0aGlzLnNldEZvbnQodm9pZCAwLFwiYm9sZFwiKSxOLnB1c2godGhpcy5nZXRUZXh0RGltZW5zaW9ucyh2W2ZdLHtmb250U2l6ZTp0aGlzLmludGVybmFsLl9fY2VsbF9fLnRhYmxlX2ZvbnRfc2l6ZSxzY2FsZUZhY3Rvcjp0aGlzLmludGVybmFsLnNjYWxlRmFjdG9yfSkudyksZD15W2ddLHRoaXMuc2V0Rm9udCh2b2lkIDAsXCJub3JtYWxcIikscD0wO3A8ZC5sZW5ndGg7cCs9MSlOLnB1c2godGhpcy5nZXRUZXh0RGltZW5zaW9ucyhkW3BdLHtmb250U2l6ZTp0aGlzLmludGVybmFsLl9fY2VsbF9fLnRhYmxlX2ZvbnRfc2l6ZSxzY2FsZUZhY3Rvcjp0aGlzLmludGVybmFsLnNjYWxlRmFjdG9yfSkudyk7d1tnXT1NYXRoLm1heC5hcHBseShudWxsLE4pK1ArUCxOPVtdfWlmKHgpe3ZhciBGPXt9O2ZvcihmPTA7ZjxtLmxlbmd0aDtmKz0xKUZbbVtmXV09e30sRlttW2ZdXS50ZXh0PXZbZl0sRlttW2ZdXS5hbGlnbj1iW2ZdO3ZhciBDPWMuY2FsbCh0aGlzLEYsdyk7TD1tLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBvKGUsbix3W3RdLEMsRlt0XS50ZXh0LHZvaWQgMCxGW3RdLmFsaWduKX0pKSx0aGlzLnNldFRhYmxlSGVhZGVyUm93KEwpLHRoaXMucHJpbnRIZWFkZXJSb3coMSwhMSl9dmFyIGo9aC5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRbZS5uYW1lXT1lLmFsaWduLHR9KSx7fSk7Zm9yKGY9MDtmPHUubGVuZ3RoO2YrPTEpe1wicm93U3RhcnRcImluIGwmJmwucm93U3RhcnQgaW5zdGFuY2VvZiBGdW5jdGlvbiYmbC5yb3dTdGFydCh7cm93OmYsZGF0YTp1W2ZdfSx0aGlzKTt2YXIgTz1jLmNhbGwodGhpcyx1W2ZdLHcpO2ZvcihwPTA7cDxtLmxlbmd0aDtwKz0xKXt2YXIgQj11W2ZdW21bcF1dO1wiY2VsbFN0YXJ0XCJpbiBsJiZsLmNlbGxTdGFydCBpbnN0YW5jZW9mIEZ1bmN0aW9uJiZsLmNlbGxTdGFydCh7cm93OmYsY29sOnAsZGF0YTpCfSx0aGlzKSxzLmNhbGwodGhpcyxuZXcgbyhlLG4sd1ttW3BdXSxPLEIsZisyLGpbbVtwXV0pKX19cmV0dXJuIHRoaXMuaW50ZXJuYWwuX19jZWxsX18udGFibGVfeD1lLHRoaXMuaW50ZXJuYWwuX19jZWxsX18udGFibGVfeT1uLHRoaXN9O3ZhciBjPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcy5pbnRlcm5hbC5fX2NlbGxfXy5wYWRkaW5nLG49dGhpcy5pbnRlcm5hbC5fX2NlbGxfXy50YWJsZV9mb250X3NpemUsaT10aGlzLmludGVybmFsLnNjYWxlRmFjdG9yO3JldHVybiBPYmplY3Qua2V5cyh0KS5tYXAoKGZ1bmN0aW9uKG4pe3ZhciBpPXRbbl07cmV0dXJuIHRoaXMuc3BsaXRUZXh0VG9TaXplKGkuaGFzT3duUHJvcGVydHkoXCJ0ZXh0XCIpP2kudGV4dDppLGVbbl0tci1yKX0pLHRoaXMpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0TGluZUhlaWdodEZhY3RvcigpKnQubGVuZ3RoKm4vaStyK3J9KSx0aGlzKS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGgubWF4KHQsZSl9KSwwKX07ZS5zZXRUYWJsZUhlYWRlclJvdz1mdW5jdGlvbih0KXtpLmNhbGwodGhpcyksdGhpcy5pbnRlcm5hbC5fX2NlbGxfXy50YWJsZUhlYWRlclJvdz10fSxlLnByaW50SGVhZGVyUm93PWZ1bmN0aW9uKHQsZSl7aWYoaS5jYWxsKHRoaXMpLCF0aGlzLmludGVybmFsLl9fY2VsbF9fLnRhYmxlSGVhZGVyUm93KXRocm93IG5ldyBFcnJvcihcIlByb3BlcnR5IHRhYmxlSGVhZGVyUm93IGRvZXMgbm90IGV4aXN0LlwiKTt2YXIgcjtpZihuPSEwLFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuaW50ZXJuYWwuX19jZWxsX18uaGVhZGVyRnVuY3Rpb24pe3ZhciBhPXRoaXMuaW50ZXJuYWwuX19jZWxsX18uaGVhZGVyRnVuY3Rpb24odGhpcyx0aGlzLmludGVybmFsLl9fY2VsbF9fLnBhZ2VzKTt0aGlzLmludGVybmFsLl9fY2VsbF9fLmxhc3RDZWxsPW5ldyBvKGFbMF0sYVsxXSxhWzJdLGFbM10sdm9pZCAwLC0xKX10aGlzLnNldEZvbnQodm9pZCAwLFwiYm9sZFwiKTtmb3IodmFyIGM9W10sdT0wO3U8dGhpcy5pbnRlcm5hbC5fX2NlbGxfXy50YWJsZUhlYWRlclJvdy5sZW5ndGg7dSs9MSl7cj10aGlzLmludGVybmFsLl9fY2VsbF9fLnRhYmxlSGVhZGVyUm93W3VdLmNsb25lKCksZSYmKHIueT10aGlzLmludGVybmFsLl9fY2VsbF9fLm1hcmdpbnMudG9wfHwwLGMucHVzaChyKSksci5saW5lTnVtYmVyPXQ7dmFyIGg9dGhpcy5nZXRUZXh0Q29sb3IoKTt0aGlzLnNldFRleHRDb2xvcih0aGlzLmludGVybmFsLl9fY2VsbF9fLmhlYWRlclRleHRDb2xvciksdGhpcy5zZXRGaWxsQ29sb3IodGhpcy5pbnRlcm5hbC5fX2NlbGxfXy5oZWFkZXJCYWNrZ3JvdW5kQ29sb3IpLHMuY2FsbCh0aGlzLHIpLHRoaXMuc2V0VGV4dENvbG9yKGgpfWMubGVuZ3RoPjAmJnRoaXMuc2V0VGFibGVIZWFkZXJSb3coYyksdGhpcy5zZXRGb250KHZvaWQgMCxcIm5vcm1hbFwiKSxuPSExfX0oRS5BUEkpO3ZhciBQdD17aXRhbGljOltcIml0YWxpY1wiLFwib2JsaXF1ZVwiLFwibm9ybWFsXCJdLG9ibGlxdWU6W1wib2JsaXF1ZVwiLFwiaXRhbGljXCIsXCJub3JtYWxcIl0sbm9ybWFsOltcIm5vcm1hbFwiLFwib2JsaXF1ZVwiLFwiaXRhbGljXCJdfSxrdD1bXCJ1bHRyYS1jb25kZW5zZWRcIixcImV4dHJhLWNvbmRlbnNlZFwiLFwiY29uZGVuc2VkXCIsXCJzZW1pLWNvbmRlbnNlZFwiLFwibm9ybWFsXCIsXCJzZW1pLWV4cGFuZGVkXCIsXCJleHBhbmRlZFwiLFwiZXh0cmEtZXhwYW5kZWRcIixcInVsdHJhLWV4cGFuZGVkXCJdLEl0PV90KGt0KSxGdD1bMTAwLDIwMCwzMDAsNDAwLDUwMCw2MDAsNzAwLDgwMCw5MDBdLEN0PV90KEZ0KTtmdW5jdGlvbiBqdCh0KXt2YXIgZT10LmZhbWlseS5yZXBsYWNlKC9cInwnL2csXCJcIikudG9Mb3dlckNhc2UoKSxyPWZ1bmN0aW9uKHQpe3JldHVybiBQdFt0PXR8fFwibm9ybWFsXCJdP3Q6XCJub3JtYWxcIn0odC5zdHlsZSksbj1mdW5jdGlvbih0KXtpZighdClyZXR1cm4gNDAwO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXJldHVybiB0Pj0xMDAmJnQ8PTkwMCYmdCUxMDA9PTA/dDo0MDA7aWYoL15cXGQwMCQvLnRlc3QodCkpcmV0dXJuIHBhcnNlSW50KHQpO3N3aXRjaCh0KXtjYXNlXCJib2xkXCI6cmV0dXJuIDcwMDtjYXNlXCJub3JtYWxcIjpkZWZhdWx0OnJldHVybiA0MDB9fSh0LndlaWdodCksaT1mdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgSXRbdD10fHxcIm5vcm1hbFwiXT90Olwibm9ybWFsXCJ9KHQuc3RyZXRjaCk7cmV0dXJue2ZhbWlseTplLHN0eWxlOnIsd2VpZ2h0Om4sc3RyZXRjaDppLHNyYzp0LnNyY3x8W10scmVmOnQucmVmfHx7bmFtZTplLHN0eWxlOltpLHIsbl0uam9pbihcIiBcIil9fX1mdW5jdGlvbiBPdCh0LGUscixuKXt2YXIgaTtmb3IoaT1yO2k+PTAmJmk8ZS5sZW5ndGg7aSs9bilpZih0W2VbaV1dKXJldHVybiB0W2VbaV1dO2ZvcihpPXI7aT49MCYmaTxlLmxlbmd0aDtpLT1uKWlmKHRbZVtpXV0pcmV0dXJuIHRbZVtpXV19dmFyIEJ0PXtcInNhbnMtc2VyaWZcIjpcImhlbHZldGljYVwiLGZpeGVkOlwiY291cmllclwiLG1vbm9zcGFjZTpcImNvdXJpZXJcIix0ZXJtaW5hbDpcImNvdXJpZXJcIixjdXJzaXZlOlwidGltZXNcIixmYW50YXN5OlwidGltZXNcIixzZXJpZjpcInRpbWVzXCJ9LE10PXtjYXB0aW9uOlwidGltZXNcIixpY29uOlwidGltZXNcIixtZW51OlwidGltZXNcIixcIm1lc3NhZ2UtYm94XCI6XCJ0aW1lc1wiLFwic21hbGwtY2FwdGlvblwiOlwidGltZXNcIixcInN0YXR1cy1iYXJcIjpcInRpbWVzXCJ9O2Z1bmN0aW9uIEV0KHQpe3JldHVyblt0LnN0cmV0Y2gsdC5zdHlsZSx0LndlaWdodCx0LmZhbWlseV0uam9pbihcIiBcIil9ZnVuY3Rpb24gcXQodCxlLHIpe2Zvcih2YXIgbj0ocj1yfHx7fSkuZGVmYXVsdEZvbnRGYW1pbHl8fFwidGltZXNcIixpPU9iamVjdC5hc3NpZ24oe30sQnQsci5nZW5lcmljRm9udEZhbWlsaWVzfHx7fSksYT1udWxsLG89bnVsbCxzPTA7czxlLmxlbmd0aDsrK3MpaWYoaVsoYT1qdChlW3NdKSkuZmFtaWx5XSYmKGEuZmFtaWx5PWlbYS5mYW1pbHldKSx0Lmhhc093blByb3BlcnR5KGEuZmFtaWx5KSl7bz10W2EuZmFtaWx5XTticmVha31pZighKG89b3x8dFtuXSkpdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYSBmb250LWZhbWlseSBmb3IgdGhlIHJ1bGUgJ1wiK0V0KGEpK1wiJyBhbmQgZGVmYXVsdCBmYW1pbHkgJ1wiK24rXCInLlwiKTtpZihvPWZ1bmN0aW9uKHQsZSl7aWYoZVt0XSlyZXR1cm4gZVt0XTt2YXIgcj1JdFt0XSxuPXI8PUl0Lm5vcm1hbD8tMToxLGk9T3QoZSxrdCxyLG4pO2lmKCFpKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgbWF0Y2hpbmcgZm9udC1zdHJldGNoIHZhbHVlIGZvciBcIit0KTtyZXR1cm4gaX0oYS5zdHJldGNoLG8pLG89ZnVuY3Rpb24odCxlKXtpZihlW3RdKXJldHVybiBlW3RdO2Zvcih2YXIgcj1QdFt0XSxuPTA7bjxyLmxlbmd0aDsrK24paWYoZVtyW25dXSlyZXR1cm4gZVtyW25dXTt0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIGZvbnQtc3R5bGUgZm9yIFwiK3QpfShhLnN0eWxlLG8pLCEobz1mdW5jdGlvbih0LGUpe2lmKGVbdF0pcmV0dXJuIGVbdF07aWYoNDAwPT09dCYmZVs1MDBdKXJldHVybiBlWzUwMF07aWYoNTAwPT09dCYmZVs0MDBdKXJldHVybiBlWzQwMF07dmFyIHI9Q3RbdF0sbj1PdChlLEZ0LHIsdDw0MDA/LTE6MSk7aWYoIW4pdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyBmb250LXdlaWdodCBmb3IgdmFsdWUgXCIrdCk7cmV0dXJuIG59KGEud2VpZ2h0LG8pKSl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmVzb2x2ZSBhIGZvbnQgZm9yIHRoZSBydWxlICdcIitFdChhKStcIicuXCIpO3JldHVybiBvfWZ1bmN0aW9uIER0KHQpe3JldHVybiB0LnRyaW1MZWZ0KCl9ZnVuY3Rpb24gUnQodCxlKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoOyl7aWYodC5jaGFyQXQocik9PT1lKXJldHVyblt0LnN1YnN0cmluZygwLHIpLHQuc3Vic3RyaW5nKHIrMSldO3IrPTF9cmV0dXJuIG51bGx9ZnVuY3Rpb24gVHQodCl7dmFyIGU9dC5tYXRjaCgvXigtW2Etel9dfFthLXpfXSlbYS16MC05Xy1dKi9pKTtyZXR1cm4gbnVsbD09PWU/bnVsbDpbZVswXSx0LnN1YnN0cmluZyhlWzBdLmxlbmd0aCldfXZhciBVdCx6dCxIdCxXdD1bXCJ0aW1lc1wiXTshZnVuY3Rpb24oZSl7dmFyIHIsbixpLG8scyxjLHUsaCxsLGQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9dHx8e30sdGhpcy5pc1N0cm9rZVRyYW5zcGFyZW50PXQuaXNTdHJva2VUcmFuc3BhcmVudHx8ITEsdGhpcy5zdHJva2VPcGFjaXR5PXQuc3Ryb2tlT3BhY2l0eXx8MSx0aGlzLnN0cm9rZVN0eWxlPXQuc3Ryb2tlU3R5bGV8fFwiIzAwMDAwMFwiLHRoaXMuZmlsbFN0eWxlPXQuZmlsbFN0eWxlfHxcIiMwMDAwMDBcIix0aGlzLmlzRmlsbFRyYW5zcGFyZW50PXQuaXNGaWxsVHJhbnNwYXJlbnR8fCExLHRoaXMuZmlsbE9wYWNpdHk9dC5maWxsT3BhY2l0eXx8MSx0aGlzLmZvbnQ9dC5mb250fHxcIjEwcHggc2Fucy1zZXJpZlwiLHRoaXMudGV4dEJhc2VsaW5lPXQudGV4dEJhc2VsaW5lfHxcImFscGhhYmV0aWNcIix0aGlzLnRleHRBbGlnbj10LnRleHRBbGlnbnx8XCJsZWZ0XCIsdGhpcy5saW5lV2lkdGg9dC5saW5lV2lkdGh8fDEsdGhpcy5saW5lSm9pbj10LmxpbmVKb2lufHxcIm1pdGVyXCIsdGhpcy5saW5lQ2FwPXQubGluZUNhcHx8XCJidXR0XCIsdGhpcy5wYXRoPXQucGF0aHx8W10sdGhpcy50cmFuc2Zvcm09dm9pZCAwIT09dC50cmFuc2Zvcm0/dC50cmFuc2Zvcm0uY2xvbmUoKTpuZXcgaCx0aGlzLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj10Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbnx8XCJub3JtYWxcIix0aGlzLmdsb2JhbEFscGhhPXQuZ2xvYmFsQWxwaGF8fDEsdGhpcy5jbGlwX3BhdGg9dC5jbGlwX3BhdGh8fFtdLHRoaXMuY3VycmVudFBvaW50PXQuY3VycmVudFBvaW50fHxuZXcgYyx0aGlzLm1pdGVyTGltaXQ9dC5taXRlckxpbWl0fHwxMCx0aGlzLmxhc3RQb2ludD10Lmxhc3RQb2ludHx8bmV3IGMsdGhpcy5saW5lRGFzaE9mZnNldD10LmxpbmVEYXNoT2Zmc2V0fHwwLHRoaXMubGluZURhc2g9dC5saW5lRGFzaHx8W10sdGhpcy5tYXJnaW49dC5tYXJnaW58fFswLDAsMCwwXSx0aGlzLnByZXZQYWdlTGFzdEVsZW1PZmZzZXQ9dC5wcmV2UGFnZUxhc3RFbGVtT2Zmc2V0fHwwLHRoaXMuaWdub3JlQ2xlYXJSZWN0PVwiYm9vbGVhblwiIT10eXBlb2YgdC5pZ25vcmVDbGVhclJlY3R8fHQuaWdub3JlQ2xlYXJSZWN0LHRoaXN9O2UuZXZlbnRzLnB1c2goW1wiaW5pdGlhbGl6ZWRcIixmdW5jdGlvbigpe3RoaXMuY29udGV4dDJkPW5ldyBwKHRoaXMpLHI9dGhpcy5pbnRlcm5hbC5mMixuPXRoaXMuaW50ZXJuYWwuZ2V0Q29vcmRpbmF0ZVN0cmluZyxpPXRoaXMuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlU3RyaW5nLG89dGhpcy5pbnRlcm5hbC5nZXRIb3Jpem9udGFsQ29vcmRpbmF0ZSxzPXRoaXMuaW50ZXJuYWwuZ2V0VmVydGljYWxDb29yZGluYXRlLGM9dGhpcy5pbnRlcm5hbC5Qb2ludCx1PXRoaXMuaW50ZXJuYWwuUmVjdGFuZ2xlLGg9dGhpcy5pbnRlcm5hbC5NYXRyaXgsbD1uZXcgZH1dKTt2YXIgcD1mdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImNhbnZhc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm57cGFyZW50Tm9kZTohMSxzdHlsZTohMX19fSk7dmFyIGU9dDtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBkZlwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZX19KTt2YXIgcj0hMTtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInBhZ2VXcmFwWEVuYWJsZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHNldDpmdW5jdGlvbih0KXtyPUJvb2xlYW4odCl9fSk7dmFyIG49ITE7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYWdlV3JhcFlFbmFibGVkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBufSxzZXQ6ZnVuY3Rpb24odCl7bj1Cb29sZWFuKHQpfX0pO3ZhciBpPTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwb3NYXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBpfSxzZXQ6ZnVuY3Rpb24odCl7aXNOYU4odCl8fChpPXQpfX0pO3ZhciBhPTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwb3NZXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBhfSxzZXQ6ZnVuY3Rpb24odCl7aXNOYU4odCl8fChhPXQpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibWFyZ2luXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBsLm1hcmdpbn0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBlO1wibnVtYmVyXCI9PXR5cGVvZiB0P2U9W3QsdCx0LHRdOigoZT1uZXcgQXJyYXkoNCkpWzBdPXRbMF0sZVsxXT10Lmxlbmd0aD49Mj90WzFdOmVbMF0sZVsyXT10Lmxlbmd0aD49Mz90WzJdOmVbMF0sZVszXT10Lmxlbmd0aD49ND90WzNdOmVbMV0pLGwubWFyZ2luPWV9fSk7dmFyIG89ITE7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJhdXRvUGFnaW5nXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBvfSxzZXQ6ZnVuY3Rpb24odCl7bz10fX0pO3ZhciBzPTA7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsYXN0QnJlYWtcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHN9LHNldDpmdW5jdGlvbih0KXtzPXR9fSk7dmFyIGM9W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJwYWdlQnJlYWtzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBjfSxzZXQ6ZnVuY3Rpb24odCl7Yz10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiY3R4XCIse2dldDpmdW5jdGlvbigpe3JldHVybiBsfSxzZXQ6ZnVuY3Rpb24odCl7dCBpbnN0YW5jZW9mIGQmJihsPXQpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGF0aFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbC5wYXRofSxzZXQ6ZnVuY3Rpb24odCl7bC5wYXRoPXR9fSk7dmFyIHU9W107T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJjdHhTdGFja1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdX0sc2V0OmZ1bmN0aW9uKHQpe3U9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImZpbGxTdHlsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguZmlsbFN0eWxlfSxzZXQ6ZnVuY3Rpb24odCl7dmFyIGU7ZT1nKHQpLHRoaXMuY3R4LmZpbGxTdHlsZT1lLnN0eWxlLHRoaXMuY3R4LmlzRmlsbFRyYW5zcGFyZW50PTA9PT1lLmEsdGhpcy5jdHguZmlsbE9wYWNpdHk9ZS5hLHRoaXMucGRmLnNldEZpbGxDb2xvcihlLnIsZS5nLGUuYix7YTplLmF9KSx0aGlzLnBkZi5zZXRUZXh0Q29sb3IoZS5yLGUuZyxlLmIse2E6ZS5hfSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJzdHJva2VTdHlsZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguc3Ryb2tlU3R5bGV9LHNldDpmdW5jdGlvbih0KXt2YXIgZT1nKHQpO3RoaXMuY3R4LnN0cm9rZVN0eWxlPWUuc3R5bGUsdGhpcy5jdHguaXNTdHJva2VUcmFuc3BhcmVudD0wPT09ZS5hLHRoaXMuY3R4LnN0cm9rZU9wYWNpdHk9ZS5hLDA9PT1lLmE/dGhpcy5wZGYuc2V0RHJhd0NvbG9yKDI1NSwyNTUsMjU1KTooZS5hLHRoaXMucGRmLnNldERyYXdDb2xvcihlLnIsZS5nLGUuYikpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGluZUNhcFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHgubGluZUNhcH0sc2V0OmZ1bmN0aW9uKHQpey0xIT09W1wiYnV0dFwiLFwicm91bmRcIixcInNxdWFyZVwiXS5pbmRleE9mKHQpJiYodGhpcy5jdHgubGluZUNhcD10LHRoaXMucGRmLnNldExpbmVDYXAodCkpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGluZVdpZHRoXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmN0eC5saW5lV2lkdGh9LHNldDpmdW5jdGlvbih0KXtpc05hTih0KXx8KHRoaXMuY3R4LmxpbmVXaWR0aD10LHRoaXMucGRmLnNldExpbmVXaWR0aCh0KSl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsaW5lSm9pblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHgubGluZUpvaW59LHNldDpmdW5jdGlvbih0KXstMSE9PVtcImJldmVsXCIsXCJyb3VuZFwiLFwibWl0ZXJcIl0uaW5kZXhPZih0KSYmKHRoaXMuY3R4LmxpbmVKb2luPXQsdGhpcy5wZGYuc2V0TGluZUpvaW4odCkpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibWl0ZXJMaW1pdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHgubWl0ZXJMaW1pdH0sc2V0OmZ1bmN0aW9uKHQpe2lzTmFOKHQpfHwodGhpcy5jdHgubWl0ZXJMaW1pdD10LHRoaXMucGRmLnNldE1pdGVyTGltaXQodCkpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwidGV4dEJhc2VsaW5lXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmN0eC50ZXh0QmFzZWxpbmV9LHNldDpmdW5jdGlvbih0KXt0aGlzLmN0eC50ZXh0QmFzZWxpbmU9dH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInRleHRBbGlnblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHgudGV4dEFsaWdufSxzZXQ6ZnVuY3Rpb24odCl7LTEhPT1bXCJyaWdodFwiLFwiZW5kXCIsXCJjZW50ZXJcIixcImxlZnRcIixcInN0YXJ0XCJdLmluZGV4T2YodCkmJih0aGlzLmN0eC50ZXh0QWxpZ249dCl9fSk7dmFyIGg9bnVsbDtmdW5jdGlvbiBmKHQsZSl7aWYobnVsbD09PWgpe3ZhciByPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO3JldHVybiBPYmplY3Qua2V5cyh0KS5mb3JFYWNoKChmdW5jdGlvbihyKXt0W3JdLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPW51bGw7c3dpdGNoKHQpe2Nhc2VcImJvbGRcIjpuPXtmYW1pbHk6cix3ZWlnaHQ6XCJib2xkXCJ9O2JyZWFrO2Nhc2VcIml0YWxpY1wiOm49e2ZhbWlseTpyLHN0eWxlOlwiaXRhbGljXCJ9O2JyZWFrO2Nhc2VcImJvbGRpdGFsaWNcIjpuPXtmYW1pbHk6cix3ZWlnaHQ6XCJib2xkXCIsc3R5bGU6XCJpdGFsaWNcIn07YnJlYWs7Y2FzZVwiXCI6Y2FzZVwibm9ybWFsXCI6bj17ZmFtaWx5OnJ9fW51bGwhPT1uJiYobi5yZWY9e25hbWU6cixzdHlsZTp0fSxlLnB1c2gobikpfSkpfSkpLGV9KHQuZ2V0Rm9udExpc3QoKSk7aD1mdW5jdGlvbih0KXtmb3IodmFyIGU9e30scj0wO3I8dC5sZW5ndGg7KytyKXt2YXIgbj1qdCh0W3JdKSxpPW4uZmFtaWx5LGE9bi5zdHJldGNoLG89bi5zdHlsZSxzPW4ud2VpZ2h0O2VbaV09ZVtpXXx8e30sZVtpXVthXT1lW2ldW2FdfHx7fSxlW2ldW2FdW29dPWVbaV1bYV1bb118fHt9LGVbaV1bYV1bb11bc109bn1yZXR1cm4gZX0oci5jb25jYXQoZSkpfXJldHVybiBofXZhciBwPW51bGw7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJmb250RmFjZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9LHNldDpmdW5jdGlvbih0KXtoPW51bGwscD10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiZm9udFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguZm9udH0sc2V0OmZ1bmN0aW9uKHQpe3ZhciBlO2lmKHRoaXMuY3R4LmZvbnQ9dCxudWxsIT09KGU9L15cXHMqKD89KD86KD86Wy1hLXpdK1xccyopezAsMn0oaXRhbGljfG9ibGlxdWUpKT8pKD89KD86KD86Wy1hLXpdK1xccyopezAsMn0oc21hbGwtY2FwcykpPykoPz0oPzooPzpbLWEtel0rXFxzKil7MCwyfShib2xkKD86ZXIpP3xsaWdodGVyfFsxLTldMDApKT8pKD86KD86bm9ybWFsfFxcMXxcXDJ8XFwzKVxccyopezAsM30oKD86eHg/LSk/KD86c21hbGx8bGFyZ2UpfG1lZGl1bXxzbWFsbGVyfGxhcmdlcnxbLlxcZF0rKD86XFwlfGlufFtjZW1dbXxleHxwW2N0eF0pKSg/OlxccypcXC9cXHMqKG5vcm1hbHxbLlxcZF0rKD86XFwlfGlufFtjZW1dbXxleHxwW2N0eF0pKSk/XFxzKihbLV8sXFxcIlxcJ1xcc2Etel0rPylcXHMqJC9pLmV4ZWModCkpKXt2YXIgcj1lWzFdLG49KGVbMl0sZVszXSksaT1lWzRdLGE9KGVbNV0sZVs2XSksbz0vXihbLlxcZF0rKSgoPzolfGlufFtjZW1dbXxleHxwW2N0eF0pKSQvaS5leGVjKGkpWzJdO2k9XCJweFwiPT09bz9NYXRoLmZsb29yKHBhcnNlRmxvYXQoaSkqdGhpcy5wZGYuaW50ZXJuYWwuc2NhbGVGYWN0b3IpOlwiZW1cIj09PW8/TWF0aC5mbG9vcihwYXJzZUZsb2F0KGkpKnRoaXMucGRmLmdldEZvbnRTaXplKCkpOk1hdGguZmxvb3IocGFyc2VGbG9hdChpKSp0aGlzLnBkZi5pbnRlcm5hbC5zY2FsZUZhY3RvciksdGhpcy5wZGYuc2V0Rm9udFNpemUoaSk7dmFyIHM9ZnVuY3Rpb24odCl7dmFyIGUscixuPVtdLGk9dC50cmltKCk7aWYoXCJcIj09PWkpcmV0dXJuIFd0O2lmKGkgaW4gTXQpcmV0dXJuW010W2ldXTtmb3IoO1wiXCIhPT1pOyl7c3dpdGNoKHI9bnVsbCxlPShpPUR0KGkpKS5jaGFyQXQoMCkpe2Nhc2UnXCInOmNhc2VcIidcIjpyPVJ0KGkuc3Vic3RyaW5nKDEpLGUpO2JyZWFrO2RlZmF1bHQ6cj1UdChpKX1pZihudWxsPT09cilyZXR1cm4gV3Q7aWYobi5wdXNoKHJbMF0pLFwiXCIhPT0oaT1EdChyWzFdKSkmJlwiLFwiIT09aS5jaGFyQXQoMCkpcmV0dXJuIFd0O2k9aS5yZXBsYWNlKC9eLC8sXCJcIil9cmV0dXJuIG59KGEpO2lmKHRoaXMuZm9udEZhY2VzKXt2YXIgYz1xdChmKHRoaXMucGRmLHRoaXMuZm9udEZhY2VzKSxzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue2ZhbWlseTp0LHN0cmV0Y2g6XCJub3JtYWxcIix3ZWlnaHQ6bixzdHlsZTpyfX0pKSk7dGhpcy5wZGYuc2V0Rm9udChjLnJlZi5uYW1lLGMucmVmLnN0eWxlKX1lbHNle3ZhciB1PVwiXCI7KFwiYm9sZFwiPT09bnx8cGFyc2VJbnQobiwxMCk+PTcwMHx8XCJib2xkXCI9PT1yKSYmKHU9XCJib2xkXCIpLFwiaXRhbGljXCI9PT1yJiYodSs9XCJpdGFsaWNcIiksMD09PXUubGVuZ3RoJiYodT1cIm5vcm1hbFwiKTtmb3IodmFyIGg9XCJcIixsPXthcmlhbDpcIkhlbHZldGljYVwiLEFyaWFsOlwiSGVsdmV0aWNhXCIsdmVyZGFuYTpcIkhlbHZldGljYVwiLFZlcmRhbmE6XCJIZWx2ZXRpY2FcIixoZWx2ZXRpY2E6XCJIZWx2ZXRpY2FcIixIZWx2ZXRpY2E6XCJIZWx2ZXRpY2FcIixcInNhbnMtc2VyaWZcIjpcIkhlbHZldGljYVwiLGZpeGVkOlwiQ291cmllclwiLG1vbm9zcGFjZTpcIkNvdXJpZXJcIix0ZXJtaW5hbDpcIkNvdXJpZXJcIixjdXJzaXZlOlwiVGltZXNcIixmYW50YXN5OlwiVGltZXNcIixzZXJpZjpcIlRpbWVzXCJ9LGQ9MDtkPHMubGVuZ3RoO2QrKyl7aWYodm9pZCAwIT09dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udChzW2RdLHUse25vRmFsbGJhY2s6ITAsZGlzYWJsZVdhcm5pbmc6ITB9KSl7aD1zW2RdO2JyZWFrfWlmKFwiYm9sZGl0YWxpY1wiPT09dSYmdm9pZCAwIT09dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udChzW2RdLFwiYm9sZFwiLHtub0ZhbGxiYWNrOiEwLGRpc2FibGVXYXJuaW5nOiEwfSkpaD1zW2RdLHU9XCJib2xkXCI7ZWxzZSBpZih2b2lkIDAhPT10aGlzLnBkZi5pbnRlcm5hbC5nZXRGb250KHNbZF0sXCJub3JtYWxcIix7bm9GYWxsYmFjazohMCxkaXNhYmxlV2FybmluZzohMH0pKXtoPXNbZF0sdT1cIm5vcm1hbFwiO2JyZWFrfX1pZihcIlwiPT09aClmb3IodmFyIHA9MDtwPHMubGVuZ3RoO3ArKylpZihsW3NbcF1dKXtoPWxbc1twXV07YnJlYWt9aD1cIlwiPT09aD9cIlRpbWVzXCI6aCx0aGlzLnBkZi5zZXRGb250KGgsdSl9fX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvblwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9ufSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPXR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJnbG9iYWxBbHBoYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguZ2xvYmFsQWxwaGF9LHNldDpmdW5jdGlvbih0KXt0aGlzLmN0eC5nbG9iYWxBbHBoYT10fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwibGluZURhc2hPZmZzZXRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4LmxpbmVEYXNoT2Zmc2V0fSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5jdHgubGluZURhc2hPZmZzZXQ9dCxULmNhbGwodGhpcyl9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsXCJsaW5lRGFzaFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHgubGluZURhc2h9LHNldDpmdW5jdGlvbih0KXt0aGlzLmN0eC5saW5lRGFzaD10LFQuY2FsbCh0aGlzKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcImlnbm9yZUNsZWFyUmVjdFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jdHguaWdub3JlQ2xlYXJSZWN0fSxzZXQ6ZnVuY3Rpb24odCl7dGhpcy5jdHguaWdub3JlQ2xlYXJSZWN0PUJvb2xlYW4odCl9fSl9O3AucHJvdG90eXBlLnNldExpbmVEYXNoPWZ1bmN0aW9uKHQpe3RoaXMubGluZURhc2g9dH0scC5wcm90b3R5cGUuZ2V0TGluZURhc2g9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5saW5lRGFzaC5sZW5ndGglMj90aGlzLmxpbmVEYXNoLmNvbmNhdCh0aGlzLmxpbmVEYXNoKTp0aGlzLmxpbmVEYXNoLnNsaWNlKCl9LHAucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24oKXtBLmNhbGwodGhpcyxcImZpbGxcIiwhMSl9LHAucHJvdG90eXBlLnN0cm9rZT1mdW5jdGlvbigpe0EuY2FsbCh0aGlzLFwic3Ryb2tlXCIsITEpfSxwLnByb3RvdHlwZS5iZWdpblBhdGg9ZnVuY3Rpb24oKXt0aGlzLnBhdGg9W3t0eXBlOlwiYmVnaW5cIn1dfSxwLnByb3RvdHlwZS5tb3ZlVG89ZnVuY3Rpb24odCxlKXtpZihpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgYS5lcnJvcihcImpzUERGLmNvbnRleHQyZC5tb3ZlVG86IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLm1vdmVUb1wiKTt2YXIgcj10aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHlUb1BvaW50KG5ldyBjKHQsZSkpO3RoaXMucGF0aC5wdXNoKHt0eXBlOlwibXRcIix4OnIueCx5OnIueX0pLHRoaXMuY3R4Lmxhc3RQb2ludD1uZXcgYyh0LGUpfSxwLnByb3RvdHlwZS5jbG9zZVBhdGg9ZnVuY3Rpb24oKXt2YXIgZT1uZXcgYygwLDApLHI9MDtmb3Iocj10aGlzLnBhdGgubGVuZ3RoLTE7LTEhPT1yO3ItLSlpZihcImJlZ2luXCI9PT10aGlzLnBhdGhbcl0udHlwZSYmXCJvYmplY3RcIj09PXQodGhpcy5wYXRoW3IrMV0pJiZcIm51bWJlclwiPT10eXBlb2YgdGhpcy5wYXRoW3IrMV0ueCl7ZT1uZXcgYyh0aGlzLnBhdGhbcisxXS54LHRoaXMucGF0aFtyKzFdLnkpO2JyZWFrfXRoaXMucGF0aC5wdXNoKHt0eXBlOlwiY2xvc2VcIn0pLHRoaXMuY3R4Lmxhc3RQb2ludD1uZXcgYyhlLngsZS55KX0scC5wcm90b3R5cGUubGluZVRvPWZ1bmN0aW9uKHQsZSl7aWYoaXNOYU4odCl8fGlzTmFOKGUpKXRocm93IGEuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQubGluZVRvOiBJbnZhbGlkIGFyZ3VtZW50c1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNvbnRleHQyZC5saW5lVG9cIik7dmFyIHI9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgYyh0LGUpKTt0aGlzLnBhdGgucHVzaCh7dHlwZTpcImx0XCIseDpyLngseTpyLnl9KSx0aGlzLmN0eC5sYXN0UG9pbnQ9bmV3IGMoci54LHIueSl9LHAucHJvdG90eXBlLmNsaXA9ZnVuY3Rpb24oKXt0aGlzLmN0eC5jbGlwX3BhdGg9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBhdGgpKSxBLmNhbGwodGhpcyxudWxsLCEwKX0scC5wcm90b3R5cGUucXVhZHJhdGljQ3VydmVUbz1mdW5jdGlvbih0LGUscixuKXtpZihpc05hTihyKXx8aXNOYU4obil8fGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBhLmVycm9yKFwianNQREYuY29udGV4dDJkLnF1YWRyYXRpY0N1cnZlVG86IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLnF1YWRyYXRpY0N1cnZlVG9cIik7dmFyIGk9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgYyhyLG4pKSxvPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGModCxlKSk7dGhpcy5wYXRoLnB1c2goe3R5cGU6XCJxY3RcIix4MTpvLngseTE6by55LHg6aS54LHk6aS55fSksdGhpcy5jdHgubGFzdFBvaW50PW5ldyBjKGkueCxpLnkpfSxwLnByb3RvdHlwZS5iZXppZXJDdXJ2ZVRvPWZ1bmN0aW9uKHQsZSxyLG4saSxvKXtpZihpc05hTihpKXx8aXNOYU4obyl8fGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4ocil8fGlzTmFOKG4pKXRocm93IGEuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQuYmV6aWVyQ3VydmVUbzogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuYmV6aWVyQ3VydmVUb1wiKTt2YXIgcz10aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHlUb1BvaW50KG5ldyBjKGksbykpLHU9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgYyh0LGUpKSxoPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGMocixuKSk7dGhpcy5wYXRoLnB1c2goe3R5cGU6XCJiY3RcIix4MTp1LngseTE6dS55LHgyOmgueCx5MjpoLnkseDpzLngseTpzLnl9KSx0aGlzLmN0eC5sYXN0UG9pbnQ9bmV3IGMocy54LHMueSl9LHAucHJvdG90eXBlLmFyYz1mdW5jdGlvbih0LGUscixuLGksbyl7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihyKXx8aXNOYU4obil8fGlzTmFOKGkpKXRocm93IGEuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQuYXJjOiBJbnZhbGlkIGFyZ3VtZW50c1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNvbnRleHQyZC5hcmNcIik7aWYobz1Cb29sZWFuKG8pLCF0aGlzLmN0eC50cmFuc2Zvcm0uaXNJZGVudGl0eSl7dmFyIHM9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgYyh0LGUpKTt0PXMueCxlPXMueTt2YXIgdT10aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHlUb1BvaW50KG5ldyBjKDAscikpLGg9dGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5VG9Qb2ludChuZXcgYygwLDApKTtyPU1hdGguc3FydChNYXRoLnBvdyh1LngtaC54LDIpK01hdGgucG93KHUueS1oLnksMikpfU1hdGguYWJzKGktbik+PTIqTWF0aC5QSSYmKG49MCxpPTIqTWF0aC5QSSksdGhpcy5wYXRoLnB1c2goe3R5cGU6XCJhcmNcIix4OnQseTplLHJhZGl1czpyLHN0YXJ0QW5nbGU6bixlbmRBbmdsZTppLGNvdW50ZXJjbG9ja3dpc2U6b30pfSxwLnByb3RvdHlwZS5hcmNUbz1mdW5jdGlvbih0LGUscixuLGkpe3Rocm93IG5ldyBFcnJvcihcImFyY1RvIG5vdCBpbXBsZW1lbnRlZC5cIil9LHAucHJvdG90eXBlLnJlY3Q9ZnVuY3Rpb24odCxlLHIsbil7aWYoaXNOYU4odCl8fGlzTmFOKGUpfHxpc05hTihyKXx8aXNOYU4obikpdGhyb3cgYS5lcnJvcihcImpzUERGLmNvbnRleHQyZC5yZWN0OiBJbnZhbGlkIGFyZ3VtZW50c1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNvbnRleHQyZC5yZWN0XCIpO3RoaXMubW92ZVRvKHQsZSksdGhpcy5saW5lVG8odCtyLGUpLHRoaXMubGluZVRvKHQrcixlK24pLHRoaXMubGluZVRvKHQsZStuKSx0aGlzLmxpbmVUbyh0LGUpLHRoaXMubGluZVRvKHQrcixlKSx0aGlzLmxpbmVUbyh0LGUpfSxwLnByb3RvdHlwZS5maWxsUmVjdD1mdW5jdGlvbih0LGUscixuKXtpZihpc05hTih0KXx8aXNOYU4oZSl8fGlzTmFOKHIpfHxpc05hTihuKSl0aHJvdyBhLmVycm9yKFwianNQREYuY29udGV4dDJkLmZpbGxSZWN0OiBJbnZhbGlkIGFyZ3VtZW50c1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNvbnRleHQyZC5maWxsUmVjdFwiKTtpZighbS5jYWxsKHRoaXMpKXt2YXIgaT17fTtcImJ1dHRcIiE9PXRoaXMubGluZUNhcCYmKGkubGluZUNhcD10aGlzLmxpbmVDYXAsdGhpcy5saW5lQ2FwPVwiYnV0dFwiKSxcIm1pdGVyXCIhPT10aGlzLmxpbmVKb2luJiYoaS5saW5lSm9pbj10aGlzLmxpbmVKb2luLHRoaXMubGluZUpvaW49XCJtaXRlclwiKSx0aGlzLmJlZ2luUGF0aCgpLHRoaXMucmVjdCh0LGUscixuKSx0aGlzLmZpbGwoKSxpLmhhc093blByb3BlcnR5KFwibGluZUNhcFwiKSYmKHRoaXMubGluZUNhcD1pLmxpbmVDYXApLGkuaGFzT3duUHJvcGVydHkoXCJsaW5lSm9pblwiKSYmKHRoaXMubGluZUpvaW49aS5saW5lSm9pbil9fSxwLnByb3RvdHlwZS5zdHJva2VSZWN0PWZ1bmN0aW9uKHQsZSxyLG4pe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4ocil8fGlzTmFOKG4pKXRocm93IGEuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQuc3Ryb2tlUmVjdDogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuc3Ryb2tlUmVjdFwiKTt2LmNhbGwodGhpcyl8fCh0aGlzLmJlZ2luUGF0aCgpLHRoaXMucmVjdCh0LGUscixuKSx0aGlzLnN0cm9rZSgpKX0scC5wcm90b3R5cGUuY2xlYXJSZWN0PWZ1bmN0aW9uKHQsZSxyLG4pe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4ocil8fGlzTmFOKG4pKXRocm93IGEuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQuY2xlYXJSZWN0OiBJbnZhbGlkIGFyZ3VtZW50c1wiLGFyZ3VtZW50cyksbmV3IEVycm9yKFwiSW52YWxpZCBhcmd1bWVudHMgcGFzc2VkIHRvIGpzUERGLmNvbnRleHQyZC5jbGVhclJlY3RcIik7dGhpcy5pZ25vcmVDbGVhclJlY3R8fCh0aGlzLmZpbGxTdHlsZT1cIiNmZmZmZmZcIix0aGlzLmZpbGxSZWN0KHQsZSxyLG4pKX0scC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXt0PVwiYm9vbGVhblwiIT10eXBlb2YgdHx8dDtmb3IodmFyIGU9dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Q3VycmVudFBhZ2VJbmZvKCkucGFnZU51bWJlcixyPTA7cjx0aGlzLnBkZi5pbnRlcm5hbC5nZXROdW1iZXJPZlBhZ2VzKCk7cisrKXRoaXMucGRmLnNldFBhZ2UocisxKSx0aGlzLnBkZi5pbnRlcm5hbC5vdXQoXCJxXCIpO2lmKHRoaXMucGRmLnNldFBhZ2UoZSksdCl7dGhpcy5jdHguZm9udFNpemU9dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKTt2YXIgbj1uZXcgZCh0aGlzLmN0eCk7dGhpcy5jdHhTdGFjay5wdXNoKHRoaXMuY3R4KSx0aGlzLmN0eD1ufX0scC5wcm90b3R5cGUucmVzdG9yZT1mdW5jdGlvbih0KXt0PVwiYm9vbGVhblwiIT10eXBlb2YgdHx8dDtmb3IodmFyIGU9dGhpcy5wZGYuaW50ZXJuYWwuZ2V0Q3VycmVudFBhZ2VJbmZvKCkucGFnZU51bWJlcixyPTA7cjx0aGlzLnBkZi5pbnRlcm5hbC5nZXROdW1iZXJPZlBhZ2VzKCk7cisrKXRoaXMucGRmLnNldFBhZ2UocisxKSx0aGlzLnBkZi5pbnRlcm5hbC5vdXQoXCJRXCIpO3RoaXMucGRmLnNldFBhZ2UoZSksdCYmMCE9PXRoaXMuY3R4U3RhY2subGVuZ3RoJiYodGhpcy5jdHg9dGhpcy5jdHhTdGFjay5wb3AoKSx0aGlzLmZpbGxTdHlsZT10aGlzLmN0eC5maWxsU3R5bGUsdGhpcy5zdHJva2VTdHlsZT10aGlzLmN0eC5zdHJva2VTdHlsZSx0aGlzLmZvbnQ9dGhpcy5jdHguZm9udCx0aGlzLmxpbmVDYXA9dGhpcy5jdHgubGluZUNhcCx0aGlzLmxpbmVXaWR0aD10aGlzLmN0eC5saW5lV2lkdGgsdGhpcy5saW5lSm9pbj10aGlzLmN0eC5saW5lSm9pbix0aGlzLmxpbmVEYXNoPXRoaXMuY3R4LmxpbmVEYXNoLHRoaXMubGluZURhc2hPZmZzZXQ9dGhpcy5jdHgubGluZURhc2hPZmZzZXQpfSxwLnByb3RvdHlwZS50b0RhdGFVUkw9ZnVuY3Rpb24oKXt0aHJvdyBuZXcgRXJyb3IoXCJ0b0RhdGFVcmwgbm90IGltcGxlbWVudGVkLlwiKX07dmFyIGc9ZnVuY3Rpb24odCl7dmFyIGUscixuLGk7aWYoITA9PT10LmlzQ2FudmFzR3JhZGllbnQmJih0PXQuZ2V0Q29sb3IoKSksIXQpcmV0dXJue3I6MCxnOjAsYjowLGE6MCxzdHlsZTp0fTtpZigvdHJhbnNwYXJlbnR8cmdiYVxccypcXChcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqMCtcXHMqXFwpLy50ZXN0KHQpKWU9MCxyPTAsbj0wLGk9MDtlbHNle3ZhciBhPS9yZ2JcXHMqXFwoXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccyosXFxzKihcXGQrKVxccypcXCkvLmV4ZWModCk7aWYobnVsbCE9PWEpZT1wYXJzZUludChhWzFdKSxyPXBhcnNlSW50KGFbMl0pLG49cGFyc2VJbnQoYVszXSksaT0xO2Vsc2UgaWYobnVsbCE9PShhPS9yZ2JhXFxzKlxcKFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooW1xcZC5dKylcXHMqXFwpLy5leGVjKHQpKSllPXBhcnNlSW50KGFbMV0pLHI9cGFyc2VJbnQoYVsyXSksbj1wYXJzZUludChhWzNdKSxpPXBhcnNlRmxvYXQoYVs0XSk7ZWxzZXtpZihpPTEsXCJzdHJpbmdcIj09dHlwZW9mIHQmJlwiI1wiIT09dC5jaGFyQXQoMCkpe3ZhciBvPW5ldyBmKHQpO3Q9by5vaz9vLnRvSGV4KCk6XCIjMDAwMDAwXCJ9ND09PXQubGVuZ3RoPyhlPXQuc3Vic3RyaW5nKDEsMiksZSs9ZSxyPXQuc3Vic3RyaW5nKDIsMykscis9cixuPXQuc3Vic3RyaW5nKDMsNCksbis9bik6KGU9dC5zdWJzdHJpbmcoMSwzKSxyPXQuc3Vic3RyaW5nKDMsNSksbj10LnN1YnN0cmluZyg1LDcpKSxlPXBhcnNlSW50KGUsMTYpLHI9cGFyc2VJbnQociwxNiksbj1wYXJzZUludChuLDE2KX19cmV0dXJue3I6ZSxnOnIsYjpuLGE6aSxzdHlsZTp0fX0sbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmN0eC5pc0ZpbGxUcmFuc3BhcmVudHx8MD09dGhpcy5nbG9iYWxBbHBoYX0sdj1mdW5jdGlvbigpe3JldHVybiBCb29sZWFuKHRoaXMuY3R4LmlzU3Ryb2tlVHJhbnNwYXJlbnR8fDA9PXRoaXMuZ2xvYmFsQWxwaGEpfTtwLnByb3RvdHlwZS5maWxsVGV4dD1mdW5jdGlvbih0LGUscixuKXtpZihpc05hTihlKXx8aXNOYU4ocil8fFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IGEuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQuZmlsbFRleHQ6IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLmZpbGxUZXh0XCIpO2lmKG49aXNOYU4obik/dm9pZCAwOm4sIW0uY2FsbCh0aGlzKSl7dmFyIGk9cSh0aGlzLmN0eC50cmFuc2Zvcm0ucm90YXRpb24pLG89dGhpcy5jdHgudHJhbnNmb3JtLnNjYWxlWDtDLmNhbGwodGhpcyx7dGV4dDp0LHg6ZSx5OnIsc2NhbGU6byxhbmdsZTppLGFsaWduOnRoaXMudGV4dEFsaWduLG1heFdpZHRoOm59KX19LHAucHJvdG90eXBlLnN0cm9rZVRleHQ9ZnVuY3Rpb24odCxlLHIsbil7aWYoaXNOYU4oZSl8fGlzTmFOKHIpfHxcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBhLmVycm9yKFwianNQREYuY29udGV4dDJkLnN0cm9rZVRleHQ6IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLnN0cm9rZVRleHRcIik7aWYoIXYuY2FsbCh0aGlzKSl7bj1pc05hTihuKT92b2lkIDA6bjt2YXIgaT1xKHRoaXMuY3R4LnRyYW5zZm9ybS5yb3RhdGlvbiksbz10aGlzLmN0eC50cmFuc2Zvcm0uc2NhbGVYO0MuY2FsbCh0aGlzLHt0ZXh0OnQseDplLHk6cixzY2FsZTpvLHJlbmRlcmluZ01vZGU6XCJzdHJva2VcIixhbmdsZTppLGFsaWduOnRoaXMudGV4dEFsaWduLG1heFdpZHRoOm59KX19LHAucHJvdG90eXBlLm1lYXN1cmVUZXh0PWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IGEuZXJyb3IoXCJqc1BERi5jb250ZXh0MmQubWVhc3VyZVRleHQ6IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLm1lYXN1cmVUZXh0XCIpO3ZhciBlPXRoaXMucGRmLHI9dGhpcy5wZGYuaW50ZXJuYWwuc2NhbGVGYWN0b3Isbj1lLmludGVybmFsLmdldEZvbnRTaXplKCksaT1lLmdldFN0cmluZ1VuaXRXaWR0aCh0KSpuL2UuaW50ZXJuYWwuc2NhbGVGYWN0b3Isbz1mdW5jdGlvbih0KXt2YXIgZT0odD10fHx7fSkud2lkdGh8fDA7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwid2lkdGhcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGV9fSksdGhpc307cmV0dXJuIG5ldyBvKHt3aWR0aDppKj1NYXRoLnJvdW5kKDk2KnIvNzIqMWU0KS8xZTR9KX0scC5wcm90b3R5cGUuc2NhbGU9ZnVuY3Rpb24odCxlKXtpZihpc05hTih0KXx8aXNOYU4oZSkpdGhyb3cgYS5lcnJvcihcImpzUERGLmNvbnRleHQyZC5zY2FsZTogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQuc2NhbGVcIik7dmFyIHI9bmV3IGgodCwwLDAsZSwwLDApO3RoaXMuY3R4LnRyYW5zZm9ybT10aGlzLmN0eC50cmFuc2Zvcm0ubXVsdGlwbHkocil9LHAucHJvdG90eXBlLnJvdGF0ZT1mdW5jdGlvbih0KXtpZihpc05hTih0KSl0aHJvdyBhLmVycm9yKFwianNQREYuY29udGV4dDJkLnJvdGF0ZTogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQucm90YXRlXCIpO3ZhciBlPW5ldyBoKE1hdGguY29zKHQpLE1hdGguc2luKHQpLC1NYXRoLnNpbih0KSxNYXRoLmNvcyh0KSwwLDApO3RoaXMuY3R4LnRyYW5zZm9ybT10aGlzLmN0eC50cmFuc2Zvcm0ubXVsdGlwbHkoZSl9LHAucHJvdG90eXBlLnRyYW5zbGF0ZT1mdW5jdGlvbih0LGUpe2lmKGlzTmFOKHQpfHxpc05hTihlKSl0aHJvdyBhLmVycm9yKFwianNQREYuY29udGV4dDJkLnRyYW5zbGF0ZTogSW52YWxpZCBhcmd1bWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnRzIHBhc3NlZCB0byBqc1BERi5jb250ZXh0MmQudHJhbnNsYXRlXCIpO3ZhciByPW5ldyBoKDEsMCwwLDEsdCxlKTt0aGlzLmN0eC50cmFuc2Zvcm09dGhpcy5jdHgudHJhbnNmb3JtLm11bHRpcGx5KHIpfSxwLnByb3RvdHlwZS50cmFuc2Zvcm09ZnVuY3Rpb24odCxlLHIsbixpLG8pe2lmKGlzTmFOKHQpfHxpc05hTihlKXx8aXNOYU4ocil8fGlzTmFOKG4pfHxpc05hTihpKXx8aXNOYU4obykpdGhyb3cgYS5lcnJvcihcImpzUERGLmNvbnRleHQyZC50cmFuc2Zvcm06IEludmFsaWQgYXJndW1lbnRzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGFyZ3VtZW50cyBwYXNzZWQgdG8ganNQREYuY29udGV4dDJkLnRyYW5zZm9ybVwiKTt2YXIgcz1uZXcgaCh0LGUscixuLGksbyk7dGhpcy5jdHgudHJhbnNmb3JtPXRoaXMuY3R4LnRyYW5zZm9ybS5tdWx0aXBseShzKX0scC5wcm90b3R5cGUuc2V0VHJhbnNmb3JtPWZ1bmN0aW9uKHQsZSxyLG4saSxhKXt0PWlzTmFOKHQpPzE6dCxlPWlzTmFOKGUpPzA6ZSxyPWlzTmFOKHIpPzA6cixuPWlzTmFOKG4pPzE6bixpPWlzTmFOKGkpPzA6aSxhPWlzTmFOKGEpPzA6YSx0aGlzLmN0eC50cmFuc2Zvcm09bmV3IGgodCxlLHIsbixpLGEpfTt2YXIgYj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcmdpblswXT4wfHx0aGlzLm1hcmdpblsxXT4wfHx0aGlzLm1hcmdpblsyXT4wfHx0aGlzLm1hcmdpblszXT4wfTtwLnByb3RvdHlwZS5kcmF3SW1hZ2U9ZnVuY3Rpb24odCxlLHIsbixpLGEsbyxzLGMpe3ZhciBsPXRoaXMucGRmLmdldEltYWdlUHJvcGVydGllcyh0KSxmPTEsZD0xLHA9MSxnPTE7dm9pZCAwIT09biYmdm9pZCAwIT09cyYmKHA9cy9uLGc9Yy9pLGY9bC53aWR0aC9uKnMvbixkPWwuaGVpZ2h0L2kqYy9pKSx2b2lkIDA9PT1hJiYoYT1lLG89cixlPTAscj0wKSx2b2lkIDAhPT1uJiZ2b2lkIDA9PT1zJiYocz1uLGM9aSksdm9pZCAwPT09biYmdm9pZCAwPT09cyYmKHM9bC53aWR0aCxjPWwuaGVpZ2h0KTtmb3IodmFyIG0sdj10aGlzLmN0eC50cmFuc2Zvcm0uZGVjb21wb3NlKCksdz1xKHYucm90YXRlLnNoeCksQT1uZXcgaCxTPShBPShBPShBPUEubXVsdGlwbHkodi50cmFuc2xhdGUpKS5tdWx0aXBseSh2LnNrZXcpKS5tdWx0aXBseSh2LnNjYWxlKSkuYXBwbHlUb1JlY3RhbmdsZShuZXcgdShhLWUqcCxvLXIqZyxuKmYsaSpkKSksXz15LmNhbGwodGhpcyxTKSxQPVtdLGs9MDtrPF8ubGVuZ3RoO2srPTEpLTE9PT1QLmluZGV4T2YoX1trXSkmJlAucHVzaChfW2tdKTtpZihMKFApLHRoaXMuYXV0b1BhZ2luZylmb3IodmFyIEk9UFswXSxGPVBbUC5sZW5ndGgtMV0sQz1JO0M8RisxO0MrKyl7dGhpcy5wZGYuc2V0UGFnZShDKTt2YXIgaj10aGlzLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS53aWR0aC10aGlzLm1hcmdpblszXS10aGlzLm1hcmdpblsxXSxPPTE9PT1DP3RoaXMucG9zWSt0aGlzLm1hcmdpblswXTp0aGlzLm1hcmdpblswXSxCPXRoaXMucGRmLmludGVybmFsLnBhZ2VTaXplLmhlaWdodC10aGlzLnBvc1ktdGhpcy5tYXJnaW5bMF0tdGhpcy5tYXJnaW5bMl0sTT10aGlzLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS5oZWlnaHQtdGhpcy5tYXJnaW5bMF0tdGhpcy5tYXJnaW5bMl0sRT0xPT09Qz8wOkIrKEMtMikqTTtpZigwIT09dGhpcy5jdHguY2xpcF9wYXRoLmxlbmd0aCl7dmFyIEQ9dGhpcy5wYXRoO209SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmN0eC5jbGlwX3BhdGgpKSx0aGlzLnBhdGg9TihtLHRoaXMucG9zWCt0aGlzLm1hcmdpblszXSwtRStPK3RoaXMuY3R4LnByZXZQYWdlTGFzdEVsZW1PZmZzZXQpLHguY2FsbCh0aGlzLFwiZmlsbFwiLCEwKSx0aGlzLnBhdGg9RH12YXIgUj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KFMpKTtSPU4oW1JdLHRoaXMucG9zWCt0aGlzLm1hcmdpblszXSwtRStPK3RoaXMuY3R4LnByZXZQYWdlTGFzdEVsZW1PZmZzZXQpWzBdO3ZhciBUPShDPkl8fEM8RikmJmIuY2FsbCh0aGlzKTtUJiYodGhpcy5wZGYuc2F2ZUdyYXBoaWNzU3RhdGUoKSx0aGlzLnBkZi5yZWN0KHRoaXMubWFyZ2luWzNdLHRoaXMubWFyZ2luWzBdLGosTSxudWxsKS5jbGlwKCkuZGlzY2FyZFBhdGgoKSksdGhpcy5wZGYuYWRkSW1hZ2UodCxcIkpQRUdcIixSLngsUi55LFIudyxSLmgsbnVsbCxudWxsLHcpLFQmJnRoaXMucGRmLnJlc3RvcmVHcmFwaGljc1N0YXRlKCl9ZWxzZSB0aGlzLnBkZi5hZGRJbWFnZSh0LFwiSlBFR1wiLFMueCxTLnksUy53LFMuaCxudWxsLG51bGwsdyl9O3ZhciB5PWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1bXTtlPWV8fHRoaXMucGRmLmludGVybmFsLnBhZ2VTaXplLndpZHRoLHI9cnx8dGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUuaGVpZ2h0LXRoaXMubWFyZ2luWzBdLXRoaXMubWFyZ2luWzJdO3ZhciBpPXRoaXMucG9zWSt0aGlzLmN0eC5wcmV2UGFnZUxhc3RFbGVtT2Zmc2V0O3N3aXRjaCh0LnR5cGUpe2RlZmF1bHQ6Y2FzZVwibXRcIjpjYXNlXCJsdFwiOm4ucHVzaChNYXRoLmZsb29yKCh0LnkraSkvcikrMSk7YnJlYWs7Y2FzZVwiYXJjXCI6bi5wdXNoKE1hdGguZmxvb3IoKHQueStpLXQucmFkaXVzKS9yKSsxKSxuLnB1c2goTWF0aC5mbG9vcigodC55K2krdC5yYWRpdXMpL3IpKzEpO2JyZWFrO2Nhc2VcInFjdFwiOnZhciBhPUQodGhpcy5jdHgubGFzdFBvaW50LngsdGhpcy5jdHgubGFzdFBvaW50LnksdC54MSx0LnkxLHQueCx0LnkpO24ucHVzaChNYXRoLmZsb29yKChhLnkraSkvcikrMSksbi5wdXNoKE1hdGguZmxvb3IoKGEueSthLmgraSkvcikrMSk7YnJlYWs7Y2FzZVwiYmN0XCI6dmFyIG89Uih0aGlzLmN0eC5sYXN0UG9pbnQueCx0aGlzLmN0eC5sYXN0UG9pbnQueSx0LngxLHQueTEsdC54Mix0LnkyLHQueCx0LnkpO24ucHVzaChNYXRoLmZsb29yKChvLnkraSkvcikrMSksbi5wdXNoKE1hdGguZmxvb3IoKG8ueStvLmgraSkvcikrMSk7YnJlYWs7Y2FzZVwicmVjdFwiOm4ucHVzaChNYXRoLmZsb29yKCh0LnkraSkvcikrMSksbi5wdXNoKE1hdGguZmxvb3IoKHQueSt0LmgraSkvcikrMSl9Zm9yKHZhciBzPTA7czxuLmxlbmd0aDtzKz0xKWZvcig7dGhpcy5wZGYuaW50ZXJuYWwuZ2V0TnVtYmVyT2ZQYWdlcygpPG5bc107KXcuY2FsbCh0aGlzKTtyZXR1cm4gbn0sdz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZmlsbFN0eWxlLGU9dGhpcy5zdHJva2VTdHlsZSxyPXRoaXMuZm9udCxuPXRoaXMubGluZUNhcCxpPXRoaXMubGluZVdpZHRoLGE9dGhpcy5saW5lSm9pbjt0aGlzLnBkZi5hZGRQYWdlKCksdGhpcy5maWxsU3R5bGU9dCx0aGlzLnN0cm9rZVN0eWxlPWUsdGhpcy5mb250PXIsdGhpcy5saW5lQ2FwPW4sdGhpcy5saW5lV2lkdGg9aSx0aGlzLmxpbmVKb2luPWF9LE49ZnVuY3Rpb24odCxlLHIpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXN3aXRjaCh0W25dLnR5cGUpe2Nhc2VcImJjdFwiOnRbbl0ueDIrPWUsdFtuXS55Mis9cjtjYXNlXCJxY3RcIjp0W25dLngxKz1lLHRbbl0ueTErPXI7Y2FzZVwibXRcIjpjYXNlXCJsdFwiOmNhc2VcImFyY1wiOmRlZmF1bHQ6dFtuXS54Kz1lLHRbbl0ueSs9cn1yZXR1cm4gdH0sTD1mdW5jdGlvbih0KXtyZXR1cm4gdC5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiB0LWV9KSl9LEE9ZnVuY3Rpb24odCxlKXtmb3IodmFyIHIsbixpPXRoaXMuZmlsbFN0eWxlLGE9dGhpcy5zdHJva2VTdHlsZSxvPXRoaXMubGluZUNhcCxzPXRoaXMubGluZVdpZHRoLGM9TWF0aC5hYnMocyp0aGlzLmN0eC50cmFuc2Zvcm0uc2NhbGVYKSx1PXRoaXMubGluZUpvaW4saD1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMucGF0aCkpLGw9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnBhdGgpKSxmPVtdLGQ9MDtkPGwubGVuZ3RoO2QrKylpZih2b2lkIDAhPT1sW2RdLngpZm9yKHZhciBwPXkuY2FsbCh0aGlzLGxbZF0pLGc9MDtnPHAubGVuZ3RoO2crPTEpLTE9PT1mLmluZGV4T2YocFtnXSkmJmYucHVzaChwW2ddKTtmb3IodmFyIG09MDttPGYubGVuZ3RoO20rKylmb3IoO3RoaXMucGRmLmludGVybmFsLmdldE51bWJlck9mUGFnZXMoKTxmW21dOyl3LmNhbGwodGhpcyk7aWYoTChmKSx0aGlzLmF1dG9QYWdpbmcpZm9yKHZhciB2PWZbMF0sQT1mW2YubGVuZ3RoLTFdLFM9djtTPEErMTtTKyspe3RoaXMucGRmLnNldFBhZ2UoUyksdGhpcy5maWxsU3R5bGU9aSx0aGlzLnN0cm9rZVN0eWxlPWEsdGhpcy5saW5lQ2FwPW8sdGhpcy5saW5lV2lkdGg9Yyx0aGlzLmxpbmVKb2luPXU7dmFyIF89dGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUud2lkdGgtdGhpcy5tYXJnaW5bM10tdGhpcy5tYXJnaW5bMV0sUD0xPT09Uz90aGlzLnBvc1krdGhpcy5tYXJnaW5bMF06dGhpcy5tYXJnaW5bMF0saz10aGlzLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS5oZWlnaHQtdGhpcy5wb3NZLXRoaXMubWFyZ2luWzBdLXRoaXMubWFyZ2luWzJdLEk9dGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUuaGVpZ2h0LXRoaXMubWFyZ2luWzBdLXRoaXMubWFyZ2luWzJdLEY9MT09PVM/MDprKyhTLTIpKkk7aWYoMCE9PXRoaXMuY3R4LmNsaXBfcGF0aC5sZW5ndGgpe3ZhciBDPXRoaXMucGF0aDtyPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5jdHguY2xpcF9wYXRoKSksdGhpcy5wYXRoPU4ocix0aGlzLnBvc1grdGhpcy5tYXJnaW5bM10sLUYrUCt0aGlzLmN0eC5wcmV2UGFnZUxhc3RFbGVtT2Zmc2V0KSx4LmNhbGwodGhpcyx0LCEwKSx0aGlzLnBhdGg9Q31pZihuPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaCkpLHRoaXMucGF0aD1OKG4sdGhpcy5wb3NYK3RoaXMubWFyZ2luWzNdLC1GK1ArdGhpcy5jdHgucHJldlBhZ2VMYXN0RWxlbU9mZnNldCksITE9PT1lfHwwPT09Uyl7dmFyIGo9KFM+dnx8UzxBKSYmYi5jYWxsKHRoaXMpO2omJih0aGlzLnBkZi5zYXZlR3JhcGhpY3NTdGF0ZSgpLHRoaXMucGRmLnJlY3QodGhpcy5tYXJnaW5bM10sdGhpcy5tYXJnaW5bMF0sXyxJLG51bGwpLmNsaXAoKS5kaXNjYXJkUGF0aCgpKSx4LmNhbGwodGhpcyx0LGUpLGomJnRoaXMucGRmLnJlc3RvcmVHcmFwaGljc1N0YXRlKCl9dGhpcy5saW5lV2lkdGg9c31lbHNlIHRoaXMubGluZVdpZHRoPWMseC5jYWxsKHRoaXMsdCxlKSx0aGlzLmxpbmVXaWR0aD1zO3RoaXMucGF0aD1ofSx4PWZ1bmN0aW9uKHQsZSl7aWYoKFwic3Ryb2tlXCIhPT10fHxlfHwhdi5jYWxsKHRoaXMpKSYmKFwic3Ryb2tlXCI9PT10fHxlfHwhbS5jYWxsKHRoaXMpKSl7Zm9yKHZhciByLG4saT1bXSxhPXRoaXMucGF0aCxvPTA7bzxhLmxlbmd0aDtvKyspe3ZhciBzPWFbb107c3dpdGNoKHMudHlwZSl7Y2FzZVwiYmVnaW5cIjppLnB1c2goe2JlZ2luOiEwfSk7YnJlYWs7Y2FzZVwiY2xvc2VcIjppLnB1c2goe2Nsb3NlOiEwfSk7YnJlYWs7Y2FzZVwibXRcIjppLnB1c2goe3N0YXJ0OnMsZGVsdGFzOltdLGFiczpbXX0pO2JyZWFrO2Nhc2VcImx0XCI6dmFyIGM9aS5sZW5ndGg7aWYoYVtvLTFdJiYhaXNOYU4oYVtvLTFdLngpJiYocj1bcy54LWFbby0xXS54LHMueS1hW28tMV0ueV0sYz4wKSlmb3IoO2M+PTA7Yy0tKWlmKCEwIT09aVtjLTFdLmNsb3NlJiYhMCE9PWlbYy0xXS5iZWdpbil7aVtjLTFdLmRlbHRhcy5wdXNoKHIpLGlbYy0xXS5hYnMucHVzaChzKTticmVha31icmVhaztjYXNlXCJiY3RcIjpyPVtzLngxLWFbby0xXS54LHMueTEtYVtvLTFdLnkscy54Mi1hW28tMV0ueCxzLnkyLWFbby0xXS55LHMueC1hW28tMV0ueCxzLnktYVtvLTFdLnldLGlbaS5sZW5ndGgtMV0uZGVsdGFzLnB1c2gocik7YnJlYWs7Y2FzZVwicWN0XCI6dmFyIHU9YVtvLTFdLngrMi8zKihzLngxLWFbby0xXS54KSxoPWFbby0xXS55KzIvMyoocy55MS1hW28tMV0ueSksbD1zLngrMi8zKihzLngxLXMueCksZj1zLnkrMi8zKihzLnkxLXMueSksZD1zLngscD1zLnk7cj1bdS1hW28tMV0ueCxoLWFbby0xXS55LGwtYVtvLTFdLngsZi1hW28tMV0ueSxkLWFbby0xXS54LHAtYVtvLTFdLnldLGlbaS5sZW5ndGgtMV0uZGVsdGFzLnB1c2gocik7YnJlYWs7Y2FzZVwiYXJjXCI6aS5wdXNoKHtkZWx0YXM6W10sYWJzOltdLGFyYzohMH0pLEFycmF5LmlzQXJyYXkoaVtpLmxlbmd0aC0xXS5hYnMpJiZpW2kubGVuZ3RoLTFdLmFicy5wdXNoKHMpfX1uPWU/bnVsbDpcInN0cm9rZVwiPT09dD9cInN0cm9rZVwiOlwiZmlsbFwiO2Zvcih2YXIgZz0hMSxiPTA7YjxpLmxlbmd0aDtiKyspaWYoaVtiXS5hcmMpZm9yKHZhciB5PWlbYl0uYWJzLHc9MDt3PHkubGVuZ3RoO3crKyl7dmFyIE49eVt3XTtcImFyY1wiPT09Ti50eXBlP1AuY2FsbCh0aGlzLE4ueCxOLnksTi5yYWRpdXMsTi5zdGFydEFuZ2xlLE4uZW5kQW5nbGUsTi5jb3VudGVyY2xvY2t3aXNlLHZvaWQgMCxlLCFnKTpqLmNhbGwodGhpcyxOLngsTi55KSxnPSEwfWVsc2UgaWYoITA9PT1pW2JdLmNsb3NlKXRoaXMucGRmLmludGVybmFsLm91dChcImhcIiksZz0hMTtlbHNlIGlmKCEwIT09aVtiXS5iZWdpbil7dmFyIEw9aVtiXS5zdGFydC54LEE9aVtiXS5zdGFydC55O08uY2FsbCh0aGlzLGlbYl0uZGVsdGFzLEwsQSksZz0hMH1uJiZrLmNhbGwodGhpcyxuKSxlJiZJLmNhbGwodGhpcyl9fSxTPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucGRmLmludGVybmFsLmdldEZvbnRTaXplKCkvdGhpcy5wZGYuaW50ZXJuYWwuc2NhbGVGYWN0b3Iscj1lKih0aGlzLnBkZi5pbnRlcm5hbC5nZXRMaW5lSGVpZ2h0RmFjdG9yKCktMSk7c3dpdGNoKHRoaXMuY3R4LnRleHRCYXNlbGluZSl7Y2FzZVwiYm90dG9tXCI6cmV0dXJuIHQtcjtjYXNlXCJ0b3BcIjpyZXR1cm4gdCtlLXI7Y2FzZVwiaGFuZ2luZ1wiOnJldHVybiB0K2UtMipyO2Nhc2VcIm1pZGRsZVwiOnJldHVybiB0K2UvMi1yO2Nhc2VcImlkZW9ncmFwaGljXCI6cmV0dXJuIHQ7Y2FzZVwiYWxwaGFiZXRpY1wiOmRlZmF1bHQ6cmV0dXJuIHR9fSxfPWZ1bmN0aW9uKHQpe3JldHVybiB0K3RoaXMucGRmLmludGVybmFsLmdldEZvbnRTaXplKCkvdGhpcy5wZGYuaW50ZXJuYWwuc2NhbGVGYWN0b3IqKHRoaXMucGRmLmludGVybmFsLmdldExpbmVIZWlnaHRGYWN0b3IoKS0xKX07cC5wcm90b3R5cGUuY3JlYXRlTGluZWFyR3JhZGllbnQ9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbigpe307cmV0dXJuIHQuY29sb3JTdG9wcz1bXSx0LmFkZENvbG9yU3RvcD1mdW5jdGlvbih0LGUpe3RoaXMuY29sb3JTdG9wcy5wdXNoKFt0LGVdKX0sdC5nZXRDb2xvcj1mdW5jdGlvbigpe3JldHVybiAwPT09dGhpcy5jb2xvclN0b3BzLmxlbmd0aD9cIiMwMDAwMDBcIjp0aGlzLmNvbG9yU3RvcHNbMF1bMV19LHQuaXNDYW52YXNHcmFkaWVudD0hMCx0fSxwLnByb3RvdHlwZS5jcmVhdGVQYXR0ZXJuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3JlYXRlTGluZWFyR3JhZGllbnQoKX0scC5wcm90b3R5cGUuY3JlYXRlUmFkaWFsR3JhZGllbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jcmVhdGVMaW5lYXJHcmFkaWVudCgpfTt2YXIgUD1mdW5jdGlvbih0LGUscixuLGksYSxvLHMsYyl7Zm9yKHZhciB1PU0uY2FsbCh0aGlzLHIsbixpLGEpLGg9MDtoPHUubGVuZ3RoO2grKyl7dmFyIGw9dVtoXTswPT09aCYmKGM/Ri5jYWxsKHRoaXMsbC54MSt0LGwueTErZSk6ai5jYWxsKHRoaXMsbC54MSt0LGwueTErZSkpLEIuY2FsbCh0aGlzLHQsZSxsLngyLGwueTIsbC54MyxsLnkzLGwueDQsbC55NCl9cz9JLmNhbGwodGhpcyk6ay5jYWxsKHRoaXMsbyl9LGs9ZnVuY3Rpb24odCl7c3dpdGNoKHQpe2Nhc2VcInN0cm9rZVwiOnRoaXMucGRmLmludGVybmFsLm91dChcIlNcIik7YnJlYWs7Y2FzZVwiZmlsbFwiOnRoaXMucGRmLmludGVybmFsLm91dChcImZcIil9fSxJPWZ1bmN0aW9uKCl7dGhpcy5wZGYuY2xpcCgpLHRoaXMucGRmLmRpc2NhcmRQYXRoKCl9LEY9ZnVuY3Rpb24odCxlKXt0aGlzLnBkZi5pbnRlcm5hbC5vdXQobih0KStcIiBcIitpKGUpK1wiIG1cIil9LEM9ZnVuY3Rpb24odCl7dmFyIGU7c3dpdGNoKHQuYWxpZ24pe2Nhc2VcInJpZ2h0XCI6Y2FzZVwiZW5kXCI6ZT1cInJpZ2h0XCI7YnJlYWs7Y2FzZVwiY2VudGVyXCI6ZT1cImNlbnRlclwiO2JyZWFrO2Nhc2VcImxlZnRcIjpjYXNlXCJzdGFydFwiOmRlZmF1bHQ6ZT1cImxlZnRcIn12YXIgcj10aGlzLnBkZi5nZXRUZXh0RGltZW5zaW9ucyh0LnRleHQpLG49Uy5jYWxsKHRoaXMsdC55KSxpPV8uY2FsbCh0aGlzLG4pLXIuaCxhPXRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseVRvUG9pbnQobmV3IGModC54LG4pKSxvPXRoaXMuY3R4LnRyYW5zZm9ybS5kZWNvbXBvc2UoKSxzPW5ldyBoO3M9KHM9KHM9cy5tdWx0aXBseShvLnRyYW5zbGF0ZSkpLm11bHRpcGx5KG8uc2tldykpLm11bHRpcGx5KG8uc2NhbGUpO2Zvcih2YXIgbCxmLGQscD10aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHlUb1JlY3RhbmdsZShuZXcgdSh0LngsbixyLncsci5oKSksZz1zLmFwcGx5VG9SZWN0YW5nbGUobmV3IHUodC54LGksci53LHIuaCkpLG09eS5jYWxsKHRoaXMsZyksdj1bXSx3PTA7dzxtLmxlbmd0aDt3Kz0xKS0xPT09di5pbmRleE9mKG1bd10pJiZ2LnB1c2gobVt3XSk7aWYoTCh2KSx0aGlzLmF1dG9QYWdpbmcpZm9yKHZhciBBPXZbMF0sUD12W3YubGVuZ3RoLTFdLGs9QTtrPFArMTtrKyspe3RoaXMucGRmLnNldFBhZ2Uoayk7dmFyIEk9MT09PWs/dGhpcy5wb3NZK3RoaXMubWFyZ2luWzBdOnRoaXMubWFyZ2luWzBdLEY9dGhpcy5wZGYuaW50ZXJuYWwucGFnZVNpemUuaGVpZ2h0LXRoaXMucG9zWS10aGlzLm1hcmdpblswXS10aGlzLm1hcmdpblsyXSxDPXRoaXMucGRmLmludGVybmFsLnBhZ2VTaXplLmhlaWdodC10aGlzLm1hcmdpblsyXSxqPUMtdGhpcy5tYXJnaW5bMF0sTz10aGlzLnBkZi5pbnRlcm5hbC5wYWdlU2l6ZS53aWR0aC10aGlzLm1hcmdpblsxXSxCPU8tdGhpcy5tYXJnaW5bM10sTT0xPT09az8wOkYrKGstMikqajtpZigwIT09dGhpcy5jdHguY2xpcF9wYXRoLmxlbmd0aCl7dmFyIEU9dGhpcy5wYXRoO2w9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLmN0eC5jbGlwX3BhdGgpKSx0aGlzLnBhdGg9TihsLHRoaXMucG9zWCt0aGlzLm1hcmdpblszXSwtMSpNK0kpLHguY2FsbCh0aGlzLFwiZmlsbFwiLCEwKSx0aGlzLnBhdGg9RX12YXIgcT1OKFtKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGcpKV0sdGhpcy5wb3NYK3RoaXMubWFyZ2luWzNdLC1NK0krdGhpcy5jdHgucHJldlBhZ2VMYXN0RWxlbU9mZnNldClbMF07dC5zY2FsZT49LjAxJiYoZj10aGlzLnBkZi5pbnRlcm5hbC5nZXRGb250U2l6ZSgpLHRoaXMucGRmLnNldEZvbnRTaXplKGYqdC5zY2FsZSksZD10aGlzLmxpbmVXaWR0aCx0aGlzLmxpbmVXaWR0aD1kKnQuc2NhbGUpO3ZhciBEPVwidGV4dFwiIT09dGhpcy5hdXRvUGFnaW5nO2lmKER8fHEueStxLmg8PUMpe2lmKER8fHEueT49SSYmcS54PD1PKXt2YXIgUj1EP3QudGV4dDp0aGlzLnBkZi5zcGxpdFRleHRUb1NpemUodC50ZXh0LHQubWF4V2lkdGh8fE8tcS54KVswXSxUPU4oW0pTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocCkpXSx0aGlzLnBvc1grdGhpcy5tYXJnaW5bM10sLU0rSSt0aGlzLmN0eC5wcmV2UGFnZUxhc3RFbGVtT2Zmc2V0KVswXSxVPUQmJihrPkF8fGs8UCkmJmIuY2FsbCh0aGlzKTtVJiYodGhpcy5wZGYuc2F2ZUdyYXBoaWNzU3RhdGUoKSx0aGlzLnBkZi5yZWN0KHRoaXMubWFyZ2luWzNdLHRoaXMubWFyZ2luWzBdLEIsaixudWxsKS5jbGlwKCkuZGlzY2FyZFBhdGgoKSksdGhpcy5wZGYudGV4dChSLFQueCxULnkse2FuZ2xlOnQuYW5nbGUsYWxpZ246ZSxyZW5kZXJpbmdNb2RlOnQucmVuZGVyaW5nTW9kZX0pLFUmJnRoaXMucGRmLnJlc3RvcmVHcmFwaGljc1N0YXRlKCl9fWVsc2UgcS55PEMmJih0aGlzLmN0eC5wcmV2UGFnZUxhc3RFbGVtT2Zmc2V0Kz1DLXEueSk7dC5zY2FsZT49LjAxJiYodGhpcy5wZGYuc2V0Rm9udFNpemUoZiksdGhpcy5saW5lV2lkdGg9ZCl9ZWxzZSB0LnNjYWxlPj0uMDEmJihmPXRoaXMucGRmLmludGVybmFsLmdldEZvbnRTaXplKCksdGhpcy5wZGYuc2V0Rm9udFNpemUoZip0LnNjYWxlKSxkPXRoaXMubGluZVdpZHRoLHRoaXMubGluZVdpZHRoPWQqdC5zY2FsZSksdGhpcy5wZGYudGV4dCh0LnRleHQsYS54K3RoaXMucG9zWCxhLnkrdGhpcy5wb3NZLHthbmdsZTp0LmFuZ2xlLGFsaWduOmUscmVuZGVyaW5nTW9kZTp0LnJlbmRlcmluZ01vZGUsbWF4V2lkdGg6dC5tYXhXaWR0aH0pLHQuc2NhbGU+PS4wMSYmKHRoaXMucGRmLnNldEZvbnRTaXplKGYpLHRoaXMubGluZVdpZHRoPWQpfSxqPWZ1bmN0aW9uKHQsZSxyLGEpe3I9cnx8MCxhPWF8fDAsdGhpcy5wZGYuaW50ZXJuYWwub3V0KG4odCtyKStcIiBcIitpKGUrYSkrXCIgbFwiKX0sTz1mdW5jdGlvbih0LGUscil7cmV0dXJuIHRoaXMucGRmLmxpbmVzKHQsZSxyLG51bGwsbnVsbCl9LEI9ZnVuY3Rpb24odCxlLG4saSxhLGMsdSxoKXt0aGlzLnBkZi5pbnRlcm5hbC5vdXQoW3IobyhuK3QpKSxyKHMoaStlKSkscihvKGErdCkpLHIocyhjK2UpKSxyKG8odSt0KSkscihzKGgrZSkpLFwiY1wiXS5qb2luKFwiIFwiKSl9LE09ZnVuY3Rpb24odCxlLHIsbil7Zm9yKHZhciBpPTIqTWF0aC5QSSxhPU1hdGguUEkvMjtlPnI7KWUtPWk7dmFyIG89TWF0aC5hYnMoci1lKTtvPGkmJm4mJihvPWktbyk7Zm9yKHZhciBzPVtdLGM9bj8tMToxLHU9ZTtvPjFlLTU7KXt2YXIgaD11K2MqTWF0aC5taW4obyxhKTtzLnB1c2goRS5jYWxsKHRoaXMsdCx1LGgpKSxvLT1NYXRoLmFicyhoLXUpLHU9aH1yZXR1cm4gc30sRT1mdW5jdGlvbih0LGUscil7dmFyIG49KHItZSkvMixpPXQqTWF0aC5jb3MobiksYT10Kk1hdGguc2luKG4pLG89aSxzPS1hLGM9bypvK3Mqcyx1PWMrbyppK3MqYSxoPTQvMyooTWF0aC5zcXJ0KDIqYyp1KS11KS8obyphLXMqaSksbD1vLWgqcyxmPXMraCpvLGQ9bCxwPS1mLGc9bitlLG09TWF0aC5jb3MoZyksdj1NYXRoLnNpbihnKTtyZXR1cm57eDE6dCpNYXRoLmNvcyhlKSx5MTp0Kk1hdGguc2luKGUpLHgyOmwqbS1mKnYseTI6bCp2K2YqbSx4MzpkKm0tcCp2LHkzOmQqditwKm0seDQ6dCpNYXRoLmNvcyhyKSx5NDp0Kk1hdGguc2luKHIpfX0scT1mdW5jdGlvbih0KXtyZXR1cm4gMTgwKnQvTWF0aC5QSX0sRD1mdW5jdGlvbih0LGUscixuLGksYSl7dmFyIG89dCsuNSooci10KSxzPWUrLjUqKG4tZSksYz1pKy41KihyLWkpLGg9YSsuNSoobi1hKSxsPU1hdGgubWluKHQsaSxvLGMpLGY9TWF0aC5tYXgodCxpLG8sYyksZD1NYXRoLm1pbihlLGEscyxoKSxwPU1hdGgubWF4KGUsYSxzLGgpO3JldHVybiBuZXcgdShsLGQsZi1sLHAtZCl9LFI9ZnVuY3Rpb24odCxlLHIsbixpLGEsbyxzKXt2YXIgYyxoLGwsZixkLHAsZyxtLHYsYix5LHcsTixMLEE9ci10LHg9bi1lLFM9aS1yLF89YS1uLFA9by1pLGs9cy1hO2ZvcihoPTA7aDw0MTtoKyspdj0oZz0obD10KyhjPWgvNDApKkEpK2MqKChkPXIrYypTKS1sKSkrYyooZCtjKihpK2MqUC1kKS1nKSxiPShtPShmPWUrYyp4KStjKigocD1uK2MqXyktZikpK2MqKHArYyooYStjKmstcCktbSksMD09aD8oeT12LHc9YixOPXYsTD1iKTooeT1NYXRoLm1pbih5LHYpLHc9TWF0aC5taW4odyxiKSxOPU1hdGgubWF4KE4sdiksTD1NYXRoLm1heChMLGIpKTtyZXR1cm4gbmV3IHUoTWF0aC5yb3VuZCh5KSxNYXRoLnJvdW5kKHcpLE1hdGgucm91bmQoTi15KSxNYXRoLnJvdW5kKEwtdykpfSxUPWZ1bmN0aW9uKCl7aWYodGhpcy5wcmV2TGluZURhc2h8fHRoaXMuY3R4LmxpbmVEYXNoLmxlbmd0aHx8dGhpcy5jdHgubGluZURhc2hPZmZzZXQpe3ZhciB0LGUscj0odD10aGlzLmN0eC5saW5lRGFzaCxlPXRoaXMuY3R4LmxpbmVEYXNoT2Zmc2V0LEpTT04uc3RyaW5naWZ5KHtsaW5lRGFzaDp0LGxpbmVEYXNoT2Zmc2V0OmV9KSk7dGhpcy5wcmV2TGluZURhc2ghPT1yJiYodGhpcy5wZGYuc2V0TGluZURhc2godGhpcy5jdHgubGluZURhc2gsdGhpcy5jdHgubGluZURhc2hPZmZzZXQpLHRoaXMucHJldkxpbmVEYXNoPXIpfX19KEUuQVBJKSxcbi8qKlxuICogQGxpY2Vuc2VcbiAqIGpzUERGIGZpbHRlcnMgUGx1Z0luXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgQXJhcyBBYmJhc2lcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuZnVuY3Rpb24odCl7dmFyIHI9ZnVuY3Rpb24odCl7dmFyIGUscixuLGksYSxvLHMsYyx1LGg7Zm9yKC9bXlxceDAwLVxceEZGXS8udGVzdCh0KSxyPVtdLG49MCxpPSh0Kz1lPVwiXFwwXFwwXFwwXFwwXCIuc2xpY2UodC5sZW5ndGglNHx8NCkpLmxlbmd0aDtpPm47bis9NCkwIT09KGE9KHQuY2hhckNvZGVBdChuKTw8MjQpKyh0LmNoYXJDb2RlQXQobisxKTw8MTYpKyh0LmNoYXJDb2RlQXQobisyKTw8OCkrdC5jaGFyQ29kZUF0KG4rMykpPyhvPShhPSgoYT0oKGE9KChhPShhLShoPWElODUpKS84NSktKHU9YSU4NSkpLzg1KS0oYz1hJTg1KSkvODUpLShzPWElODUpKS84NSklODUsci5wdXNoKG8rMzMscyszMyxjKzMzLHUrMzMsaCszMykpOnIucHVzaCgxMjIpO3JldHVybiBmdW5jdGlvbih0LGUpe2Zvcih2YXIgcj1lO3I+MDtyLS0pdC5wb3AoKX0ocixlLmxlbmd0aCksU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcscikrXCJ+PlwifSxuPWZ1bmN0aW9uKHQpe3ZhciBlLHIsbixpLGEsbz1TdHJpbmcscz1cImxlbmd0aFwiLGM9MjU1LHU9XCJjaGFyQ29kZUF0XCIsaD1cInNsaWNlXCIsbD1cInJlcGxhY2VcIjtmb3IodFtoXSgtMiksdD10W2hdKDAsLTIpW2xdKC9cXHMvZyxcIlwiKVtsXShcInpcIixcIiEhISEhXCIpLG49W10saT0wLGE9KHQrPWU9XCJ1dXV1dVwiW2hdKHRbc10lNXx8NSkpW3NdO2E+aTtpKz01KXI9NTIyMDA2MjUqKHRbdV0oaSktMzMpKzYxNDEyNSoodFt1XShpKzEpLTMzKSs3MjI1Kih0W3VdKGkrMiktMzMpKzg1Kih0W3VdKGkrMyktMzMpKyh0W3VdKGkrNCktMzMpLG4ucHVzaChjJnI+PjI0LGMmcj4+MTYsYyZyPj44LGMmcik7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciByPWU7cj4wO3ItLSl0LnBvcCgpfShuLGVbc10pLG8uZnJvbUNoYXJDb2RlLmFwcGx5KG8sbil9LGk9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFJlZ0V4cCgvXihbMC05QS1GYS1mXXsyfSkrJC8pO2lmKC0xIT09KHQ9dC5yZXBsYWNlKC9cXHMvZyxcIlwiKSkuaW5kZXhPZihcIj5cIikmJih0PXQuc3Vic3RyKDAsdC5pbmRleE9mKFwiPlwiKSkpLHQubGVuZ3RoJTImJih0Kz1cIjBcIiksITE9PT1lLnRlc3QodCkpcmV0dXJuXCJcIjtmb3IodmFyIHI9XCJcIixuPTA7bjx0Lmxlbmd0aDtuKz0yKXIrPVN0cmluZy5mcm9tQ2hhckNvZGUoXCIweFwiKyh0W25dK3RbbisxXSkpO3JldHVybiByfSxhPWZ1bmN0aW9uKHQpe2Zvcih2YXIgcj1uZXcgVWludDhBcnJheSh0Lmxlbmd0aCksbj10Lmxlbmd0aDtuLS07KXJbbl09dC5jaGFyQ29kZUF0KG4pO3JldHVybiB0PShyPWUocikpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtTdHJpbmcuZnJvbUNoYXJDb2RlKGUpfSksXCJcIil9O3QucHJvY2Vzc0RhdGFCeUZpbHRlcnM9ZnVuY3Rpb24odCxlKXt2YXIgbz0wLHM9dHx8XCJcIixjPVtdO2ZvcihcInN0cmluZ1wiPT10eXBlb2YoZT1lfHxbXSkmJihlPVtlXSksbz0wO288ZS5sZW5ndGg7bys9MSlzd2l0Y2goZVtvXSl7Y2FzZVwiQVNDSUk4NURlY29kZVwiOmNhc2VcIi9BU0NJSTg1RGVjb2RlXCI6cz1uKHMpLGMucHVzaChcIi9BU0NJSTg1RW5jb2RlXCIpO2JyZWFrO2Nhc2VcIkFTQ0lJODVFbmNvZGVcIjpjYXNlXCIvQVNDSUk4NUVuY29kZVwiOnM9cihzKSxjLnB1c2goXCIvQVNDSUk4NURlY29kZVwiKTticmVhaztjYXNlXCJBU0NJSUhleERlY29kZVwiOmNhc2VcIi9BU0NJSUhleERlY29kZVwiOnM9aShzKSxjLnB1c2goXCIvQVNDSUlIZXhFbmNvZGVcIik7YnJlYWs7Y2FzZVwiQVNDSUlIZXhFbmNvZGVcIjpjYXNlXCIvQVNDSUlIZXhFbmNvZGVcIjpzPXMuc3BsaXQoXCJcIikubWFwKChmdW5jdGlvbih0KXtyZXR1cm4oXCIwXCIrdC5jaGFyQ29kZUF0KCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMil9KSkuam9pbihcIlwiKStcIj5cIixjLnB1c2goXCIvQVNDSUlIZXhEZWNvZGVcIik7YnJlYWs7Y2FzZVwiRmxhdGVFbmNvZGVcIjpjYXNlXCIvRmxhdGVFbmNvZGVcIjpzPWEocyksYy5wdXNoKFwiL0ZsYXRlRGVjb2RlXCIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCdUaGUgZmlsdGVyOiBcIicrZVtvXSsnXCIgaXMgbm90IGltcGxlbWVudGVkJyl9cmV0dXJue2RhdGE6cyxyZXZlcnNlQ2hhaW46Yy5yZXZlcnNlKCkuam9pbihcIiBcIil9fX0oRS5BUEkpLFxuLyoqXG4gKiBAbGljZW5zZVxuICoganNQREYgZmlsZWxvYWRpbmcgUGx1Z0luXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggQXJhcyBBYmJhc2kgKGFyYXMuYWJiYXNpQGdtYWlsLmNvbSlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuZnVuY3Rpb24odCl7dC5sb2FkRmlsZT1mdW5jdGlvbih0LGUscil7cmV0dXJuIGZ1bmN0aW9uKHQsZSxyKXtlPSExIT09ZSxyPVwiZnVuY3Rpb25cIj09dHlwZW9mIHI/cjpmdW5jdGlvbigpe307dmFyIG49dm9pZCAwO3RyeXtuPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1uZXcgWE1MSHR0cFJlcXVlc3QsaT0wLGE9ZnVuY3Rpb24odCl7dmFyIGU9dC5sZW5ndGgscj1bXSxuPVN0cmluZy5mcm9tQ2hhckNvZGU7Zm9yKGk9MDtpPGU7aSs9MSlyLnB1c2gobigyNTUmdC5jaGFyQ29kZUF0KGkpKSk7cmV0dXJuIHIuam9pbihcIlwiKX07aWYobi5vcGVuKFwiR0VUXCIsdCwhZSksbi5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKSwhMT09PWUmJihuLm9ubG9hZD1mdW5jdGlvbigpezIwMD09PW4uc3RhdHVzP3IoYSh0aGlzLnJlc3BvbnNlVGV4dCkpOnIodm9pZCAwKX0pLG4uc2VuZChudWxsKSxlJiYyMDA9PT1uLnN0YXR1cylyZXR1cm4gYShuLnJlc3BvbnNlVGV4dCl9KHQsZSxyKX1jYXRjaCh0KXt9cmV0dXJuIG59KHQsZSxyKX0sdC5sb2FkSW1hZ2VGaWxlPXQubG9hZEZpbGV9KEUuQVBJKSxmdW5jdGlvbihlKXtmdW5jdGlvbiByKCl7cmV0dXJuKG4uaHRtbDJjYW52YXM/UHJvbWlzZS5yZXNvbHZlKG4uaHRtbDJjYW52YXMpOmltcG9ydChcImh0bWwyY2FudmFzXCIpKS5jYXRjaCgoZnVuY3Rpb24odCl7cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2FkIGh0bWwyY2FudmFzOiBcIit0KSl9KSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGVmYXVsdD90LmRlZmF1bHQ6dH0pKX1mdW5jdGlvbiBpKCl7cmV0dXJuKG4uRE9NUHVyaWZ5P1Byb21pc2UucmVzb2x2ZShuLkRPTVB1cmlmeSk6aW1wb3J0KFwiZG9tcHVyaWZ5XCIpKS5jYXRjaCgoZnVuY3Rpb24odCl7cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2FkIGRvbXB1cmlmeTogXCIrdCkpfSkpLnRoZW4oKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlZmF1bHQ/dC5kZWZhdWx0OnR9KSl9dmFyIGE9ZnVuY3Rpb24oZSl7dmFyIHI9dChlKTtyZXR1cm5cInVuZGVmaW5lZFwiPT09cj9cInVuZGVmaW5lZFwiOlwic3RyaW5nXCI9PT1yfHxlIGluc3RhbmNlb2YgU3RyaW5nP1wic3RyaW5nXCI6XCJudW1iZXJcIj09PXJ8fGUgaW5zdGFuY2VvZiBOdW1iZXI/XCJudW1iZXJcIjpcImZ1bmN0aW9uXCI9PT1yfHxlIGluc3RhbmNlb2YgRnVuY3Rpb24/XCJmdW5jdGlvblwiOmUmJmUuY29uc3RydWN0b3I9PT1BcnJheT9cImFycmF5XCI6ZSYmMT09PWUubm9kZVR5cGU/XCJlbGVtZW50XCI6XCJvYmplY3RcIj09PXI/XCJvYmplY3RcIjpcInVua25vd25cIn0sbz1mdW5jdGlvbih0LGUpe3ZhciByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7Zm9yKHZhciBuIGluIGUuY2xhc3NOYW1lJiYoci5jbGFzc05hbWU9ZS5jbGFzc05hbWUpLGUuaW5uZXJIVE1MJiZlLmRvbXB1cmlmeSYmKHIuaW5uZXJIVE1MPWUuZG9tcHVyaWZ5LnNhbml0aXplKGUuaW5uZXJIVE1MKSksZS5zdHlsZSlyLnN0eWxlW25dPWUuc3R5bGVbbl07cmV0dXJuIHJ9LHM9ZnVuY3Rpb24gdChlKXt2YXIgcj1PYmplY3QuYXNzaWduKHQuY29udmVydChQcm9taXNlLnJlc29sdmUoKSksSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0LnRlbXBsYXRlKSkpLG49dC5jb252ZXJ0KFByb21pc2UucmVzb2x2ZSgpLHIpO3JldHVybiBuPShuPW4uc2V0UHJvZ3Jlc3MoMSx0LDEsW3RdKSkuc2V0KGUpfTsocy5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShQcm9taXNlLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPXMscy5jb252ZXJ0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuX19wcm90b19fPWV8fHMucHJvdG90eXBlLHR9LHMudGVtcGxhdGU9e3Byb3A6e3NyYzpudWxsLGNvbnRhaW5lcjpudWxsLG92ZXJsYXk6bnVsbCxjYW52YXM6bnVsbCxpbWc6bnVsbCxwZGY6bnVsbCxwYWdlU2l6ZTpudWxsLGNhbGxiYWNrOmZ1bmN0aW9uKCl7fX0scHJvZ3Jlc3M6e3ZhbDowLHN0YXRlOm51bGwsbjowLHN0YWNrOltdfSxvcHQ6e2ZpbGVuYW1lOlwiZmlsZS5wZGZcIixtYXJnaW46WzAsMCwwLDBdLGVuYWJsZUxpbmtzOiEwLHg6MCx5OjAsaHRtbDJjYW52YXM6e30sanNQREY6e30sYmFja2dyb3VuZENvbG9yOlwidHJhbnNwYXJlbnRcIn19LHMucHJvdG90eXBlLmZyb209ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aGVuKChmdW5jdGlvbigpe3N3aXRjaChlPWV8fGZ1bmN0aW9uKHQpe3N3aXRjaChhKHQpKXtjYXNlXCJzdHJpbmdcIjpyZXR1cm5cInN0cmluZ1wiO2Nhc2VcImVsZW1lbnRcIjpyZXR1cm5cImNhbnZhc1wiPT09dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP1wiY2FudmFzXCI6XCJlbGVtZW50XCI7ZGVmYXVsdDpyZXR1cm5cInVua25vd25cIn19KHQpKXtjYXNlXCJzdHJpbmdcIjpyZXR1cm4gdGhpcy50aGVuKGkpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNldCh7c3JjOm8oXCJkaXZcIix7aW5uZXJIVE1MOnQsZG9tcHVyaWZ5OmV9KX0pfSkpO2Nhc2VcImVsZW1lbnRcIjpyZXR1cm4gdGhpcy5zZXQoe3NyYzp0fSk7Y2FzZVwiY2FudmFzXCI6cmV0dXJuIHRoaXMuc2V0KHtjYW52YXM6dH0pO2Nhc2VcImltZ1wiOnJldHVybiB0aGlzLnNldCh7aW1nOnR9KTtkZWZhdWx0OnJldHVybiB0aGlzLmVycm9yKFwiVW5rbm93biBzb3VyY2UgdHlwZS5cIil9fSkpfSxzLnByb3RvdHlwZS50bz1mdW5jdGlvbih0KXtzd2l0Y2godCl7Y2FzZVwiY29udGFpbmVyXCI6cmV0dXJuIHRoaXMudG9Db250YWluZXIoKTtjYXNlXCJjYW52YXNcIjpyZXR1cm4gdGhpcy50b0NhbnZhcygpO2Nhc2VcImltZ1wiOnJldHVybiB0aGlzLnRvSW1nKCk7Y2FzZVwicGRmXCI6cmV0dXJuIHRoaXMudG9QZGYoKTtkZWZhdWx0OnJldHVybiB0aGlzLmVycm9yKFwiSW52YWxpZCB0YXJnZXQuXCIpfX0scy5wcm90b3R5cGUudG9Db250YWluZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aGVuTGlzdChbZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wLnNyY3x8dGhpcy5lcnJvcihcIkNhbm5vdCBkdXBsaWNhdGUgLSBubyBzb3VyY2UgSFRNTC5cIil9LGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHJvcC5wYWdlU2l6ZXx8dGhpcy5zZXRQYWdlU2l6ZSgpfV0pLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIHQ9e3Bvc2l0aW9uOlwicmVsYXRpdmVcIixkaXNwbGF5OlwiaW5saW5lLWJsb2NrXCIsd2lkdGg6KFwibnVtYmVyXCIhPXR5cGVvZiB0aGlzLm9wdC53aWR0aHx8aXNOYU4odGhpcy5vcHQud2lkdGgpfHxcIm51bWJlclwiIT10eXBlb2YgdGhpcy5vcHQud2luZG93V2lkdGh8fGlzTmFOKHRoaXMub3B0LndpbmRvd1dpZHRoKT9NYXRoLm1heCh0aGlzLnByb3Auc3JjLmNsaWVudFdpZHRoLHRoaXMucHJvcC5zcmMuc2Nyb2xsV2lkdGgsdGhpcy5wcm9wLnNyYy5vZmZzZXRXaWR0aCk6dGhpcy5vcHQud2luZG93V2lkdGgpK1wicHhcIixsZWZ0OjAscmlnaHQ6MCx0b3A6MCxtYXJnaW46XCJhdXRvXCIsYmFja2dyb3VuZENvbG9yOnRoaXMub3B0LmJhY2tncm91bmRDb2xvcn0sZT1mdW5jdGlvbiB0KGUscil7Zm9yKHZhciBuPTM9PT1lLm5vZGVUeXBlP2RvY3VtZW50LmNyZWF0ZVRleHROb2RlKGUubm9kZVZhbHVlKTplLmNsb25lTm9kZSghMSksaT1lLmZpcnN0Q2hpbGQ7aTtpPWkubmV4dFNpYmxpbmcpITAhPT1yJiYxPT09aS5ub2RlVHlwZSYmXCJTQ1JJUFRcIj09PWkubm9kZU5hbWV8fG4uYXBwZW5kQ2hpbGQodChpLHIpKTtyZXR1cm4gMT09PWUubm9kZVR5cGUmJihcIkNBTlZBU1wiPT09ZS5ub2RlTmFtZT8obi53aWR0aD1lLndpZHRoLG4uaGVpZ2h0PWUuaGVpZ2h0LG4uZ2V0Q29udGV4dChcIjJkXCIpLmRyYXdJbWFnZShlLDAsMCkpOlwiVEVYVEFSRUFcIiE9PWUubm9kZU5hbWUmJlwiU0VMRUNUXCIhPT1lLm5vZGVOYW1lfHwobi52YWx1ZT1lLnZhbHVlKSxuLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsKGZ1bmN0aW9uKCl7bi5zY3JvbGxUb3A9ZS5zY3JvbGxUb3Asbi5zY3JvbGxMZWZ0PWUuc2Nyb2xsTGVmdH0pLCEwKSksbn0odGhpcy5wcm9wLnNyYyx0aGlzLm9wdC5odG1sMmNhbnZhcy5qYXZhc2NyaXB0RW5hYmxlZCk7XCJCT0RZXCI9PT1lLnRhZ05hbWUmJih0LmhlaWdodD1NYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm9mZnNldEhlaWdodCkrXCJweFwiKSx0aGlzLnByb3Aub3ZlcmxheT1vKFwiZGl2XCIse2NsYXNzTmFtZTpcImh0bWwycGRmX19vdmVybGF5XCIsc3R5bGU6e3Bvc2l0aW9uOlwiZml4ZWRcIixvdmVyZmxvdzpcImhpZGRlblwiLHpJbmRleDoxZTMsbGVmdDpcIi0xMDAwMDBweFwiLHJpZ2h0OjAsYm90dG9tOjAsdG9wOjB9fSksdGhpcy5wcm9wLmNvbnRhaW5lcj1vKFwiZGl2XCIse2NsYXNzTmFtZTpcImh0bWwycGRmX19jb250YWluZXJcIixzdHlsZTp0fSksdGhpcy5wcm9wLmNvbnRhaW5lci5hcHBlbmRDaGlsZChlKSx0aGlzLnByb3AuY29udGFpbmVyLmZpcnN0Q2hpbGQuYXBwZW5kQ2hpbGQobyhcImRpdlwiLHtzdHlsZTp7Y2xlYXI6XCJib3RoXCIsYm9yZGVyOlwiMCBub25lIHRyYW5zcGFyZW50XCIsbWFyZ2luOjAscGFkZGluZzowLGhlaWdodDowfX0pKSx0aGlzLnByb3AuY29udGFpbmVyLnN0eWxlLmZsb2F0PVwibm9uZVwiLHRoaXMucHJvcC5vdmVybGF5LmFwcGVuZENoaWxkKHRoaXMucHJvcC5jb250YWluZXIpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5wcm9wLm92ZXJsYXkpLHRoaXMucHJvcC5jb250YWluZXIuZmlyc3RDaGlsZC5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIsdGhpcy5wcm9wLmNvbnRhaW5lci5oZWlnaHQ9TWF0aC5tYXgodGhpcy5wcm9wLmNvbnRhaW5lci5maXJzdENoaWxkLmNsaWVudEhlaWdodCx0aGlzLnByb3AuY29udGFpbmVyLmZpcnN0Q2hpbGQuc2Nyb2xsSGVpZ2h0LHRoaXMucHJvcC5jb250YWluZXIuZmlyc3RDaGlsZC5vZmZzZXRIZWlnaHQpK1wicHhcIn0pKX0scy5wcm90b3R5cGUudG9DYW52YXM9ZnVuY3Rpb24oKXt2YXIgdD1bZnVuY3Rpb24oKXtyZXR1cm4gZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnByb3AuY29udGFpbmVyKXx8dGhpcy50b0NvbnRhaW5lcigpfV07cmV0dXJuIHRoaXMudGhlbkxpc3QodCkudGhlbihyKS50aGVuKChmdW5jdGlvbih0KXt2YXIgZT1PYmplY3QuYXNzaWduKHt9LHRoaXMub3B0Lmh0bWwyY2FudmFzKTtyZXR1cm4gZGVsZXRlIGUub25yZW5kZXJlZCx0KHRoaXMucHJvcC5jb250YWluZXIsZSl9KSkudGhlbigoZnVuY3Rpb24odCl7KHRoaXMub3B0Lmh0bWwyY2FudmFzLm9ucmVuZGVyZWR8fGZ1bmN0aW9uKCl7fSkodCksdGhpcy5wcm9wLmNhbnZhcz10LGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5wcm9wLm92ZXJsYXkpfSkpfSxzLnByb3RvdHlwZS50b0NvbnRleHQyZD1mdW5jdGlvbigpe3ZhciB0PVtmdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMucHJvcC5jb250YWluZXIpfHx0aGlzLnRvQ29udGFpbmVyKCl9XTtyZXR1cm4gdGhpcy50aGVuTGlzdCh0KS50aGVuKHIpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3B0LmpzUERGLHI9dGhpcy5vcHQuZm9udEZhY2VzLG49XCJudW1iZXJcIiE9dHlwZW9mIHRoaXMub3B0LndpZHRofHxpc05hTih0aGlzLm9wdC53aWR0aCl8fFwibnVtYmVyXCIhPXR5cGVvZiB0aGlzLm9wdC53aW5kb3dXaWR0aHx8aXNOYU4odGhpcy5vcHQud2luZG93V2lkdGgpPzE6dGhpcy5vcHQud2lkdGgvdGhpcy5vcHQud2luZG93V2lkdGgsaT1PYmplY3QuYXNzaWduKHthc3luYzohMCxhbGxvd1RhaW50OiEwLHNjYWxlOm4sc2Nyb2xsWDp0aGlzLm9wdC5zY3JvbGxYfHwwLHNjcm9sbFk6dGhpcy5vcHQuc2Nyb2xsWXx8MCxiYWNrZ3JvdW5kQ29sb3I6XCIjZmZmZmZmXCIsaW1hZ2VUaW1lb3V0OjE1ZTMsbG9nZ2luZzohMCxwcm94eTpudWxsLHJlbW92ZUNvbnRhaW5lcjohMCxmb3JlaWduT2JqZWN0UmVuZGVyaW5nOiExLHVzZUNPUlM6ITF9LHRoaXMub3B0Lmh0bWwyY2FudmFzKTtpZihkZWxldGUgaS5vbnJlbmRlcmVkLGUuY29udGV4dDJkLmF1dG9QYWdpbmc9dm9pZCAwPT09dGhpcy5vcHQuYXV0b1BhZ2luZ3x8dGhpcy5vcHQuYXV0b1BhZ2luZyxlLmNvbnRleHQyZC5wb3NYPXRoaXMub3B0LngsZS5jb250ZXh0MmQucG9zWT10aGlzLm9wdC55LGUuY29udGV4dDJkLm1hcmdpbj10aGlzLm9wdC5tYXJnaW4sZS5jb250ZXh0MmQuZm9udEZhY2VzPXIscilmb3IodmFyIGE9MDthPHIubGVuZ3RoOysrYSl7dmFyIG89clthXSxzPW8uc3JjLmZpbmQoKGZ1bmN0aW9uKHQpe3JldHVyblwidHJ1ZXR5cGVcIj09PXQuZm9ybWF0fSkpO3MmJmUuYWRkRm9udChzLnVybCxvLnJlZi5uYW1lLG8ucmVmLnN0eWxlKX1yZXR1cm4gaS53aW5kb3dIZWlnaHQ9aS53aW5kb3dIZWlnaHR8fDAsaS53aW5kb3dIZWlnaHQ9MD09aS53aW5kb3dIZWlnaHQ/TWF0aC5tYXgodGhpcy5wcm9wLmNvbnRhaW5lci5jbGllbnRIZWlnaHQsdGhpcy5wcm9wLmNvbnRhaW5lci5zY3JvbGxIZWlnaHQsdGhpcy5wcm9wLmNvbnRhaW5lci5vZmZzZXRIZWlnaHQpOmkud2luZG93SGVpZ2h0LGUuY29udGV4dDJkLnNhdmUoITApLHQodGhpcy5wcm9wLmNvbnRhaW5lcixpKX0pKS50aGVuKChmdW5jdGlvbih0KXt0aGlzLm9wdC5qc1BERi5jb250ZXh0MmQucmVzdG9yZSghMCksKHRoaXMub3B0Lmh0bWwyY2FudmFzLm9ucmVuZGVyZWR8fGZ1bmN0aW9uKCl7fSkodCksdGhpcy5wcm9wLmNhbnZhcz10LGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5wcm9wLm92ZXJsYXkpfSkpfSxzLnByb3RvdHlwZS50b0ltZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3AuY2FudmFzfHx0aGlzLnRvQ2FudmFzKCl9XSkudGhlbigoZnVuY3Rpb24oKXt2YXIgdD10aGlzLnByb3AuY2FudmFzLnRvRGF0YVVSTChcImltYWdlL1wiK3RoaXMub3B0LmltYWdlLnR5cGUsdGhpcy5vcHQuaW1hZ2UucXVhbGl0eSk7dGhpcy5wcm9wLmltZz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpLHRoaXMucHJvcC5pbWcuc3JjPXR9KSl9LHMucHJvdG90eXBlLnRvUGRmPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhlbkxpc3QoW2Z1bmN0aW9uKCl7cmV0dXJuIHRoaXMudG9Db250ZXh0MmQoKX1dKS50aGVuKChmdW5jdGlvbigpe3RoaXMucHJvcC5wZGY9dGhpcy5wcm9wLnBkZnx8dGhpcy5vcHQuanNQREZ9KSl9LHMucHJvdG90eXBlLm91dHB1dD1mdW5jdGlvbih0LGUscil7cmV0dXJuXCJpbWdcIj09PShyPXJ8fFwicGRmXCIpLnRvTG93ZXJDYXNlKCl8fFwiaW1hZ2VcIj09PXIudG9Mb3dlckNhc2UoKT90aGlzLm91dHB1dEltZyh0LGUpOnRoaXMub3V0cHV0UGRmKHQsZSl9LHMucHJvdG90eXBlLm91dHB1dFBkZj1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3AucGRmfHx0aGlzLnRvUGRmKCl9XSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcm9wLnBkZi5vdXRwdXQodCxlKX0pKX0scy5wcm90b3R5cGUub3V0cHV0SW1nPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3AuaW1nfHx0aGlzLnRvSW1nKCl9XSkudGhlbigoZnVuY3Rpb24oKXtzd2l0Y2godCl7Y2FzZSB2b2lkIDA6Y2FzZVwiaW1nXCI6cmV0dXJuIHRoaXMucHJvcC5pbWc7Y2FzZVwiZGF0YXVyaXN0cmluZ1wiOmNhc2VcImRhdGF1cmxzdHJpbmdcIjpyZXR1cm4gdGhpcy5wcm9wLmltZy5zcmM7Y2FzZVwiZGF0YXVyaVwiOmNhc2VcImRhdGF1cmxcIjpyZXR1cm4gZG9jdW1lbnQubG9jYXRpb24uaHJlZj10aGlzLnByb3AuaW1nLnNyYztkZWZhdWx0OnRocm93J0ltYWdlIG91dHB1dCB0eXBlIFwiJyt0KydcIiBpcyBub3Qgc3VwcG9ydGVkLid9fSkpfSxzLnByb3RvdHlwZS5zYXZlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3AucGRmfHx0aGlzLnRvUGRmKCl9XSkuc2V0KHQ/e2ZpbGVuYW1lOnR9Om51bGwpLnRoZW4oKGZ1bmN0aW9uKCl7dGhpcy5wcm9wLnBkZi5zYXZlKHRoaXMub3B0LmZpbGVuYW1lKX0pKX0scy5wcm90b3R5cGUuZG9DYWxsYmFjaz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRoZW5MaXN0KFtmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb3AucGRmfHx0aGlzLnRvUGRmKCl9XSkudGhlbigoZnVuY3Rpb24oKXt0aGlzLnByb3AuY2FsbGJhY2sodGhpcy5wcm9wLnBkZil9KSl9LHMucHJvdG90eXBlLnNldD1mdW5jdGlvbih0KXtpZihcIm9iamVjdFwiIT09YSh0KSlyZXR1cm4gdGhpczt2YXIgZT1PYmplY3Qua2V5cyh0fHx7fSkubWFwKChmdW5jdGlvbihlKXtpZihlIGluIHMudGVtcGxhdGUucHJvcClyZXR1cm4gZnVuY3Rpb24oKXt0aGlzLnByb3BbZV09dFtlXX07c3dpdGNoKGUpe2Nhc2VcIm1hcmdpblwiOnJldHVybiB0aGlzLnNldE1hcmdpbi5iaW5kKHRoaXMsdC5tYXJnaW4pO2Nhc2VcImpzUERGXCI6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0LmpzUERGPXQuanNQREYsdGhpcy5zZXRQYWdlU2l6ZSgpfTtjYXNlXCJwYWdlU2l6ZVwiOnJldHVybiB0aGlzLnNldFBhZ2VTaXplLmJpbmQodGhpcyx0LnBhZ2VTaXplKTtkZWZhdWx0OnJldHVybiBmdW5jdGlvbigpe3RoaXMub3B0W2VdPXRbZV19fX0pLHRoaXMpO3JldHVybiB0aGlzLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhlbkxpc3QoZSl9KSl9LHMucHJvdG90eXBlLmdldD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRoZW4oKGZ1bmN0aW9uKCl7dmFyIHI9dCBpbiBzLnRlbXBsYXRlLnByb3A/dGhpcy5wcm9wW3RdOnRoaXMub3B0W3RdO3JldHVybiBlP2Uocik6cn0pKX0scy5wcm90b3R5cGUuc2V0TWFyZ2luPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW4oKGZ1bmN0aW9uKCl7c3dpdGNoKGEodCkpe2Nhc2VcIm51bWJlclwiOnQ9W3QsdCx0LHRdO2Nhc2VcImFycmF5XCI6aWYoMj09PXQubGVuZ3RoJiYodD1bdFswXSx0WzFdLHRbMF0sdFsxXV0pLDQ9PT10Lmxlbmd0aClicmVhaztkZWZhdWx0OnJldHVybiB0aGlzLmVycm9yKFwiSW52YWxpZCBtYXJnaW4gYXJyYXkuXCIpfXRoaXMub3B0Lm1hcmdpbj10fSkpLnRoZW4odGhpcy5zZXRQYWdlU2l6ZSl9LHMucHJvdG90eXBlLnNldFBhZ2VTaXplPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxlKXtyZXR1cm4gTWF0aC5mbG9vcih0KmUvNzIqOTYpfXJldHVybiB0aGlzLnRoZW4oKGZ1bmN0aW9uKCl7KHQ9dHx8RS5nZXRQYWdlU2l6ZSh0aGlzLm9wdC5qc1BERikpLmhhc093blByb3BlcnR5KFwiaW5uZXJcIil8fCh0LmlubmVyPXt3aWR0aDp0LndpZHRoLXRoaXMub3B0Lm1hcmdpblsxXS10aGlzLm9wdC5tYXJnaW5bM10saGVpZ2h0OnQuaGVpZ2h0LXRoaXMub3B0Lm1hcmdpblswXS10aGlzLm9wdC5tYXJnaW5bMl19LHQuaW5uZXIucHg9e3dpZHRoOmUodC5pbm5lci53aWR0aCx0LmspLGhlaWdodDplKHQuaW5uZXIuaGVpZ2h0LHQuayl9LHQuaW5uZXIucmF0aW89dC5pbm5lci5oZWlnaHQvdC5pbm5lci53aWR0aCksdGhpcy5wcm9wLnBhZ2VTaXplPXR9KSl9LHMucHJvdG90eXBlLnNldFByb2dyZXNzPWZ1bmN0aW9uKHQsZSxyLG4pe3JldHVybiBudWxsIT10JiYodGhpcy5wcm9ncmVzcy52YWw9dCksbnVsbCE9ZSYmKHRoaXMucHJvZ3Jlc3Muc3RhdGU9ZSksbnVsbCE9ciYmKHRoaXMucHJvZ3Jlc3Mubj1yKSxudWxsIT1uJiYodGhpcy5wcm9ncmVzcy5zdGFjaz1uKSx0aGlzLnByb2dyZXNzLnJhdGlvPXRoaXMucHJvZ3Jlc3MudmFsL3RoaXMucHJvZ3Jlc3Muc3RhdGUsdGhpc30scy5wcm90b3R5cGUudXBkYXRlUHJvZ3Jlc3M9ZnVuY3Rpb24odCxlLHIsbil7cmV0dXJuIHRoaXMuc2V0UHJvZ3Jlc3ModD90aGlzLnByb2dyZXNzLnZhbCt0Om51bGwsZXx8bnVsbCxyP3RoaXMucHJvZ3Jlc3MubityOm51bGwsbj90aGlzLnByb2dyZXNzLnN0YWNrLmNvbmNhdChuKTpudWxsKX0scy5wcm90b3R5cGUudGhlbj1mdW5jdGlvbih0LGUpe3ZhciByPXRoaXM7cmV0dXJuIHRoaXMudGhlbkNvcmUodCxlLChmdW5jdGlvbih0LGUpe3JldHVybiByLnVwZGF0ZVByb2dyZXNzKG51bGwsbnVsbCwxLFt0XSksUHJvbWlzZS5wcm90b3R5cGUudGhlbi5jYWxsKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVybiByLnVwZGF0ZVByb2dyZXNzKG51bGwsdCksZX0pKS50aGVuKHQsZSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHIudXBkYXRlUHJvZ3Jlc3MoMSksdH0pKX0pKX0scy5wcm90b3R5cGUudGhlbkNvcmU9ZnVuY3Rpb24odCxlLHIpe3I9cnx8UHJvbWlzZS5wcm90b3R5cGUudGhlbjt0JiYodD10LmJpbmQodGhpcykpLGUmJihlPWUuYmluZCh0aGlzKSk7dmFyIG49LTEhPT1Qcm9taXNlLnRvU3RyaW5nKCkuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikmJlwiUHJvbWlzZVwiPT09UHJvbWlzZS5uYW1lP3RoaXM6cy5jb252ZXJ0KE9iamVjdC5hc3NpZ24oe30sdGhpcyksUHJvbWlzZS5wcm90b3R5cGUpLGk9ci5jYWxsKG4sdCxlKTtyZXR1cm4gcy5jb252ZXJ0KGksdGhpcy5fX3Byb3RvX18pfSxzLnByb3RvdHlwZS50aGVuRXh0ZXJuYWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gUHJvbWlzZS5wcm90b3R5cGUudGhlbi5jYWxsKHRoaXMsdCxlKX0scy5wcm90b3R5cGUudGhlbkxpc3Q9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtlPWUudGhlbkNvcmUodCl9KSksZX0scy5wcm90b3R5cGUuY2F0Y2g9ZnVuY3Rpb24odCl7dCYmKHQ9dC5iaW5kKHRoaXMpKTt2YXIgZT1Qcm9taXNlLnByb3RvdHlwZS5jYXRjaC5jYWxsKHRoaXMsdCk7cmV0dXJuIHMuY29udmVydChlLHRoaXMpfSxzLnByb3RvdHlwZS5jYXRjaEV4dGVybmFsPWZ1bmN0aW9uKHQpe3JldHVybiBQcm9taXNlLnByb3RvdHlwZS5jYXRjaC5jYWxsKHRoaXMsdCl9LHMucHJvdG90eXBlLmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW4oKGZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKHQpfSkpfSxzLnByb3RvdHlwZS51c2luZz1zLnByb3RvdHlwZS5zZXQscy5wcm90b3R5cGUuc2F2ZUFzPXMucHJvdG90eXBlLnNhdmUscy5wcm90b3R5cGUuZXhwb3J0PXMucHJvdG90eXBlLm91dHB1dCxzLnByb3RvdHlwZS5ydW49cy5wcm90b3R5cGUudGhlbixFLmdldFBhZ2VTaXplPWZ1bmN0aW9uKGUscixuKXtpZihcIm9iamVjdFwiPT09dChlKSl7dmFyIGk9ZTtlPWkub3JpZW50YXRpb24scj1pLnVuaXR8fHIsbj1pLmZvcm1hdHx8bn1yPXJ8fFwibW1cIixuPW58fFwiYTRcIixlPShcIlwiKyhlfHxcIlBcIikpLnRvTG93ZXJDYXNlKCk7dmFyIGEsbz0oXCJcIituKS50b0xvd2VyQ2FzZSgpLHM9e2EwOlsyMzgzLjk0LDMzNzAuMzldLGExOlsxNjgzLjc4LDIzODMuOTRdLGEyOlsxMTkwLjU1LDE2ODMuNzhdLGEzOls4NDEuODksMTE5MC41NV0sYTQ6WzU5NS4yOCw4NDEuODldLGE1Ols0MTkuNTMsNTk1LjI4XSxhNjpbMjk3LjY0LDQxOS41M10sYTc6WzIwOS43NiwyOTcuNjRdLGE4OlsxNDcuNCwyMDkuNzZdLGE5OlsxMDQuODgsMTQ3LjRdLGExMDpbNzMuNywxMDQuODhdLGIwOlsyODM0LjY1LDQwMDguMTldLGIxOlsyMDA0LjA5LDI4MzQuNjVdLGIyOlsxNDE3LjMyLDIwMDQuMDldLGIzOlsxMDAwLjYzLDE0MTcuMzJdLGI0Ols3MDguNjYsMTAwMC42M10sYjU6WzQ5OC45LDcwOC42Nl0sYjY6WzM1NC4zMyw0OTguOV0sYjc6WzI0OS40NSwzNTQuMzNdLGI4OlsxNzUuNzUsMjQ5LjQ1XSxiOTpbMTI0LjcyLDE3NS43NV0sYjEwOls4Ny44NywxMjQuNzJdLGMwOlsyNTk5LjM3LDM2NzYuNTRdLGMxOlsxODM2Ljg1LDI1OTkuMzddLGMyOlsxMjk4LjI3LDE4MzYuODVdLGMzOls5MTguNDMsMTI5OC4yN10sYzQ6WzY0OS4xMyw5MTguNDNdLGM1Ols0NTkuMjEsNjQ5LjEzXSxjNjpbMzIzLjE1LDQ1OS4yMV0sYzc6WzIyOS42MSwzMjMuMTVdLGM4OlsxNjEuNTcsMjI5LjYxXSxjOTpbMTEzLjM5LDE2MS41N10sYzEwOls3OS4zNywxMTMuMzldLGRsOlszMTEuODEsNjIzLjYyXSxsZXR0ZXI6WzYxMiw3OTJdLFwiZ292ZXJubWVudC1sZXR0ZXJcIjpbNTc2LDc1Nl0sbGVnYWw6WzYxMiwxMDA4XSxcImp1bmlvci1sZWdhbFwiOls1NzYsMzYwXSxsZWRnZXI6WzEyMjQsNzkyXSx0YWJsb2lkOls3OTIsMTIyNF0sXCJjcmVkaXQtY2FyZFwiOlsxNTMsMjQzXX07c3dpdGNoKHIpe2Nhc2VcInB0XCI6YT0xO2JyZWFrO2Nhc2VcIm1tXCI6YT03Mi8yNS40O2JyZWFrO2Nhc2VcImNtXCI6YT03Mi8yLjU0O2JyZWFrO2Nhc2VcImluXCI6YT03MjticmVhaztjYXNlXCJweFwiOmE9Ljc1O2JyZWFrO2Nhc2VcInBjXCI6Y2FzZVwiZW1cIjphPTEyO2JyZWFrO2Nhc2VcImV4XCI6YT02O2JyZWFrO2RlZmF1bHQ6dGhyb3dcIkludmFsaWQgdW5pdDogXCIrcn12YXIgYyx1PTAsaD0wO2lmKHMuaGFzT3duUHJvcGVydHkobykpdT1zW29dWzFdL2EsaD1zW29dWzBdL2E7ZWxzZSB0cnl7dT1uWzFdLGg9blswXX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGZvcm1hdDogXCIrbil9aWYoXCJwXCI9PT1lfHxcInBvcnRyYWl0XCI9PT1lKWU9XCJwXCIsaD51JiYoYz1oLGg9dSx1PWMpO2Vsc2V7aWYoXCJsXCIhPT1lJiZcImxhbmRzY2FwZVwiIT09ZSl0aHJvd1wiSW52YWxpZCBvcmllbnRhdGlvbjogXCIrZTtlPVwibFwiLHU+aCYmKGM9aCxoPXUsdT1jKX1yZXR1cm57d2lkdGg6aCxoZWlnaHQ6dSx1bml0OnIsazphLG9yaWVudGF0aW9uOmV9fSxlLmh0bWw9ZnVuY3Rpb24odCxlKXsoZT1lfHx7fSkuY2FsbGJhY2s9ZS5jYWxsYmFja3x8ZnVuY3Rpb24oKXt9LGUuaHRtbDJjYW52YXM9ZS5odG1sMmNhbnZhc3x8e30sZS5odG1sMmNhbnZhcy5jYW52YXM9ZS5odG1sMmNhbnZhcy5jYW52YXN8fHRoaXMuY2FudmFzLGUuanNQREY9ZS5qc1BERnx8dGhpcyxlLmZvbnRGYWNlcz1lLmZvbnRGYWNlcz9lLmZvbnRGYWNlcy5tYXAoanQpOm51bGw7dmFyIHI9bmV3IHMoZSk7cmV0dXJuIGUud29ya2VyP3I6ci5mcm9tKHQpLmRvQ2FsbGJhY2soKX19KEUuQVBJKSxFLkFQSS5hZGRKUz1mdW5jdGlvbih0KXtyZXR1cm4gSHQ9dCx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwb3N0UHV0UmVzb3VyY2VzXCIsKGZ1bmN0aW9uKCl7VXQ9dGhpcy5pbnRlcm5hbC5uZXdPYmplY3QoKSx0aGlzLmludGVybmFsLm91dChcIjw8XCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiL05hbWVzIFsoRW1iZWRkZWRKUykgXCIrKFV0KzEpK1wiIDAgUl1cIiksdGhpcy5pbnRlcm5hbC5vdXQoXCI+PlwiKSx0aGlzLmludGVybmFsLm91dChcImVuZG9ialwiKSx6dD10aGlzLmludGVybmFsLm5ld09iamVjdCgpLHRoaXMuaW50ZXJuYWwub3V0KFwiPDxcIiksdGhpcy5pbnRlcm5hbC5vdXQoXCIvUyAvSmF2YVNjcmlwdFwiKSx0aGlzLmludGVybmFsLm91dChcIi9KUyAoXCIrSHQrXCIpXCIpLHRoaXMuaW50ZXJuYWwub3V0KFwiPj5cIiksdGhpcy5pbnRlcm5hbC5vdXQoXCJlbmRvYmpcIil9KSksdGhpcy5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicHV0Q2F0YWxvZ1wiLChmdW5jdGlvbigpe3ZvaWQgMCE9PVV0JiZ2b2lkIDAhPT16dCYmdGhpcy5pbnRlcm5hbC5vdXQoXCIvTmFtZXMgPDwvSmF2YVNjcmlwdCBcIitVdCtcIiAwIFI+PlwiKX0pKSx0aGlzfSxcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNCBTdGV2ZW4gU3B1bmdpbiAoVHdlbHZlVG9uZSBMTEMpICBzdGV2ZW5AdHdlbHZldG9uZS50dlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5mdW5jdGlvbih0KXt2YXIgZTt0LmV2ZW50cy5wdXNoKFtcInBvc3RQdXRSZXNvdXJjZXNcIixmdW5jdGlvbigpe3ZhciB0PXRoaXMscj0vXihcXGQrKSAwIG9iaiQvO2lmKHRoaXMub3V0bGluZS5yb290LmNoaWxkcmVuLmxlbmd0aD4wKWZvcih2YXIgbj10Lm91dGxpbmUucmVuZGVyKCkuc3BsaXQoL1xcclxcbi8pLGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIGE9bltpXSxvPXIuZXhlYyhhKTtpZihudWxsIT1vKXt2YXIgcz1vWzFdO3QuaW50ZXJuYWwubmV3T2JqZWN0RGVmZXJyZWRCZWdpbihzLCExKX10LmludGVybmFsLndyaXRlKGEpfWlmKHRoaXMub3V0bGluZS5jcmVhdGVOYW1lZERlc3RpbmF0aW9ucyl7dmFyIGM9dGhpcy5pbnRlcm5hbC5wYWdlcy5sZW5ndGgsdT1bXTtmb3IoaT0wO2k8YztpKyspe3ZhciBoPXQuaW50ZXJuYWwubmV3T2JqZWN0KCk7dS5wdXNoKGgpO3ZhciBsPXQuaW50ZXJuYWwuZ2V0UGFnZUluZm8oaSsxKTt0LmludGVybmFsLndyaXRlKFwiPDwgL0RbXCIrbC5vYmpJZCtcIiAwIFIgL1hZWiBudWxsIG51bGwgbnVsbF0+PiBlbmRvYmpcIil9dmFyIGY9dC5pbnRlcm5hbC5uZXdPYmplY3QoKTt0LmludGVybmFsLndyaXRlKFwiPDwgL05hbWVzIFsgXCIpO2ZvcihpPTA7aTx1Lmxlbmd0aDtpKyspdC5pbnRlcm5hbC53cml0ZShcIihwYWdlX1wiKyhpKzEpK1wiKVwiK3VbaV0rXCIgMCBSXCIpO3QuaW50ZXJuYWwud3JpdGUoXCIgXSA+PlwiLFwiZW5kb2JqXCIpLGU9dC5pbnRlcm5hbC5uZXdPYmplY3QoKSx0LmludGVybmFsLndyaXRlKFwiPDwgL0Rlc3RzIFwiK2YrXCIgMCBSXCIpLHQuaW50ZXJuYWwud3JpdGUoXCI+PlwiLFwiZW5kb2JqXCIpfX1dKSx0LmV2ZW50cy5wdXNoKFtcInB1dENhdGFsb2dcIixmdW5jdGlvbigpe3RoaXMub3V0bGluZS5yb290LmNoaWxkcmVuLmxlbmd0aD4wJiYodGhpcy5pbnRlcm5hbC53cml0ZShcIi9PdXRsaW5lc1wiLHRoaXMub3V0bGluZS5tYWtlUmVmKHRoaXMub3V0bGluZS5yb290KSksdGhpcy5vdXRsaW5lLmNyZWF0ZU5hbWVkRGVzdGluYXRpb25zJiZ0aGlzLmludGVybmFsLndyaXRlKFwiL05hbWVzIFwiK2UrXCIgMCBSXCIpKX1dKSx0LmV2ZW50cy5wdXNoKFtcImluaXRpYWxpemVkXCIsZnVuY3Rpb24oKXt2YXIgdD10aGlzO3Qub3V0bGluZT17Y3JlYXRlTmFtZWREZXN0aW5hdGlvbnM6ITEscm9vdDp7Y2hpbGRyZW46W119fSx0Lm91dGxpbmUuYWRkPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj17dGl0bGU6ZSxvcHRpb25zOnIsY2hpbGRyZW46W119O3JldHVybiBudWxsPT10JiYodD10aGlzLnJvb3QpLHQuY2hpbGRyZW4ucHVzaChuKSxufSx0Lm91dGxpbmUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3R4PXt9LHRoaXMuY3R4LnZhbD1cIlwiLHRoaXMuY3R4LnBkZj10LHRoaXMuZ2VuSWRzX3IodGhpcy5yb290KSx0aGlzLnJlbmRlclJvb3QodGhpcy5yb290KSx0aGlzLnJlbmRlckl0ZW1zKHRoaXMucm9vdCksdGhpcy5jdHgudmFsfSx0Lm91dGxpbmUuZ2VuSWRzX3I9ZnVuY3Rpb24oZSl7ZS5pZD10LmludGVybmFsLm5ld09iamVjdERlZmVycmVkKCk7Zm9yKHZhciByPTA7cjxlLmNoaWxkcmVuLmxlbmd0aDtyKyspdGhpcy5nZW5JZHNfcihlLmNoaWxkcmVuW3JdKX0sdC5vdXRsaW5lLnJlbmRlclJvb3Q9ZnVuY3Rpb24odCl7dGhpcy5vYmpTdGFydCh0KSx0aGlzLmxpbmUoXCIvVHlwZSAvT3V0bGluZXNcIiksdC5jaGlsZHJlbi5sZW5ndGg+MCYmKHRoaXMubGluZShcIi9GaXJzdCBcIit0aGlzLm1ha2VSZWYodC5jaGlsZHJlblswXSkpLHRoaXMubGluZShcIi9MYXN0IFwiK3RoaXMubWFrZVJlZih0LmNoaWxkcmVuW3QuY2hpbGRyZW4ubGVuZ3RoLTFdKSkpLHRoaXMubGluZShcIi9Db3VudCBcIit0aGlzLmNvdW50X3Ioe2NvdW50OjB9LHQpKSx0aGlzLm9iakVuZCgpfSx0Lm91dGxpbmUucmVuZGVySXRlbXM9ZnVuY3Rpb24oZSl7Zm9yKHZhciByPXRoaXMuY3R4LnBkZi5pbnRlcm5hbC5nZXRWZXJ0aWNhbENvb3JkaW5hdGVTdHJpbmcsbj0wO248ZS5jaGlsZHJlbi5sZW5ndGg7bisrKXt2YXIgaT1lLmNoaWxkcmVuW25dO3RoaXMub2JqU3RhcnQoaSksdGhpcy5saW5lKFwiL1RpdGxlIFwiK3RoaXMubWFrZVN0cmluZyhpLnRpdGxlKSksdGhpcy5saW5lKFwiL1BhcmVudCBcIit0aGlzLm1ha2VSZWYoZSkpLG4+MCYmdGhpcy5saW5lKFwiL1ByZXYgXCIrdGhpcy5tYWtlUmVmKGUuY2hpbGRyZW5bbi0xXSkpLG48ZS5jaGlsZHJlbi5sZW5ndGgtMSYmdGhpcy5saW5lKFwiL05leHQgXCIrdGhpcy5tYWtlUmVmKGUuY2hpbGRyZW5bbisxXSkpLGkuY2hpbGRyZW4ubGVuZ3RoPjAmJih0aGlzLmxpbmUoXCIvRmlyc3QgXCIrdGhpcy5tYWtlUmVmKGkuY2hpbGRyZW5bMF0pKSx0aGlzLmxpbmUoXCIvTGFzdCBcIit0aGlzLm1ha2VSZWYoaS5jaGlsZHJlbltpLmNoaWxkcmVuLmxlbmd0aC0xXSkpKTt2YXIgYT10aGlzLmNvdW50PXRoaXMuY291bnRfcih7Y291bnQ6MH0saSk7aWYoYT4wJiZ0aGlzLmxpbmUoXCIvQ291bnQgXCIrYSksaS5vcHRpb25zJiZpLm9wdGlvbnMucGFnZU51bWJlcil7dmFyIG89dC5pbnRlcm5hbC5nZXRQYWdlSW5mbyhpLm9wdGlvbnMucGFnZU51bWJlcik7dGhpcy5saW5lKFwiL0Rlc3QgW1wiK28ub2JqSWQrXCIgMCBSIC9YWVogMCBcIityKDApK1wiIDBdXCIpfXRoaXMub2JqRW5kKCl9Zm9yKHZhciBzPTA7czxlLmNoaWxkcmVuLmxlbmd0aDtzKyspdGhpcy5yZW5kZXJJdGVtcyhlLmNoaWxkcmVuW3NdKX0sdC5vdXRsaW5lLmxpbmU9ZnVuY3Rpb24odCl7dGhpcy5jdHgudmFsKz10K1wiXFxyXFxuXCJ9LHQub3V0bGluZS5tYWtlUmVmPWZ1bmN0aW9uKHQpe3JldHVybiB0LmlkK1wiIDAgUlwifSx0Lm91dGxpbmUubWFrZVN0cmluZz1mdW5jdGlvbihlKXtyZXR1cm5cIihcIit0LmludGVybmFsLnBkZkVzY2FwZShlKStcIilcIn0sdC5vdXRsaW5lLm9ialN0YXJ0PWZ1bmN0aW9uKHQpe3RoaXMuY3R4LnZhbCs9XCJcXHJcXG5cIit0LmlkK1wiIDAgb2JqXFxyXFxuPDxcXHJcXG5cIn0sdC5vdXRsaW5lLm9iakVuZD1mdW5jdGlvbigpe3RoaXMuY3R4LnZhbCs9XCI+PiBcXHJcXG5lbmRvYmpcXHJcXG5cIn0sdC5vdXRsaW5lLmNvdW50X3I9ZnVuY3Rpb24odCxlKXtmb3IodmFyIHI9MDtyPGUuY2hpbGRyZW4ubGVuZ3RoO3IrKyl0LmNvdW50KyssdGhpcy5jb3VudF9yKHQsZS5jaGlsZHJlbltyXSk7cmV0dXJuIHQuY291bnR9fV0pfShFLkFQSSksXG4vKipcbiAqIEBsaWNlbnNlXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmZ1bmN0aW9uKHQpe3ZhciBlPVsxOTIsMTkzLDE5NCwxOTUsMTk2LDE5NywxOTgsMTk5XTt0LnByb2Nlc3NKUEVHPWZ1bmN0aW9uKHQscixuLGksYSxvKXt2YXIgcyxjPXRoaXMuZGVjb2RlLkRDVF9ERUNPREUsdT1udWxsO2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0fHx0aGlzLl9fYWRkaW1hZ2VfXy5pc0FycmF5QnVmZmVyKHQpfHx0aGlzLl9fYWRkaW1hZ2VfXy5pc0FycmF5QnVmZmVyVmlldyh0KSl7c3dpdGNoKHQ9YXx8dCx0PXRoaXMuX19hZGRpbWFnZV9fLmlzQXJyYXlCdWZmZXIodCk/bmV3IFVpbnQ4QXJyYXkodCk6dCwocz1mdW5jdGlvbih0KXtmb3IodmFyIHIsbj0yNTYqdC5jaGFyQ29kZUF0KDQpK3QuY2hhckNvZGVBdCg1KSxpPXQubGVuZ3RoLGE9e3dpZHRoOjAsaGVpZ2h0OjAsbnVtY29tcG9uZW50czoxfSxvPTQ7bzxpO28rPTIpe2lmKG8rPW4sLTEhPT1lLmluZGV4T2YodC5jaGFyQ29kZUF0KG8rMSkpKXtyPTI1Nip0LmNoYXJDb2RlQXQobys1KSt0LmNoYXJDb2RlQXQobys2KSxhPXt3aWR0aDoyNTYqdC5jaGFyQ29kZUF0KG8rNykrdC5jaGFyQ29kZUF0KG8rOCksaGVpZ2h0OnIsbnVtY29tcG9uZW50czp0LmNoYXJDb2RlQXQobys5KX07YnJlYWt9bj0yNTYqdC5jaGFyQ29kZUF0KG8rMikrdC5jaGFyQ29kZUF0KG8rMyl9cmV0dXJuIGF9KHQ9dGhpcy5fX2FkZGltYWdlX18uaXNBcnJheUJ1ZmZlclZpZXcodCk/dGhpcy5fX2FkZGltYWdlX18uYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyh0KTp0KSkubnVtY29tcG9uZW50cyl7Y2FzZSAxOm89dGhpcy5jb2xvcl9zcGFjZXMuREVWSUNFX0dSQVk7YnJlYWs7Y2FzZSA0Om89dGhpcy5jb2xvcl9zcGFjZXMuREVWSUNFX0NNWUs7YnJlYWs7Y2FzZSAzOm89dGhpcy5jb2xvcl9zcGFjZXMuREVWSUNFX1JHQn11PXtkYXRhOnQsd2lkdGg6cy53aWR0aCxoZWlnaHQ6cy5oZWlnaHQsY29sb3JTcGFjZTpvLGJpdHNQZXJDb21wb25lbnQ6OCxmaWx0ZXI6YyxpbmRleDpyLGFsaWFzOm59fXJldHVybiB1fX0oRS5BUEkpO3ZhciBWdCxHdCxZdCxKdCxYdCxLdD1mdW5jdGlvbigpe3ZhciB0LGUsaTtmdW5jdGlvbiBhKHQpe3ZhciBlLHIsbixpLGEsbyxzLGMsdSxoLGwsZixkLHA7Zm9yKHRoaXMuZGF0YT10LHRoaXMucG9zPTgsdGhpcy5wYWxldHRlPVtdLHRoaXMuaW1nRGF0YT1bXSx0aGlzLnRyYW5zcGFyZW5jeT17fSx0aGlzLmFuaW1hdGlvbj1udWxsLHRoaXMudGV4dD17fSxvPW51bGw7Oyl7c3dpdGNoKGU9dGhpcy5yZWFkVUludDMyKCksdT1mdW5jdGlvbigpe3ZhciB0LGU7Zm9yKGU9W10sdD0wO3Q8NDsrK3QpZS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5kYXRhW3RoaXMucG9zKytdKSk7cmV0dXJuIGV9LmNhbGwodGhpcykuam9pbihcIlwiKSl7Y2FzZVwiSUhEUlwiOnRoaXMud2lkdGg9dGhpcy5yZWFkVUludDMyKCksdGhpcy5oZWlnaHQ9dGhpcy5yZWFkVUludDMyKCksdGhpcy5iaXRzPXRoaXMuZGF0YVt0aGlzLnBvcysrXSx0aGlzLmNvbG9yVHlwZT10aGlzLmRhdGFbdGhpcy5wb3MrK10sdGhpcy5jb21wcmVzc2lvbk1ldGhvZD10aGlzLmRhdGFbdGhpcy5wb3MrK10sdGhpcy5maWx0ZXJNZXRob2Q9dGhpcy5kYXRhW3RoaXMucG9zKytdLHRoaXMuaW50ZXJsYWNlTWV0aG9kPXRoaXMuZGF0YVt0aGlzLnBvcysrXTticmVhaztjYXNlXCJhY1RMXCI6dGhpcy5hbmltYXRpb249e251bUZyYW1lczp0aGlzLnJlYWRVSW50MzIoKSxudW1QbGF5czp0aGlzLnJlYWRVSW50MzIoKXx8MS8wLGZyYW1lczpbXX07YnJlYWs7Y2FzZVwiUExURVwiOnRoaXMucGFsZXR0ZT10aGlzLnJlYWQoZSk7YnJlYWs7Y2FzZVwiZmNUTFwiOm8mJnRoaXMuYW5pbWF0aW9uLmZyYW1lcy5wdXNoKG8pLHRoaXMucG9zKz00LG89e3dpZHRoOnRoaXMucmVhZFVJbnQzMigpLGhlaWdodDp0aGlzLnJlYWRVSW50MzIoKSx4T2Zmc2V0OnRoaXMucmVhZFVJbnQzMigpLHlPZmZzZXQ6dGhpcy5yZWFkVUludDMyKCl9LGE9dGhpcy5yZWFkVUludDE2KCksaT10aGlzLnJlYWRVSW50MTYoKXx8MTAwLG8uZGVsYXk9MWUzKmEvaSxvLmRpc3Bvc2VPcD10aGlzLmRhdGFbdGhpcy5wb3MrK10sby5ibGVuZE9wPXRoaXMuZGF0YVt0aGlzLnBvcysrXSxvLmRhdGE9W107YnJlYWs7Y2FzZVwiSURBVFwiOmNhc2VcImZkQVRcIjpmb3IoXCJmZEFUXCI9PT11JiYodGhpcy5wb3MrPTQsZS09NCksdD0obnVsbCE9bz9vLmRhdGE6dm9pZCAwKXx8dGhpcy5pbWdEYXRhLGY9MDswPD1lP2Y8ZTpmPmU7MDw9ZT8rK2Y6LS1mKXQucHVzaCh0aGlzLmRhdGFbdGhpcy5wb3MrK10pO2JyZWFrO2Nhc2VcInRSTlNcIjpzd2l0Y2godGhpcy50cmFuc3BhcmVuY3k9e30sdGhpcy5jb2xvclR5cGUpe2Nhc2UgMzppZihuPXRoaXMucGFsZXR0ZS5sZW5ndGgvMyx0aGlzLnRyYW5zcGFyZW5jeS5pbmRleGVkPXRoaXMucmVhZChlKSx0aGlzLnRyYW5zcGFyZW5jeS5pbmRleGVkLmxlbmd0aD5uKXRocm93IG5ldyBFcnJvcihcIk1vcmUgdHJhbnNwYXJlbnQgY29sb3JzIHRoYW4gcGFsZXR0ZSBzaXplXCIpO2lmKChoPW4tdGhpcy50cmFuc3BhcmVuY3kuaW5kZXhlZC5sZW5ndGgpPjApZm9yKGQ9MDswPD1oP2Q8aDpkPmg7MDw9aD8rK2Q6LS1kKXRoaXMudHJhbnNwYXJlbmN5LmluZGV4ZWQucHVzaCgyNTUpO2JyZWFrO2Nhc2UgMDp0aGlzLnRyYW5zcGFyZW5jeS5ncmF5c2NhbGU9dGhpcy5yZWFkKGUpWzBdO2JyZWFrO2Nhc2UgMjp0aGlzLnRyYW5zcGFyZW5jeS5yZ2I9dGhpcy5yZWFkKGUpfWJyZWFrO2Nhc2VcInRFWHRcIjpzPShsPXRoaXMucmVhZChlKSkuaW5kZXhPZigwKSxjPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGwuc2xpY2UoMCxzKSksdGhpcy50ZXh0W2NdPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGwuc2xpY2UocysxKSk7YnJlYWs7Y2FzZVwiSUVORFwiOnJldHVybiBvJiZ0aGlzLmFuaW1hdGlvbi5mcmFtZXMucHVzaChvKSx0aGlzLmNvbG9ycz1mdW5jdGlvbigpe3N3aXRjaCh0aGlzLmNvbG9yVHlwZSl7Y2FzZSAwOmNhc2UgMzpjYXNlIDQ6cmV0dXJuIDE7Y2FzZSAyOmNhc2UgNjpyZXR1cm4gM319LmNhbGwodGhpcyksdGhpcy5oYXNBbHBoYUNoYW5uZWw9ND09PShwPXRoaXMuY29sb3JUeXBlKXx8Nj09PXAscj10aGlzLmNvbG9ycysodGhpcy5oYXNBbHBoYUNoYW5uZWw/MTowKSx0aGlzLnBpeGVsQml0bGVuZ3RoPXRoaXMuYml0cypyLHRoaXMuY29sb3JTcGFjZT1mdW5jdGlvbigpe3N3aXRjaCh0aGlzLmNvbG9ycyl7Y2FzZSAxOnJldHVyblwiRGV2aWNlR3JheVwiO2Nhc2UgMzpyZXR1cm5cIkRldmljZVJHQlwifX0uY2FsbCh0aGlzKSx2b2lkKHRoaXMuaW1nRGF0YT1uZXcgVWludDhBcnJheSh0aGlzLmltZ0RhdGEpKTtkZWZhdWx0OnRoaXMucG9zKz1lfWlmKHRoaXMucG9zKz00LHRoaXMucG9zPnRoaXMuZGF0YS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiSW5jb21wbGV0ZSBvciBjb3JydXB0IFBORyBmaWxlXCIpfX1hLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3ZhciBlLHI7Zm9yKHI9W10sZT0wOzA8PXQ/ZTx0OmU+dDswPD10PysrZTotLWUpci5wdXNoKHRoaXMuZGF0YVt0aGlzLnBvcysrXSk7cmV0dXJuIHJ9LGEucHJvdG90eXBlLnJlYWRVSW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdPDwyNHx0aGlzLmRhdGFbdGhpcy5wb3MrK108PDE2fHRoaXMuZGF0YVt0aGlzLnBvcysrXTw8OHx0aGlzLmRhdGFbdGhpcy5wb3MrK119LGEucHJvdG90eXBlLnJlYWRVSW50MTY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdPDw4fHRoaXMuZGF0YVt0aGlzLnBvcysrXX0sYS5wcm90b3R5cGUuZGVjb2RlUGl4ZWxzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucGl4ZWxCaXRsZW5ndGgvOCxuPW5ldyBVaW50OEFycmF5KHRoaXMud2lkdGgqdGhpcy5oZWlnaHQqZSksaT0wLGE9dGhpcztpZihudWxsPT10JiYodD10aGlzLmltZ0RhdGEpLDA9PT10Lmxlbmd0aClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7ZnVuY3Rpb24gbyhyLG8scyxjKXt2YXIgdSxoLGwsZixkLHAsZyxtLHYsYix5LHcsTixMLEEseCxTLF8sUCxrLEksRj1NYXRoLmNlaWwoKGEud2lkdGgtcikvcyksQz1NYXRoLmNlaWwoKGEuaGVpZ2h0LW8pL2MpLGo9YS53aWR0aD09RiYmYS5oZWlnaHQ9PUM7Zm9yKEw9ZSpGLHc9aj9uOm5ldyBVaW50OEFycmF5KEwqQykscD10Lmxlbmd0aCxOPTAsaD0wO048QyYmaTxwOyl7c3dpdGNoKHRbaSsrXSl7Y2FzZSAwOmZvcihmPVM9MDtTPEw7Zj1TKz0xKXdbaCsrXT10W2krK107YnJlYWs7Y2FzZSAxOmZvcihmPV89MDtfPEw7Zj1fKz0xKXU9dFtpKytdLGQ9ZjxlPzA6d1toLWVdLHdbaCsrXT0odStkKSUyNTY7YnJlYWs7Y2FzZSAyOmZvcihmPVA9MDtQPEw7Zj1QKz0xKXU9dFtpKytdLGw9KGYtZiVlKS9lLEE9TiYmd1soTi0xKSpMK2wqZStmJWVdLHdbaCsrXT0oQSt1KSUyNTY7YnJlYWs7Y2FzZSAzOmZvcihmPWs9MDtrPEw7Zj1rKz0xKXU9dFtpKytdLGw9KGYtZiVlKS9lLGQ9ZjxlPzA6d1toLWVdLEE9TiYmd1soTi0xKSpMK2wqZStmJWVdLHdbaCsrXT0odStNYXRoLmZsb29yKChkK0EpLzIpKSUyNTY7YnJlYWs7Y2FzZSA0OmZvcihmPUk9MDtJPEw7Zj1JKz0xKXU9dFtpKytdLGw9KGYtZiVlKS9lLGQ9ZjxlPzA6d1toLWVdLDA9PT1OP0E9eD0wOihBPXdbKE4tMSkqTCtsKmUrZiVlXSx4PWwmJndbKE4tMSkqTCsobC0xKSplK2YlZV0pLGc9ZCtBLXgsbT1NYXRoLmFicyhnLWQpLGI9TWF0aC5hYnMoZy1BKSx5PU1hdGguYWJzKGcteCksdj1tPD1iJiZtPD15P2Q6Yjw9eT9BOngsd1toKytdPSh1K3YpJTI1NjticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZmlsdGVyIGFsZ29yaXRobTogXCIrdFtpLTFdKX1pZighail7dmFyIE89KChvK04qYykqYS53aWR0aCtyKSplLEI9TipMO2ZvcihmPTA7ZjxGO2YrPTEpe2Zvcih2YXIgTT0wO008ZTtNKz0xKW5bTysrXT13W0IrK107Tys9KHMtMSkqZX19TisrfX1yZXR1cm4gdD1yKHQpLDE9PWEuaW50ZXJsYWNlTWV0aG9kPyhvKDAsMCw4LDgpLG8oNCwwLDgsOCksbygwLDQsNCw4KSxvKDIsMCw0LDQpLG8oMCwyLDIsNCksbygxLDAsMiwyKSxvKDAsMSwxLDIpKTpvKDAsMCwxLDEpLG59LGEucHJvdG90eXBlLmRlY29kZVBhbGV0dGU9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixpLGEsbyxzLGM7Zm9yKHI9dGhpcy5wYWxldHRlLGE9dGhpcy50cmFuc3BhcmVuY3kuaW5kZXhlZHx8W10saT1uZXcgVWludDhBcnJheSgoYS5sZW5ndGh8fDApK3IubGVuZ3RoKSxuPTAsdD0wLGU9bz0wLHM9ci5sZW5ndGg7bzxzO2U9bys9MylpW24rK109cltlXSxpW24rK109cltlKzFdLGlbbisrXT1yW2UrMl0saVtuKytdPW51bGwhPShjPWFbdCsrXSk/YzoyNTU7cmV0dXJuIGl9LGEucHJvdG90eXBlLmNvcHlUb0ltYWdlRGF0YT1mdW5jdGlvbih0LGUpe3ZhciByLG4saSxhLG8scyxjLHUsaCxsLGY7aWYobj10aGlzLmNvbG9ycyxoPW51bGwscj10aGlzLmhhc0FscGhhQ2hhbm5lbCx0aGlzLnBhbGV0dGUubGVuZ3RoJiYoaD1udWxsIT0oZj10aGlzLl9kZWNvZGVkUGFsZXR0ZSk/Zjp0aGlzLl9kZWNvZGVkUGFsZXR0ZT10aGlzLmRlY29kZVBhbGV0dGUoKSxuPTQscj0hMCksdT0oaT10LmRhdGF8fHQpLmxlbmd0aCxvPWh8fGUsYT1zPTAsMT09PW4pZm9yKDthPHU7KWM9aD80KmVbYS80XTpzLGw9b1tjKytdLGlbYSsrXT1sLGlbYSsrXT1sLGlbYSsrXT1sLGlbYSsrXT1yP29bYysrXToyNTUscz1jO2Vsc2UgZm9yKDthPHU7KWM9aD80KmVbYS80XTpzLGlbYSsrXT1vW2MrK10saVthKytdPW9bYysrXSxpW2ErK109b1tjKytdLGlbYSsrXT1yP29bYysrXToyNTUscz1jfSxhLnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gdD1uZXcgVWludDhBcnJheSh0aGlzLndpZHRoKnRoaXMuaGVpZ2h0KjQpLHRoaXMuY29weVRvSW1hZ2VEYXRhKHQsdGhpcy5kZWNvZGVQaXhlbHMoKSksdH07dmFyIG89ZnVuY3Rpb24oKXtpZihcIltvYmplY3QgV2luZG93XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG4pKXt0cnl7ZT1uLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksaT1lLmdldENvbnRleHQoXCIyZFwiKX1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4hMH1yZXR1cm4hMX07cmV0dXJuIG8oKSx0PWZ1bmN0aW9uKHQpe3ZhciByO2lmKCEwPT09bygpKXJldHVybiBpLndpZHRoPXQud2lkdGgsaS5oZWlnaHQ9dC5oZWlnaHQsaS5jbGVhclJlY3QoMCwwLHQud2lkdGgsdC5oZWlnaHQpLGkucHV0SW1hZ2VEYXRhKHQsMCwwKSwocj1uZXcgSW1hZ2UpLnNyYz1lLnRvRGF0YVVSTCgpLHI7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgcmVxdWlyZXMgYSBCcm93c2VyIHdpdGggQ2FudmFzLWNhcGFiaWxpdHkuXCIpfSxhLnByb3RvdHlwZS5kZWNvZGVGcmFtZXM9ZnVuY3Rpb24oZSl7dmFyIHIsbixpLGEsbyxzLGMsdTtpZih0aGlzLmFuaW1hdGlvbil7Zm9yKHU9W10sbj1vPTAscz0oYz10aGlzLmFuaW1hdGlvbi5mcmFtZXMpLmxlbmd0aDtvPHM7bj0rK28pcj1jW25dLGk9ZS5jcmVhdGVJbWFnZURhdGEoci53aWR0aCxyLmhlaWdodCksYT10aGlzLmRlY29kZVBpeGVscyhuZXcgVWludDhBcnJheShyLmRhdGEpKSx0aGlzLmNvcHlUb0ltYWdlRGF0YShpLGEpLHIuaW1hZ2VEYXRhPWksdS5wdXNoKHIuaW1hZ2U9dChpKSk7cmV0dXJuIHV9fSxhLnByb3RvdHlwZS5yZW5kZXJGcmFtZT1mdW5jdGlvbih0LGUpe3ZhciByLG4saTtyZXR1cm4gcj0obj10aGlzLmFuaW1hdGlvbi5mcmFtZXMpW2VdLGk9bltlLTFdLDA9PT1lJiZ0LmNsZWFyUmVjdCgwLDAsdGhpcy53aWR0aCx0aGlzLmhlaWdodCksMT09PShudWxsIT1pP2kuZGlzcG9zZU9wOnZvaWQgMCk/dC5jbGVhclJlY3QoaS54T2Zmc2V0LGkueU9mZnNldCxpLndpZHRoLGkuaGVpZ2h0KToyPT09KG51bGwhPWk/aS5kaXNwb3NlT3A6dm9pZCAwKSYmdC5wdXRJbWFnZURhdGEoaS5pbWFnZURhdGEsaS54T2Zmc2V0LGkueU9mZnNldCksMD09PXIuYmxlbmRPcCYmdC5jbGVhclJlY3Qoci54T2Zmc2V0LHIueU9mZnNldCxyLndpZHRoLHIuaGVpZ2h0KSx0LmRyYXdJbWFnZShyLmltYWdlLHIueE9mZnNldCxyLnlPZmZzZXQpfSxhLnByb3RvdHlwZS5hbmltYXRlPWZ1bmN0aW9uKHQpe3ZhciBlLHIsbixpLGEsbyxzPXRoaXM7cmV0dXJuIHI9MCxvPXRoaXMuYW5pbWF0aW9uLGk9by5udW1GcmFtZXMsbj1vLmZyYW1lcyxhPW8ubnVtUGxheXMsKGU9ZnVuY3Rpb24oKXt2YXIgbyxjO2lmKG89cisrJWksYz1uW29dLHMucmVuZGVyRnJhbWUodCxvKSxpPjEmJnIvaTxhKXJldHVybiBzLmFuaW1hdGlvbi5fdGltZW91dD1zZXRUaW1lb3V0KGUsYy5kZWxheSl9KSgpfSxhLnByb3RvdHlwZS5zdG9wQW5pbWF0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIGNsZWFyVGltZW91dChudWxsIT0odD10aGlzLmFuaW1hdGlvbik/dC5fdGltZW91dDp2b2lkIDApfSxhLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24odCl7dmFyIGUscjtyZXR1cm4gdC5fcG5nJiZ0Ll9wbmcuc3RvcEFuaW1hdGlvbigpLHQuX3BuZz10aGlzLHQud2lkdGg9dGhpcy53aWR0aCx0LmhlaWdodD10aGlzLmhlaWdodCxlPXQuZ2V0Q29udGV4dChcIjJkXCIpLHRoaXMuYW5pbWF0aW9uPyh0aGlzLmRlY29kZUZyYW1lcyhlKSx0aGlzLmFuaW1hdGUoZSkpOihyPWUuY3JlYXRlSW1hZ2VEYXRhKHRoaXMud2lkdGgsdGhpcy5oZWlnaHQpLHRoaXMuY29weVRvSW1hZ2VEYXRhKHIsdGhpcy5kZWNvZGVQaXhlbHMoKSksZS5wdXRJbWFnZURhdGEociwwLDApKX0sYX0oKTtcbi8qKlxuICogQGxpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgSmFtZXMgUm9iYiwgaHR0cHM6Ly9naXRodWIuY29tL2phbWVzYnJvYmJcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAqIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuICogXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gKiBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICogTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRVxuICogTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuICogT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4gKiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbi8qKlxuICogQGxpY2Vuc2VcbiAqIChjKSBEZWFuIE1jTmFtZWUgPGRlYW5AZ21haWwuY29tPiwgMjAxMy5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGVhbm0vb21nZ2lmXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG9cbiAqIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlXG4gKiByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3JcbiAqIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkdcbiAqIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1NcbiAqIElOIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKiBvbWdnaWYgaXMgYSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIGEgR0lGIDg5YSBlbmNvZGVyIGFuZCBkZWNvZGVyLFxuICogaW5jbHVkaW5nIGFuaW1hdGlvbiBhbmQgY29tcHJlc3Npb24uICBJdCBkb2VzIG5vdCByZWx5IG9uIGFueSBzcGVjaWZpY1xuICogdW5kZXJseWluZyBzeXN0ZW0sIHNvIHNob3VsZCBydW4gaW4gdGhlIGJyb3dzZXIsIE5vZGUsIG9yIFBsYXNrLlxuICovXG5mdW5jdGlvbiBadCh0KXt2YXIgZT0wO2lmKDcxIT09dFtlKytdfHw3MyE9PXRbZSsrXXx8NzAhPT10W2UrK118fDU2IT09dFtlKytdfHw1NiE9KHRbZSsrXSsxJjI1Myl8fDk3IT09dFtlKytdKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgR0lGIDg3YS84OWEgaGVhZGVyLlwiKTt2YXIgcj10W2UrK118dFtlKytdPDw4LG49dFtlKytdfHRbZSsrXTw8OCxpPXRbZSsrXSxhPWk+Pjcsbz0xPDwoNyZpKSsxO3RbZSsrXTt0W2UrK107dmFyIHM9bnVsbCxjPW51bGw7YSYmKHM9ZSxjPW8sZSs9MypvKTt2YXIgdT0hMCxoPVtdLGw9MCxmPW51bGwsZD0wLHA9bnVsbDtmb3IodGhpcy53aWR0aD1yLHRoaXMuaGVpZ2h0PW47dSYmZTx0Lmxlbmd0aDspc3dpdGNoKHRbZSsrXSl7Y2FzZSAzMzpzd2l0Y2godFtlKytdKXtjYXNlIDI1NTppZigxMSE9PXRbZV18fDc4PT10W2UrMV0mJjY5PT10W2UrMl0mJjg0PT10W2UrM10mJjgzPT10W2UrNF0mJjY3PT10W2UrNV0mJjY1PT10W2UrNl0mJjgwPT10W2UrN10mJjY5PT10W2UrOF0mJjUwPT10W2UrOV0mJjQ2PT10W2UrMTBdJiY0OD09dFtlKzExXSYmMz09dFtlKzEyXSYmMT09dFtlKzEzXSYmMD09dFtlKzE2XSllKz0xNCxwPXRbZSsrXXx0W2UrK108PDgsZSsrO2Vsc2UgZm9yKGUrPTEyOzspe2lmKCEoKFA9dFtlKytdKT49MCkpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGJsb2NrIHNpemVcIik7aWYoMD09PVApYnJlYWs7ZSs9UH1icmVhaztjYXNlIDI0OTppZig0IT09dFtlKytdfHwwIT09dFtlKzRdKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZ3JhcGhpY3MgZXh0ZW5zaW9uIGJsb2NrLlwiKTt2YXIgZz10W2UrK107bD10W2UrK118dFtlKytdPDw4LGY9dFtlKytdLDA9PSgxJmcpJiYoZj1udWxsKSxkPWc+PjImNyxlKys7YnJlYWs7Y2FzZSAyNTQ6Zm9yKDs7KXtpZighKChQPXRbZSsrXSk+PTApKXRocm93IEVycm9yKFwiSW52YWxpZCBibG9jayBzaXplXCIpO2lmKDA9PT1QKWJyZWFrO2UrPVB9YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGdyYXBoaWMgY29udHJvbCBsYWJlbDogMHhcIit0W2UtMV0udG9TdHJpbmcoMTYpKX1icmVhaztjYXNlIDQ0OnZhciBtPXRbZSsrXXx0W2UrK108PDgsdj10W2UrK118dFtlKytdPDw4LGI9dFtlKytdfHRbZSsrXTw8OCx5PXRbZSsrXXx0W2UrK108PDgsdz10W2UrK10sTj13Pj42JjEsTD0xPDwoNyZ3KSsxLEE9cyx4PWMsUz0hMTtpZih3Pj43KXtTPSEwO0E9ZSx4PUwsZSs9MypMfXZhciBfPWU7Zm9yKGUrKzs7KXt2YXIgUDtpZighKChQPXRbZSsrXSk+PTApKXRocm93IEVycm9yKFwiSW52YWxpZCBibG9jayBzaXplXCIpO2lmKDA9PT1QKWJyZWFrO2UrPVB9aC5wdXNoKHt4Om0seTp2LHdpZHRoOmIsaGVpZ2h0OnksaGFzX2xvY2FsX3BhbGV0dGU6UyxwYWxldHRlX29mZnNldDpBLHBhbGV0dGVfc2l6ZTp4LGRhdGFfb2Zmc2V0Ol8sZGF0YV9sZW5ndGg6ZS1fLHRyYW5zcGFyZW50X2luZGV4OmYsaW50ZXJsYWNlZDohIU4sZGVsYXk6bCxkaXNwb3NhbDpkfSk7YnJlYWs7Y2FzZSA1OTp1PSExO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBnaWYgYmxvY2s6IDB4XCIrdFtlLTFdLnRvU3RyaW5nKDE2KSl9dGhpcy5udW1GcmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gaC5sZW5ndGh9LHRoaXMubG9vcENvdW50PWZ1bmN0aW9uKCl7cmV0dXJuIHB9LHRoaXMuZnJhbWVJbmZvPWZ1bmN0aW9uKHQpe2lmKHQ8MHx8dD49aC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiRnJhbWUgaW5kZXggb3V0IG9mIHJhbmdlLlwiKTtyZXR1cm4gaFt0XX0sdGhpcy5kZWNvZGVBbmRCbGl0RnJhbWVCR1JBPWZ1bmN0aW9uKGUsbil7dmFyIGk9dGhpcy5mcmFtZUluZm8oZSksYT1pLndpZHRoKmkuaGVpZ2h0LG89bmV3IFVpbnQ4QXJyYXkoYSk7JHQodCxpLmRhdGFfb2Zmc2V0LG8sYSk7dmFyIHM9aS5wYWxldHRlX29mZnNldCxjPWkudHJhbnNwYXJlbnRfaW5kZXg7bnVsbD09PWMmJihjPTI1Nik7dmFyIHU9aS53aWR0aCxoPXItdSxsPXUsZj00KihpLnkqcitpLngpLGQ9NCooKGkueStpLmhlaWdodCkqcitpLngpLHA9ZixnPTQqaDshMD09PWkuaW50ZXJsYWNlZCYmKGcrPTQqcio3KTtmb3IodmFyIG09OCx2PTAsYj1vLmxlbmd0aDt2PGI7Kyt2KXt2YXIgeT1vW3ZdO2lmKDA9PT1sJiYobD11LChwKz1nKT49ZCYmKGc9NCpoKzQqcioobS0xKSxwPWYrKHUraCkqKG08PDEpLG0+Pj0xKSkseT09PWMpcCs9NDtlbHNle3ZhciB3PXRbcyszKnldLE49dFtzKzMqeSsxXSxMPXRbcyszKnkrMl07bltwKytdPUwsbltwKytdPU4sbltwKytdPXcsbltwKytdPTI1NX0tLWx9fSx0aGlzLmRlY29kZUFuZEJsaXRGcmFtZVJHQkE9ZnVuY3Rpb24oZSxuKXt2YXIgaT10aGlzLmZyYW1lSW5mbyhlKSxhPWkud2lkdGgqaS5oZWlnaHQsbz1uZXcgVWludDhBcnJheShhKTskdCh0LGkuZGF0YV9vZmZzZXQsbyxhKTt2YXIgcz1pLnBhbGV0dGVfb2Zmc2V0LGM9aS50cmFuc3BhcmVudF9pbmRleDtudWxsPT09YyYmKGM9MjU2KTt2YXIgdT1pLndpZHRoLGg9ci11LGw9dSxmPTQqKGkueSpyK2kueCksZD00KigoaS55K2kuaGVpZ2h0KSpyK2kueCkscD1mLGc9NCpoOyEwPT09aS5pbnRlcmxhY2VkJiYoZys9NCpyKjcpO2Zvcih2YXIgbT04LHY9MCxiPW8ubGVuZ3RoO3Y8YjsrK3Ype3ZhciB5PW9bdl07aWYoMD09PWwmJihsPXUsKHArPWcpPj1kJiYoZz00KmgrNCpyKihtLTEpLHA9ZisodStoKSoobTw8MSksbT4+PTEpKSx5PT09YylwKz00O2Vsc2V7dmFyIHc9dFtzKzMqeV0sTj10W3MrMyp5KzFdLEw9dFtzKzMqeSsyXTtuW3ArK109dyxuW3ArK109TixuW3ArK109TCxuW3ArK109MjU1fS0tbH19fWZ1bmN0aW9uICR0KHQsZSxyLG4pe2Zvcih2YXIgaT10W2UrK10sbz0xPDxpLHM9bysxLGM9cysxLHU9aSsxLGg9KDE8PHUpLTEsbD0wLGY9MCxkPTAscD10W2UrK10sZz1uZXcgSW50MzJBcnJheSg0MDk2KSxtPW51bGw7Oyl7Zm9yKDtsPDE2JiYwIT09cDspZnw9dFtlKytdPDxsLGwrPTgsMT09PXA/cD10W2UrK106LS1wO2lmKGw8dSlicmVhazt2YXIgdj1mJmg7aWYoZj4+PXUsbC09dSx2IT09byl7aWYodj09PXMpYnJlYWs7Zm9yKHZhciBiPXY8Yz92Om0seT0wLHc9Yjt3Pm87KXc9Z1t3XT4+OCwrK3k7dmFyIE49dztpZihkK3krKGIhPT12PzE6MCk+bilyZXR1cm4gdm9pZCBhLmxvZyhcIldhcm5pbmcsIGdpZiBzdHJlYW0gbG9uZ2VyIHRoYW4gZXhwZWN0ZWQuXCIpO3JbZCsrXT1OO3ZhciBMPWQrPXk7Zm9yKGIhPT12JiYocltkKytdPU4pLHc9Yjt5LS07KXc9Z1t3XSxyWy0tTF09MjU1Jncsdz4+PTg7bnVsbCE9PW0mJmM8NDA5NiYmKGdbYysrXT1tPDw4fE4sYz49aCsxJiZ1PDEyJiYoKyt1LGg9aDw8MXwxKSksbT12fWVsc2UgYz1zKzEsaD0oMTw8KHU9aSsxKSktMSxtPW51bGx9cmV0dXJuIGQhPT1uJiZhLmxvZyhcIldhcm5pbmcsIGdpZiBzdHJlYW0gc2hvcnRlciB0aGFuIGV4cGVjdGVkLlwiKSxyfVxuLyoqXG4gKiBAbGljZW5zZVxuICBDb3B5cmlnaHQgKGMpIDIwMDgsIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkXG4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IFxuICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gIG1ldDpcblxuICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4gICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgXG4gICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIFxuICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gIFxuICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQgbm9yIHRoZSBuYW1lcyBvZiBpdHMgXG4gICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gXG4gICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVNcbiAgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcbiAgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUlxuICBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SIFxuICBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCxcbiAgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxuICBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL2Z1bmN0aW9uIFF0KHQpe3ZhciBlLHIsbixpLGEsbz1NYXRoLmZsb29yLHM9bmV3IEFycmF5KDY0KSxjPW5ldyBBcnJheSg2NCksdT1uZXcgQXJyYXkoNjQpLGg9bmV3IEFycmF5KDY0KSxsPW5ldyBBcnJheSg2NTUzNSksZj1uZXcgQXJyYXkoNjU1MzUpLGQ9bmV3IEFycmF5KDY0KSxwPW5ldyBBcnJheSg2NCksZz1bXSxtPTAsdj03LGI9bmV3IEFycmF5KDY0KSx5PW5ldyBBcnJheSg2NCksdz1uZXcgQXJyYXkoNjQpLE49bmV3IEFycmF5KDI1NiksTD1uZXcgQXJyYXkoMjA0OCksQT1bMCwxLDUsNiwxNCwxNSwyNywyOCwyLDQsNywxMywxNiwyNiwyOSw0MiwzLDgsMTIsMTcsMjUsMzAsNDEsNDMsOSwxMSwxOCwyNCwzMSw0MCw0NCw1MywxMCwxOSwyMywzMiwzOSw0NSw1Miw1NCwyMCwyMiwzMywzOCw0Niw1MSw1NSw2MCwyMSwzNCwzNyw0Nyw1MCw1Niw1OSw2MSwzNSwzNiw0OCw0OSw1Nyw1OCw2Miw2M10seD1bMCwwLDEsNSwxLDEsMSwxLDEsMSwwLDAsMCwwLDAsMCwwXSxTPVswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExXSxfPVswLDAsMiwxLDMsMywyLDQsMyw1LDUsNCw0LDAsMCwxLDEyNV0sUD1bMSwyLDMsMCw0LDE3LDUsMTgsMzMsNDksNjUsNiwxOSw4MSw5Nyw3LDM0LDExMywyMCw1MCwxMjksMTQ1LDE2MSw4LDM1LDY2LDE3NywxOTMsMjEsODIsMjA5LDI0MCwzNiw1MSw5OCwxMTQsMTMwLDksMTAsMjIsMjMsMjQsMjUsMjYsMzcsMzgsMzksNDAsNDEsNDIsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsODMsODQsODUsODYsODcsODgsODksOTAsOTksMTAwLDEwMSwxMDIsMTAzLDEwNCwxMDUsMTA2LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTMxLDEzMiwxMzMsMTM0LDEzNSwxMzYsMTM3LDEzOCwxNDYsMTQ3LDE0OCwxNDksMTUwLDE1MSwxNTIsMTUzLDE1NCwxNjIsMTYzLDE2NCwxNjUsMTY2LDE2NywxNjgsMTY5LDE3MCwxNzgsMTc5LDE4MCwxODEsMTgyLDE4MywxODQsMTg1LDE4NiwxOTQsMTk1LDE5NiwxOTcsMTk4LDE5OSwyMDAsMjAxLDIwMiwyMTAsMjExLDIxMiwyMTMsMjE0LDIxNSwyMTYsMjE3LDIxOCwyMjUsMjI2LDIyNywyMjgsMjI5LDIzMCwyMzEsMjMyLDIzMywyMzQsMjQxLDI0MiwyNDMsMjQ0LDI0NSwyNDYsMjQ3LDI0OCwyNDksMjUwXSxrPVswLDAsMywxLDEsMSwxLDEsMSwxLDEsMSwwLDAsMCwwLDBdLEk9WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTFdLEY9WzAsMCwyLDEsMiw0LDQsMyw0LDcsNSw0LDQsMCwxLDIsMTE5XSxDPVswLDEsMiwzLDE3LDQsNSwzMyw0OSw2LDE4LDY1LDgxLDcsOTcsMTEzLDE5LDM0LDUwLDEyOSw4LDIwLDY2LDE0NSwxNjEsMTc3LDE5Myw5LDM1LDUxLDgyLDI0MCwyMSw5OCwxMTQsMjA5LDEwLDIyLDM2LDUyLDIyNSwzNywyNDEsMjMsMjQsMjUsMjYsMzgsMzksNDAsNDEsNDIsNTMsNTQsNTUsNTYsNTcsNTgsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsODMsODQsODUsODYsODcsODgsODksOTAsOTksMTAwLDEwMSwxMDIsMTAzLDEwNCwxMDUsMTA2LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTMwLDEzMSwxMzIsMTMzLDEzNCwxMzUsMTM2LDEzNywxMzgsMTQ2LDE0NywxNDgsMTQ5LDE1MCwxNTEsMTUyLDE1MywxNTQsMTYyLDE2MywxNjQsMTY1LDE2NiwxNjcsMTY4LDE2OSwxNzAsMTc4LDE3OSwxODAsMTgxLDE4MiwxODMsMTg0LDE4NSwxODYsMTk0LDE5NSwxOTYsMTk3LDE5OCwxOTksMjAwLDIwMSwyMDIsMjEwLDIxMSwyMTIsMjEzLDIxNCwyMTUsMjE2LDIxNywyMTgsMjI2LDIyNywyMjgsMjI5LDIzMCwyMzEsMjMyLDIzMywyMzQsMjQyLDI0MywyNDQsMjQ1LDI0NiwyNDcsMjQ4LDI0OSwyNTBdO2Z1bmN0aW9uIGoodCxlKXtmb3IodmFyIHI9MCxuPTAsaT1uZXcgQXJyYXksYT0xO2E8PTE2O2ErKyl7Zm9yKHZhciBvPTE7bzw9dFthXTtvKyspaVtlW25dXT1bXSxpW2Vbbl1dWzBdPXIsaVtlW25dXVsxXT1hLG4rKyxyKys7cio9Mn1yZXR1cm4gaX1mdW5jdGlvbiBPKHQpe2Zvcih2YXIgZT10WzBdLHI9dFsxXS0xO3I+PTA7KWUmMTw8ciYmKG18PTE8PHYpLHItLSwtLXY8MCYmKDI1NT09bT8oQigyNTUpLEIoMCkpOkIobSksdj03LG09MCl9ZnVuY3Rpb24gQih0KXtnLnB1c2godCl9ZnVuY3Rpb24gTSh0KXtCKHQ+PjgmMjU1KSxCKDI1NSZ0KX1mdW5jdGlvbiBFKHQsZSxyLG4saSl7Zm9yKHZhciBhLG89aVswXSxzPWlbMjQwXSxjPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbixpLGEsbyxzLGMsdSxoLGwsZj0wO2ZvcihoPTA7aDw4OysraCl7cj10W2ZdLG49dFtmKzFdLGk9dFtmKzJdLGE9dFtmKzNdLG89dFtmKzRdLHM9dFtmKzVdLGM9dFtmKzZdO3ZhciBwPXIrKHU9dFtmKzddKSxnPXItdSxtPW4rYyx2PW4tYyxiPWkrcyx5PWktcyx3PWErbyxOPWEtbyxMPXArdyxBPXAtdyx4PW0rYixTPW0tYjt0W2ZdPUwreCx0W2YrNF09TC14O3ZhciBfPS43MDcxMDY3ODEqKFMrQSk7dFtmKzJdPUErXyx0W2YrNl09QS1fO3ZhciBQPS4zODI2ODM0MzMqKChMPU4reSktKFM9ditnKSksaz0uNTQxMTk2MSpMK1AsST0xLjMwNjU2Mjk2NSpTK1AsRj0uNzA3MTA2NzgxKih4PXkrdiksQz1nK0Ysaj1nLUY7dFtmKzVdPWorayx0W2YrM109ai1rLHRbZisxXT1DK0ksdFtmKzddPUMtSSxmKz04fWZvcihmPTAsaD0wO2g8ODsrK2gpe3I9dFtmXSxuPXRbZis4XSxpPXRbZisxNl0sYT10W2YrMjRdLG89dFtmKzMyXSxzPXRbZis0MF0sYz10W2YrNDhdO3ZhciBPPXIrKHU9dFtmKzU2XSksQj1yLXUsTT1uK2MsRT1uLWMscT1pK3MsRD1pLXMsUj1hK28sVD1hLW8sVT1PK1Isej1PLVIsSD1NK3EsVz1NLXE7dFtmXT1VK0gsdFtmKzMyXT1VLUg7dmFyIFY9LjcwNzEwNjc4MSooVyt6KTt0W2YrMTZdPXorVix0W2YrNDhdPXotVjt2YXIgRz0uMzgyNjgzNDMzKigoVT1UK0QpLShXPUUrQikpLFk9LjU0MTE5NjEqVStHLEo9MS4zMDY1NjI5NjUqVytHLFg9LjcwNzEwNjc4MSooSD1EK0UpLEs9QitYLFo9Qi1YO3RbZis0MF09WitZLHRbZisyNF09Wi1ZLHRbZis4XT1LK0osdFtmKzU2XT1LLUosZisrfWZvcihoPTA7aDw2NDsrK2gpbD10W2hdKmVbaF0sZFtoXT1sPjA/bCsuNXwwOmwtLjV8MDtyZXR1cm4gZH0odCxlKSx1PTA7dTw2NDsrK3UpcFtBW3VdXT1jW3VdO3ZhciBoPXBbMF0tcjtyPXBbMF0sMD09aD9PKG5bMF0pOihPKG5bZlthPTMyNzY3K2hdXSksTyhsW2FdKSk7Zm9yKHZhciBnPTYzO2c+MCYmMD09cFtnXTspZy0tO2lmKDA9PWcpcmV0dXJuIE8obykscjtmb3IodmFyIG0sdj0xO3Y8PWc7KXtmb3IodmFyIGI9djswPT1wW3ZdJiZ2PD1nOykrK3Y7dmFyIHk9di1iO2lmKHk+PTE2KXttPXk+PjQ7Zm9yKHZhciB3PTE7dzw9bTsrK3cpTyhzKTt5Jj0xNX1hPTMyNzY3K3Bbdl0sTyhpWyh5PDw0KStmW2FdXSksTyhsW2FdKSx2Kyt9cmV0dXJuIDYzIT1nJiZPKG8pLHJ9ZnVuY3Rpb24gcSh0KXsodD1NYXRoLm1pbihNYXRoLm1heCh0LDEpLDEwMCksYSE9dCkmJighZnVuY3Rpb24odCl7Zm9yKHZhciBlPVsxNiwxMSwxMCwxNiwyNCw0MCw1MSw2MSwxMiwxMiwxNCwxOSwyNiw1OCw2MCw1NSwxNCwxMywxNiwyNCw0MCw1Nyw2OSw1NiwxNCwxNywyMiwyOSw1MSw4Nyw4MCw2MiwxOCwyMiwzNyw1Niw2OCwxMDksMTAzLDc3LDI0LDM1LDU1LDY0LDgxLDEwNCwxMTMsOTIsNDksNjQsNzgsODcsMTAzLDEyMSwxMjAsMTAxLDcyLDkyLDk1LDk4LDExMiwxMDAsMTAzLDk5XSxyPTA7cjw2NDtyKyspe3ZhciBuPW8oKGVbcl0qdCs1MCkvMTAwKTtuPU1hdGgubWluKE1hdGgubWF4KG4sMSksMjU1KSxzW0Fbcl1dPW59Zm9yKHZhciBpPVsxNywxOCwyNCw0Nyw5OSw5OSw5OSw5OSwxOCwyMSwyNiw2Niw5OSw5OSw5OSw5OSwyNCwyNiw1Niw5OSw5OSw5OSw5OSw5OSw0Nyw2Niw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OSw5OV0sYT0wO2E8NjQ7YSsrKXt2YXIgbD1vKChpW2FdKnQrNTApLzEwMCk7bD1NYXRoLm1pbihNYXRoLm1heChsLDEpLDI1NSksY1tBW2FdXT1sfWZvcih2YXIgZj1bMSwxLjM4NzAzOTg0NSwxLjMwNjU2Mjk2NSwxLjE3NTg3NTYwMiwxLC43ODU2OTQ5NTgsLjU0MTE5NjEsLjI3NTg5OTM3OV0sZD0wLHA9MDtwPDg7cCsrKWZvcih2YXIgZz0wO2c8ODtnKyspdVtkXT0xLyhzW0FbZF1dKmZbcF0qZltnXSo4KSxoW2RdPTEvKGNbQVtkXV0qZltwXSpmW2ddKjgpLGQrK30odDw1MD9NYXRoLmZsb29yKDVlMy90KTpNYXRoLmZsb29yKDIwMC0yKnQpKSxhPXQpfXRoaXMuZW5jb2RlPWZ1bmN0aW9uKHQsYSl7YSYmcShhKSxnPW5ldyBBcnJheSxtPTAsdj03LE0oNjU0OTYpLE0oNjU1MDQpLE0oMTYpLEIoNzQpLEIoNzApLEIoNzMpLEIoNzApLEIoMCksQigxKSxCKDEpLEIoMCksTSgxKSxNKDEpLEIoMCksQigwKSxmdW5jdGlvbigpe00oNjU0OTkpLE0oMTMyKSxCKDApO2Zvcih2YXIgdD0wO3Q8NjQ7dCsrKUIoc1t0XSk7QigxKTtmb3IodmFyIGU9MDtlPDY0O2UrKylCKGNbZV0pfSgpLGZ1bmN0aW9uKHQsZSl7TSg2NTQ3MiksTSgxNyksQig4KSxNKGUpLE0odCksQigzKSxCKDEpLEIoMTcpLEIoMCksQigyKSxCKDE3KSxCKDEpLEIoMyksQigxNyksQigxKX0odC53aWR0aCx0LmhlaWdodCksZnVuY3Rpb24oKXtNKDY1NDc2KSxNKDQxOCksQigwKTtmb3IodmFyIHQ9MDt0PDE2O3QrKylCKHhbdCsxXSk7Zm9yKHZhciBlPTA7ZTw9MTE7ZSsrKUIoU1tlXSk7QigxNik7Zm9yKHZhciByPTA7cjwxNjtyKyspQihfW3IrMV0pO2Zvcih2YXIgbj0wO248PTE2MTtuKyspQihQW25dKTtCKDEpO2Zvcih2YXIgaT0wO2k8MTY7aSsrKUIoa1tpKzFdKTtmb3IodmFyIGE9MDthPD0xMTthKyspQihJW2FdKTtCKDE3KTtmb3IodmFyIG89MDtvPDE2O28rKylCKEZbbysxXSk7Zm9yKHZhciBzPTA7czw9MTYxO3MrKylCKENbc10pfSgpLE0oNjU0OTgpLE0oMTIpLEIoMyksQigxKSxCKDApLEIoMiksQigxNyksQigzKSxCKDE3KSxCKDApLEIoNjMpLEIoMCk7dmFyIG89MCxsPTAsZj0wO209MCx2PTcsdGhpcy5lbmNvZGUuZGlzcGxheU5hbWU9XCJfZW5jb2RlX1wiO2Zvcih2YXIgZCxwLE4sQSxqLEQsUixULFUsej10LmRhdGEsSD10LndpZHRoLFc9dC5oZWlnaHQsVj00KkgsRz0wO0c8Vzspe2ZvcihkPTA7ZDxWOyl7Zm9yKGo9VipHK2QsUj0tMSxUPTAsVT0wO1U8NjQ7VSsrKUQ9aisoVD1VPj4zKSpWKyhSPTQqKDcmVSkpLEcrVD49VyYmKEQtPVYqKEcrMStULVcpKSxkK1I+PVYmJihELT1kK1ItVis0KSxwPXpbRCsrXSxOPXpbRCsrXSxBPXpbRCsrXSxiW1VdPShMW3BdK0xbTisyNTY+PjBdK0xbQSs1MTI+PjBdPj4xNiktMTI4LHlbVV09KExbcCs3Njg+PjBdK0xbTisxMDI0Pj4wXStMW0ErMTI4MD4+MF0+PjE2KS0xMjgsd1tVXT0oTFtwKzEyODA+PjBdK0xbTisxNTM2Pj4wXStMW0ErMTc5Mj4+MF0+PjE2KS0xMjg7bz1FKGIsdSxvLGUsbiksbD1FKHksaCxsLHIsaSksZj1FKHcsaCxmLHIsaSksZCs9MzJ9Rys9OH1pZih2Pj0wKXt2YXIgWT1bXTtZWzFdPXYrMSxZWzBdPSgxPDx2KzEpLTEsTyhZKX1yZXR1cm4gTSg2NTQ5NyksbmV3IFVpbnQ4QXJyYXkoZyl9LHQ9dHx8NTAsZnVuY3Rpb24oKXtmb3IodmFyIHQ9U3RyaW5nLmZyb21DaGFyQ29kZSxlPTA7ZTwyNTY7ZSsrKU5bZV09dChlKX0oKSxlPWooeCxTKSxyPWooayxJKSxuPWooXyxQKSxpPWooRixDKSxmdW5jdGlvbigpe2Zvcih2YXIgdD0xLGU9MixyPTE7cjw9MTU7cisrKXtmb3IodmFyIG49dDtuPGU7bisrKWZbMzI3Njcrbl09cixsWzMyNzY3K25dPVtdLGxbMzI3Njcrbl1bMV09cixsWzMyNzY3K25dWzBdPW47Zm9yKHZhciBpPS0oZS0xKTtpPD0tdDtpKyspZlszMjc2NytpXT1yLGxbMzI3NjcraV09W10sbFszMjc2NytpXVsxXT1yLGxbMzI3NjcraV1bMF09ZS0xK2k7dDw8PTEsZTw8PTF9fSgpLGZ1bmN0aW9uKCl7Zm9yKHZhciB0PTA7dDwyNTY7dCsrKUxbdF09MTk1OTUqdCxMW3QrMjU2Pj4wXT0zODQ3MCp0LExbdCs1MTI+PjBdPTc0NzEqdCszMjc2OCxMW3QrNzY4Pj4wXT0tMTEwNTkqdCxMW3QrMTAyND4+MF09LTIxNzA5KnQsTFt0KzEyODA+PjBdPTMyNzY4KnQrODQyMTM3NSxMW3QrMTUzNj4+MF09LTI3NDM5KnQsTFt0KzE3OTI+PjBdPS01MzI5KnR9KCkscSh0KX1cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBBcmFzIEFiYmFzaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovZnVuY3Rpb24gdGUodCxlKXtpZih0aGlzLnBvcz0wLHRoaXMuYnVmZmVyPXQsdGhpcy5kYXRhdj1uZXcgRGF0YVZpZXcodC5idWZmZXIpLHRoaXMuaXNfd2l0aF9hbHBoYT0hIWUsdGhpcy5ib3R0b21fdXA9ITAsdGhpcy5mbGFnPVN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5idWZmZXJbMF0pK1N0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5idWZmZXJbMV0pLHRoaXMucG9zKz0yLC0xPT09W1wiQk1cIixcIkJBXCIsXCJDSVwiLFwiQ1BcIixcIklDXCIsXCJQVFwiXS5pbmRleE9mKHRoaXMuZmxhZykpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBCTVAgRmlsZVwiKTt0aGlzLnBhcnNlSGVhZGVyKCksdGhpcy5wYXJzZUJHUigpfWZ1bmN0aW9uIGVlKHQpe2Z1bmN0aW9uIGUodCl7aWYoIXQpdGhyb3cgRXJyb3IoXCJhc3NlcnQgOlBcIil9ZnVuY3Rpb24gcih0LGUscil7Zm9yKHZhciBuPTA7ND5uO24rKylpZih0W2Urbl0hPXIuY2hhckNvZGVBdChuKSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBuKHQsZSxyLG4saSl7Zm9yKHZhciBhPTA7YTxpO2ErKyl0W2UrYV09cltuK2FdfWZ1bmN0aW9uIGkodCxlLHIsbil7Zm9yKHZhciBpPTA7aTxuO2krKyl0W2UraV09cn1mdW5jdGlvbiBhKHQpe3JldHVybiBuZXcgSW50MzJBcnJheSh0KX1mdW5jdGlvbiBvKHQsZSl7Zm9yKHZhciByPVtdLG49MDtuPHQ7bisrKXIucHVzaChuZXcgZSk7cmV0dXJuIHJ9ZnVuY3Rpb24gcyh0LGUpe3ZhciByPVtdO3JldHVybiBmdW5jdGlvbiB0KHIsbixpKXtmb3IodmFyIGE9aVtuXSxvPTA7bzxhJiYoci5wdXNoKGkubGVuZ3RoPm4rMT9bXTpuZXcgZSksIShpLmxlbmd0aDxuKzEpKTtvKyspdChyW29dLG4rMSxpKX0ociwwLHQpLHJ9dmFyIGM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2Z1bmN0aW9uIGModCxlKXtmb3IodmFyIHI9MTw8ZS0xPj4+MDt0JnI7KXI+Pj49MTtyZXR1cm4gcj8odCZyLTEpK3I6dH1mdW5jdGlvbiB1KHQscixuLGksYSl7ZSghKGklbikpO2Rve3RbcisoaS09bildPWF9d2hpbGUoMDxpKX1mdW5jdGlvbiBoKHQscixuLGksbyl7aWYoZSgyMzI4Pj1vKSw1MTI+PW8pdmFyIHM9YSg1MTIpO2Vsc2UgaWYobnVsbD09KHM9YShvKSkpcmV0dXJuIDA7cmV0dXJuIGZ1bmN0aW9uKHQscixuLGksbyxzKXt2YXIgaCxmLGQ9cixwPTE8PG4sZz1hKDE2KSxtPWEoMTYpO2ZvcihlKDAhPW8pLGUobnVsbCE9aSksZShudWxsIT10KSxlKDA8biksZj0wO2Y8bzsrK2Ype2lmKDE1PGlbZl0pcmV0dXJuIDA7KytnW2lbZl1dfWlmKGdbMF09PW8pcmV0dXJuIDA7Zm9yKG1bMV09MCxoPTE7MTU+aDsrK2gpe2lmKGdbaF0+MTw8aClyZXR1cm4gMDttW2grMV09bVtoXStnW2hdfWZvcihmPTA7ZjxvOysrZiloPWlbZl0sMDxpW2ZdJiYoc1ttW2hdKytdPWYpO2lmKDE9PW1bMTVdKXJldHVybihpPW5ldyBsKS5nPTAsaS52YWx1ZT1zWzBdLHUodCxkLDEscCxpKSxwO3ZhciB2LGI9LTEseT1wLTEsdz0wLE49MSxMPTEsQT0xPDxuO2ZvcihmPTAsaD0xLG89MjtoPD1uOysraCxvPDw9MSl7aWYoTis9TDw8PTEsMD4oTC09Z1toXSkpcmV0dXJuIDA7Zm9yKDswPGdbaF07LS1nW2hdKShpPW5ldyBsKS5nPWgsaS52YWx1ZT1zW2YrK10sdSh0LGQrdyxvLEEsaSksdz1jKHcsaCl9Zm9yKGg9bisxLG89MjsxNT49aDsrK2gsbzw8PTEpe2lmKE4rPUw8PD0xLDA+KEwtPWdbaF0pKXJldHVybiAwO2Zvcig7MDxnW2hdOy0tZ1toXSl7aWYoaT1uZXcgbCwodyZ5KSE9Yil7Zm9yKGQrPUEsdj0xPDwoYj1oKS1uOzE1PmImJiEoMD49KHYtPWdbYl0pKTspKytiLHY8PD0xO3ArPUE9MTw8KHY9Yi1uKSx0W3IrKGI9dyZ5KV0uZz12K24sdFtyK2JdLnZhbHVlPWQtci1ifWkuZz1oLW4saS52YWx1ZT1zW2YrK10sdSh0LGQrKHc+Pm4pLG8sQSxpKSx3PWModyxoKX19cmV0dXJuIE4hPTIqbVsxNV0tMT8wOnB9KHQscixuLGksbyxzKX1mdW5jdGlvbiBsKCl7dGhpcy52YWx1ZT10aGlzLmc9MH1mdW5jdGlvbiBmKCl7dGhpcy52YWx1ZT10aGlzLmc9MH1mdW5jdGlvbiBkKCl7dGhpcy5HPW8oNSxsKSx0aGlzLkg9YSg1KSx0aGlzLmpjPXRoaXMuUWI9dGhpcy5xYj10aGlzLm5kPTAsdGhpcy5wZD1vKERyLGYpfWZ1bmN0aW9uIHAodCxyLG4saSl7ZShudWxsIT10KSxlKG51bGwhPXIpLGUoMjE0NzQ4MzY0OD5pKSx0LkNhPTI1NCx0Lkk9MCx0LmI9LTgsdC5LYT0wLHQub2E9cix0LnBhPW4sdC5KZD1yLHQuWWM9bitpLHQuWmM9NDw9aT9uK2ktNCsxOm4sXyh0KX1mdW5jdGlvbiBnKHQsZSl7Zm9yKHZhciByPTA7MDxlLS07KXJ8PWsodCwxMjgpPDxlO3JldHVybiByfWZ1bmN0aW9uIG0odCxlKXt2YXIgcj1nKHQsZSk7cmV0dXJuIFAodCk/LXI6cn1mdW5jdGlvbiB2KHQscixuLGkpe3ZhciBhLG89MDtmb3IoZShudWxsIT10KSxlKG51bGwhPXIpLGUoNDI5NDk2NzI4OD5pKSx0LlNiPWksdC5SYT0wLHQudT0wLHQuaD0wLDQ8aSYmKGk9NCksYT0wO2E8aTsrK2Epbys9cltuK2FdPDw4KmE7dC5SYT1vLHQuYmI9aSx0Lm9hPXIsdC5wYT1ufWZ1bmN0aW9uIGIodCl7Zm9yKDs4PD10LnUmJnQuYmI8dC5TYjspdC5SYT4+Pj04LHQuUmErPXQub2FbdC5wYSt0LmJiXTw8VXItOD4+PjAsKyt0LmJiLHQudS09ODtBKHQpJiYodC5oPTEsdC51PTApfWZ1bmN0aW9uIHkodCxyKXtpZihlKDA8PXIpLCF0LmgmJnI8PVRyKXt2YXIgbj1MKHQpJlJyW3JdO3JldHVybiB0LnUrPXIsYih0KSxufXJldHVybiB0Lmg9MSx0LnU9MH1mdW5jdGlvbiB3KCl7dGhpcy5iPXRoaXMuQ2E9dGhpcy5JPTAsdGhpcy5vYT1bXSx0aGlzLnBhPTAsdGhpcy5KZD1bXSx0aGlzLlljPTAsdGhpcy5aYz1bXSx0aGlzLkthPTB9ZnVuY3Rpb24gTigpe3RoaXMuUmE9MCx0aGlzLm9hPVtdLHRoaXMuaD10aGlzLnU9dGhpcy5iYj10aGlzLlNiPXRoaXMucGE9MH1mdW5jdGlvbiBMKHQpe3JldHVybiB0LlJhPj4+KHQudSZVci0xKT4+PjB9ZnVuY3Rpb24gQSh0KXtyZXR1cm4gZSh0LmJiPD10LlNiKSx0Lmh8fHQuYmI9PXQuU2ImJnQudT5Vcn1mdW5jdGlvbiB4KHQsZSl7dC51PWUsdC5oPUEodCl9ZnVuY3Rpb24gUyh0KXt0LnU+PXpyJiYoZSh0LnU+PXpyKSxiKHQpKX1mdW5jdGlvbiBfKHQpe2UobnVsbCE9dCYmbnVsbCE9dC5vYSksdC5wYTx0LlpjPyh0Lkk9KHQub2FbdC5wYSsrXXx0Lkk8PDgpPj4+MCx0LmIrPTgpOihlKG51bGwhPXQmJm51bGwhPXQub2EpLHQucGE8dC5ZYz8odC5iKz04LHQuST10Lm9hW3QucGErK118dC5JPDw4KTp0LkthP3QuYj0wOih0Lkk8PD04LHQuYis9OCx0LkthPTEpKX1mdW5jdGlvbiBQKHQpe3JldHVybiBnKHQsMSl9ZnVuY3Rpb24gayh0LGUpe3ZhciByPXQuQ2E7MD50LmImJl8odCk7dmFyIG49dC5iLGk9ciplPj4+OCxhPSh0Lkk+Pj5uPmkpKzA7Zm9yKGE/KHItPWksdC5JLT1pKzE8PG4+Pj4wKTpyPWkrMSxuPXIsaT0wOzI1Njw9bjspaSs9OCxuPj49ODtyZXR1cm4gbj03XmkrSHJbbl0sdC5iLT1uLHQuQ2E9KHI8PG4pLTEsYX1mdW5jdGlvbiBJKHQsZSxyKXt0W2UrMF09cj4+MjQmMjU1LHRbZSsxXT1yPj4xNiYyNTUsdFtlKzJdPXI+PjgmMjU1LHRbZSszXT1yPj4wJjI1NX1mdW5jdGlvbiBGKHQsZSl7cmV0dXJuIHRbZSswXTw8MHx0W2UrMV08PDh9ZnVuY3Rpb24gQyh0LGUpe3JldHVybiBGKHQsZSl8dFtlKzJdPDwxNn1mdW5jdGlvbiBqKHQsZSl7cmV0dXJuIEYodCxlKXxGKHQsZSsyKTw8MTZ9ZnVuY3Rpb24gTyh0LHIpe3ZhciBuPTE8PHI7cmV0dXJuIGUobnVsbCE9dCksZSgwPHIpLHQuWD1hKG4pLG51bGw9PXQuWD8wOih0Lk1iPTMyLXIsdC5YYT1yLDEpfWZ1bmN0aW9uIEIodCxyKXtlKG51bGwhPXQpLGUobnVsbCE9ciksZSh0LlhhPT1yLlhhKSxuKHIuWCwwLHQuWCwwLDE8PHIuWGEpfWZ1bmN0aW9uIE0oKXt0aGlzLlg9W10sdGhpcy5YYT10aGlzLk1iPTB9ZnVuY3Rpb24gRSh0LHIsbixpKXtlKG51bGwhPW4pLGUobnVsbCE9aSk7dmFyIGE9blswXSxvPWlbMF07cmV0dXJuIDA9PWEmJihhPSh0Km8rci8yKS9yKSwwPT1vJiYobz0ociphK3QvMikvdCksMD49YXx8MD49bz8wOihuWzBdPWEsaVswXT1vLDEpfWZ1bmN0aW9uIHEodCxlKXtyZXR1cm4gdCsoMTw8ZSktMT4+PmV9ZnVuY3Rpb24gRCh0LGUpe3JldHVybigoNDI3ODI1NTM2MCZ0KSsoNDI3ODI1NTM2MCZlKT4+PjAmNDI3ODI1NTM2MCkrKCgxNjcxMTkzNSZ0KSsoMTY3MTE5MzUmZSk+Pj4wJjE2NzExOTM1KT4+PjB9ZnVuY3Rpb24gUihlLHIpe3Rbcl09ZnVuY3Rpb24ocixuLGksYSxvLHMsYyl7dmFyIHU7Zm9yKHU9MDt1PG87Kyt1KXt2YXIgaD10W2VdKHNbYyt1LTFdLGksYSt1KTtzW2MrdV09RChyW24rdV0saCl9fX1mdW5jdGlvbiBUKCl7dGhpcy51ZD10aGlzLmhkPXRoaXMuamQ9MH1mdW5jdGlvbiBVKHQsZSl7cmV0dXJuKCg0Mjc4MTI0Mjg2Jih0XmUpKT4+PjEpKyh0JmUpPj4+MH1mdW5jdGlvbiB6KHQpe3JldHVybiAwPD10JiYyNTY+dD90OjA+dD8wOjI1NTx0PzI1NTp2b2lkIDB9ZnVuY3Rpb24gSCh0LGUpe3JldHVybiB6KHQrKHQtZSsuNT4+MSkpfWZ1bmN0aW9uIFcodCxlLHIpe3JldHVybiBNYXRoLmFicyhlLXIpLU1hdGguYWJzKHQtcil9ZnVuY3Rpb24gVih0LGUscixuLGksYSxvKXtmb3Iobj1hW28tMV0scj0wO3I8aTsrK3IpYVtvK3JdPW49RCh0W2Urcl0sbil9ZnVuY3Rpb24gRyh0LGUscixuLGkpe3ZhciBhO2ZvcihhPTA7YTxyOysrYSl7dmFyIG89dFtlK2FdLHM9bz4+OCYyNTUsYz0xNjcxMTkzNSYoYz0oYz0xNjcxMTkzNSZvKSsoKHM8PDE2KStzKSk7bltpK2FdPSg0Mjc4MjU1MzYwJm8pK2M+Pj4wfX1mdW5jdGlvbiBZKHQsZSl7ZS5qZD10Pj4wJjI1NSxlLmhkPXQ+PjgmMjU1LGUudWQ9dD4+MTYmMjU1fWZ1bmN0aW9uIEoodCxlLHIsbixpLGEpe3ZhciBvO2ZvcihvPTA7bzxuOysrbyl7dmFyIHM9ZVtyK29dLGM9cz4+PjgsdT1zLGg9MjU1JihoPShoPXM+Pj4xNikrKCh0LmpkPDwyND4+MjQpKihjPDwyND4+MjQpPj4+NSkpO3U9MjU1Jih1PSh1PXUrKCh0LmhkPDwyND4+MjQpKihjPDwyND4+MjQpPj4+NSkpKygodC51ZDw8MjQ+PjI0KSooaDw8MjQ+PjI0KT4+PjUpKTtpW2Erb109KDQyNzgyNTUzNjAmcykrKGg8PDE2KSt1fX1mdW5jdGlvbiBYKGUscixuLGksYSl7dFtyXT1mdW5jdGlvbih0LGUscixuLG8scyxjLHUsaCl7Zm9yKG49YztuPHU7KytuKWZvcihjPTA7YzxoOysrYylvW3MrK109YShyW2kodFtlKytdKV0pfSx0W2VdPWZ1bmN0aW9uKGUscixvLHMsYyx1LGgpe3ZhciBsPTg+PmUuYixmPWUuRWEsZD1lLktbMF0scD1lLnc7aWYoOD5sKWZvcihlPSgxPDxlLmIpLTEscD0oMTw8bCktMTtyPG87KytyKXt2YXIgZyxtPTA7Zm9yKGc9MDtnPGY7KytnKWcmZXx8KG09aShzW2MrK10pKSx1W2grK109YShkW20mcF0pLG0+Pj1sfWVsc2UgdFtcIlZQOExNYXBDb2xvclwiK25dKHMsYyxkLHAsdSxoLHIsbyxmKX19ZnVuY3Rpb24gSyh0LGUscixuLGkpe2ZvcihyPWUrcjtlPHI7KXt2YXIgYT10W2UrK107bltpKytdPWE+PjE2JjI1NSxuW2krK109YT4+OCYyNTUsbltpKytdPWE+PjAmMjU1fX1mdW5jdGlvbiBaKHQsZSxyLG4saSl7Zm9yKHI9ZStyO2U8cjspe3ZhciBhPXRbZSsrXTtuW2krK109YT4+MTYmMjU1LG5baSsrXT1hPj44JjI1NSxuW2krK109YT4+MCYyNTUsbltpKytdPWE+PjI0JjI1NX19ZnVuY3Rpb24gJCh0LGUscixuLGkpe2ZvcihyPWUrcjtlPHI7KXt2YXIgYT0obz10W2UrK10pPj4xNiYyNDB8bz4+MTImMTUsbz1vPj4wJjI0MHxvPj4yOCYxNTtuW2krK109YSxuW2krK109b319ZnVuY3Rpb24gUSh0LGUscixuLGkpe2ZvcihyPWUrcjtlPHI7KXt2YXIgYT0obz10W2UrK10pPj4xNiYyNDh8bz4+MTMmNyxvPW8+PjUmMjI0fG8+PjMmMzE7bltpKytdPWEsbltpKytdPW99fWZ1bmN0aW9uIHR0KHQsZSxyLG4saSl7Zm9yKHI9ZStyO2U8cjspe3ZhciBhPXRbZSsrXTtuW2krK109YT4+MCYyNTUsbltpKytdPWE+PjgmMjU1LG5baSsrXT1hPj4xNiYyNTV9fWZ1bmN0aW9uIGV0KHQsZSxyLGksYSxvKXtpZigwPT1vKWZvcihyPWUrcjtlPHI7KUkoaSwoKG89dFtlKytdKVswXT4+MjR8b1sxXT4+OCY2NTI4MHxvWzJdPDw4JjE2NzExNjgwfG9bM108PDI0KT4+PjApLGErPTMyO2Vsc2UgbihpLGEsdCxlLHIpfWZ1bmN0aW9uIHJ0KGUscil7dFtyXVswXT10W2UrXCIwXCJdLHRbcl1bMV09dFtlK1wiMVwiXSx0W3JdWzJdPXRbZStcIjJcIl0sdFtyXVszXT10W2UrXCIzXCJdLHRbcl1bNF09dFtlK1wiNFwiXSx0W3JdWzVdPXRbZStcIjVcIl0sdFtyXVs2XT10W2UrXCI2XCJdLHRbcl1bN109dFtlK1wiN1wiXSx0W3JdWzhdPXRbZStcIjhcIl0sdFtyXVs5XT10W2UrXCI5XCJdLHRbcl1bMTBdPXRbZStcIjEwXCJdLHRbcl1bMTFdPXRbZStcIjExXCJdLHRbcl1bMTJdPXRbZStcIjEyXCJdLHRbcl1bMTNdPXRbZStcIjEzXCJdLHRbcl1bMTRdPXRbZStcIjBcIl0sdFtyXVsxNV09dFtlK1wiMFwiXX1mdW5jdGlvbiBudCh0KXtyZXR1cm4gdD09SG58fHQ9PVdufHx0PT1Wbnx8dD09R259ZnVuY3Rpb24gaXQoKXt0aGlzLmViPVtdLHRoaXMuc2l6ZT10aGlzLkE9dGhpcy5mYj0wfWZ1bmN0aW9uIGF0KCl7dGhpcy55PVtdLHRoaXMuZj1bXSx0aGlzLmVhPVtdLHRoaXMuRj1bXSx0aGlzLlRjPXRoaXMuRWQ9dGhpcy5DZD10aGlzLkZkPXRoaXMubGI9dGhpcy5EYj10aGlzLkFiPXRoaXMuZmE9dGhpcy5KPXRoaXMuVz10aGlzLk49dGhpcy5PPTB9ZnVuY3Rpb24gb3QoKXt0aGlzLlJkPXRoaXMuaGVpZ2h0PXRoaXMud2lkdGg9dGhpcy5TPTAsdGhpcy5mPXt9LHRoaXMuZi5SR0JBPW5ldyBpdCx0aGlzLmYua2I9bmV3IGF0LHRoaXMuc2Q9bnVsbH1mdW5jdGlvbiBzdCgpe3RoaXMud2lkdGg9WzBdLHRoaXMuaGVpZ2h0PVswXSx0aGlzLlBkPVswXSx0aGlzLlFkPVswXSx0aGlzLmZvcm1hdD1bMF19ZnVuY3Rpb24gY3QoKXt0aGlzLklkPXRoaXMuZmQ9dGhpcy5NZD10aGlzLmhiPXRoaXMuaWI9dGhpcy5kYT10aGlzLmJkPXRoaXMuY2Q9dGhpcy5qPXRoaXMudj10aGlzLkRhPXRoaXMuU2Q9dGhpcy5vYj0wfWZ1bmN0aW9uIHV0KHQpe3JldHVybiBhbGVydChcInRvZG86V2ViUFNhbXBsZXJQcm9jZXNzUGxhbmVcIiksdC5UfWZ1bmN0aW9uIGh0KHQsZSl7dmFyIHI9dC5ULGk9ZS5iYS5mLlJHQkEsYT1pLmViLG89aS5mYit0LmthKmkuQSxzPXZpW2UuYmEuU10sYz10LnksdT10Lk8saD10LmYsbD10Lk4sZj10LmVhLGQ9dC5XLHA9ZS5jYyxnPWUuZGMsbT1lLk1jLHY9ZS5OYyxiPXQua2EseT10LmthK3QuVCx3PXQuVSxOPXcrMT4+MTtmb3IoMD09Yj9zKGMsdSxudWxsLG51bGwsaCxsLGYsZCxoLGwsZixkLGEsbyxudWxsLG51bGwsdyk6KHMoZS5lYyxlLmZjLGMsdSxwLGcsbSx2LGgsbCxmLGQsYSxvLWkuQSxhLG8sdyksKytyKTtiKzI8eTtiKz0yKXA9aCxnPWwsbT1mLHY9ZCxsKz10LlJjLGQrPXQuUmMsbys9MippLkEscyhjLCh1Kz0yKnQuZmEpLXQuZmEsYyx1LHAsZyxtLHYsaCxsLGYsZCxhLG8taS5BLGEsbyx3KTtyZXR1cm4gdSs9dC5mYSx0LmoreTx0Lm8/KG4oZS5lYyxlLmZjLGMsdSx3KSxuKGUuY2MsZS5kYyxoLGwsTiksbihlLk1jLGUuTmMsZixkLE4pLHItLSk6MSZ5fHxzKGMsdSxudWxsLG51bGwsaCxsLGYsZCxoLGwsZixkLGEsbytpLkEsbnVsbCxudWxsLHcpLHJ9ZnVuY3Rpb24gbHQodCxyLG4pe3ZhciBpPXQuRixhPVt0LkpdO2lmKG51bGwhPWkpe3ZhciBvPXQuVSxzPXIuYmEuUyxjPXM9PVRufHxzPT1WbjtyPXIuYmEuZi5SR0JBO3ZhciB1PVswXSxoPXQua2E7dVswXT10LlQsdC5LYiYmKDA9PWg/LS11WzBdOigtLWgsYVswXS09dC53aWR0aCksdC5qK3Qua2ErdC5UPT10Lm8mJih1WzBdPXQuby10LmotaCkpO3ZhciBsPXIuZWI7aD1yLmZiK2gqci5BO3Q9U24oaSxhWzBdLHQud2lkdGgsbyx1LGwsaCsoYz8wOjMpLHIuQSksZShuPT11KSx0JiZudChzKSYmQW4obCxoLGMsbyx1LHIuQSl9cmV0dXJuIDB9ZnVuY3Rpb24gZnQodCl7dmFyIGU9dC5tYSxyPWUuYmEuUyxuPTExPnIsaT1yPT1xbnx8cj09Um58fHI9PVRufHxyPT1Vbnx8MTI9PXJ8fG50KHIpO2lmKGUubWVtb3J5PW51bGwsZS5JYj1udWxsLGUuSmI9bnVsbCxlLk5kPW51bGwsIU1yKGUuT2EsdCxpPzExOjEyKSlyZXR1cm4gMDtpZihpJiZudChyKSYmYnIoKSx0LmRhKWFsZXJ0KFwidG9kbzp1c2Vfc2NhbGluZ1wiKTtlbHNle2lmKG4pe2lmKGUuSWI9dXQsdC5LYil7aWYocj10LlUrMT4+MSxlLm1lbW9yeT1hKHQuVSsyKnIpLG51bGw9PWUubWVtb3J5KXJldHVybiAwO2UuZWM9ZS5tZW1vcnksZS5mYz0wLGUuY2M9ZS5lYyxlLmRjPWUuZmMrdC5VLGUuTWM9ZS5jYyxlLk5jPWUuZGMrcixlLkliPWh0LGJyKCl9fWVsc2UgYWxlcnQoXCJ0b2RvOkVtaXRZVVZcIik7aSYmKGUuSmI9bHQsbiYmbXIoKSl9aWYobiYmIUNpKXtmb3IodD0wOzI1Nj50OysrdClqaVt0XT04OTg1OCoodC0xMjgpK19pPj5TaSxNaVt0XT0tMjIwMTQqKHQtMTI4KStfaSxCaVt0XT0tNDU3NzMqKHQtMTI4KSxPaVt0XT0xMTM2MTgqKHQtMTI4KStfaT4+U2k7Zm9yKHQ9UGk7dDxraTsrK3QpZT03NjI4MyoodC0xNikrX2k+PlNpLEVpW3QtUGldPVZ0KGUsMjU1KSxxaVt0LVBpXT1WdChlKzg+PjQsMTUpO0NpPTF9cmV0dXJuIDF9ZnVuY3Rpb24gZHQodCl7dmFyIHI9dC5tYSxuPXQuVSxpPXQuVDtyZXR1cm4gZSghKDEmdC5rYSkpLDA+PW58fDA+PWk/MDoobj1yLkliKHQsciksbnVsbCE9ci5KYiYmci5KYih0LHIsbiksci5EYys9biwxKX1mdW5jdGlvbiBwdCh0KXt0Lm1hLm1lbW9yeT1udWxsfWZ1bmN0aW9uIGd0KHQsZSxyLG4pe3JldHVybiA0NyE9eSh0LDgpPzA6KGVbMF09eSh0LDE0KSsxLHJbMF09eSh0LDE0KSsxLG5bMF09eSh0LDEpLDAhPXkodCwzKT8wOiF0LmgpfWZ1bmN0aW9uIG10KHQsZSl7aWYoND50KXJldHVybiB0KzE7dmFyIHI9dC0yPj4xO3JldHVybigyKygxJnQpPDxyKSt5KGUscikrMX1mdW5jdGlvbiB2dCh0LGUpe3JldHVybiAxMjA8ZT9lLTEyMDoxPD0ocj0oKHI9JG5bZS0xXSk+PjQpKnQrKDgtKDE1JnIpKSk/cjoxO3ZhciByfWZ1bmN0aW9uIGJ0KHQsZSxyKXt2YXIgbj1MKHIpLGk9dFtlKz0yNTUmbl0uZy04O3JldHVybiAwPGkmJih4KHIsci51KzgpLG49TChyKSxlKz10W2VdLnZhbHVlLGUrPW4mKDE8PGkpLTEpLHgocixyLnUrdFtlXS5nKSx0W2VdLnZhbHVlfWZ1bmN0aW9uIHl0KHQscixuKXtyZXR1cm4gbi5nKz10Lmcsbi52YWx1ZSs9dC52YWx1ZTw8cj4+PjAsZSg4Pj1uLmcpLHQuZ31mdW5jdGlvbiB3dCh0LHIsbil7dmFyIGk9dC54YztyZXR1cm4gZSgocj0wPT1pPzA6dC52Y1t0Lm1kKihuPj5pKSsocj4+aSldKTx0LldiKSx0LllhW3JdfWZ1bmN0aW9uIE50KHQscixpLGEpe3ZhciBvPXQuYWIscz10LmMqcixjPXQuQztyPWMrcjt2YXIgdT1pLGg9YTtmb3IoYT10LlRhLGk9dC5VYTswPG8tLTspe3ZhciBsPXQuZ2Nbb10sZj1jLGQ9cixwPXUsZz1oLG09KGg9YSx1PWksbC5FYSk7c3dpdGNoKGUoZjxkKSxlKGQ8PWwubmMpLGwuaGMpe2Nhc2UgMjpHcihwLGcsKGQtZikqbSxoLHUpO2JyZWFrO2Nhc2UgMDp2YXIgdj1mLGI9ZCx5PWgsdz11LE49KF89bCkuRWE7MD09diYmKFdyKHAsZyxudWxsLG51bGwsMSx5LHcpLFYocCxnKzEsMCwwLE4tMSx5LHcrMSksZys9Tix3Kz1OLCsrdik7Zm9yKHZhciBMPTE8PF8uYixBPUwtMSx4PXEoTixfLmIpLFM9Xy5LLF89Xy53Kyh2Pj5fLmIpKng7djxiOyl7dmFyIFA9UyxrPV8sST0xO2ZvcihWcihwLGcseSx3LU4sMSx5LHcpO0k8Tjspe3ZhciBGPShJJn5BKStMO0Y+TiYmKEY9TiksKDAsWnJbUFtrKytdPj44JjE1XSkocCxnKyArSSx5LHcrSS1OLEYtSSx5LHcrSSksST1GfWcrPU4sdys9TiwrK3YmQXx8KF8rPXgpfWQhPWwubmMmJm4oaCx1LW0saCx1KyhkLWYtMSkqbSxtKTticmVhaztjYXNlIDE6Zm9yKG09cCxiPWcsTj0ocD1sLkVhKS0odz1wJn4oeT0oZz0xPDxsLmIpLTEpKSx2PXEocCxsLmIpLEw9bC5LLGw9bC53KyhmPj5sLmIpKnY7ZjxkOyl7Zm9yKEE9TCx4PWwsUz1uZXcgVCxfPWIrdyxQPWIrcDtiPF87KVkoQVt4KytdLFMpLCRyKFMsbSxiLGcsaCx1KSxiKz1nLHUrPWc7YjxQJiYoWShBW3grK10sUyksJHIoUyxtLGIsTixoLHUpLGIrPU4sdSs9TiksKytmJnl8fChsKz12KX1icmVhaztjYXNlIDM6aWYocD09aCYmZz09dSYmMDxsLmIpe2ZvcihiPWgscD1tPXUrKGQtZikqbS0odz0oZC1mKSpxKGwuRWEsbC5iKSksZz1oLHk9dSx2PVtdLHc9KE49dyktMTswPD13Oy0tdyl2W3ddPWdbeSt3XTtmb3Iodz1OLTE7MDw9dzstLXcpYltwK3ddPXZbd107WXIobCxmLGQsaCxtLGgsdSl9ZWxzZSBZcihsLGYsZCxwLGcsaCx1KX11PWEsaD1pfWghPWkmJm4oYSxpLHUsaCxzKX1mdW5jdGlvbiBMdCh0LHIpe3ZhciBuPXQuVixpPXQuQmErdC5jKnQuQyxhPXItdC5DO2lmKGUocjw9dC5sLm8pLGUoMTY+PWEpLDA8YSl7dmFyIG89dC5sLHM9dC5UYSxjPXQuVWEsdT1vLndpZHRoO2lmKE50KHQsYSxuLGkpLGE9Yz1bY10sZSgobj10LkMpPChpPXIpKSxlKG8udjxvLnZhKSxpPm8ubyYmKGk9by5vKSxuPG8uail7dmFyIGg9by5qLW47bj1vLmo7YVswXSs9aCp1fWlmKG4+PWk/bj0wOihhWzBdKz00Km8udixvLmthPW4tby5qLG8uVT1vLnZhLW8udixvLlQ9aS1uLG49MSksbil7aWYoYz1jWzBdLDExPihuPXQuY2EpLlMpe3ZhciBsPW4uZi5SR0JBLGY9KGk9bi5TLGE9by5VLG89by5ULGg9bC5lYixsLkEpLGQ9bztmb3IobD1sLmZiK3QuTWEqbC5BOzA8ZC0tOyl7dmFyIHA9cyxnPWMsbT1hLHY9aCxiPWw7c3dpdGNoKGkpe2Nhc2UgRW46UXIocCxnLG0sdixiKTticmVhaztjYXNlIHFuOnRuKHAsZyxtLHYsYik7YnJlYWs7Y2FzZSBIbjp0bihwLGcsbSx2LGIpLEFuKHYsYiwwLG0sMSwwKTticmVhaztjYXNlIERuOm5uKHAsZyxtLHYsYik7YnJlYWs7Y2FzZSBSbjpldChwLGcsbSx2LGIsMSk7YnJlYWs7Y2FzZSBXbjpldChwLGcsbSx2LGIsMSksQW4odixiLDAsbSwxLDApO2JyZWFrO2Nhc2UgVG46ZXQocCxnLG0sdixiLDApO2JyZWFrO2Nhc2UgVm46ZXQocCxnLG0sdixiLDApLEFuKHYsYiwxLG0sMSwwKTticmVhaztjYXNlIFVuOmVuKHAsZyxtLHYsYik7YnJlYWs7Y2FzZSBHbjplbihwLGcsbSx2LGIpLHhuKHYsYixtLDEsMCk7YnJlYWs7Y2FzZSB6bjpybihwLGcsbSx2LGIpO2JyZWFrO2RlZmF1bHQ6ZSgwKX1jKz11LGwrPWZ9dC5NYSs9b31lbHNlIGFsZXJ0KFwidG9kbzpFbWl0UmVzY2FsZWRSb3dzWVVWQVwiKTtlKHQuTWE8PW4uaGVpZ2h0KX19dC5DPXIsZSh0LkM8PXQuaSl9ZnVuY3Rpb24gQXQodCl7dmFyIGU7aWYoMDx0LnVhKXJldHVybiAwO2ZvcihlPTA7ZTx0LldiOysrZSl7dmFyIHI9dC5ZYVtlXS5HLG49dC5ZYVtlXS5IO2lmKDA8clsxXVtuWzFdKzBdLmd8fDA8clsyXVtuWzJdKzBdLmd8fDA8clszXVtuWzNdKzBdLmcpcmV0dXJuIDB9cmV0dXJuIDF9ZnVuY3Rpb24geHQodCxyLG4saSxhLG8pe2lmKDAhPXQuWil7dmFyIHM9dC5xZCxjPXQucmQ7Zm9yKGUobnVsbCE9bWlbdC5aXSk7cjxuOysrciltaVt0LlpdKHMsYyxpLGEsaSxhLG8pLHM9aSxjPWEsYSs9bzt0LnFkPXMsdC5yZD1jfX1mdW5jdGlvbiBTdCh0LHIpe3ZhciBuPXQubC5tYSxpPTA9PW4uWnx8MT09bi5aP3QubC5qOnQuQztpPXQuQzxpP2k6dC5DO2lmKGUocjw9dC5sLm8pLHI+aSl7dmFyIGE9dC5sLndpZHRoLG89bi5jYSxzPW4udGIrYSppLGM9dC5WLHU9dC5CYSt0LmMqaSxoPXQuZ2M7ZSgxPT10LmFiKSxlKDM9PWhbMF0uaGMpLFhyKGhbMF0saSxyLGMsdSxvLHMpLHh0KG4saSxyLG8scyxhKX10LkM9dC5NYT1yfWZ1bmN0aW9uIF90KHQscixuLGksYSxvLHMpe3ZhciBjPXQuJC9pLHU9dC4kJWksaD10Lm0sbD10LnMsZj1uK3QuJCxkPWY7YT1uK2kqYTt2YXIgcD1uK2kqbyxnPTI4MCtsLnVhLG09dC5QYj9jOjE2Nzc3MjE2LHY9MDxsLnVhP2wuV2E6bnVsbCxiPWwud2MseT1mPHA/d3QobCx1LGMpOm51bGw7ZSh0LkM8byksZShwPD1hKTt2YXIgdz0hMTt0OmZvcig7Oyl7Zm9yKDt3fHxmPHA7KXt2YXIgTj0wO2lmKGM+PW0pe3ZhciBfPWYtbjtlKChtPXQpLlBiKSxtLndkPW0ubSxtLnhkPV8sMDxtLnMudWEmJkIobS5zLldhLG0ucy52YiksbT1jK3RpfWlmKHUmYnx8KHk9d3QobCx1LGMpKSxlKG51bGwhPXkpLHkuUWImJihyW2ZdPXkucWIsdz0hMCksIXcpaWYoUyhoKSx5LmpjKXtOPWgsXz1yO3ZhciBQPWYsaz15LnBkW0woTikmRHItMV07ZSh5LmpjKSwyNTY+ay5nPyh4KE4sTi51K2suZyksX1tQXT1rLnZhbHVlLE49MCk6KHgoTixOLnUray5nLTI1NiksZSgyNTY8PWsudmFsdWUpLE49ay52YWx1ZSksMD09TiYmKHc9ITApfWVsc2UgTj1idCh5LkdbMF0seS5IWzBdLGgpO2lmKGguaClicmVhaztpZih3fHwyNTY+Til7aWYoIXcpaWYoeS5uZClyW2ZdPSh5LnFifE48PDgpPj4+MDtlbHNle2lmKFMoaCksdz1idCh5LkdbMV0seS5IWzFdLGgpLFMoaCksXz1idCh5LkdbMl0seS5IWzJdLGgpLFA9YnQoeS5HWzNdLHkuSFszXSxoKSxoLmgpYnJlYWs7cltmXT0oUDw8MjR8dzw8MTZ8Tjw8OHxfKT4+PjB9aWYodz0hMSwrK2YsKyt1Pj1pJiYodT0wLCsrYyxudWxsIT1zJiZjPD1vJiYhKGMlMTYpJiZzKHQsYyksbnVsbCE9dikpZm9yKDtkPGY7KU49cltkKytdLHYuWFsoNTA2ODMyODI5Kk4mNDI5NDk2NzI5NSk+Pj52Lk1iXT1OfWVsc2UgaWYoMjgwPk4pe2lmKE49bXQoTi0yNTYsaCksXz1idCh5LkdbNF0seS5IWzRdLGgpLFMoaCksXz12dChpLF89bXQoXyxoKSksaC5oKWJyZWFrO2lmKGYtbjxffHxhLWY8TilicmVhayB0O2ZvcihQPTA7UDxOOysrUClyW2YrUF09cltmK1AtX107Zm9yKGYrPU4sdSs9Tjt1Pj1pOyl1LT1pLCsrYyxudWxsIT1zJiZjPD1vJiYhKGMlMTYpJiZzKHQsYyk7aWYoZShmPD1hKSx1JmImJih5PXd0KGwsdSxjKSksbnVsbCE9dilmb3IoO2Q8ZjspTj1yW2QrK10sdi5YWyg1MDY4MzI4MjkqTiY0Mjk0OTY3Mjk1KT4+PnYuTWJdPU59ZWxzZXtpZighKE48ZykpYnJlYWsgdDtmb3Iodz1OLTI4MCxlKG51bGwhPXYpO2Q8ZjspTj1yW2QrK10sdi5YWyg1MDY4MzI4MjkqTiY0Mjk0OTY3Mjk1KT4+PnYuTWJdPU47Tj1mLGUoISh3Pj4+KF89dikuWGEpKSxyW05dPV8uWFt3XSx3PSEwfXd8fGUoaC5oPT1BKGgpKX1pZih0LlBiJiZoLmgmJmY8YSllKHQubS5oKSx0LmE9NSx0Lm09dC53ZCx0LiQ9dC54ZCwwPHQucy51YSYmQih0LnMudmIsdC5zLldhKTtlbHNle2lmKGguaClicmVhayB0O251bGwhPXMmJnModCxjPm8/bzpjKSx0LmE9MCx0LiQ9Zi1ufXJldHVybiAxfXJldHVybiB0LmE9MywwfWZ1bmN0aW9uIFB0KHQpe2UobnVsbCE9dCksdC52Yz1udWxsLHQueWM9bnVsbCx0LllhPW51bGw7dmFyIHI9dC5XYTtudWxsIT1yJiYoci5YPW51bGwpLHQudmI9bnVsbCxlKG51bGwhPXQpfWZ1bmN0aW9uIGt0KCl7dmFyIGU9bmV3IG9yO3JldHVybiBudWxsPT1lP251bGw6KGUuYT0wLGUueGI9Z2kscnQoXCJQcmVkaWN0b3JcIixcIlZQOExQcmVkaWN0b3JzXCIpLHJ0KFwiUHJlZGljdG9yXCIsXCJWUDhMUHJlZGljdG9yc19DXCIpLHJ0KFwiUHJlZGljdG9yQWRkXCIsXCJWUDhMUHJlZGljdG9yc0FkZFwiKSxydChcIlByZWRpY3RvckFkZFwiLFwiVlA4TFByZWRpY3RvcnNBZGRfQ1wiKSxHcj1HLCRyPUosUXI9Syx0bj1aLGVuPSQscm49USxubj10dCx0LlZQOExNYXBDb2xvcjMyYj1Kcix0LlZQOExNYXBDb2xvcjhiPUtyLGUpfWZ1bmN0aW9uIEl0KHQscixuLHMsYyl7dmFyIHU9MSxmPVt0XSxwPVtyXSxnPXMubSxtPXMucyx2PW51bGwsYj0wO3Q6Zm9yKDs7KXtpZihuKWZvcig7dSYmeShnLDEpOyl7dmFyIHc9ZixOPXAsQT1zLF89MSxQPUEubSxrPUEuZ2NbQS5hYl0sST15KFAsMik7aWYoQS5PYyYxPDxJKXU9MDtlbHNle3N3aXRjaChBLk9jfD0xPDxJLGsuaGM9SSxrLkVhPXdbMF0say5uYz1OWzBdLGsuSz1bbnVsbF0sKytBLmFiLGUoND49QS5hYiksSSl7Y2FzZSAwOmNhc2UgMTprLmI9eShQLDMpKzIsXz1JdChxKGsuRWEsay5iKSxxKGsubmMsay5iKSwwLEEsay5LKSxrLks9ay5LWzBdO2JyZWFrO2Nhc2UgMzp2YXIgRixDPXkoUCw4KSsxLGo9MTY8Qz8wOjQ8Qz8xOjI8Qz8yOjM7aWYod1swXT1xKGsuRWEsaiksay5iPWosRj1fPUl0KEMsMSwwLEEsay5LKSl7dmFyIEIsTT1DLEU9ayxSPTE8PCg4Pj5FLmIpLFQ9YShSKTtpZihudWxsPT1UKUY9MDtlbHNle3ZhciBVPUUuS1swXSx6PUUudztmb3IoVFswXT1FLktbMF1bMF0sQj0xO0I8MSpNOysrQilUW0JdPUQoVVt6K0JdLFRbQi0xXSk7Zm9yKDtCPDQqUjsrK0IpVFtCXT0wO0UuS1swXT1udWxsLEUuS1swXT1ULEY9MX19Xz1GO2JyZWFrO2Nhc2UgMjpicmVhaztkZWZhdWx0OmUoMCl9dT1ffX1pZihmPWZbMF0scD1wWzBdLHUmJnkoZywxKSYmISh1PTE8PShiPXkoZyw0KSkmJjExPj1iKSl7cy5hPTM7YnJlYWsgdH12YXIgSDtpZihIPXUpZTp7dmFyIFcsVixHLFk9cyxKPWYsWD1wLEs9YixaPW4sJD1ZLm0sUT1ZLnMsdHQ9W251bGxdLGV0PTEscnQ9MCxudD1RbltLXTtyOmZvcig7Oyl7aWYoWiYmeSgkLDEpKXt2YXIgaXQ9eSgkLDMpKzIsYXQ9cShKLGl0KSxvdD1xKFgsaXQpLHN0PWF0Km90O2lmKCFJdChhdCxvdCwwLFksdHQpKWJyZWFrIHI7Zm9yKHR0PXR0WzBdLFEueGM9aXQsVz0wO1c8c3Q7KytXKXt2YXIgY3Q9dHRbV10+PjgmNjU1MzU7dHRbV109Y3QsY3Q+PWV0JiYoZXQ9Y3QrMSl9fWlmKCQuaClicmVhayByO2ZvcihWPTA7NT5WOysrVil7dmFyIHV0PVhuW1ZdOyFWJiYwPEsmJih1dCs9MTw8SykscnQ8dXQmJihydD11dCl9dmFyIGh0PW8oZXQqbnQsbCksbHQ9ZXQsZnQ9byhsdCxkKTtpZihudWxsPT1mdCl2YXIgZHQ9bnVsbDtlbHNlIGUoNjU1MzY+PWx0KSxkdD1mdDt2YXIgcHQ9YShydCk7aWYobnVsbD09ZHR8fG51bGw9PXB0fHxudWxsPT1odCl7WS5hPTE7YnJlYWsgcn12YXIgZ3Q9aHQ7Zm9yKFc9Rz0wO1c8ZXQ7KytXKXt2YXIgbXQ9ZHRbV10sdnQ9bXQuRyxidD1tdC5ILHd0PTAsTnQ9MSxMdD0wO2ZvcihWPTA7NT5WOysrVil7dXQ9WG5bVl0sdnRbVl09Z3QsYnRbVl09RywhViYmMDxLJiYodXQrPTE8PEspO246e3ZhciBBdCx4dD11dCxTdD1ZLGt0PXB0LEZ0PWd0LEN0PUcsanQ9MCxPdD1TdC5tLEJ0PXkoT3QsMSk7aWYoaShrdCwwLDAseHQpLEJ0KXt2YXIgTXQ9eShPdCwxKSsxLEV0PXkoT3QsMSkscXQ9eShPdCwwPT1FdD8xOjgpO2t0W3F0XT0xLDI9PU10JiYoa3RbcXQ9eShPdCw4KV09MSk7dmFyIER0PTF9ZWxzZXt2YXIgUnQ9YSgxOSksVHQ9eShPdCw0KSs0O2lmKDE5PFR0KXtTdC5hPTM7dmFyIFV0PTA7YnJlYWsgbn1mb3IoQXQ9MDtBdDxUdDsrK0F0KVJ0W1puW0F0XV09eShPdCwzKTt2YXIgenQ9dm9pZCAwLEh0PXZvaWQgMCxXdD1TdCxWdD1SdCxHdD14dCxZdD1rdCxKdD0wLFh0PVd0Lm0sS3Q9OCxadD1vKDEyOCxsKTtpOmZvcig7aChadCwwLDcsVnQsMTkpOyl7aWYoeShYdCwxKSl7dmFyICR0PTIrMip5KFh0LDMpO2lmKCh6dD0yK3koWHQsJHQpKT5HdClicmVhayBpfWVsc2UgenQ9R3Q7Zm9yKEh0PTA7SHQ8R3QmJnp0LS07KXtTKFh0KTt2YXIgUXQ9WnRbMCsoMTI3JkwoWHQpKV07eChYdCxYdC51K1F0LmcpO3ZhciB0ZT1RdC52YWx1ZTtpZigxNj50ZSlZdFtIdCsrXT10ZSwwIT10ZSYmKEt0PXRlKTtlbHNle3ZhciBlZT0xNj09dGUscmU9dGUtMTYsbmU9Sm5bcmVdLGllPXkoWHQsWW5bcmVdKStuZTtpZihIdCtpZT5HdClicmVhayBpO2Zvcih2YXIgYWU9ZWU/S3Q6MDswPGllLS07KVl0W0h0KytdPWFlfX1KdD0xO2JyZWFrIGl9SnR8fChXdC5hPTMpLER0PUp0fShEdD1EdCYmIU90LmgpJiYoanQ9aChGdCxDdCw4LGt0LHh0KSksRHQmJjAhPWp0P1V0PWp0OihTdC5hPTMsVXQ9MCl9aWYoMD09VXQpYnJlYWsgcjtpZihOdCYmMT09S25bVl0mJihOdD0wPT1ndFtHXS5nKSx3dCs9Z3RbR10uZyxHKz1VdCwzPj1WKXt2YXIgb2Usc2U9cHRbMF07Zm9yKG9lPTE7b2U8dXQ7KytvZSlwdFtvZV0+c2UmJihzZT1wdFtvZV0pO0x0Kz1zZX19aWYobXQubmQ9TnQsbXQuUWI9MCxOdCYmKG10LnFiPSh2dFszXVtidFszXSswXS52YWx1ZTw8MjR8dnRbMV1bYnRbMV0rMF0udmFsdWU8PDE2fHZ0WzJdW2J0WzJdKzBdLnZhbHVlKT4+PjAsMD09d3QmJjI1Nj52dFswXVtidFswXSswXS52YWx1ZSYmKG10LlFiPTEsbXQucWIrPXZ0WzBdW2J0WzBdKzBdLnZhbHVlPDw4KSksbXQuamM9IW10LlFiJiY2Pkx0LG10LmpjKXt2YXIgY2UsdWU9bXQ7Zm9yKGNlPTA7Y2U8RHI7KytjZSl7dmFyIGhlPWNlLGxlPXVlLnBkW2hlXSxmZT11ZS5HWzBdW3VlLkhbMF0raGVdOzI1Njw9ZmUudmFsdWU/KGxlLmc9ZmUuZysyNTYsbGUudmFsdWU9ZmUudmFsdWUpOihsZS5nPTAsbGUudmFsdWU9MCxoZT4+PXl0KGZlLDgsbGUpLGhlPj49eXQodWUuR1sxXVt1ZS5IWzFdK2hlXSwxNixsZSksaGU+Pj15dCh1ZS5HWzJdW3VlLkhbMl0raGVdLDAsbGUpLHl0KHVlLkdbM11bdWUuSFszXStoZV0sMjQsbGUpKX19fVEudmM9dHQsUS5XYj1ldCxRLllhPWR0LFEueWM9aHQsSD0xO2JyZWFrIGV9SD0wfWlmKCEodT1IKSl7cy5hPTM7YnJlYWsgdH1pZigwPGIpe2lmKG0udWE9MTw8YiwhTyhtLldhLGIpKXtzLmE9MSx1PTA7YnJlYWsgdH19ZWxzZSBtLnVhPTA7dmFyIGRlPXMscGU9ZixnZT1wLG1lPWRlLnMsdmU9bWUueGM7aWYoZGUuYz1wZSxkZS5pPWdlLG1lLm1kPXEocGUsdmUpLG1lLndjPTA9PXZlPy0xOigxPDx2ZSktMSxuKXtzLnhiPXBpO2JyZWFrIHR9aWYobnVsbD09KHY9YShmKnApKSl7cy5hPTEsdT0wO2JyZWFrIHR9dT0odT1fdChzLHYsMCxmLHAscCxudWxsKSkmJiFnLmg7YnJlYWsgdH1yZXR1cm4gdT8obnVsbCE9Yz9jWzBdPXY6KGUobnVsbD09diksZShuKSkscy4kPTAsbnx8UHQobSkpOlB0KG0pLHV9ZnVuY3Rpb24gRnQodCxyKXt2YXIgbj10LmMqdC5pLGk9bityKzE2KnI7cmV0dXJuIGUodC5jPD1yKSx0LlY9YShpKSxudWxsPT10LlY/KHQuVGE9bnVsbCx0LlVhPTAsdC5hPTEsMCk6KHQuVGE9dC5WLHQuVWE9dC5CYStuK3IsMSl9ZnVuY3Rpb24gQ3QodCxyKXt2YXIgbj10LkMsaT1yLW4sYT10LlYsbz10LkJhK3QuYypuO2ZvcihlKHI8PXQubC5vKTswPGk7KXt2YXIgcz0xNjxpPzE2OmksYz10LmwubWEsdT10Lmwud2lkdGgsaD11KnMsbD1jLmNhLGY9Yy50Yit1Km4sZD10LlRhLHA9dC5VYTtOdCh0LHMsYSxvKSxfbihkLHAsbCxmLGgpLHh0KGMsbixuK3MsbCxmLHUpLGktPXMsYSs9cyp0LmMsbis9c31lKG49PXIpLHQuQz10Lk1hPXJ9ZnVuY3Rpb24ganQoKXt0aGlzLnViPXRoaXMueWQ9dGhpcy50ZD10aGlzLlJiPTB9ZnVuY3Rpb24gT3QoKXt0aGlzLktkPXRoaXMuTGQ9dGhpcy5VZD10aGlzLlRkPXRoaXMuaT10aGlzLmM9MH1mdW5jdGlvbiBCdCgpe3RoaXMuRmI9dGhpcy5CYj10aGlzLkNiPTAsdGhpcy5aYj1hKDQpLHRoaXMuTGI9YSg0KX1mdW5jdGlvbiBNdCgpe3RoaXMuWWI9ZnVuY3Rpb24oKXt2YXIgdD1bXTtyZXR1cm4gZnVuY3Rpb24gdChlLHIsbil7Zm9yKHZhciBpPW5bcl0sYT0wO2E8aSYmKGUucHVzaChuLmxlbmd0aD5yKzE/W106MCksIShuLmxlbmd0aDxyKzEpKTthKyspdChlW2FdLHIrMSxuKX0odCwwLFszLDExXSksdH0oKX1mdW5jdGlvbiBFdCgpe3RoaXMuamI9YSgzKSx0aGlzLldjPXMoWzQsOF0sTXQpLHRoaXMuWGM9cyhbNCwxN10sTXQpfWZ1bmN0aW9uIHF0KCl7dGhpcy5QYz10aGlzLndiPXRoaXMuVGI9dGhpcy56ZD0wLHRoaXMudmQ9bmV3IGEoNCksdGhpcy5vZD1uZXcgYSg0KX1mdW5jdGlvbiBEdCgpe3RoaXMubGQ9dGhpcy5MYT10aGlzLmRkPXRoaXMudGM9MH1mdW5jdGlvbiBSdCgpe3RoaXMuTmE9dGhpcy5sYT0wfWZ1bmN0aW9uIFR0KCl7dGhpcy5TYz1bMCwwXSx0aGlzLkViPVswLDBdLHRoaXMuUWM9WzAsMF0sdGhpcy5pYT10aGlzLmxjPTB9ZnVuY3Rpb24gVXQoKXt0aGlzLmFkPWEoMzg0KSx0aGlzLlphPTAsdGhpcy5PYj1hKDE2KSx0aGlzLiRiPXRoaXMuQWQ9dGhpcy5pYT10aGlzLkdjPXRoaXMuSGM9dGhpcy5EZD0wfWZ1bmN0aW9uIHp0KCl7dGhpcy51Yz10aGlzLk09dGhpcy5OYj0wLHRoaXMud2E9QXJyYXkobmV3IER0KSx0aGlzLlk9MCx0aGlzLnlhPUFycmF5KG5ldyBVdCksdGhpcy5hYT0wLHRoaXMubD1uZXcgR3R9ZnVuY3Rpb24gSHQoKXt0aGlzLnk9YSgxNiksdGhpcy5mPWEoOCksdGhpcy5lYT1hKDgpfWZ1bmN0aW9uIFd0KCl7dGhpcy5jYj10aGlzLmE9MCx0aGlzLnNjPVwiXCIsdGhpcy5tPW5ldyB3LHRoaXMuT2Q9bmV3IGp0LHRoaXMuS2M9bmV3IE90LHRoaXMuZWQ9bmV3IHF0LHRoaXMuUWE9bmV3IEJ0LHRoaXMuSWM9dGhpcy4kYz10aGlzLkFhPTAsdGhpcy5EPW5ldyB6dCx0aGlzLlhiPXRoaXMuVmE9dGhpcy5IYj10aGlzLnpiPXRoaXMueWI9dGhpcy5VYj10aGlzLnphPTAsdGhpcy5KYz1vKDgsdyksdGhpcy5pYT0wLHRoaXMucGI9byg0LFR0KSx0aGlzLlBhPW5ldyBFdCx0aGlzLkJkPXRoaXMua2M9MCx0aGlzLkFjPVtdLHRoaXMuQmM9MCx0aGlzLnpjPVswLDAsMCwwXSx0aGlzLkdkPUFycmF5KG5ldyBIdCksdGhpcy5IZD0wLHRoaXMucmI9QXJyYXkobmV3IFJ0KSx0aGlzLnNiPTAsdGhpcy53YT1BcnJheShuZXcgRHQpLHRoaXMuWT0wLHRoaXMub2M9W10sdGhpcy5wYz0wLHRoaXMuc2E9W10sdGhpcy50YT0wLHRoaXMucWE9W10sdGhpcy5yYT0wLHRoaXMuSGE9W10sdGhpcy5CPXRoaXMuUj10aGlzLklhPTAsdGhpcy5FYz1bXSx0aGlzLk09dGhpcy5qYT10aGlzLlZiPXRoaXMuRmM9MCx0aGlzLnlhPUFycmF5KG5ldyBVdCksdGhpcy5MPXRoaXMuYWE9MCx0aGlzLmdkPXMoWzQsMl0sRHQpLHRoaXMuZ2E9bnVsbCx0aGlzLkZhPVtdLHRoaXMuQ2M9dGhpcy5xYz10aGlzLlA9MCx0aGlzLkdiPVtdLHRoaXMuVWM9MCx0aGlzLm1iPVtdLHRoaXMubmI9MCx0aGlzLnJjPVtdLHRoaXMuR2E9dGhpcy5WYz0wfWZ1bmN0aW9uIFZ0KHQsZSl7cmV0dXJuIDA+dD8wOnQ+ZT9lOnR9ZnVuY3Rpb24gR3QoKXt0aGlzLlQ9dGhpcy5VPXRoaXMua2E9dGhpcy5oZWlnaHQ9dGhpcy53aWR0aD0wLHRoaXMueT1bXSx0aGlzLmY9W10sdGhpcy5lYT1bXSx0aGlzLlJjPXRoaXMuZmE9dGhpcy5XPXRoaXMuTj10aGlzLk89MCx0aGlzLm1hPVwidm9pZFwiLHRoaXMucHV0PVwiVlA4SW9QdXRIb29rXCIsdGhpcy5hYz1cIlZQOElvU2V0dXBIb29rXCIsdGhpcy5iYz1cIlZQOElvVGVhcmRvd25Ib29rXCIsdGhpcy5oYT10aGlzLktiPTAsdGhpcy5kYXRhPVtdLHRoaXMuaGI9dGhpcy5pYj10aGlzLmRhPXRoaXMubz10aGlzLmo9dGhpcy52YT10aGlzLnY9dGhpcy5EYT10aGlzLm9iPXRoaXMudz0wLHRoaXMuRj1bXSx0aGlzLko9MH1mdW5jdGlvbiBZdCgpe3ZhciB0PW5ldyBXdDtyZXR1cm4gbnVsbCE9dCYmKHQuYT0wLHQuc2M9XCJPS1wiLHQuY2I9MCx0LlhiPTAsbml8fChuaT1adCkpLHR9ZnVuY3Rpb24gSnQodCxlLHIpe3JldHVybiAwPT10LmEmJih0LmE9ZSx0LnNjPXIsdC5jYj0wKSwwfWZ1bmN0aW9uIFh0KHQsZSxyKXtyZXR1cm4gMzw9ciYmMTU3PT10W2UrMF0mJjE9PXRbZSsxXSYmNDI9PXRbZSsyXX1mdW5jdGlvbiBLdCh0LHIpe2lmKG51bGw9PXQpcmV0dXJuIDA7aWYodC5hPTAsdC5zYz1cIk9LXCIsbnVsbD09cilyZXR1cm4gSnQodCwyLFwibnVsbCBWUDhJbyBwYXNzZWQgdG8gVlA4R2V0SGVhZGVycygpXCIpO3ZhciBuPXIuZGF0YSxhPXIudyxvPXIuaGE7aWYoND5vKXJldHVybiBKdCh0LDcsXCJUcnVuY2F0ZWQgaGVhZGVyLlwiKTt2YXIgcz1uW2ErMF18blthKzFdPDw4fG5bYSsyXTw8MTYsYz10Lk9kO2lmKGMuUmI9ISgxJnMpLGMudGQ9cz4+MSY3LGMueWQ9cz4+NCYxLGMudWI9cz4+NSwzPGMudGQpcmV0dXJuIEp0KHQsMyxcIkluY29ycmVjdCBrZXlmcmFtZSBwYXJhbWV0ZXJzLlwiKTtpZighYy55ZClyZXR1cm4gSnQodCw0LFwiRnJhbWUgbm90IGRpc3BsYXlhYmxlLlwiKTthKz0zLG8tPTM7dmFyIHU9dC5LYztpZihjLlJiKXtpZig3Pm8pcmV0dXJuIEp0KHQsNyxcImNhbm5vdCBwYXJzZSBwaWN0dXJlIGhlYWRlclwiKTtpZighWHQobixhLG8pKXJldHVybiBKdCh0LDMsXCJCYWQgY29kZSB3b3JkXCIpO3UuYz0xNjM4MyYoblthKzRdPDw4fG5bYSszXSksdS5UZD1uW2ErNF0+PjYsdS5pPTE2MzgzJihuW2ErNl08PDh8blthKzVdKSx1LlVkPW5bYSs2XT4+NixhKz03LG8tPTcsdC56YT11LmMrMTU+PjQsdC5VYj11LmkrMTU+PjQsci53aWR0aD11LmMsci5oZWlnaHQ9dS5pLHIuRGE9MCxyLmo9MCxyLnY9MCxyLnZhPXIud2lkdGgsci5vPXIuaGVpZ2h0LHIuZGE9MCxyLmliPXIud2lkdGgsci5oYj1yLmhlaWdodCxyLlU9ci53aWR0aCxyLlQ9ci5oZWlnaHQsaSgocz10LlBhKS5qYiwwLDI1NSxzLmpiLmxlbmd0aCksZShudWxsIT0ocz10LlFhKSkscy5DYj0wLHMuQmI9MCxzLkZiPTEsaShzLlpiLDAsMCxzLlpiLmxlbmd0aCksaShzLkxiLDAsMCxzLkxiKX1pZihjLnViPm8pcmV0dXJuIEp0KHQsNyxcImJhZCBwYXJ0aXRpb24gbGVuZ3RoXCIpO3Aocz10Lm0sbixhLGMudWIpLGErPWMudWIsby09Yy51YixjLlJiJiYodS5MZD1QKHMpLHUuS2Q9UChzKSksdT10LlFhO3ZhciBoLGw9dC5QYTtpZihlKG51bGwhPXMpLGUobnVsbCE9dSksdS5DYj1QKHMpLHUuQ2Ipe2lmKHUuQmI9UChzKSxQKHMpKXtmb3IodS5GYj1QKHMpLGg9MDs0Pmg7KytoKXUuWmJbaF09UChzKT9tKHMsNyk6MDtmb3IoaD0wOzQ+aDsrK2gpdS5MYltoXT1QKHMpP20ocyw2KTowfWlmKHUuQmIpZm9yKGg9MDszPmg7KytoKWwuamJbaF09UChzKT9nKHMsOCk6MjU1fWVsc2UgdS5CYj0wO2lmKHMuS2EpcmV0dXJuIEp0KHQsMyxcImNhbm5vdCBwYXJzZSBzZWdtZW50IGhlYWRlclwiKTtpZigodT10LmVkKS56ZD1QKHMpLHUuVGI9ZyhzLDYpLHUud2I9ZyhzLDMpLHUuUGM9UChzKSx1LlBjJiZQKHMpKXtmb3IobD0wOzQ+bDsrK2wpUChzKSYmKHUudmRbbF09bShzLDYpKTtmb3IobD0wOzQ+bDsrK2wpUChzKSYmKHUub2RbbF09bShzLDYpKX1pZih0Lkw9MD09dS5UYj8wOnUuemQ/MToyLHMuS2EpcmV0dXJuIEp0KHQsMyxcImNhbm5vdCBwYXJzZSBmaWx0ZXIgaGVhZGVyXCIpO3ZhciBmPW87aWYobz1oPWEsYT1oK2YsdT1mLHQuWGI9KDE8PGcodC5tLDIpKS0xLGY8MyoobD10LlhiKSluPTc7ZWxzZXtmb3IoaCs9MypsLHUtPTMqbCxmPTA7ZjxsOysrZil7dmFyIGQ9bltvKzBdfG5bbysxXTw8OHxuW28rMl08PDE2O2Q+dSYmKGQ9dSkscCh0LkpjWytmXSxuLGgsZCksaCs9ZCx1LT1kLG8rPTN9cCh0LkpjWytsXSxuLGgsdSksbj1oPGE/MDo1fWlmKDAhPW4pcmV0dXJuIEp0KHQsbixcImNhbm5vdCBwYXJzZSBwYXJ0aXRpb25zXCIpO2ZvcihuPWcoaD10Lm0sNyksbz1QKGgpP20oaCw0KTowLGE9UChoKT9tKGgsNCk6MCx1PVAoaCk/bShoLDQpOjAsbD1QKGgpP20oaCw0KTowLGg9UChoKT9tKGgsNCk6MCxmPXQuUWEsZD0wOzQ+ZDsrK2Qpe2lmKGYuQ2Ipe3ZhciB2PWYuWmJbZF07Zi5GYnx8KHYrPW4pfWVsc2V7aWYoMDxkKXt0LnBiW2RdPXQucGJbMF07Y29udGludWV9dj1ufXZhciBiPXQucGJbZF07Yi5TY1swXT1laVtWdCh2K28sMTI3KV0sYi5TY1sxXT1yaVtWdCh2KzAsMTI3KV0sYi5FYlswXT0yKmVpW1Z0KHYrYSwxMjcpXSxiLkViWzFdPTEwMTU4MSpyaVtWdCh2K3UsMTI3KV0+PjE2LDg+Yi5FYlsxXSYmKGIuRWJbMV09OCksYi5RY1swXT1laVtWdCh2K2wsMTE3KV0sYi5RY1sxXT1yaVtWdCh2K2gsMTI3KV0sYi5sYz12K2h9aWYoIWMuUmIpcmV0dXJuIEp0KHQsNCxcIk5vdCBhIGtleSBmcmFtZS5cIik7Zm9yKFAocyksYz10LlBhLG49MDs0Pm47KytuKXtmb3Iobz0wOzg+bzsrK28pZm9yKGE9MDszPmE7KythKWZvcih1PTA7MTE+dTsrK3UpbD1rKHMsdWlbbl1bb11bYV1bdV0pP2cocyw4KTpzaVtuXVtvXVthXVt1XSxjLldjW25dW29dLlliW2FdW3VdPWw7Zm9yKG89MDsxNz5vOysrbyljLlhjW25dW29dPWMuV2Nbbl1baGlbb11dfXJldHVybiB0LmtjPVAocyksdC5rYyYmKHQuQmQ9ZyhzLDgpKSx0LmNiPTF9ZnVuY3Rpb24gWnQodCxlLHIsbixpLGEsbyl7dmFyIHM9ZVtpXS5ZYltyXTtmb3Iocj0wOzE2Pmk7KytpKXtpZighayh0LHNbciswXSkpcmV0dXJuIGk7Zm9yKDshayh0LHNbcisxXSk7KWlmKHM9ZVsrK2ldLlliWzBdLHI9MCwxNj09aSlyZXR1cm4gMTY7dmFyIGM9ZVtpKzFdLlliO2lmKGsodCxzW3IrMl0pKXt2YXIgdT10LGg9MDtpZihrKHUsKGY9cylbKGw9cikrM10pKWlmKGsodSxmW2wrNl0pKXtmb3Iocz0wLGw9MiooaD1rKHUsZltsKzhdKSkrKGY9ayh1LGZbbCs5K2hdKSksaD0wLGY9aWlbbF07ZltzXTsrK3MpaCs9aCtrKHUsZltzXSk7aCs9MysoODw8bCl9ZWxzZSBrKHUsZltsKzddKT8oaD03KzIqayh1LDE2NSksaCs9ayh1LDE0NSkpOmg9NStrKHUsMTU5KTtlbHNlIGg9ayh1LGZbbCs0XSk/MytrKHUsZltsKzVdKToyO3M9Y1syXX1lbHNlIGg9MSxzPWNbMV07Yz1vK2FpW2ldLDA+KHU9dCkuYiYmXyh1KTt2YXIgbCxmPXUuYixkPShsPXUuQ2E+PjEpLSh1Lkk+PmYpPj4zMTstLXUuYix1LkNhKz1kLHUuQ2F8PTEsdS5JLT0obCsxJmQpPDxmLGFbY109KChoXmQpLWQpKm5bKDA8aSkrMF19cmV0dXJuIDE2fWZ1bmN0aW9uICR0KHQpe3ZhciBlPXQucmJbdC5zYi0xXTtlLmxhPTAsZS5OYT0wLGkodC56YywwLDAsdC56Yy5sZW5ndGgpLHQuamE9MH1mdW5jdGlvbiBRdCh0LHIpe2lmKG51bGw9PXQpcmV0dXJuIDA7aWYobnVsbD09cilyZXR1cm4gSnQodCwyLFwiTlVMTCBWUDhJbyBwYXJhbWV0ZXIgaW4gVlA4RGVjb2RlKCkuXCIpO2lmKCF0LmNiJiYhS3QodCxyKSlyZXR1cm4gMDtpZihlKHQuY2IpLG51bGw9PXIuYWN8fHIuYWMocikpe3Iub2ImJih0Lkw9MCk7dmFyIHM9UmlbdC5MXTtpZigyPT10Lkw/KHQueWI9MCx0LnpiPTApOih0LnliPXIudi1zPj40LHQuemI9ci5qLXM+PjQsMD50LnliJiYodC55Yj0wKSwwPnQuemImJih0LnpiPTApKSx0LlZhPXIubysxNStzPj40LHQuSGI9ci52YSsxNStzPj40LHQuSGI+dC56YSYmKHQuSGI9dC56YSksdC5WYT50LlViJiYodC5WYT10LlViKSwwPHQuTCl7dmFyIGM9dC5lZDtmb3Iocz0wOzQ+czsrK3Mpe3ZhciB1O2lmKHQuUWEuQ2Ipe3ZhciBoPXQuUWEuTGJbc107dC5RYS5GYnx8KGgrPWMuVGIpfWVsc2UgaD1jLlRiO2Zvcih1PTA7MT49dTsrK3Upe3ZhciBsPXQuZ2Rbc11bdV0sZj1oO2lmKGMuUGMmJihmKz1jLnZkWzBdLHUmJihmKz1jLm9kWzBdKSksMDwoZj0wPmY/MDo2MzxmPzYzOmYpKXt2YXIgZD1mOzA8Yy53YiYmKChkPTQ8Yy53Yj9kPj4yOmQ+PjEpPjktYy53YiYmKGQ9OS1jLndiKSksMT5kJiYoZD0xKSxsLmRkPWQsbC50Yz0yKmYrZCxsLmxkPTQwPD1mPzI6MTU8PWY/MTowfWVsc2UgbC50Yz0wO2wuTGE9dX19fXM9MH1lbHNlIEp0KHQsNixcIkZyYW1lIHNldHVwIGZhaWxlZFwiKSxzPXQuYTtpZihzPTA9PXMpe2lmKHMpe3QuJGM9MCwwPHQuQWF8fCh0LkljPVVpKTt0OntzPXQuSWM7Yz00KihkPXQuemEpO3ZhciBwPTMyKmQsZz1kKzEsbT0wPHQuTD9kKigwPHQuQWE/MjoxKTowLHY9KDI9PXQuQWE/MjoxKSpkO2lmKChsPWMrODMyKyh1PTMqKDE2KnMrUmlbdC5MXSkvMipwKSsoaD1udWxsIT10LkZhJiYwPHQuRmEubGVuZ3RoP3QuS2MuYyp0LktjLmk6MCkpIT1sKXM9MDtlbHNle2lmKGw+dC5WYil7aWYodC5WYj0wLHQuRWM9YShsKSx0LkZjPTAsbnVsbD09dC5FYyl7cz1KdCh0LDEsXCJubyBtZW1vcnkgZHVyaW5nIGZyYW1lIGluaXRpYWxpemF0aW9uLlwiKTticmVhayB0fXQuVmI9bH1sPXQuRWMsZj10LkZjLHQuQWM9bCx0LkJjPWYsZis9Yyx0LkdkPW8ocCxIdCksdC5IZD0wLHQucmI9byhnKzEsUnQpLHQuc2I9MSx0LndhPW0/byhtLER0KTpudWxsLHQuWT0wLHQuRC5OYj0wLHQuRC53YT10LndhLHQuRC5ZPXQuWSwwPHQuQWEmJih0LkQuWSs9ZCksZSghMCksdC5vYz1sLHQucGM9ZixmKz04MzIsdC55YT1vKHYsVXQpLHQuYWE9MCx0LkQueWE9dC55YSx0LkQuYWE9dC5hYSwyPT10LkFhJiYodC5ELmFhKz1kKSx0LlI9MTYqZCx0LkI9OCpkLGQ9KHA9UmlbdC5MXSkqdC5SLHA9cC8yKnQuQix0LnNhPWwsdC50YT1mK2QsdC5xYT10LnNhLHQucmE9dC50YSsxNipzKnQuUitwLHQuSGE9dC5xYSx0LklhPXQucmErOCpzKnQuQitwLHQuJGM9MCxmKz11LHQubWI9aD9sOm51bGwsdC5uYj1oP2Y6bnVsbCxlKGYraDw9dC5GYyt0LlZiKSwkdCh0KSxpKHQuQWMsdC5CYywwLGMpLHM9MX19aWYocyl7aWYoci5rYT0wLHIueT10LnNhLHIuTz10LnRhLHIuZj10LnFhLHIuTj10LnJhLHIuZWE9dC5IYSxyLlZkPXQuSWEsci5mYT10LlIsci5SYz10LkIsci5GPW51bGwsci5KPTAsIUNuKXtmb3Iocz0tMjU1OzI1NT49czsrK3MpUG5bMjU1K3NdPTA+cz8tczpzO2ZvcihzPS0xMDIwOzEwMjA+PXM7KytzKWtuWzEwMjArc109LTEyOD5zPy0xMjg6MTI3PHM/MTI3OnM7Zm9yKHM9LTExMjsxMTI+PXM7KytzKUluWzExMitzXT0tMTY+cz8tMTY6MTU8cz8xNTpzO2ZvcihzPS0yNTU7NTEwPj1zOysrcylGblsyNTUrc109MD5zPzA6MjU1PHM/MjU1OnM7Q249MX1hbj11ZSxvbj1hZSxjbj1vZSx1bj1zZSxobj1jZSxzbj1pZSxsbj1KZSxmbj1YZSxkbj0kZSxwbj1RZSxnbj1LZSxtbj1aZSx2bj10cixibj1lcix5bj16ZSx3bj1IZSxObj1XZSxMbj1WZSxmaVswXT14ZSxmaVsxXT1sZSxmaVsyXT1MZSxmaVszXT1BZSxmaVs0XT1TZSxmaVs1XT1QZSxmaVs2XT1fZSxmaVs3XT1rZSxmaVs4XT1GZSxmaVs5XT1JZSxsaVswXT12ZSxsaVsxXT1kZSxsaVsyXT1wZSxsaVszXT1nZSxsaVs0XT1iZSxsaVs1XT15ZSxsaVs2XT13ZSxkaVswXT1CZSxkaVsxXT1mZSxkaVsyXT1DZSxkaVszXT1qZSxkaVs0XT1FZSxkaVs1XT1NZSxkaVs2XT1xZSxzPTF9ZWxzZSBzPTB9cyYmKHM9ZnVuY3Rpb24odCxyKXtmb3IodC5NPTA7dC5NPHQuVmE7Kyt0Lk0pe3ZhciBvLHM9dC5KY1t0Lk0mdC5YYl0sYz10Lm0sdT10O2ZvcihvPTA7bzx1LnphOysrbyl7dmFyIGg9YyxsPXUsZj1sLkFjLGQ9bC5CYys0Km8scD1sLnpjLGc9bC55YVtsLmFhK29dO2lmKGwuUWEuQmI/Zy4kYj1rKGgsbC5QYS5qYlswXSk/MitrKGgsbC5QYS5qYlsyXSk6ayhoLGwuUGEuamJbMV0pOmcuJGI9MCxsLmtjJiYoZy5BZD1rKGgsbC5CZCkpLGcuWmE9IWsoaCwxNDUpKzAsZy5aYSl7dmFyIG09Zy5PYix2PTA7Zm9yKGw9MDs0Pmw7KytsKXt2YXIgYix5PXBbMCtsXTtmb3IoYj0wOzQ+YjsrK2Ipe3k9Y2lbZltkK2JdXVt5XTtmb3IodmFyIHc9b2lbayhoLHlbMF0pXTswPHc7KXc9b2lbMip3K2soaCx5W3ddKV07eT0tdyxmW2QrYl09eX1uKG0sdixmLGQsNCksdis9NCxwWzArbF09eX19ZWxzZSB5PWsoaCwxNTYpP2soaCwxMjgpPzE6MzprKGgsMTYzKT8yOjAsZy5PYlswXT15LGkoZixkLHksNCksaShwLDAseSw0KTtnLkRkPWsoaCwxNDIpP2soaCwxMTQpP2soaCwxODMpPzE6MzoyOjB9aWYodS5tLkthKXJldHVybiBKdCh0LDcsXCJQcmVtYXR1cmUgZW5kLW9mLXBhcnRpdGlvbjAgZW5jb3VudGVyZWQuXCIpO2Zvcig7dC5qYTx0LnphOysrdC5qYSl7aWYodT1zLGg9KGM9dCkucmJbYy5zYi0xXSxmPWMucmJbYy5zYitjLmphXSxvPWMueWFbYy5hYStjLmphXSxkPWMua2M/by5BZDowKWgubGE9Zi5sYT0wLG8uWmF8fChoLk5hPWYuTmE9MCksby5IYz0wLG8uR2M9MCxvLmlhPTA7ZWxzZXt2YXIgTixMO2g9ZixmPXUsZD1jLlBhLlhjLHA9Yy55YVtjLmFhK2MuamFdLGc9Yy5wYltwLiRiXTtpZihsPXAuYWQsbT0wLHY9Yy5yYltjLnNiLTFdLHk9Yj0wLGkobCxtLDAsMzg0KSxwLlphKXZhciBBPTAseD1kWzNdO2Vsc2V7dz1hKDE2KTt2YXIgUz1oLk5hK3YuTmE7aWYoUz1uaShmLGRbMV0sUyxnLkViLDAsdywwKSxoLk5hPXYuTmE9KDA8UykrMCwxPFMpYW4odywwLGwsbSk7ZWxzZXt2YXIgXz13WzBdKzM+PjM7Zm9yKHc9MDsyNTY+dzt3Kz0xNilsW20rd109X31BPTEseD1kWzBdfXZhciBQPTE1JmgubGEsST0xNSZ2LmxhO2Zvcih3PTA7ND53Oysrdyl7dmFyIEY9MSZJO2ZvcihfPUw9MDs0Pl87KytfKVA9UD4+MXwoRj0oUz1uaShmLHgsUz1GKygxJlApLGcuU2MsQSxsLG0pKT5BKTw8NyxMPUw8PDJ8KDM8Uz8zOjE8Uz8yOjAhPWxbbSswXSksbSs9MTY7UD4+PTQsST1JPj4xfEY8PDcsYj0oYjw8OHxMKT4+PjB9Zm9yKHg9UCxBPUk+PjQsTj0wOzQ+TjtOKz0yKXtmb3IoTD0wLFA9aC5sYT4+NCtOLEk9di5sYT4+NCtOLHc9MDsyPnc7Kyt3KXtmb3IoRj0xJkksXz0wOzI+XzsrK18pUz1GKygxJlApLFA9UD4+MXwoRj0wPChTPW5pKGYsZFsyXSxTLGcuUWMsMCxsLG0pKSk8PDMsTD1MPDwyfCgzPFM/MzoxPFM/MjowIT1sW20rMF0pLG0rPTE2O1A+Pj0yLEk9ST4+MXxGPDw1fXl8PUw8PDQqTix4fD1QPDw0PDxOLEF8PSgyNDAmSSk8PE59aC5sYT14LHYubGE9QSxwLkhjPWIscC5HYz15LHAuaWE9NDM2OTAmeT8wOmcuaWEsZD0hKGJ8eSl9aWYoMDxjLkwmJihjLndhW2MuWStjLmphXT1jLmdkW28uJGJdW28uWmFdLGMud2FbYy5ZK2MuamFdLkxhfD0hZCksdS5LYSlyZXR1cm4gSnQodCw3LFwiUHJlbWF0dXJlIGVuZC1vZi1maWxlIGVuY291bnRlcmVkLlwiKX1pZigkdCh0KSxjPXIsdT0xLG89KHM9dCkuRCxoPTA8cy5MJiZzLk0+PXMuemImJnMuTTw9cy5WYSwwPT1zLkFhKXQ6e2lmKG8uTT1zLk0sby51Yz1oLE9yKHMsbyksdT0xLG89KEw9cy5EKS5OYixoPSh5PVJpW3MuTF0pKnMuUixmPXkvMipzLkIsdz0xNipvKnMuUixfPTgqbypzLkIsZD1zLnNhLHA9cy50YS1oK3csZz1zLnFhLGw9cy5yYS1mK18sbT1zLkhhLHY9cy5JYS1mK18sST0wPT0oUD1MLk0pLGI9UD49cy5WYS0xLDI9PXMuQWEmJk9yKHMsTCksTC51Yylmb3IoRj0oUz1zKS5ELk0sZShTLkQudWMpLEw9Uy55YjtMPFMuSGI7KytMKXtBPUwseD1GO3ZhciBDPShqPShVPVMpLkQpLk5iO049VS5SO3ZhciBqPWoud2Fbai5ZK0FdLE89VS5zYSxCPVUudGErMTYqQypOKzE2KkEsTT1qLmRkLEU9ai50YztpZigwIT1FKWlmKGUoMzw9RSksMT09VS5MKTA8QSYmd24oTyxCLE4sRSs0KSxqLkxhJiZMbihPLEIsTixFKSwwPHgmJnluKE8sQixOLEUrNCksai5MYSYmTm4oTyxCLE4sRSk7ZWxzZXt2YXIgcT1VLkIsRD1VLnFhLFI9VS5yYSs4KkMqcSs4KkEsVD1VLkhhLFU9VS5JYSs4KkMqcSs4KkE7Qz1qLmxkOzA8QSYmKGZuKE8sQixOLEUrNCxNLEMpLHBuKEQsUixULFUscSxFKzQsTSxDKSksai5MYSYmKG1uKE8sQixOLEUsTSxDKSxibihELFIsVCxVLHEsRSxNLEMpKSwwPHgmJihsbihPLEIsTixFKzQsTSxDKSxkbihELFIsVCxVLHEsRSs0LE0sQykpLGouTGEmJihnbihPLEIsTixFLE0sQyksdm4oRCxSLFQsVSxxLEUsTSxDKSl9fWlmKHMuaWEmJmFsZXJ0KFwidG9kbzpEaXRoZXJSb3dcIiksbnVsbCE9Yy5wdXQpe2lmKEw9MTYqUCxQPTE2KihQKzEpLEk/KGMueT1zLnNhLGMuTz1zLnRhK3csYy5mPXMucWEsYy5OPXMucmErXyxjLmVhPXMuSGEsYy5XPXMuSWErXyk6KEwtPXksYy55PWQsYy5PPXAsYy5mPWcsYy5OPWwsYy5lYT1tLGMuVz12KSxifHwoUC09eSksUD5jLm8mJihQPWMubyksYy5GPW51bGwsYy5KPW51bGwsbnVsbCE9cy5GYSYmMDxzLkZhLmxlbmd0aCYmTDxQJiYoYy5KPWxyKHMsYyxMLFAtTCksYy5GPXMubWIsbnVsbD09Yy5GJiYwPT1jLkYubGVuZ3RoKSl7dT1KdChzLDMsXCJDb3VsZCBub3QgZGVjb2RlIGFscGhhIGRhdGEuXCIpO2JyZWFrIHR9TDxjLmomJih5PWMuai1MLEw9Yy5qLGUoISgxJnkpKSxjLk8rPXMuUip5LGMuTis9cy5CKih5Pj4xKSxjLlcrPXMuQiooeT4+MSksbnVsbCE9Yy5GJiYoYy5KKz1jLndpZHRoKnkpKSxMPFAmJihjLk8rPWMudixjLk4rPWMudj4+MSxjLlcrPWMudj4+MSxudWxsIT1jLkYmJihjLkorPWMudiksYy5rYT1MLWMuaixjLlU9Yy52YS1jLnYsYy5UPVAtTCx1PWMucHV0KGMpKX1vKzEhPXMuSWN8fGJ8fChuKHMuc2Escy50YS1oLGQscCsxNipzLlIsaCksbihzLnFhLHMucmEtZixnLGwrOCpzLkIsZiksbihzLkhhLHMuSWEtZixtLHYrOCpzLkIsZikpfWlmKCF1KXJldHVybiBKdCh0LDYsXCJPdXRwdXQgYWJvcnRlZC5cIil9cmV0dXJuIDF9KHQscikpLG51bGwhPXIuYmMmJnIuYmMocikscyY9MX1yZXR1cm4gcz8odC5jYj0wLHMpOjB9ZnVuY3Rpb24gdGUodCxlLHIsbixpKXtpPXRbZStyKzMyKm5dKyhpPj4zKSx0W2UrciszMipuXT0tMjU2Jmk/MD5pPzA6MjU1Oml9ZnVuY3Rpb24gZWUodCxlLHIsbixpLGEpe3RlKHQsZSwwLHIsbitpKSx0ZSh0LGUsMSxyLG4rYSksdGUodCxlLDIscixuLWEpLHRlKHQsZSwzLHIsbi1pKX1mdW5jdGlvbiByZSh0KXtyZXR1cm4oMjAwOTEqdD4+MTYpK3R9ZnVuY3Rpb24gbmUodCxlLHIsbil7dmFyIGksbz0wLHM9YSgxNik7Zm9yKGk9MDs0Pmk7KytpKXt2YXIgYz10W2UrMF0rdFtlKzhdLHU9dFtlKzBdLXRbZSs4XSxoPSgzNTQ2OCp0W2UrNF0+PjE2KS1yZSh0W2UrMTJdKSxsPXJlKHRbZSs0XSkrKDM1NDY4KnRbZSsxMl0+PjE2KTtzW28rMF09YytsLHNbbysxXT11K2gsc1tvKzJdPXUtaCxzW28rM109Yy1sLG8rPTQsZSsrfWZvcihpPW89MDs0Pmk7KytpKWM9KHQ9c1tvKzBdKzQpK3Nbbys4XSx1PXQtc1tvKzhdLGg9KDM1NDY4KnNbbys0XT4+MTYpLXJlKHNbbysxMl0pLHRlKHIsbiwwLDAsYysobD1yZShzW28rNF0pKygzNTQ2OCpzW28rMTJdPj4xNikpKSx0ZShyLG4sMSwwLHUraCksdGUocixuLDIsMCx1LWgpLHRlKHIsbiwzLDAsYy1sKSxvKyssbis9MzJ9ZnVuY3Rpb24gaWUodCxlLHIsbil7dmFyIGk9dFtlKzBdKzQsYT0zNTQ2OCp0W2UrNF0+PjE2LG89cmUodFtlKzRdKSxzPTM1NDY4KnRbZSsxXT4+MTY7ZWUocixuLDAsaStvLHQ9cmUodFtlKzFdKSxzKSxlZShyLG4sMSxpK2EsdCxzKSxlZShyLG4sMixpLWEsdCxzKSxlZShyLG4sMyxpLW8sdCxzKX1mdW5jdGlvbiBhZSh0LGUscixuLGkpe25lKHQsZSxyLG4pLGkmJm5lKHQsZSsxNixyLG4rNCl9ZnVuY3Rpb24gb2UodCxlLHIsbil7b24odCxlKzAscixuLDEpLG9uKHQsZSszMixyLG4rMTI4LDEpfWZ1bmN0aW9uIHNlKHQsZSxyLG4pe3ZhciBpO2Zvcih0PXRbZSswXSs0LGk9MDs0Pmk7KytpKWZvcihlPTA7ND5lOysrZSl0ZShyLG4sZSxpLHQpfWZ1bmN0aW9uIGNlKHQsZSxyLG4pe3RbZSswXSYmdW4odCxlKzAscixuKSx0W2UrMTZdJiZ1bih0LGUrMTYscixuKzQpLHRbZSszMl0mJnVuKHQsZSszMixyLG4rMTI4KSx0W2UrNDhdJiZ1bih0LGUrNDgscixuKzEyOCs0KX1mdW5jdGlvbiB1ZSh0LGUscixuKXt2YXIgaSxvPWEoMTYpO2ZvcihpPTA7ND5pOysraSl7dmFyIHM9dFtlKzAraV0rdFtlKzEyK2ldLGM9dFtlKzQraV0rdFtlKzgraV0sdT10W2UrNCtpXS10W2UrOCtpXSxoPXRbZSswK2ldLXRbZSsxMitpXTtvWzAraV09cytjLG9bOCtpXT1zLWMsb1s0K2ldPWgrdSxvWzEyK2ldPWgtdX1mb3IoaT0wOzQ+aTsrK2kpcz0odD1vWzArNCppXSszKStvWzMrNCppXSxjPW9bMSs0KmldK29bMis0KmldLHU9b1sxKzQqaV0tb1syKzQqaV0saD10LW9bMys0KmldLHJbbiswXT1zK2M+PjMscltuKzE2XT1oK3U+PjMscltuKzMyXT1zLWM+PjMscltuKzQ4XT1oLXU+PjMsbis9NjR9ZnVuY3Rpb24gaGUodCxlLHIpe3ZhciBuLGk9ZS0zMixhPUJuLG89MjU1LXRbaS0xXTtmb3Iobj0wO248cjsrK24pe3ZhciBzLGM9YSx1PW8rdFtlLTFdO2ZvcihzPTA7czxyOysrcyl0W2Urc109Y1t1K3RbaStzXV07ZSs9MzJ9fWZ1bmN0aW9uIGxlKHQsZSl7aGUodCxlLDQpfWZ1bmN0aW9uIGZlKHQsZSl7aGUodCxlLDgpfWZ1bmN0aW9uIGRlKHQsZSl7aGUodCxlLDE2KX1mdW5jdGlvbiBwZSh0LGUpe3ZhciByO2ZvcihyPTA7MTY+cjsrK3Ipbih0LGUrMzIqcix0LGUtMzIsMTYpfWZ1bmN0aW9uIGdlKHQsZSl7dmFyIHI7Zm9yKHI9MTY7MDxyOy0tcilpKHQsZSx0W2UtMV0sMTYpLGUrPTMyfWZ1bmN0aW9uIG1lKHQsZSxyKXt2YXIgbjtmb3Iobj0wOzE2Pm47KytuKWkoZSxyKzMyKm4sdCwxNil9ZnVuY3Rpb24gdmUodCxlKXt2YXIgcixuPTE2O2ZvcihyPTA7MTY+cjsrK3Ipbis9dFtlLTErMzIqcl0rdFtlK3ItMzJdO21lKG4+PjUsdCxlKX1mdW5jdGlvbiBiZSh0LGUpe3ZhciByLG49ODtmb3Iocj0wOzE2PnI7KytyKW4rPXRbZS0xKzMyKnJdO21lKG4+PjQsdCxlKX1mdW5jdGlvbiB5ZSh0LGUpe3ZhciByLG49ODtmb3Iocj0wOzE2PnI7KytyKW4rPXRbZStyLTMyXTttZShuPj40LHQsZSl9ZnVuY3Rpb24gd2UodCxlKXttZSgxMjgsdCxlKX1mdW5jdGlvbiBOZSh0LGUscil7cmV0dXJuIHQrMiplK3IrMj4+Mn1mdW5jdGlvbiBMZSh0LGUpe3ZhciByLGk9ZS0zMjtpPW5ldyBVaW50OEFycmF5KFtOZSh0W2ktMV0sdFtpKzBdLHRbaSsxXSksTmUodFtpKzBdLHRbaSsxXSx0W2krMl0pLE5lKHRbaSsxXSx0W2krMl0sdFtpKzNdKSxOZSh0W2krMl0sdFtpKzNdLHRbaSs0XSldKTtmb3Iocj0wOzQ+cjsrK3Ipbih0LGUrMzIqcixpLDAsaS5sZW5ndGgpfWZ1bmN0aW9uIEFlKHQsZSl7dmFyIHI9dFtlLTFdLG49dFtlLTErMzJdLGk9dFtlLTErNjRdLGE9dFtlLTErOTZdO0kodCxlKzAsMTY4NDMwMDkqTmUodFtlLTEtMzJdLHIsbikpLEkodCxlKzMyLDE2ODQzMDA5Kk5lKHIsbixpKSksSSh0LGUrNjQsMTY4NDMwMDkqTmUobixpLGEpKSxJKHQsZSs5NiwxNjg0MzAwOSpOZShpLGEsYSkpfWZ1bmN0aW9uIHhlKHQsZSl7dmFyIHIsbj00O2ZvcihyPTA7ND5yOysrciluKz10W2Urci0zMl0rdFtlLTErMzIqcl07Zm9yKG4+Pj0zLHI9MDs0PnI7KytyKWkodCxlKzMyKnIsbiw0KX1mdW5jdGlvbiBTZSh0LGUpe3ZhciByPXRbZS0xKzBdLG49dFtlLTErMzJdLGk9dFtlLTErNjRdLGE9dFtlLTEtMzJdLG89dFtlKzAtMzJdLHM9dFtlKzEtMzJdLGM9dFtlKzItMzJdLHU9dFtlKzMtMzJdO3RbZSswKzk2XT1OZShuLGksdFtlLTErOTZdKSx0W2UrMSs5Nl09dFtlKzArNjRdPU5lKHIsbixpKSx0W2UrMis5Nl09dFtlKzErNjRdPXRbZSswKzMyXT1OZShhLHIsbiksdFtlKzMrOTZdPXRbZSsyKzY0XT10W2UrMSszMl09dFtlKzArMF09TmUobyxhLHIpLHRbZSszKzY0XT10W2UrMiszMl09dFtlKzErMF09TmUocyxvLGEpLHRbZSszKzMyXT10W2UrMiswXT1OZShjLHMsbyksdFtlKzMrMF09TmUodSxjLHMpfWZ1bmN0aW9uIF9lKHQsZSl7dmFyIHI9dFtlKzEtMzJdLG49dFtlKzItMzJdLGk9dFtlKzMtMzJdLGE9dFtlKzQtMzJdLG89dFtlKzUtMzJdLHM9dFtlKzYtMzJdLGM9dFtlKzctMzJdO3RbZSswKzBdPU5lKHRbZSswLTMyXSxyLG4pLHRbZSsxKzBdPXRbZSswKzMyXT1OZShyLG4saSksdFtlKzIrMF09dFtlKzErMzJdPXRbZSswKzY0XT1OZShuLGksYSksdFtlKzMrMF09dFtlKzIrMzJdPXRbZSsxKzY0XT10W2UrMCs5Nl09TmUoaSxhLG8pLHRbZSszKzMyXT10W2UrMis2NF09dFtlKzErOTZdPU5lKGEsbyxzKSx0W2UrMys2NF09dFtlKzIrOTZdPU5lKG8scyxjKSx0W2UrMys5Nl09TmUocyxjLGMpfWZ1bmN0aW9uIFBlKHQsZSl7dmFyIHI9dFtlLTErMF0sbj10W2UtMSszMl0saT10W2UtMSs2NF0sYT10W2UtMS0zMl0sbz10W2UrMC0zMl0scz10W2UrMS0zMl0sYz10W2UrMi0zMl0sdT10W2UrMy0zMl07dFtlKzArMF09dFtlKzErNjRdPWErbysxPj4xLHRbZSsxKzBdPXRbZSsyKzY0XT1vK3MrMT4+MSx0W2UrMiswXT10W2UrMys2NF09cytjKzE+PjEsdFtlKzMrMF09Yyt1KzE+PjEsdFtlKzArOTZdPU5lKGksbixyKSx0W2UrMCs2NF09TmUobixyLGEpLHRbZSswKzMyXT10W2UrMSs5Nl09TmUocixhLG8pLHRbZSsxKzMyXT10W2UrMis5Nl09TmUoYSxvLHMpLHRbZSsyKzMyXT10W2UrMys5Nl09TmUobyxzLGMpLHRbZSszKzMyXT1OZShzLGMsdSl9ZnVuY3Rpb24ga2UodCxlKXt2YXIgcj10W2UrMC0zMl0sbj10W2UrMS0zMl0saT10W2UrMi0zMl0sYT10W2UrMy0zMl0sbz10W2UrNC0zMl0scz10W2UrNS0zMl0sYz10W2UrNi0zMl0sdT10W2UrNy0zMl07dFtlKzArMF09cituKzE+PjEsdFtlKzErMF09dFtlKzArNjRdPW4raSsxPj4xLHRbZSsyKzBdPXRbZSsxKzY0XT1pK2ErMT4+MSx0W2UrMyswXT10W2UrMis2NF09YStvKzE+PjEsdFtlKzArMzJdPU5lKHIsbixpKSx0W2UrMSszMl09dFtlKzArOTZdPU5lKG4saSxhKSx0W2UrMiszMl09dFtlKzErOTZdPU5lKGksYSxvKSx0W2UrMyszMl09dFtlKzIrOTZdPU5lKGEsbyxzKSx0W2UrMys2NF09TmUobyxzLGMpLHRbZSszKzk2XT1OZShzLGMsdSl9ZnVuY3Rpb24gSWUodCxlKXt2YXIgcj10W2UtMSswXSxuPXRbZS0xKzMyXSxpPXRbZS0xKzY0XSxhPXRbZS0xKzk2XTt0W2UrMCswXT1yK24rMT4+MSx0W2UrMiswXT10W2UrMCszMl09bitpKzE+PjEsdFtlKzIrMzJdPXRbZSswKzY0XT1pK2ErMT4+MSx0W2UrMSswXT1OZShyLG4saSksdFtlKzMrMF09dFtlKzErMzJdPU5lKG4saSxhKSx0W2UrMyszMl09dFtlKzErNjRdPU5lKGksYSxhKSx0W2UrMys2NF09dFtlKzIrNjRdPXRbZSswKzk2XT10W2UrMSs5Nl09dFtlKzIrOTZdPXRbZSszKzk2XT1hfWZ1bmN0aW9uIEZlKHQsZSl7dmFyIHI9dFtlLTErMF0sbj10W2UtMSszMl0saT10W2UtMSs2NF0sYT10W2UtMSs5Nl0sbz10W2UtMS0zMl0scz10W2UrMC0zMl0sYz10W2UrMS0zMl0sdT10W2UrMi0zMl07dFtlKzArMF09dFtlKzIrMzJdPXIrbysxPj4xLHRbZSswKzMyXT10W2UrMis2NF09bityKzE+PjEsdFtlKzArNjRdPXRbZSsyKzk2XT1pK24rMT4+MSx0W2UrMCs5Nl09YStpKzE+PjEsdFtlKzMrMF09TmUocyxjLHUpLHRbZSsyKzBdPU5lKG8scyxjKSx0W2UrMSswXT10W2UrMyszMl09TmUocixvLHMpLHRbZSsxKzMyXT10W2UrMys2NF09TmUobixyLG8pLHRbZSsxKzY0XT10W2UrMys5Nl09TmUoaSxuLHIpLHRbZSsxKzk2XT1OZShhLGksbil9ZnVuY3Rpb24gQ2UodCxlKXt2YXIgcjtmb3Iocj0wOzg+cjsrK3Ipbih0LGUrMzIqcix0LGUtMzIsOCl9ZnVuY3Rpb24gamUodCxlKXt2YXIgcjtmb3Iocj0wOzg+cjsrK3IpaSh0LGUsdFtlLTFdLDgpLGUrPTMyfWZ1bmN0aW9uIE9lKHQsZSxyKXt2YXIgbjtmb3Iobj0wOzg+bjsrK24paShlLHIrMzIqbix0LDgpfWZ1bmN0aW9uIEJlKHQsZSl7dmFyIHIsbj04O2ZvcihyPTA7OD5yOysrciluKz10W2Urci0zMl0rdFtlLTErMzIqcl07T2Uobj4+NCx0LGUpfWZ1bmN0aW9uIE1lKHQsZSl7dmFyIHIsbj00O2ZvcihyPTA7OD5yOysrciluKz10W2Urci0zMl07T2Uobj4+Myx0LGUpfWZ1bmN0aW9uIEVlKHQsZSl7dmFyIHIsbj00O2ZvcihyPTA7OD5yOysrciluKz10W2UtMSszMipyXTtPZShuPj4zLHQsZSl9ZnVuY3Rpb24gcWUodCxlKXtPZSgxMjgsdCxlKX1mdW5jdGlvbiBEZSh0LGUscil7dmFyIG49dFtlLXJdLGk9dFtlKzBdLGE9MyooaS1uKStqblsxMDIwK3RbZS0yKnJdLXRbZStyXV0sbz1PblsxMTIrKGErND4+MyldO3RbZS1yXT1CblsyNTUrbitPblsxMTIrKGErMz4+MyldXSx0W2UrMF09Qm5bMjU1K2ktb119ZnVuY3Rpb24gUmUodCxlLHIsbil7dmFyIGk9dFtlKzBdLGE9dFtlK3JdO3JldHVybiBNblsyNTUrdFtlLTIqcl0tdFtlLXJdXT5ufHxNblsyNTUrYS1pXT5ufWZ1bmN0aW9uIFRlKHQsZSxyLG4pe3JldHVybiA0Kk1uWzI1NSt0W2Utcl0tdFtlKzBdXStNblsyNTUrdFtlLTIqcl0tdFtlK3JdXTw9bn1mdW5jdGlvbiBVZSh0LGUscixuLGkpe3ZhciBhPXRbZS0zKnJdLG89dFtlLTIqcl0scz10W2Utcl0sYz10W2UrMF0sdT10W2Urcl0saD10W2UrMipyXSxsPXRbZSszKnJdO3JldHVybiA0Kk1uWzI1NStzLWNdK01uWzI1NStvLXVdPm4/MDpNblsyNTUrdFtlLTQqcl0tYV08PWkmJk1uWzI1NSthLW9dPD1pJiZNblsyNTUrby1zXTw9aSYmTW5bMjU1K2wtaF08PWkmJk1uWzI1NStoLXVdPD1pJiZNblsyNTUrdS1jXTw9aX1mdW5jdGlvbiB6ZSh0LGUscixuKXt2YXIgaT0yKm4rMTtmb3Iobj0wOzE2Pm47KytuKVRlKHQsZStuLHIsaSkmJkRlKHQsZStuLHIpfWZ1bmN0aW9uIEhlKHQsZSxyLG4pe3ZhciBpPTIqbisxO2ZvcihuPTA7MTY+bjsrK24pVGUodCxlK24qciwxLGkpJiZEZSh0LGUrbipyLDEpfWZ1bmN0aW9uIFdlKHQsZSxyLG4pe3ZhciBpO2ZvcihpPTM7MDxpOy0taSl6ZSh0LGUrPTQqcixyLG4pfWZ1bmN0aW9uIFZlKHQsZSxyLG4pe3ZhciBpO2ZvcihpPTM7MDxpOy0taSlIZSh0LGUrPTQscixuKX1mdW5jdGlvbiBHZSh0LGUscixuLGksYSxvLHMpe2ZvcihhPTIqYSsxOzA8aS0tOyl7aWYoVWUodCxlLHIsYSxvKSlpZihSZSh0LGUscixzKSlEZSh0LGUscik7ZWxzZXt2YXIgYz10LHU9ZSxoPXIsbD1jW3UtMipoXSxmPWNbdS1oXSxkPWNbdSswXSxwPWNbdStoXSxnPWNbdSsyKmhdLG09MjcqKGI9am5bMTAyMCszKihkLWYpK2puWzEwMjArbC1wXV0pKzYzPj43LHY9MTgqYis2Mz4+NyxiPTkqYis2Mz4+NztjW3UtMypoXT1CblsyNTUrY1t1LTMqaF0rYl0sY1t1LTIqaF09Qm5bMjU1K2wrdl0sY1t1LWhdPUJuWzI1NStmK21dLGNbdSswXT1CblsyNTUrZC1tXSxjW3UraF09Qm5bMjU1K3Atdl0sY1t1KzIqaF09Qm5bMjU1K2ctYl19ZSs9bn19ZnVuY3Rpb24gWWUodCxlLHIsbixpLGEsbyxzKXtmb3IoYT0yKmErMTswPGktLTspe2lmKFVlKHQsZSxyLGEsbykpaWYoUmUodCxlLHIscykpRGUodCxlLHIpO2Vsc2V7dmFyIGM9dCx1PWUsaD1yLGw9Y1t1LWhdLGY9Y1t1KzBdLGQ9Y1t1K2hdLHA9T25bMTEyKygoZz0zKihmLWwpKSs0Pj4zKV0sZz1PblsxMTIrKGcrMz4+MyldLG09cCsxPj4xO2NbdS0yKmhdPUJuWzI1NStjW3UtMipoXSttXSxjW3UtaF09Qm5bMjU1K2wrZ10sY1t1KzBdPUJuWzI1NStmLXBdLGNbdStoXT1CblsyNTUrZC1tXX1lKz1ufX1mdW5jdGlvbiBKZSh0LGUscixuLGksYSl7R2UodCxlLHIsMSwxNixuLGksYSl9ZnVuY3Rpb24gWGUodCxlLHIsbixpLGEpe0dlKHQsZSwxLHIsMTYsbixpLGEpfWZ1bmN0aW9uIEtlKHQsZSxyLG4saSxhKXt2YXIgbztmb3Iobz0zOzA8bzstLW8pWWUodCxlKz00KnIsciwxLDE2LG4saSxhKX1mdW5jdGlvbiBaZSh0LGUscixuLGksYSl7dmFyIG87Zm9yKG89MzswPG87LS1vKVllKHQsZSs9NCwxLHIsMTYsbixpLGEpfWZ1bmN0aW9uICRlKHQsZSxyLG4saSxhLG8scyl7R2UodCxlLGksMSw4LGEsbyxzKSxHZShyLG4saSwxLDgsYSxvLHMpfWZ1bmN0aW9uIFFlKHQsZSxyLG4saSxhLG8scyl7R2UodCxlLDEsaSw4LGEsbyxzKSxHZShyLG4sMSxpLDgsYSxvLHMpfWZ1bmN0aW9uIHRyKHQsZSxyLG4saSxhLG8scyl7WWUodCxlKzQqaSxpLDEsOCxhLG8scyksWWUocixuKzQqaSxpLDEsOCxhLG8scyl9ZnVuY3Rpb24gZXIodCxlLHIsbixpLGEsbyxzKXtZZSh0LGUrNCwxLGksOCxhLG8scyksWWUocixuKzQsMSxpLDgsYSxvLHMpfWZ1bmN0aW9uIHJyKCl7dGhpcy5iYT1uZXcgb3QsdGhpcy5lYz1bXSx0aGlzLmNjPVtdLHRoaXMuTWM9W10sdGhpcy5EYz10aGlzLk5jPXRoaXMuZGM9dGhpcy5mYz0wLHRoaXMuT2E9bmV3IGN0LHRoaXMubWVtb3J5PTAsdGhpcy5JYj1cIk91dHB1dEZ1bmNcIix0aGlzLkpiPVwiT3V0cHV0QWxwaGFGdW5jXCIsdGhpcy5OZD1cIk91dHB1dFJvd0Z1bmNcIn1mdW5jdGlvbiBucigpe3RoaXMuZGF0YT1bXSx0aGlzLm9mZnNldD10aGlzLmtkPXRoaXMuaGE9dGhpcy53PTAsdGhpcy5uYT1bXSx0aGlzLnhhPXRoaXMuZ2I9dGhpcy5KYT10aGlzLlNhPXRoaXMuUD0wfWZ1bmN0aW9uIGlyKCl7dGhpcy5uYz10aGlzLkVhPXRoaXMuYj10aGlzLmhjPTAsdGhpcy5LPVtdLHRoaXMudz0wfWZ1bmN0aW9uIGFyKCl7dGhpcy51YT0wLHRoaXMuV2E9bmV3IE0sdGhpcy52Yj1uZXcgTSx0aGlzLm1kPXRoaXMueGM9dGhpcy53Yz0wLHRoaXMudmM9W10sdGhpcy5XYj0wLHRoaXMuWWE9bmV3IGQsdGhpcy55Yz1uZXcgbH1mdW5jdGlvbiBvcigpe3RoaXMueGI9dGhpcy5hPTAsdGhpcy5sPW5ldyBHdCx0aGlzLmNhPW5ldyBvdCx0aGlzLlY9W10sdGhpcy5CYT0wLHRoaXMuVGE9W10sdGhpcy5VYT0wLHRoaXMubT1uZXcgTix0aGlzLlBiPTAsdGhpcy53ZD1uZXcgTix0aGlzLk1hPXRoaXMuJD10aGlzLkM9dGhpcy5pPXRoaXMuYz10aGlzLnhkPTAsdGhpcy5zPW5ldyBhcix0aGlzLmFiPTAsdGhpcy5nYz1vKDQsaXIpLHRoaXMuT2M9MH1mdW5jdGlvbiBzcigpe3RoaXMuTGM9dGhpcy5aPXRoaXMuJGE9dGhpcy5pPXRoaXMuYz0wLHRoaXMubD1uZXcgR3QsdGhpcy5pYz0wLHRoaXMuY2E9W10sdGhpcy50Yj0wLHRoaXMucWQ9bnVsbCx0aGlzLnJkPTB9ZnVuY3Rpb24gY3IodCxlLHIsbixpLGEsbyl7Zm9yKHQ9bnVsbD09dD8wOnRbZSswXSxlPTA7ZTxvOysrZSlpW2ErZV09dCtyW24rZV0mMjU1LHQ9aVthK2VdfWZ1bmN0aW9uIHVyKHQsZSxyLG4saSxhLG8pe3ZhciBzO2lmKG51bGw9PXQpY3IobnVsbCxudWxsLHIsbixpLGEsbyk7ZWxzZSBmb3Iocz0wO3M8bzsrK3MpaVthK3NdPXRbZStzXStyW24rc10mMjU1fWZ1bmN0aW9uIGhyKHQsZSxyLG4saSxhLG8pe2lmKG51bGw9PXQpY3IobnVsbCxudWxsLHIsbixpLGEsbyk7ZWxzZXt2YXIgcyxjPXRbZSswXSx1PWMsaD1jO2ZvcihzPTA7czxvOysrcyl1PWgrKGM9dFtlK3NdKS11LGg9cltuK3NdKygtMjU2JnU/MD51PzA6MjU1OnUpJjI1NSx1PWMsaVthK3NdPWh9fWZ1bmN0aW9uIGxyKHQscixpLG8pe3ZhciBzPXIud2lkdGgsYz1yLm87aWYoZShudWxsIT10JiZudWxsIT1yKSwwPml8fDA+PW98fGkrbz5jKXJldHVybiBudWxsO2lmKCF0LkNjKXtpZihudWxsPT10LmdhKXt2YXIgdTtpZih0LmdhPW5ldyBzciwodT1udWxsPT10LmdhKXx8KHU9ci53aWR0aCpyLm8sZSgwPT10LkdiLmxlbmd0aCksdC5HYj1hKHUpLHQuVWM9MCxudWxsPT10LkdiP3U9MDoodC5tYj10LkdiLHQubmI9dC5VYyx0LnJjPW51bGwsdT0xKSx1PSF1KSwhdSl7dT10LmdhO3ZhciBoPXQuRmEsbD10LlAsZj10LnFjLGQ9dC5tYixwPXQubmIsZz1sKzEsbT1mLTEsYj11Lmw7aWYoZShudWxsIT1oJiZudWxsIT1kJiZudWxsIT1yKSxtaVswXT1udWxsLG1pWzFdPWNyLG1pWzJdPXVyLG1pWzNdPWhyLHUuY2E9ZCx1LnRiPXAsdS5jPXIud2lkdGgsdS5pPXIuaGVpZ2h0LGUoMDx1LmMmJjA8dS5pKSwxPj1mKXI9MDtlbHNlIGlmKHUuJGE9aFtsKzBdPj4wJjMsdS5aPWhbbCswXT4+MiYzLHUuTGM9aFtsKzBdPj40JjMsbD1oW2wrMF0+PjYmMywwPnUuJGF8fDE8dS4kYXx8NDw9dS5afHwxPHUuTGN8fGwpcj0wO2Vsc2UgaWYoYi5wdXQ9ZHQsYi5hYz1mdCxiLmJjPXB0LGIubWE9dSxiLndpZHRoPXIud2lkdGgsYi5oZWlnaHQ9ci5oZWlnaHQsYi5EYT1yLkRhLGIudj1yLnYsYi52YT1yLnZhLGIuaj1yLmosYi5vPXIubyx1LiRhKXQ6e2UoMT09dS4kYSkscj1rdCgpO2U6Zm9yKDs7KXtpZihudWxsPT1yKXtyPTA7YnJlYWsgdH1pZihlKG51bGwhPXUpLHUubWM9cixyLmM9dS5jLHIuaT11Lmksci5sPXUubCxyLmwubWE9dSxyLmwud2lkdGg9dS5jLHIubC5oZWlnaHQ9dS5pLHIuYT0wLHYoci5tLGgsZyxtKSwhSXQodS5jLHUuaSwxLHIsbnVsbCkpYnJlYWsgZTtpZigxPT1yLmFiJiYzPT1yLmdjWzBdLmhjJiZBdChyLnMpPyh1LmljPTEsaD1yLmMqci5pLHIuVGE9bnVsbCxyLlVhPTAsci5WPWEoaCksci5CYT0wLG51bGw9PXIuVj8oci5hPTEscj0wKTpyPTEpOih1LmljPTAscj1GdChyLHUuYykpLCFyKWJyZWFrIGU7cj0xO2JyZWFrIHR9dS5tYz1udWxsLHI9MH1lbHNlIHI9bT49dS5jKnUuaTt1PSFyfWlmKHUpcmV0dXJuIG51bGw7MSE9dC5nYS5MYz90LkdhPTA6bz1jLWl9ZShudWxsIT10LmdhKSxlKGkrbzw9Yyk7dDp7aWYocj0oaD10LmdhKS5jLGM9aC5sLm8sMD09aC4kYSl7aWYoZz10LnJjLG09dC5WYyxiPXQuRmEsbD10LlArMStpKnIsZj10Lm1iLGQ9dC5uYitpKnIsZShsPD10LlArdC5xYyksMCE9aC5aKWZvcihlKG51bGwhPW1pW2guWl0pLHU9MDt1PG87Kyt1KW1pW2guWl0oZyxtLGIsbCxmLGQsciksZz1mLG09ZCxkKz1yLGwrPXI7ZWxzZSBmb3IodT0wO3U8bzsrK3UpbihmLGQsYixsLHIpLGc9ZixtPWQsZCs9cixsKz1yO3QucmM9Zyx0LlZjPW19ZWxzZXtpZihlKG51bGwhPWgubWMpLHI9aStvLGUobnVsbCE9KHU9aC5tYykpLGUocjw9dS5pKSx1LkM+PXIpcj0xO2Vsc2UgaWYoaC5pY3x8bXIoKSxoLmljKXtoPXUuVixnPXUuQmEsbT11LmM7dmFyIHk9dS5pLHc9KGI9MSxsPXUuJC9tLGY9dS4kJW0sZD11Lm0scD11LnMsdS4kKSxOPW0qeSxMPW0qcix4PXAud2MsXz13PEw/d3QocCxmLGwpOm51bGw7ZSh3PD1OKSxlKHI8PXkpLGUoQXQocCkpO2U6Zm9yKDs7KXtmb3IoOyFkLmgmJnc8TDspe2lmKGYmeHx8KF89d3QocCxmLGwpKSxlKG51bGwhPV8pLFMoZCksMjU2Pih5PWJ0KF8uR1swXSxfLkhbMF0sZCkpKWhbZyt3XT15LCsrdywrK2Y+PW0mJihmPTAsKytsPD1yJiYhKGwlMTYpJiZTdCh1LGwpKTtlbHNle2lmKCEoMjgwPnkpKXtiPTA7YnJlYWsgZX15PW10KHktMjU2LGQpO3ZhciBQLGs9YnQoXy5HWzRdLF8uSFs0XSxkKTtpZihTKGQpLCEodz49KGs9dnQobSxrPW10KGssZCkpKSYmTi13Pj15KSl7Yj0wO2JyZWFrIGV9Zm9yKFA9MDtQPHk7KytQKWhbZyt3K1BdPWhbZyt3K1Ata107Zm9yKHcrPXksZis9eTtmPj1tOylmLT1tLCsrbDw9ciYmIShsJTE2KSYmU3QodSxsKTt3PEwmJmYmeCYmKF89d3QocCxmLGwpKX1lKGQuaD09QShkKSl9U3QodSxsPnI/cjpsKTticmVhayBlfSFifHxkLmgmJnc8Tj8oYj0wLHUuYT1kLmg/NTozKTp1LiQ9dyxyPWJ9ZWxzZSByPV90KHUsdS5WLHUuQmEsdS5jLHUuaSxyLEN0KTtpZighcil7bz0wO2JyZWFrIHR9fWkrbz49YyYmKHQuQ2M9MSksbz0xfWlmKCFvKXJldHVybiBudWxsO2lmKHQuQ2MmJihudWxsIT0obz10LmdhKSYmKG8ubWM9bnVsbCksdC5nYT1udWxsLDA8dC5HYSkpcmV0dXJuIGFsZXJ0KFwidG9kbzpXZWJQRGVxdWFudGl6ZUxldmVsc1wiKSxudWxsfXJldHVybiB0Lm5iK2kqc31mdW5jdGlvbiBmcih0LGUscixuLGksYSl7Zm9yKDswPGktLTspe3ZhciBvLHM9dCxjPWUrKHI/MTowKSx1PXQsaD1lKyhyPzA6Myk7Zm9yKG89MDtvPG47KytvKXt2YXIgbD11W2grNCpvXTsyNTUhPWwmJihsKj0zMjg5NyxzW2MrNCpvKzBdPXNbYys0Km8rMF0qbD4+MjMsc1tjKzQqbysxXT1zW2MrNCpvKzFdKmw+PjIzLHNbYys0Km8rMl09c1tjKzQqbysyXSpsPj4yMyl9ZSs9YX19ZnVuY3Rpb24gZHIodCxlLHIsbixpKXtmb3IoOzA8bi0tOyl7dmFyIGE7Zm9yKGE9MDthPHI7KythKXt2YXIgbz10W2UrMiphKzBdLHM9MTUmKHU9dFtlKzIqYSsxXSksYz00MzY5KnMsdT0oMjQwJnV8dT4+NCkqYz4+MTY7dFtlKzIqYSswXT0oMjQwJm98bz4+NCkqYz4+MTYmMjQwfCgxNSZvfG88PDQpKmM+PjE2Pj40JjE1LHRbZSsyKmErMV09MjQwJnV8c31lKz1pfX1mdW5jdGlvbiBwcih0LGUscixuLGksYSxvLHMpe3ZhciBjLHUsaD0yNTU7Zm9yKHU9MDt1PGk7Kyt1KXtmb3IoYz0wO2M8bjsrK2Mpe3ZhciBsPXRbZStjXTthW28rNCpjXT1sLGgmPWx9ZSs9cixvKz1zfXJldHVybiAyNTUhPWh9ZnVuY3Rpb24gZ3IodCxlLHIsbixpKXt2YXIgYTtmb3IoYT0wO2E8aTsrK2EpcltuK2FdPXRbZSthXT4+OH1mdW5jdGlvbiBtcigpe0FuPWZyLHhuPWRyLFNuPXByLF9uPWdyfWZ1bmN0aW9uIHZyKHIsbixpKXt0W3JdPWZ1bmN0aW9uKHQscixhLG8scyxjLHUsaCxsLGYsZCxwLGcsbSx2LGIseSl7dmFyIHcsTj15LTE+PjEsTD1zW2MrMF18dVtoKzBdPDwxNixBPWxbZiswXXxkW3ArMF08PDE2O2UobnVsbCE9dCk7dmFyIHg9MypMK0ErMTMxMDc0Pj4yO2ZvcihuKHRbciswXSwyNTUmeCx4Pj4xNixnLG0pLG51bGwhPWEmJih4PTMqQStMKzEzMTA3ND4+MixuKGFbbyswXSwyNTUmeCx4Pj4xNix2LGIpKSx3PTE7dzw9TjsrK3cpe3ZhciBTPXNbYyt3XXx1W2grd108PDE2LF89bFtmK3ddfGRbcCt3XTw8MTYsUD1MK1MrQStfKzUyNDI5NixrPVArMiooUytBKT4+Mzt4PWsrTD4+MSxMPShQPVArMiooTCtfKT4+MykrUz4+MSxuKHRbcisyKnctMV0sMjU1JngseD4+MTYsZyxtKygyKnctMSkqaSksbih0W3IrMip3LTBdLDI1NSZMLEw+PjE2LGcsbSsoMip3LTApKmkpLG51bGwhPWEmJih4PVArQT4+MSxMPWsrXz4+MSxuKGFbbysyKnctMV0sMjU1JngseD4+MTYsdixiKygyKnctMSkqaSksbihhW28rMip3KzBdLDI1NSZMLEw+PjE2LHYsYisoMip3KzApKmkpKSxMPVMsQT1ffTEmeXx8KHg9MypMK0ErMTMxMDc0Pj4yLG4odFtyK3ktMV0sMjU1JngseD4+MTYsZyxtKyh5LTEpKmkpLG51bGwhPWEmJih4PTMqQStMKzEzMTA3ND4+MixuKGFbbyt5LTFdLDI1NSZ4LHg+PjE2LHYsYisoeS0xKSppKSkpfX1mdW5jdGlvbiBicigpe3ZpW0VuXT1iaSx2aVtxbl09d2ksdmlbRG5dPXlpLHZpW1JuXT1OaSx2aVtUbl09TGksdmlbVW5dPUFpLHZpW3puXT14aSx2aVtIbl09d2ksdmlbV25dPU5pLHZpW1ZuXT1MaSx2aVtHbl09QWl9ZnVuY3Rpb24geXIodCl7cmV0dXJuIHQmfkZpPzA+dD8wOjI1NTp0Pj5JaX1mdW5jdGlvbiB3cih0LGUpe3JldHVybiB5cigoMTkwNzcqdD4+OCkrKDI2MTQ5KmU+PjgpLTE0MjM0KX1mdW5jdGlvbiBOcih0LGUscil7cmV0dXJuIHlyKCgxOTA3Nyp0Pj44KS0oNjQxOSplPj44KS0oMTMzMjAqcj4+OCkrODcwOCl9ZnVuY3Rpb24gTHIodCxlKXtyZXR1cm4geXIoKDE5MDc3KnQ+PjgpKygzMzA1MCplPj44KS0xNzY4NSl9ZnVuY3Rpb24gQXIodCxlLHIsbixpKXtuW2krMF09d3IodCxyKSxuW2krMV09TnIodCxlLHIpLG5baSsyXT1Mcih0LGUpfWZ1bmN0aW9uIHhyKHQsZSxyLG4saSl7bltpKzBdPUxyKHQsZSksbltpKzFdPU5yKHQsZSxyKSxuW2krMl09d3IodCxyKX1mdW5jdGlvbiBTcih0LGUscixuLGkpe3ZhciBhPU5yKHQsZSxyKTtlPWE8PDMmMjI0fExyKHQsZSk+PjMsbltpKzBdPTI0OCZ3cih0LHIpfGE+PjUsbltpKzFdPWV9ZnVuY3Rpb24gX3IodCxlLHIsbixpKXt2YXIgYT0yNDAmTHIodCxlKXwxNTtuW2krMF09MjQwJndyKHQscil8TnIodCxlLHIpPj40LG5baSsxXT1hfWZ1bmN0aW9uIFByKHQsZSxyLG4saSl7bltpKzBdPTI1NSxBcih0LGUscixuLGkrMSl9ZnVuY3Rpb24ga3IodCxlLHIsbixpKXt4cih0LGUscixuLGkpLG5baSszXT0yNTV9ZnVuY3Rpb24gSXIodCxlLHIsbixpKXtBcih0LGUscixuLGkpLG5baSszXT0yNTV9ZnVuY3Rpb24gVnQodCxlKXtyZXR1cm4gMD50PzA6dD5lP2U6dH1mdW5jdGlvbiBGcihlLHIsbil7dFtlXT1mdW5jdGlvbih0LGUsaSxhLG8scyxjLHUsaCl7Zm9yKHZhciBsPXUrKC0yJmgpKm47dSE9bDspcih0W2UrMF0saVthKzBdLG9bcyswXSxjLHUpLHIodFtlKzFdLGlbYSswXSxvW3MrMF0sYyx1K24pLGUrPTIsKythLCsrcyx1Kz0yKm47MSZoJiZyKHRbZSswXSxpW2ErMF0sb1tzKzBdLGMsdSl9fWZ1bmN0aW9uIENyKHQsZSxyKXtyZXR1cm4gMD09cj8wPT10PzA9PWU/Njo1OjA9PWU/NDowOnJ9ZnVuY3Rpb24ganIodCxlLHIsbixpKXtzd2l0Y2godD4+PjMwKXtjYXNlIDM6b24oZSxyLG4saSwwKTticmVhaztjYXNlIDI6c24oZSxyLG4saSk7YnJlYWs7Y2FzZSAxOnVuKGUscixuLGkpfX1mdW5jdGlvbiBPcih0LGUpe3ZhciByLGEsbz1lLk0scz1lLk5iLGM9dC5vYyx1PXQucGMrNDAsaD10Lm9jLGw9dC5wYys1ODQsZj10Lm9jLGQ9dC5wYys2MDA7Zm9yKHI9MDsxNj5yOysrciljW3UrMzIqci0xXT0xMjk7Zm9yKHI9MDs4PnI7KytyKWhbbCszMipyLTFdPTEyOSxmW2QrMzIqci0xXT0xMjk7Zm9yKDA8bz9jW3UtMS0zMl09aFtsLTEtMzJdPWZbZC0xLTMyXT0xMjk6KGkoYyx1LTMyLTEsMTI3LDIxKSxpKGgsbC0zMi0xLDEyNyw5KSxpKGYsZC0zMi0xLDEyNyw5KSksYT0wO2E8dC56YTsrK2Epe3ZhciBwPWUueWFbZS5hYSthXTtpZigwPGEpe2ZvcihyPS0xOzE2PnI7KytyKW4oYyx1KzMyKnItNCxjLHUrMzIqcisxMiw0KTtmb3Iocj0tMTs4PnI7KytyKW4oaCxsKzMyKnItNCxoLGwrMzIqcis0LDQpLG4oZixkKzMyKnItNCxmLGQrMzIqcis0LDQpfXZhciBnPXQuR2QsbT10LkhkK2Esdj1wLmFkLGI9cC5IYztpZigwPG8mJihuKGMsdS0zMixnW21dLnksMCwxNiksbihoLGwtMzIsZ1ttXS5mLDAsOCksbihmLGQtMzIsZ1ttXS5lYSwwLDgpKSxwLlphKXt2YXIgeT1jLHc9dS0zMisxNjtmb3IoMDxvJiYoYT49dC56YS0xP2koeSx3LGdbbV0ueVsxNV0sNCk6bih5LHcsZ1ttKzFdLnksMCw0KSkscj0wOzQ+cjtyKyspeVt3KzEyOCtyXT15W3crMjU2K3JdPXlbdyszODQrcl09eVt3KzArcl07Zm9yKHI9MDsxNj5yOysrcixiPDw9Mil5PWMsdz11K0RpW3JdLGZpW3AuT2Jbcl1dKHksdyksanIoYix2LDE2KityLHksdyl9ZWxzZSBpZih5PUNyKGEsbyxwLk9iWzBdKSxsaVt5XShjLHUpLDAhPWIpZm9yKHI9MDsxNj5yOysrcixiPDw9MilqcihiLHYsMTYqK3IsYyx1K0RpW3JdKTtmb3Iocj1wLkdjLHk9Q3IoYSxvLHAuRGQpLGRpW3ldKGgsbCksZGlbeV0oZixkKSxiPXYseT1oLHc9bCwyNTUmKHA9cj4+MCkmJigxNzAmcD9jbihiLDI1Nix5LHcpOmhuKGIsMjU2LHksdykpLHA9ZixiPWQsMjU1JihyPj49OCkmJigxNzAmcj9jbih2LDMyMCxwLGIpOmhuKHYsMzIwLHAsYikpLG88dC5VYi0xJiYobihnW21dLnksMCxjLHUrNDgwLDE2KSxuKGdbbV0uZiwwLGgsbCsyMjQsOCksbihnW21dLmVhLDAsZixkKzIyNCw4KSkscj04KnMqdC5CLGc9dC5zYSxtPXQudGErMTYqYSsxNipzKnQuUix2PXQucWEscD10LnJhKzgqYStyLGI9dC5IYSx5PXQuSWErOCphK3Iscj0wOzE2PnI7KytyKW4oZyxtK3IqdC5SLGMsdSszMipyLDE2KTtmb3Iocj0wOzg+cjsrK3Ipbih2LHArcip0LkIsaCxsKzMyKnIsOCksbihiLHkrcip0LkIsZixkKzMyKnIsOCl9fWZ1bmN0aW9uIEJyKHQsbixpLGEsbyxzLGMsdSxoKXt2YXIgbD1bMF0sZj1bMF0sZD0wLHA9bnVsbCE9aD9oLmtkOjAsZz1udWxsIT1oP2g6bmV3IG5yO2lmKG51bGw9PXR8fDEyPmkpcmV0dXJuIDc7Zy5kYXRhPXQsZy53PW4sZy5oYT1pLG49W25dLGk9W2ldLGcuZ2I9W2cuZ2JdO3Q6e3ZhciBtPW4sYj1pLHk9Zy5nYjtpZihlKG51bGwhPXQpLGUobnVsbCE9YiksZShudWxsIT15KSx5WzBdPTAsMTI8PWJbMF0mJiFyKHQsbVswXSxcIlJJRkZcIikpe2lmKHIodCxtWzBdKzgsXCJXRUJQXCIpKXt5PTM7YnJlYWsgdH12YXIgdz1qKHQsbVswXSs0KTtpZigxMj53fHw0Mjk0OTY3Mjg2PHcpe3k9MzticmVhayB0fWlmKHAmJnc+YlswXS04KXt5PTc7YnJlYWsgdH15WzBdPXcsbVswXSs9MTIsYlswXS09MTJ9eT0wfWlmKDAhPXkpcmV0dXJuIHk7Zm9yKHc9MDxnLmdiWzBdLGk9aVswXTs7KXt0Ont2YXIgTD10O2I9bix5PWk7dmFyIEE9bCx4PWYsUz1tPVswXTtpZigoaz1kPVtkXSlbMF09MCw4PnlbMF0peT03O2Vsc2V7aWYoIXIoTCxiWzBdLFwiVlA4WFwiKSl7aWYoMTAhPWooTCxiWzBdKzQpKXt5PTM7YnJlYWsgdH1pZigxOD55WzBdKXt5PTc7YnJlYWsgdH12YXIgXz1qKEwsYlswXSs4KSxQPTErQyhMLGJbMF0rMTIpO2lmKDIxNDc0ODM2NDg8PVAqKEw9MStDKEwsYlswXSsxNSkpKXt5PTM7YnJlYWsgdH1udWxsIT1TJiYoU1swXT1fKSxudWxsIT1BJiYoQVswXT1QKSxudWxsIT14JiYoeFswXT1MKSxiWzBdKz0xOCx5WzBdLT0xOCxrWzBdPTF9eT0wfX1pZihkPWRbMF0sbT1tWzBdLDAhPXkpcmV0dXJuIHk7aWYoYj0hISgyJm0pLCF3JiZkKXJldHVybiAzO2lmKG51bGwhPXMmJihzWzBdPSEhKDE2Jm0pKSxudWxsIT1jJiYoY1swXT1iKSxudWxsIT11JiYodVswXT0wKSxjPWxbMF0sbT1mWzBdLGQmJmImJm51bGw9PWgpe3k9MDticmVha31pZig0Pmkpe3k9NzticmVha31pZih3JiZkfHwhdyYmIWQmJiFyKHQsblswXSxcIkFMUEhcIikpe2k9W2ldLGcubmE9W2cubmFdLGcuUD1bZy5QXSxnLlNhPVtnLlNhXTt0OntfPXQseT1uLHc9aTt2YXIgaz1nLmdiO0E9Zy5uYSx4PWcuUCxTPWcuU2E7UD0yMixlKG51bGwhPV8pLGUobnVsbCE9dyksTD15WzBdO3ZhciBJPXdbMF07Zm9yKGUobnVsbCE9QSksZShudWxsIT1TKSxBWzBdPW51bGwseFswXT1udWxsLFNbMF09MDs7KXtpZih5WzBdPUwsd1swXT1JLDg+SSl7eT03O2JyZWFrIHR9dmFyIEY9aihfLEwrNCk7aWYoNDI5NDk2NzI4NjxGKXt5PTM7YnJlYWsgdH12YXIgTz04K0YrMSYtMjtpZihQKz1PLDA8ayYmUD5rKXt5PTM7YnJlYWsgdH1pZighcihfLEwsXCJWUDggXCIpfHwhcihfLEwsXCJWUDhMXCIpKXt5PTA7YnJlYWsgdH1pZihJWzBdPE8pe3k9NzticmVhayB0fXIoXyxMLFwiQUxQSFwiKXx8KEFbMF09Xyx4WzBdPUwrOCxTWzBdPUYpLEwrPU8sSS09T319aWYoaT1pWzBdLGcubmE9Zy5uYVswXSxnLlA9Zy5QWzBdLGcuU2E9Zy5TYVswXSwwIT15KWJyZWFrfWk9W2ldLGcuSmE9W2cuSmFdLGcueGE9W2cueGFdO3Q6aWYoaz10LHk9bix3PWksQT1nLmdiWzBdLHg9Zy5KYSxTPWcueGEsXz15WzBdLEw9IXIoayxfLFwiVlA4IFwiKSxQPSFyKGssXyxcIlZQOExcIiksZShudWxsIT1rKSxlKG51bGwhPXcpLGUobnVsbCE9eCksZShudWxsIT1TKSw4PndbMF0peT03O2Vsc2V7aWYoTHx8UCl7aWYoaz1qKGssXys0KSwxMjw9QSYmaz5BLTEyKXt5PTM7YnJlYWsgdH1pZihwJiZrPndbMF0tOCl7eT03O2JyZWFrIHR9eFswXT1rLHlbMF0rPTgsd1swXS09OCxTWzBdPVB9ZWxzZSBTWzBdPTU8PXdbMF0mJjQ3PT1rW18rMF0mJiEoa1tfKzRdPj41KSx4WzBdPXdbMF07eT0wfWlmKGk9aVswXSxnLkphPWcuSmFbMF0sZy54YT1nLnhhWzBdLG49blswXSwwIT15KWJyZWFrO2lmKDQyOTQ5NjcyODY8Zy5KYSlyZXR1cm4gMztpZihudWxsPT11fHxifHwodVswXT1nLnhhPzI6MSksYz1bY10sbT1bbV0sZy54YSl7aWYoNT5pKXt5PTc7YnJlYWt9dT1jLHA9bSxiPXMsbnVsbD09dHx8NT5pP3Q9MDo1PD1pJiY0Nz09dFtuKzBdJiYhKHRbbis0XT4+NSk/KHc9WzBdLGs9WzBdLEE9WzBdLHYoeD1uZXcgTix0LG4saSksZ3QoeCx3LGssQSk/KG51bGwhPXUmJih1WzBdPXdbMF0pLG51bGwhPXAmJihwWzBdPWtbMF0pLG51bGwhPWImJihiWzBdPUFbMF0pLHQ9MSk6dD0wKTp0PTB9ZWxzZXtpZigxMD5pKXt5PTc7YnJlYWt9dT1tLG51bGw9PXR8fDEwPml8fCFYdCh0LG4rMyxpLTMpP3Q9MDoocD10W24rMF18dFtuKzFdPDw4fHRbbisyXTw8MTYsYj0xNjM4MyYodFtuKzddPDw4fHRbbis2XSksdD0xNjM4MyYodFtuKzldPDw4fHRbbis4XSksMSZwfHwzPChwPj4xJjcpfHwhKHA+PjQmMSl8fHA+PjU+PWcuSmF8fCFifHwhdD90PTA6KGMmJihjWzBdPWIpLHUmJih1WzBdPXQpLHQ9MSkpfWlmKCF0KXJldHVybiAzO2lmKGM9Y1swXSxtPW1bMF0sZCYmKGxbMF0hPWN8fGZbMF0hPW0pKXJldHVybiAzO251bGwhPWgmJihoWzBdPWcsaC5vZmZzZXQ9bi1oLncsZSg0Mjk0OTY3Mjg2Pm4taC53KSxlKGgub2Zmc2V0PT1oLmhhLWkpKTticmVha31yZXR1cm4gMD09eXx8Nz09eSYmZCYmbnVsbD09aD8obnVsbCE9cyYmKHNbMF18PW51bGwhPWcubmEmJjA8Zy5uYS5sZW5ndGgpLG51bGwhPWEmJihhWzBdPWMpLG51bGwhPW8mJihvWzBdPW0pLDApOnl9ZnVuY3Rpb24gTXIodCxlLHIpe3ZhciBuPWUud2lkdGgsaT1lLmhlaWdodCxhPTAsbz0wLHM9bixjPWk7aWYoZS5EYT1udWxsIT10JiYwPHQuRGEsZS5EYSYmKHM9dC5jZCxjPXQuYmQsYT10LnYsbz10LmosMTE+cnx8KGEmPS0yLG8mPS0yKSwwPmF8fDA+b3x8MD49c3x8MD49Y3x8YStzPm58fG8rYz5pKSlyZXR1cm4gMDtpZihlLnY9YSxlLmo9byxlLnZhPWErcyxlLm89bytjLGUuVT1zLGUuVD1jLGUuZGE9bnVsbCE9dCYmMDx0LmRhLGUuZGEpe2lmKCFFKHMsYyxyPVt0LmliXSxhPVt0LmhiXSkpcmV0dXJuIDA7ZS5pYj1yWzBdLGUuaGI9YVswXX1yZXR1cm4gZS5vYj1udWxsIT10JiZ0Lm9iLGUuS2I9bnVsbD09dHx8IXQuU2QsZS5kYSYmKGUub2I9ZS5pYjwzKm4vNCYmZS5oYjwzKmkvNCxlLktiPTApLDF9ZnVuY3Rpb24gRXIodCl7aWYobnVsbD09dClyZXR1cm4gMjtpZigxMT50LlMpe3ZhciBlPXQuZi5SR0JBO2UuZmIrPSh0LmhlaWdodC0xKSplLkEsZS5BPS1lLkF9ZWxzZSBlPXQuZi5rYix0PXQuaGVpZ2h0LGUuTys9KHQtMSkqZS5mYSxlLmZhPS1lLmZhLGUuTis9KHQtMT4+MSkqZS5BYixlLkFiPS1lLkFiLGUuVys9KHQtMT4+MSkqZS5EYixlLkRiPS1lLkRiLG51bGwhPWUuRiYmKGUuSis9KHQtMSkqZS5sYixlLmxiPS1lLmxiKTtyZXR1cm4gMH1mdW5jdGlvbiBxcih0LGUscixuKXtpZihudWxsPT1ufHwwPj10fHwwPj1lKXJldHVybiAyO2lmKG51bGwhPXIpe2lmKHIuRGEpe3ZhciBpPXIuY2Qsbz1yLmJkLHM9LTImci52LGM9LTImci5qO2lmKDA+c3x8MD5jfHwwPj1pfHwwPj1vfHxzK2k+dHx8YytvPmUpcmV0dXJuIDI7dD1pLGU9b31pZihyLmRhKXtpZighRSh0LGUsaT1bci5pYl0sbz1bci5oYl0pKXJldHVybiAyO3Q9aVswXSxlPW9bMF19fW4ud2lkdGg9dCxuLmhlaWdodD1lO3Q6e3ZhciB1PW4ud2lkdGgsaD1uLmhlaWdodDtpZih0PW4uUywwPj11fHwwPj1ofHwhKHQ+PUVuJiYxMz50KSl0PTI7ZWxzZXtpZigwPj1uLlJkJiZudWxsPT1uLnNkKXtzPW89aT1lPTA7dmFyIGw9KGM9dSp6aVt0XSkqaDtpZigxMT50fHwobz0oaCsxKS8yKihlPSh1KzEpLzIpLDEyPT10JiYocz0oaT11KSpoKSksbnVsbD09KGg9YShsKzIqbytzKSkpe3Q9MTticmVhayB0fW4uc2Q9aCwxMT50PygodT1uLmYuUkdCQSkuZWI9aCx1LmZiPTAsdS5BPWMsdS5zaXplPWwpOigodT1uLmYua2IpLnk9aCx1Lk89MCx1LmZhPWMsdS5GZD1sLHUuZj1oLHUuTj0wK2wsdS5BYj1lLHUuQ2Q9byx1LmVhPWgsdS5XPTArbCtvLHUuRGI9ZSx1LkVkPW8sMTI9PXQmJih1LkY9aCx1Lko9MCtsKzIqbyksdS5UYz1zLHUubGI9aSl9aWYoZT0xLGk9bi5TLG89bi53aWR0aCxzPW4uaGVpZ2h0LGk+PUVuJiYxMz5pKWlmKDExPmkpdD1uLmYuUkdCQSxlJj0oYz1NYXRoLmFicyh0LkEpKSoocy0xKStvPD10LnNpemUsZSY9Yz49byp6aVtpXSxlJj1udWxsIT10LmViO2Vsc2V7dD1uLmYua2IsYz0obysxKS8yLGw9KHMrMSkvMix1PU1hdGguYWJzKHQuZmEpO2g9TWF0aC5hYnModC5BYik7dmFyIGY9TWF0aC5hYnModC5EYiksZD1NYXRoLmFicyh0LmxiKSxwPWQqKHMtMSkrbztlJj11KihzLTEpK288PXQuRmQsZSY9aCoobC0xKStjPD10LkNkLGU9KGUmPWYqKGwtMSkrYzw9dC5FZCkmdT49byZoPj1jJmY+PWMsZSY9bnVsbCE9dC55LGUmPW51bGwhPXQuZixlJj1udWxsIT10LmVhLDEyPT1pJiYoZSY9ZD49byxlJj1wPD10LlRjLGUmPW51bGwhPXQuRil9ZWxzZSBlPTA7dD1lPzA6Mn19cmV0dXJuIDAhPXR8fG51bGwhPXImJnIuZmQmJih0PUVyKG4pKSx0fXZhciBEcj02NCxScj1bMCwxLDMsNywxNSwzMSw2MywxMjcsMjU1LDUxMSwxMDIzLDIwNDcsNDA5NSw4MTkxLDE2MzgzLDMyNzY3LDY1NTM1LDEzMTA3MSwyNjIxNDMsNTI0Mjg3LDEwNDg1NzUsMjA5NzE1MSw0MTk0MzAzLDgzODg2MDcsMTY3NzcyMTVdLFRyPTI0LFVyPTMyLHpyPTgsSHI9WzAsMCwxLDEsMiwyLDIsMiwzLDMsMywzLDMsMywzLDMsNCw0LDQsNCw0LDQsNCw0LDQsNCw0LDQsNCw0LDQsNCw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNSw1LDUsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw2LDYsNiw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDcsNyw3LDddO1IoXCJQcmVkaWN0b3IwXCIsXCJQcmVkaWN0b3JBZGQwXCIpLHQuUHJlZGljdG9yMD1mdW5jdGlvbigpe3JldHVybiA0Mjc4MTkwMDgwfSx0LlByZWRpY3RvcjE9ZnVuY3Rpb24odCl7cmV0dXJuIHR9LHQuUHJlZGljdG9yMj1mdW5jdGlvbih0LGUscil7cmV0dXJuIGVbciswXX0sdC5QcmVkaWN0b3IzPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gZVtyKzFdfSx0LlByZWRpY3RvcjQ9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBlW3ItMV19LHQuUHJlZGljdG9yNT1mdW5jdGlvbih0LGUscil7cmV0dXJuIFUoVSh0LGVbcisxXSksZVtyKzBdKX0sdC5QcmVkaWN0b3I2PWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gVSh0LGVbci0xXSl9LHQuUHJlZGljdG9yNz1mdW5jdGlvbih0LGUscil7cmV0dXJuIFUodCxlW3IrMF0pfSx0LlByZWRpY3Rvcjg9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBVKGVbci0xXSxlW3IrMF0pfSx0LlByZWRpY3Rvcjk9ZnVuY3Rpb24odCxlLHIpe3JldHVybiBVKGVbciswXSxlW3IrMV0pfSx0LlByZWRpY3RvcjEwPWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gVShVKHQsZVtyLTFdKSxVKGVbciswXSxlW3IrMV0pKX0sdC5QcmVkaWN0b3IxMT1mdW5jdGlvbih0LGUscil7dmFyIG49ZVtyKzBdO3JldHVybiAwPj1XKG4+PjI0JjI1NSx0Pj4yNCYyNTUsKGU9ZVtyLTFdKT4+MjQmMjU1KStXKG4+PjE2JjI1NSx0Pj4xNiYyNTUsZT4+MTYmMjU1KStXKG4+PjgmMjU1LHQ+PjgmMjU1LGU+PjgmMjU1KStXKDI1NSZuLDI1NSZ0LDI1NSZlKT9uOnR9LHQuUHJlZGljdG9yMTI9ZnVuY3Rpb24odCxlLHIpe3ZhciBuPWVbciswXTtyZXR1cm4oeigodD4+MjQmMjU1KSsobj4+MjQmMjU1KS0oKGU9ZVtyLTFdKT4+MjQmMjU1KSk8PDI0fHooKHQ+PjE2JjI1NSkrKG4+PjE2JjI1NSktKGU+PjE2JjI1NSkpPDwxNnx6KCh0Pj44JjI1NSkrKG4+PjgmMjU1KS0oZT4+OCYyNTUpKTw8OHx6KCgyNTUmdCkrKDI1NSZuKS0oMjU1JmUpKSk+Pj4wfSx0LlByZWRpY3RvcjEzPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1lW3ItMV07cmV0dXJuKEgoKHQ9VSh0LGVbciswXSkpPj4yNCYyNTUsbj4+MjQmMjU1KTw8MjR8SCh0Pj4xNiYyNTUsbj4+MTYmMjU1KTw8MTZ8SCh0Pj44JjI1NSxuPj44JjI1NSk8PDh8SCh0Pj4wJjI1NSxuPj4wJjI1NSkpPj4+MH07dmFyIFdyPXQuUHJlZGljdG9yQWRkMDt0LlByZWRpY3RvckFkZDE9VixSKFwiUHJlZGljdG9yMlwiLFwiUHJlZGljdG9yQWRkMlwiKSxSKFwiUHJlZGljdG9yM1wiLFwiUHJlZGljdG9yQWRkM1wiKSxSKFwiUHJlZGljdG9yNFwiLFwiUHJlZGljdG9yQWRkNFwiKSxSKFwiUHJlZGljdG9yNVwiLFwiUHJlZGljdG9yQWRkNVwiKSxSKFwiUHJlZGljdG9yNlwiLFwiUHJlZGljdG9yQWRkNlwiKSxSKFwiUHJlZGljdG9yN1wiLFwiUHJlZGljdG9yQWRkN1wiKSxSKFwiUHJlZGljdG9yOFwiLFwiUHJlZGljdG9yQWRkOFwiKSxSKFwiUHJlZGljdG9yOVwiLFwiUHJlZGljdG9yQWRkOVwiKSxSKFwiUHJlZGljdG9yMTBcIixcIlByZWRpY3RvckFkZDEwXCIpLFIoXCJQcmVkaWN0b3IxMVwiLFwiUHJlZGljdG9yQWRkMTFcIiksUihcIlByZWRpY3RvcjEyXCIsXCJQcmVkaWN0b3JBZGQxMlwiKSxSKFwiUHJlZGljdG9yMTNcIixcIlByZWRpY3RvckFkZDEzXCIpO3ZhciBWcj10LlByZWRpY3RvckFkZDI7WChcIkNvbG9ySW5kZXhJbnZlcnNlVHJhbnNmb3JtXCIsXCJNYXBBUkdCXCIsXCIzMmJcIiwoZnVuY3Rpb24odCl7cmV0dXJuIHQ+PjgmMjU1fSksKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpLFgoXCJWUDhMQ29sb3JJbmRleEludmVyc2VUcmFuc2Zvcm1BbHBoYVwiLFwiTWFwQWxwaGFcIixcIjhiXCIsKGZ1bmN0aW9uKHQpe3JldHVybiB0fSksKGZ1bmN0aW9uKHQpe3JldHVybiB0Pj44JjI1NX0pKTt2YXIgR3IsWXI9dC5Db2xvckluZGV4SW52ZXJzZVRyYW5zZm9ybSxKcj10Lk1hcEFSR0IsWHI9dC5WUDhMQ29sb3JJbmRleEludmVyc2VUcmFuc2Zvcm1BbHBoYSxLcj10Lk1hcEFscGhhLFpyPXQuVlA4TFByZWRpY3RvcnNBZGQ9W107WnIubGVuZ3RoPTE2LCh0LlZQOExQcmVkaWN0b3JzPVtdKS5sZW5ndGg9MTYsKHQuVlA4TFByZWRpY3RvcnNBZGRfQz1bXSkubGVuZ3RoPTE2LCh0LlZQOExQcmVkaWN0b3JzX0M9W10pLmxlbmd0aD0xNjt2YXIgJHIsUXIsdG4sZW4scm4sbm4sYW4sb24sc24sY24sdW4saG4sbG4sZm4sZG4scG4sZ24sbW4sdm4sYm4seW4sd24sTm4sTG4sQW4seG4sU24sX24sUG49YSg1MTEpLGtuPWEoMjA0MSksSW49YSgyMjUpLEZuPWEoNzY3KSxDbj0wLGpuPWtuLE9uPUluLEJuPUZuLE1uPVBuLEVuPTAscW49MSxEbj0yLFJuPTMsVG49NCxVbj01LHpuPTYsSG49NyxXbj04LFZuPTksR249MTAsWW49WzIsMyw3XSxKbj1bMywzLDExXSxYbj1bMjgwLDI1NiwyNTYsMjU2LDQwXSxLbj1bMCwxLDEsMSwwXSxabj1bMTcsMTgsMCwxLDIsMyw0LDUsMTYsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNV0sJG49WzI0LDcsMjMsMjUsNDAsNiwzOSw0MSwyMiwyNiwzOCw0Miw1Niw1LDU1LDU3LDIxLDI3LDU0LDU4LDM3LDQzLDcyLDQsNzEsNzMsMjAsMjgsNTMsNTksNzAsNzQsMzYsNDQsODgsNjksNzUsNTIsNjAsMyw4Nyw4OSwxOSwyOSw4Niw5MCwzNSw0NSw2OCw3Niw4NSw5MSw1MSw2MSwxMDQsMiwxMDMsMTA1LDE4LDMwLDEwMiwxMDYsMzQsNDYsODQsOTIsNjcsNzcsMTAxLDEwNyw1MCw2MiwxMjAsMSwxMTksMTIxLDgzLDkzLDE3LDMxLDEwMCwxMDgsNjYsNzgsMTE4LDEyMiwzMyw0NywxMTcsMTIzLDQ5LDYzLDk5LDEwOSw4Miw5NCwwLDExNiwxMjQsNjUsNzksMTYsMzIsOTgsMTEwLDQ4LDExNSwxMjUsODEsOTUsNjQsMTE0LDEyNiw5NywxMTEsODAsMTEzLDEyNyw5NiwxMTJdLFFuPVsyOTU0LDI5NTYsMjk1OCwyOTYyLDI5NzAsMjk4NiwzMDE4LDMwODIsMzIxMiwzNDY4LDM5ODAsNTAwNF0sdGk9OCxlaT1bNCw1LDYsNyw4LDksMTAsMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTcsMTgsMTksMjAsMjAsMjEsMjEsMjIsMjIsMjMsMjMsMjQsMjUsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsNzUsNzYsNzYsNzcsNzgsNzksODAsODEsODIsODMsODQsODUsODYsODcsODgsODksOTEsOTMsOTUsOTYsOTgsMTAwLDEwMSwxMDIsMTA0LDEwNiwxMDgsMTEwLDExMiwxMTQsMTE2LDExOCwxMjIsMTI0LDEyNiwxMjgsMTMwLDEzMiwxMzQsMTM2LDEzOCwxNDAsMTQzLDE0NSwxNDgsMTUxLDE1NCwxNTddLHJpPVs0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MSw1Miw1Myw1NCw1NSw1Niw1Nyw1OCw2MCw2Miw2NCw2Niw2OCw3MCw3Miw3NCw3Niw3OCw4MCw4Miw4NCw4Niw4OCw5MCw5Miw5NCw5Niw5OCwxMDAsMTAyLDEwNCwxMDYsMTA4LDExMCwxMTIsMTE0LDExNiwxMTksMTIyLDEyNSwxMjgsMTMxLDEzNCwxMzcsMTQwLDE0MywxNDYsMTQ5LDE1MiwxNTUsMTU4LDE2MSwxNjQsMTY3LDE3MCwxNzMsMTc3LDE4MSwxODUsMTg5LDE5MywxOTcsMjAxLDIwNSwyMDksMjEzLDIxNywyMjEsMjI1LDIyOSwyMzQsMjM5LDI0NSwyNDksMjU0LDI1OSwyNjQsMjY5LDI3NCwyNzksMjg0XSxuaT1udWxsLGlpPVtbMTczLDE0OCwxNDAsMF0sWzE3NiwxNTUsMTQwLDEzNSwwXSxbMTgwLDE1NywxNDEsMTM0LDEzMCwwXSxbMjU0LDI1NCwyNDMsMjMwLDE5NiwxNzcsMTUzLDE0MCwxMzMsMTMwLDEyOSwwXV0sYWk9WzAsMSw0LDgsNSwyLDMsNiw5LDEyLDEzLDEwLDcsMTEsMTQsMTVdLG9pPVstMCwxLC0xLDIsLTIsMyw0LDYsLTMsNSwtNCwtNSwtNiw3LC03LDgsLTgsLTldLHNpPVtbW1sxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdXSxbWzI1MywxMzYsMjU0LDI1NSwyMjgsMjE5LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsxODksMTI5LDI0MiwyNTUsMjI3LDIxMywyNTUsMjE5LDEyOCwxMjgsMTI4XSxbMTA2LDEyNiwyMjcsMjUyLDIxNCwyMDksMjU1LDI1NSwxMjgsMTI4LDEyOF1dLFtbMSw5OCwyNDgsMjU1LDIzNiwyMjYsMjU1LDI1NSwxMjgsMTI4LDEyOF0sWzE4MSwxMzMsMjM4LDI1NCwyMjEsMjM0LDI1NSwxNTQsMTI4LDEyOCwxMjhdLFs3OCwxMzQsMjAyLDI0NywxOTgsMTgwLDI1NSwyMTksMTI4LDEyOCwxMjhdXSxbWzEsMTg1LDI0OSwyNTUsMjQzLDI1NSwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMTg0LDE1MCwyNDcsMjU1LDIzNiwyMjQsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzc3LDExMCwyMTYsMjU1LDIzNiwyMzAsMTI4LDEyOCwxMjgsMTI4LDEyOF1dLFtbMSwxMDEsMjUxLDI1NSwyNDEsMjU1LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsxNzAsMTM5LDI0MSwyNTIsMjM2LDIwOSwyNTUsMjU1LDEyOCwxMjgsMTI4XSxbMzcsMTE2LDE5NiwyNDMsMjI4LDI1NSwyNTUsMjU1LDEyOCwxMjgsMTI4XV0sW1sxLDIwNCwyNTQsMjU1LDI0NSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzIwNywxNjAsMjUwLDI1NSwyMzgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsxMDIsMTAzLDIzMSwyNTUsMjExLDE3MSwxMjgsMTI4LDEyOCwxMjgsMTI4XV0sW1sxLDE1MiwyNTIsMjU1LDI0MCwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzE3NywxMzUsMjQzLDI1NSwyMzQsMjI1LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFs4MCwxMjksMjExLDI1NSwxOTQsMjI0LDEyOCwxMjgsMTI4LDEyOCwxMjhdXSxbWzEsMSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzI0NiwxLDI1NSwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMjU1LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF1dXSxbW1sxOTgsMzUsMjM3LDIyMywxOTMsMTg3LDE2MiwxNjAsMTQ1LDE1NSw2Ml0sWzEzMSw0NSwxOTgsMjIxLDE3MiwxNzYsMjIwLDE1NywyNTIsMjIxLDFdLFs2OCw0NywxNDYsMjA4LDE0OSwxNjcsMjIxLDE2MiwyNTUsMjIzLDEyOF1dLFtbMSwxNDksMjQxLDI1NSwyMjEsMjI0LDI1NSwyNTUsMTI4LDEyOCwxMjhdLFsxODQsMTQxLDIzNCwyNTMsMjIyLDIyMCwyNTUsMTk5LDEyOCwxMjgsMTI4XSxbODEsOTksMTgxLDI0MiwxNzYsMTkwLDI0OSwyMDIsMjU1LDI1NSwxMjhdXSxbWzEsMTI5LDIzMiwyNTMsMjE0LDE5NywyNDIsMTk2LDI1NSwyNTUsMTI4XSxbOTksMTIxLDIxMCwyNTAsMjAxLDE5OCwyNTUsMjAyLDEyOCwxMjgsMTI4XSxbMjMsOTEsMTYzLDI0MiwxNzAsMTg3LDI0NywyMTAsMjU1LDI1NSwxMjhdXSxbWzEsMjAwLDI0NiwyNTUsMjM0LDI1NSwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMTA5LDE3OCwyNDEsMjU1LDIzMSwyNDUsMjU1LDI1NSwxMjgsMTI4LDEyOF0sWzQ0LDEzMCwyMDEsMjUzLDIwNSwxOTIsMjU1LDI1NSwxMjgsMTI4LDEyOF1dLFtbMSwxMzIsMjM5LDI1MSwyMTksMjA5LDI1NSwxNjUsMTI4LDEyOCwxMjhdLFs5NCwxMzYsMjI1LDI1MSwyMTgsMTkwLDI1NSwyNTUsMTI4LDEyOCwxMjhdLFsyMiwxMDAsMTc0LDI0NSwxODYsMTYxLDI1NSwxOTksMTI4LDEyOCwxMjhdXSxbWzEsMTgyLDI0OSwyNTUsMjMyLDIzNSwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMTI0LDE0MywyNDEsMjU1LDIyNywyMzQsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzM1LDc3LDE4MSwyNTEsMTkzLDIxMSwyNTUsMjA1LDEyOCwxMjgsMTI4XV0sW1sxLDE1NywyNDcsMjU1LDIzNiwyMzEsMjU1LDI1NSwxMjgsMTI4LDEyOF0sWzEyMSwxNDEsMjM1LDI1NSwyMjUsMjI3LDI1NSwyNTUsMTI4LDEyOCwxMjhdLFs0NSw5OSwxODgsMjUxLDE5NSwyMTcsMjU1LDIyNCwxMjgsMTI4LDEyOF1dLFtbMSwxLDI1MSwyNTUsMjEzLDI1NSwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMjAzLDEsMjQ4LDI1NSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsxMzcsMSwxNzcsMjU1LDIyNCwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOF1dXSxbW1syNTMsOSwyNDgsMjUxLDIwNywyMDgsMjU1LDE5MiwxMjgsMTI4LDEyOF0sWzE3NSwxMywyMjQsMjQzLDE5MywxODUsMjQ5LDE5OCwyNTUsMjU1LDEyOF0sWzczLDE3LDE3MSwyMjEsMTYxLDE3OSwyMzYsMTY3LDI1NSwyMzQsMTI4XV0sW1sxLDk1LDI0NywyNTMsMjEyLDE4MywyNTUsMjU1LDEyOCwxMjgsMTI4XSxbMjM5LDkwLDI0NCwyNTAsMjExLDIwOSwyNTUsMjU1LDEyOCwxMjgsMTI4XSxbMTU1LDc3LDE5NSwyNDgsMTg4LDE5NSwyNTUsMjU1LDEyOCwxMjgsMTI4XV0sW1sxLDI0LDIzOSwyNTEsMjE4LDIxOSwyNTUsMjA1LDEyOCwxMjgsMTI4XSxbMjAxLDUxLDIxOSwyNTUsMTk2LDE4NiwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbNjksNDYsMTkwLDIzOSwyMDEsMjE4LDI1NSwyMjgsMTI4LDEyOCwxMjhdXSxbWzEsMTkxLDI1MSwyNTUsMjU1LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMjIzLDE2NSwyNDksMjU1LDIxMywyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzE0MSwxMjQsMjQ4LDI1NSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdXSxbWzEsMTYsMjQ4LDI1NSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsxOTAsMzYsMjMwLDI1NSwyMzYsMjU1LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsxNDksMSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF1dLFtbMSwyMjYsMjU1LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsyNDcsMTkyLDI1NSwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMjQwLDEyOCwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF1dLFtbMSwxMzQsMjUyLDI1NSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsyMTMsNjIsMjUwLDI1NSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFs1NSw5MywyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF1dLFtbMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF0sWzEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4XV1dLFtbWzIwMiwyNCwyMTMsMjM1LDE4NiwxOTEsMjIwLDE2MCwyNDAsMTc1LDI1NV0sWzEyNiwzOCwxODIsMjMyLDE2OSwxODQsMjI4LDE3NCwyNTUsMTg3LDEyOF0sWzYxLDQ2LDEzOCwyMTksMTUxLDE3OCwyNDAsMTcwLDI1NSwyMTYsMTI4XV0sW1sxLDExMiwyMzAsMjUwLDE5OSwxOTEsMjQ3LDE1OSwyNTUsMjU1LDEyOF0sWzE2NiwxMDksMjI4LDI1MiwyMTEsMjE1LDI1NSwxNzQsMTI4LDEyOCwxMjhdLFszOSw3NywxNjIsMjMyLDE3MiwxODAsMjQ1LDE3OCwyNTUsMjU1LDEyOF1dLFtbMSw1MiwyMjAsMjQ2LDE5OCwxOTksMjQ5LDIyMCwyNTUsMjU1LDEyOF0sWzEyNCw3NCwxOTEsMjQzLDE4MywxOTMsMjUwLDIyMSwyNTUsMjU1LDEyOF0sWzI0LDcxLDEzMCwyMTksMTU0LDE3MCwyNDMsMTgyLDI1NSwyNTUsMTI4XV0sW1sxLDE4MiwyMjUsMjQ5LDIxOSwyNDAsMjU1LDIyNCwxMjgsMTI4LDEyOF0sWzE0OSwxNTAsMjI2LDI1MiwyMTYsMjA1LDI1NSwxNzEsMTI4LDEyOCwxMjhdLFsyOCwxMDgsMTcwLDI0MiwxODMsMTk0LDI1NCwyMjMsMjU1LDI1NSwxMjhdXSxbWzEsODEsMjMwLDI1MiwyMDQsMjAzLDI1NSwxOTIsMTI4LDEyOCwxMjhdLFsxMjMsMTAyLDIwOSwyNDcsMTg4LDE5NiwyNTUsMjMzLDEyOCwxMjgsMTI4XSxbMjAsOTUsMTUzLDI0MywxNjQsMTczLDI1NSwyMDMsMTI4LDEyOCwxMjhdXSxbWzEsMjIyLDI0OCwyNTUsMjE2LDIxMywxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMTY4LDE3NSwyNDYsMjUyLDIzNSwyMDUsMjU1LDI1NSwxMjgsMTI4LDEyOF0sWzQ3LDExNiwyMTUsMjU1LDIxMSwyMTIsMjU1LDI1NSwxMjgsMTI4LDEyOF1dLFtbMSwxMjEsMjM2LDI1MywyMTIsMjE0LDI1NSwyNTUsMTI4LDEyOCwxMjhdLFsxNDEsODQsMjEzLDI1MiwyMDEsMjAyLDI1NSwyMTksMTI4LDEyOCwxMjhdLFs0Miw4MCwxNjAsMjQwLDE2MiwxODUsMjU1LDIwNSwxMjgsMTI4LDEyOF1dLFtbMSwxLDI1NSwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4XSxbMjQ0LDEsMjU1LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjhdLFsyMzgsMSwyNTUsMTI4LDEyOCwxMjgsMTI4LDEyOCwxMjgsMTI4LDEyOF1dXV0sY2k9W1tbMjMxLDEyMCw0OCw4OSwxMTUsMTEzLDEyMCwxNTIsMTEyXSxbMTUyLDE3OSw2NCwxMjYsMTcwLDExOCw0Niw3MCw5NV0sWzE3NSw2OSwxNDMsODAsODUsODIsNzIsMTU1LDEwM10sWzU2LDU4LDEwLDE3MSwyMTgsMTg5LDE3LDEzLDE1Ml0sWzExNCwyNiwxNywxNjMsNDQsMTk1LDIxLDEwLDE3M10sWzEyMSwyNCw4MCwxOTUsMjYsNjIsNDQsNjQsODVdLFsxNDQsNzEsMTAsMzgsMTcxLDIxMywxNDQsMzQsMjZdLFsxNzAsNDYsNTUsMTksMTM2LDE2MCwzMywyMDYsNzFdLFs2MywyMCw4LDExNCwxMTQsMjA4LDEyLDksMjI2XSxbODEsNDAsMTEsOTYsMTgyLDg0LDI5LDE2LDM2XV0sW1sxMzQsMTgzLDg5LDEzNyw5OCwxMDEsMTA2LDE2NSwxNDhdLFs3MiwxODcsMTAwLDEzMCwxNTcsMTExLDMyLDc1LDgwXSxbNjYsMTAyLDE2Nyw5OSw3NCw2Miw0MCwyMzQsMTI4XSxbNDEsNTMsOSwxNzgsMjQxLDE0MSwyNiw4LDEwN10sWzc0LDQzLDI2LDE0Niw3MywxNjYsNDksMjMsMTU3XSxbNjUsMzgsMTA1LDE2MCw1MSw1MiwzMSwxMTUsMTI4XSxbMTA0LDc5LDEyLDI3LDIxNywyNTUsODcsMTcsN10sWzg3LDY4LDcxLDQ0LDExNCw1MSwxNSwxODYsMjNdLFs0Nyw0MSwxNCwxMTAsMTgyLDE4MywyMSwxNywxOTRdLFs2Niw0NSwyNSwxMDIsMTk3LDE4OSwyMywxOCwyMl1dLFtbODgsODgsMTQ3LDE1MCw0Miw0Niw0NSwxOTYsMjA1XSxbNDMsOTcsMTgzLDExNyw4NSwzOCwzNSwxNzksNjFdLFszOSw1MywyMDAsODcsMjYsMjEsNDMsMjMyLDE3MV0sWzU2LDM0LDUxLDEwNCwxMTQsMTAyLDI5LDkzLDc3XSxbMzksMjgsODUsMTcxLDU4LDE2NSw5MCw5OCw2NF0sWzM0LDIyLDExNiwyMDYsMjMsMzQsNDMsMTY2LDczXSxbMTA3LDU0LDMyLDI2LDUxLDEsODEsNDMsMzFdLFs2OCwyNSwxMDYsMjIsNjQsMTcxLDM2LDIyNSwxMTRdLFszNCwxOSwyMSwxMDIsMTMyLDE4OCwxNiw3NiwxMjRdLFs2MiwxOCw3OCw5NSw4NSw1Nyw1MCw0OCw1MV1dLFtbMTkzLDEwMSwzNSwxNTksMjE1LDExMSw4OSw0NiwxMTFdLFs2MCwxNDgsMzEsMTcyLDIxOSwyMjgsMjEsMTgsMTExXSxbMTEyLDExMyw3Nyw4NSwxNzksMjU1LDM4LDEyMCwxMTRdLFs0MCw0MiwxLDE5NiwyNDUsMjA5LDEwLDI1LDEwOV0sWzg4LDQzLDI5LDE0MCwxNjYsMjEzLDM3LDQzLDE1NF0sWzYxLDYzLDMwLDE1NSw2Nyw0NSw2OCwxLDIwOV0sWzEwMCw4MCw4LDQzLDE1NCwxLDUxLDI2LDcxXSxbMTQyLDc4LDc4LDE2LDI1NSwxMjgsMzQsMTk3LDE3MV0sWzQxLDQwLDUsMTAyLDIxMSwxODMsNCwxLDIyMV0sWzUxLDUwLDE3LDE2OCwyMDksMTkyLDIzLDI1LDgyXV0sW1sxMzgsMzEsMzYsMTcxLDI3LDE2NiwzOCw0NCwyMjldLFs2Nyw4Nyw1OCwxNjksODIsMTE1LDI2LDU5LDE3OV0sWzYzLDU5LDkwLDE4MCw1OSwxNjYsOTMsNzMsMTU0XSxbNDAsNDAsMjEsMTE2LDE0MywyMDksMzQsMzksMTc1XSxbNDcsMTUsMTYsMTgzLDM0LDIyMyw0OSw0NSwxODNdLFs0NiwxNywzMywxODMsNiw5OCwxNSwzMiwxODNdLFs1Nyw0NiwyMiwyNCwxMjgsMSw1NCwxNywzN10sWzY1LDMyLDczLDExNSwyOCwxMjgsMjMsMTI4LDIwNV0sWzQwLDMsOSwxMTUsNTEsMTkyLDE4LDYsMjIzXSxbODcsMzcsOSwxMTUsNTksNzcsNjQsMjEsNDddXSxbWzEwNCw1NSw0NCwyMTgsOSw1NCw1MywxMzAsMjI2XSxbNjQsOTAsNzAsMjA1LDQwLDQxLDIzLDI2LDU3XSxbNTQsNTcsMTEyLDE4NCw1LDQxLDM4LDE2NiwyMTNdLFszMCwzNCwyNiwxMzMsMTUyLDExNiwxMCwzMiwxMzRdLFszOSwxOSw1MywyMjEsMjYsMTE0LDMyLDczLDI1NV0sWzMxLDksNjUsMjM0LDIsMTUsMSwxMTgsNzNdLFs3NSwzMiwxMiw1MSwxOTIsMjU1LDE2MCw0Myw1MV0sWzg4LDMxLDM1LDY3LDEwMiw4NSw1NSwxODYsODVdLFs1NiwyMSwyMywxMTEsNTksMjA1LDQ1LDM3LDE5Ml0sWzU1LDM4LDcwLDEyNCw3MywxMDIsMSwzNCw5OF1dLFtbMTI1LDk4LDQyLDg4LDEwNCw4NSwxMTcsMTc1LDgyXSxbOTUsODQsNTMsODksMTI4LDEwMCwxMTMsMTAxLDQ1XSxbNzUsNzksMTIzLDQ3LDUxLDEyOCw4MSwxNzEsMV0sWzU3LDE3LDUsNzEsMTAyLDU3LDUzLDQxLDQ5XSxbMzgsMzMsMTMsMTIxLDU3LDczLDI2LDEsODVdLFs0MSwxMCw2NywxMzgsNzcsMTEwLDkwLDQ3LDExNF0sWzExNSwyMSwyLDEwLDEwMiwyNTUsMTY2LDIzLDZdLFsxMDEsMjksMTYsMTAsODUsMTI4LDEwMSwxOTYsMjZdLFs1NywxOCwxMCwxMDIsMTAyLDIxMywzNCwyMCw0M10sWzExNywyMCwxNSwzNiwxNjMsMTI4LDY4LDEsMjZdXSxbWzEwMiw2MSw3MSwzNywzNCw1MywzMSwyNDMsMTkyXSxbNjksNjAsNzEsMzgsNzMsMTE5LDI4LDIyMiwzN10sWzY4LDQ1LDEyOCwzNCwxLDQ3LDExLDI0NSwxNzFdLFs2MiwxNywxOSw3MCwxNDYsODUsNTUsNjIsNzBdLFszNyw0MywzNywxNTQsMTAwLDE2Myw4NSwxNjAsMV0sWzYzLDksOTIsMTM2LDI4LDY0LDMyLDIwMSw4NV0sWzc1LDE1LDksOSw2NCwyNTUsMTg0LDExOSwxNl0sWzg2LDYsMjgsNSw2NCwyNTUsMjUsMjQ4LDFdLFs1Niw4LDE3LDEzMiwxMzcsMjU1LDU1LDExNiwxMjhdLFs1OCwxNSwyMCw4MiwxMzUsNTcsMjYsMTIxLDQwXV0sW1sxNjQsNTAsMzEsMTM3LDE1NCwxMzMsMjUsMzUsMjE4XSxbNTEsMTAzLDQ0LDEzMSwxMzEsMTIzLDMxLDYsMTU4XSxbODYsNDAsNjQsMTM1LDE0OCwyMjQsNDUsMTgzLDEyOF0sWzIyLDI2LDE3LDEzMSwyNDAsMTU0LDE0LDEsMjA5XSxbNDUsMTYsMjEsOTEsNjQsMjIyLDcsMSwxOTddLFs1NiwyMSwzOSwxNTUsNjAsMTM4LDIzLDEwMiwyMTNdLFs4MywxMiwxMyw1NCwxOTIsMjU1LDY4LDQ3LDI4XSxbODUsMjYsODUsODUsMTI4LDEyOCwzMiwxNDYsMTcxXSxbMTgsMTEsNyw2MywxNDQsMTcxLDQsNCwyNDZdLFszNSwyNywxMCwxNDYsMTc0LDE3MSwxMiwyNiwxMjhdXSxbWzE5MCw4MCwzNSw5OSwxODAsODAsMTI2LDU0LDQ1XSxbODUsMTI2LDQ3LDg3LDE3Niw1MSw0MSwyMCwzMl0sWzEwMSw3NSwxMjgsMTM5LDExOCwxNDYsMTE2LDEyOCw4NV0sWzU2LDQxLDE1LDE3NiwyMzYsODUsMzcsOSw2Ml0sWzcxLDMwLDE3LDExOSwxMTgsMjU1LDE3LDE4LDEzOF0sWzEwMSwzOCw2MCwxMzgsNTUsNzAsNDMsMjYsMTQyXSxbMTQ2LDM2LDE5LDMwLDE3MSwyNTUsOTcsMjcsMjBdLFsxMzgsNDUsNjEsNjIsMjE5LDEsODEsMTg4LDY0XSxbMzIsNDEsMjAsMTE3LDE1MSwxNDIsMjAsMjEsMTYzXSxbMTEyLDE5LDEyLDYxLDE5NSwxMjgsNDgsNCwyNF1dXSx1aT1bW1tbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1sxNzYsMjQ2LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjIzLDI0MSwyNTIsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI0OSwyNTMsMjUzLDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNDQsMjUyLDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyMzQsMjU0LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjUzLDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI0NiwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzIzOSwyNTMsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTQsMjU1LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjQ4LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjUxLDI1NSwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNTMsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTEsMjU0LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU0LDI1NSwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI1NCwyNTMsMjU1LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1MCwyNTUsMjU0LDI1NSwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXV0sW1tbMjE3LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzIyNSwyNTIsMjQxLDI1MywyNTUsMjU1LDI1NCwyNTUsMjU1LDI1NSwyNTVdLFsyMzQsMjUwLDI0MSwyNTAsMjUzLDI1NSwyNTMsMjU0LDI1NSwyNTUsMjU1XV0sW1syNTUsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjIzLDI1NCwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzIzOCwyNTMsMjU0LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNDgsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNDksMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI1MywyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI0NywyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjUzLDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjUyLDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNTQsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTMsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI1NCwyNTMsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1MCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXV0sW1tbMTg2LDI1MSwyNTAsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzIzNCwyNTEsMjQ0LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTEsMjUxLDI0MywyNTMsMjU0LDI1NSwyNTQsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjUzLDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjM2LDI1MywyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1MSwyNTMsMjUzLDI1NCwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNTQsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTQsMjU0LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NCwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXV0sW1tbMjQ4LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1MCwyNTQsMjUyLDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNDgsMjU0LDI0OSwyNTMsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjUzLDI1MywyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjQ2LDI1MywyNTMsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1MiwyNTQsMjUxLDI1NCwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNTQsMjUyLDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNDgsMjU0LDI1MywyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjUzLDI1NSwyNTQsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI1MSwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI0NSwyNTEsMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTMsMjUzLDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjUxLDI1MywyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjUyLDI1MywyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXSxbWzI1NSwyNTIsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNDksMjU1LDI1NCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU1LDI1NSwyNTQsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV1dLFtbMjU1LDI1NSwyNTMsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1MCwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdLFsyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XV0sW1syNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1XSxbMjU0LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NV0sWzI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTUsMjU1LDI1NSwyNTVdXV1dLGhpPVswLDEsMiwzLDYsNCw1LDYsNiw2LDYsNiw2LDYsNiw3LDBdLGxpPVtdLGZpPVtdLGRpPVtdLHBpPTEsZ2k9MixtaT1bXSx2aT1bXTt2cihcIlVwc2FtcGxlUmdiTGluZVBhaXJcIixBciwzKSx2cihcIlVwc2FtcGxlQmdyTGluZVBhaXJcIix4ciwzKSx2cihcIlVwc2FtcGxlUmdiYUxpbmVQYWlyXCIsSXIsNCksdnIoXCJVcHNhbXBsZUJncmFMaW5lUGFpclwiLGtyLDQpLHZyKFwiVXBzYW1wbGVBcmdiTGluZVBhaXJcIixQciw0KSx2cihcIlVwc2FtcGxlUmdiYTQ0NDRMaW5lUGFpclwiLF9yLDIpLHZyKFwiVXBzYW1wbGVSZ2I1NjVMaW5lUGFpclwiLFNyLDIpO3ZhciBiaT10LlVwc2FtcGxlUmdiTGluZVBhaXIseWk9dC5VcHNhbXBsZUJnckxpbmVQYWlyLHdpPXQuVXBzYW1wbGVSZ2JhTGluZVBhaXIsTmk9dC5VcHNhbXBsZUJncmFMaW5lUGFpcixMaT10LlVwc2FtcGxlQXJnYkxpbmVQYWlyLEFpPXQuVXBzYW1wbGVSZ2JhNDQ0NExpbmVQYWlyLHhpPXQuVXBzYW1wbGVSZ2I1NjVMaW5lUGFpcixTaT0xNixfaT0xPDxTaS0xLFBpPS0yMjcsa2k9NDgyLElpPTYsRmk9KDI1Njw8SWkpLTEsQ2k9MCxqaT1hKDI1NiksT2k9YSgyNTYpLEJpPWEoMjU2KSxNaT1hKDI1NiksRWk9YShraS1QaSkscWk9YShraS1QaSk7RnIoXCJZdXZUb1JnYlJvd1wiLEFyLDMpLEZyKFwiWXV2VG9CZ3JSb3dcIix4ciwzKSxGcihcIll1dlRvUmdiYVJvd1wiLElyLDQpLEZyKFwiWXV2VG9CZ3JhUm93XCIsa3IsNCksRnIoXCJZdXZUb0FyZ2JSb3dcIixQciw0KSxGcihcIll1dlRvUmdiYTQ0NDRSb3dcIixfciwyKSxGcihcIll1dlRvUmdiNTY1Um93XCIsU3IsMik7dmFyIERpPVswLDQsOCwxMiwxMjgsMTMyLDEzNiwxNDAsMjU2LDI2MCwyNjQsMjY4LDM4NCwzODgsMzkyLDM5Nl0sUmk9WzAsMiw4XSxUaT1bOCw3LDYsNCw0LDIsMiwyLDEsMSwxLDFdLFVpPTE7dGhpcy5XZWJQRGVjb2RlUkdCQT1mdW5jdGlvbih0LHIsbixpLGEpe3ZhciBvPXFuLHM9bmV3IHJyLGM9bmV3IG90O3MuYmE9YyxjLlM9byxjLndpZHRoPVtjLndpZHRoXSxjLmhlaWdodD1bYy5oZWlnaHRdO3ZhciB1PWMud2lkdGgsaD1jLmhlaWdodCxsPW5ldyBzdDtpZihudWxsPT1sfHxudWxsPT10KXZhciBmPTI7ZWxzZSBlKG51bGwhPWwpLGY9QnIodCxyLG4sbC53aWR0aCxsLmhlaWdodCxsLlBkLGwuUWQsbC5mb3JtYXQsbnVsbCk7aWYoMCE9Zj91PTA6KG51bGwhPXUmJih1WzBdPWwud2lkdGhbMF0pLG51bGwhPWgmJihoWzBdPWwuaGVpZ2h0WzBdKSx1PTEpLHUpe2Mud2lkdGg9Yy53aWR0aFswXSxjLmhlaWdodD1jLmhlaWdodFswXSxudWxsIT1pJiYoaVswXT1jLndpZHRoKSxudWxsIT1hJiYoYVswXT1jLmhlaWdodCk7dDp7aWYoaT1uZXcgR3QsKGE9bmV3IG5yKS5kYXRhPXQsYS53PXIsYS5oYT1uLGEua2Q9MSxyPVswXSxlKG51bGwhPWEpLCgwPT0odD1CcihhLmRhdGEsYS53LGEuaGEsbnVsbCxudWxsLG51bGwscixudWxsLGEpKXx8Nz09dCkmJnJbMF0mJih0PTQpLDA9PShyPXQpKXtpZihlKG51bGwhPXMpLGkuZGF0YT1hLmRhdGEsaS53PWEudythLm9mZnNldCxpLmhhPWEuaGEtYS5vZmZzZXQsaS5wdXQ9ZHQsaS5hYz1mdCxpLmJjPXB0LGkubWE9cyxhLnhhKXtpZihudWxsPT0odD1rdCgpKSl7cz0xO2JyZWFrIHR9aWYoZnVuY3Rpb24odCxyKXt2YXIgbj1bMF0saT1bMF0sYT1bMF07ZTpmb3IoOzspe2lmKG51bGw9PXQpcmV0dXJuIDA7aWYobnVsbD09cilyZXR1cm4gdC5hPTIsMDtpZih0Lmw9cix0LmE9MCx2KHQubSxyLmRhdGEsci53LHIuaGEpLCFndCh0Lm0sbixpLGEpKXt0LmE9MzticmVhayBlfWlmKHQueGI9Z2ksci53aWR0aD1uWzBdLHIuaGVpZ2h0PWlbMF0sIUl0KG5bMF0saVswXSwxLHQsbnVsbCkpYnJlYWsgZTtyZXR1cm4gMX1yZXR1cm4gZSgwIT10LmEpLDB9KHQsaSkpe2lmKGk9MD09KHI9cXIoaS53aWR0aCxpLmhlaWdodCxzLk9hLHMuYmEpKSl7ZTp7aT10O3I6Zm9yKDs7KXtpZihudWxsPT1pKXtpPTA7YnJlYWsgZX1pZihlKG51bGwhPWkucy55YyksZShudWxsIT1pLnMuWWEpLGUoMDxpLnMuV2IpLGUobnVsbCE9KG49aS5sKSksZShudWxsIT0oYT1uLm1hKSksMCE9aS54Yil7aWYoaS5jYT1hLmJhLGkudGI9YS50YixlKG51bGwhPWkuY2EpLCFNcihhLk9hLG4sUm4pKXtpLmE9MjticmVhayByfWlmKCFGdChpLG4ud2lkdGgpKWJyZWFrIHI7aWYobi5kYSlicmVhayByO2lmKChuLmRhfHxudChpLmNhLlMpKSYmbXIoKSwxMT5pLmNhLlN8fChhbGVydChcInRvZG86V2ViUEluaXRDb252ZXJ0QVJHQlRvWVVWXCIpLG51bGwhPWkuY2EuZi5rYi5GJiZtcigpKSxpLlBiJiYwPGkucy51YSYmbnVsbD09aS5zLnZiLlgmJiFPKGkucy52YixpLnMuV2EuWGEpKXtpLmE9MTticmVhayByfWkueGI9MH1pZighX3QoaSxpLlYsaS5CYSxpLmMsaS5pLG4ubyxMdCkpYnJlYWsgcjthLkRjPWkuTWEsaT0xO2JyZWFrIGV9ZSgwIT1pLmEpLGk9MH1pPSFpfWkmJihyPXQuYSl9ZWxzZSByPXQuYX1lbHNle2lmKG51bGw9PSh0PW5ldyBZdCkpe3M9MTticmVhayB0fWlmKHQuRmE9YS5uYSx0LlA9YS5QLHQucWM9YS5TYSxLdCh0LGkpKXtpZigwPT0ocj1xcihpLndpZHRoLGkuaGVpZ2h0LHMuT2Escy5iYSkpKXtpZih0LkFhPTAsbj1zLk9hLGUobnVsbCE9KGE9dCkpLG51bGwhPW4pe2lmKDA8KHU9MD4odT1uLk1kKT8wOjEwMDx1PzI1NToyNTUqdS8xMDApKXtmb3IoaD1sPTA7ND5oOysraCkxMj4oZj1hLnBiW2hdKS5sYyYmKGYuaWE9dSpUaVswPmYubGM/MDpmLmxjXT4+MyksbHw9Zi5pYTtsJiYoYWxlcnQoXCJ0b2RvOlZQOEluaXRSYW5kb21cIiksYS5pYT0xKX1hLkdhPW4uSWQsMTAwPGEuR2E/YS5HYT0xMDA6MD5hLkdhJiYoYS5HYT0wKX1RdCh0LGkpfHwocj10LmEpfX1lbHNlIHI9dC5hfTA9PXImJm51bGwhPXMuT2EmJnMuT2EuZmQmJihyPUVyKHMuYmEpKX1zPXJ9bz0wIT1zP251bGw6MTE+bz9jLmYuUkdCQS5lYjpjLmYua2IueX1lbHNlIG89bnVsbDtyZXR1cm4gb307dmFyIHppPVszLDQsMyw0LDQsMiwyLDQsNCw0LDIsMSwxXX07ZnVuY3Rpb24gdSh0LGUpe2Zvcih2YXIgcj1cIlwiLG49MDtuPDQ7bisrKXIrPVN0cmluZy5mcm9tQ2hhckNvZGUodFtlKytdKTtyZXR1cm4gcn1mdW5jdGlvbiBoKHQsZSl7cmV0dXJuKHRbZSswXTw8MHx0W2UrMV08PDh8dFtlKzJdPDwxNik+Pj4wfWZ1bmN0aW9uIGwodCxlKXtyZXR1cm4odFtlKzBdPDwwfHRbZSsxXTw8OHx0W2UrMl08PDE2fHRbZSszXTw8MjQpPj4+MH1uZXcgYzt2YXIgZj1bMF0sZD1bMF0scD1bXSxnPW5ldyBjLG09dCx2PWZ1bmN0aW9uKHQsZSl7dmFyIHI9e30sbj0wLGk9ITEsYT0wLG89MDtpZihyLmZyYW1lcz1bXSwhXG4vKiogQGxpY2Vuc2VcbiAgICogQ29weXJpZ2h0IChjKSAyMDE3IERvbWluaWsgSG9tYmVyZ2VyXG4gIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAgaHR0cHM6Ly93ZWJwanMuYXBwc3BvdC5jb21cbiAgV2ViUFJpZmZQYXJzZXIgZG9taW5pa2hsYmdAZ21haWwuY29tXG4gICovXG5mdW5jdGlvbih0LGUscixuKXtmb3IodmFyIGk9MDtpPG47aSsrKWlmKHRbZStpXSE9ci5jaGFyQ29kZUF0KGkpKXJldHVybiEwO3JldHVybiExfSh0LGUsXCJSSUZGXCIsNCkpe3ZhciBzLGM7bCh0LGUrPTQpO2ZvcihlKz04O2U8dC5sZW5ndGg7KXt2YXIgZj11KHQsZSksZD1sKHQsZSs9NCk7ZSs9NDt2YXIgcD1kKygxJmQpO3N3aXRjaChmKXtjYXNlXCJWUDggXCI6Y2FzZVwiVlA4TFwiOnZvaWQgMD09PXIuZnJhbWVzW25dJiYoci5mcmFtZXNbbl09e30pOyh2PXIuZnJhbWVzW25dKS5zcmNfb2ZmPWk/bzplLTgsdi5zcmNfc2l6ZT1hK2QrOCxuKyssaSYmKGk9ITEsYT0wLG89MCk7YnJlYWs7Y2FzZVwiVlA4WFwiOih2PXIuaGVhZGVyPXt9KS5mZWF0dXJlX2ZsYWdzPXRbZV07dmFyIGc9ZSs0O3YuY2FudmFzX3dpZHRoPTEraCh0LGcpO2crPTM7di5jYW52YXNfaGVpZ2h0PTEraCh0LGcpO2crPTM7YnJlYWs7Y2FzZVwiQUxQSFwiOmk9ITAsYT1wKzgsbz1lLTg7YnJlYWs7Y2FzZVwiQU5JTVwiOih2PXIuaGVhZGVyKS5iZ2NvbG9yPWwodCxlKTtnPWUrNDt2Lmxvb3BfY291bnQ9KHM9dClbKGM9ZykrMF08PDB8c1tjKzFdPDw4O2crPTI7YnJlYWs7Y2FzZVwiQU5NRlwiOnZhciBtLHY7KHY9ci5mcmFtZXNbbl09e30pLm9mZnNldF94PTIqaCh0LGUpLGUrPTMsdi5vZmZzZXRfeT0yKmgodCxlKSxlKz0zLHYud2lkdGg9MStoKHQsZSksZSs9Myx2LmhlaWdodD0xK2godCxlKSxlKz0zLHYuZHVyYXRpb249aCh0LGUpLGUrPTMsbT10W2UrK10sdi5kaXNwb3NlPTEmbSx2LmJsZW5kPW0+PjEmMX1cIkFOTUZcIiE9ZiYmKGUrPXApfXJldHVybiByfX0obSwwKTt2LnJlc3BvbnNlPW0sdi5yZ2Jhb3V0cHV0PSEwLHYuZGF0YXVybD0hMTt2YXIgYj12LmhlYWRlcj92LmhlYWRlcjpudWxsLHk9di5mcmFtZXM/di5mcmFtZXM6bnVsbDtpZihiKXtiLmxvb3BfY291bnRlcj1iLmxvb3BfY291bnQsZj1bYi5jYW52YXNfaGVpZ2h0XSxkPVtiLmNhbnZhc193aWR0aF07Zm9yKHZhciB3PTA7dzx5Lmxlbmd0aCYmMCE9eVt3XS5ibGVuZDt3KyspO312YXIgTj15WzBdLEw9Zy5XZWJQRGVjb2RlUkdCQShtLE4uc3JjX29mZixOLnNyY19zaXplLGQsZik7Ti5yZ2JhPUwsTi5pbWd3aWR0aD1kWzBdLE4uaW1naGVpZ2h0PWZbMF07Zm9yKHZhciBBPTA7QTxkWzBdKmZbMF0qNDtBKyspcFtBXT1MW0FdO3JldHVybiB0aGlzLndpZHRoPWQsdGhpcy5oZWlnaHQ9Zix0aGlzLmRhdGE9cCx0aGlzfSFmdW5jdGlvbih0KXt2YXIgcj1mdW5jdGlvbigpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9LG49ZnVuY3Rpb24ocixuLGEsaCl7dmFyIGw9NCxmPXM7c3dpdGNoKGgpe2Nhc2UgdC5pbWFnZV9jb21wcmVzc2lvbi5GQVNUOmw9MSxmPW87YnJlYWs7Y2FzZSB0LmltYWdlX2NvbXByZXNzaW9uLk1FRElVTTpsPTYsZj1jO2JyZWFrO2Nhc2UgdC5pbWFnZV9jb21wcmVzc2lvbi5TTE9XOmw9OSxmPXV9cj1pKHIsbixhLGYpO3ZhciBkPWUocix7bGV2ZWw6bH0pO3JldHVybiB0Ll9fYWRkaW1hZ2VfXy5hcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKGQpfSxpPWZ1bmN0aW9uKHQsZSxyLG4pe2Zvcih2YXIgaSxhLG8scz10Lmxlbmd0aC9lLGM9bmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgrcyksdT1sKCksaD0wO2g8cztoKz0xKXtpZihvPWgqZSxpPXQuc3ViYXJyYXkobyxvK2UpLG4pYy5zZXQobihpLHIsYSksbytoKTtlbHNle2Zvcih2YXIgZCxwPXUubGVuZ3RoLGc9W107ZDxwO2QrPTEpZ1tkXT11W2RdKGkscixhKTt2YXIgbT1mKGcuY29uY2F0KCkpO2Muc2V0KGdbbV0sbytoKX1hPWl9cmV0dXJuIGN9LGE9ZnVuY3Rpb24odCl7dmFyIGU9QXJyYXkuYXBwbHkoW10sdCk7cmV0dXJuIGUudW5zaGlmdCgwKSxlfSxvPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbj1bXSxpPXQubGVuZ3RoO25bMF09MTtmb3IodmFyIGE9MDthPGk7YSs9MSlyPXRbYS1lXXx8MCxuW2ErMV09dFthXS1yKzI1NiYyNTU7cmV0dXJuIG59LHM9ZnVuY3Rpb24odCxlLHIpe3ZhciBuLGk9W10sYT10Lmxlbmd0aDtpWzBdPTI7Zm9yKHZhciBvPTA7bzxhO28rPTEpbj1yJiZyW29dfHwwLGlbbysxXT10W29dLW4rMjU2JjI1NTtyZXR1cm4gaX0sYz1mdW5jdGlvbih0LGUscil7dmFyIG4saSxhPVtdLG89dC5sZW5ndGg7YVswXT0zO2Zvcih2YXIgcz0wO3M8bztzKz0xKW49dFtzLWVdfHwwLGk9ciYmcltzXXx8MCxhW3MrMV09dFtzXSsyNTYtKG4raT4+PjEpJjI1NTtyZXR1cm4gYX0sdT1mdW5jdGlvbih0LGUscil7dmFyIG4saSxhLG8scz1bXSxjPXQubGVuZ3RoO3NbMF09NDtmb3IodmFyIHU9MDt1PGM7dSs9MSluPXRbdS1lXXx8MCxpPXImJnJbdV18fDAsYT1yJiZyW3UtZV18fDAsbz1oKG4saSxhKSxzW3UrMV09dFt1XS1vKzI1NiYyNTU7cmV0dXJuIHN9LGg9ZnVuY3Rpb24odCxlLHIpe2lmKHQ9PT1lJiZlPT09cilyZXR1cm4gdDt2YXIgbj1NYXRoLmFicyhlLXIpLGk9TWF0aC5hYnModC1yKSxhPU1hdGguYWJzKHQrZS1yLXIpO3JldHVybiBuPD1pJiZuPD1hP3Q6aTw9YT9lOnJ9LGw9ZnVuY3Rpb24oKXtyZXR1cm5bYSxvLHMsYyx1XX0sZj1mdW5jdGlvbih0KXt2YXIgZT10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0K01hdGguYWJzKGUpfSksMCl9KSk7cmV0dXJuIGUuaW5kZXhPZihNYXRoLm1pbi5hcHBseShudWxsLGUpKX07dC5wcm9jZXNzUE5HPWZ1bmN0aW9uKGUsaSxhLG8pe3ZhciBzLGMsdSxoLGwsZixkLHAsZyxtLHYsYix5LHcsTixMPXRoaXMuZGVjb2RlLkZMQVRFX0RFQ09ERSxBPVwiXCI7aWYodGhpcy5fX2FkZGltYWdlX18uaXNBcnJheUJ1ZmZlcihlKSYmKGU9bmV3IFVpbnQ4QXJyYXkoZSkpLHRoaXMuX19hZGRpbWFnZV9fLmlzQXJyYXlCdWZmZXJWaWV3KGUpKXtpZihlPSh1PW5ldyBLdChlKSkuaW1nRGF0YSxjPXUuYml0cyxzPXUuY29sb3JTcGFjZSxsPXUuY29sb3JzLC0xIT09WzQsNl0uaW5kZXhPZih1LmNvbG9yVHlwZSkpe2lmKDg9PT11LmJpdHMpe2c9KHA9MzI9PXUucGl4ZWxCaXRsZW5ndGg/bmV3IFVpbnQzMkFycmF5KHUuZGVjb2RlUGl4ZWxzKCkuYnVmZmVyKToxNj09dS5waXhlbEJpdGxlbmd0aD9uZXcgVWludDE2QXJyYXkodS5kZWNvZGVQaXhlbHMoKS5idWZmZXIpOm5ldyBVaW50OEFycmF5KHUuZGVjb2RlUGl4ZWxzKCkuYnVmZmVyKSkubGVuZ3RoLHY9bmV3IFVpbnQ4QXJyYXkoZyp1LmNvbG9ycyksbT1uZXcgVWludDhBcnJheShnKTt2YXIgeCxTPXUucGl4ZWxCaXRsZW5ndGgtdS5iaXRzO2Zvcih3PTAsTj0wO3c8Zzt3Kyspe2Zvcih5PXBbd10seD0wO3g8UzspdltOKytdPXk+Pj54JjI1NSx4Kz11LmJpdHM7bVt3XT15Pj4+eCYyNTV9fWlmKDE2PT09dS5iaXRzKXtnPShwPW5ldyBVaW50MzJBcnJheSh1LmRlY29kZVBpeGVscygpLmJ1ZmZlcikpLmxlbmd0aCx2PW5ldyBVaW50OEFycmF5KGcqKDMyL3UucGl4ZWxCaXRsZW5ndGgpKnUuY29sb3JzKSxtPW5ldyBVaW50OEFycmF5KGcqKDMyL3UucGl4ZWxCaXRsZW5ndGgpKSxiPXUuY29sb3JzPjEsdz0wLE49MDtmb3IodmFyIF89MDt3PGc7KXk9cFt3KytdLHZbTisrXT15Pj4+MCYyNTUsYiYmKHZbTisrXT15Pj4+MTYmMjU1LHk9cFt3KytdLHZbTisrXT15Pj4+MCYyNTUpLG1bXysrXT15Pj4+MTYmMjU1O2M9OH1vIT09dC5pbWFnZV9jb21wcmVzc2lvbi5OT05FJiZyKCk/KGU9bih2LHUud2lkdGgqdS5jb2xvcnMsdS5jb2xvcnMsbyksZD1uKG0sdS53aWR0aCwxLG8pKTooZT12LGQ9bSxMPXZvaWQgMCl9aWYoMz09PXUuY29sb3JUeXBlJiYocz10aGlzLmNvbG9yX3NwYWNlcy5JTkRFWEVELGY9dS5wYWxldHRlLHUudHJhbnNwYXJlbmN5LmluZGV4ZWQpKXt2YXIgUD11LnRyYW5zcGFyZW5jeS5pbmRleGVkLGs9MDtmb3Iodz0wLGc9UC5sZW5ndGg7dzxnOysrdylrKz1QW3ddO2lmKChrLz0yNTUpPT09Zy0xJiYtMSE9PVAuaW5kZXhPZigwKSloPVtQLmluZGV4T2YoMCldO2Vsc2UgaWYoayE9PWcpe2ZvcihwPXUuZGVjb2RlUGl4ZWxzKCksbT1uZXcgVWludDhBcnJheShwLmxlbmd0aCksdz0wLGc9cC5sZW5ndGg7dzxnO3crKyltW3ddPVBbcFt3XV07ZD1uKG0sdS53aWR0aCwxKX19dmFyIEk9ZnVuY3Rpb24oZSl7dmFyIHI7c3dpdGNoKGUpe2Nhc2UgdC5pbWFnZV9jb21wcmVzc2lvbi5GQVNUOnI9MTE7YnJlYWs7Y2FzZSB0LmltYWdlX2NvbXByZXNzaW9uLk1FRElVTTpyPTEzO2JyZWFrO2Nhc2UgdC5pbWFnZV9jb21wcmVzc2lvbi5TTE9XOnI9MTQ7YnJlYWs7ZGVmYXVsdDpyPTEyfXJldHVybiByfShvKTtyZXR1cm4gTD09PXRoaXMuZGVjb2RlLkZMQVRFX0RFQ09ERSYmKEE9XCIvUHJlZGljdG9yIFwiK0krXCIgXCIpLEErPVwiL0NvbG9ycyBcIitsK1wiIC9CaXRzUGVyQ29tcG9uZW50IFwiK2MrXCIgL0NvbHVtbnMgXCIrdS53aWR0aCwodGhpcy5fX2FkZGltYWdlX18uaXNBcnJheUJ1ZmZlcihlKXx8dGhpcy5fX2FkZGltYWdlX18uaXNBcnJheUJ1ZmZlclZpZXcoZSkpJiYoZT10aGlzLl9fYWRkaW1hZ2VfXy5hcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKGUpKSwoZCYmdGhpcy5fX2FkZGltYWdlX18uaXNBcnJheUJ1ZmZlcihkKXx8dGhpcy5fX2FkZGltYWdlX18uaXNBcnJheUJ1ZmZlclZpZXcoZCkpJiYoZD10aGlzLl9fYWRkaW1hZ2VfXy5hcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKGQpKSx7YWxpYXM6YSxkYXRhOmUsaW5kZXg6aSxmaWx0ZXI6TCxkZWNvZGVQYXJhbWV0ZXJzOkEsdHJhbnNwYXJlbmN5OmgscGFsZXR0ZTpmLHNNYXNrOmQscHJlZGljdG9yOkksd2lkdGg6dS53aWR0aCxoZWlnaHQ6dS5oZWlnaHQsYml0c1BlckNvbXBvbmVudDpjLGNvbG9yU3BhY2U6c319fX0oRS5BUEkpLGZ1bmN0aW9uKHQpe3QucHJvY2Vzc0dJRjg5QT1mdW5jdGlvbihlLHIsbixpKXt2YXIgYT1uZXcgWnQoZSksbz1hLndpZHRoLHM9YS5oZWlnaHQsYz1bXTthLmRlY29kZUFuZEJsaXRGcmFtZVJHQkEoMCxjKTt2YXIgdT17ZGF0YTpjLHdpZHRoOm8saGVpZ2h0OnN9LGg9bmV3IFF0KDEwMCkuZW5jb2RlKHUsMTAwKTtyZXR1cm4gdC5wcm9jZXNzSlBFRy5jYWxsKHRoaXMsaCxyLG4saSl9LHQucHJvY2Vzc0dJRjg3QT10LnByb2Nlc3NHSUY4OUF9KEUuQVBJKSx0ZS5wcm90b3R5cGUucGFyc2VIZWFkZXI9ZnVuY3Rpb24oKXtpZih0aGlzLmZpbGVTaXplPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLnJlc2VydmVkPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLm9mZnNldD10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5oZWFkZXJTaXplPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLndpZHRoPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLmhlaWdodD10aGlzLmRhdGF2LmdldEludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLnBsYW5lcz10aGlzLmRhdGF2LmdldFVpbnQxNih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTIsdGhpcy5iaXRQUD10aGlzLmRhdGF2LmdldFVpbnQxNih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTIsdGhpcy5jb21wcmVzcz10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5yYXdTaXplPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLmhyPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLnZyPXRoaXMuZGF0YXYuZ2V0VWludDMyKHRoaXMucG9zLCEwKSx0aGlzLnBvcys9NCx0aGlzLmNvbG9ycz10aGlzLmRhdGF2LmdldFVpbnQzMih0aGlzLnBvcywhMCksdGhpcy5wb3MrPTQsdGhpcy5pbXBvcnRhbnRDb2xvcnM9dGhpcy5kYXRhdi5nZXRVaW50MzIodGhpcy5wb3MsITApLHRoaXMucG9zKz00LDE2PT09dGhpcy5iaXRQUCYmdGhpcy5pc193aXRoX2FscGhhJiYodGhpcy5iaXRQUD0xNSksdGhpcy5iaXRQUDwxNSl7dmFyIHQ9MD09PXRoaXMuY29sb3JzPzE8PHRoaXMuYml0UFA6dGhpcy5jb2xvcnM7dGhpcy5wYWxldHRlPW5ldyBBcnJheSh0KTtmb3IodmFyIGU9MDtlPHQ7ZSsrKXt2YXIgcj10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG49dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxpPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCksYT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApO3RoaXMucGFsZXR0ZVtlXT17cmVkOmksZ3JlZW46bixibHVlOnIscXVhZDphfX19dGhpcy5oZWlnaHQ8MCYmKHRoaXMuaGVpZ2h0Kj0tMSx0aGlzLmJvdHRvbV91cD0hMSl9LHRlLnByb3RvdHlwZS5wYXJzZUJHUj1mdW5jdGlvbigpe3RoaXMucG9zPXRoaXMub2Zmc2V0O3RyeXt2YXIgdD1cImJpdFwiK3RoaXMuYml0UFAsZT10aGlzLndpZHRoKnRoaXMuaGVpZ2h0KjQ7dGhpcy5kYXRhPW5ldyBVaW50OEFycmF5KGUpLHRoaXNbdF0oKX1jYXRjaCh0KXthLmxvZyhcImJpdCBkZWNvZGUgZXJyb3I6XCIrdCl9fSx0ZS5wcm90b3R5cGUuYml0MT1mdW5jdGlvbigpe3ZhciB0LGU9TWF0aC5jZWlsKHRoaXMud2lkdGgvOCkscj1lJTQ7Zm9yKHQ9dGhpcy5oZWlnaHQtMTt0Pj0wO3QtLSl7Zm9yKHZhciBuPXRoaXMuYm90dG9tX3VwP3Q6dGhpcy5oZWlnaHQtMS10LGk9MDtpPGU7aSsrKWZvcih2YXIgYT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG89bip0aGlzLndpZHRoKjQrOCppKjQscz0wO3M8OCYmOCppK3M8dGhpcy53aWR0aDtzKyspe3ZhciBjPXRoaXMucGFsZXR0ZVthPj43LXMmMV07dGhpcy5kYXRhW28rNCpzXT1jLmJsdWUsdGhpcy5kYXRhW28rNCpzKzFdPWMuZ3JlZW4sdGhpcy5kYXRhW28rNCpzKzJdPWMucmVkLHRoaXMuZGF0YVtvKzQqcyszXT0yNTV9MCE9PXImJih0aGlzLnBvcys9NC1yKX19LHRlLnByb3RvdHlwZS5iaXQ0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PU1hdGguY2VpbCh0aGlzLndpZHRoLzIpLGU9dCU0LHI9dGhpcy5oZWlnaHQtMTtyPj0wO3ItLSl7Zm9yKHZhciBuPXRoaXMuYm90dG9tX3VwP3I6dGhpcy5oZWlnaHQtMS1yLGk9MDtpPHQ7aSsrKXt2YXIgYT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG89bip0aGlzLndpZHRoKjQrMippKjQscz1hPj40LGM9MTUmYSx1PXRoaXMucGFsZXR0ZVtzXTtpZih0aGlzLmRhdGFbb109dS5ibHVlLHRoaXMuZGF0YVtvKzFdPXUuZ3JlZW4sdGhpcy5kYXRhW28rMl09dS5yZWQsdGhpcy5kYXRhW28rM109MjU1LDIqaSsxPj10aGlzLndpZHRoKWJyZWFrO3U9dGhpcy5wYWxldHRlW2NdLHRoaXMuZGF0YVtvKzRdPXUuYmx1ZSx0aGlzLmRhdGFbbys0KzFdPXUuZ3JlZW4sdGhpcy5kYXRhW28rNCsyXT11LnJlZCx0aGlzLmRhdGFbbys0KzNdPTI1NX0wIT09ZSYmKHRoaXMucG9zKz00LWUpfX0sdGUucHJvdG90eXBlLmJpdDg9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy53aWR0aCU0LGU9dGhpcy5oZWlnaHQtMTtlPj0wO2UtLSl7Zm9yKHZhciByPXRoaXMuYm90dG9tX3VwP2U6dGhpcy5oZWlnaHQtMS1lLG49MDtuPHRoaXMud2lkdGg7bisrKXt2YXIgaT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLGE9cip0aGlzLndpZHRoKjQrNCpuO2lmKGk8dGhpcy5wYWxldHRlLmxlbmd0aCl7dmFyIG89dGhpcy5wYWxldHRlW2ldO3RoaXMuZGF0YVthXT1vLnJlZCx0aGlzLmRhdGFbYSsxXT1vLmdyZWVuLHRoaXMuZGF0YVthKzJdPW8uYmx1ZSx0aGlzLmRhdGFbYSszXT0yNTV9ZWxzZSB0aGlzLmRhdGFbYV09MjU1LHRoaXMuZGF0YVthKzFdPTI1NSx0aGlzLmRhdGFbYSsyXT0yNTUsdGhpcy5kYXRhW2ErM109MjU1fTAhPT10JiYodGhpcy5wb3MrPTQtdCl9fSx0ZS5wcm90b3R5cGUuYml0MTU9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy53aWR0aCUzLGU9cGFyc2VJbnQoXCIxMTExMVwiLDIpLHI9dGhpcy5oZWlnaHQtMTtyPj0wO3ItLSl7Zm9yKHZhciBuPXRoaXMuYm90dG9tX3VwP3I6dGhpcy5oZWlnaHQtMS1yLGk9MDtpPHRoaXMud2lkdGg7aSsrKXt2YXIgYT10aGlzLmRhdGF2LmdldFVpbnQxNih0aGlzLnBvcywhMCk7dGhpcy5wb3MrPTI7dmFyIG89KGEmZSkvZSoyNTV8MCxzPShhPj41JmUpL2UqMjU1fDAsYz0oYT4+MTAmZSkvZSoyNTV8MCx1PWE+PjE1PzI1NTowLGg9bip0aGlzLndpZHRoKjQrNCppO3RoaXMuZGF0YVtoXT1jLHRoaXMuZGF0YVtoKzFdPXMsdGhpcy5kYXRhW2grMl09byx0aGlzLmRhdGFbaCszXT11fXRoaXMucG9zKz10fX0sdGUucHJvdG90eXBlLmJpdDE2PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMud2lkdGglMyxlPXBhcnNlSW50KFwiMTExMTFcIiwyKSxyPXBhcnNlSW50KFwiMTExMTExXCIsMiksbj10aGlzLmhlaWdodC0xO24+PTA7bi0tKXtmb3IodmFyIGk9dGhpcy5ib3R0b21fdXA/bjp0aGlzLmhlaWdodC0xLW4sYT0wO2E8dGhpcy53aWR0aDthKyspe3ZhciBvPXRoaXMuZGF0YXYuZ2V0VWludDE2KHRoaXMucG9zLCEwKTt0aGlzLnBvcys9Mjt2YXIgcz0obyZlKS9lKjI1NXwwLGM9KG8+PjUmcikvcioyNTV8MCx1PShvPj4xMSkvZSoyNTV8MCxoPWkqdGhpcy53aWR0aCo0KzQqYTt0aGlzLmRhdGFbaF09dSx0aGlzLmRhdGFbaCsxXT1jLHRoaXMuZGF0YVtoKzJdPXMsdGhpcy5kYXRhW2grM109MjU1fXRoaXMucG9zKz10fX0sdGUucHJvdG90eXBlLmJpdDI0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXRoaXMuaGVpZ2h0LTE7dD49MDt0LS0pe2Zvcih2YXIgZT10aGlzLmJvdHRvbV91cD90OnRoaXMuaGVpZ2h0LTEtdCxyPTA7cjx0aGlzLndpZHRoO3IrKyl7dmFyIG49dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxpPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCksYT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG89ZSp0aGlzLndpZHRoKjQrNCpyO3RoaXMuZGF0YVtvXT1hLHRoaXMuZGF0YVtvKzFdPWksdGhpcy5kYXRhW28rMl09bix0aGlzLmRhdGFbbyszXT0yNTV9dGhpcy5wb3MrPXRoaXMud2lkdGglNH19LHRlLnByb3RvdHlwZS5iaXQzMj1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmhlaWdodC0xO3Q+PTA7dC0tKWZvcih2YXIgZT10aGlzLmJvdHRvbV91cD90OnRoaXMuaGVpZ2h0LTEtdCxyPTA7cjx0aGlzLndpZHRoO3IrKyl7dmFyIG49dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxpPXRoaXMuZGF0YXYuZ2V0VWludDgodGhpcy5wb3MrKywhMCksYT10aGlzLmRhdGF2LmdldFVpbnQ4KHRoaXMucG9zKyssITApLG89dGhpcy5kYXRhdi5nZXRVaW50OCh0aGlzLnBvcysrLCEwKSxzPWUqdGhpcy53aWR0aCo0KzQqcjt0aGlzLmRhdGFbc109YSx0aGlzLmRhdGFbcysxXT1pLHRoaXMuZGF0YVtzKzJdPW4sdGhpcy5kYXRhW3MrM109b319LHRlLnByb3RvdHlwZS5nZXREYXRhPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YX0sXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggQXJhcyBBYmJhc2lcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2VcbiAqL1xuZnVuY3Rpb24odCl7dC5wcm9jZXNzQk1QPWZ1bmN0aW9uKGUscixuLGkpe3ZhciBhPW5ldyB0ZShlLCExKSxvPWEud2lkdGgscz1hLmhlaWdodCxjPXtkYXRhOmEuZ2V0RGF0YSgpLHdpZHRoOm8saGVpZ2h0OnN9LHU9bmV3IFF0KDEwMCkuZW5jb2RlKGMsMTAwKTtyZXR1cm4gdC5wcm9jZXNzSlBFRy5jYWxsKHRoaXMsdSxyLG4saSl9fShFLkFQSSksZWUucHJvdG90eXBlLmdldERhdGE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kYXRhfSxcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOSBBcmFzIEFiYmFzaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5mdW5jdGlvbih0KXt0LnByb2Nlc3NXRUJQPWZ1bmN0aW9uKGUscixuLGkpe3ZhciBhPW5ldyBlZShlLCExKSxvPWEud2lkdGgscz1hLmhlaWdodCxjPXtkYXRhOmEuZ2V0RGF0YSgpLHdpZHRoOm8saGVpZ2h0OnN9LHU9bmV3IFF0KDEwMCkuZW5jb2RlKGMsMTAwKTtyZXR1cm4gdC5wcm9jZXNzSlBFRy5jYWxsKHRoaXMsdSxyLG4saSl9fShFLkFQSSksRS5BUEkucHJvY2Vzc1JHQkE9ZnVuY3Rpb24odCxlLHIpe2Zvcih2YXIgbj10LmRhdGEsaT1uLmxlbmd0aCxhPW5ldyBVaW50OEFycmF5KGkvNCozKSxvPW5ldyBVaW50OEFycmF5KGkvNCkscz0wLGM9MCx1PTA7dTxpO3UrPTQpe3ZhciBoPW5bdV0sbD1uW3UrMV0sZj1uW3UrMl0sZD1uW3UrM107YVtzKytdPWgsYVtzKytdPWwsYVtzKytdPWYsb1tjKytdPWR9dmFyIHA9dGhpcy5fX2FkZGltYWdlX18uYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyhhKTtyZXR1cm57YWxwaGE6dGhpcy5fX2FkZGltYWdlX18uYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyhvKSxkYXRhOnAsaW5kZXg6ZSxhbGlhczpyLGNvbG9yU3BhY2U6XCJEZXZpY2VSR0JcIixiaXRzUGVyQ29tcG9uZW50Ojgsd2lkdGg6dC53aWR0aCxoZWlnaHQ6dC5oZWlnaHR9fSxFLkFQSS5zZXRMYW5ndWFnZT1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dGhpcy5pbnRlcm5hbC5sYW5ndWFnZVNldHRpbmdzJiYodGhpcy5pbnRlcm5hbC5sYW5ndWFnZVNldHRpbmdzPXt9LHRoaXMuaW50ZXJuYWwubGFuZ3VhZ2VTZXR0aW5ncy5pc1N1YnNjcmliZWQ9ITEpLHZvaWQgMCE9PXthZjpcIkFmcmlrYWFuc1wiLHNxOlwiQWxiYW5pYW5cIixhcjpcIkFyYWJpYyAoU3RhbmRhcmQpXCIsXCJhci1EWlwiOlwiQXJhYmljIChBbGdlcmlhKVwiLFwiYXItQkhcIjpcIkFyYWJpYyAoQmFocmFpbilcIixcImFyLUVHXCI6XCJBcmFiaWMgKEVneXB0KVwiLFwiYXItSVFcIjpcIkFyYWJpYyAoSXJhcSlcIixcImFyLUpPXCI6XCJBcmFiaWMgKEpvcmRhbilcIixcImFyLUtXXCI6XCJBcmFiaWMgKEt1d2FpdClcIixcImFyLUxCXCI6XCJBcmFiaWMgKExlYmFub24pXCIsXCJhci1MWVwiOlwiQXJhYmljIChMaWJ5YSlcIixcImFyLU1BXCI6XCJBcmFiaWMgKE1vcm9jY28pXCIsXCJhci1PTVwiOlwiQXJhYmljIChPbWFuKVwiLFwiYXItUUFcIjpcIkFyYWJpYyAoUWF0YXIpXCIsXCJhci1TQVwiOlwiQXJhYmljIChTYXVkaSBBcmFiaWEpXCIsXCJhci1TWVwiOlwiQXJhYmljIChTeXJpYSlcIixcImFyLVROXCI6XCJBcmFiaWMgKFR1bmlzaWEpXCIsXCJhci1BRVwiOlwiQXJhYmljIChVLkEuRS4pXCIsXCJhci1ZRVwiOlwiQXJhYmljIChZZW1lbilcIixhbjpcIkFyYWdvbmVzZVwiLGh5OlwiQXJtZW5pYW5cIixhczpcIkFzc2FtZXNlXCIsYXN0OlwiQXN0dXJpYW5cIixhejpcIkF6ZXJiYWlqYW5pXCIsZXU6XCJCYXNxdWVcIixiZTpcIkJlbGFydXNpYW5cIixibjpcIkJlbmdhbGlcIixiczpcIkJvc25pYW5cIixicjpcIkJyZXRvblwiLGJnOlwiQnVsZ2FyaWFuXCIsbXk6XCJCdXJtZXNlXCIsY2E6XCJDYXRhbGFuXCIsY2g6XCJDaGFtb3Jyb1wiLGNlOlwiQ2hlY2hlblwiLHpoOlwiQ2hpbmVzZVwiLFwiemgtSEtcIjpcIkNoaW5lc2UgKEhvbmcgS29uZylcIixcInpoLUNOXCI6XCJDaGluZXNlIChQUkMpXCIsXCJ6aC1TR1wiOlwiQ2hpbmVzZSAoU2luZ2Fwb3JlKVwiLFwiemgtVFdcIjpcIkNoaW5lc2UgKFRhaXdhbilcIixjdjpcIkNodXZhc2hcIixjbzpcIkNvcnNpY2FuXCIsY3I6XCJDcmVlXCIsaHI6XCJDcm9hdGlhblwiLGNzOlwiQ3plY2hcIixkYTpcIkRhbmlzaFwiLG5sOlwiRHV0Y2ggKFN0YW5kYXJkKVwiLFwibmwtQkVcIjpcIkR1dGNoIChCZWxnaWFuKVwiLGVuOlwiRW5nbGlzaFwiLFwiZW4tQVVcIjpcIkVuZ2xpc2ggKEF1c3RyYWxpYSlcIixcImVuLUJaXCI6XCJFbmdsaXNoIChCZWxpemUpXCIsXCJlbi1DQVwiOlwiRW5nbGlzaCAoQ2FuYWRhKVwiLFwiZW4tSUVcIjpcIkVuZ2xpc2ggKElyZWxhbmQpXCIsXCJlbi1KTVwiOlwiRW5nbGlzaCAoSmFtYWljYSlcIixcImVuLU5aXCI6XCJFbmdsaXNoIChOZXcgWmVhbGFuZClcIixcImVuLVBIXCI6XCJFbmdsaXNoIChQaGlsaXBwaW5lcylcIixcImVuLVpBXCI6XCJFbmdsaXNoIChTb3V0aCBBZnJpY2EpXCIsXCJlbi1UVFwiOlwiRW5nbGlzaCAoVHJpbmlkYWQgJiBUb2JhZ28pXCIsXCJlbi1HQlwiOlwiRW5nbGlzaCAoVW5pdGVkIEtpbmdkb20pXCIsXCJlbi1VU1wiOlwiRW5nbGlzaCAoVW5pdGVkIFN0YXRlcylcIixcImVuLVpXXCI6XCJFbmdsaXNoIChaaW1iYWJ3ZSlcIixlbzpcIkVzcGVyYW50b1wiLGV0OlwiRXN0b25pYW5cIixmbzpcIkZhZXJvZXNlXCIsZmo6XCJGaWppYW5cIixmaTpcIkZpbm5pc2hcIixmcjpcIkZyZW5jaCAoU3RhbmRhcmQpXCIsXCJmci1CRVwiOlwiRnJlbmNoIChCZWxnaXVtKVwiLFwiZnItQ0FcIjpcIkZyZW5jaCAoQ2FuYWRhKVwiLFwiZnItRlJcIjpcIkZyZW5jaCAoRnJhbmNlKVwiLFwiZnItTFVcIjpcIkZyZW5jaCAoTHV4ZW1ib3VyZylcIixcImZyLU1DXCI6XCJGcmVuY2ggKE1vbmFjbylcIixcImZyLUNIXCI6XCJGcmVuY2ggKFN3aXR6ZXJsYW5kKVwiLGZ5OlwiRnJpc2lhblwiLGZ1cjpcIkZyaXVsaWFuXCIsZ2Q6XCJHYWVsaWMgKFNjb3RzKVwiLFwiZ2QtSUVcIjpcIkdhZWxpYyAoSXJpc2gpXCIsZ2w6XCJHYWxhY2lhblwiLGthOlwiR2VvcmdpYW5cIixkZTpcIkdlcm1hbiAoU3RhbmRhcmQpXCIsXCJkZS1BVFwiOlwiR2VybWFuIChBdXN0cmlhKVwiLFwiZGUtREVcIjpcIkdlcm1hbiAoR2VybWFueSlcIixcImRlLUxJXCI6XCJHZXJtYW4gKExpZWNodGVuc3RlaW4pXCIsXCJkZS1MVVwiOlwiR2VybWFuIChMdXhlbWJvdXJnKVwiLFwiZGUtQ0hcIjpcIkdlcm1hbiAoU3dpdHplcmxhbmQpXCIsZWw6XCJHcmVla1wiLGd1OlwiR3VqdXJhdGlcIixodDpcIkhhaXRpYW5cIixoZTpcIkhlYnJld1wiLGhpOlwiSGluZGlcIixodTpcIkh1bmdhcmlhblwiLGlzOlwiSWNlbGFuZGljXCIsaWQ6XCJJbmRvbmVzaWFuXCIsaXU6XCJJbnVrdGl0dXRcIixnYTpcIklyaXNoXCIsaXQ6XCJJdGFsaWFuIChTdGFuZGFyZClcIixcIml0LUNIXCI6XCJJdGFsaWFuIChTd2l0emVybGFuZClcIixqYTpcIkphcGFuZXNlXCIsa246XCJLYW5uYWRhXCIsa3M6XCJLYXNobWlyaVwiLGtrOlwiS2F6YWtoXCIsa206XCJLaG1lclwiLGt5OlwiS2lyZ2hpelwiLHRsaDpcIktsaW5nb25cIixrbzpcIktvcmVhblwiLFwia28tS1BcIjpcIktvcmVhbiAoTm9ydGggS29yZWEpXCIsXCJrby1LUlwiOlwiS29yZWFuIChTb3V0aCBLb3JlYSlcIixsYTpcIkxhdGluXCIsbHY6XCJMYXR2aWFuXCIsbHQ6XCJMaXRodWFuaWFuXCIsbGI6XCJMdXhlbWJvdXJnaXNoXCIsbWs6XCJOb3J0aCBNYWNlZG9uaWFcIixtczpcIk1hbGF5XCIsbWw6XCJNYWxheWFsYW1cIixtdDpcIk1hbHRlc2VcIixtaTpcIk1hb3JpXCIsbXI6XCJNYXJhdGhpXCIsbW86XCJNb2xkYXZpYW5cIixudjpcIk5hdmFqb1wiLG5nOlwiTmRvbmdhXCIsbmU6XCJOZXBhbGlcIixubzpcIk5vcndlZ2lhblwiLG5iOlwiTm9yd2VnaWFuIChCb2ttYWwpXCIsbm46XCJOb3J3ZWdpYW4gKE55bm9yc2spXCIsb2M6XCJPY2NpdGFuXCIsb3I6XCJPcml5YVwiLG9tOlwiT3JvbW9cIixmYTpcIlBlcnNpYW5cIixcImZhLUlSXCI6XCJQZXJzaWFuL0lyYW5cIixwbDpcIlBvbGlzaFwiLHB0OlwiUG9ydHVndWVzZVwiLFwicHQtQlJcIjpcIlBvcnR1Z3Vlc2UgKEJyYXppbClcIixwYTpcIlB1bmphYmlcIixcInBhLUlOXCI6XCJQdW5qYWJpIChJbmRpYSlcIixcInBhLVBLXCI6XCJQdW5qYWJpIChQYWtpc3RhbilcIixxdTpcIlF1ZWNodWFcIixybTpcIlJoYWV0by1Sb21hbmljXCIscm86XCJSb21hbmlhblwiLFwicm8tTU9cIjpcIlJvbWFuaWFuIChNb2xkYXZpYSlcIixydTpcIlJ1c3NpYW5cIixcInJ1LU1PXCI6XCJSdXNzaWFuIChNb2xkYXZpYSlcIixzejpcIlNhbWkgKExhcHBpc2gpXCIsc2c6XCJTYW5nb1wiLHNhOlwiU2Fuc2tyaXRcIixzYzpcIlNhcmRpbmlhblwiLHNkOlwiU2luZGhpXCIsc2k6XCJTaW5naGFsZXNlXCIsc3I6XCJTZXJiaWFuXCIsc2s6XCJTbG92YWtcIixzbDpcIlNsb3ZlbmlhblwiLHNvOlwiU29tYW5pXCIsc2I6XCJTb3JiaWFuXCIsZXM6XCJTcGFuaXNoXCIsXCJlcy1BUlwiOlwiU3BhbmlzaCAoQXJnZW50aW5hKVwiLFwiZXMtQk9cIjpcIlNwYW5pc2ggKEJvbGl2aWEpXCIsXCJlcy1DTFwiOlwiU3BhbmlzaCAoQ2hpbGUpXCIsXCJlcy1DT1wiOlwiU3BhbmlzaCAoQ29sb21iaWEpXCIsXCJlcy1DUlwiOlwiU3BhbmlzaCAoQ29zdGEgUmljYSlcIixcImVzLURPXCI6XCJTcGFuaXNoIChEb21pbmljYW4gUmVwdWJsaWMpXCIsXCJlcy1FQ1wiOlwiU3BhbmlzaCAoRWN1YWRvcilcIixcImVzLVNWXCI6XCJTcGFuaXNoIChFbCBTYWx2YWRvcilcIixcImVzLUdUXCI6XCJTcGFuaXNoIChHdWF0ZW1hbGEpXCIsXCJlcy1ITlwiOlwiU3BhbmlzaCAoSG9uZHVyYXMpXCIsXCJlcy1NWFwiOlwiU3BhbmlzaCAoTWV4aWNvKVwiLFwiZXMtTklcIjpcIlNwYW5pc2ggKE5pY2FyYWd1YSlcIixcImVzLVBBXCI6XCJTcGFuaXNoIChQYW5hbWEpXCIsXCJlcy1QWVwiOlwiU3BhbmlzaCAoUGFyYWd1YXkpXCIsXCJlcy1QRVwiOlwiU3BhbmlzaCAoUGVydSlcIixcImVzLVBSXCI6XCJTcGFuaXNoIChQdWVydG8gUmljbylcIixcImVzLUVTXCI6XCJTcGFuaXNoIChTcGFpbilcIixcImVzLVVZXCI6XCJTcGFuaXNoIChVcnVndWF5KVwiLFwiZXMtVkVcIjpcIlNwYW5pc2ggKFZlbmV6dWVsYSlcIixzeDpcIlN1dHVcIixzdzpcIlN3YWhpbGlcIixzdjpcIlN3ZWRpc2hcIixcInN2LUZJXCI6XCJTd2VkaXNoIChGaW5sYW5kKVwiLFwic3YtU1ZcIjpcIlN3ZWRpc2ggKFN3ZWRlbilcIix0YTpcIlRhbWlsXCIsdHQ6XCJUYXRhclwiLHRlOlwiVGVsdWdhXCIsdGg6XCJUaGFpXCIsdGlnOlwiVGlncmVcIix0czpcIlRzb25nYVwiLHRuOlwiVHN3YW5hXCIsdHI6XCJUdXJraXNoXCIsdGs6XCJUdXJrbWVuXCIsdWs6XCJVa3JhaW5pYW5cIixoc2I6XCJVcHBlciBTb3JiaWFuXCIsdXI6XCJVcmR1XCIsdmU6XCJWZW5kYVwiLHZpOlwiVmlldG5hbWVzZVwiLHZvOlwiVm9sYXB1a1wiLHdhOlwiV2FsbG9vblwiLGN5OlwiV2Vsc2hcIix4aDpcIlhob3NhXCIsamk6XCJZaWRkaXNoXCIsenU6XCJadWx1XCJ9W3RdJiYodGhpcy5pbnRlcm5hbC5sYW5ndWFnZVNldHRpbmdzLmxhbmd1YWdlQ29kZT10LCExPT09dGhpcy5pbnRlcm5hbC5sYW5ndWFnZVNldHRpbmdzLmlzU3Vic2NyaWJlZCYmKHRoaXMuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcInB1dENhdGFsb2dcIiwoZnVuY3Rpb24oKXt0aGlzLmludGVybmFsLndyaXRlKFwiL0xhbmcgKFwiK3RoaXMuaW50ZXJuYWwubGFuZ3VhZ2VTZXR0aW5ncy5sYW5ndWFnZUNvZGUrXCIpXCIpfSkpLHRoaXMuaW50ZXJuYWwubGFuZ3VhZ2VTZXR0aW5ncy5pc1N1YnNjcmliZWQ9ITApKSx0aGlzfSxWdD1FLkFQSSxHdD1WdC5nZXRDaGFyV2lkdGhzQXJyYXk9ZnVuY3Rpb24oZSxyKXt2YXIgbixpLGE9KHI9cnx8e30pLmZvbnR8fHRoaXMuaW50ZXJuYWwuZ2V0Rm9udCgpLG89ci5mb250U2l6ZXx8dGhpcy5pbnRlcm5hbC5nZXRGb250U2l6ZSgpLHM9ci5jaGFyU3BhY2V8fHRoaXMuaW50ZXJuYWwuZ2V0Q2hhclNwYWNlKCksYz1yLndpZHRocz9yLndpZHRoczphLm1ldGFkYXRhLlVuaWNvZGUud2lkdGhzLHU9Yy5mb2Y/Yy5mb2Y6MSxoPXIua2VybmluZz9yLmtlcm5pbmc6YS5tZXRhZGF0YS5Vbmljb2RlLmtlcm5pbmcsbD1oLmZvZj9oLmZvZjoxLGY9ITEhPT1yLmRvS2VybmluZyxkPTAscD1lLmxlbmd0aCxnPTAsbT1jWzBdfHx1LHY9W107Zm9yKG49MDtuPHA7bisrKWk9ZS5jaGFyQ29kZUF0KG4pLFwiZnVuY3Rpb25cIj09dHlwZW9mIGEubWV0YWRhdGEud2lkdGhPZlN0cmluZz92LnB1c2goKGEubWV0YWRhdGEud2lkdGhPZkdseXBoKGEubWV0YWRhdGEuY2hhcmFjdGVyVG9HbHlwaChpKSkrcyooMWUzL28pfHwwKS8xZTMpOihkPWYmJlwib2JqZWN0XCI9PT10KGhbaV0pJiYhaXNOYU4ocGFyc2VJbnQoaFtpXVtnXSwxMCkpP2hbaV1bZ10vbDowLHYucHVzaCgoY1tpXXx8bSkvdStkKSksZz1pO3JldHVybiB2fSxZdD1WdC5nZXRTdHJpbmdVbml0V2lkdGg9ZnVuY3Rpb24odCxlKXt2YXIgcj0oZT1lfHx7fSkuZm9udFNpemV8fHRoaXMuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKSxuPWUuZm9udHx8dGhpcy5pbnRlcm5hbC5nZXRGb250KCksaT1lLmNoYXJTcGFjZXx8dGhpcy5pbnRlcm5hbC5nZXRDaGFyU3BhY2UoKTtyZXR1cm4gVnQucHJvY2Vzc0FyYWJpYyYmKHQ9VnQucHJvY2Vzc0FyYWJpYyh0KSksXCJmdW5jdGlvblwiPT10eXBlb2Ygbi5tZXRhZGF0YS53aWR0aE9mU3RyaW5nP24ubWV0YWRhdGEud2lkdGhPZlN0cmluZyh0LHIsaSkvcjpHdC5hcHBseSh0aGlzLGFyZ3VtZW50cykucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0K2V9KSwwKX0sSnQ9ZnVuY3Rpb24odCxlLHIsbil7Zm9yKHZhciBpPVtdLGE9MCxvPXQubGVuZ3RoLHM9MDthIT09byYmcytlW2FdPHI7KXMrPWVbYV0sYSsrO2kucHVzaCh0LnNsaWNlKDAsYSkpO3ZhciBjPWE7Zm9yKHM9MDthIT09bzspcytlW2FdPm4mJihpLnB1c2godC5zbGljZShjLGEpKSxzPTAsYz1hKSxzKz1lW2FdLGErKztyZXR1cm4gYyE9PWEmJmkucHVzaCh0LnNsaWNlKGMsYSkpLGl9LFh0PWZ1bmN0aW9uKHQsZSxyKXtyfHwocj17fSk7dmFyIG4saSxhLG8scyxjLHUsaD1bXSxsPVtoXSxmPXIudGV4dEluZGVudHx8MCxkPTAscD0wLGc9dC5zcGxpdChcIiBcIiksbT1HdC5hcHBseSh0aGlzLFtcIiBcIixyXSlbMF07aWYoYz0tMT09PXIubGluZUluZGVudD9nWzBdLmxlbmd0aCsyOnIubGluZUluZGVudHx8MCl7dmFyIHY9QXJyYXkoYykuam9pbihcIiBcIiksYj1bXTtnLm1hcCgoZnVuY3Rpb24odCl7KHQ9dC5zcGxpdCgvXFxzKlxcbi8pKS5sZW5ndGg+MT9iPWIuY29uY2F0KHQubWFwKChmdW5jdGlvbih0LGUpe3JldHVybihlJiZ0Lmxlbmd0aD9cIlxcblwiOlwiXCIpK3R9KSkpOmIucHVzaCh0WzBdKX0pKSxnPWIsYz1ZdC5hcHBseSh0aGlzLFt2LHJdKX1mb3IoYT0wLG89Zy5sZW5ndGg7YTxvO2ErKyl7dmFyIHk9MDtpZihuPWdbYV0sYyYmXCJcXG5cIj09blswXSYmKG49bi5zdWJzdHIoMSkseT0xKSxmK2QrKHA9KGk9R3QuYXBwbHkodGhpcyxbbixyXSkpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtlfSksMCkpPmV8fHkpe2lmKHA+ZSl7Zm9yKHM9SnQuYXBwbHkodGhpcyxbbixpLGUtKGYrZCksZV0pLGgucHVzaChzLnNoaWZ0KCkpLGg9W3MucG9wKCldO3MubGVuZ3RoOylsLnB1c2goW3Muc2hpZnQoKV0pO3A9aS5zbGljZShuLmxlbmd0aC0oaFswXT9oWzBdLmxlbmd0aDowKSkucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0K2V9KSwwKX1lbHNlIGg9W25dO2wucHVzaChoKSxmPXArYyxkPW19ZWxzZSBoLnB1c2gobiksZis9ZCtwLGQ9bX1yZXR1cm4gdT1jP2Z1bmN0aW9uKHQsZSl7cmV0dXJuKGU/djpcIlwiKSt0LmpvaW4oXCIgXCIpfTpmdW5jdGlvbih0KXtyZXR1cm4gdC5qb2luKFwiIFwiKX0sbC5tYXAodSl9LFZ0LnNwbGl0VGV4dFRvU2l6ZT1mdW5jdGlvbih0LGUscil7dmFyIG4saT0ocj1yfHx7fSkuZm9udFNpemV8fHRoaXMuaW50ZXJuYWwuZ2V0Rm9udFNpemUoKSxhPWZ1bmN0aW9uKHQpe2lmKHQud2lkdGhzJiZ0Lmtlcm5pbmcpcmV0dXJue3dpZHRoczp0LndpZHRocyxrZXJuaW5nOnQua2VybmluZ307dmFyIGU9dGhpcy5pbnRlcm5hbC5nZXRGb250KHQuZm9udE5hbWUsdC5mb250U3R5bGUpO3JldHVybiBlLm1ldGFkYXRhLlVuaWNvZGU/e3dpZHRoczplLm1ldGFkYXRhLlVuaWNvZGUud2lkdGhzfHx7MDoxfSxrZXJuaW5nOmUubWV0YWRhdGEuVW5pY29kZS5rZXJuaW5nfHx7fX06e2ZvbnQ6ZS5tZXRhZGF0YSxmb250U2l6ZTp0aGlzLmludGVybmFsLmdldEZvbnRTaXplKCksY2hhclNwYWNlOnRoaXMuaW50ZXJuYWwuZ2V0Q2hhclNwYWNlKCl9fS5jYWxsKHRoaXMscik7bj1BcnJheS5pc0FycmF5KHQpP3Q6U3RyaW5nKHQpLnNwbGl0KC9cXHI/XFxuLyk7dmFyIG89MSp0aGlzLmludGVybmFsLnNjYWxlRmFjdG9yKmUvaTthLnRleHRJbmRlbnQ9ci50ZXh0SW5kZW50PzEqci50ZXh0SW5kZW50KnRoaXMuaW50ZXJuYWwuc2NhbGVGYWN0b3IvaTowLGEubGluZUluZGVudD1yLmxpbmVJbmRlbnQ7dmFyIHMsYyx1PVtdO2ZvcihzPTAsYz1uLmxlbmd0aDtzPGM7cysrKXU9dS5jb25jYXQoWHQuYXBwbHkodGhpcyxbbltzXSxvLGFdKSk7cmV0dXJuIHV9LGZ1bmN0aW9uKGUpe2UuX19mb250bWV0cmljc19fPWUuX19mb250bWV0cmljc19ffHx7fTtmb3IodmFyIHI9XCJrbG1ub3BxcnN0dXZ3eHl6XCIsbj17fSxpPXt9LGE9MDthPHIubGVuZ3RoO2ErKyluW3JbYV1dPVwiMDEyMzQ1Njc4OWFiY2RlZlwiW2FdLGlbXCIwMTIzNDU2Nzg5YWJjZGVmXCJbYV1dPXJbYV07dmFyIG89ZnVuY3Rpb24odCl7cmV0dXJuXCIweFwiK3BhcnNlSW50KHQsMTApLnRvU3RyaW5nKDE2KX0scz1lLl9fZm9udG1ldHJpY3NfXy5jb21wcmVzcz1mdW5jdGlvbihlKXt2YXIgcixuLGEsYyx1PVtcIntcIl07Zm9yKHZhciBoIGluIGUpe2lmKHI9ZVtoXSxpc05hTihwYXJzZUludChoLDEwKSk/bj1cIidcIitoK1wiJ1wiOihoPXBhcnNlSW50KGgsMTApLG49KG49byhoKS5zbGljZSgyKSkuc2xpY2UoMCwtMSkraVtuLnNsaWNlKC0xKV0pLFwibnVtYmVyXCI9PXR5cGVvZiByKXI8MD8oYT1vKHIpLnNsaWNlKDMpLGM9XCItXCIpOihhPW8ocikuc2xpY2UoMiksYz1cIlwiKSxhPWMrYS5zbGljZSgwLC0xKStpW2Euc2xpY2UoLTEpXTtlbHNle2lmKFwib2JqZWN0XCIhPT10KHIpKXRocm93IG5ldyBFcnJvcihcIkRvbid0IGtub3cgd2hhdCB0byBkbyB3aXRoIHZhbHVlIHR5cGUgXCIrdChyKStcIi5cIik7YT1zKHIpfXUucHVzaChuK2EpfXJldHVybiB1LnB1c2goXCJ9XCIpLHUuam9pbihcIlwiKX0sYz1lLl9fZm9udG1ldHJpY3NfXy51bmNvbXByZXNzPWZ1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYXJndW1lbnQgcGFzc2VkIHRvIHVuY29tcHJlc3MuXCIpO2Zvcih2YXIgZSxyLGksYSxvPXt9LHM9MSxjPW8sdT1bXSxoPVwiXCIsbD1cIlwiLGY9dC5sZW5ndGgtMSxkPTE7ZDxmO2QrPTEpXCInXCI9PShhPXRbZF0pP2U/KGk9ZS5qb2luKFwiXCIpLGU9dm9pZCAwKTplPVtdOmU/ZS5wdXNoKGEpOlwie1wiPT1hPyh1LnB1c2goW2MsaV0pLGM9e30saT12b2lkIDApOlwifVwiPT1hPygocj11LnBvcCgpKVswXVtyWzFdXT1jLGk9dm9pZCAwLGM9clswXSk6XCItXCI9PWE/cz0tMTp2b2lkIDA9PT1pP24uaGFzT3duUHJvcGVydHkoYSk/KGgrPW5bYV0saT1wYXJzZUludChoLDE2KSpzLHM9MSxoPVwiXCIpOmgrPWE6bi5oYXNPd25Qcm9wZXJ0eShhKT8obCs9blthXSxjW2ldPXBhcnNlSW50KGwsMTYpKnMscz0xLGk9dm9pZCAwLGw9XCJcIik6bCs9YTtyZXR1cm4gb30sdT17Y29kZVBhZ2VzOltcIldpbkFuc2lFbmNvZGluZ1wiXSxXaW5BbnNpRW5jb2Rpbmc6YyhcInsxOW04bjIwMW45cTIwMW85cjIwMXM5bDIwMXQ5bTIwMXU4bTIwMXc5bjIwMXg5bzIwMXk4bzIwMms4cTIwMmw4cjIwMm05cDIwMnE4cDIwYXc4azIwM2s4dDIwM3Q4djIwM3U5djJjcThzMjEybTl0MTVtOHcxNW45dzJkdzlzMTZrOHUxNmw5dTE3czl6MTd4OHkxN3k5eX1cIil9LGg9e1VuaWNvZGU6e0NvdXJpZXI6dSxcIkNvdXJpZXItQm9sZFwiOnUsXCJDb3VyaWVyLUJvbGRPYmxpcXVlXCI6dSxcIkNvdXJpZXItT2JsaXF1ZVwiOnUsSGVsdmV0aWNhOnUsXCJIZWx2ZXRpY2EtQm9sZFwiOnUsXCJIZWx2ZXRpY2EtQm9sZE9ibGlxdWVcIjp1LFwiSGVsdmV0aWNhLU9ibGlxdWVcIjp1LFwiVGltZXMtUm9tYW5cIjp1LFwiVGltZXMtQm9sZFwiOnUsXCJUaW1lcy1Cb2xkSXRhbGljXCI6dSxcIlRpbWVzLUl0YWxpY1wiOnV9fSxsPXtVbmljb2RlOntcIkNvdXJpZXItT2JsaXF1ZVwiOmMoXCJ7J3dpZHRocyd7azN3J2ZvZic2b30na2VybmluZyd7J2ZvZictNm99fVwiKSxcIlRpbWVzLUJvbGRJdGFsaWNcIjpjKFwieyd3aWR0aHMne2szbzJxNHljeDJyMjAxbjNtMjAxbzZvMjAxczJsMjAxdDJsMjAxdTJsMjAxdzNtMjAxeDNtMjAxeTNtMmsxdDJsMnIyMDJtMm4ybjNtMm8zbTJwNW4yMDJxNm8ycjF3MnMybDJ0MmwydTNtMnYzdDJ3MXQyeDJsMnkxdDJ6MXczazNtM2wzbTNtM20zbjNtM28zbTNwM20zcTNtM3IzbTNzM20yMDN0MmwyMDN1MmwzdjJsM3czdDN4M3QzeTN0M3ozbTRrNW40bDRtNG00bTRuNG00bzRzNHA0bTRxNG00cjRzNHM0eTR0MnI0dTNtNHY0bTR3M3g0eDV0NHk0czR6NHM1azN4NWw0czVtNG01bjNyNW8zeDVwNHM1cTRtNXI1dDVzNG01dDN4NXUzeDV2Mmw1dzF3NXgybDV5M3Q1ejNtNmsybDZsM202bTNtNm4ydzZvM202cDJ3NnEybDZyM202czNyNnQxdzZ1MXc2djNtNncxdzZ4NHk2eTNyNnozbTdrM203bDNtN20ycjduMnI3bzF3N3AzcjdxMnc3cjRtN3MzbTd0Mnc3dTJyN3Yybjd3MXE3eDJuN3kzdDIwMmwzbWNsNG1hbDJyYW0zbWFuM21hbzNtYXAzbWFyM21hczJsYXQ0dWF1MXVhdjNtYXczd2F5NHVhejJsYmsyc2JsM3QnZm9mJzZvYm8ybGJwM3RicTNtYnIxdGJzMmxidTF5YnYzbWJ6M21jazRtMjAyazNtY200bWNuNG1jbzRtY3A0bWNxNXljcjRtY3M0bWN0NG1jdTRtY3Y0bWN3MnIybTNyY3kycmN6MnJkbDRzZG00c2RuNHNkbzRzZHA0c2RxNHNkczRzZHQ0c2R1NHNkdjRzZHc0c2R6M21lazNtZWwzbWVtM21lbjNtZW8zbWVwM21lcTRzZXIyd2VzMndldDJ3ZXUyd2V2MndldzF3ZXgxd2V5MXdlejF3ZmwzcmZtM21mbjNtZm8zbWZwM21mcTNtZnIzdGZzM21mdDNyZnUzcmZ2M3JmdzNyZnoydzIwM2s2bzIxMm02bzJkdzJsMmNxMmwzdDNtM3UybDE3czN4MTltM219J2tlcm5pbmcne2NsezRxdTVrdDVxdDVyczE3c3M1dHN9MjAxc3syMDFzc30yMDF0e2NrczRsc2Ntc2Nuc2Nvc2Nwc2NsczJ3dTJ5dTIwMXRzfTIwMXh7Mnd1Mnl1fTJrezIwMXRzfTJ3ezRxeDVreDVvdTVxeDVyczE3c3U1dHV9Mnh7MTdzdTV0dTVvdX0yeXs0cXg1a3g1b3U1cXg1cnMxN3NzNXRzfSdmb2YnLTZvZm57MTdzdzV0dzVvdTVxdzVyc303dHtja3NjbHNjbXNjbnNjb3NjcHM0bHN9M3V7MTdzdTV0dTVvczVxc30zdnsxN3N1NXR1NW9zNXFzfTdwezE3c3U1dHV9Y2t7NHF1NWt0NXF0NXJzMTdzczV0c300bHs0cXU1a3Q1cXQ1cnMxN3NzNXRzfWNtezRxdTVrdDVxdDVyczE3c3M1dHN9Y257NHF1NWt0NXF0NXJzMTdzczV0c31jb3s0cXU1a3Q1cXQ1cnMxN3NzNXRzfWNwezRxdTVrdDVxdDVyczE3c3M1dHN9Nmx7NHF1NW91NXF3NXJ0MTdzdTV0dX01cXtja3VjbHVjbXVjbnVjb3VjcHU0bHV9NXJ7Y2t1Y2x1Y211Y251Y291Y3B1NGx1fTdxe2Nrc2Nsc2Ntc2Nuc2Nvc2NwczRsc302cHs0cXU1b3U1cXc1cnQxN3N3NXR3fWVrezRxdTVvdTVxdzVydDE3c3U1dHV9ZWx7NHF1NW91NXF3NXJ0MTdzdTV0dX1lbXs0cXU1b3U1cXc1cnQxN3N1NXR1fWVuezRxdTVvdTVxdzVydDE3c3U1dHV9ZW97NHF1NW91NXF3NXJ0MTdzdTV0dX1lcHs0cXU1b3U1cXc1cnQxN3N1NXR1fWVzezE3c3M1dHM1cXM0cXV9ZXR7NHF1NW91NXF3NXJ0MTdzdzV0d31ldXs0cXU1b3U1cXc1cnQxN3NzNXRzfWV2ezE3c3M1dHM1cXM0cXV9Nnp7MTdzdzV0dzVvdTVxdzVyc31mbXsxN3N3NXR3NW91NXF3NXJzfTduezIwMXRzfWZvezE3c3c1dHc1b3U1cXc1cnN9ZnB7MTdzdzV0dzVvdTVxdzVyc31mcXsxN3N3NXR3NW91NXF3NXJzfTdye2Nrc2Nsc2Ntc2Nuc2Nvc2NwczRsc31mc3sxN3N3NXR3NW91NXF3NXJzfWZ0ezE3c3U1dHV9ZnV7MTdzdTV0dX1mdnsxN3N1NXR1fWZ3ezE3c3U1dHV9Znp7Y2tzY2xzY21zY25zY29zY3BzNGxzfX19XCIpLFwiSGVsdmV0aWNhLUJvbGRcIjpjKFwieyd3aWR0aHMne2szczJxNHNjeDF3MjAxbjNyMjAxbzZvMjAxczF3MjAxdDF3MjAxdTF3MjAxdzNtMjAxeDNtMjAxeTNtMmsxdzJsMmwyMDJtMm4ybjNyMm8zcjJwNXQyMDJxNm8ycjFzMnMybDJ0MmwydTJyMnYzdTJ3MXcyeDJsMnkxdzJ6MXczazNyM2wzcjNtM3IzbjNyM28zcjNwM3IzcTNyM3IzcjNzM3IyMDN0MmwyMDN1MmwzdjJsM3czdTN4M3UzeTN1M3ozeDRrNmw0bDRzNG00czRuNHM0bzRzNHA0bTRxM3g0cjR5NHM0czR0MXc0dTNyNHY0czR3M3g0eDVuNHk0czR6NHk1azRtNWw0eTVtNHM1bjRtNW8zeDVwNHM1cTRtNXI1eTVzNG01dDRtNXUzeDV2Mmw1dzF3NXgybDV5M3U1ejNyNmsybDZsM3I2bTN4Nm4zcjZvM3g2cDNyNnEybDZyM3g2czN4NnQxdzZ1MXc2djNyNncxdzZ4NXQ2eTN4NnozeDdrM3g3bDN4N20ycjduM3I3bzJsN3AzeDdxM3I3cjR5N3Mzcjd0M3I3dTNtN3Yycjd3MXc3eDJyN3kzdTIwMmwzcmNsNHNhbDJsYW0zcmFuM3JhbzNyYXAzcmFyM3JhczJsYXQ0dGF1MnBhdjNyYXczdWF5NHRhejJsYmsyc2JsM3UnZm9mJzZvYm8ybGJwM3hicTNyYnIxd2JzMmxidTJvYnYzcmJ6M3hjazRzMjAyazNyY200c2NuNHNjbzRzY3A0c2NxNm9jcjRzY3M0bWN0NG1jdTRtY3Y0bWN3MXcybTJ6Y3kxd2N6MXdkbDRzZG00eWRuNHlkbzR5ZHA0eWRxNHlkczR5ZHQ0c2R1NHNkdjRzZHc0c2R6M3hlazNyZWwzcmVtM3JlbjNyZW8zcmVwM3JlcTV0ZXIzcmVzM3JldDNyZXUzcmV2M3JldzF3ZXgxd2V5MXdlejF3ZmwzeGZtM3hmbjN4Zm8zeGZwM3hmcTN4ZnIzdWZzM3hmdDN4ZnUzeGZ2M3hmdzN4ZnozcjIwM2s2bzIxMm02bzJkdzJsMmNxMmwzdDNyM3UybDE3czRtMTltM3J9J2tlcm5pbmcne2NsezRxczVrdTVvdDVxczE3c3Y1dHZ9MjAxdHsyd3c0d3kyeXd9MjAxd3sya3N9MjAxeHsyd3c0d3kyeXd9Mmt7MjAxdHMyMDF4c30yd3s3cXM0cXU1a3c1b3M1cXc1cnMxN3N1NXR1N3RzZnpzfTJ4ezVvdzVxc30yeXs3cXM0cXU1a3c1b3M1cXc1cnMxN3N1NXR1N3RzZnpzfSdmb2YnLTZvN3B7MTdzdTV0dTVvdH1ja3s0cXM1a3U1b3Q1cXMxN3N2NXR2fTRsezRxczVrdTVvdDVxczE3c3Y1dHZ9Y217NHFzNWt1NW90NXFzMTdzdjV0dn1jbns0cXM1a3U1b3Q1cXMxN3N2NXR2fWNvezRxczVrdTVvdDVxczE3c3Y1dHZ9Y3B7NHFzNWt1NW90NXFzMTdzdjV0dn02bHsxN3N0NXR0NW9zfTE3c3sya3djbHZjbXZjbnZjb3ZjcHY0bHY0d3dja3Z9NW97Mmt1Y2x0Y210Y250Y290Y3B0NGx0NHd0Y2t0fTVxezJrc2Nsc2Ntc2Nuc2Nvc2NwczRsczR3dmNrc301cnsya3M0d3N9NXR7Mmt3Y2x2Y212Y252Y292Y3B2NGx2NHd3Y2t2fWVvezE3c3Q1dHQ1b3N9ZnV7MTdzdTV0dTVvdH02cHsxN3NzNXRzfWVrezE3c3Q1dHQ1b3N9ZWx7MTdzdDV0dDVvc31lbXsxN3N0NXR0NW9zfWVuezE3c3Q1dHQ1b3N9Nm97MjAxdHN9ZXB7MTdzdDV0dDVvc31lc3sxN3NzNXRzfWV0ezE3c3M1dHN9ZXV7MTdzczV0c31ldnsxN3NzNXRzfTZ6ezE3c3U1dHU1b3M1cXR9Zm17MTdzdTV0dTVvczVxdH1mbnsxN3N1NXR1NW9zNXF0fWZvezE3c3U1dHU1b3M1cXR9ZnB7MTdzdTV0dTVvczVxdH1mcXsxN3N1NXR1NW9zNXF0fWZzezE3c3U1dHU1b3M1cXR9ZnR7MTdzdTV0dTVvdH03bXs1b3N9ZnZ7MTdzdTV0dTVvdH1md3sxN3N1NXR1NW90fX19XCIpLENvdXJpZXI6YyhcInsnd2lkdGhzJ3trM3cnZm9mJzZvfSdrZXJuaW5nJ3snZm9mJy02b319XCIpLFwiQ291cmllci1Cb2xkT2JsaXF1ZVwiOmMoXCJ7J3dpZHRocyd7azN3J2ZvZic2b30na2VybmluZyd7J2ZvZictNm99fVwiKSxcIlRpbWVzLUJvbGRcIjpjKFwieyd3aWR0aHMne2szcTJxNW5jeDJyMjAxbjNtMjAxbzZvMjAxczJsMjAxdDJsMjAxdTJsMjAxdzNtMjAxeDNtMjAxeTNtMmsxdDJsMmwyMDJtMm4ybjNtMm8zbTJwNm8yMDJxNm8ycjF3MnMybDJ0MmwydTNtMnYzdDJ3MXQyeDJsMnkxdDJ6MXczazNtM2wzbTNtM20zbjNtM28zbTNwM20zcTNtM3IzbTNzM20yMDN0MmwyMDN1MmwzdjJsM3czdDN4M3QzeTN0M3ozbTRrNXg0bDRzNG00bTRuNHM0bzRzNHA0bTRxM3g0cjR5NHM0eTR0MnI0dTNtNHY0eTR3NG00eDV5NHk0czR6NHk1azN4NWw0eTVtNHM1bjNyNW80bTVwNHM1cTRzNXI2bzVzNHM1dDRzNXU0bTV2Mmw1dzF3NXgybDV5M3U1ejNtNmsybDZsM202bTNyNm4ydzZvM3I2cDJ3NnEybDZyM202czNyNnQxdzZ1Mmw2djNyNncxdzZ4NW42eTNyNnozbTdrM3I3bDNyN20ydzduMnI3bzJsN3AzcjdxM203cjRzN3MzbTd0M203dTJ3N3Yycjd3MXE3eDJyN3kzbzIwMmwzbWNsNHNhbDJsYW0zbWFuM21hbzNtYXAzbWFyM21hczJsYXQ0dWF1MXlhdjNtYXczdGF5NHVhejJsYmsyc2JsM3QnZm9mJzZvYm8ybGJwM3JicjF0YnMybGJ1MmxidjNtYnozbWNrNHMyMDJrM21jbTRzY240c2NvNHNjcDRzY3E2b2NyNHNjczRtY3Q0bWN1NG1jdjRtY3cycjJtM3JjeTJyY3oycmRsNHNkbTR5ZG40eWRvNHlkcDR5ZHE0eWRzNHlkdDRzZHU0c2R2NHNkdzRzZHozcmVrM21lbDNtZW0zbWVuM21lbzNtZXAzbWVxNHNlcjJ3ZXMyd2V0MndldTJ3ZXYyd2V3MXdleDF3ZXkxd2V6MXdmbDNyZm0zbWZuM21mbzNtZnAzbWZxM21mcjN0ZnMzbWZ0M3JmdTNyZnYzcmZ3M3JmejNtMjAzazZvMjEybTZvMmR3MmwyY3EybDN0M20zdTJsMTdzNHMxOW0zbX0na2VybmluZyd7Y2x7NHF0NWtzNW90NXF5NXJ3MTdzdjV0dn0yMDF0e2NrczRsc2Ntc2Nuc2Nvc2Nwc2NsczR3dn0ya3syMDF0c30yd3s0cXU1a3U3bXU1b3M1cXg1cnUxN3N1NXR1fTJ4ezE3c3U1dHU1b3U1cXN9Mnl7NHF2NWt2N211NW90NXF6NXJ1MTdzdTV0dX0nZm9mJy02bzd0e2Nrc2Nsc2Ntc2Nuc2Nvc2NwczRsc30zdXsxN3N1NXR1NW9zNXF1fTN2ezE3c3U1dHU1b3M1cXV9ZnV7MTdzdTV0dTVvdTVxdX03cHsxN3N1NXR1NW91NXF1fWNrezRxdDVrczVvdDVxeTVydzE3c3Y1dHZ9NGx7NHF0NWtzNW90NXF5NXJ3MTdzdjV0dn1jbXs0cXQ1a3M1b3Q1cXk1cncxN3N2NXR2fWNuezRxdDVrczVvdDVxeTVydzE3c3Y1dHZ9Y297NHF0NWtzNW90NXF5NXJ3MTdzdjV0dn1jcHs0cXQ1a3M1b3Q1cXk1cncxN3N2NXR2fTZsezE3c3Q1dHQ1b3U1cXV9MTdze2NrdWNsdWNtdWNudWNvdWNwdTRsdTR3dX01b3tja3VjbHVjbXVjbnVjb3VjcHU0bHU0d3V9NXF7Y2t6Y2x6Y216Y256Y296Y3B6NGx6NHd1fTVye2NreGNseGNteGNueGNveGNweDRseDR3dX01dHtja3VjbHVjbXVjbnVjb3VjcHU0bHU0d3V9N3F7Y2t1Y2x1Y211Y251Y291Y3B1NGx1fTZwezE3c3c1dHc1b3U1cXV9ZWt7MTdzdDV0dDVxdX1lbHsxN3N0NXR0NW91NXF1fWVtezE3c3Q1dHQ1cXV9ZW57MTdzdDV0dDVxdX1lb3sxN3N0NXR0NXF1fWVwezE3c3Q1dHQ1b3U1cXV9ZXN7MTdzczV0czVxdX1ldHsxN3N3NXR3NW91NXF1fWV1ezE3c3c1dHc1b3U1cXV9ZXZ7MTdzczV0czVxdX02ensxN3N3NXR3NW91NXF1NXJzfWZtezE3c3c1dHc1b3U1cXU1cnN9Zm57MTdzdzV0dzVvdTVxdTVyc31mb3sxN3N3NXR3NW91NXF1NXJzfWZwezE3c3c1dHc1b3U1cXU1cnN9ZnF7MTdzdzV0dzVvdTVxdTVyc303cntja3RjbHRjbXRjbnRjb3RjcHQ0bHQ1b3N9ZnN7MTdzdzV0dzVvdTVxdTVyc31mdHsxN3N1NXR1NW91NXF1fTdtezVvc31mdnsxN3N1NXR1NW91NXF1fWZ3ezE3c3U1dHU1b3U1cXV9Znp7Y2tzY2xzY21zY25zY29zY3BzNGxzfX19XCIpLFN5bWJvbDpjKFwieyd3aWR0aHMne2szdWF3NHIxOW0zbTJrMXQybDJsMjAybTJ5Mm4zbTJwNW4yMDJxNm8zazNtMnMybDJ0MmwydjNyMncxdDNtM20yeTF0Mnoxd2JrMnNibDNyJ2ZvZic2bzNuM20zbzNtM3AzbTNxM20zcjNtM3MzbTN0M20zdTF3M3YxdzN3M3IzeDNyM3kzcjN6MndicDN0M2wzbTV2Mmw1eDJsNXozbTJxNHlmcjNyN3Yzazd3MW83eDNrfSdrZXJuaW5nJ3snZm9mJy02b319XCIpLEhlbHZldGljYTpjKFwieyd3aWR0aHMne2szcDJxNG1jeDF3MjAxbjNyMjAxbzZvMjAxczFxMjAxdDFxMjAxdTFxMjAxdzJsMjAxeDJsMjAxeTJsMmsxdzJsMXcyMDJtMm4ybjNyMm8zcjJwNXQyMDJxNm8ycjFuMnMybDJ0MmwydTJyMnYzdTJ3MXcyeDJsMnkxdzJ6MXczazNyM2wzcjNtM3IzbjNyM28zcjNwM3IzcTNyM3IzcjNzM3IyMDN0MmwyMDN1MmwzdjF3M3czdTN4M3UzeTN1M3ozcjRrNnA0bDRtNG00bTRuNHM0bzRzNHA0bTRxM3g0cjR5NHM0czR0MXc0dTNtNHY0bTR3M3I0eDVuNHk0czR6NHk1azRtNWw0eTVtNHM1bjRtNW8zeDVwNHM1cTRtNXI1eTVzNG01dDRtNXUzeDV2MXc1dzF3NXgxdzV5Mno1ejNyNmsybDZsM3I2bTNyNm4zbTZvM3I2cDNyNnExdzZyM3I2czNyNnQxcTZ1MXE2djNtNncxcTZ4NW42eTNyNnozcjdrM3I3bDNyN20ybDduM203bzF3N3AzcjdxM203cjRzN3MzbTd0M203dTNtN3YybDd3MXU3eDJsN3kzdTIwMmwzcmNsNG1hbDJsYW0zcmFuM3JhbzNyYXAzcmFyM3JhczJsYXQ0dGF1MnBhdjNyYXczdWF5NHRhejJsYmsyc2JsM3UnZm9mJzZvYm8ybGJwM3JicjF3YnMybGJ1Mm9idjNyYnozeGNrNG0yMDJrM3JjbTRtY240bWNvNG1jcDRtY3E2b2NyNHNjczRtY3Q0bWN1NG1jdjRtY3cxdzJtMm5jeTF3Y3oxd2RsNHNkbTR5ZG40eWRvNHlkcDR5ZHE0eWRzNHlkdDRzZHU0c2R2NHNkdzRzZHozeGVrM3JlbDNyZW0zcmVuM3JlbzNyZXAzcmVxNXRlcjNtZXMzcmV0M3JldTNyZXYzcmV3MXdleDF3ZXkxd2V6MXdmbDNyZm0zcmZuM3JmbzNyZnAzcmZxM3JmcjN1ZnMzeGZ0M3JmdTNyZnYzcmZ3M3JmejNtMjAzazZvMjEybTZvMmR3MmwyY3EybDN0M3IzdTF3MTdzNG0xOW0zcn0na2VybmluZyd7NXF7NHd2fWNsezRxczVrdzVvdzVxczE3c3Y1dHZ9MjAxdHsyd3U0dzFrMnl1fTIwMXh7Mnd1NHd5Mnl1fTE3c3sya3RjbHVjbXVjbnU0b3RjcHU0bHU0d3ljb3Vja3V9Mnd7N3FzNHF6NWsxbTE3c3k1b3c1cXg1cnNmc3U1dHk3dHVmenV9Mnh7MTdzeTV0eTVveTVxc30yeXs3cXM0cXo1azFtMTdzeTVvdzVxeDVyc2ZzdTV0eTd0dWZ6dX0nZm9mJy02bzdwezE3c3Y1dHY1b3d9Y2t7NHFzNWt3NW93NXFzMTdzdjV0dn00bHs0cXM1a3c1b3c1cXMxN3N2NXR2fWNtezRxczVrdzVvdzVxczE3c3Y1dHZ9Y257NHFzNWt3NW93NXFzMTdzdjV0dn1jb3s0cXM1a3c1b3c1cXMxN3N2NXR2fWNwezRxczVrdzVvdzVxczE3c3Y1dHZ9Nmx7MTdzeTV0eTVvd31kb3sxN3N0NXR0fTR6ezE3c3Q1dHR9N3N7ZnN0fWRtezE3c3Q1dHR9ZG57MTdzdDV0dH01b3tja3djbHdjbXdjbndjb3djcHc0bHc0d3Z9ZHB7MTdzdDV0dH1kcXsxN3N0NXR0fTd0ezVvd31kc3sxN3N0NXR0fTV0ezJrdGNsdWNtdWNudTRvdGNwdTRsdTR3eWNvdWNrdX1mdXsxN3N2NXR2NW93fTZwezE3c3k1dHk1b3c1cXN9ZWt7MTdzeTV0eTVvd31lbHsxN3N5NXR5NW93fWVtezE3c3k1dHk1b3d9ZW57NXR5fWVvezE3c3k1dHk1b3d9ZXB7MTdzeTV0eTVvd31lc3sxN3N5NXR5NXFzfWV0ezE3c3k1dHk1b3c1cXN9ZXV7MTdzeTV0eTVvdzVxc31ldnsxN3N5NXR5NW93NXFzfTZ6ezE3c3k1dHk1b3c1cXN9Zm17MTdzeTV0eTVvdzVxc31mbnsxN3N5NXR5NW93NXFzfWZvezE3c3k1dHk1b3c1cXN9ZnB7MTdzeTV0eTVxc31mcXsxN3N5NXR5NW93NXFzfTdyezVvd31mc3sxN3N5NXR5NW93NXFzfWZ0ezE3c3Y1dHY1b3d9N217NW93fWZ2ezE3c3Y1dHY1b3d9Znd7MTdzdjV0djVvd319fVwiKSxcIkhlbHZldGljYS1Cb2xkT2JsaXF1ZVwiOmMoXCJ7J3dpZHRocyd7azNzMnE0c2N4MXcyMDFuM3IyMDFvNm8yMDFzMXcyMDF0MXcyMDF1MXcyMDF3M20yMDF4M20yMDF5M20yazF3MmwybDIwMm0ybjJuM3IybzNyMnA1dDIwMnE2bzJyMXMyczJsMnQybDJ1MnIydjN1MncxdzJ4MmwyeTF3MnoxdzNrM3IzbDNyM20zcjNuM3IzbzNyM3AzcjNxM3IzcjNyM3MzcjIwM3QybDIwM3UybDN2MmwzdzN1M3gzdTN5M3UzejN4NGs2bDRsNHM0bTRzNG40czRvNHM0cDRtNHEzeDRyNHk0czRzNHQxdzR1M3I0djRzNHczeDR4NW40eTRzNHo0eTVrNG01bDR5NW00czVuNG01bzN4NXA0czVxNG01cjV5NXM0bTV0NG01dTN4NXYybDV3MXc1eDJsNXkzdTV6M3I2azJsNmwzcjZtM3g2bjNyNm8zeDZwM3I2cTJsNnIzeDZzM3g2dDF3NnUxdzZ2M3I2dzF3Nng1dDZ5M3g2ejN4N2szeDdsM3g3bTJyN24zcjdvMmw3cDN4N3EzcjdyNHk3czNyN3Qzcjd1M203djJyN3cxdzd4MnI3eTN1MjAybDNyY2w0c2FsMmxhbTNyYW4zcmFvM3JhcDNyYXIzcmFzMmxhdDR0YXUycGF2M3JhdzN1YXk0dGF6MmxiazJzYmwzdSdmb2YnNm9ibzJsYnAzeGJxM3JicjF3YnMybGJ1Mm9idjNyYnozeGNrNHMyMDJrM3JjbTRzY240c2NvNHNjcDRzY3E2b2NyNHNjczRtY3Q0bWN1NG1jdjRtY3cxdzJtMnpjeTF3Y3oxd2RsNHNkbTR5ZG40eWRvNHlkcDR5ZHE0eWRzNHlkdDRzZHU0c2R2NHNkdzRzZHozeGVrM3JlbDNyZW0zcmVuM3JlbzNyZXAzcmVxNXRlcjNyZXMzcmV0M3JldTNyZXYzcmV3MXdleDF3ZXkxd2V6MXdmbDN4Zm0zeGZuM3hmbzN4ZnAzeGZxM3hmcjN1ZnMzeGZ0M3hmdTN4ZnYzeGZ3M3hmejNyMjAzazZvMjEybTZvMmR3MmwyY3EybDN0M3IzdTJsMTdzNG0xOW0zcn0na2VybmluZyd7Y2x7NHFzNWt1NW90NXFzMTdzdjV0dn0yMDF0ezJ3dzR3eTJ5d30yMDF3ezJrc30yMDF4ezJ3dzR3eTJ5d30ya3syMDF0czIwMXhzfTJ3ezdxczRxdTVrdzVvczVxdzVyczE3c3U1dHU3dHNmenN9Mnh7NW93NXFzfTJ5ezdxczRxdTVrdzVvczVxdzVyczE3c3U1dHU3dHNmenN9J2ZvZictNm83cHsxN3N1NXR1NW90fWNrezRxczVrdTVvdDVxczE3c3Y1dHZ9NGx7NHFzNWt1NW90NXFzMTdzdjV0dn1jbXs0cXM1a3U1b3Q1cXMxN3N2NXR2fWNuezRxczVrdTVvdDVxczE3c3Y1dHZ9Y297NHFzNWt1NW90NXFzMTdzdjV0dn1jcHs0cXM1a3U1b3Q1cXMxN3N2NXR2fTZsezE3c3Q1dHQ1b3N9MTdzezJrd2NsdmNtdmNudmNvdmNwdjRsdjR3d2Nrdn01b3sya3VjbHRjbXRjbnRjb3RjcHQ0bHQ0d3Rja3R9NXF7MmtzY2xzY21zY25zY29zY3BzNGxzNHd2Y2tzfTVyezJrczR3c301dHsya3djbHZjbXZjbnZjb3ZjcHY0bHY0d3dja3Z9ZW97MTdzdDV0dDVvc31mdXsxN3N1NXR1NW90fTZwezE3c3M1dHN9ZWt7MTdzdDV0dDVvc31lbHsxN3N0NXR0NW9zfWVtezE3c3Q1dHQ1b3N9ZW57MTdzdDV0dDVvc302b3syMDF0c31lcHsxN3N0NXR0NW9zfWVzezE3c3M1dHN9ZXR7MTdzczV0c31ldXsxN3NzNXRzfWV2ezE3c3M1dHN9Nnp7MTdzdTV0dTVvczVxdH1mbXsxN3N1NXR1NW9zNXF0fWZuezE3c3U1dHU1b3M1cXR9Zm97MTdzdTV0dTVvczVxdH1mcHsxN3N1NXR1NW9zNXF0fWZxezE3c3U1dHU1b3M1cXR9ZnN7MTdzdTV0dTVvczVxdH1mdHsxN3N1NXR1NW90fTdtezVvc31mdnsxN3N1NXR1NW90fWZ3ezE3c3U1dHU1b3R9fX1cIiksWmFwZkRpbmdiYXRzOmMoXCJ7J3dpZHRocyd7azR1Mmsxdydmb2YnNm99J2tlcm5pbmcneydmb2YnLTZvfX1cIiksXCJDb3VyaWVyLUJvbGRcIjpjKFwieyd3aWR0aHMne2szdydmb2YnNm99J2tlcm5pbmcneydmb2YnLTZvfX1cIiksXCJUaW1lcy1JdGFsaWNcIjpjKFwieyd3aWR0aHMne2szbjJxNHljeDJsMjAxbjNtMjAxbzV0MjAxczJsMjAxdDJsMjAxdTJsMjAxdzNyMjAxeDNyMjAxeTNyMmsxdDJsMmwyMDJtMm4ybjNtMm8zbTJwNW4yMDJxNXQycjFwMnMybDJ0MmwydTNtMnY0bjJ3MXQyeDJsMnkxdDJ6MXczazNtM2wzbTNtM20zbjNtM28zbTNwM20zcTNtM3IzbTNzM20yMDN0MmwyMDN1MmwzdjJsM3c0bjN4NG4zeTRuM3ozbTRrNXc0bDN4NG0zeDRuNG00bzRzNHAzeDRxM3g0cjRzNHM0czR0Mmw0dTJ3NHY0bTR3M3I0eDVuNHk0bTR6NHM1azN4NWw0czVtM3g1bjNtNW8zcjVwNHM1cTN4NXI1bjVzM3g1dDNyNXUzcjV2MnI1dzF3NXgycjV5MnU1ejNtNmsybDZsM202bTNtNm4ydzZvM202cDJ3NnExdzZyM202czNtNnQxdzZ1MXc2djJ3NncxdzZ4NHM2eTNtNnozbTdrM203bDNtN20ycjduMnI3bzF3N3AzbTdxMnc3cjRtN3Mydzd0Mnc3dTJyN3Yyczd3MXY3eDJzN3kzcTIwMmwzbWNsM3hhbDJyYW0zbWFuM21hbzNtYXAzbWFyM21hczJsYXQ0d2F1MXZhdjNtYXc0bmF5NHdhejJsYmsyc2JsNG4nZm9mJzZvYm8ybGJwM21icTNvYnIxdGJzMmxidTF6YnYzbWJ6M21jazN4MjAyazNtY20zeGNuM3hjbzN4Y3AzeGNxNXRjcjRtY3MzeGN0M3hjdTN4Y3YzeGN3MmwybTJ1Y3kybGN6MmxkbDRtZG00c2RuNHNkbzRzZHA0c2RxNHNkczRzZHQ0c2R1NHNkdjRzZHc0c2R6M21lazNtZWwzbWVtM21lbjNtZW8zbWVwM21lcTRtZXIyd2VzMndldDJ3ZXUyd2V2MndldzF3ZXgxd2V5MXdlejF3ZmwzbWZtM21mbjNtZm8zbWZwM21mcTNtZnI0bmZzM21mdDNtZnUzbWZ2M21mdzNtZnoydzIwM2s2bzIxMm02bTJkdzJsMmNxMmwzdDNtM3UybDE3czNyMTltM219J2tlcm5pbmcne2NsezVrdDRxd30yMDFzezIwMXN3fTIwMXR7MjAxdHcyd3kyeXk2cS10fTIwMXh7Mnd5Mnl5fTJrezIwMXR3fTJ3ezdxczRxeTdyczVreTdtdzVvczVxeDVydTE3c3U1dHV9Mnh7MTdzczV0czVvc30yeXs3cXM0cXk3cnM1a3k3bXc1b3M1cXg1cnUxN3N1NXR1fSdmb2YnLTZvNnR7MTdzczV0czVxc303dHs1b3N9M3Z7NXFzfTdwezE3c3U1dHU1cXN9Y2t7NWt0NHF3fTRsezVrdDRxd31jbXs1a3Q0cXd9Y257NWt0NHF3fWNvezVrdDRxd31jcHs1a3Q0cXd9Nmx7NHFzNWtzNW91NXF3NXJ1MTdzdTV0dX0xN3N7MmtzfTVxe2NrdmNsdmNtdmNudmNvdmNwdjRsdn01cntja3VjbHVjbXVjbnVjb3VjcHU0bHV9NXR7MmtzfTZwezRxczVrczVvdTVxdzVydTE3c3U1dHV9ZWt7NHFzNWtzNW91NXF3NXJ1MTdzdTV0dX1lbHs0cXM1a3M1b3U1cXc1cnUxN3N1NXR1fWVtezRxczVrczVvdTVxdzVydTE3c3U1dHV9ZW57NHFzNWtzNW91NXF3NXJ1MTdzdTV0dX1lb3s0cXM1a3M1b3U1cXc1cnUxN3N1NXR1fWVwezRxczVrczVvdTVxdzVydTE3c3U1dHV9ZXN7NWtzNXFzNHFzfWV0ezRxczVrczVvdTVxdzVydTE3c3U1dHV9ZXV7NHFzNWtzNXF3NXJ1MTdzdTV0dX1ldns1a3M1cXM0cXN9ZXh7MTdzczV0czVxc302ens0cXY1a3M1b3U1cXc1cnUxN3N1NXR1fWZtezRxdjVrczVvdTVxdzVydTE3c3U1dHV9Zm57NHF2NWtzNW91NXF3NXJ1MTdzdTV0dX1mb3s0cXY1a3M1b3U1cXc1cnUxN3N1NXR1fWZwezRxdjVrczVvdTVxdzVydTE3c3U1dHV9ZnF7NHF2NWtzNW91NXF3NXJ1MTdzdTV0dX03cns1b3N9ZnN7NHF2NWtzNW91NXF3NXJ1MTdzdTV0dX1mdHsxN3N1NXR1NXFzfWZ1ezE3c3U1dHU1cXN9ZnZ7MTdzdTV0dTVxc31md3sxN3N1NXR1NXFzfX19XCIpLFwiVGltZXMtUm9tYW5cIjpjKFwieyd3aWR0aHMne2szbjJxNHljeDJsMjAxbjNtMjAxbzZvMjAxczJsMjAxdDJsMjAxdTJsMjAxdzJ3MjAxeDJ3MjAxeTJ3MmsxdDJsMmwyMDJtMm4ybjNtMm8zbTJwNW4yMDJxNm8ycjFtMnMybDJ0MmwydTNtMnYzczJ3MXQyeDJsMnkxdDJ6MXczazNtM2wzbTNtM20zbjNtM28zbTNwM20zcTNtM3IzbTNzM20yMDN0MmwyMDN1MmwzdjF3M3czczN4M3MzeTNzM3oydzRrNXc0bDRzNG00bTRuNG00bzRzNHAzeDRxM3I0cjRzNHM0czR0Mmw0dTJyNHY0czR3M3g0eDV0NHk0czR6NHM1azNyNWw0czVtNG01bjNyNW8zeDVwNHM1cTRzNXI1eTVzNHM1dDRzNXUzeDV2Mmw1dzF3NXgybDV5Mno1ejNtNmsybDZsMnc2bTNtNm4ydzZvM202cDJ3NnEybDZyM202czNtNnQxdzZ1MXc2djNtNncxdzZ4NHk2eTNtNnozbTdrM203bDNtN20ybDduMnI3bzF3N3AzbTdxM203cjRzN3MzbTd0M203dTJ3N3Yzazd3MW83eDNrN3kzcTIwMmwzbWNsNHNhbDJsYW0zbWFuM21hbzNtYXAzbWFyM21hczJsYXQ0d2F1MXZhdjNtYXczc2F5NHdhejJsYmsyc2JsM3MnZm9mJzZvYm8ybGJwM21icTJ4YnIxdGJzMmxidTF6YnYzbWJ6MndjazRzMjAyazNtY200c2NuNHNjbzRzY3A0c2NxNXRjcjRtY3MzeGN0M3hjdTN4Y3YzeGN3MmwybTJ0Y3kybGN6MmxkbDRzZG00c2RuNHNkbzRzZHA0c2RxNHNkczRzZHQ0c2R1NHNkdjRzZHc0c2R6M21lazJ3ZWwyd2VtMndlbjJ3ZW8yd2VwMndlcTRtZXIyd2VzMndldDJ3ZXUyd2V2MndldzF3ZXgxd2V5MXdlejF3ZmwzbWZtM21mbjNtZm8zbWZwM21mcTNtZnIzc2ZzM21mdDNtZnUzbWZ2M21mdzNtZnozbTIwM2s2bzIxMm02bTJkdzJsMmNxMmwzdDNtM3UxdzE3czRzMTltM219J2tlcm5pbmcne2NsezRxczVrdTE3c3c1b3U1cXk1cncyMDFzczV0dzIwMXdzfTIwMXN7MjAxc3N9MjAxdHtja3c0bHdjbXdjbndjb3djcHdjbHc0d3UyMDF0c30ya3syMDF0c30yd3s0cXM1a3c1b3M1cXg1cnUxN3N4NXR4fTJ4ezE3c3c1dHc1b3U1cXV9Mnl7NHFzNWt3NW9zNXF4NXJ1MTdzeDV0eH0nZm9mJy02bzd0e2NrdWNsdWNtdWNudWNvdWNwdTRsdTVvczVyc30zdXsxN3N1NXR1NXFzfTN2ezE3c3U1dHU1cXN9N3B7MTdzdzV0dzVxc31ja3s0cXM1a3UxN3N3NW91NXF5NXJ3MjAxc3M1dHcyMDF3c300bHs0cXM1a3UxN3N3NW91NXF5NXJ3MjAxc3M1dHcyMDF3c31jbXs0cXM1a3UxN3N3NW91NXF5NXJ3MjAxc3M1dHcyMDF3c31jbns0cXM1a3UxN3N3NW91NXF5NXJ3MjAxc3M1dHcyMDF3c31jb3s0cXM1a3UxN3N3NW91NXF5NXJ3MjAxc3M1dHcyMDF3c31jcHs0cXM1a3UxN3N3NW91NXF5NXJ3MjAxc3M1dHcyMDF3c302bHsxN3N1NXR1NW9zNXF3NXJzfTE3c3sya3RjbHZjbXZjbnZjb3ZjcHY0bHY0d3Vja3Z9NW97Y2t3Y2x3Y213Y253Y293Y3B3NGx3NHd1fTVxe2NreWNseWNteWNueWNveWNweTRseTR3dTVtc301cntja3RjbHRjbXRjbnRjb3RjcHQ0bHQ0d3N9NXR7Mmt0Y2x2Y212Y252Y292Y3B2NGx2NHd1Y2t2fTdxe2Nrc2Nsc2Ntc2Nuc2Nvc2NwczRsc302cHsxN3N1NXR1NXF3NXJzfWVrezVxczVyc31lbHsxN3N1NXR1NW9zNXF3NXJzfWVtezE3c3U1dHU1b3M1cXM1cnN9ZW57MTdzdTVxczVyc31lb3s1cXM1cnN9ZXB7MTdzdTV0dTVvczVxdzVyc31lc3s1cXN9ZXR7MTdzdTV0dTVxdzVyc31ldXsxN3N1NXR1NXFzNXJzfWV2ezVxc302ensxN3N2NXR2NW9zNXF4NXJzfWZtezVvczVxdDVyc31mbnsxN3N2NXR2NW9zNXF4NXJzfWZvezE3c3Y1dHY1b3M1cXg1cnN9ZnB7NW9zNXF0NXJzfWZxezVvczVxdDVyc303cntja3VjbHVjbXVjbnVjb3VjcHU0bHU1b3N9ZnN7MTdzdjV0djVvczVxeDVyc31mdHsxN3NzNXRzNXFzfWZ1ezE3c3c1dHc1cXN9ZnZ7MTdzdzV0dzVxc31md3sxN3NzNXRzNXFzfWZ6e2NrdWNsdWNtdWNudWNvdWNwdTRsdTVvczVyc319fVwiKSxcIkhlbHZldGljYS1PYmxpcXVlXCI6YyhcInsnd2lkdGhzJ3trM3AycTRtY3gxdzIwMW4zcjIwMW82bzIwMXMxcTIwMXQxcTIwMXUxcTIwMXcybDIwMXgybDIwMXkybDJrMXcybDF3MjAybTJuMm4zcjJvM3IycDV0MjAycTZvMnIxbjJzMmwydDJsMnUycjJ2M3UydzF3MngybDJ5MXcyejF3M2szcjNsM3IzbTNyM24zcjNvM3IzcDNyM3EzcjNyM3IzczNyMjAzdDJsMjAzdTJsM3YxdzN3M3UzeDN1M3kzdTN6M3I0azZwNGw0bTRtNG00bjRzNG80czRwNG00cTN4NHI0eTRzNHM0dDF3NHUzbTR2NG00dzNyNHg1bjR5NHM0ejR5NWs0bTVsNHk1bTRzNW40bTVvM3g1cDRzNXE0bTVyNXk1czRtNXQ0bTV1M3g1djF3NXcxdzV4MXc1eTJ6NXozcjZrMmw2bDNyNm0zcjZuM202bzNyNnAzcjZxMXc2cjNyNnMzcjZ0MXE2dTFxNnYzbTZ3MXE2eDVuNnkzcjZ6M3I3azNyN2wzcjdtMmw3bjNtN28xdzdwM3I3cTNtN3I0czdzM203dDNtN3UzbTd2Mmw3dzF1N3gybDd5M3UyMDJsM3JjbDRtYWwybGFtM3JhbjNyYW8zcmFwM3JhcjNyYXMybGF0NHRhdTJwYXYzcmF3M3VheTR0YXoybGJrMnNibDN1J2ZvZic2b2JvMmxicDNyYnIxd2JzMmxidTJvYnYzcmJ6M3hjazRtMjAyazNyY200bWNuNG1jbzRtY3A0bWNxNm9jcjRzY3M0bWN0NG1jdTRtY3Y0bWN3MXcybTJuY3kxd2N6MXdkbDRzZG00eWRuNHlkbzR5ZHA0eWRxNHlkczR5ZHQ0c2R1NHNkdjRzZHc0c2R6M3hlazNyZWwzcmVtM3JlbjNyZW8zcmVwM3JlcTV0ZXIzbWVzM3JldDNyZXUzcmV2M3JldzF3ZXgxd2V5MXdlejF3ZmwzcmZtM3JmbjNyZm8zcmZwM3JmcTNyZnIzdWZzM3hmdDNyZnUzcmZ2M3JmdzNyZnozbTIwM2s2bzIxMm02bzJkdzJsMmNxMmwzdDNyM3UxdzE3czRtMTltM3J9J2tlcm5pbmcnezVxezR3dn1jbHs0cXM1a3c1b3c1cXMxN3N2NXR2fTIwMXR7Mnd1NHcxazJ5dX0yMDF4ezJ3dTR3eTJ5dX0xN3N7Mmt0Y2x1Y211Y251NG90Y3B1NGx1NHd5Y291Y2t1fTJ3ezdxczRxejVrMW0xN3N5NW93NXF4NXJzZnN1NXR5N3R1Znp1fTJ4ezE3c3k1dHk1b3k1cXN9Mnl7N3FzNHF6NWsxbTE3c3k1b3c1cXg1cnNmc3U1dHk3dHVmenV9J2ZvZictNm83cHsxN3N2NXR2NW93fWNrezRxczVrdzVvdzVxczE3c3Y1dHZ9NGx7NHFzNWt3NW93NXFzMTdzdjV0dn1jbXs0cXM1a3c1b3c1cXMxN3N2NXR2fWNuezRxczVrdzVvdzVxczE3c3Y1dHZ9Y297NHFzNWt3NW93NXFzMTdzdjV0dn1jcHs0cXM1a3c1b3c1cXMxN3N2NXR2fTZsezE3c3k1dHk1b3d9ZG97MTdzdDV0dH00ensxN3N0NXR0fTdze2ZzdH1kbXsxN3N0NXR0fWRuezE3c3Q1dHR9NW97Y2t3Y2x3Y213Y253Y293Y3B3NGx3NHd2fWRwezE3c3Q1dHR9ZHF7MTdzdDV0dH03dHs1b3d9ZHN7MTdzdDV0dH01dHsya3RjbHVjbXVjbnU0b3RjcHU0bHU0d3ljb3Vja3V9ZnV7MTdzdjV0djVvd302cHsxN3N5NXR5NW93NXFzfWVrezE3c3k1dHk1b3d9ZWx7MTdzeTV0eTVvd31lbXsxN3N5NXR5NW93fWVuezV0eX1lb3sxN3N5NXR5NW93fWVwezE3c3k1dHk1b3d9ZXN7MTdzeTV0eTVxc31ldHsxN3N5NXR5NW93NXFzfWV1ezE3c3k1dHk1b3c1cXN9ZXZ7MTdzeTV0eTVvdzVxc302ensxN3N5NXR5NW93NXFzfWZtezE3c3k1dHk1b3c1cXN9Zm57MTdzeTV0eTVvdzVxc31mb3sxN3N5NXR5NW93NXFzfWZwezE3c3k1dHk1cXN9ZnF7MTdzeTV0eTVvdzVxc303cns1b3d9ZnN7MTdzeTV0eTVvdzVxc31mdHsxN3N2NXR2NW93fTdtezVvd31mdnsxN3N2NXR2NW93fWZ3ezE3c3Y1dHY1b3d9fX1cIil9fTtlLmV2ZW50cy5wdXNoKFtcImFkZEZvbnRcIixmdW5jdGlvbih0KXt2YXIgZT10LmZvbnQscj1sLlVuaWNvZGVbZS5wb3N0U2NyaXB0TmFtZV07ciYmKGUubWV0YWRhdGEuVW5pY29kZT17fSxlLm1ldGFkYXRhLlVuaWNvZGUud2lkdGhzPXIud2lkdGhzLGUubWV0YWRhdGEuVW5pY29kZS5rZXJuaW5nPXIua2VybmluZyk7dmFyIG49aC5Vbmljb2RlW2UucG9zdFNjcmlwdE5hbWVdO24mJihlLm1ldGFkYXRhLlVuaWNvZGUuZW5jb2Rpbmc9bixlLmVuY29kaW5nPW4uY29kZVBhZ2VzWzBdKX1dKX0oRS5BUEkpLFxuLyoqXG4gKiBAbGljZW5zZVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlXG4gKi9cbmZ1bmN0aW9uKHQpe3ZhciBlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lmxlbmd0aCxyPW5ldyBVaW50OEFycmF5KGUpLG49MDtuPGU7bisrKXJbbl09dC5jaGFyQ29kZUF0KG4pO3JldHVybiByfTt0LkFQSS5ldmVudHMucHVzaChbXCJhZGRGb250XCIsZnVuY3Rpb24ocil7dmFyIG49dm9pZCAwLGk9ci5mb250LGE9ci5pbnN0YW5jZTtpZighaS5pc1N0YW5kYXJkRm9udCl7aWYodm9pZCAwPT09YSl0aHJvdyBuZXcgRXJyb3IoXCJGb250IGRvZXMgbm90IGV4aXN0IGluIHZGUywgaW1wb3J0IGZvbnRzIG9yIHJlbW92ZSBkZWNsYXJhdGlvbiBkb2MuYWRkRm9udCgnXCIraS5wb3N0U2NyaXB0TmFtZStcIicpLlwiKTtpZihcInN0cmluZ1wiIT10eXBlb2Yobj0hMT09PWEuZXhpc3RzRmlsZUluVkZTKGkucG9zdFNjcmlwdE5hbWUpP2EubG9hZEZpbGUoaS5wb3N0U2NyaXB0TmFtZSk6YS5nZXRGaWxlRnJvbVZGUyhpLnBvc3RTY3JpcHROYW1lKSkpdGhyb3cgbmV3IEVycm9yKFwiRm9udCBpcyBub3Qgc3RvcmVkIGFzIHN0cmluZy1kYXRhIGluIHZGUywgaW1wb3J0IGZvbnRzIG9yIHJlbW92ZSBkZWNsYXJhdGlvbiBkb2MuYWRkRm9udCgnXCIraS5wb3N0U2NyaXB0TmFtZStcIicpLlwiKTshZnVuY3Rpb24ocixuKXtuPS9eXFx4MDBcXHgwMVxceDAwXFx4MDAvLnRlc3Qobik/ZShuKTplKHUobikpLHIubWV0YWRhdGE9dC5BUEkuVFRGRm9udC5vcGVuKG4pLHIubWV0YWRhdGEuVW5pY29kZT1yLm1ldGFkYXRhLlVuaWNvZGV8fHtlbmNvZGluZzp7fSxrZXJuaW5nOnt9LHdpZHRoczpbXX0sci5tZXRhZGF0YS5nbHlJZHNVc2VkPVswXX0oaSxuKX19XSl9KEUpLFxuLyoqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgV2lsbG93IFN5c3RlbXMgQ29ycG9yYXRpb24sIGh0dHBzOi8vZ2l0aHViLmNvbS93aWxsb3dzeXN0ZW1zXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4gKiBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICogd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuICogZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4gKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAqIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICogTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkVcbiAqIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbiAqIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTlxuICogV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuKG4uY2Fudmc/UHJvbWlzZS5yZXNvbHZlKG4uY2FudmcpOmltcG9ydChcImNhbnZnXCIpKS5jYXRjaCgoZnVuY3Rpb24odCl7cmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2FkIGNhbnZnOiBcIit0KSl9KSkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGVmYXVsdD90LmRlZmF1bHQ6dH0pKX1FLkFQSS5hZGRTdmdBc0ltYWdlPWZ1bmN0aW9uKHQscixuLGksbyxzLGMsdSl7aWYoaXNOYU4ocil8fGlzTmFOKG4pKXRocm93IGEuZXJyb3IoXCJqc1BERi5hZGRTdmdBc0ltYWdlOiBJbnZhbGlkIGNvb3JkaW5hdGVzXCIsYXJndW1lbnRzKSxuZXcgRXJyb3IoXCJJbnZhbGlkIGNvb3JkaW5hdGVzIHBhc3NlZCB0byBqc1BERi5hZGRTdmdBc0ltYWdlXCIpO2lmKGlzTmFOKGkpfHxpc05hTihvKSl0aHJvdyBhLmVycm9yKFwianNQREYuYWRkU3ZnQXNJbWFnZTogSW52YWxpZCBtZWFzdXJlbWVudHNcIixhcmd1bWVudHMpLG5ldyBFcnJvcihcIkludmFsaWQgbWVhc3VyZW1lbnRzICh3aWR0aCBhbmQvb3IgaGVpZ2h0KSBwYXNzZWQgdG8ganNQREYuYWRkU3ZnQXNJbWFnZVwiKTt2YXIgaD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO2gud2lkdGg9aSxoLmhlaWdodD1vO3ZhciBsPWguZ2V0Q29udGV4dChcIjJkXCIpO2wuZmlsbFN0eWxlPVwiI2ZmZlwiLGwuZmlsbFJlY3QoMCwwLGgud2lkdGgsaC5oZWlnaHQpO3ZhciBmPXtpZ25vcmVNb3VzZTohMCxpZ25vcmVBbmltYXRpb246ITAsaWdub3JlRGltZW5zaW9uczohMH0sZD10aGlzO3JldHVybiBlKCkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZnJvbVN0cmluZyhsLHQsZil9KSwoZnVuY3Rpb24oKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQ291bGQgbm90IGxvYWQgY2FudmcuXCIpKX0pKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZW5kZXIoZil9KSkudGhlbigoZnVuY3Rpb24oKXtkLmFkZEltYWdlKGgudG9EYXRhVVJMKFwiaW1hZ2UvanBlZ1wiLDEpLHIsbixpLG8sYyx1KX0pKX19KCksRS5BUEkucHV0VG90YWxQYWdlcz1mdW5jdGlvbih0KXt2YXIgZSxyPTA7cGFyc2VJbnQodGhpcy5pbnRlcm5hbC5nZXRGb250KCkuaWQuc3Vic3RyKDEpLDEwKTwxNT8oZT1uZXcgUmVnRXhwKHQsXCJnXCIpLHI9dGhpcy5pbnRlcm5hbC5nZXROdW1iZXJPZlBhZ2VzKCkpOihlPW5ldyBSZWdFeHAodGhpcy5wZGZFc2NhcGUxNih0LHRoaXMuaW50ZXJuYWwuZ2V0Rm9udCgpKSxcImdcIikscj10aGlzLnBkZkVzY2FwZTE2KHRoaXMuaW50ZXJuYWwuZ2V0TnVtYmVyT2ZQYWdlcygpK1wiXCIsdGhpcy5pbnRlcm5hbC5nZXRGb250KCkpKTtmb3IodmFyIG49MTtuPD10aGlzLmludGVybmFsLmdldE51bWJlck9mUGFnZXMoKTtuKyspZm9yKHZhciBpPTA7aTx0aGlzLmludGVybmFsLnBhZ2VzW25dLmxlbmd0aDtpKyspdGhpcy5pbnRlcm5hbC5wYWdlc1tuXVtpXT10aGlzLmludGVybmFsLnBhZ2VzW25dW2ldLnJlcGxhY2UoZSxyKTtyZXR1cm4gdGhpc30sRS5BUEkudmlld2VyUHJlZmVyZW5jZXM9ZnVuY3Rpb24oZSxyKXt2YXIgbjtlPWV8fHt9LHI9cnx8ITE7dmFyIGksYSxvLHM9e0hpZGVUb29sYmFyOntkZWZhdWx0VmFsdWU6ITEsdmFsdWU6ITEsdHlwZTpcImJvb2xlYW5cIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbITAsITFdLHBkZlZlcnNpb246MS4zfSxIaWRlTWVudWJhcjp7ZGVmYXVsdFZhbHVlOiExLHZhbHVlOiExLHR5cGU6XCJib29sZWFuXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6WyEwLCExXSxwZGZWZXJzaW9uOjEuM30sSGlkZVdpbmRvd1VJOntkZWZhdWx0VmFsdWU6ITEsdmFsdWU6ITEsdHlwZTpcImJvb2xlYW5cIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbITAsITFdLHBkZlZlcnNpb246MS4zfSxGaXRXaW5kb3c6e2RlZmF1bHRWYWx1ZTohMSx2YWx1ZTohMSx0eXBlOlwiYm9vbGVhblwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OlshMCwhMV0scGRmVmVyc2lvbjoxLjN9LENlbnRlcldpbmRvdzp7ZGVmYXVsdFZhbHVlOiExLHZhbHVlOiExLHR5cGU6XCJib29sZWFuXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6WyEwLCExXSxwZGZWZXJzaW9uOjEuM30sRGlzcGxheURvY1RpdGxlOntkZWZhdWx0VmFsdWU6ITEsdmFsdWU6ITEsdHlwZTpcImJvb2xlYW5cIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbITAsITFdLHBkZlZlcnNpb246MS40fSxOb25GdWxsU2NyZWVuUGFnZU1vZGU6e2RlZmF1bHRWYWx1ZTpcIlVzZU5vbmVcIix2YWx1ZTpcIlVzZU5vbmVcIix0eXBlOlwibmFtZVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OltcIlVzZU5vbmVcIixcIlVzZU91dGxpbmVzXCIsXCJVc2VUaHVtYnNcIixcIlVzZU9DXCJdLHBkZlZlcnNpb246MS4zfSxEaXJlY3Rpb246e2RlZmF1bHRWYWx1ZTpcIkwyUlwiLHZhbHVlOlwiTDJSXCIsdHlwZTpcIm5hbWVcIixleHBsaWNpdFNldDohMSx2YWx1ZVNldDpbXCJMMlJcIixcIlIyTFwiXSxwZGZWZXJzaW9uOjEuM30sVmlld0FyZWE6e2RlZmF1bHRWYWx1ZTpcIkNyb3BCb3hcIix2YWx1ZTpcIkNyb3BCb3hcIix0eXBlOlwibmFtZVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OltcIk1lZGlhQm94XCIsXCJDcm9wQm94XCIsXCJUcmltQm94XCIsXCJCbGVlZEJveFwiLFwiQXJ0Qm94XCJdLHBkZlZlcnNpb246MS40fSxWaWV3Q2xpcDp7ZGVmYXVsdFZhbHVlOlwiQ3JvcEJveFwiLHZhbHVlOlwiQ3JvcEJveFwiLHR5cGU6XCJuYW1lXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6W1wiTWVkaWFCb3hcIixcIkNyb3BCb3hcIixcIlRyaW1Cb3hcIixcIkJsZWVkQm94XCIsXCJBcnRCb3hcIl0scGRmVmVyc2lvbjoxLjR9LFByaW50QXJlYTp7ZGVmYXVsdFZhbHVlOlwiQ3JvcEJveFwiLHZhbHVlOlwiQ3JvcEJveFwiLHR5cGU6XCJuYW1lXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6W1wiTWVkaWFCb3hcIixcIkNyb3BCb3hcIixcIlRyaW1Cb3hcIixcIkJsZWVkQm94XCIsXCJBcnRCb3hcIl0scGRmVmVyc2lvbjoxLjR9LFByaW50Q2xpcDp7ZGVmYXVsdFZhbHVlOlwiQ3JvcEJveFwiLHZhbHVlOlwiQ3JvcEJveFwiLHR5cGU6XCJuYW1lXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6W1wiTWVkaWFCb3hcIixcIkNyb3BCb3hcIixcIlRyaW1Cb3hcIixcIkJsZWVkQm94XCIsXCJBcnRCb3hcIl0scGRmVmVyc2lvbjoxLjR9LFByaW50U2NhbGluZzp7ZGVmYXVsdFZhbHVlOlwiQXBwRGVmYXVsdFwiLHZhbHVlOlwiQXBwRGVmYXVsdFwiLHR5cGU6XCJuYW1lXCIsZXhwbGljaXRTZXQ6ITEsdmFsdWVTZXQ6W1wiQXBwRGVmYXVsdFwiLFwiTm9uZVwiXSxwZGZWZXJzaW9uOjEuNn0sRHVwbGV4OntkZWZhdWx0VmFsdWU6XCJcIix2YWx1ZTpcIm5vbmVcIix0eXBlOlwibmFtZVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OltcIlNpbXBsZXhcIixcIkR1cGxleEZsaXBTaG9ydEVkZ2VcIixcIkR1cGxleEZsaXBMb25nRWRnZVwiLFwibm9uZVwiXSxwZGZWZXJzaW9uOjEuN30sUGlja1RyYXlCeVBERlNpemU6e2RlZmF1bHRWYWx1ZTohMSx2YWx1ZTohMSx0eXBlOlwiYm9vbGVhblwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0OlshMCwhMV0scGRmVmVyc2lvbjoxLjd9LFByaW50UGFnZVJhbmdlOntkZWZhdWx0VmFsdWU6XCJcIix2YWx1ZTpcIlwiLHR5cGU6XCJhcnJheVwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0Om51bGwscGRmVmVyc2lvbjoxLjd9LE51bUNvcGllczp7ZGVmYXVsdFZhbHVlOjEsdmFsdWU6MSx0eXBlOlwiaW50ZWdlclwiLGV4cGxpY2l0U2V0OiExLHZhbHVlU2V0Om51bGwscGRmVmVyc2lvbjoxLjd9fSxjPU9iamVjdC5rZXlzKHMpLHU9W10saD0wLGw9MCxmPTA7ZnVuY3Rpb24gZCh0LGUpe3ZhciByLG49ITE7Zm9yKHI9MDtyPHQubGVuZ3RoO3IrPTEpdFtyXT09PWUmJihuPSEwKTtyZXR1cm4gbn1pZih2b2lkIDA9PT10aGlzLmludGVybmFsLnZpZXdlcnByZWZlcmVuY2VzJiYodGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcz17fSx0aGlzLmludGVybmFsLnZpZXdlcnByZWZlcmVuY2VzLmNvbmZpZ3VyYXRpb249SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzKSksdGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcy5pc1N1YnNjcmliZWQ9ITEpLG49dGhpcy5pbnRlcm5hbC52aWV3ZXJwcmVmZXJlbmNlcy5jb25maWd1cmF0aW9uLFwicmVzZXRcIj09PWV8fCEwPT09cil7dmFyIHA9Yy5sZW5ndGg7Zm9yKGY9MDtmPHA7Zis9MSluW2NbZl1dLnZhbHVlPW5bY1tmXV0uZGVmYXVsdFZhbHVlLG5bY1tmXV0uZXhwbGljaXRTZXQ9ITF9aWYoXCJvYmplY3RcIj09PXQoZSkpZm9yKGEgaW4gZSlpZihvPWVbYV0sZChjLGEpJiZ2b2lkIDAhPT1vKXtpZihcImJvb2xlYW5cIj09PW5bYV0udHlwZSYmXCJib29sZWFuXCI9PXR5cGVvZiBvKW5bYV0udmFsdWU9bztlbHNlIGlmKFwibmFtZVwiPT09blthXS50eXBlJiZkKG5bYV0udmFsdWVTZXQsbykpblthXS52YWx1ZT1vO2Vsc2UgaWYoXCJpbnRlZ2VyXCI9PT1uW2FdLnR5cGUmJk51bWJlci5pc0ludGVnZXIobykpblthXS52YWx1ZT1vO2Vsc2UgaWYoXCJhcnJheVwiPT09blthXS50eXBlKXtmb3IoaD0wO2g8by5sZW5ndGg7aCs9MSlpZihpPSEwLDE9PT1vW2hdLmxlbmd0aCYmXCJudW1iZXJcIj09dHlwZW9mIG9baF1bMF0pdS5wdXNoKFN0cmluZyhvW2hdLTEpKTtlbHNlIGlmKG9baF0ubGVuZ3RoPjEpe2ZvcihsPTA7bDxvW2hdLmxlbmd0aDtsKz0xKVwibnVtYmVyXCIhPXR5cGVvZiBvW2hdW2xdJiYoaT0hMSk7ITA9PT1pJiZ1LnB1c2goW29baF1bMF0tMSxvW2hdWzFdLTFdLmpvaW4oXCIgXCIpKX1uW2FdLnZhbHVlPVwiW1wiK3Uuam9pbihcIiBcIikrXCJdXCJ9ZWxzZSBuW2FdLnZhbHVlPW5bYV0uZGVmYXVsdFZhbHVlO25bYV0uZXhwbGljaXRTZXQ9ITB9cmV0dXJuITE9PT10aGlzLmludGVybmFsLnZpZXdlcnByZWZlcmVuY2VzLmlzU3Vic2NyaWJlZCYmKHRoaXMuaW50ZXJuYWwuZXZlbnRzLnN1YnNjcmliZShcInB1dENhdGFsb2dcIiwoZnVuY3Rpb24oKXt2YXIgdCxlPVtdO2Zvcih0IGluIG4pITA9PT1uW3RdLmV4cGxpY2l0U2V0JiYoXCJuYW1lXCI9PT1uW3RdLnR5cGU/ZS5wdXNoKFwiL1wiK3QrXCIgL1wiK25bdF0udmFsdWUpOmUucHVzaChcIi9cIit0K1wiIFwiK25bdF0udmFsdWUpKTswIT09ZS5sZW5ndGgmJnRoaXMuaW50ZXJuYWwud3JpdGUoXCIvVmlld2VyUHJlZmVyZW5jZXNcXG48PFxcblwiK2Uuam9pbihcIlxcblwiKStcIlxcbj4+XCIpfSkpLHRoaXMuaW50ZXJuYWwudmlld2VycHJlZmVyZW5jZXMuaXNTdWJzY3JpYmVkPSEwKSx0aGlzLmludGVybmFsLnZpZXdlcnByZWZlcmVuY2VzLmNvbmZpZ3VyYXRpb249bix0aGlzfSxcbi8qKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQGxpY2Vuc2VcbiAqIGpzUERGIFhNUCBtZXRhZGF0YSBwbHVnaW5cbiAqIENvcHlyaWdodCAoYykgMjAxNiBKdXNzaSBVdHVuZW4sIHUtanVzc2lAc3VvbWkyNC5maVxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4gKiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbiAqIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuZnVuY3Rpb24odCl7dmFyIGU9ZnVuY3Rpb24oKXt2YXIgdD0nPHJkZjpSREYgeG1sbnM6cmRmPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zI1wiPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PVwiXCIgeG1sbnM6anNwZGY9XCInK3RoaXMuaW50ZXJuYWwuX19tZXRhZGF0YV9fLm5hbWVzcGFjZXVyaSsnXCI+PGpzcGRmOm1ldGFkYXRhPicsZT11bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoJzx4OnhtcG1ldGEgeG1sbnM6eD1cImFkb2JlOm5zOm1ldGEvXCI+JykpLHI9dW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHQpKSxuPXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLmludGVybmFsLl9fbWV0YWRhdGFfXy5tZXRhZGF0YSkpLGk9dW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KFwiPC9qc3BkZjptZXRhZGF0YT48L3JkZjpEZXNjcmlwdGlvbj48L3JkZjpSREY+XCIpKSxhPXVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChcIjwveDp4bXBtZXRhPlwiKSksbz1yLmxlbmd0aCtuLmxlbmd0aCtpLmxlbmd0aCtlLmxlbmd0aCthLmxlbmd0aDt0aGlzLmludGVybmFsLl9fbWV0YWRhdGFfXy5tZXRhZGF0YV9vYmplY3RfbnVtYmVyPXRoaXMuaW50ZXJuYWwubmV3T2JqZWN0KCksdGhpcy5pbnRlcm5hbC53cml0ZShcIjw8IC9UeXBlIC9NZXRhZGF0YSAvU3VidHlwZSAvWE1MIC9MZW5ndGggXCIrbytcIiA+PlwiKSx0aGlzLmludGVybmFsLndyaXRlKFwic3RyZWFtXCIpLHRoaXMuaW50ZXJuYWwud3JpdGUoZStyK24raSthKSx0aGlzLmludGVybmFsLndyaXRlKFwiZW5kc3RyZWFtXCIpLHRoaXMuaW50ZXJuYWwud3JpdGUoXCJlbmRvYmpcIil9LHI9ZnVuY3Rpb24oKXt0aGlzLmludGVybmFsLl9fbWV0YWRhdGFfXy5tZXRhZGF0YV9vYmplY3RfbnVtYmVyJiZ0aGlzLmludGVybmFsLndyaXRlKFwiL01ldGFkYXRhIFwiK3RoaXMuaW50ZXJuYWwuX19tZXRhZGF0YV9fLm1ldGFkYXRhX29iamVjdF9udW1iZXIrXCIgMCBSXCIpfTt0LmFkZE1ldGFkYXRhPWZ1bmN0aW9uKHQsbil7cmV0dXJuIHZvaWQgMD09PXRoaXMuaW50ZXJuYWwuX19tZXRhZGF0YV9fJiYodGhpcy5pbnRlcm5hbC5fX21ldGFkYXRhX189e21ldGFkYXRhOnQsbmFtZXNwYWNldXJpOm58fFwiaHR0cDovL2pzcGRmLmRlZmF1bHQubmFtZXNwYWNldXJpL1wifSx0aGlzLmludGVybmFsLmV2ZW50cy5zdWJzY3JpYmUoXCJwdXRDYXRhbG9nXCIsciksdGhpcy5pbnRlcm5hbC5ldmVudHMuc3Vic2NyaWJlKFwicG9zdFB1dFJlc291cmNlc1wiLGUpKSx0aGlzfX0oRS5BUEkpLGZ1bmN0aW9uKHQpe3ZhciBlPXQuQVBJLHI9ZS5wZGZFc2NhcGUxNj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgcixuPWUubWV0YWRhdGEuVW5pY29kZS53aWR0aHMsaT1bXCJcIixcIjBcIixcIjAwXCIsXCIwMDBcIixcIjAwMDBcIl0sYT1bXCJcIl0sbz0wLHM9dC5sZW5ndGg7bzxzOysrbyl7aWYocj1lLm1ldGFkYXRhLmNoYXJhY3RlclRvR2x5cGgodC5jaGFyQ29kZUF0KG8pKSxlLm1ldGFkYXRhLmdseUlkc1VzZWQucHVzaChyKSxlLm1ldGFkYXRhLnRvVW5pY29kZVtyXT10LmNoYXJDb2RlQXQobyksLTE9PW4uaW5kZXhPZihyKSYmKG4ucHVzaChyKSxuLnB1c2goW3BhcnNlSW50KGUubWV0YWRhdGEud2lkdGhPZkdseXBoKHIpLDEwKV0pKSxcIjBcIj09cilyZXR1cm4gYS5qb2luKFwiXCIpO3I9ci50b1N0cmluZygxNiksYS5wdXNoKGlbNC1yLmxlbmd0aF0scil9cmV0dXJuIGEuam9pbihcIlwiKX0sbj1mdW5jdGlvbih0KXt2YXIgZSxyLG4saSxhLG8scztmb3IoYT1cIi9DSURJbml0IC9Qcm9jU2V0IGZpbmRyZXNvdXJjZSBiZWdpblxcbjEyIGRpY3QgYmVnaW5cXG5iZWdpbmNtYXBcXG4vQ0lEU3lzdGVtSW5mbyA8PFxcbiAgL1JlZ2lzdHJ5IChBZG9iZSlcXG4gIC9PcmRlcmluZyAoVUNTKVxcbiAgL1N1cHBsZW1lbnQgMFxcbj4+IGRlZlxcbi9DTWFwTmFtZSAvQWRvYmUtSWRlbnRpdHktVUNTIGRlZlxcbi9DTWFwVHlwZSAyIGRlZlxcbjEgYmVnaW5jb2Rlc3BhY2VyYW5nZVxcbjwwMDAwPjxmZmZmPlxcbmVuZGNvZGVzcGFjZXJhbmdlXCIsbj1bXSxvPTAscz0ocj1PYmplY3Qua2V5cyh0KS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiB0LWV9KSkpLmxlbmd0aDtvPHM7bysrKWU9cltvXSxuLmxlbmd0aD49MTAwJiYoYSs9XCJcXG5cIituLmxlbmd0aCtcIiBiZWdpbmJmY2hhclxcblwiK24uam9pbihcIlxcblwiKStcIlxcbmVuZGJmY2hhclwiLG49W10pLHZvaWQgMCE9PXRbZV0mJm51bGwhPT10W2VdJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0W2VdLnRvU3RyaW5nJiYoaT0oXCIwMDAwXCIrdFtlXS50b1N0cmluZygxNikpLnNsaWNlKC00KSxlPShcIjAwMDBcIisoK2UpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTQpLG4ucHVzaChcIjxcIitlK1wiPjxcIitpK1wiPlwiKSk7cmV0dXJuIG4ubGVuZ3RoJiYoYSs9XCJcXG5cIituLmxlbmd0aCtcIiBiZWdpbmJmY2hhclxcblwiK24uam9pbihcIlxcblwiKStcIlxcbmVuZGJmY2hhclxcblwiKSxhKz1cImVuZGNtYXBcXG5DTWFwTmFtZSBjdXJyZW50ZGljdCAvQ01hcCBkZWZpbmVyZXNvdXJjZSBwb3BcXG5lbmRcXG5lbmRcIn07ZS5ldmVudHMucHVzaChbXCJwdXRGb250XCIsZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe3ZhciByPWUuZm9udCxpPWUub3V0LGE9ZS5uZXdPYmplY3Qsbz1lLnB1dFN0cmVhbTtpZihyLm1ldGFkYXRhIGluc3RhbmNlb2YgdC5BUEkuVFRGRm9udCYmXCJJZGVudGl0eS1IXCI9PT1yLmVuY29kaW5nKXtmb3IodmFyIHM9ci5tZXRhZGF0YS5Vbmljb2RlLndpZHRocyxjPXIubWV0YWRhdGEuc3Vic2V0LmVuY29kZShyLm1ldGFkYXRhLmdseUlkc1VzZWQsMSksdT1cIlwiLGg9MDtoPGMubGVuZ3RoO2grKyl1Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKGNbaF0pO3ZhciBsPWEoKTtvKHtkYXRhOnUsYWRkTGVuZ3RoMTohMCxvYmplY3RJZDpsfSksaShcImVuZG9ialwiKTt2YXIgZj1hKCk7byh7ZGF0YTpuKHIubWV0YWRhdGEudG9Vbmljb2RlKSxhZGRMZW5ndGgxOiEwLG9iamVjdElkOmZ9KSxpKFwiZW5kb2JqXCIpO3ZhciBkPWEoKTtpKFwiPDxcIiksaShcIi9UeXBlIC9Gb250RGVzY3JpcHRvclwiKSxpKFwiL0ZvbnROYW1lIC9cIitGKHIuZm9udE5hbWUpKSxpKFwiL0ZvbnRGaWxlMiBcIitsK1wiIDAgUlwiKSxpKFwiL0ZvbnRCQm94IFwiK3QuQVBJLlBERk9iamVjdC5jb252ZXJ0KHIubWV0YWRhdGEuYmJveCkpLGkoXCIvRmxhZ3MgXCIrci5tZXRhZGF0YS5mbGFncyksaShcIi9TdGVtViBcIityLm1ldGFkYXRhLnN0ZW1WKSxpKFwiL0l0YWxpY0FuZ2xlIFwiK3IubWV0YWRhdGEuaXRhbGljQW5nbGUpLGkoXCIvQXNjZW50IFwiK3IubWV0YWRhdGEuYXNjZW5kZXIpLGkoXCIvRGVzY2VudCBcIityLm1ldGFkYXRhLmRlY2VuZGVyKSxpKFwiL0NhcEhlaWdodCBcIityLm1ldGFkYXRhLmNhcEhlaWdodCksaShcIj4+XCIpLGkoXCJlbmRvYmpcIik7dmFyIHA9YSgpO2koXCI8PFwiKSxpKFwiL1R5cGUgL0ZvbnRcIiksaShcIi9CYXNlRm9udCAvXCIrRihyLmZvbnROYW1lKSksaShcIi9Gb250RGVzY3JpcHRvciBcIitkK1wiIDAgUlwiKSxpKFwiL1cgXCIrdC5BUEkuUERGT2JqZWN0LmNvbnZlcnQocykpLGkoXCIvQ0lEVG9HSURNYXAgL0lkZW50aXR5XCIpLGkoXCIvRFcgMTAwMFwiKSxpKFwiL1N1YnR5cGUgL0NJREZvbnRUeXBlMlwiKSxpKFwiL0NJRFN5c3RlbUluZm9cIiksaShcIjw8XCIpLGkoXCIvU3VwcGxlbWVudCAwXCIpLGkoXCIvUmVnaXN0cnkgKEFkb2JlKVwiKSxpKFwiL09yZGVyaW5nIChcIityLmVuY29kaW5nK1wiKVwiKSxpKFwiPj5cIiksaShcIj4+XCIpLGkoXCJlbmRvYmpcIiksci5vYmplY3ROdW1iZXI9YSgpLGkoXCI8PFwiKSxpKFwiL1R5cGUgL0ZvbnRcIiksaShcIi9TdWJ0eXBlIC9UeXBlMFwiKSxpKFwiL1RvVW5pY29kZSBcIitmK1wiIDAgUlwiKSxpKFwiL0Jhc2VGb250IC9cIitGKHIuZm9udE5hbWUpKSxpKFwiL0VuY29kaW5nIC9cIityLmVuY29kaW5nKSxpKFwiL0Rlc2NlbmRhbnRGb250cyBbXCIrcCtcIiAwIFJdXCIpLGkoXCI+PlwiKSxpKFwiZW5kb2JqXCIpLHIuaXNBbHJlYWR5UHV0dGVkPSEwfX0oZSl9XSk7ZS5ldmVudHMucHVzaChbXCJwdXRGb250XCIsZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKGUpe3ZhciByPWUuZm9udCxpPWUub3V0LGE9ZS5uZXdPYmplY3Qsbz1lLnB1dFN0cmVhbTtpZihyLm1ldGFkYXRhIGluc3RhbmNlb2YgdC5BUEkuVFRGRm9udCYmXCJXaW5BbnNpRW5jb2RpbmdcIj09PXIuZW5jb2Rpbmcpe2Zvcih2YXIgcz1yLm1ldGFkYXRhLnJhd0RhdGEsYz1cIlwiLHU9MDt1PHMubGVuZ3RoO3UrKyljKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHNbdV0pO3ZhciBoPWEoKTtvKHtkYXRhOmMsYWRkTGVuZ3RoMTohMCxvYmplY3RJZDpofSksaShcImVuZG9ialwiKTt2YXIgbD1hKCk7byh7ZGF0YTpuKHIubWV0YWRhdGEudG9Vbmljb2RlKSxhZGRMZW5ndGgxOiEwLG9iamVjdElkOmx9KSxpKFwiZW5kb2JqXCIpO3ZhciBmPWEoKTtpKFwiPDxcIiksaShcIi9EZXNjZW50IFwiK3IubWV0YWRhdGEuZGVjZW5kZXIpLGkoXCIvQ2FwSGVpZ2h0IFwiK3IubWV0YWRhdGEuY2FwSGVpZ2h0KSxpKFwiL1N0ZW1WIFwiK3IubWV0YWRhdGEuc3RlbVYpLGkoXCIvVHlwZSAvRm9udERlc2NyaXB0b3JcIiksaShcIi9Gb250RmlsZTIgXCIraCtcIiAwIFJcIiksaShcIi9GbGFncyA5NlwiKSxpKFwiL0ZvbnRCQm94IFwiK3QuQVBJLlBERk9iamVjdC5jb252ZXJ0KHIubWV0YWRhdGEuYmJveCkpLGkoXCIvRm9udE5hbWUgL1wiK0Yoci5mb250TmFtZSkpLGkoXCIvSXRhbGljQW5nbGUgXCIrci5tZXRhZGF0YS5pdGFsaWNBbmdsZSksaShcIi9Bc2NlbnQgXCIrci5tZXRhZGF0YS5hc2NlbmRlciksaShcIj4+XCIpLGkoXCJlbmRvYmpcIiksci5vYmplY3ROdW1iZXI9YSgpO2Zvcih2YXIgZD0wO2Q8ci5tZXRhZGF0YS5obXR4LndpZHRocy5sZW5ndGg7ZCsrKXIubWV0YWRhdGEuaG10eC53aWR0aHNbZF09cGFyc2VJbnQoci5tZXRhZGF0YS5obXR4LndpZHRoc1tkXSooMWUzL3IubWV0YWRhdGEuaGVhZC51bml0c1BlckVtKSk7aShcIjw8L1N1YnR5cGUvVHJ1ZVR5cGUvVHlwZS9Gb250L1RvVW5pY29kZSBcIitsK1wiIDAgUi9CYXNlRm9udC9cIitGKHIuZm9udE5hbWUpK1wiL0ZvbnREZXNjcmlwdG9yIFwiK2YrXCIgMCBSL0VuY29kaW5nL1wiK3IuZW5jb2RpbmcrXCIgL0ZpcnN0Q2hhciAyOSAvTGFzdENoYXIgMjU1IC9XaWR0aHMgXCIrdC5BUEkuUERGT2JqZWN0LmNvbnZlcnQoci5tZXRhZGF0YS5obXR4LndpZHRocykrXCI+PlwiKSxpKFwiZW5kb2JqXCIpLHIuaXNBbHJlYWR5UHV0dGVkPSEwfX0oZSl9XSk7dmFyIGk9ZnVuY3Rpb24odCl7dmFyIGUsbj10LnRleHR8fFwiXCIsaT10LngsYT10Lnksbz10Lm9wdGlvbnN8fHt9LHM9dC5tdXRleHx8e30sYz1zLnBkZkVzY2FwZSx1PXMuYWN0aXZlRm9udEtleSxoPXMuZm9udHMsbD11LGY9XCJcIixkPTAscD1cIlwiLGc9aFtsXS5lbmNvZGluZztpZihcIklkZW50aXR5LUhcIiE9PWhbbF0uZW5jb2RpbmcpcmV0dXJue3RleHQ6bix4OmkseTphLG9wdGlvbnM6byxtdXRleDpzfTtmb3IocD1uLGw9dSxBcnJheS5pc0FycmF5KG4pJiYocD1uWzBdKSxkPTA7ZDxwLmxlbmd0aDtkKz0xKWhbbF0ubWV0YWRhdGEuaGFzT3duUHJvcGVydHkoXCJjbWFwXCIpJiYoZT1oW2xdLm1ldGFkYXRhLmNtYXAudW5pY29kZS5jb2RlTWFwW3BbZF0uY2hhckNvZGVBdCgwKV0pLGV8fHBbZF0uY2hhckNvZGVBdCgwKTwyNTYmJmhbbF0ubWV0YWRhdGEuaGFzT3duUHJvcGVydHkoXCJVbmljb2RlXCIpP2YrPXBbZF06Zis9XCJcIjt2YXIgbT1cIlwiO3JldHVybiBwYXJzZUludChsLnNsaWNlKDEpKTwxNHx8XCJXaW5BbnNpRW5jb2RpbmdcIj09PWc/bT1jKGYsbCkuc3BsaXQoXCJcIikubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KX0pKS5qb2luKFwiXCIpOlwiSWRlbnRpdHktSFwiPT09ZyYmKG09cihmLGhbbF0pKSxzLmlzSGV4PSEwLHt0ZXh0Om0seDppLHk6YSxvcHRpb25zOm8sbXV0ZXg6c319O2UuZXZlbnRzLnB1c2goW1wicG9zdFByb2Nlc3NUZXh0XCIsZnVuY3Rpb24odCl7dmFyIGU9dC50ZXh0fHxcIlwiLHI9W10sbj17dGV4dDplLHg6dC54LHk6dC55LG9wdGlvbnM6dC5vcHRpb25zLG11dGV4OnQubXV0ZXh9O2lmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciBhPTA7Zm9yKGE9MDthPGUubGVuZ3RoO2ErPTEpQXJyYXkuaXNBcnJheShlW2FdKSYmMz09PWVbYV0ubGVuZ3RoP3IucHVzaChbaShPYmplY3QuYXNzaWduKHt9LG4se3RleHQ6ZVthXVswXX0pKS50ZXh0LGVbYV1bMV0sZVthXVsyXV0pOnIucHVzaChpKE9iamVjdC5hc3NpZ24oe30sbix7dGV4dDplW2FdfSkpLnRleHQpO3QudGV4dD1yfWVsc2UgdC50ZXh0PWkoT2JqZWN0LmFzc2lnbih7fSxuLHt0ZXh0OmV9KSkudGV4dH1dKX0oRSksXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBqc1BERiB2aXJ0dWFsIEZpbGVTeXN0ZW0gZnVuY3Rpb25hbGl0eVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZVxuICovXG5mdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT10aGlzLmludGVybmFsLnZGUyYmKHRoaXMuaW50ZXJuYWwudkZTPXt9KSwhMH07dC5leGlzdHNGaWxlSW5WRlM9ZnVuY3Rpb24odCl7cmV0dXJuIGUuY2FsbCh0aGlzKSx2b2lkIDAhPT10aGlzLmludGVybmFsLnZGU1t0XX0sdC5hZGRGaWxlVG9WRlM9ZnVuY3Rpb24odCxyKXtyZXR1cm4gZS5jYWxsKHRoaXMpLHRoaXMuaW50ZXJuYWwudkZTW3RdPXIsdGhpc30sdC5nZXRGaWxlRnJvbVZGUz1mdW5jdGlvbih0KXtyZXR1cm4gZS5jYWxsKHRoaXMpLHZvaWQgMCE9PXRoaXMuaW50ZXJuYWwudkZTW3RdP3RoaXMuaW50ZXJuYWwudkZTW3RdOm51bGx9fShFLkFQSSksXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBVbmljb2RlIEJpZGkgRW5naW5lIGJhc2VkIG9uIHRoZSB3b3JrIG9mIEFsZXggU2hlbnNpcyAoQGFzdGhlbnNpcylcbiAqIE1JVCBMaWNlbnNlXG4gKi9cbmZ1bmN0aW9uKHQpe3QuX19iaWRpRW5naW5lX189dC5wcm90b3R5cGUuX19iaWRpRW5naW5lX189ZnVuY3Rpb24odCl7dmFyIHIsbixpLGEsbyxzLGMsdT1lLGg9W1swLDMsMCwxLDAsMCwwXSxbMCwzLDAsMSwyLDIsMF0sWzAsMywwLDE3LDIsMCwxXSxbMCwzLDUsNSw0LDEsMF0sWzAsMywyMSwyMSw0LDAsMV0sWzAsMyw1LDUsNCwyLDBdXSxsPVtbMiwwLDEsMSwwLDEsMF0sWzIsMCwxLDEsMCwyLDBdLFsyLDAsMiwxLDMsMiwwXSxbMiwwLDIsMzMsMywxLDFdXSxmPXtMOjAsUjoxLEVOOjIsQU46MyxOOjQsQjo1LFM6Nn0sZD17MDowLDU6MSw2OjIsNzozLDMyOjQsMjUxOjUsMjU0OjYsMjU1Ojd9LHA9W1wiKFwiLFwiKVwiLFwiKFwiLFwiPFwiLFwiPlwiLFwiPFwiLFwiW1wiLFwiXVwiLFwiW1wiLFwie1wiLFwifVwiLFwie1wiLFwiwqtcIixcIsK7XCIsXCLCq1wiLFwi4oC5XCIsXCLigLpcIixcIuKAuVwiLFwi4oGFXCIsXCLigYZcIixcIuKBhVwiLFwi4oG9XCIsXCLigb5cIixcIuKBvVwiLFwi4oKNXCIsXCLigo5cIixcIuKCjVwiLFwi4omkXCIsXCLiiaVcIixcIuKJpFwiLFwi4oypXCIsXCLijKpcIixcIuKMqVwiLFwi77mZXCIsXCLvuZpcIixcIu+5mVwiLFwi77mbXCIsXCLvuZxcIixcIu+5m1wiLFwi77mdXCIsXCLvuZ5cIixcIu+5nVwiLFwi77mkXCIsXCLvuaVcIixcIu+5pFwiXSxnPW5ldyBSZWdFeHAoL14oWzEtNHw5XXwxWzAtOV18MlswLTldfDNbMDE2OF18NFswNDU4OV18NVswMTJdfDdbNzhdfDE1OXwxNlswLTldfDE3WzAtMl18MjFbNTY5XXwyMlswMzQ4OV18MjUwKSQvKSxtPSExLHY9MDt0aGlzLl9fYmlkaUVuZ2luZV9fPXt9O3ZhciBiPWZ1bmN0aW9uKHQpe3ZhciBlPXQuY2hhckNvZGVBdCgpLHI9ZT4+OCxuPWRbcl07cmV0dXJuIHZvaWQgMCE9PW4/dVsyNTYqbisoMjU1JmUpXToyNTI9PT1yfHwyNTM9PT1yP1wiQUxcIjpnLnRlc3Qocik/XCJMXCI6OD09PXI/XCJSXCI6XCJOXCJ9LHk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLHI9MDtyPHQubGVuZ3RoO3IrKyl7aWYoXCJMXCI9PT0oZT1iKHQuY2hhckF0KHIpKSkpcmV0dXJuITE7aWYoXCJSXCI9PT1lKXJldHVybiEwfXJldHVybiExfSx3PWZ1bmN0aW9uKHQsZSxvLHMpe3ZhciBjLHUsaCxsLGY9ZVtzXTtzd2l0Y2goZil7Y2FzZVwiTFwiOmNhc2VcIlJcIjptPSExO2JyZWFrO2Nhc2VcIk5cIjpjYXNlXCJBTlwiOmJyZWFrO2Nhc2VcIkVOXCI6bSYmKGY9XCJBTlwiKTticmVhaztjYXNlXCJBTFwiOm09ITAsZj1cIlJcIjticmVhaztjYXNlXCJXU1wiOmY9XCJOXCI7YnJlYWs7Y2FzZVwiQ1NcIjpzPDF8fHMrMT49ZS5sZW5ndGh8fFwiRU5cIiE9PShjPW9bcy0xXSkmJlwiQU5cIiE9PWN8fFwiRU5cIiE9PSh1PWVbcysxXSkmJlwiQU5cIiE9PXU/Zj1cIk5cIjptJiYodT1cIkFOXCIpLGY9dT09PWM/dTpcIk5cIjticmVhaztjYXNlXCJFU1wiOmY9XCJFTlwiPT09KGM9cz4wP29bcy0xXTpcIkJcIikmJnMrMTxlLmxlbmd0aCYmXCJFTlwiPT09ZVtzKzFdP1wiRU5cIjpcIk5cIjticmVhaztjYXNlXCJFVFwiOmlmKHM+MCYmXCJFTlwiPT09b1tzLTFdKXtmPVwiRU5cIjticmVha31pZihtKXtmPVwiTlwiO2JyZWFrfWZvcihoPXMrMSxsPWUubGVuZ3RoO2g8bCYmXCJFVFwiPT09ZVtoXTspaCsrO2Y9aDxsJiZcIkVOXCI9PT1lW2hdP1wiRU5cIjpcIk5cIjticmVhaztjYXNlXCJOU01cIjppZihpJiYhYSl7Zm9yKGw9ZS5sZW5ndGgsaD1zKzE7aDxsJiZcIk5TTVwiPT09ZVtoXTspaCsrO2lmKGg8bCl7dmFyIGQ9dFtzXSxwPWQ+PTE0MjUmJmQ8PTIzMDN8fDY0Mjg2PT09ZDtpZihjPWVbaF0scCYmKFwiUlwiPT09Y3x8XCJBTFwiPT09Yykpe2Y9XCJSXCI7YnJlYWt9fX1mPXM8MXx8XCJCXCI9PT0oYz1lW3MtMV0pP1wiTlwiOm9bcy0xXTticmVhaztjYXNlXCJCXCI6bT0hMSxyPSEwLGY9djticmVhaztjYXNlXCJTXCI6bj0hMCxmPVwiTlwiO2JyZWFrO2Nhc2VcIkxSRVwiOmNhc2VcIlJMRVwiOmNhc2VcIkxST1wiOmNhc2VcIlJMT1wiOmNhc2VcIlBERlwiOm09ITE7YnJlYWs7Y2FzZVwiQk5cIjpmPVwiTlwifXJldHVybiBmfSxOPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10LnNwbGl0KFwiXCIpO3JldHVybiByJiZMKG4scix7aGlMZXZlbDp2fSksbi5yZXZlcnNlKCksZSYmZS5yZXZlcnNlKCksbi5qb2luKFwiXCIpfSxMPWZ1bmN0aW9uKHQsZSxpKXt2YXIgYSxvLHMsYyx1LGQ9LTEscD10Lmxlbmd0aCxnPTAseT1bXSxOPXY/bDpoLEw9W107Zm9yKG09ITEscj0hMSxuPSExLG89MDtvPHA7bysrKUxbb109Yih0W29dKTtmb3Iocz0wO3M8cDtzKyspe2lmKHU9Zyx5W3NdPXcodCxMLHkscyksYT0yNDAmKGc9Tlt1XVtmW3lbc11dXSksZyY9MTUsZVtzXT1jPU5bZ11bNV0sYT4wKWlmKDE2PT09YSl7Zm9yKG89ZDtvPHM7bysrKWVbb109MTtkPS0xfWVsc2UgZD0tMTtpZihOW2ddWzZdKS0xPT09ZCYmKGQ9cyk7ZWxzZSBpZihkPi0xKXtmb3Iobz1kO288cztvKyspZVtvXT1jO2Q9LTF9XCJCXCI9PT1MW3NdJiYoZVtzXT0wKSxpLmhpTGV2ZWx8PWN9biYmZnVuY3Rpb24odCxlLHIpe2Zvcih2YXIgbj0wO248cjtuKyspaWYoXCJTXCI9PT10W25dKXtlW25dPXY7Zm9yKHZhciBpPW4tMTtpPj0wJiZcIldTXCI9PT10W2ldO2ktLSllW2ldPXZ9fShMLGUscCl9LEE9ZnVuY3Rpb24odCxlLG4saSxhKXtpZighKGEuaGlMZXZlbDx0KSl7aWYoMT09PXQmJjE9PT12JiYhcilyZXR1cm4gZS5yZXZlcnNlKCksdm9pZChuJiZuLnJldmVyc2UoKSk7Zm9yKHZhciBvLHMsYyx1LGg9ZS5sZW5ndGgsbD0wO2w8aDspe2lmKGlbbF0+PXQpe2ZvcihjPWwrMTtjPGgmJmlbY10+PXQ7KWMrKztmb3IodT1sLHM9Yy0xO3U8czt1Kysscy0tKW89ZVt1XSxlW3VdPWVbc10sZVtzXT1vLG4mJihvPW5bdV0sblt1XT1uW3NdLG5bc109byk7bD1jfWwrK319fSx4PWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj10LnNwbGl0KFwiXCIpLGk9e2hpTGV2ZWw6dn07cmV0dXJuIHJ8fChyPVtdKSxMKG4scixpKSxmdW5jdGlvbih0LGUscil7aWYoMCE9PXIuaGlMZXZlbCYmYylmb3IodmFyIG4saT0wO2k8dC5sZW5ndGg7aSsrKTE9PT1lW2ldJiYobj1wLmluZGV4T2YodFtpXSkpPj0wJiYodFtpXT1wW24rMV0pfShuLHIsaSksQSgyLG4sZSxyLGkpLEEoMSxuLGUscixpKSxuLmpvaW4oXCJcIil9O3JldHVybiB0aGlzLl9fYmlkaUVuZ2luZV9fLmRvQmlkaVJlb3JkZXI9ZnVuY3Rpb24odCxlLHIpe2lmKGZ1bmN0aW9uKHQsZSl7aWYoZSlmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyllW3JdPXI7dm9pZCAwPT09YSYmKGE9eSh0KSksdm9pZCAwPT09cyYmKHM9eSh0KSl9KHQsZSksaXx8IW98fHMpaWYoaSYmbyYmYV5zKXY9YT8xOjAsdD1OKHQsZSxyKTtlbHNlIGlmKCFpJiZvJiZzKXY9YT8xOjAsdD14KHQsZSxyKSx0PU4odCxlKTtlbHNlIGlmKCFpfHxhfHxvfHxzKXtpZihpJiYhbyYmYV5zKXQ9Tih0LGUpLGE/KHY9MCx0PXgodCxlLHIpKToodj0xLHQ9eCh0LGUsciksdD1OKHQsZSkpO2Vsc2UgaWYoaSYmYSYmIW8mJnMpdj0xLHQ9eCh0LGUsciksdD1OKHQsZSk7ZWxzZSBpZighaSYmIW8mJmFecyl7dmFyIG49YzthPyh2PTEsdD14KHQsZSxyKSx2PTAsYz0hMSx0PXgodCxlLHIpLGM9bik6KHY9MCx0PXgodCxlLHIpLHQ9Tih0LGUpLHY9MSxjPSExLHQ9eCh0LGUsciksYz1uLHQ9Tih0LGUpKX19ZWxzZSB2PTAsdD14KHQsZSxyKTtlbHNlIHY9YT8xOjAsdD14KHQsZSxyKTtyZXR1cm4gdH0sdGhpcy5fX2JpZGlFbmdpbmVfXy5zZXRPcHRpb25zPWZ1bmN0aW9uKHQpe3QmJihpPXQuaXNJbnB1dFZpc3VhbCxvPXQuaXNPdXRwdXRWaXN1YWwsYT10LmlzSW5wdXRSdGwscz10LmlzT3V0cHV0UnRsLGM9dC5pc1N5bW1ldHJpY1N3YXBwaW5nKX0sdGhpcy5fX2JpZGlFbmdpbmVfXy5zZXRPcHRpb25zKHQpLHRoaXMuX19iaWRpRW5naW5lX199O3ZhciBlPVtcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIlNcIixcIkJcIixcIlNcIixcIldTXCIsXCJCXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJcIixcIkJcIixcIkJcIixcIlNcIixcIldTXCIsXCJOXCIsXCJOXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJFU1wiLFwiQ1NcIixcIkVTXCIsXCJDU1wiLFwiQ1NcIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJDU1wiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJDU1wiLFwiTlwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIk5cIixcIk5cIixcIkJOXCIsXCJOXCIsXCJOXCIsXCJFVFwiLFwiRVRcIixcIkVOXCIsXCJFTlwiLFwiTlwiLFwiTFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiRU5cIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkVUXCIsXCJOXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJSXCIsXCJOU01cIixcIlJcIixcIk5TTVwiLFwiTlNNXCIsXCJSXCIsXCJOU01cIixcIk5TTVwiLFwiUlwiLFwiTlNNXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJOXCIsXCJOXCIsXCJBTFwiLFwiRVRcIixcIkVUXCIsXCJBTFwiLFwiQ1NcIixcIkFMXCIsXCJOXCIsXCJOXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiQUxcIixcIkFMXCIsXCJOXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiQU5cIixcIkFOXCIsXCJBTlwiLFwiRVRcIixcIkFOXCIsXCJBTlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlNNXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiQU5cIixcIk5cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIkFMXCIsXCJBTFwiLFwiTlNNXCIsXCJOU01cIixcIk5cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiQUxcIixcIkFMXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJOXCIsXCJBTFwiLFwiQUxcIixcIk5TTVwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlwiLFwiTlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiQUxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIlJcIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIlJcIixcIlJcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIlJcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIldTXCIsXCJXU1wiLFwiV1NcIixcIldTXCIsXCJXU1wiLFwiV1NcIixcIldTXCIsXCJXU1wiLFwiV1NcIixcIldTXCIsXCJXU1wiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiTFwiLFwiUlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiV1NcIixcIkJcIixcIkxSRVwiLFwiUkxFXCIsXCJQREZcIixcIkxST1wiLFwiUkxPXCIsXCJDU1wiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJDU1wiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiV1NcIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiTlwiLFwiTFJJXCIsXCJSTElcIixcIkZTSVwiLFwiUERJXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJCTlwiLFwiQk5cIixcIkJOXCIsXCJFTlwiLFwiTFwiLFwiTlwiLFwiTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRVNcIixcIkVTXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRVNcIixcIkVTXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJMXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiUlwiLFwiTlNNXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJSXCIsXCJFU1wiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiTlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiTlwiLFwiUlwiLFwiTlwiLFwiUlwiLFwiUlwiLFwiTlwiLFwiUlwiLFwiUlwiLFwiTlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiUlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5TTVwiLFwiTlNNXCIsXCJOU01cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkNTXCIsXCJOXCIsXCJDU1wiLFwiTlwiLFwiTlwiLFwiQ1NcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkVUXCIsXCJOXCIsXCJOXCIsXCJFU1wiLFwiRVNcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkVUXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJOXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJBTFwiLFwiQUxcIixcIkFMXCIsXCJOXCIsXCJOXCIsXCJCTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiRVRcIixcIkVUXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiRVNcIixcIkNTXCIsXCJFU1wiLFwiQ1NcIixcIkNTXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiRU5cIixcIkVOXCIsXCJFTlwiLFwiQ1NcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIkxcIixcIkxcIixcIkxcIixcIk5cIixcIk5cIixcIk5cIixcIkVUXCIsXCJFVFwiLFwiTlwiLFwiTlwiLFwiTlwiLFwiRVRcIixcIkVUXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCIsXCJOXCJdLHI9bmV3IHQuX19iaWRpRW5naW5lX18oe2lzSW5wdXRWaXN1YWw6ITB9KTt0LkFQSS5ldmVudHMucHVzaChbXCJwb3N0UHJvY2Vzc1RleHRcIixmdW5jdGlvbih0KXt2YXIgZT10LnRleHQsbj0odC54LHQueSx0Lm9wdGlvbnN8fHt9KSxpPSh0Lm11dGV4LG4ubGFuZyxbXSk7aWYobi5pc0lucHV0VmlzdWFsPVwiYm9vbGVhblwiIT10eXBlb2Ygbi5pc0lucHV0VmlzdWFsfHxuLmlzSW5wdXRWaXN1YWwsci5zZXRPcHRpb25zKG4pLFwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKSl7dmFyIGE9MDtmb3IoaT1bXSxhPTA7YTxlLmxlbmd0aDthKz0xKVwiW29iamVjdCBBcnJheV1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlW2FdKT9pLnB1c2goW3IuZG9CaWRpUmVvcmRlcihlW2FdWzBdKSxlW2FdWzFdLGVbYV1bMl1dKTppLnB1c2goW3IuZG9CaWRpUmVvcmRlcihlW2FdKV0pO3QudGV4dD1pfWVsc2UgdC50ZXh0PXIuZG9CaWRpUmVvcmRlcihlKTtyLnNldE9wdGlvbnMoe2lzSW5wdXRWaXN1YWw6ITB9KX1dKX0oRSksRS5BUEkuVFRGRm9udD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dmFyIGU7aWYodGhpcy5yYXdEYXRhPXQsZT10aGlzLmNvbnRlbnRzPW5ldyBuZSh0KSx0aGlzLmNvbnRlbnRzLnBvcz00LFwidHRjZlwiPT09ZS5yZWFkU3RyaW5nKDQpKXRocm93IG5ldyBFcnJvcihcIlRUQ0Ygbm90IHN1cHBvcnRlZC5cIik7ZS5wb3M9MCx0aGlzLnBhcnNlKCksdGhpcy5zdWJzZXQ9bmV3IExlKHRoaXMpLHRoaXMucmVnaXN0ZXJUVEYoKX1yZXR1cm4gdC5vcGVuPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgdChlKX0sdC5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXJlY3Rvcnk9bmV3IGllKHRoaXMuY29udGVudHMpLHRoaXMuaGVhZD1uZXcgc2UodGhpcyksdGhpcy5uYW1lPW5ldyBwZSh0aGlzKSx0aGlzLmNtYXA9bmV3IHVlKHRoaXMpLHRoaXMudG9Vbmljb2RlPXt9LHRoaXMuaGhlYT1uZXcgaGUodGhpcyksdGhpcy5tYXhwPW5ldyBnZSh0aGlzKSx0aGlzLmhtdHg9bmV3IG1lKHRoaXMpLHRoaXMucG9zdD1uZXcgZmUodGhpcyksdGhpcy5vczI9bmV3IGxlKHRoaXMpLHRoaXMubG9jYT1uZXcgTmUodGhpcyksdGhpcy5nbHlmPW5ldyBiZSh0aGlzKSx0aGlzLmFzY2VuZGVyPXRoaXMub3MyLmV4aXN0cyYmdGhpcy5vczIuYXNjZW5kZXJ8fHRoaXMuaGhlYS5hc2NlbmRlcix0aGlzLmRlY2VuZGVyPXRoaXMub3MyLmV4aXN0cyYmdGhpcy5vczIuZGVjZW5kZXJ8fHRoaXMuaGhlYS5kZWNlbmRlcix0aGlzLmxpbmVHYXA9dGhpcy5vczIuZXhpc3RzJiZ0aGlzLm9zMi5saW5lR2FwfHx0aGlzLmhoZWEubGluZUdhcCx0aGlzLmJib3g9W3RoaXMuaGVhZC54TWluLHRoaXMuaGVhZC55TWluLHRoaXMuaGVhZC54TWF4LHRoaXMuaGVhZC55TWF4XX0sdC5wcm90b3R5cGUucmVnaXN0ZXJUVEY9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbixpO2lmKHRoaXMuc2NhbGVGYWN0b3I9MWUzL3RoaXMuaGVhZC51bml0c1BlckVtLHRoaXMuYmJveD1mdW5jdGlvbigpe3ZhciBlLHIsbixpO2ZvcihpPVtdLGU9MCxyPShuPXRoaXMuYmJveCkubGVuZ3RoO2U8cjtlKyspdD1uW2VdLGkucHVzaChNYXRoLnJvdW5kKHQqdGhpcy5zY2FsZUZhY3RvcikpO3JldHVybiBpfS5jYWxsKHRoaXMpLHRoaXMuc3RlbVY9MCx0aGlzLnBvc3QuZXhpc3RzPyhyPTI1NSYobj10aGlzLnBvc3QuaXRhbGljX2FuZ2xlKSwwIT0oMzI3NjgmKGU9bj4+MTYpKSYmKGU9LSgxKyg2NTUzNV5lKSkpLHRoaXMuaXRhbGljQW5nbGU9KyhlK1wiLlwiK3IpKTp0aGlzLml0YWxpY0FuZ2xlPTAsdGhpcy5hc2NlbmRlcj1NYXRoLnJvdW5kKHRoaXMuYXNjZW5kZXIqdGhpcy5zY2FsZUZhY3RvciksdGhpcy5kZWNlbmRlcj1NYXRoLnJvdW5kKHRoaXMuZGVjZW5kZXIqdGhpcy5zY2FsZUZhY3RvciksdGhpcy5saW5lR2FwPU1hdGgucm91bmQodGhpcy5saW5lR2FwKnRoaXMuc2NhbGVGYWN0b3IpLHRoaXMuY2FwSGVpZ2h0PXRoaXMub3MyLmV4aXN0cyYmdGhpcy5vczIuY2FwSGVpZ2h0fHx0aGlzLmFzY2VuZGVyLHRoaXMueEhlaWdodD10aGlzLm9zMi5leGlzdHMmJnRoaXMub3MyLnhIZWlnaHR8fDAsdGhpcy5mYW1pbHlDbGFzcz0odGhpcy5vczIuZXhpc3RzJiZ0aGlzLm9zMi5mYW1pbHlDbGFzc3x8MCk+PjgsdGhpcy5pc1NlcmlmPTE9PT0oaT10aGlzLmZhbWlseUNsYXNzKXx8Mj09PWl8fDM9PT1pfHw0PT09aXx8NT09PWl8fDc9PT1pLHRoaXMuaXNTY3JpcHQ9MTA9PT10aGlzLmZhbWlseUNsYXNzLHRoaXMuZmxhZ3M9MCx0aGlzLnBvc3QuaXNGaXhlZFBpdGNoJiYodGhpcy5mbGFnc3w9MSksdGhpcy5pc1NlcmlmJiYodGhpcy5mbGFnc3w9MiksdGhpcy5pc1NjcmlwdCYmKHRoaXMuZmxhZ3N8PTgpLDAhPT10aGlzLml0YWxpY0FuZ2xlJiYodGhpcy5mbGFnc3w9NjQpLHRoaXMuZmxhZ3N8PTMyLCF0aGlzLmNtYXAudW5pY29kZSl0aHJvdyBuZXcgRXJyb3IoXCJObyB1bmljb2RlIGNtYXAgZm9yIGZvbnRcIil9LHQucHJvdG90eXBlLmNoYXJhY3RlclRvR2x5cGg9ZnVuY3Rpb24odCl7dmFyIGU7cmV0dXJuKG51bGwhPShlPXRoaXMuY21hcC51bmljb2RlKT9lLmNvZGVNYXBbdF06dm9pZCAwKXx8MH0sdC5wcm90b3R5cGUud2lkdGhPZkdseXBoPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPTFlMy90aGlzLmhlYWQudW5pdHNQZXJFbSx0aGlzLmhtdHguZm9yR2x5cGgodCkuYWR2YW5jZSplfSx0LnByb3RvdHlwZS53aWR0aE9mU3RyaW5nPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbixpLGEsbztmb3IoYT0wLGk9MCxvPSh0PVwiXCIrdCkubGVuZ3RoOzA8PW8/aTxvOmk+bztpPTA8PW8/KytpOi0taSluPXQuY2hhckNvZGVBdChpKSxhKz10aGlzLndpZHRoT2ZHbHlwaCh0aGlzLmNoYXJhY3RlclRvR2x5cGgobikpK3IqKDFlMy9lKXx8MDtyZXR1cm4gYSooZS8xZTMpfSx0LnByb3RvdHlwZS5saW5lSGVpZ2h0PWZ1bmN0aW9uKHQsZSl7dmFyIHI7cmV0dXJuIG51bGw9PWUmJihlPSExKSxyPWU/dGhpcy5saW5lR2FwOjAsKHRoaXMuYXNjZW5kZXIrci10aGlzLmRlY2VuZGVyKS8xZTMqdH0sdH0oKTt2YXIgcmUsbmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuZGF0YT1udWxsIT10P3Q6W10sdGhpcy5wb3M9MCx0aGlzLmxlbmd0aD10aGlzLmRhdGEubGVuZ3RofXJldHVybiB0LnByb3RvdHlwZS5yZWFkQnl0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGFbdGhpcy5wb3MrK119LHQucHJvdG90eXBlLndyaXRlQnl0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhW3RoaXMucG9zKytdPXR9LHQucHJvdG90eXBlLnJlYWRVSW50MzI9ZnVuY3Rpb24oKXtyZXR1cm4gMTY3NzcyMTYqdGhpcy5yZWFkQnl0ZSgpKyh0aGlzLnJlYWRCeXRlKCk8PDE2KSsodGhpcy5yZWFkQnl0ZSgpPDw4KSt0aGlzLnJlYWRCeXRlKCl9LHQucHJvdG90eXBlLndyaXRlVUludDMyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLndyaXRlQnl0ZSh0Pj4+MjQmMjU1KSx0aGlzLndyaXRlQnl0ZSh0Pj4xNiYyNTUpLHRoaXMud3JpdGVCeXRlKHQ+PjgmMjU1KSx0aGlzLndyaXRlQnl0ZSgyNTUmdCl9LHQucHJvdG90eXBlLnJlYWRJbnQzMj1mdW5jdGlvbigpe3ZhciB0O3JldHVybih0PXRoaXMucmVhZFVJbnQzMigpKT49MjE0NzQ4MzY0OD90LTQyOTQ5NjcyOTY6dH0sdC5wcm90b3R5cGUud3JpdGVJbnQzMj1mdW5jdGlvbih0KXtyZXR1cm4gdDwwJiYodCs9NDI5NDk2NzI5NiksdGhpcy53cml0ZVVJbnQzMih0KX0sdC5wcm90b3R5cGUucmVhZFVJbnQxNj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnJlYWRCeXRlKCk8PDh8dGhpcy5yZWFkQnl0ZSgpfSx0LnByb3RvdHlwZS53cml0ZVVJbnQxNj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy53cml0ZUJ5dGUodD4+OCYyNTUpLHRoaXMud3JpdGVCeXRlKDI1NSZ0KX0sdC5wcm90b3R5cGUucmVhZEludDE2PWZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuKHQ9dGhpcy5yZWFkVUludDE2KCkpPj0zMjc2OD90LTY1NTM2OnR9LHQucHJvdG90eXBlLndyaXRlSW50MTY9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8MCYmKHQrPTY1NTM2KSx0aGlzLndyaXRlVUludDE2KHQpfSx0LnByb3RvdHlwZS5yZWFkU3RyaW5nPWZ1bmN0aW9uKHQpe3ZhciBlLHI7Zm9yKHI9W10sZT0wOzA8PXQ/ZTx0OmU+dDtlPTA8PXQ/KytlOi0tZSlyW2VdPVN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkQnl0ZSgpKTtyZXR1cm4gci5qb2luKFwiXCIpfSx0LnByb3RvdHlwZS53cml0ZVN0cmluZz1mdW5jdGlvbih0KXt2YXIgZSxyLG47Zm9yKG49W10sZT0wLHI9dC5sZW5ndGg7MDw9cj9lPHI6ZT5yO2U9MDw9cj8rK2U6LS1lKW4ucHVzaCh0aGlzLndyaXRlQnl0ZSh0LmNoYXJDb2RlQXQoZSkpKTtyZXR1cm4gbn0sdC5wcm90b3R5cGUucmVhZFNob3J0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmVhZEludDE2KCl9LHQucHJvdG90eXBlLndyaXRlU2hvcnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMud3JpdGVJbnQxNih0KX0sdC5wcm90b3R5cGUucmVhZExvbmdMb25nPWZ1bmN0aW9uKCl7dmFyIHQsZSxyLG4saSxhLG8scztyZXR1cm4gdD10aGlzLnJlYWRCeXRlKCksZT10aGlzLnJlYWRCeXRlKCkscj10aGlzLnJlYWRCeXRlKCksbj10aGlzLnJlYWRCeXRlKCksaT10aGlzLnJlYWRCeXRlKCksYT10aGlzLnJlYWRCeXRlKCksbz10aGlzLnJlYWRCeXRlKCkscz10aGlzLnJlYWRCeXRlKCksMTI4JnQ/LTEqKDcyMDU3NTk0MDM3OTI3OTQwKigyNTVedCkrMjgxNDc0OTc2NzEwNjU2KigyNTVeZSkrMTA5OTUxMTYyNzc3NiooMjU1XnIpKzQyOTQ5NjcyOTYqKDI1NV5uKSsxNjc3NzIxNiooMjU1XmkpKzY1NTM2KigyNTVeYSkrMjU2KigyNTVebykrKDI1NV5zKSsxKTo3MjA1NzU5NDAzNzkyNzk0MCp0KzI4MTQ3NDk3NjcxMDY1NiplKzEwOTk1MTE2Mjc3NzYqcis0Mjk0OTY3Mjk2Km4rMTY3NzcyMTYqaSs2NTUzNiphKzI1NipvK3N9LHQucHJvdG90eXBlLndyaXRlTG9uZ0xvbmc9ZnVuY3Rpb24odCl7dmFyIGUscjtyZXR1cm4gZT1NYXRoLmZsb29yKHQvNDI5NDk2NzI5Nikscj00Mjk0OTY3Mjk1JnQsdGhpcy53cml0ZUJ5dGUoZT4+MjQmMjU1KSx0aGlzLndyaXRlQnl0ZShlPj4xNiYyNTUpLHRoaXMud3JpdGVCeXRlKGU+PjgmMjU1KSx0aGlzLndyaXRlQnl0ZSgyNTUmZSksdGhpcy53cml0ZUJ5dGUocj4+MjQmMjU1KSx0aGlzLndyaXRlQnl0ZShyPj4xNiYyNTUpLHRoaXMud3JpdGVCeXRlKHI+PjgmMjU1KSx0aGlzLndyaXRlQnl0ZSgyNTUmcil9LHQucHJvdG90eXBlLnJlYWRJbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5yZWFkSW50MzIoKX0sdC5wcm90b3R5cGUud3JpdGVJbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMud3JpdGVJbnQzMih0KX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXt2YXIgZSxyO2ZvcihlPVtdLHI9MDswPD10P3I8dDpyPnQ7cj0wPD10PysrcjotLXIpZS5wdXNoKHRoaXMucmVhZEJ5dGUoKSk7cmV0dXJuIGV9LHQucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQpe3ZhciBlLHIsbixpO2ZvcihpPVtdLHI9MCxuPXQubGVuZ3RoO3I8bjtyKyspZT10W3JdLGkucHVzaCh0aGlzLndyaXRlQnl0ZShlKSk7cmV0dXJuIGl9LHR9KCksaWU9ZnVuY3Rpb24oKXt2YXIgdDtmdW5jdGlvbiBlKHQpe3ZhciBlLHIsbjtmb3IodGhpcy5zY2FsYXJUeXBlPXQucmVhZEludCgpLHRoaXMudGFibGVDb3VudD10LnJlYWRTaG9ydCgpLHRoaXMuc2VhcmNoUmFuZ2U9dC5yZWFkU2hvcnQoKSx0aGlzLmVudHJ5U2VsZWN0b3I9dC5yZWFkU2hvcnQoKSx0aGlzLnJhbmdlU2hpZnQ9dC5yZWFkU2hvcnQoKSx0aGlzLnRhYmxlcz17fSxyPTAsbj10aGlzLnRhYmxlQ291bnQ7MDw9bj9yPG46cj5uO3I9MDw9bj8rK3I6LS1yKWU9e3RhZzp0LnJlYWRTdHJpbmcoNCksY2hlY2tzdW06dC5yZWFkSW50KCksb2Zmc2V0OnQucmVhZEludCgpLGxlbmd0aDp0LnJlYWRJbnQoKX0sdGhpcy50YWJsZXNbZS50YWddPWV9cmV0dXJuIGUucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbihlKXt2YXIgcixuLGksYSxvLHMsYyx1LGgsbCxmLGQscDtmb3IocCBpbiBmPU9iamVjdC5rZXlzKGUpLmxlbmd0aCxzPU1hdGgubG9nKDIpLGg9MTYqTWF0aC5mbG9vcihNYXRoLmxvZyhmKS9zKSxhPU1hdGguZmxvb3IoaC9zKSx1PTE2KmYtaCwobj1uZXcgbmUpLndyaXRlSW50KHRoaXMuc2NhbGFyVHlwZSksbi53cml0ZVNob3J0KGYpLG4ud3JpdGVTaG9ydChoKSxuLndyaXRlU2hvcnQoYSksbi53cml0ZVNob3J0KHUpLGk9MTYqZixjPW4ucG9zK2ksbz1udWxsLGQ9W10sZSlmb3IobD1lW3BdLG4ud3JpdGVTdHJpbmcocCksbi53cml0ZUludCh0KGwpKSxuLndyaXRlSW50KGMpLG4ud3JpdGVJbnQobC5sZW5ndGgpLGQ9ZC5jb25jYXQobCksXCJoZWFkXCI9PT1wJiYobz1jKSxjKz1sLmxlbmd0aDtjJTQ7KWQucHVzaCgwKSxjKys7cmV0dXJuIG4ud3JpdGUoZCkscj0yOTgxMTQ2NTU0LXQobi5kYXRhKSxuLnBvcz1vKzgsbi53cml0ZVVJbnQzMihyKSxuLmRhdGF9LHQ9ZnVuY3Rpb24odCl7dmFyIGUscixuLGk7Zm9yKHQ9dmUuY2FsbCh0KTt0Lmxlbmd0aCU0Oyl0LnB1c2goMCk7Zm9yKG49bmV3IG5lKHQpLHI9MCxlPTAsaT10Lmxlbmd0aDtlPGk7ZT1lKz00KXIrPW4ucmVhZFVJbnQzMigpO3JldHVybiA0Mjk0OTY3Mjk1JnJ9LGV9KCksYWU9e30uaGFzT3duUHJvcGVydHksb2U9ZnVuY3Rpb24odCxlKXtmb3IodmFyIHIgaW4gZSlhZS5jYWxsKGUscikmJih0W3JdPWVbcl0pO2Z1bmN0aW9uIG4oKXt0aGlzLmNvbnN0cnVjdG9yPXR9cmV0dXJuIG4ucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyBuLHQuX19zdXBlcl9fPWUucHJvdG90eXBlLHR9O3JlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt2YXIgZTt0aGlzLmZpbGU9dCxlPXRoaXMuZmlsZS5kaXJlY3RvcnkudGFibGVzW3RoaXMudGFnXSx0aGlzLmV4aXN0cz0hIWUsZSYmKHRoaXMub2Zmc2V0PWUub2Zmc2V0LHRoaXMubGVuZ3RoPWUubGVuZ3RoLHRoaXMucGFyc2UodGhpcy5maWxlLmNvbnRlbnRzKSl9cmV0dXJuIHQucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKCl7fSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24oKXt9LHQucHJvdG90eXBlLnJhdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmV4aXN0cz8odGhpcy5maWxlLmNvbnRlbnRzLnBvcz10aGlzLm9mZnNldCx0aGlzLmZpbGUuY29udGVudHMucmVhZCh0aGlzLmxlbmd0aCkpOm51bGx9LHR9KCk7dmFyIHNlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJoZWFkXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHQucG9zPXRoaXMub2Zmc2V0LHRoaXMudmVyc2lvbj10LnJlYWRJbnQoKSx0aGlzLnJldmlzaW9uPXQucmVhZEludCgpLHRoaXMuY2hlY2tTdW1BZGp1c3RtZW50PXQucmVhZEludCgpLHRoaXMubWFnaWNOdW1iZXI9dC5yZWFkSW50KCksdGhpcy5mbGFncz10LnJlYWRTaG9ydCgpLHRoaXMudW5pdHNQZXJFbT10LnJlYWRTaG9ydCgpLHRoaXMuY3JlYXRlZD10LnJlYWRMb25nTG9uZygpLHRoaXMubW9kaWZpZWQ9dC5yZWFkTG9uZ0xvbmcoKSx0aGlzLnhNaW49dC5yZWFkU2hvcnQoKSx0aGlzLnlNaW49dC5yZWFkU2hvcnQoKSx0aGlzLnhNYXg9dC5yZWFkU2hvcnQoKSx0aGlzLnlNYXg9dC5yZWFkU2hvcnQoKSx0aGlzLm1hY1N0eWxlPXQucmVhZFNob3J0KCksdGhpcy5sb3dlc3RSZWNQUEVNPXQucmVhZFNob3J0KCksdGhpcy5mb250RGlyZWN0aW9uSGludD10LnJlYWRTaG9ydCgpLHRoaXMuaW5kZXhUb0xvY0Zvcm1hdD10LnJlYWRTaG9ydCgpLHRoaXMuZ2x5cGhEYXRhRm9ybWF0PXQucmVhZFNob3J0KCl9LGUucHJvdG90eXBlLmVuY29kZT1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4oZT1uZXcgbmUpLndyaXRlSW50KHRoaXMudmVyc2lvbiksZS53cml0ZUludCh0aGlzLnJldmlzaW9uKSxlLndyaXRlSW50KHRoaXMuY2hlY2tTdW1BZGp1c3RtZW50KSxlLndyaXRlSW50KHRoaXMubWFnaWNOdW1iZXIpLGUud3JpdGVTaG9ydCh0aGlzLmZsYWdzKSxlLndyaXRlU2hvcnQodGhpcy51bml0c1BlckVtKSxlLndyaXRlTG9uZ0xvbmcodGhpcy5jcmVhdGVkKSxlLndyaXRlTG9uZ0xvbmcodGhpcy5tb2RpZmllZCksZS53cml0ZVNob3J0KHRoaXMueE1pbiksZS53cml0ZVNob3J0KHRoaXMueU1pbiksZS53cml0ZVNob3J0KHRoaXMueE1heCksZS53cml0ZVNob3J0KHRoaXMueU1heCksZS53cml0ZVNob3J0KHRoaXMubWFjU3R5bGUpLGUud3JpdGVTaG9ydCh0aGlzLmxvd2VzdFJlY1BQRU0pLGUud3JpdGVTaG9ydCh0aGlzLmZvbnREaXJlY3Rpb25IaW50KSxlLndyaXRlU2hvcnQodCksZS53cml0ZVNob3J0KHRoaXMuZ2x5cGhEYXRhRm9ybWF0KSxlLmRhdGF9LGV9KCksY2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dmFyIHIsbixpLGEsbyxzLGMsdSxoLGwsZixkLHAsZyxtLHYsYjtzd2l0Y2godGhpcy5wbGF0Zm9ybUlEPXQucmVhZFVJbnQxNigpLHRoaXMuZW5jb2RpbmdJRD10LnJlYWRTaG9ydCgpLHRoaXMub2Zmc2V0PWUrdC5yZWFkSW50KCksaD10LnBvcyx0LnBvcz10aGlzLm9mZnNldCx0aGlzLmZvcm1hdD10LnJlYWRVSW50MTYoKSx0aGlzLmxlbmd0aD10LnJlYWRVSW50MTYoKSx0aGlzLmxhbmd1YWdlPXQucmVhZFVJbnQxNigpLHRoaXMuaXNVbmljb2RlPTM9PT10aGlzLnBsYXRmb3JtSUQmJjE9PT10aGlzLmVuY29kaW5nSUQmJjQ9PT10aGlzLmZvcm1hdHx8MD09PXRoaXMucGxhdGZvcm1JRCYmND09PXRoaXMuZm9ybWF0LHRoaXMuY29kZU1hcD17fSx0aGlzLmZvcm1hdCl7Y2FzZSAwOmZvcihzPTA7czwyNTY7KytzKXRoaXMuY29kZU1hcFtzXT10LnJlYWRCeXRlKCk7YnJlYWs7Y2FzZSA0OmZvcihmPXQucmVhZFVJbnQxNigpLGw9Zi8yLHQucG9zKz02LGk9ZnVuY3Rpb24oKXt2YXIgZSxyO2ZvcihyPVtdLHM9ZT0wOzA8PWw/ZTxsOmU+bDtzPTA8PWw/KytlOi0tZSlyLnB1c2godC5yZWFkVUludDE2KCkpO3JldHVybiByfSgpLHQucG9zKz0yLHA9ZnVuY3Rpb24oKXt2YXIgZSxyO2ZvcihyPVtdLHM9ZT0wOzA8PWw/ZTxsOmU+bDtzPTA8PWw/KytlOi0tZSlyLnB1c2godC5yZWFkVUludDE2KCkpO3JldHVybiByfSgpLGM9ZnVuY3Rpb24oKXt2YXIgZSxyO2ZvcihyPVtdLHM9ZT0wOzA8PWw/ZTxsOmU+bDtzPTA8PWw/KytlOi0tZSlyLnB1c2godC5yZWFkVUludDE2KCkpO3JldHVybiByfSgpLHU9ZnVuY3Rpb24oKXt2YXIgZSxyO2ZvcihyPVtdLHM9ZT0wOzA8PWw/ZTxsOmU+bDtzPTA8PWw/KytlOi0tZSlyLnB1c2godC5yZWFkVUludDE2KCkpO3JldHVybiByfSgpLG49KHRoaXMubGVuZ3RoLXQucG9zK3RoaXMub2Zmc2V0KS8yLG89ZnVuY3Rpb24oKXt2YXIgZSxyO2ZvcihyPVtdLHM9ZT0wOzA8PW4/ZTxuOmU+bjtzPTA8PW4/KytlOi0tZSlyLnB1c2godC5yZWFkVUludDE2KCkpO3JldHVybiByfSgpLHM9bT0wLGI9aS5sZW5ndGg7bTxiO3M9KyttKWZvcihnPWlbc10scj12PWQ9cFtzXTtkPD1nP3Y8PWc6dj49ZztyPWQ8PWc/Kyt2Oi0tdikwPT09dVtzXT9hPXIrY1tzXTowIT09KGE9b1t1W3NdLzIrKHItZCktKGwtcyldfHwwKSYmKGErPWNbc10pLHRoaXMuY29kZU1hcFtyXT02NTUzNSZhfXQucG9zPWh9cmV0dXJuIHQuZW5jb2RlPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbixpLGEsbyxzLGMsdSxoLGwsZixkLHAsZyxtLHYsYix5LHcsTixMLEEseCxTLF8sUCxrLEksRixDLGosTyxCLE0sRSxxLEQsUixULFUseixILFcsVixHLFk7c3dpdGNoKEk9bmV3IG5lLGE9T2JqZWN0LmtleXModCkuc29ydCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1lfSkpLGUpe2Nhc2VcIm1hY3JvbWFuXCI6Zm9yKHA9MCxnPWZ1bmN0aW9uKCl7dmFyIHQ9W107Zm9yKGQ9MDtkPDI1NjsrK2QpdC5wdXNoKDApO3JldHVybiB0fSgpLHY9ezA6MH0saT17fSxGPTAsQj1hLmxlbmd0aDtGPEI7RisrKW51bGw9PXZbVz10W249YVtGXV1dJiYodltXXT0rK3ApLGlbbl09e29sZDp0W25dLG5ldzp2W3Rbbl1dfSxnW25dPXZbdFtuXV07cmV0dXJuIEkud3JpdGVVSW50MTYoMSksSS53cml0ZVVJbnQxNigwKSxJLndyaXRlVUludDMyKDEyKSxJLndyaXRlVUludDE2KDApLEkud3JpdGVVSW50MTYoMjYyKSxJLndyaXRlVUludDE2KDApLEkud3JpdGUoZykse2NoYXJNYXA6aSxzdWJ0YWJsZTpJLmRhdGEsbWF4R2x5cGhJRDpwKzF9O2Nhc2VcInVuaWNvZGVcIjpmb3IoUD1bXSxoPVtdLGI9MCx2PXt9LHI9e30sbT1jPW51bGwsQz0wLE09YS5sZW5ndGg7QzxNO0MrKyludWxsPT12W3c9dFtuPWFbQ11dXSYmKHZbd109KytiKSxyW25dPXtvbGQ6dyxuZXc6dlt3XX0sbz12W3ddLW4sbnVsbCE9bSYmbz09PWN8fChtJiZoLnB1c2gobSksUC5wdXNoKG4pLGM9byksbT1uO2ZvcihtJiZoLnB1c2gobSksaC5wdXNoKDY1NTM1KSxQLnB1c2goNjU1MzUpLFM9MiooeD1QLmxlbmd0aCksQT0yKk1hdGgucG93KE1hdGgubG9nKHgpL01hdGguTE4yLDIpLGw9TWF0aC5sb2coQS8yKS9NYXRoLkxOMixMPTIqeC1BLHM9W10sTj1bXSxmPVtdLGQ9aj0wLEU9UC5sZW5ndGg7ajxFO2Q9KytqKXtpZihfPVBbZF0sdT1oW2RdLDY1NTM1PT09Xyl7cy5wdXNoKDApLE4ucHVzaCgwKTticmVha31pZihfLShrPXJbX10ubmV3KT49MzI3NjgpZm9yKHMucHVzaCgwKSxOLnB1c2goMiooZi5sZW5ndGgreC1kKSksbj1PPV87Xzw9dT9PPD11Ok8+PXU7bj1fPD11PysrTzotLU8pZi5wdXNoKHJbbl0ubmV3KTtlbHNlIHMucHVzaChrLV8pLE4ucHVzaCgwKX1mb3IoSS53cml0ZVVJbnQxNigzKSxJLndyaXRlVUludDE2KDEpLEkud3JpdGVVSW50MzIoMTIpLEkud3JpdGVVSW50MTYoNCksSS53cml0ZVVJbnQxNigxNis4KngrMipmLmxlbmd0aCksSS53cml0ZVVJbnQxNigwKSxJLndyaXRlVUludDE2KFMpLEkud3JpdGVVSW50MTYoQSksSS53cml0ZVVJbnQxNihsKSxJLndyaXRlVUludDE2KEwpLHo9MCxxPWgubGVuZ3RoO3o8cTt6Kyspbj1oW3pdLEkud3JpdGVVSW50MTYobik7Zm9yKEkud3JpdGVVSW50MTYoMCksSD0wLEQ9UC5sZW5ndGg7SDxEO0grKyluPVBbSF0sSS53cml0ZVVJbnQxNihuKTtmb3IoVj0wLFI9cy5sZW5ndGg7VjxSO1YrKylvPXNbVl0sSS53cml0ZVVJbnQxNihvKTtmb3IoRz0wLFQ9Ti5sZW5ndGg7RzxUO0crKyl5PU5bR10sSS53cml0ZVVJbnQxNih5KTtmb3IoWT0wLFU9Zi5sZW5ndGg7WTxVO1krKylwPWZbWV0sSS53cml0ZVVJbnQxNihwKTtyZXR1cm57Y2hhck1hcDpyLHN1YnRhYmxlOkkuZGF0YSxtYXhHbHlwaElEOmIrMX19fSx0fSgpLHVlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJjbWFwXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7dmFyIGUscixuO2Zvcih0LnBvcz10aGlzLm9mZnNldCx0aGlzLnZlcnNpb249dC5yZWFkVUludDE2KCksbj10LnJlYWRVSW50MTYoKSx0aGlzLnRhYmxlcz1bXSx0aGlzLnVuaWNvZGU9bnVsbCxyPTA7MDw9bj9yPG46cj5uO3I9MDw9bj8rK3I6LS1yKWU9bmV3IGNlKHQsdGhpcy5vZmZzZXQpLHRoaXMudGFibGVzLnB1c2goZSksZS5pc1VuaWNvZGUmJm51bGw9PXRoaXMudW5pY29kZSYmKHRoaXMudW5pY29kZT1lKTtyZXR1cm4hMH0sZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXt2YXIgcixuO3JldHVybiBudWxsPT1lJiYoZT1cIm1hY3JvbWFuXCIpLHI9Y2UuZW5jb2RlKHQsZSksKG49bmV3IG5lKS53cml0ZVVJbnQxNigwKSxuLndyaXRlVUludDE2KDEpLHIudGFibGU9bi5kYXRhLmNvbmNhdChyLnN1YnRhYmxlKSxyfSxlfSgpLGhlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJoaGVhXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHQucG9zPXRoaXMub2Zmc2V0LHRoaXMudmVyc2lvbj10LnJlYWRJbnQoKSx0aGlzLmFzY2VuZGVyPXQucmVhZFNob3J0KCksdGhpcy5kZWNlbmRlcj10LnJlYWRTaG9ydCgpLHRoaXMubGluZUdhcD10LnJlYWRTaG9ydCgpLHRoaXMuYWR2YW5jZVdpZHRoTWF4PXQucmVhZFNob3J0KCksdGhpcy5taW5MZWZ0U2lkZUJlYXJpbmc9dC5yZWFkU2hvcnQoKSx0aGlzLm1pblJpZ2h0U2lkZUJlYXJpbmc9dC5yZWFkU2hvcnQoKSx0aGlzLnhNYXhFeHRlbnQ9dC5yZWFkU2hvcnQoKSx0aGlzLmNhcmV0U2xvcGVSaXNlPXQucmVhZFNob3J0KCksdGhpcy5jYXJldFNsb3BlUnVuPXQucmVhZFNob3J0KCksdGhpcy5jYXJldE9mZnNldD10LnJlYWRTaG9ydCgpLHQucG9zKz04LHRoaXMubWV0cmljRGF0YUZvcm1hdD10LnJlYWRTaG9ydCgpLHRoaXMubnVtYmVyT2ZNZXRyaWNzPXQucmVhZFVJbnQxNigpfSxlfSgpLGxlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJPUy8yXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7aWYodC5wb3M9dGhpcy5vZmZzZXQsdGhpcy52ZXJzaW9uPXQucmVhZFVJbnQxNigpLHRoaXMuYXZlcmFnZUNoYXJXaWR0aD10LnJlYWRTaG9ydCgpLHRoaXMud2VpZ2h0Q2xhc3M9dC5yZWFkVUludDE2KCksdGhpcy53aWR0aENsYXNzPXQucmVhZFVJbnQxNigpLHRoaXMudHlwZT10LnJlYWRTaG9ydCgpLHRoaXMueVN1YnNjcmlwdFhTaXplPXQucmVhZFNob3J0KCksdGhpcy55U3Vic2NyaXB0WVNpemU9dC5yZWFkU2hvcnQoKSx0aGlzLnlTdWJzY3JpcHRYT2Zmc2V0PXQucmVhZFNob3J0KCksdGhpcy55U3Vic2NyaXB0WU9mZnNldD10LnJlYWRTaG9ydCgpLHRoaXMueVN1cGVyc2NyaXB0WFNpemU9dC5yZWFkU2hvcnQoKSx0aGlzLnlTdXBlcnNjcmlwdFlTaXplPXQucmVhZFNob3J0KCksdGhpcy55U3VwZXJzY3JpcHRYT2Zmc2V0PXQucmVhZFNob3J0KCksdGhpcy55U3VwZXJzY3JpcHRZT2Zmc2V0PXQucmVhZFNob3J0KCksdGhpcy55U3RyaWtlb3V0U2l6ZT10LnJlYWRTaG9ydCgpLHRoaXMueVN0cmlrZW91dFBvc2l0aW9uPXQucmVhZFNob3J0KCksdGhpcy5mYW1pbHlDbGFzcz10LnJlYWRTaG9ydCgpLHRoaXMucGFub3NlPWZ1bmN0aW9uKCl7dmFyIGUscjtmb3Iocj1bXSxlPTA7ZTwxMDsrK2Upci5wdXNoKHQucmVhZEJ5dGUoKSk7cmV0dXJuIHJ9KCksdGhpcy5jaGFyUmFuZ2U9ZnVuY3Rpb24oKXt2YXIgZSxyO2ZvcihyPVtdLGU9MDtlPDQ7KytlKXIucHVzaCh0LnJlYWRJbnQoKSk7cmV0dXJuIHJ9KCksdGhpcy52ZW5kb3JJRD10LnJlYWRTdHJpbmcoNCksdGhpcy5zZWxlY3Rpb249dC5yZWFkU2hvcnQoKSx0aGlzLmZpcnN0Q2hhckluZGV4PXQucmVhZFNob3J0KCksdGhpcy5sYXN0Q2hhckluZGV4PXQucmVhZFNob3J0KCksdGhpcy52ZXJzaW9uPjAmJih0aGlzLmFzY2VudD10LnJlYWRTaG9ydCgpLHRoaXMuZGVzY2VudD10LnJlYWRTaG9ydCgpLHRoaXMubGluZUdhcD10LnJlYWRTaG9ydCgpLHRoaXMud2luQXNjZW50PXQucmVhZFNob3J0KCksdGhpcy53aW5EZXNjZW50PXQucmVhZFNob3J0KCksdGhpcy5jb2RlUGFnZVJhbmdlPWZ1bmN0aW9uKCl7dmFyIGUscjtmb3Iocj1bXSxlPTA7ZTwyO2U9KytlKXIucHVzaCh0LnJlYWRJbnQoKSk7cmV0dXJuIHJ9KCksdGhpcy52ZXJzaW9uPjEpKXJldHVybiB0aGlzLnhIZWlnaHQ9dC5yZWFkU2hvcnQoKSx0aGlzLmNhcEhlaWdodD10LnJlYWRTaG9ydCgpLHRoaXMuZGVmYXVsdENoYXI9dC5yZWFkU2hvcnQoKSx0aGlzLmJyZWFrQ2hhcj10LnJlYWRTaG9ydCgpLHRoaXMubWF4Q29udGV4dD10LnJlYWRTaG9ydCgpfSxlfSgpLGZlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJwb3N0XCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7dmFyIGUscixuO3N3aXRjaCh0LnBvcz10aGlzLm9mZnNldCx0aGlzLmZvcm1hdD10LnJlYWRJbnQoKSx0aGlzLml0YWxpY0FuZ2xlPXQucmVhZEludCgpLHRoaXMudW5kZXJsaW5lUG9zaXRpb249dC5yZWFkU2hvcnQoKSx0aGlzLnVuZGVybGluZVRoaWNrbmVzcz10LnJlYWRTaG9ydCgpLHRoaXMuaXNGaXhlZFBpdGNoPXQucmVhZEludCgpLHRoaXMubWluTWVtVHlwZTQyPXQucmVhZEludCgpLHRoaXMubWF4TWVtVHlwZTQyPXQucmVhZEludCgpLHRoaXMubWluTWVtVHlwZTE9dC5yZWFkSW50KCksdGhpcy5tYXhNZW1UeXBlMT10LnJlYWRJbnQoKSx0aGlzLmZvcm1hdCl7Y2FzZSA2NTUzNjpicmVhaztjYXNlIDEzMTA3Mjp2YXIgaTtmb3Iocj10LnJlYWRVSW50MTYoKSx0aGlzLmdseXBoTmFtZUluZGV4PVtdLGk9MDswPD1yP2k8cjppPnI7aT0wPD1yPysraTotLWkpdGhpcy5nbHlwaE5hbWVJbmRleC5wdXNoKHQucmVhZFVJbnQxNigpKTtmb3IodGhpcy5uYW1lcz1bXSxuPVtdO3QucG9zPHRoaXMub2Zmc2V0K3RoaXMubGVuZ3RoOyllPXQucmVhZEJ5dGUoKSxuLnB1c2godGhpcy5uYW1lcy5wdXNoKHQucmVhZFN0cmluZyhlKSkpO3JldHVybiBuO2Nhc2UgMTUxNTUyOnJldHVybiByPXQucmVhZFVJbnQxNigpLHRoaXMub2Zmc2V0cz10LnJlYWQocik7Y2FzZSAxOTY2MDg6YnJlYWs7Y2FzZSAyNjIxNDQ6cmV0dXJuIHRoaXMubWFwPWZ1bmN0aW9uKCl7dmFyIGUscixuO2ZvcihuPVtdLGk9ZT0wLHI9dGhpcy5maWxlLm1heHAubnVtR2x5cGhzOzA8PXI/ZTxyOmU+cjtpPTA8PXI/KytlOi0tZSluLnB1c2godC5yZWFkVUludDMyKCkpO3JldHVybiBufS5jYWxsKHRoaXMpfX0sZX0oKSxkZT1mdW5jdGlvbih0LGUpe3RoaXMucmF3PXQsdGhpcy5sZW5ndGg9dC5sZW5ndGgsdGhpcy5wbGF0Zm9ybUlEPWUucGxhdGZvcm1JRCx0aGlzLmVuY29kaW5nSUQ9ZS5lbmNvZGluZ0lELHRoaXMubGFuZ3VhZ2VJRD1lLmxhbmd1YWdlSUR9LHBlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJuYW1lXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7dmFyIGUscixuLGksYSxvLHMsYyx1LGgsbDtmb3IodC5wb3M9dGhpcy5vZmZzZXQsdC5yZWFkU2hvcnQoKSxlPXQucmVhZFNob3J0KCksbz10LnJlYWRTaG9ydCgpLHI9W10saT0wOzA8PWU/aTxlOmk+ZTtpPTA8PWU/KytpOi0taSlyLnB1c2goe3BsYXRmb3JtSUQ6dC5yZWFkU2hvcnQoKSxlbmNvZGluZ0lEOnQucmVhZFNob3J0KCksbGFuZ3VhZ2VJRDp0LnJlYWRTaG9ydCgpLG5hbWVJRDp0LnJlYWRTaG9ydCgpLGxlbmd0aDp0LnJlYWRTaG9ydCgpLG9mZnNldDp0aGlzLm9mZnNldCtvK3QucmVhZFNob3J0KCl9KTtmb3Iocz17fSxpPXU9MCxoPXIubGVuZ3RoO3U8aDtpPSsrdSluPXJbaV0sdC5wb3M9bi5vZmZzZXQsYz10LnJlYWRTdHJpbmcobi5sZW5ndGgpLGE9bmV3IGRlKGMsbiksbnVsbD09c1tsPW4ubmFtZUlEXSYmKHNbbF09W10pLHNbbi5uYW1lSURdLnB1c2goYSk7dGhpcy5zdHJpbmdzPXMsdGhpcy5jb3B5cmlnaHQ9c1swXSx0aGlzLmZvbnRGYW1pbHk9c1sxXSx0aGlzLmZvbnRTdWJmYW1pbHk9c1syXSx0aGlzLnVuaXF1ZVN1YmZhbWlseT1zWzNdLHRoaXMuZm9udE5hbWU9c1s0XSx0aGlzLnZlcnNpb249c1s1XTt0cnl7dGhpcy5wb3N0c2NyaXB0TmFtZT1zWzZdWzBdLnJhdy5yZXBsYWNlKC9bXFx4MDAtXFx4MTlcXHg4MC1cXHhmZl0vZyxcIlwiKX1jYXRjaCh0KXt0aGlzLnBvc3RzY3JpcHROYW1lPXNbNF1bMF0ucmF3LnJlcGxhY2UoL1tcXHgwMC1cXHgxOVxceDgwLVxceGZmXS9nLFwiXCIpfXJldHVybiB0aGlzLnRyYWRlbWFyaz1zWzddLHRoaXMubWFudWZhY3R1cmVyPXNbOF0sdGhpcy5kZXNpZ25lcj1zWzldLHRoaXMuZGVzY3JpcHRpb249c1sxMF0sdGhpcy52ZW5kb3JVcmw9c1sxMV0sdGhpcy5kZXNpZ25lclVybD1zWzEyXSx0aGlzLmxpY2Vuc2U9c1sxM10sdGhpcy5saWNlbnNlVXJsPXNbMTRdLHRoaXMucHJlZmVycmVkRmFtaWx5PXNbMTVdLHRoaXMucHJlZmVycmVkU3ViZmFtaWx5PXNbMTddLHRoaXMuY29tcGF0aWJsZUZ1bGw9c1sxOF0sdGhpcy5zYW1wbGVUZXh0PXNbMTldfSxlfSgpLGdlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJtYXhwXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHQucG9zPXRoaXMub2Zmc2V0LHRoaXMudmVyc2lvbj10LnJlYWRJbnQoKSx0aGlzLm51bUdseXBocz10LnJlYWRVSW50MTYoKSx0aGlzLm1heFBvaW50cz10LnJlYWRVSW50MTYoKSx0aGlzLm1heENvbnRvdXJzPXQucmVhZFVJbnQxNigpLHRoaXMubWF4Q29tcG9zaXRlUG9pbnRzPXQucmVhZFVJbnQxNigpLHRoaXMubWF4Q29tcG9uZW50Q29udG91cnM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhab25lcz10LnJlYWRVSW50MTYoKSx0aGlzLm1heFR3aWxpZ2h0UG9pbnRzPXQucmVhZFVJbnQxNigpLHRoaXMubWF4U3RvcmFnZT10LnJlYWRVSW50MTYoKSx0aGlzLm1heEZ1bmN0aW9uRGVmcz10LnJlYWRVSW50MTYoKSx0aGlzLm1heEluc3RydWN0aW9uRGVmcz10LnJlYWRVSW50MTYoKSx0aGlzLm1heFN0YWNrRWxlbWVudHM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhTaXplT2ZJbnN0cnVjdGlvbnM9dC5yZWFkVUludDE2KCksdGhpcy5tYXhDb21wb25lbnRFbGVtZW50cz10LnJlYWRVSW50MTYoKSx0aGlzLm1heENvbXBvbmVudERlcHRoPXQucmVhZFVJbnQxNigpfSxlfSgpLG1lPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJobXR4XCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24odCl7dmFyIGUscixuLGksYSxvLHM7Zm9yKHQucG9zPXRoaXMub2Zmc2V0LHRoaXMubWV0cmljcz1bXSxlPTAsbz10aGlzLmZpbGUuaGhlYS5udW1iZXJPZk1ldHJpY3M7MDw9bz9lPG86ZT5vO2U9MDw9bz8rK2U6LS1lKXRoaXMubWV0cmljcy5wdXNoKHthZHZhbmNlOnQucmVhZFVJbnQxNigpLGxzYjp0LnJlYWRJbnQxNigpfSk7Zm9yKG49dGhpcy5maWxlLm1heHAubnVtR2x5cGhzLXRoaXMuZmlsZS5oaGVhLm51bWJlck9mTWV0cmljcyx0aGlzLmxlZnRTaWRlQmVhcmluZ3M9ZnVuY3Rpb24oKXt2YXIgcixpO2ZvcihpPVtdLGU9cj0wOzA8PW4/cjxuOnI+bjtlPTA8PW4/KytyOi0tcilpLnB1c2godC5yZWFkSW50MTYoKSk7cmV0dXJuIGl9KCksdGhpcy53aWR0aHM9ZnVuY3Rpb24oKXt2YXIgdCxlLHIsbjtmb3Iobj1bXSx0PTAsZT0ocj10aGlzLm1ldHJpY3MpLmxlbmd0aDt0PGU7dCsrKWk9clt0XSxuLnB1c2goaS5hZHZhbmNlKTtyZXR1cm4gbn0uY2FsbCh0aGlzKSxyPXRoaXMud2lkdGhzW3RoaXMud2lkdGhzLmxlbmd0aC0xXSxzPVtdLGU9YT0wOzA8PW4/YTxuOmE+bjtlPTA8PW4/KythOi0tYSlzLnB1c2godGhpcy53aWR0aHMucHVzaChyKSk7cmV0dXJuIHN9LGUucHJvdG90eXBlLmZvckdseXBoPWZ1bmN0aW9uKHQpe3JldHVybiB0IGluIHRoaXMubWV0cmljcz90aGlzLm1ldHJpY3NbdF06e2FkdmFuY2U6dGhpcy5tZXRyaWNzW3RoaXMubWV0cmljcy5sZW5ndGgtMV0uYWR2YW5jZSxsc2I6dGhpcy5sZWZ0U2lkZUJlYXJpbmdzW3QtdGhpcy5tZXRyaWNzLmxlbmd0aF19fSxlfSgpLHZlPVtdLnNsaWNlLGJlPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBvZShlLHJlKSxlLnByb3RvdHlwZS50YWc9XCJnbHlmXCIsZS5wcm90b3R5cGUucGFyc2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jYWNoZT17fX0sZS5wcm90b3R5cGUuZ2x5cGhGb3I9ZnVuY3Rpb24odCl7dmFyIGUscixuLGksYSxvLHMsYyx1LGg7cmV0dXJuIHQgaW4gdGhpcy5jYWNoZT90aGlzLmNhY2hlW3RdOihpPXRoaXMuZmlsZS5sb2NhLGU9dGhpcy5maWxlLmNvbnRlbnRzLHI9aS5pbmRleE9mKHQpLDA9PT0obj1pLmxlbmd0aE9mKHQpKT90aGlzLmNhY2hlW3RdPW51bGw6KGUucG9zPXRoaXMub2Zmc2V0K3IsYT0obz1uZXcgbmUoZS5yZWFkKG4pKSkucmVhZFNob3J0KCksYz1vLnJlYWRTaG9ydCgpLGg9by5yZWFkU2hvcnQoKSxzPW8ucmVhZFNob3J0KCksdT1vLnJlYWRTaG9ydCgpLHRoaXMuY2FjaGVbdF09LTE9PT1hP25ldyB3ZShvLGMsaCxzLHUpOm5ldyB5ZShvLGEsYyxoLHMsdSksdGhpcy5jYWNoZVt0XSkpfSxlLnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlLHIpe3ZhciBuLGksYSxvLHM7Zm9yKGE9W10saT1bXSxvPTAscz1lLmxlbmd0aDtvPHM7bysrKW49dFtlW29dXSxpLnB1c2goYS5sZW5ndGgpLG4mJihhPWEuY29uY2F0KG4uZW5jb2RlKHIpKSk7cmV0dXJuIGkucHVzaChhLmxlbmd0aCkse3RhYmxlOmEsb2Zmc2V0czppfX0sZX0oKSx5ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLHIsbixpLGEpe3RoaXMucmF3PXQsdGhpcy5udW1iZXJPZkNvbnRvdXJzPWUsdGhpcy54TWluPXIsdGhpcy55TWluPW4sdGhpcy54TWF4PWksdGhpcy55TWF4PWEsdGhpcy5jb21wb3VuZD0hMX1yZXR1cm4gdC5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmF3LmRhdGF9LHR9KCksd2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxyLG4saSl7dmFyIGEsbztmb3IodGhpcy5yYXc9dCx0aGlzLnhNaW49ZSx0aGlzLnlNaW49cix0aGlzLnhNYXg9bix0aGlzLnlNYXg9aSx0aGlzLmNvbXBvdW5kPSEwLHRoaXMuZ2x5cGhJRHM9W10sdGhpcy5nbHlwaE9mZnNldHM9W10sYT10aGlzLnJhdztvPWEucmVhZFNob3J0KCksdGhpcy5nbHlwaE9mZnNldHMucHVzaChhLnBvcyksdGhpcy5nbHlwaElEcy5wdXNoKGEucmVhZFVJbnQxNigpKSwzMiZvOylhLnBvcys9MSZvPzQ6MiwxMjgmbz9hLnBvcys9ODo2NCZvP2EucG9zKz00OjgmbyYmKGEucG9zKz0yKX1yZXR1cm4gMSw4LDMyLDY0LDEyOCx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24oKXt2YXIgdCxlLHI7Zm9yKGU9bmV3IG5lKHZlLmNhbGwodGhpcy5yYXcuZGF0YSkpLHQ9MCxyPXRoaXMuZ2x5cGhJRHMubGVuZ3RoO3Q8cjsrK3QpZS5wb3M9dGhpcy5nbHlwaE9mZnNldHNbdF07cmV0dXJuIGUuZGF0YX0sdH0oKSxOZT1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKCl7cmV0dXJuIGUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gb2UoZSxyZSksZS5wcm90b3R5cGUudGFnPVwibG9jYVwiLGUucHJvdG90eXBlLnBhcnNlPWZ1bmN0aW9uKHQpe3ZhciBlLHI7cmV0dXJuIHQucG9zPXRoaXMub2Zmc2V0LGU9dGhpcy5maWxlLmhlYWQuaW5kZXhUb0xvY0Zvcm1hdCx0aGlzLm9mZnNldHM9MD09PWU/ZnVuY3Rpb24oKXt2YXIgZSxuO2ZvcihuPVtdLHI9MCxlPXRoaXMubGVuZ3RoO3I8ZTtyKz0yKW4ucHVzaCgyKnQucmVhZFVJbnQxNigpKTtyZXR1cm4gbn0uY2FsbCh0aGlzKTpmdW5jdGlvbigpe3ZhciBlLG47Zm9yKG49W10scj0wLGU9dGhpcy5sZW5ndGg7cjxlO3IrPTQpbi5wdXNoKHQucmVhZFVJbnQzMigpKTtyZXR1cm4gbn0uY2FsbCh0aGlzKX0sZS5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5vZmZzZXRzW3RdfSxlLnByb3RvdHlwZS5sZW5ndGhPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5vZmZzZXRzW3QrMV0tdGhpcy5vZmZzZXRzW3RdfSxlLnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXtmb3IodmFyIHI9bmV3IFVpbnQzMkFycmF5KHRoaXMub2Zmc2V0cy5sZW5ndGgpLG49MCxpPTAsYT0wO2E8ci5sZW5ndGg7KythKWlmKHJbYV09bixpPGUubGVuZ3RoJiZlW2ldPT1hKXsrK2ksclthXT1uO3ZhciBvPXRoaXMub2Zmc2V0c1thXSxzPXRoaXMub2Zmc2V0c1thKzFdLW87cz4wJiYobis9cyl9Zm9yKHZhciBjPW5ldyBBcnJheSg0KnIubGVuZ3RoKSx1PTA7dTxyLmxlbmd0aDsrK3UpY1s0KnUrM109MjU1JnJbdV0sY1s0KnUrMl09KDY1MjgwJnJbdV0pPj44LGNbNCp1KzFdPSgxNjcxMTY4MCZyW3VdKT4+MTYsY1s0KnVdPSg0Mjc4MTkwMDgwJnJbdV0pPj4yNDtyZXR1cm4gY30sZX0oKSxMZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5mb250PXQsdGhpcy5zdWJzZXQ9e30sdGhpcy51bmljb2Rlcz17fSx0aGlzLm5leHQ9MzN9cmV0dXJuIHQucHJvdG90eXBlLmdlbmVyYXRlQ21hcD1mdW5jdGlvbigpe3ZhciB0LGUscixuLGk7Zm9yKGUgaW4gbj10aGlzLmZvbnQuY21hcC50YWJsZXNbMF0uY29kZU1hcCx0PXt9LGk9dGhpcy5zdWJzZXQpcj1pW2VdLHRbZV09bltyXTtyZXR1cm4gdH0sdC5wcm90b3R5cGUuZ2x5cGhzRm9yPWZ1bmN0aW9uKHQpe3ZhciBlLHIsbixpLGEsbyxzO2ZvcihuPXt9LGE9MCxvPXQubGVuZ3RoO2E8bzthKyspbltpPXRbYV1dPXRoaXMuZm9udC5nbHlmLmdseXBoRm9yKGkpO2ZvcihpIGluIGU9W10sbikobnVsbCE9KHI9bltpXSk/ci5jb21wb3VuZDp2b2lkIDApJiZlLnB1c2guYXBwbHkoZSxyLmdseXBoSURzKTtpZihlLmxlbmd0aD4wKWZvcihpIGluIHM9dGhpcy5nbHlwaHNGb3IoZSkpcj1zW2ldLG5baV09cjtyZXR1cm4gbn0sdC5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKHQsZSl7dmFyIHIsbixpLGEsbyxzLGMsdSxoLGwsZixkLHAsZyxtO2ZvcihuIGluIHI9dWUuZW5jb2RlKHRoaXMuZ2VuZXJhdGVDbWFwKCksXCJ1bmljb2RlXCIpLGE9dGhpcy5nbHlwaHNGb3IodCksZj17MDowfSxtPXIuY2hhck1hcClmWyhzPW1bbl0pLm9sZF09cy5uZXc7Zm9yKGQgaW4gbD1yLm1heEdseXBoSUQsYSlkIGluIGZ8fChmW2RdPWwrKyk7cmV0dXJuIHU9ZnVuY3Rpb24odCl7dmFyIGUscjtmb3IoZSBpbiByPXt9LHQpclt0W2VdXT1lO3JldHVybiByfShmKSxoPU9iamVjdC5rZXlzKHUpLnNvcnQoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQtZX0pKSxwPWZ1bmN0aW9uKCl7dmFyIHQsZSxyO2ZvcihyPVtdLHQ9MCxlPWgubGVuZ3RoO3Q8ZTt0Kyspbz1oW3RdLHIucHVzaCh1W29dKTtyZXR1cm4gcn0oKSxpPXRoaXMuZm9udC5nbHlmLmVuY29kZShhLHAsZiksYz10aGlzLmZvbnQubG9jYS5lbmNvZGUoaS5vZmZzZXRzLHApLGc9e2NtYXA6dGhpcy5mb250LmNtYXAucmF3KCksZ2x5ZjppLnRhYmxlLGxvY2E6YyxobXR4OnRoaXMuZm9udC5obXR4LnJhdygpLGhoZWE6dGhpcy5mb250LmhoZWEucmF3KCksbWF4cDp0aGlzLmZvbnQubWF4cC5yYXcoKSxwb3N0OnRoaXMuZm9udC5wb3N0LnJhdygpLG5hbWU6dGhpcy5mb250Lm5hbWUucmF3KCksaGVhZDp0aGlzLmZvbnQuaGVhZC5lbmNvZGUoZSl9LHRoaXMuZm9udC5vczIuZXhpc3RzJiYoZ1tcIk9TLzJcIl09dGhpcy5mb250Lm9zMi5yYXcoKSksdGhpcy5mb250LmRpcmVjdG9yeS5lbmNvZGUoZyl9LHR9KCk7RS5BUEkuUERGT2JqZWN0PWZ1bmN0aW9uKCl7dmFyIHQ7ZnVuY3Rpb24gZSgpe31yZXR1cm4gdD1mdW5jdGlvbih0LGUpe3JldHVybihBcnJheShlKzEpLmpvaW4oXCIwXCIpK3QpLnNsaWNlKC1lKX0sZS5jb252ZXJ0PWZ1bmN0aW9uKHIpe3ZhciBuLGksYSxvO2lmKEFycmF5LmlzQXJyYXkocikpcmV0dXJuXCJbXCIrZnVuY3Rpb24oKXt2YXIgdCxpLGE7Zm9yKGE9W10sdD0wLGk9ci5sZW5ndGg7dDxpO3QrKyluPXJbdF0sYS5wdXNoKGUuY29udmVydChuKSk7cmV0dXJuIGF9KCkuam9pbihcIiBcIikrXCJdXCI7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHIpcmV0dXJuXCIvXCIrcjtpZihudWxsIT1yP3IuaXNTdHJpbmc6dm9pZCAwKXJldHVyblwiKFwiK3IrXCIpXCI7aWYociBpbnN0YW5jZW9mIERhdGUpcmV0dXJuXCIoRDpcIit0KHIuZ2V0VVRDRnVsbFllYXIoKSw0KSt0KHIuZ2V0VVRDTW9udGgoKSwyKSt0KHIuZ2V0VVRDRGF0ZSgpLDIpK3Qoci5nZXRVVENIb3VycygpLDIpK3Qoci5nZXRVVENNaW51dGVzKCksMikrdChyLmdldFVUQ1NlY29uZHMoKSwyKStcIlopXCI7aWYoXCJbb2JqZWN0IE9iamVjdF1cIj09PXt9LnRvU3RyaW5nLmNhbGwocikpe2ZvcihpIGluIGE9W1wiPDxcIl0scilvPXJbaV0sYS5wdXNoKFwiL1wiK2krXCIgXCIrZS5jb252ZXJ0KG8pKTtyZXR1cm4gYS5wdXNoKFwiPj5cIiksYS5qb2luKFwiXFxuXCIpfXJldHVyblwiXCIrcn0sZX0oKTtleHBvcnQgZGVmYXVsdCBFO2V4cG9ydHtTdCBhcyBBY3JvRm9ybSxBdCBhcyBBY3JvRm9ybUFwcGVhcmFuY2UsbXQgYXMgQWNyb0Zvcm1CdXR0b24sd3QgYXMgQWNyb0Zvcm1DaGVja0JveCxmdCBhcyBBY3JvRm9ybUNob2ljZUZpZWxkLHB0IGFzIEFjcm9Gb3JtQ29tYm9Cb3gsZ3QgYXMgQWNyb0Zvcm1FZGl0Qm94LGR0IGFzIEFjcm9Gb3JtTGlzdEJveCxMdCBhcyBBY3JvRm9ybVBhc3N3b3JkRmllbGQsdnQgYXMgQWNyb0Zvcm1QdXNoQnV0dG9uLGJ0IGFzIEFjcm9Gb3JtUmFkaW9CdXR0b24sTnQgYXMgQWNyb0Zvcm1UZXh0RmllbGQsaiBhcyBHU3RhdGUsQiBhcyBTaGFkaW5nUGF0dGVybixNIGFzIFRpbGluZ1BhdHRlcm4sRSBhcyBqc1BERn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qc3BkZi5lcy5taW4uanMubWFwXG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IHsgTWFwIGFzIE1hcGJveE1hcCB9IGZyb20gJ21hcGJveC1nbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyb3NzaGFpck1hbmFnZXIge1xuICAgIHByaXZhdGUgbWFwOiBNYXBib3hNYXAgfCB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIHdpZHRoOiBudW1iZXIgfCB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIGhlaWdodDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuXG4gICAgcHJpdmF0ZSBzdmdDYW52YXM6IFNWR0VsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIHhMaW5lOiBTVkdFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gICAgcHJpdmF0ZSB5TGluZTogU1ZHRWxlbWVudCB8IHVuZGVmaW5lZDtcblxuICAgIHByaXZhdGUgY29sb3IgPSAnIzUzNTM1Myc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgIG1hcDogTWFwYm94TWFwIHwgdW5kZWZpbmVkLFxuICAgICkge1xuICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICB0aGlzLm1hcFJlc2l6ZSA9IHRoaXMubWFwUmVzaXplLmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZSgpIHtcbiAgICAgIHRoaXMudXBkYXRlVmFsdWVzKCk7XG4gICAgICBpZiAodGhpcy5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLm1hcC5vbigncmVzaXplJywgdGhpcy5tYXBSZXNpemUpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNhbnZhcyh0aGlzLm1hcC5nZXRDYW52YXNDb250YWluZXIoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdtYXAgb2JqZWN0IGlzIG51bGwnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlcygpIHtcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1hcD8uZ2V0Q2FudmFzKCkuY2xpZW50V2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IHRoaXMubWFwPy5nZXRDYW52YXMoKS5jbGllbnRIZWlnaHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYXBSZXNpemUoKSB7XG4gICAgICB0aGlzLnVwZGF0ZVZhbHVlcygpO1xuICAgICAgdGhpcy51cGRhdGVDYW52YXMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUNhbnZhcygpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5zdmdDYW52YXMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgJiYgdGhpcy55TGluZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAmJiB0aGlzLnhMaW5lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICYmIHRoaXMud2lkdGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgJiYgdGhpcy5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnN2Z0NhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYCR7dGhpcy53aWR0aH1weGApO1xuICAgICAgICB0aGlzLnN2Z0NhbnZhcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGAke3RoaXMuaGVpZ2h0fXB4YCk7XG4gICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IHRoaXMud2lkdGggLyAyO1xuICAgICAgICBjb25zdCBoYWxmSGVpZ2h0ID0gdGhpcy5oZWlnaHQgLyAyO1xuICAgICAgICB0aGlzLnlMaW5lLnNldEF0dHJpYnV0ZSgneDEnLCBgJHtoYWxmV2lkdGh9cHhgKTtcbiAgICAgICAgdGhpcy55TGluZS5zZXRBdHRyaWJ1dGUoJ3kxJywgJzBweCcpO1xuICAgICAgICB0aGlzLnlMaW5lLnNldEF0dHJpYnV0ZSgneDInLCBgJHtoYWxmV2lkdGh9cHhgKTtcbiAgICAgICAgdGhpcy55TGluZS5zZXRBdHRyaWJ1dGUoJ3kyJywgYCR7dGhpcy5oZWlnaHR9cHhgKTtcblxuICAgICAgICB0aGlzLnhMaW5lLnNldEF0dHJpYnV0ZSgneDEnLCBgJHswfXB4YCk7XG4gICAgICAgIHRoaXMueExpbmUuc2V0QXR0cmlidXRlKCd5MScsIGAke2hhbGZIZWlnaHR9cHhgKTtcbiAgICAgICAgdGhpcy54TGluZS5zZXRBdHRyaWJ1dGUoJ3gyJywgYCR7dGhpcy53aWR0aH1weGApO1xuICAgICAgICB0aGlzLnhMaW5lLnNldEF0dHJpYnV0ZSgneTInLCBgJHtoYWxmSGVpZ2h0fXB4YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdlbGVtZW50IHZhbHVlIGlzIG51bGwnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZUNhbnZhcyhjb250YWluZXIpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy53aWR0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAmJiB0aGlzLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYCR7dGhpcy53aWR0aH1weGApO1xuICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBgJHt0aGlzLmhlaWdodH1weGApO1xuICAgICAgICBjb25zdCBoYWxmV2lkdGggPSB0aGlzLndpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgaGFsZkhlaWdodCA9IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICAgICAgdGhpcy55TGluZSA9IGNhbnZhcy5hcHBlbmRDaGlsZCh0aGlzLmNyZWF0ZUxpbmUoaGFsZldpZHRoLCAwLCBoYWxmV2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmNvbG9yLCAnMnB4JykpO1xuICAgICAgICB0aGlzLnhMaW5lID0gY2FudmFzLmFwcGVuZENoaWxkKHRoaXMuY3JlYXRlTGluZSgwLCBoYWxmSGVpZ2h0LCB0aGlzLndpZHRoLCBoYWxmSGVpZ2h0LCB0aGlzLmNvbG9yLCAnMnB4JykpO1xuICAgICAgICBjb250YWluZXI/LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICAgIHRoaXMuc3ZnQ2FudmFzID0gY2FudmFzO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlTGluZSh4MSwgeTEsIHgyLCB5MiwgY29sb3IsIHcpIHtcbiAgICAgIGNvbnN0IGFMaW5lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdsaW5lJyk7XG4gICAgICBhTGluZS5zZXRBdHRyaWJ1dGUoJ3gxJywgeDEpO1xuICAgICAgYUxpbmUuc2V0QXR0cmlidXRlKCd5MScsIHkxKTtcbiAgICAgIGFMaW5lLnNldEF0dHJpYnV0ZSgneDInLCB4Mik7XG4gICAgICBhTGluZS5zZXRBdHRyaWJ1dGUoJ3kyJywgeTIpO1xuICAgICAgYUxpbmUuc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JywgJzUsNScpO1xuICAgICAgYUxpbmUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCBjb2xvcik7XG4gICAgICBhTGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHcpO1xuICAgICAgcmV0dXJuIGFMaW5lO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMueExpbmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnhMaW5lLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnhMaW5lID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy55TGluZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMueUxpbmUucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMueUxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnN2Z0NhbnZhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuc3ZnQ2FudmFzLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnN2Z0NhbnZhcyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWFwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5tYXAub2ZmKCdyZXNpemUnLCB0aGlzLm1hcFJlc2l6ZSk7XG4gICAgICAgIHRoaXMubWFwID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IElDb250cm9sLCBNYXAgYXMgTWFwYm94TWFwIH0gZnJvbSAnbWFwYm94LWdsJztcbmltcG9ydCBDcm9zc2hhaXJNYW5hZ2VyIGZyb20gJy4vY3Jvc3NoYWlyLW1hbmFnZXInO1xuaW1wb3J0IFByaW50YWJsZUFyZWFNYW5hZ2VyIGZyb20gJy4vcHJpbnRhYmxlLWFyZWEtbWFuYWdlcic7XG5pbXBvcnQge1xuICBlbmdsaXNoLCBmaW5uaXNoLCBmcmVuY2gsIGdlcm1hbiwgc3dlZGlzaCwgVHJhbnNsYXRpb24sIHZpZXRuYW0sXG59IGZyb20gJy4vbG9jYWwnO1xuaW1wb3J0IE1hcEdlbmVyYXRvciwge1xuICBTaXplLCBGb3JtYXQsIFBhZ2VPcmllbnRhdGlvbiwgRFBJLCBVbml0LFxufSBmcm9tICcuL21hcC1nZW5lcmF0b3InO1xuXG50eXBlIE9wdGlvbnMgPSB7XG4gIFBhZ2VTaXplOiBhbnk7XG4gIFBhZ2VPcmllbnRhdGlvbjogc3RyaW5nO1xuICBGb3JtYXQ6IHN0cmluZztcbiAgRFBJOiBudW1iZXI7XG4gIENyb3NzaGFpcj86IGJvb2xlYW47XG4gIFByaW50YWJsZUFyZWE6IGJvb2xlYW47XG4gIGFjY2Vzc1Rva2VuPzogc3RyaW5nO1xuICBMb2NhbD86ICdkZScgfCAnZW4nIHwgJ2ZyJyB8ICdmaScgfCAnc3YnIHwgJ3ZpJztcbn1cblxuLyoqXG4gKiBNYXBib3ggR0wgRXhwb3J0IENvbnRyb2wuXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0cyAtIE9iamVjdCBvZiBsYXllci5pZCBhbmQgdGl0bGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFwYm94RXhwb3J0Q29udHJvbCBpbXBsZW1lbnRzIElDb250cm9sIHtcbiAgcHJpdmF0ZSBjb250cm9sQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcblxuICBwcml2YXRlIGV4cG9ydENvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBjcm9zc2hhaXI6IENyb3NzaGFpck1hbmFnZXIgfCB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBwcmludGFibGVBcmVhOiBQcmludGFibGVBcmVhTWFuYWdlciB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIG1hcD86IE1hcGJveE1hcDtcblxuICBwcml2YXRlIGV4cG9ydEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBvcHRpb25zOiBPcHRpb25zID0ge1xuICAgIFBhZ2VTaXplOiBTaXplLkE0LFxuICAgIFBhZ2VPcmllbnRhdGlvbjogUGFnZU9yaWVudGF0aW9uLkxhbmRzY2FwZSxcbiAgICBGb3JtYXQ6IEZvcm1hdC5QREYsXG4gICAgRFBJOiBEUElbMzAwXSxcbiAgICBDcm9zc2hhaXI6IGZhbHNlLFxuICAgIFByaW50YWJsZUFyZWE6IGZhbHNlLFxuICAgIGFjY2Vzc1Rva2VuOiB1bmRlZmluZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogT3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHRoaXMub25Eb2N1bWVudENsaWNrID0gdGhpcy5vbkRvY3VtZW50Q2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREZWZhdWx0UG9zaXRpb24oKTogc3RyaW5nIHtcbiAgICBjb25zdCBkZWZhdWx0UG9zaXRpb24gPSAndG9wLXJpZ2h0JztcbiAgICByZXR1cm4gZGVmYXVsdFBvc2l0aW9uO1xuICB9XG5cbiAgcHVibGljIGdldFRyYW5zbGF0aW9uKCk6IFRyYW5zbGF0aW9uIHtcbiAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5Mb2NhbCkge1xuICAgICAgY2FzZSAnZGUnOlxuICAgICAgICByZXR1cm4gZ2VybWFuO1xuICAgICAgY2FzZSAnZW4nOlxuICAgICAgICByZXR1cm4gZW5nbGlzaDtcbiAgICAgIGNhc2UgJ2ZyJzpcbiAgICAgICAgcmV0dXJuIGZyZW5jaDtcbiAgICAgIGNhc2UgJ2ZpJzpcbiAgICAgICAgcmV0dXJuIGZpbm5pc2g7XG4gICAgICBjYXNlICdzdic6XG4gICAgICAgIHJldHVybiBzd2VkaXNoO1xuICAgICAgY2FzZSAndmknOlxuICAgICAgICByZXR1cm4gdmlldG5hbTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBlbmdsaXNoO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBvbkFkZChtYXA6IE1hcGJveE1hcCk6IEhUTUxFbGVtZW50IHtcbiAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICB0aGlzLmNvbnRyb2xDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmNvbnRyb2xDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybCcpO1xuICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdyb3VwJyk7XG4gICAgdGhpcy5leHBvcnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLmV4cG9ydENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1leHBvcnQtbGlzdCcpO1xuICAgIHRoaXMuZXhwb3J0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgdGhpcy5leHBvcnRCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1pY29uJyk7XG4gICAgdGhpcy5leHBvcnRCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtZXhwb3J0LWNvbnRyb2wnKTtcbiAgICB0aGlzLmV4cG9ydEJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG4gICAgdGhpcy5leHBvcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLmV4cG9ydEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy5leHBvcnRDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICB0aGlzLnRvZ2dsZUNyb3NzaGFpcih0cnVlKTtcbiAgICAgIHRoaXMudG9nZ2xlUHJpbnRhYmxlQXJlYSh0cnVlKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Eb2N1bWVudENsaWNrKTtcbiAgICB0aGlzLmNvbnRyb2xDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5leHBvcnRCdXR0b24pO1xuICAgIHRoaXMuY29udHJvbENvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmV4cG9ydENvbnRhaW5lcik7XG5cbiAgICBjb25zdCB0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ1RBQkxFJyk7XG4gICAgdGFibGUuY2xhc3NOYW1lID0gJ3ByaW50LXRhYmxlJztcblxuICAgIGNvbnN0IHRyMSA9IHRoaXMuY3JlYXRlU2VsZWN0aW9uKFNpemUsIHRoaXMuZ2V0VHJhbnNsYXRpb24oKS5QYWdlU2l6ZSwgJ3BhZ2Utc2l6ZScsIHRoaXMub3B0aW9ucy5QYWdlU2l6ZSwgKGRhdGEsIGtleSkgPT4gSlNPTi5zdHJpbmdpZnkoZGF0YVtrZXldKSk7XG4gICAgdGFibGUuYXBwZW5kQ2hpbGQodHIxKTtcblxuICAgIGNvbnN0IHRyMiA9IHRoaXMuY3JlYXRlU2VsZWN0aW9uKFBhZ2VPcmllbnRhdGlvbiwgdGhpcy5nZXRUcmFuc2xhdGlvbigpLlBhZ2VPcmllbnRhdGlvbiwgJ3BhZ2Utb3JpZW50YWl0b24nLCB0aGlzLm9wdGlvbnMuUGFnZU9yaWVudGF0aW9uLCAoZGF0YSwga2V5KSA9PiBkYXRhW2tleV0pO1xuICAgIHRhYmxlLmFwcGVuZENoaWxkKHRyMik7XG5cbiAgICBjb25zdCB0cjMgPSB0aGlzLmNyZWF0ZVNlbGVjdGlvbihGb3JtYXQsIHRoaXMuZ2V0VHJhbnNsYXRpb24oKS5Gb3JtYXQsICdmb3JtYXQtdHlwZScsIHRoaXMub3B0aW9ucy5Gb3JtYXQsIChkYXRhLCBrZXkpID0+IGRhdGFba2V5XSk7XG4gICAgdGFibGUuYXBwZW5kQ2hpbGQodHIzKTtcblxuICAgIGNvbnN0IHRyNCA9IHRoaXMuY3JlYXRlU2VsZWN0aW9uKERQSSwgdGhpcy5nZXRUcmFuc2xhdGlvbigpLkRQSSwgJ2RwaS10eXBlJywgdGhpcy5vcHRpb25zLkRQSSwgKGRhdGEsIGtleSkgPT4gZGF0YVtrZXldKTtcbiAgICB0YWJsZS5hcHBlbmRDaGlsZCh0cjQpO1xuXG4gICAgdGhpcy5leHBvcnRDb250YWluZXIuYXBwZW5kQ2hpbGQodGFibGUpO1xuXG4gICAgY29uc3QgZ2VuZXJhdGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICBnZW5lcmF0ZUJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG4gICAgZ2VuZXJhdGVCdXR0b24udGV4dENvbnRlbnQgPSB0aGlzLmdldFRyYW5zbGF0aW9uKCkuR2VuZXJhdGU7XG4gICAgZ2VuZXJhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnZ2VuZXJhdGUtYnV0dG9uJyk7XG4gICAgZ2VuZXJhdGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCBwYWdlU2l6ZTogSFRNTFNlbGVjdEVsZW1lbnQgPSA8SFRNTFNlbGVjdEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcGJveC1nbC1leHBvcnQtcGFnZS1zaXplJyk7XG4gICAgICBjb25zdCBwYWdlT3JpZW50YXRpb246IEhUTUxTZWxlY3RFbGVtZW50ID0gPEhUTUxTZWxlY3RFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXBib3gtZ2wtZXhwb3J0LXBhZ2Utb3JpZW50YWl0b24nKTtcbiAgICAgIGNvbnN0IGZvcm1hdFR5cGU6IEhUTUxTZWxlY3RFbGVtZW50ID0gPEhUTUxTZWxlY3RFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXBib3gtZ2wtZXhwb3J0LWZvcm1hdC10eXBlJyk7XG4gICAgICBjb25zdCBkcGlUeXBlOiBIVE1MU2VsZWN0RWxlbWVudCA9IDxIVE1MU2VsZWN0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwYm94LWdsLWV4cG9ydC1kcGktdHlwZScpO1xuICAgICAgY29uc3Qgb3JpZW50VmFsdWUgPSBwYWdlT3JpZW50YXRpb24udmFsdWU7XG4gICAgICBsZXQgcGFnZVNpemVWYWx1ZSA9IEpTT04ucGFyc2UocGFnZVNpemUudmFsdWUpO1xuICAgICAgaWYgKG9yaWVudFZhbHVlID09PSBQYWdlT3JpZW50YXRpb24uUG9ydHJhaXQpIHtcbiAgICAgICAgcGFnZVNpemVWYWx1ZSA9IHBhZ2VTaXplVmFsdWUucmV2ZXJzZSgpO1xuICAgICAgfVxuICAgICAgY29uc3QgbWFwR2VuZXJhdG9yID0gbmV3IE1hcEdlbmVyYXRvcihcbiAgICAgICAgbWFwLFxuICAgICAgICBwYWdlU2l6ZVZhbHVlLFxuICAgICAgICBOdW1iZXIoZHBpVHlwZS52YWx1ZSksXG4gICAgICAgIGZvcm1hdFR5cGUudmFsdWUsXG4gICAgICAgIFVuaXQubW0sXG4gICAgICAgIHRoaXMub3B0aW9ucy5hY2Nlc3NUb2tlbixcbiAgICAgICk7XG4gICAgICBtYXBHZW5lcmF0b3IuZ2VuZXJhdGUoKTtcbiAgICB9KTtcbiAgICB0aGlzLmV4cG9ydENvbnRhaW5lci5hcHBlbmRDaGlsZChnZW5lcmF0ZUJ1dHRvbik7XG5cbiAgICByZXR1cm4gdGhpcy5jb250cm9sQ29udGFpbmVyO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVTZWxlY3Rpb24oXG4gICAgZGF0YTogT2JqZWN0LFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGRlZmF1bHRWYWx1ZTogYW55LFxuICAgIGNvbnZlcnRlcjogRnVuY3Rpb24sXG4gICk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJyk7XG4gICAgbGFiZWwudGV4dENvbnRlbnQgPSB0aXRsZTtcblxuICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcbiAgICBjb250ZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBgbWFwYm94LWdsLWV4cG9ydC0ke3R5cGV9YCk7XG4gICAgY29udGVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbkxheW91dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgb3B0aW9uTGF5b3V0LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBjb252ZXJ0ZXIoZGF0YSwga2V5KSk7XG4gICAgICBvcHRpb25MYXlvdXQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoa2V5KSk7XG4gICAgICBvcHRpb25MYXlvdXQuc2V0QXR0cmlidXRlKCduYW1lJywgdHlwZSk7XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlID09PSBkYXRhW2tleV0pIHtcbiAgICAgICAgb3B0aW9uTGF5b3V0LnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQob3B0aW9uTGF5b3V0KTtcbiAgICB9KTtcbiAgICBjb250ZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHsgdGhpcy51cGRhdGVQcmludGFibGVBcmVhKCk7IH0pO1xuXG4gICAgY29uc3QgdHIxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnVFInKTtcbiAgICBjb25zdCB0ZExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnVEQnKTtcbiAgICBjb25zdCB0ZENvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdURCcpO1xuICAgIHRkTGFiZWwuYXBwZW5kQ2hpbGQobGFiZWwpO1xuICAgIHRkQ29udGVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICB0cjEuYXBwZW5kQ2hpbGQodGRMYWJlbCk7XG4gICAgdHIxLmFwcGVuZENoaWxkKHRkQ29udGVudCk7XG4gICAgcmV0dXJuIHRyMTtcbiAgfVxuXG4gIHB1YmxpYyBvblJlbW92ZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuY29udHJvbENvbnRhaW5lclxuICAgICAgfHwgIXRoaXMuY29udHJvbENvbnRhaW5lci5wYXJlbnROb2RlXG4gICAgICB8fCAhdGhpcy5tYXBcbiAgICAgIHx8ICF0aGlzLmV4cG9ydEJ1dHRvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmV4cG9ydEJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25Eb2N1bWVudENsaWNrKTtcbiAgICB0aGlzLmNvbnRyb2xDb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmNvbnRyb2xDb250YWluZXIpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkRvY3VtZW50Q2xpY2spO1xuXG4gICAgaWYgKHRoaXMuY3Jvc3NoYWlyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY3Jvc3NoYWlyLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuY3Jvc3NoYWlyID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMubWFwID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmNvbnRyb2xDb250YWluZXJcbiAgICAgICYmICF0aGlzLmNvbnRyb2xDb250YWluZXIuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQpXG4gICAgICAmJiB0aGlzLmV4cG9ydENvbnRhaW5lclxuICAgICAgJiYgdGhpcy5leHBvcnRCdXR0b24pIHtcbiAgICAgIHRoaXMuZXhwb3J0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLmV4cG9ydEJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHRoaXMudG9nZ2xlQ3Jvc3NoYWlyKGZhbHNlKTtcbiAgICAgIHRoaXMudG9nZ2xlUHJpbnRhYmxlQXJlYShmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVDcm9zc2hhaXIoc3RhdGU6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLkNyb3NzaGFpciA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKHN0YXRlID09PSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5jcm9zc2hhaXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuY3Jvc3NoYWlyLmRlc3Ryb3koKTtcbiAgICAgICAgICB0aGlzLmNyb3NzaGFpciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jcm9zc2hhaXIgPSBuZXcgQ3Jvc3NoYWlyTWFuYWdlcih0aGlzLm1hcCk7XG4gICAgICAgIHRoaXMuY3Jvc3NoYWlyLmNyZWF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9nZ2xlUHJpbnRhYmxlQXJlYShzdGF0ZTogYm9vbGVhbikge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuUHJpbnRhYmxlQXJlYSA9PT0gdHJ1ZSkge1xuICAgICAgaWYgKHN0YXRlID09PSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5wcmludGFibGVBcmVhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLnByaW50YWJsZUFyZWEuZGVzdHJveSgpO1xuICAgICAgICAgIHRoaXMucHJpbnRhYmxlQXJlYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcmludGFibGVBcmVhID0gbmV3IFByaW50YWJsZUFyZWFNYW5hZ2VyKHRoaXMubWFwKTtcbiAgICAgICAgdGhpcy51cGRhdGVQcmludGFibGVBcmVhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVQcmludGFibGVBcmVhKCkge1xuICAgIGlmICh0aGlzLnByaW50YWJsZUFyZWEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYWdlU2l6ZTogSFRNTFNlbGVjdEVsZW1lbnQgPSA8SFRNTFNlbGVjdEVsZW1lbnQ+ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcGJveC1nbC1leHBvcnQtcGFnZS1zaXplJyk7XG4gICAgY29uc3QgcGFnZU9yaWVudGF0aW9uOiBIVE1MU2VsZWN0RWxlbWVudCA9IDxIVE1MU2VsZWN0RWxlbWVudD5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwYm94LWdsLWV4cG9ydC1wYWdlLW9yaWVudGFpdG9uJyk7XG4gICAgY29uc3Qgb3JpZW50VmFsdWUgPSBwYWdlT3JpZW50YXRpb24udmFsdWU7XG4gICAgbGV0IHBhZ2VTaXplVmFsdWUgPSBKU09OLnBhcnNlKHBhZ2VTaXplLnZhbHVlKTtcbiAgICBpZiAob3JpZW50VmFsdWUgPT09IFBhZ2VPcmllbnRhdGlvbi5Qb3J0cmFpdCkge1xuICAgICAgcGFnZVNpemVWYWx1ZSA9IHBhZ2VTaXplVmFsdWUucmV2ZXJzZSgpO1xuICAgIH1cbiAgICB0aGlzLnByaW50YWJsZUFyZWEudXBkYXRlQXJlYShwYWdlU2l6ZVZhbHVlWzBdLCBwYWdlU2l6ZVZhbHVlWzFdKTtcbiAgfVxufVxuIiwiZXhwb3J0IHsgZGVmYXVsdCBhcyBNYXBib3hFeHBvcnRDb250cm9sIH0gZnJvbSAnLi9leHBvcnQtY29udHJvbCc7XG5leHBvcnQge1xuICBTaXplLCBQYWdlT3JpZW50YXRpb24sIEZvcm1hdCwgRFBJLFxufSBmcm9tICcuL21hcC1nZW5lcmF0b3InO1xuIiwiY29uc3QgdHJhbnNsYXRpb24gPSB7XG4gIFBhZ2VTaXplOiAnUGFwaWVyZm9ybWF0JyxcbiAgUGFnZU9yaWVudGF0aW9uOiAnUGFwaWVyYXVzcmljaHR1bmcnLFxuICBGb3JtYXQ6ICdEYXRlaWZvcm1hdCcsXG4gIERQSTogJ0RydWNrYXVmbMO2c3VuZycsXG4gIEdlbmVyYXRlOiAnRXJzdGVsbGVuJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0aW9uO1xuIiwiY29uc3QgdHJhbnNsYXRpb24gPSB7XG4gIFBhZ2VTaXplOiAnUGFnZSBTaXplJyxcbiAgUGFnZU9yaWVudGF0aW9uOiAnUGFnZSBPcmllbnRhdGlvbicsXG4gIEZvcm1hdDogJ0Zvcm1hdCcsXG4gIERQSTogJ0RQSScsXG4gIEdlbmVyYXRlOiAnR2VuZXJhdGUnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRpb247XG4iLCJjb25zdCB0cmFuc2xhdGlvbiA9IHtcbiAgUGFnZVNpemU6ICdTaXZ1a29rbycsXG4gIFBhZ2VPcmllbnRhdGlvbjogJ1NpdnVuIHN1dW50YScsXG4gIEZvcm1hdDogJ011b3RvJyxcbiAgRFBJOiAnRFBJJyxcbiAgR2VuZXJhdGU6ICdHZW5lcm9pJyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0aW9uO1xuIiwiY29uc3QgdHJhbnNsYXRpb24gPSB7XG4gIFBhZ2VTaXplOiAnVGFpbGxlIGRlIHBhZ2UnLFxuICBQYWdlT3JpZW50YXRpb246ICdPcmllbnRhdGlvbiBkZSBsYSBwYWdlJyxcbiAgRm9ybWF0OiAnRm9ybWF0JyxcbiAgRFBJOiAnRFBJJyxcbiAgR2VuZXJhdGU6ICdHw6luw6lyZXInLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRpb247XG4iLCJpbXBvcnQgZW5nbGlzaCBmcm9tICcuL2VuJztcbmltcG9ydCBmcmVuY2ggZnJvbSAnLi9mcic7XG5pbXBvcnQgZmlubmlzaCBmcm9tICcuL2ZpJztcbmltcG9ydCBnZXJtYW4gZnJvbSAnLi9kZSc7XG5pbXBvcnQgc3dlZGlzaCBmcm9tICcuL3N2JztcbmltcG9ydCB2aWV0bmFtIGZyb20gJy4vdmknO1xuXG50eXBlIFRyYW5zbGF0aW9uID0ge1xuICBQYWdlU2l6ZTogc3RyaW5nO1xuICBQYWdlT3JpZW50YXRpb246IHN0cmluZztcbiAgRm9ybWF0OiBzdHJpbmc7XG4gIERQSTogc3RyaW5nO1xuICBHZW5lcmF0ZTogc3RyaW5nO1xufVxuXG5leHBvcnQge1xuICBlbmdsaXNoLFxuICBmcmVuY2gsXG4gIGZpbm5pc2gsXG4gIGdlcm1hbixcbiAgc3dlZGlzaCxcbiAgdmlldG5hbSxcbiAgVHJhbnNsYXRpb24sXG59O1xuIiwiY29uc3QgdHJhbnNsYXRpb24gPSB7XG4gIFBhZ2VTaXplOiAnU2lkc3RvcmxlaycsXG4gIFBhZ2VPcmllbnRhdGlvbjogJ1NpZG9yaWVudGVyaW5nJyxcbiAgRm9ybWF0OiAnRm9ybWF0JyxcbiAgRFBJOiAnRFBJJyxcbiAgR2VuZXJhdGU6ICdHZW5lcmVyYScsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGlvbjtcbiIsImNvbnN0IHRyYW5zbGF0aW9uID0ge1xuICBQYWdlU2l6ZTogJ0vDrWNoIHRoxrDhu5tjIHRyYW5nJyxcbiAgUGFnZU9yaWVudGF0aW9uOiAnTG/huqFpIHRyYW5nJyxcbiAgRm9ybWF0OiAnxJDhu4tuaCBk4bqhbmcnLFxuICBEUEk6ICdN4bqtdCDEkeG7mSDEkWnhu4NtIOG6o25oIChEUEkpJyxcbiAgR2VuZXJhdGU6ICdU4bqhbycsXG59O1xuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGlvbjtcbiIsIi8qXG4gKiBtcGV0cm9mZi9wcmludC1tYXBzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbXBldHJvZmYvcHJpbnQtbWFwc1xuICpcbiAqIEkgdXNlZCB0aGUgc291cmNlIGNvZGUgZnJvbSB0aGUgYWJvdmUgcmVwb3NpdG9yeS4gVGhhbmtzIHNvIG11Y2ghXG4gKlxuICogLS0tLS1MSUNFTlNFLS0tLS0tXG4gKiBQcmludCBNYXBzIC0gSGlnaC1yZXNvbHV0aW9uIG1hcHMgaW4gdGhlIGJyb3dzZXIsIGZvciBwcmludGluZ1xuICogQ29weXJpZ2h0IChjKSAyMDE1LTIwMjAgTWF0dGhldyBQZXRyb2ZmXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5pbXBvcnQgeyBqc1BERiB9IGZyb20gJ2pzcGRmJztcbmltcG9ydCB7IHNhdmVBcyB9IGZyb20gJ2ZpbGUtc2F2ZXInO1xuaW1wb3J0IHsgYWNjZXNzVG9rZW4sIE1hcCBhcyBNYXBib3hNYXAgfSBmcm9tICdtYXBib3gtZ2wnO1xuaW1wb3J0ICdqcy1sb2FkaW5nLW92ZXJsYXknO1xuaW1wb3J0IHsgZmFicmljIH0gZnJvbSAnZmFicmljJztcblxuZXhwb3J0IGNvbnN0IEZvcm1hdCA9IHtcbiAgSlBFRzogJ2pwZycsXG4gIFBORzogJ3BuZycsXG4gIFBERjogJ3BkZicsXG4gIFNWRzogJ3N2ZycsXG59IGFzIGNvbnN0O1xudHlwZSBGb3JtYXQgPSB0eXBlb2YgRm9ybWF0W2tleW9mIHR5cGVvZiBGb3JtYXRdO1xuXG5leHBvcnQgY29uc3QgVW5pdCA9IHtcbiAgLy8gZG9uJ3QgdXNlIGluY2ggdW5pdC4gYmVjYXVzZSBwYWdlIHNpemUgc2V0dGluZyBpcyB1c2luZyBtbSB1bml0LlxuICBpbjogJ2luJyxcbiAgbW06ICdtbScsXG59IGFzIGNvbnN0O1xudHlwZSBVbml0ID0gdHlwZW9mIFVuaXRba2V5b2YgdHlwZW9mIFVuaXRdO1xuXG5leHBvcnQgY29uc3QgU2l6ZSA9IHtcbiAgLy8gQTAsIEExLCBCMCwgQjEgYXJlIG5vdCB3b3JraW5nIHdlbGwuXG4gIC8vIEEwOiBbMTE4OSwgODQxXSxcbiAgLy8gQTE6IFs4NDEsIDU5NF0sXG4gIExFVFRFUjogWzI3OSwyMTZdLCAvLyA4LjV4MTEgLSB3b3Jrc1xuICAvL1RBQkxPSUQ6IFs0MzIsMjc5XSAvLyAxMXgxNyAtIG5vdCB3b3JraW5nIGN1cnJlbnRseSBwcmludHMgdG8gMTEuNjh4OC4yNyBpbiBsYW5kc2NhcGVcbiAgQTI6IFs1OTQsIDQyMF0sXG4gIEEzOiBbNDIwLCAyOTddLFxuICBBNDogWzI5NywgMjEwXSxcbiAgQTU6IFsyMTAsIDE0OF0sXG4gIEE2OiBbMTQ4LCAxMDVdLFxuICAvLyBCMDogWzE0MTQsIDEwMDBdLFxuICAvLyBCMTogWzEwMDAsIDcwN10sXG4gIEIyOiBbNzA3LCA1MDBdLFxuICBCMzogWzUwMCwgMzUzXSxcbiAgQjQ6IFszNTMsIDI1MF0sXG4gIEI1OiBbMjUwLCAxNzZdLFxuICBCNjogWzE3NiwgMTI1XSxcblxufSBhcyBjb25zdDtcbnR5cGUgU2l6ZSA9IHR5cGVvZiBTaXplW2tleW9mIHR5cGVvZiBTaXplXTtcblxuZXhwb3J0IGNvbnN0IFBhZ2VPcmllbnRhdGlvbiA9IHtcbiAgTGFuZHNjYXBlOiAnbGFuZHNjYXBlJyxcbiAgUG9ydHJhaXQ6ICdwb3J0cmFpdCcsXG59IGFzIGNvbnN0O1xudHlwZSBQYWdlT3JpZW50YXRpb24gPSB0eXBlb2YgUGFnZU9yaWVudGF0aW9uW2tleW9mIHR5cGVvZiBQYWdlT3JpZW50YXRpb25dO1xuXG5leHBvcnQgY29uc3QgRFBJID0ge1xuICA3MjogNzIsXG4gIDk2OiA5NixcbiAgMjAwOiAyMDAsXG4gIDMwMDogMzAwLFxuICA0MDA6IDQwMCxcbn0gYXMgY29uc3Q7XG50eXBlIERQSSA9IHR5cGVvZiBEUElba2V5b2YgdHlwZW9mIERQSV07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hcEdlbmVyYXRvciB7XG4gIHByaXZhdGUgbWFwOiBNYXBib3hNYXA7XG5cbiAgcHJpdmF0ZSB3aWR0aDogbnVtYmVyO1xuXG4gIHByaXZhdGUgaGVpZ2h0OiBudW1iZXI7XG5cbiAgcHJpdmF0ZSBkcGk6IG51bWJlcjtcblxuICBwcml2YXRlIGZvcm1hdDogc3RyaW5nO1xuXG4gIHByaXZhdGUgdW5pdDogVW5pdDtcblxuICBwcml2YXRlIGFjY2Vzc3Rva2VuOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBtYXAgTWFwYm94TWFwIG9iamVjdFxuICAgKiBAcGFyYW0gc2l6ZSBsYXlvdXQgc2l6ZS4gZGVmYXVsdCBpcyBBNFxuICAgKiBAcGFyYW0gZHBpIGRwaSB2YWx1ZS4gZGVhZnVsdCBpcyAzMDBcbiAgICogQHBhcmFtIGZvcm1hdCBpbWFnZSBmb3JtYXQuIGRlZmF1bHQgaXMgUE5HXG4gICAqIEBwYXJhbSB1bml0IGxlbmd0aCB1bml0LiBkZWZhdWx0IGlzIG1tXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBtYXA6TWFwYm94TWFwLFxuICAgIHNpemU6IFNpemUgPSBTaXplLkE0LFxuICAgIGRwaTogbnVtYmVyID0gMzAwLFxuICAgIGZvcm1hdDpzdHJpbmcgPSBGb3JtYXQuUE5HLnRvU3RyaW5nKCksXG4gICAgdW5pdDogVW5pdCA9IFVuaXQubW0sXG4gICAgYWNjZXNzdG9rZW4/OiBzdHJpbmcsXG4gICkge1xuICAgIHRoaXMubWFwID0gbWFwO1xuICAgIHRoaXMud2lkdGggPSBzaXplWzBdO1xuICAgIHRoaXMuaGVpZ2h0ID0gc2l6ZVsxXTtcbiAgICB0aGlzLmRwaSA9IGRwaTtcbiAgICB0aGlzLmZvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLnVuaXQgPSB1bml0O1xuICAgIHRoaXMuYWNjZXNzdG9rZW4gPSBhY2Nlc3N0b2tlbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhbmQgZG93bmxvYWQgTWFwIGltYWdlXG4gICAqL1xuICBnZW5lcmF0ZSgpIHtcbiAgICBjb25zdCB0aGlzXyA9IHRoaXM7XG5cbiAgICAvLyBzZWUgZG9jdW1lbnRhdGlvbiBmb3IgSlMgTG9hZGluZyBPdmVycmF5IGxpYnJhcnlcbiAgICAvLyBodHRwczovL2pzLWxvYWRpbmctb3ZlcmxheS5tdWhkZmFpei5jb21cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgSnNMb2FkaW5nT3ZlcmxheS5zaG93KHtcbiAgICAgIG92ZXJsYXlCYWNrZ3JvdW5kQ29sb3I6ICcjNUQ1OTU5JyxcbiAgICAgIG92ZXJsYXlPcGFjaXR5OiAnMC42JyxcbiAgICAgIHNwaW5uZXJJY29uOiAnYmFsbC1zcGluJyxcbiAgICAgIHNwaW5uZXJDb2xvcjogJyMyNDAwRkQnLFxuICAgICAgc3Bpbm5lclNpemU6ICcyeCcsXG4gICAgICBvdmVybGF5SUROYW1lOiAnb3ZlcmxheScsXG4gICAgICBzcGlubmVySUROYW1lOiAnc3Bpbm5lcicsXG4gICAgICBvZmZzZXRYOiAwLFxuICAgICAgb2Zmc2V0WTogMCxcbiAgICAgIGNvbnRhaW5lcklEOiBudWxsLFxuICAgICAgbG9ja1Njcm9sbDogZmFsc2UsXG4gICAgICBvdmVybGF5WkluZGV4OiA5OTk4LFxuICAgICAgc3Bpbm5lclpJbmRleDogOTk5OSxcbiAgICB9KTtcblxuICAgIC8vIENhbGN1bGF0ZSBwaXhlbCByYXRpb1xuICAgIGNvbnN0IGFjdHVhbFBpeGVsUmF0aW86IG51bWJlciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdkZXZpY2VQaXhlbFJhdGlvJywge1xuICAgICAgZ2V0KCkgeyByZXR1cm4gdGhpc18uZHBpIC8gOTY7IH0sXG4gICAgfSk7XG4gICAgLy8gQ3JlYXRlIG1hcCBjb250YWluZXJcbiAgICBjb25zdCBoaWRkZW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBoaWRkZW4uY2xhc3NOYW1lID0gJ2hpZGRlbi1tYXAnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaGlkZGVuKTtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSB0aGlzLnRvUGl4ZWxzKHRoaXMud2lkdGgpO1xuICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSB0aGlzLnRvUGl4ZWxzKHRoaXMuaGVpZ2h0KTtcbiAgICBoaWRkZW4uYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcblxuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5tYXAuZ2V0U3R5bGUoKTtcbiAgICBpZiAoc3R5bGUgJiYgc3R5bGUuc291cmNlcykge1xuICAgICAgY29uc3Qgc291cmNlcyA9IHN0eWxlLnNvdXJjZXM7XG4gICAgICBPYmplY3Qua2V5cyhzb3VyY2VzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHNyYyA9IHNvdXJjZXNbbmFtZV07XG4gICAgICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgLy8gZGVsZXRlIHByb3BlcnRpZXMgaWYgdmFsdWUgaXMgdW5kZWZpbmVkLlxuICAgICAgICAgIC8vIGZvciBpbnN0YW5jZSwgcmFzdGVyLWRlbSBtaWdodCBoYXMgdW5kZWZpbmVkIHZhbHVlIGluIFwidXJsXCIgYW5kIFwiYm91bmRzXCJcbiAgICAgICAgICBpZiAoIXNyY1trZXldKSBkZWxldGUgc3JjW2tleV07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmVuZGVyIG1hcFxuICAgIGNvbnN0IHJlbmRlck1hcCA9IG5ldyBNYXBib3hNYXAoe1xuICAgICAgYWNjZXNzVG9rZW46IHRoaXMuYWNjZXNzdG9rZW4gfHwgYWNjZXNzVG9rZW4sXG4gICAgICBjb250YWluZXIsXG4gICAgICBzdHlsZSxcbiAgICAgIGNlbnRlcjogdGhpcy5tYXAuZ2V0Q2VudGVyKCksXG4gICAgICB6b29tOiB0aGlzLm1hcC5nZXRab29tKCksXG4gICAgICBiZWFyaW5nOiB0aGlzLm1hcC5nZXRCZWFyaW5nKCksXG4gICAgICBwaXRjaDogdGhpcy5tYXAuZ2V0UGl0Y2goKSxcbiAgICAgIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgICAgIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjogdHJ1ZSxcbiAgICAgIGZhZGVEdXJhdGlvbjogMCxcbiAgICAgIGF0dHJpYnV0aW9uQ29udHJvbDogZmFsc2UsXG4gICAgICAvLyBoYWNrIHRvIHJlYWQgdHJhbnNmcm9tIHJlcXVlc3QgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6ICh0aGlzLm1hcCBhcyBhbnkpLl9yZXF1ZXN0TWFuYWdlci5fdHJhbnNmb3JtUmVxdWVzdEZuLFxuICAgIH0pO1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGltYWdlcyA9ICh0aGlzLm1hcC5zdHlsZS5pbWFnZU1hbmFnZXIgfHwge30pLmltYWdlcyB8fCBbXTtcbiAgICBPYmplY3Qua2V5cyhpbWFnZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgcmVuZGVyTWFwLmFkZEltYWdlKGtleSwgaW1hZ2VzW2tleV0uZGF0YSk7XG4gICAgfSk7XG5cbiAgICByZW5kZXJNYXAub25jZSgnaWRsZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IHJlbmRlck1hcC5nZXRDYW52YXMoKTtcbiAgICAgIGNvbnN0IGZpbGVOYW1lID0gYG1hcC4ke3RoaXNfLmZvcm1hdH1gO1xuICAgICAgc3dpdGNoICh0aGlzXy5mb3JtYXQpIHtcbiAgICAgICAgY2FzZSBGb3JtYXQuUE5HOlxuICAgICAgICAgIHRoaXNfLnRvUE5HKGNhbnZhcywgZmlsZU5hbWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEZvcm1hdC5KUEVHOlxuICAgICAgICAgIHRoaXNfLnRvSlBFRyhjYW52YXMsIGZpbGVOYW1lKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBGb3JtYXQuUERGOlxuICAgICAgICAgIHRoaXNfLnRvUERGKHJlbmRlck1hcCwgZmlsZU5hbWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEZvcm1hdC5TVkc6XG4gICAgICAgICAgdGhpc18udG9TVkcoY2FudmFzLCBmaWxlTmFtZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihgSW52YWxpZCBmaWxlIGZvcm1hdDogJHt0aGlzXy5mb3JtYXR9YCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJlbmRlck1hcC5yZW1vdmUoKTtcbiAgICAgIGhpZGRlbi5wYXJlbnROb2RlPy5yZW1vdmVDaGlsZChoaWRkZW4pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2RldmljZVBpeGVsUmF0aW8nLCB7XG4gICAgICAgIGdldCgpIHsgcmV0dXJuIGFjdHVhbFBpeGVsUmF0aW87IH0sXG4gICAgICB9KTtcblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgSnNMb2FkaW5nT3ZlcmxheS5oaWRlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBjYW52YXMgdG8gUE5HXG4gICAqIEBwYXJhbSBjYW52YXMgQ2FudmFzIGVsZW1lbnRcbiAgICogQHBhcmFtIGZpbGVOYW1lIGZpbGUgbmFtZVxuICAgKi9cbiAgcHJpdmF0ZSB0b1BORyhjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCBmaWxlTmFtZTogc3RyaW5nKSB7XG4gICAgY2FudmFzLnRvQmxvYigoYmxvYikgPT4ge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgc2F2ZUFzKGJsb2IsIGZpbGVOYW1lKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGNhbnZhcyB0byBKUEVHXG4gICAqIEBwYXJhbSBjYW52YXMgQ2FudmFzIGVsZW1lbnRcbiAgICogQHBhcmFtIGZpbGVOYW1lIGZpbGUgbmFtZVxuICAgKi9cbiAgcHJpdmF0ZSB0b0pQRUcoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZmlsZU5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHVyaSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL2pwZWcnLCAwLjg1KTtcbiAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGEuaHJlZiA9IHVyaTtcbiAgICBhLmRvd25sb2FkID0gZmlsZU5hbWU7XG4gICAgYS5jbGljaygpO1xuICAgIGEucmVtb3ZlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBNYXAgb2JqZWN0IHRvIFBERlxuICAgKiBAcGFyYW0gbWFwIG1hcGJveGdsLk1hcCBvYmplY3RcbiAgICogQHBhcmFtIGZpbGVOYW1lIGZpbGUgbmFtZVxuICAgKi9cbiAgcHJpdmF0ZSB0b1BERihtYXA6IG1hcGJveGdsLk1hcCwgZmlsZU5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGNhbnZhcyA9IG1hcC5nZXRDYW52YXMoKTtcbiAgICBjb25zdCBwZGYgPSBuZXcganNQREYoe1xuICAgICAgb3JpZW50YXRpb246IHRoaXMud2lkdGggPiB0aGlzLmhlaWdodCA/ICdsJyA6ICdwJyxcbiAgICAgIHVuaXQ6IHRoaXMudW5pdCxcbiAgICAgIGNvbXByZXNzOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgcGRmLmFkZEltYWdlKGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpLCAncG5nJywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHVuZGVmaW5lZCwgJ0ZBU1QnKTtcblxuICAgIGNvbnN0IHsgbG5nLCBsYXQgfSA9IG1hcC5nZXRDZW50ZXIoKTtcbiAgICBwZGYuc2V0UHJvcGVydGllcyh7XG4gICAgICB0aXRsZTogbWFwLmdldFN0eWxlKCkubmFtZSxcbiAgICAgIHN1YmplY3Q6IGBjZW50ZXI6IFske2xuZ30sICR7bGF0fV0sIHpvb206ICR7bWFwLmdldFpvb20oKX1gLFxuICAgICAgY3JlYXRvcjogJ01hcGJveCBHTCBFeHBvcnQgUGx1Z2luJyxcbiAgICAgIGF1dGhvcjogJyhjKU1hcGJveCwgKGMpT3BlblN0cmVldE1hcCcsXG4gICAgfSk7XG5cbiAgICBwZGYuc2F2ZShmaWxlTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBjYW52YXMgdG8gU1ZHXG4gICAqIHRoaXMgU1ZHIGV4cG9ydCBpcyB1c2luZyBmYWJyaWMuanMuIEl0IGlzIHVuZGVyIGV4cGVyaW1lbnQuXG4gICAqIFBsZWFzZSBhbHNvIHNlZSB0aGVpciBkb2N1bWVudC5cbiAgICogaHR0cDovL2ZhYnJpY2pzLmNvbS9kb2NzL1xuICAgKiBAcGFyYW0gY2FudmFzIENhbnZhcyBlbGVtZW50XG4gICAqIEBwYXJhbSBmaWxlTmFtZSBmaWxlIG5hbWVcbiAgICovXG4gIHByaXZhdGUgdG9TVkcoY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgZmlsZU5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHVyaSA9IGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuICAgIGZhYnJpYy5JbWFnZS5mcm9tVVJMKHVyaSwgKGltYWdlKSA9PiB7XG4gICAgICBjb25zdCB0bXBDYW52YXMgPSBuZXcgZmFicmljLkNhbnZhcygnY2FudmFzJyk7XG4gICAgICBjb25zdCBweFdpZHRoID0gTnVtYmVyKHRoaXMudG9QaXhlbHModGhpcy53aWR0aCwgdGhpcy5kcGkpLnJlcGxhY2UoJ3B4JywgJycpKTtcbiAgICAgIGNvbnN0IHB4SGVpZ2h0ID0gTnVtYmVyKHRoaXMudG9QaXhlbHModGhpcy5oZWlnaHQsIHRoaXMuZHBpKS5yZXBsYWNlKCdweCcsICcnKSk7XG4gICAgICBpbWFnZS5zY2FsZVRvV2lkdGgocHhXaWR0aCk7XG4gICAgICBpbWFnZS5zY2FsZVRvSGVpZ2h0KHB4SGVpZ2h0KTtcblxuICAgICAgdG1wQ2FudmFzLmFkZChpbWFnZSk7XG4gICAgICBjb25zdCBzdmcgPSB0bXBDYW52YXMudG9TVkcoe1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIHdpZHRoOiBweFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IHB4SGVpZ2h0LFxuICAgICAgICB2aWV3Qm94OiB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAwLFxuICAgICAgICAgIHdpZHRoOiBweFdpZHRoLFxuICAgICAgICAgIGhlaWdodDogcHhIZWlnaHQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICBhLmhyZWYgPSBgZGF0YTphcHBsaWNhdGlvbi94bWwsJHtlbmNvZGVVUklDb21wb25lbnQoc3ZnKX1gO1xuICAgICAgYS5kb3dubG9hZCA9IGZpbGVOYW1lO1xuICAgICAgYS5jbGljaygpO1xuICAgICAgYS5yZW1vdmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IG1tL2luY2ggdG8gcGl4ZWxcbiAgICogQHBhcmFtIGxlbmd0aCBtbS9pbmNoIGxlbmd0aFxuICAgKiBAcGFyYW0gY29udmVyc2lvbkZhY3RvciBEUEkgdmFsdWUuIGRlZmF1bHQgaXMgOTYuXG4gICAqL1xuICBwcml2YXRlIHRvUGl4ZWxzKGxlbmd0aDpudW1iZXIsIGNvbnZlcnNpb25GYWN0b3IgPSA5Nikge1xuICAgIGlmICh0aGlzLnVuaXQgPT09IFVuaXQubW0pIHtcbiAgICAgIGNvbnZlcnNpb25GYWN0b3IgLz0gMjUuNDtcbiAgICB9XG4gICAgcmV0dXJuIGAke2NvbnZlcnNpb25GYWN0b3IgKiBsZW5ndGh9cHhgO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNYXAgYXMgTWFwYm94TWFwIH0gZnJvbSAnbWFwYm94LWdsJztcbmltcG9ydCB7XG4gIFVuaXQsXG59IGZyb20gJy4vbWFwLWdlbmVyYXRvcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByaW50YWJsZUFyZWFNYW5hZ2VyIHtcbiAgICBwcml2YXRlIG1hcDogTWFwYm94TWFwIHwgdW5kZWZpbmVkO1xuXG4gICAgcHJpdmF0ZSB3aWR0aDogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBoZWlnaHQ6IG51bWJlcjtcblxuICAgIHByaXZhdGUgdW5pdDogc3RyaW5nO1xuXG4gICAgcHJpdmF0ZSBzdmdDYW52YXM6IFNWR0VsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIHN2Z1BhdGg6IFNWR0VsZW1lbnQgfCB1bmRlZmluZWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgIG1hcDogTWFwYm94TWFwIHwgdW5kZWZpbmVkLFxuICAgICkge1xuICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICBpZiAodGhpcy5tYXAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm1hcFJlc2l6ZSA9IHRoaXMubWFwUmVzaXplLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLm1hcC5vbigncmVzaXplJywgdGhpcy5tYXBSZXNpemUpO1xuICAgICAgY29uc3QgY2xpZW50V2lkdGggPSB0aGlzLm1hcD8uZ2V0Q2FudmFzKCkuY2xpZW50V2lkdGg7XG4gICAgICBjb25zdCBjbGllbnRIZWlnaHQgPSB0aGlzLm1hcD8uZ2V0Q2FudmFzKCkuY2xpZW50SGVpZ2h0O1xuICAgICAgY29uc3Qgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgICAgIHN2Zy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICBzdmcuc3R5bGUudG9wID0gJzBweCc7XG4gICAgICBzdmcuc3R5bGUubGVmdCA9ICcwcHgnO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBgJHtjbGllbnRXaWR0aH1weGApO1xuICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgYCR7Y2xpZW50SGVpZ2h0fXB4YCk7XG4gICAgICBjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZmlsbDojODg4ODg4O3N0cm9rZS13aWR0aDowJyk7XG4gICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgJzAuNScpO1xuICAgICAgc3ZnLmFwcGVuZChwYXRoKTtcbiAgICAgIHRoaXMubWFwPy5nZXRDYW52YXNDb250YWluZXIoKS5hcHBlbmRDaGlsZChzdmcpO1xuICAgICAgdGhpcy5zdmdDYW52YXMgPSBzdmc7XG4gICAgICB0aGlzLnN2Z1BhdGggPSBwYXRoO1xuICAgIH1cblxuICAgIHByaXZhdGUgbWFwUmVzaXplKCkge1xuICAgICAgdGhpcy5nZW5lcmF0ZUN1dE91dCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVBcmVhKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgIHRoaXMudW5pdCA9IFVuaXQubW07XG4gICAgICB0aGlzLmdlbmVyYXRlQ3V0T3V0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZUN1dE91dCgpIHtcbiAgICAgIGlmICh0aGlzLm1hcCA9PT0gdW5kZWZpbmVkXG4gICAgICAgIHx8IHRoaXMuc3ZnQ2FudmFzID09PSB1bmRlZmluZWRcbiAgICAgICAgfHwgdGhpcy5zdmdQYXRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgd2lkdGggPSB0aGlzLnRvUGl4ZWxzKHRoaXMud2lkdGgpO1xuICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy50b1BpeGVscyh0aGlzLmhlaWdodCk7XG4gICAgICBjb25zdCBjbGllbnRXaWR0aCA9IHRoaXMubWFwPy5nZXRDYW52YXMoKS5jbGllbnRXaWR0aDtcbiAgICAgIGNvbnN0IGNsaWVudEhlaWdodCA9IHRoaXMubWFwPy5nZXRDYW52YXMoKS5jbGllbnRIZWlnaHQ7XG4gICAgICBjb25zdCBzdGFydFggPSBjbGllbnRXaWR0aCAvIDIgLSB3aWR0aCAvIDI7XG4gICAgICBjb25zdCBlbmRYID0gc3RhcnRYICsgd2lkdGg7XG4gICAgICBjb25zdCBzdGFydFkgPSBjbGllbnRIZWlnaHQgLyAyIC0gaGVpZ2h0IC8gMjtcbiAgICAgIGNvbnN0IGVuZFkgPSBzdGFydFkgKyBoZWlnaHQ7XG5cbiAgICAgIHRoaXMuc3ZnQ2FudmFzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBgJHtjbGllbnRXaWR0aH1weGApO1xuICAgICAgdGhpcy5zdmdDYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBgJHtjbGllbnRIZWlnaHR9cHhgKTtcbiAgICAgIHRoaXMuc3ZnUGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBgTSAwIDAgTCAke2NsaWVudFdpZHRofSAwIEwgJHtjbGllbnRXaWR0aH0gJHtjbGllbnRIZWlnaHR9IEwgMCAke2NsaWVudEhlaWdodH0gTSAke3N0YXJ0WH0gJHtzdGFydFl9IEwgJHtzdGFydFh9ICR7ZW5kWX0gTCAke2VuZFh9ICR7ZW5kWX0gTCAke2VuZFh9ICR7c3RhcnRZfWApO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMuc3ZnQ2FudmFzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zdmdDYW52YXMucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuc3ZnQ2FudmFzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tYXAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLm1hcCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IG1tL2luY2ggdG8gcGl4ZWxcbiAgICAgKiBAcGFyYW0gbGVuZ3RoIG1tL2luY2ggbGVuZ3RoXG4gICAgICogQHBhcmFtIGNvbnZlcnNpb25GYWN0b3IgRFBJIHZhbHVlLiBkZWZhdWx0IGlzIDk2LlxuICAgICAqL1xuICAgIHByaXZhdGUgdG9QaXhlbHMobGVuZ3RoOm51bWJlciwgY29udmVyc2lvbkZhY3RvciA9IDk2KSB7XG4gICAgICBpZiAodGhpcy51bml0ID09PSBVbml0Lm1tKSB7XG4gICAgICAgIGNvbnZlcnNpb25GYWN0b3IgLz0gMjUuNDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb252ZXJzaW9uRmFjdG9yICogbGVuZ3RoO1xuICAgIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gbWFwYm94Z2w7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cbn07XG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cbn1cblxudmFyIGNodW5rTG9hZGluZ0dsb2JhbCA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtfd2F0ZXJnaXNfbWFwYm94X2dsX2V4cG9ydFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtfd2F0ZXJnaXNfbWFwYm94X2dsX2V4cG9ydFwiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBtYXBib3hnbCBmcm9tICdtYXBib3gtZ2wnO1xuaW1wb3J0IHsgTWFwYm94RXhwb3J0Q29udHJvbCwgU2l6ZSwgUGFnZU9yaWVudGF0aW9uLCBGb3JtYXQsIERQSX0gZnJvbSAnLi4vbGliL2luZGV4JztcbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG4oKCk9PntcbiAgICAvLyBtYXBib3hnbC5hY2Nlc3NUb2tlbj0neW91ciBtYXBib3ggYWNjZXNzIHRva2VuJ1xuICAgIGNvbnN0IG1hcCA9IG5ldyBtYXBib3hnbC5NYXAoe1xuICAgICAgICBjb250YWluZXI6ICdtYXAnLFxuICAgICAgICAvLyBzdHlsZTogJ21hcGJveDovL3N0eWxlcy9tYXBib3gvc3RyZWV0cy12MTEnLFxuICAgICAgICBzdHlsZTonaHR0cHM6Ly9uYXJ3YXNzY28uZ2l0aHViLmlvL21hcGJveC1zdHlsZWZpbGVzL3VudnQvc3R5bGUuanNvbicsXG4gICAgICAgIGNlbnRlcjogWzM1Ljg3MDYzLCAtMS4wODU1MV0sXG4gICAgICAgIHpvb206IDEyLFxuICAgICAgICBoYXNoOnRydWUsXG4gICAgfSk7XG4gICAgbWFwLmFkZENvbnRyb2wobmV3IG1hcGJveGdsLk5hdmlnYXRpb25Db250cm9sKCksICd0b3AtcmlnaHQnKTtcbiAgICBtYXAuYWRkQ29udHJvbChuZXcgTWFwYm94RXhwb3J0Q29udHJvbCh7XG4gICAgICAgIFBhZ2VTaXplOiBTaXplLkEzLFxuICAgICAgICBQYWdlT3JpZW50YXRpb246IFBhZ2VPcmllbnRhdGlvbi5Qb3J0cmFpdCxcbiAgICAgICAgRm9ybWF0OiBGb3JtYXQuUE5HLFxuICAgICAgICBEUEk6IERQSVs5Nl0sXG4gICAgICAgIENyb3NzaGFpcjogdHJ1ZSxcbiAgICAgICAgUHJpbnRhYmxlQXJlYTogdHJ1ZSxcbiAgICAgICAgTG9jYWw6ICdlbidcbiAgICB9KSwgJ3RvcC1yaWdodCcpO1xufSkoKSJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJwdXNoIiwibW9kdWxlIiwiaWQiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiaXNGdW5jdGlvbiIsIngiLCJpc0FycmF5IiwiQXJyYXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwibGVuIiwidmVydHhOZXh0IiwiY3VzdG9tU2NoZWR1bGVyRm4iLCJhc2FwIiwiY2FsbGJhY2siLCJhcmciLCJxdWV1ZSIsImZsdXNoIiwic2NoZWR1bGVGbHVzaCIsImJyb3dzZXJXaW5kb3ciLCJ3aW5kb3ciLCJicm93c2VyR2xvYmFsIiwiQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImlzTm9kZSIsInNlbGYiLCJwcm9jZXNzIiwiaXNXb3JrZXIiLCJVaW50OENsYW1wZWRBcnJheSIsImltcG9ydFNjcmlwdHMiLCJNZXNzYWdlQ2hhbm5lbCIsInVzZVNldFRpbWVvdXQiLCJnbG9iYWxTZXRUaW1lb3V0Iiwic2V0VGltZW91dCIsImNoYW5uZWwiLCJpdGVyYXRpb25zIiwib2JzZXJ2ZXIiLCJub2RlIiwidGhlbiIsIm9uRnVsZmlsbG1lbnQiLCJvblJlamVjdGlvbiIsInBhcmVudCIsImNoaWxkIiwiY29uc3RydWN0b3IiLCJub29wIiwiUFJPTUlTRV9JRCIsIm1ha2VQcm9taXNlIiwiX3N0YXRlIiwiYXJndW1lbnRzIiwiaW52b2tlQ2FsbGJhY2siLCJfcmVzdWx0Iiwic3Vic2NyaWJlIiwicmVzb2x2ZSQxIiwib2JqZWN0IiwicHJvbWlzZSIsInJlc29sdmUiLCJuZXh0VGljayIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInBvcnQxIiwib25tZXNzYWdlIiwicG9ydDIiLCJwb3N0TWVzc2FnZSIsInZlcnR4IiwiRnVuY3Rpb24iLCJyZXF1aXJlIiwicnVuT25Mb29wIiwicnVuT25Db250ZXh0IiwiZSIsImF0dGVtcHRWZXJ0eCIsIk1hdGgiLCJyYW5kb20iLCJzdWJzdHJpbmciLCJQRU5ESU5HIiwiaGFuZGxlTWF5YmVUaGVuYWJsZSIsIm1heWJlVGhlbmFibGUiLCJ0aGVuJCQxIiwidGhlbmFibGUiLCJmdWxmaWxsIiwicmVqZWN0IiwidmFsdWUiLCJyZWFzb24iLCJoYW5kbGVPd25UaGVuYWJsZSIsInNlYWxlZCIsImVycm9yIiwiZnVsZmlsbG1lbnRIYW5kbGVyIiwicmVqZWN0aW9uSGFuZGxlciIsInRyeVRoZW4iLCJfbGFiZWwiLCJoYW5kbGVGb3JlaWduVGhlbmFibGUiLCJUeXBlRXJyb3IiLCJ0eXBlIiwicHVibGlzaFJlamVjdGlvbiIsIl9vbmVycm9yIiwicHVibGlzaCIsIl9zdWJzY3JpYmVycyIsInN1YnNjcmliZXJzIiwic2V0dGxlZCIsImRldGFpbCIsImhhc0NhbGxiYWNrIiwic3VjY2VlZGVkIiwiRW51bWVyYXRvciIsIkNvbnN0cnVjdG9yIiwiaW5wdXQiLCJfaW5zdGFuY2VDb25zdHJ1Y3RvciIsIl9yZW1haW5pbmciLCJfZW51bWVyYXRlIiwiRXJyb3IiLCJfZWFjaEVudHJ5IiwiZW50cnkiLCJjIiwicmVzb2x2ZSQkMSIsIl90aGVuIiwiZGlkRXJyb3IiLCJfc2V0dGxlZEF0IiwiUHJvbWlzZSQxIiwiX3dpbGxTZXR0bGVBdCIsInN0YXRlIiwiZW51bWVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlciIsIm5lZWRzUmVzb2x2ZXIiLCJpbml0aWFsaXplUHJvbWlzZSIsIm5lZWRzTmV3IiwiY2F0Y2giLCJmaW5hbGx5IiwiYWxsIiwiZW50cmllcyIsInJhY2UiLCJfIiwiX3NldFNjaGVkdWxlciIsInNjaGVkdWxlRm4iLCJfc2V0QXNhcCIsImFzYXBGbiIsIl9hc2FwIiwicG9seWZpbGwiLCJsb2NhbCIsImciLCJQIiwicHJvbWlzZVRvU3RyaW5nIiwiY2FzdCIsImZhY3RvcnkiLCJnbG9iYWwiLCJzcXJ0IiwiYXRhbjIiLCJwb3ciLCJQaUJ5MTgwIiwiUGlCeTIiLCJjb3VsZFVzZUF0dGFjaEV2ZW50IiwidG91Y2hFdmVudHMiLCJwYXJzZUVsIiwic3VwcG9ydHNPcGFjaXR5Iiwic3VwcG9ydHNGaWx0ZXJzIiwicmVPcGFjaXR5Iiwic2V0T3BhY2l0eSIsInByb3RvIiwibWluIiwibWF4IiwiZGVncmVlc1RvUmFkaWFucyIsIm9yaWdpblhPZmZzZXQiLCJvcmlnaW5ZT2Zmc2V0IiwiY2xvbmUiLCJ0b0ZpeGVkIiwibXVsdGlwbGVTcGFjZXNSZWdleCIsImZhYnJpYyIsInZlcnNpb24iLCJIVE1MRG9jdW1lbnQiLCJEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwiY3JlYXRlSFRNTERvY3VtZW50IiwidmlydHVhbFdpbmRvdyIsIkpTRE9NIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZmVhdHVyZXMiLCJGZXRjaEV4dGVybmFsUmVzb3VyY2VzIiwicmVzb3VyY2VzIiwianNkb21JbXBsRm9yV3JhcHBlciIsIm5vZGVDYW52YXMiLCJET01QYXJzZXIiLCJjb3B5R0xUbzJERHJhd0ltYWdlIiwiZ2wiLCJwaXBlbGluZVN0YXRlIiwiZ2xDYW52YXMiLCJjYW52YXMiLCJ0YXJnZXRDYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwidHJhbnNsYXRlIiwiaGVpZ2h0Iiwic2NhbGUiLCJzb3VyY2VZIiwiZHJhd0ltYWdlIiwid2lkdGgiLCJjb3B5R0xUbzJEUHV0SW1hZ2VEYXRhIiwiZFdpZHRoIiwiZGVzdGluYXRpb25XaWR0aCIsImRIZWlnaHQiLCJkZXN0aW5hdGlvbkhlaWdodCIsIm51bUJ5dGVzIiwidTgiLCJVaW50OEFycmF5IiwiaW1hZ2VCdWZmZXIiLCJ1OENsYW1wZWQiLCJyZWFkUGl4ZWxzIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJpbWdEYXRhIiwiSW1hZ2VEYXRhIiwicHV0SW1hZ2VEYXRhIiwiaXNUb3VjaFN1cHBvcnRlZCIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwiaXNMaWtlbHlOb2RlIiwiQnVmZmVyIiwiU0hBUkVEX0FUVFJJQlVURVMiLCJEUEkiLCJyZU51bSIsImNvbW1hV3NwIiwicmVQYXRoQ29tbWFuZCIsInJlTm9uV29yZCIsImZvbnRQYXRocyIsImlNYXRyaXgiLCJzdmdOUyIsInBlcmZMaW1pdFNpemVUb3RhbCIsIm1heENhY2hlU2lkZUxpbWl0IiwibWluQ2FjaGVTaWRlTGltaXQiLCJjaGFyV2lkdGhzQ2FjaGUiLCJ0ZXh0dXJlU2l6ZSIsImRpc2FibGVTdHlsZUNvcHlQYXN0ZSIsImVuYWJsZUdMRmlsdGVyaW5nIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIndlYmtpdERldmljZVBpeGVsUmF0aW8iLCJtb3pEZXZpY2VQaXhlbFJhdGlvIiwiYnJvd3NlclNoYWRvd0JsdXJDb25zdGFudCIsImFyY1RvU2VnbWVudHNDYWNoZSIsImJvdW5kc09mQ3VydmVDYWNoZSIsImNhY2hlc0JvdW5kc09mQ3VydmUiLCJmb3JjZUdMUHV0SW1hZ2VEYXRhIiwiaW5pdEZpbHRlckJhY2tlbmQiLCJpc1dlYmdsU3VwcG9ydGVkIiwiY29uc29sZSIsImxvZyIsIm1heFRleHR1cmVTaXplIiwiV2ViZ2xGaWx0ZXJCYWNrZW5kIiwidGlsZVNpemUiLCJDYW52YXMyZEZpbHRlckJhY2tlbmQiLCJfcmVtb3ZlRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsImhhbmRsZXIiLCJfX2V2ZW50TGlzdGVuZXJzIiwiZXZlbnRMaXN0ZW5lciIsImluZGV4T2YiLCJ1dGlsIiwiYXJyYXkiLCJmaWxsIiwiX29uY2UiLCJfaGFuZGxlciIsImFwcGx5Iiwib2ZmIiwiYmluZCIsIm9uIiwiT2JzZXJ2YWJsZSIsImZpcmUiLCJsaXN0ZW5lcnNGb3JFdmVudCIsImZpbHRlciIsInByb3AiLCJvbmNlIiwiQ29sbGVjdGlvbiIsIl9vYmplY3RzIiwiYWRkIiwiX29uT2JqZWN0QWRkZWQiLCJyZW5kZXJPbkFkZFJlbW92ZSIsInJlcXVlc3RSZW5kZXJBbGwiLCJpbnNlcnRBdCIsImluZGV4Iiwibm9uU3BsaWNpbmciLCJvYmplY3RzIiwic3BsaWNlIiwicmVtb3ZlIiwic29tZXRoaW5nUmVtb3ZlZCIsIl9vbk9iamVjdFJlbW92ZWQiLCJmb3JFYWNoT2JqZWN0IiwiY29udGV4dCIsImdldE9iamVjdHMiLCJvIiwiaXNFbXB0eSIsInNpemUiLCJjb250YWlucyIsImRlZXAiLCJzb21lIiwib2JqIiwiY29tcGxleGl0eSIsInJlZHVjZSIsIm1lbW8iLCJjdXJyZW50IiwiQ29tbW9uTWV0aG9kcyIsIl9zZXRPcHRpb25zIiwic2V0IiwiX2luaXRHcmFkaWVudCIsImZpbGxlciIsInByb3BlcnR5IiwiY29sb3JTdG9wcyIsIkdyYWRpZW50IiwiX2luaXRQYXR0ZXJuIiwiUGF0dGVybiIsIl9zZXRPYmplY3QiLCJfc2V0Iiwia2V5IiwidG9nZ2xlIiwiZ2V0IiwiUEkiLCJjb3MiLCJhbmdsZSIsInNpbiIsInNpZ24iLCJyZW1vdmVGcm9tQXJyYXkiLCJpZHgiLCJnZXRSYW5kb21JbnQiLCJmbG9vciIsImRlZ3JlZXMiLCJyYWRpYW5zVG9EZWdyZWVzIiwicmFkaWFucyIsInJvdGF0ZVBvaW50IiwicG9pbnQiLCJvcmlnaW4iLCJuZXdQb2ludCIsIlBvaW50IiwieSIsInYiLCJyb3RhdGVWZWN0b3IiLCJhZGRFcXVhbHMiLCJ2ZWN0b3IiLCJjcmVhdGVWZWN0b3IiLCJmcm9tIiwidG8iLCJjYWxjQW5nbGVCZXR3ZWVuVmVjdG9ycyIsImEiLCJiIiwiYWNvcyIsImh5cG90IiwiZ2V0SGF0VmVjdG9yIiwibXVsdGlwbHkiLCJnZXRCaXNlY3RvciIsIkEiLCJCIiwiQyIsIkFCIiwiQUMiLCJhbHBoYSIsInBoaSIsInByb2plY3RTdHJva2VPblBvaW50cyIsInBvaW50cyIsIm9wZW5QYXRoIiwiY29vcmRzIiwicyIsInN0cm9rZVdpZHRoIiwic3Ryb2tlVW5pZm9ybVNjYWxhciIsInN0cm9rZVVuaWZvcm0iLCJzY2FsZVgiLCJzY2FsZVkiLCJnZXRTdHJva2VIYXRWZWN0b3IiLCJzY2FsYXIiLCJmb3JFYWNoIiwicCIsIm1pdGVyVmVjdG9yIiwiYmlzZWN0b3IiLCJiaXNlY3RvclZlY3RvciIsInN0cm9rZUxpbmVKb2luIiwic3Ryb2tlTWl0ZXJMaW1pdCIsInN1YnRyYWN0IiwiU1FSVDIiLCJ0cmFuc2Zvcm1Qb2ludCIsInQiLCJpZ25vcmVPZmZzZXQiLCJtYWtlQm91bmRpbmdCb3hGcm9tUG9pbnRzIiwidHJhbnNmb3JtIiwieFBvaW50cyIsIm1pblgiLCJ5UG9pbnRzIiwibWluWSIsImxlZnQiLCJ0b3AiLCJpbnZlcnRUcmFuc2Zvcm0iLCJyIiwibnVtYmVyIiwiZnJhY3Rpb25EaWdpdHMiLCJwYXJzZUZsb2F0IiwiTnVtYmVyIiwicGFyc2VVbml0IiwiZm9udFNpemUiLCJ1bml0IiwiZXhlYyIsIlRleHQiLCJERUZBVUxUX1NWR19GT05UX1NJWkUiLCJmYWxzZUZ1bmN0aW9uIiwiZ2V0S2xhc3MiLCJuYW1lc3BhY2UiLCJzdHJpbmciLCJjYW1lbGl6ZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwicmVzb2x2ZU5hbWVzcGFjZSIsImdldFN2Z0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwicGFydHMiLCJzcGxpdCIsImxvYWRJbWFnZSIsImNyb3NzT3JpZ2luIiwiaW1nIiwiY3JlYXRlSW1hZ2UiLCJvbkxvYWRDYWxsYmFjayIsIm9ubG9hZCIsIm9uZXJyb3IiLCJzcmMiLCJsb2FkSW1hZ2VJbkRvbSIsImRpdiIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInBvc2l0aW9uIiwiYXBwZW5kQ2hpbGQiLCJxdWVyeVNlbGVjdG9yIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZW5saXZlbk9iamVjdHMiLCJyZXZpdmVyIiwiZW5saXZlbmVkT2JqZWN0cyIsIm51bUxvYWRlZE9iamVjdHMiLCJudW1Ub3RhbE9iamVjdHMiLCJvbkxvYWRlZCIsImZyb21PYmplY3QiLCJlbmxpdmVuT2JqZWN0RW5saXZhYmxlcyIsImVubGl2ZW5Qcm9wcyIsIkVOTElWRU5fUFJPUFMiLCJlbmxpdmVkUHJvcHMiLCJlbmxpdmVuUGF0dGVybnMiLCJwYXR0ZXJucyIsIm51bUxvYWRlZFBhdHRlcm5zIiwibnVtUGF0dGVybnMiLCJlbmxpdmVuZWRQYXR0ZXJucyIsInBhdHRlcm4iLCJncm91cFNWR0VsZW1lbnRzIiwiZWxlbWVudHMiLCJwYXRoIiwiY2VudGVyUG9pbnQiLCJHcm91cCIsInNvdXJjZVBhdGgiLCJwb3B1bGF0ZVdpdGhQcm9wZXJ0aWVzIiwiZGVzdGluYXRpb24iLCJwcm9wZXJ0aWVzIiwiY3JlYXRlQ2FudmFzRWxlbWVudCIsImNvcHlDYW52YXNFbGVtZW50IiwibmV3Q2FudmFzIiwidG9EYXRhVVJMIiwiY2FudmFzRWwiLCJmb3JtYXQiLCJxdWFsaXR5IiwibXVsdGlwbHlUcmFuc2Zvcm1NYXRyaWNlcyIsImlzMngyIiwicXJEZWNvbXBvc2UiLCJkZW5vbSIsInNrZXdYIiwic2tld1kiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImNhbGNSb3RhdGVNYXRyaXgiLCJ0aGV0YSIsImNhbGNEaW1lbnNpb25zTWF0cml4Iiwic2NhbGVNYXRyaXgiLCJmbGlwWCIsImZsaXBZIiwidGFuIiwiY29tcG9zZU1hdHJpeCIsIm1hdHJpeCIsInJlc2V0T2JqZWN0VHJhbnNmb3JtIiwidGFyZ2V0Iiwicm90YXRlIiwic2F2ZU9iamVjdFRyYW5zZm9ybSIsImlzVHJhbnNwYXJlbnQiLCJ0b2xlcmFuY2UiLCJfaXNUcmFuc3BhcmVudCIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsImwiLCJwYXJzZVByZXNlcnZlQXNwZWN0UmF0aW9BdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJhbGlnbiIsIm1lZXRPclNsaWNlIiwiYXNwZWN0UmF0aW9BdHRycyIsInBvcCIsImFsaWduWCIsImFsaWduWSIsImNsZWFyRmFicmljRm9udENhY2hlIiwiZm9udEZhbWlseSIsInRvTG93ZXJDYXNlIiwibGltaXREaW1zQnlBcmVhIiwiYXIiLCJtYXhpbXVtQXJlYSIsInJvdWdoV2lkdGgiLCJwZXJmTGltaXRTaXplWSIsImNhcFZhbHVlIiwiZmluZFNjYWxlVG9GaXQiLCJmaW5kU2NhbGVUb0NvdmVyIiwibWF0cml4VG9TVkciLCJOVU1fRlJBQ1RJT05fRElHSVRTIiwicmVtb3ZlVHJhbnNmb3JtRnJvbU9iamVjdCIsImludmVydGVkIiwiZmluYWxUcmFuc2Zvcm0iLCJjYWxjT3duTWF0cml4IiwiYXBwbHlUcmFuc2Zvcm1Ub09iamVjdCIsImFkZFRyYW5zZm9ybVRvT2JqZWN0IiwiY2VudGVyIiwic2V0UG9zaXRpb25CeU9yaWdpbiIsInNpemVBZnRlclRyYW5zZm9ybSIsImRpbVgiLCJkaW1ZIiwidHJhbnNmb3JtTWF0cml4IiwiYmJveCIsIm1lcmdlQ2xpcFBhdGhzIiwiYzEiLCJjMiIsImNhbGNUcmFuc2Zvcm1NYXRyaXgiLCJjbGlwUGF0aCIsIl9qb2luIiwiY29tbWFuZExlbmd0aHMiLCJtIiwiaCIsInEiLCJyZXBlYXRlZENvbW1hbmRzIiwiTSIsInNlZ21lbnRUb0JlemllciIsInRoMiIsInRoMyIsImNvc1RoIiwic2luVGgiLCJyeCIsInJ5IiwiY3gxIiwiY3kxIiwibVQiLCJmcm9tWCIsImZyb21ZIiwiY29zdGgyIiwic2ludGgyIiwiY29zdGgzIiwic2ludGgzIiwidG9YIiwidG9ZIiwiY2FsY1ZlY3RvckFuZ2xlIiwidXgiLCJ1eSIsInZ4IiwidnkiLCJ0YSIsInRiIiwiZnJvbUFyY1RvQmV6aWVycyIsImZ4IiwiZnkiLCJyb3QiLCJsYXJnZSIsInN3ZWVwIiwic2Vnc05vcm0iLCJyb3RhdGVYIiwidGgiLCJweCIsInB5IiwicngyIiwiYWJzIiwicnkyIiwicHkyIiwicHgyIiwicGwiLCJyb290IiwiY3giLCJjeSIsIm1UaGV0YSIsImR0aGV0YSIsInNlZ21lbnRzIiwiY2VpbCIsInJlc3VsdCIsIm1EZWx0YSIsImFyY1RvU2VnbWVudHMiLCJjYWxjTGluZUxlbmd0aCIsIngxIiwieTEiLCJ4MiIsInkyIiwiZ2V0UG9pbnRPbkN1YmljQmV6aWVySXRlcmF0b3IiLCJwMXgiLCJwMXkiLCJwMngiLCJwMnkiLCJwM3giLCJwM3kiLCJwNHgiLCJwNHkiLCJwY3QiLCJDQjIiLCJjMyIsIkNCMyIsImM0IiwiQ0I0IiwiZ2V0VGFuZ2VudEN1YmljSXRlcmF0b3IiLCJpbnZUIiwidGFuZ2VudFgiLCJ0YW5nZW50WSIsImdldFBvaW50T25RdWFkcmF0aWNCZXppZXJJdGVyYXRvciIsIlFCMiIsIlFCMyIsImdldFRhbmdlbnRRdWFkcmF0aWNJdGVyYXRvciIsInBhdGhJdGVyYXRvciIsIml0ZXJhdG9yIiwicGVyYyIsInRlbXBQIiwidG1wTGVuIiwiZ2V0UGF0aFNlZ21lbnRzSW5mbyIsInRlbXBJbmZvIiwiYW5nbGVGaW5kZXIiLCJ0b3RhbExlbmd0aCIsImluZm8iLCJjb21tYW5kIiwiZGVzdFgiLCJkZXN0WSIsImpvaW5QYXRoIiwicGF0aERhdGEiLCJzZWdtZW50IiwicGFyc2VQYXRoIiwicGF0aFN0cmluZyIsImN1cnJlbnRQYXRoIiwicGFyc2VkIiwibWF0Y2giLCJjb29yZHNTdHIiLCJyZSIsInJOdW1iZXIiLCJyTnVtYmVyQ29tbWFXc3AiLCJyRmxhZ0NvbW1hV3NwIiwicmVnQXJjQXJndW1lbnRTZXF1ZW5jZSIsIlJlZ0V4cCIsImNvb3Jkc1BhcnNlZCIsInRyaW0iLCJhcmdzIiwiaiIsImpsZW4iLCJpc05hTiIsImNvbW1hbmRMZW5ndGgiLCJyZXBlYXRlZENvbW1hbmQiLCJrbGVuIiwibWFrZVBhdGhTaW1wbGVyIiwiY29udmVydGVkIiwicHJldmlvdXMiLCJjb250cm9sWCIsImNvbnRyb2xZIiwiZGVzdGluYXRpb25QYXRoIiwiZ2V0U21vb3RoUGF0aEZyb21Qb2ludHMiLCJjb3JyZWN0aW9uIiwicDEiLCJwMiIsIm11bHRTaWduWCIsIm11bHRTaWduWSIsIm1hbnlQb2ludHMiLCJlcSIsIm1pZFBvaW50IiwibWlkUG9pbnRGcm9tIiwiZ2V0Qm91bmRzT2ZDdXJ2ZSIsIngwIiwieTAiLCJ4MyIsInkzIiwiYXJnc1N0cmluZyIsInQxIiwidDIiLCJiMmFjIiwic3FydGIyYWMiLCJ0dmFsdWVzIiwiYm91bmRzIiwibXQiLCJnZXRQb2ludE9uUGF0aCIsImRpc3RhbmNlIiwiaW5mb3MiLCJzZWdJbmZvIiwic2VnUGVyY2VudCIsImxlcnAiLCJuZXh0TGVuIiwibGFzdFBlcmMiLCJuZXh0U3RlcCIsImZpbmRQZXJjZW50YWdlRm9yRGlzdGFuY2UiLCJ0cmFuc2Zvcm1QYXRoIiwicGF0aE9mZnNldCIsInBhdGhTZWdtZW50IiwibmV3U2VnbWVudCIsImZpbmQiLCJieVByb3BlcnR5IiwiY29uZGl0aW9uIiwiaW52b2tlIiwibWV0aG9kIiwidmFsdWUxIiwidmFsdWUyIiwiZXh0ZW5kIiwiRWxlbWVudCIsImhhc093blByb3BlcnR5IiwiZ2V0V2hvbGVDaGFyIiwic3RyIiwiY29kZSIsImNoYXJDb2RlQXQiLCJuZXh0IiwicHJldiIsImNoYXJhY3RlciIsImNhcGl0YWxpemUiLCJmaXJzdExldHRlck9ubHkiLCJlc2NhcGVYbWwiLCJncmFwaGVtZVNwbGl0IiwidGV4dHN0cmluZyIsImNociIsImdyYXBoZW1lcyIsImVtcHR5RnVuY3Rpb24iLCJJU19ET05URU5VTV9CVUdHWSIsImFkZE1ldGhvZHMiLCJrbGFzcyIsInN1cGVyY2xhc3MiLCJyZXR1cm5WYWx1ZSIsInZhbHVlT2YiLCJTdWJjbGFzcyIsImNhbGxTdXBlciIsIm1ldGhvZE5hbWUiLCJwYXJlbnRNZXRob2QiLCJfdGhpcyIsInN1cGVyQ2xhc3NNZXRob2QiLCJjcmVhdGVDbGFzcyIsImluaXRpYWxpemUiLCJzaGlmdCIsInN1YmNsYXNzZXMiLCJhdHRhY2hFdmVudCIsImFkZExpc3RlbmVyIiwiZWxlbWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRQb2ludGVyIiwiZXZlbnQiLCJzY3JvbGwiLCJnZXRTY3JvbGxMZWZ0VG9wIiwiX2V2dCIsInRvdWNoUHJvcCIsImNoYW5nZWRUb3VjaGVzIiwiZ2V0VG91Y2hJbmZvIiwiY2xpZW50WCIsImNsaWVudFkiLCJpc1RvdWNoRXZlbnQiLCJwb2ludGVyVHlwZSIsIm9wYWNpdHkiLCJlcyIsImN1cnJlbnRTdHlsZSIsImhhc0xheW91dCIsInpvb20iLCJzZXRTdHlsZSIsInN0eWxlcyIsImVsZW1lbnRTdHlsZSIsImNzc1RleHQiLCJzdHlsZUZsb2F0Iiwic2xpY2VDYW5Db252ZXJ0Tm9kZWxpc3RzIiwiZ2V0RWxlbWVudFN0eWxlIiwic2VsZWN0UHJvcCIsIl9zbGljZSIsInRvQXJyYXkiLCJhcnJheUxpa2UiLCJjaGlsZE5vZGVzIiwiZXJyIiwibWFrZUVsZW1lbnQiLCJ0YWdOYW1lIiwiZWwiLCJjbGFzc05hbWUiLCJodG1sRm9yIiwic2V0QXR0cmlidXRlIiwiZG9jRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsImJvZHkiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwiaG9zdCIsIm5vZGVUeXBlIiwiYXJyIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiYXR0ciIsIm1ha2VFbGVtZW50VW5zZWxlY3RhYmxlIiwib25zZWxlY3RzdGFydCIsInVuc2VsZWN0YWJsZSIsIm1ha2VFbGVtZW50U2VsZWN0YWJsZSIsInNldEltYWdlU21vb3RoaW5nIiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwid2Via2l0SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwibXNJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJvSW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiZ2V0QnlJZCIsImdldEVsZW1lbnRCeUlkIiwiYWRkQ2xhc3MiLCJ3cmFwRWxlbWVudCIsIndyYXBwZXIiLCJyZXBsYWNlQ2hpbGQiLCJnZXRFbGVtZW50T2Zmc2V0IiwiZG9jRWxlbSIsInNjcm9sbExlZnRUb3AiLCJkb2MiLCJvd25lckRvY3VtZW50IiwiYm94Iiwib2Zmc2V0Iiwib2Zmc2V0QXR0cmlidXRlcyIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclRvcFdpZHRoIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nVG9wIiwicGFyc2VJbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwiY2xpZW50VG9wIiwiZ2V0Tm9kZUNhbnZhcyIsImltcGwiLCJfY2FudmFzIiwiX2ltYWdlIiwiY2xlYW5VcEpzZG9tTm9kZSIsIl9jdXJyZW50U3JjIiwiX2F0dHJpYnV0ZXMiLCJfY2xhc3NMaXN0IiwiZW1wdHlGbiIsInJlcXVlc3QiLCJvbkNvbXBsZXRlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJwYXJhbWV0ZXJzIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInBhcmFtIiwiYWRkUGFyYW1Ub1VybCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIndhcm4iLCJSVU5OSU5HX0FOSU1BVElPTlMiLCJkZWZhdWx0RWFzaW5nIiwiZCIsImNhbmNlbEFsbCIsImFuaW1hdGlvbnMiLCJhbmltYXRpb24iLCJjYW5jZWwiLCJjYW5jZWxCeUNhbnZhcyIsImNhbmNlbGxlZCIsImNhbmNlbEJ5VGFyZ2V0IiwiZmluZEFuaW1hdGlvbnNCeVRhcmdldCIsImZpbmRBbmltYXRpb25JbmRleCIsImNhbmNlbEZ1bmMiLCJmaW5kQW5pbWF0aW9uIiwiX3JlcXVlc3RBbmltRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfY2FuY2VsQW5pbUZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJyZXF1ZXN0QW5pbUZyYW1lIiwiYW5pbWF0ZSIsInJlbW92ZUZyb21SZWdpc3RyeSIsInJ1bm5pbmdBbmltYXRpb25zIiwiY3VycmVudFZhbHVlIiwic3RhcnRWYWx1ZSIsImNvbXBsZXRpb25SYXRlIiwiZHVyYXRpb25SYXRlIiwidGltZXN0YW1wIiwidGltZSIsInN0YXJ0IiwiRGF0ZSIsImR1cmF0aW9uIiwiZmluaXNoIiwib25DaGFuZ2UiLCJhYm9ydCIsImVhc2luZyIsImlzTWFueSIsImVuZFZhbHVlIiwiYnlWYWx1ZSIsIm9uU3RhcnQiLCJ0aWNrIiwidGlja3RpbWUiLCJjdXJyZW50VGltZSIsInRpbWVQZXJjIiwiX3ZhbHVlIiwidmFsdWVQZXJjIiwiY2FuY2VsQW5pbUZyYW1lIiwiY2FsY3VsYXRlQ29sb3IiLCJiZWdpbiIsImVuZCIsInBvcyIsImNvbG9yIiwiYW5pbWF0ZUNvbG9yIiwiZnJvbUNvbG9yIiwidG9Db2xvciIsInN0YXJ0Q29sb3IiLCJDb2xvciIsImdldFNvdXJjZSIsImVuZENvbG9yIiwib3JpZ2luYWxPbkNvbXBsZXRlIiwib3JpZ2luYWxPbkNoYW5nZSIsImNvbG9yRWFzaW5nIiwibm9ybWFsaXplIiwiYXNpbiIsImVsYXN0aWMiLCJvcHRzIiwiZWFzZUluQm91bmNlIiwiZWFzZU91dEJvdW5jZSIsImVhc2UiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlSW5PdXRCb3VuY2UiLCJhdHRyaWJ1dGVzTWFwIiwiZGlzcGxheSIsInZpc2liaWxpdHkiLCJjb2xvckF0dHJpYnV0ZXMiLCJzdHJva2UiLCJmU2l6ZSIsImNQYXRoIiwibm9ybWFsaXplQXR0ciIsIm5vcm1hbGl6ZVZhbHVlIiwicGFyZW50QXR0cmlidXRlcyIsInBhcnNlVHJhbnNmb3JtQXR0cmlidXRlIiwidmlzaWJsZSIsImZpbGxJbmRleCIsInN0cm9rZUluZGV4IiwiZ2V0U3ZnUmVnZXgiLCJfZ2V0TXVsdGlwbGVOb2RlcyIsIm5vZGVOYW1lcyIsIm5vZGVOYW1lIiwibm9kZUxpc3QiLCJub2RlQXJyYXkiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImVsZW1lbnRNYXRjaGVzUnVsZSIsInNlbGVjdG9ycyIsImZpcnN0TWF0Y2hpbmciLCJwYXJlbnRNYXRjaGluZyIsInNlbGVjdG9yTWF0Y2hlcyIsInNlbGVjdG9yIiwiZG9lc1NvbWVQYXJlbnRNYXRjaCIsIm1hdGNoZXIiLCJjbGFzc05hbWVzIiwiZ2V0QXR0cmlidXRlIiwiZWxlbWVudEJ5SWQiLCJub2RlbGlzdCIsInN2Z1ZhbGlkVGFnTmFtZXNSZWdFeCIsInN2Z1ZpZXdCb3hFbGVtZW50c1JlZ0V4Iiwic3ZnSW52YWxpZEFuY2VzdG9yc1JlZ0V4Iiwic3ZnVmFsaWRQYXJlbnRzUmVnRXgiLCJjc3NSdWxlcyIsImdyYWRpZW50RGVmcyIsImNsaXBQYXRocyIsInNrZXdNYXRyaXgiLCJyZVRyYW5zZm9ybUxpc3QiLCJyZVRyYW5zZm9ybSIsImF0dHJpYnV0ZVZhbHVlIiwibWF0cmljZXMiLCJvcGVyYXRpb24iLCJ0cmFuc2xhdGVNYXRyaXgiLCJyb3RhdGVNYXRyaXgiLCJtdWx0aXBsaWVyWCIsIm11bHRpcGxpZXJZIiwiY29tYmluZWRNYXRyaXgiLCJyZVZpZXdCb3hBdHRyVmFsdWUiLCJhcHBseVZpZXdib3hUcmFuc2Zvcm0iLCJ2aWV3Qm94V2lkdGgiLCJ2aWV3Qm94SGVpZ2h0Iiwidmlld0JveEF0dHIiLCJ3aWR0aEF0dHIiLCJoZWlnaHRBdHRyIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsIm1pc3NpbmdWaWV3Qm94IiwibWlzc2luZ0RpbUF0dHIiLCJ0b0JlUGFyc2VkIiwicGFyc2VkRGltIiwid2lkdGhEaWZmIiwiaGVpZ2h0RGlmZiIsInJlbW92ZUF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnROUyIsImZpcnN0Q2hpbGQiLCJyZWN1cnNpdmVseVBhcnNlR3JhZGllbnRzWGxpbmsiLCJncmFkaWVudCIsInhsaW5rQXR0ciIsInJlZmVyZW5jZWRHcmFkaWVudCIsImhhc0F0dHJpYnV0ZSIsImNoaWxkcmVuIiwicmVmZXJlbmNlQ2xvbmUiLCJjbG9uZU5vZGUiLCJwYXJzZVNWR0RvY3VtZW50IiwicGFyc2luZ09wdGlvbnMiLCJ4bGlua0F0dHJpYnV0ZSIsImF0dHJzIiwieGxpbmsiLCJlbDIiLCJjdXJyZW50VHJhbnMiLCJvbGRMZW5ndGgiLCJlbDMiLCJzZXRBdHRyaWJ1dGVOUyIsIm5vZGVWYWx1ZSIsInBhcnNlVXNlRGlyZWN0aXZlcyIsInN2Z1VpZCIsIl9fdWlkIiwiZGVzY2VuZGFudHMiLCJzZWxlY3ROb2RlcyIsImhhc0FuY2VzdG9yV2l0aE5vZGVOYW1lIiwiZ2V0R3JhZGllbnREZWZzIiwiZ2V0Q1NTUnVsZXMiLCJwYXJzZUVsZW1lbnRzIiwiaW5zdGFuY2VzIiwicmVGb250RGVjbGFyYXRpb24iLCJwYXJzZUZvbnREZWNsYXJhdGlvbiIsIm9TdHlsZSIsImZvbnRTdHlsZSIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0IiwiZWxMaXN0IiwicGFyc2VBdHRyaWJ1dGVzIiwicGFyZW50Rm9udFNpemUiLCJvd25BdHRyaWJ1dGVzIiwiY3NzQXR0cnMiLCJydWxlIiwiZ2V0R2xvYmFsU3R5bGVzRm9yRWxlbWVudCIsInBhcnNlU3R5bGVBdHRyaWJ1dGUiLCJub3JtYWxpemVkQXR0ciIsIm5vcm1hbGl6ZWRWYWx1ZSIsIm5vcm1hbGl6ZWRTdHlsZSIsImZvbnQiLCJtZXJnZWRBdHRycyIsInNldEFscGhhIiwiZ2V0QWxwaGEiLCJ0b1JnYmEiLCJfc2V0U3Ryb2tlRmlsbE9wYWNpdHkiLCJFbGVtZW50c1BhcnNlciIsInBhcnNlIiwiY2h1bmsiLCJwYWlyIiwicGFyc2VTdHlsZVN0cmluZyIsInBhcnNlU3R5bGVPYmplY3QiLCJwYXJzZVBvaW50c0F0dHJpYnV0ZSIsInBhcnNlZFBvaW50cyIsImFsbFJ1bGVzIiwic3R5bGVDb250ZW50cyIsInRleHRDb250ZW50IiwicnVsZU9iaiIsInByb3BlcnR5VmFsdWVQYWlycyIsIl9ydWxlIiwibG9hZFNWR0Zyb21VUkwiLCJ4bWwiLCJyZXNwb25zZVhNTCIsInJlc3VsdHMiLCJfb3B0aW9ucyIsImFsbEVsZW1lbnRzIiwibG9hZFNWR0Zyb21TdHJpbmciLCJwYXJzZUZyb21TdHJpbmciLCJyZWdleFVybCIsIm51bUVsZW1lbnRzIiwiY3JlYXRlT2JqZWN0cyIsImNyZWF0ZU9iamVjdCIsImZpbmRUYWciLCJmcm9tRWxlbWVudCIsImNyZWF0ZUNhbGxiYWNrIiwiY2hlY2tJZkRvbmUiLCJyZXNvbHZlR3JhZGllbnQiLCJJbWFnZSIsIl9vcmlnaW5hbEVsZW1lbnQiLCJfcmVtb3ZlVHJhbnNmb3JtTWF0cml4IiwicmVzb2x2ZUNsaXBQYXRoIiwiZXh0cmFjdFByb3BlcnR5RGVmaW5pdGlvbiIsInN0b3JhZ2UiLCJyZWdleCIsImxhc3RJbmRleCIsImdyYWRpZW50RGVmIiwib3BhY2l0eUF0dHIiLCJjcmVhdGVDbGlwUGF0aENhbGxiYWNrIiwiY29udGFpbmVyIiwiX25ld09iaiIsImZpbGxSdWxlIiwiY2xpcFJ1bGUiLCJ1c2luZ0VsZW1lbnQiLCJvYmpUcmFuc2Zvcm1JbnYiLCJnVHJhbnNmb3JtIiwiY2xpcFBhdGhUYWciLCJjbGlwUGF0aE93bmVyIiwidGhhdCIsInNjYWxhckFkZCIsInNjYWxhckFkZEVxdWFscyIsInN1YnRyYWN0RXF1YWxzIiwic2NhbGFyU3VidHJhY3QiLCJzY2FsYXJTdWJ0cmFjdEVxdWFscyIsIm11bHRpcGx5RXF1YWxzIiwiZGl2aWRlIiwiZGl2aWRlRXF1YWxzIiwibHQiLCJsdGUiLCJndCIsImd0ZSIsImRpc3RhbmNlRnJvbSIsImR4IiwiZHkiLCJzZXRYWSIsInNldFgiLCJzZXRZIiwic2V0RnJvbVBvaW50Iiwic3dhcCIsIkludGVyc2VjdGlvbiIsInN0YXR1cyIsImFwcGVuZFBvaW50IiwiYXBwZW5kUG9pbnRzIiwiaW50ZXJzZWN0TGluZUxpbmUiLCJhMSIsImEyIiwiYjEiLCJiMiIsInVhVCIsInViVCIsInVCIiwidWEiLCJ1YiIsImludGVyc2VjdExpbmVQb2x5Z29uIiwiaW50ZXIiLCJpbnRlcnNlY3RQb2x5Z29uUG9seWdvbiIsInBvaW50czEiLCJwb2ludHMyIiwiaW50ZXJzZWN0UG9seWdvblJlY3RhbmdsZSIsInIxIiwicjIiLCJ0b3BSaWdodCIsImJvdHRvbUxlZnQiLCJpbnRlcjEiLCJpbnRlcjIiLCJpbnRlcjMiLCJpbnRlcjQiLCJfdHJ5UGFyc2luZ0NvbG9yIiwic2V0U291cmNlIiwiaHVlMnJnYiIsImNvbG9yTmFtZU1hcCIsInNvdXJjZUZyb21IZXgiLCJzb3VyY2VGcm9tUmdiIiwic291cmNlRnJvbUhzbCIsIl9yZ2JUb0hzbCIsInJvdW5kIiwiX3NvdXJjZSIsInRvUmdiIiwidG9Ic2wiLCJoc2wiLCJ0b0hzbGEiLCJ0b0hleCIsInRvSGV4YSIsInRvR3JheXNjYWxlIiwiYXZlcmFnZSIsImN1cnJlbnRBbHBoYSIsInRvQmxhY2tXaGl0ZSIsInRocmVzaG9sZCIsIm92ZXJsYXlXaXRoIiwib3RoZXJDb2xvciIsIm90aGVyU291cmNlIiwicmVSR0JhIiwicmVIU0xhIiwicmVIZXgiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JleSIsImRhcmtncmVlbiIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmV5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZXkiLCJsaWdodGdyZWVuIiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImZyb21SZ2IiLCJmcm9tU291cmNlIiwiZnJvbVJnYmEiLCJmcm9tSHNsIiwiZnJvbUhzbGEiLCJmcm9tSGV4IiwiaXNTaG9ydE5vdGF0aW9uIiwiaXNSR0JhIiwib0NvbG9yIiwic2NhbGVNYXAiLCJza2V3TWFwIiwiY29udHJvbHMiLCJMRUZUIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJDRU5URVIiLCJvcHBvc2l0ZSIsImJvdHRvbSIsInJpZ2h0IiwiZmluZENvcm5lclF1YWRyYW50IiwiZmFicmljT2JqZWN0IiwiY29udHJvbCIsImNvcm5lckFuZ2xlIiwiZmlyZUV2ZW50IiwiY2FudmFzT3B0aW9ucyIsInNjYWxlSXNQcm9wb3J0aW9uYWwiLCJldmVudERhdGEiLCJ1bmlmb3JtSXNUb2dnbGVkIiwidW5pU2NhbGVLZXkiLCJ1bmlmb3JtU2NhbGluZyIsImlzVHJhbnNmb3JtQ2VudGVyZWQiLCJvcmlnaW5YIiwib3JpZ2luWSIsInNjYWxpbmdJc0ZvcmJpZGRlbiIsImJ5Iiwic2NhbGVQcm9wb3J0aW9uYWxseSIsImxvY2tYIiwibG9ja1NjYWxpbmdYIiwibG9ja1kiLCJsb2NrU2NhbGluZ1kiLCJjb21tb25FdmVudEluZm8iLCJwb2ludGVyIiwid3JhcFdpdGhGaXhlZEFuY2hvciIsImFjdGlvbkhhbmRsZXIiLCJnZXRDZW50ZXJQb2ludCIsImNvbnN0cmFpbnQiLCJ0cmFuc2xhdGVUb09yaWdpblBvaW50IiwiYWN0aW9uUGVyZm9ybWVkIiwid3JhcFdpdGhGaXJlRXZlbnQiLCJnZXRMb2NhbFBvaW50IiwiY29ybmVyIiwiZ2V0Wm9vbSIsInBhZGRpbmciLCJsb2NhbFBvaW50IiwidG9Mb2NhbFBvaW50Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0YXJnZXRIYXNPbmVGbGlwIiwiY29tcGVuc2F0ZVNjYWxlRm9yU2tldyIsIm9wcG9zaXRlU2tldyIsInNjYWxlVG9Db21wZW5zYXRlIiwiYXhpcyIsInJlZmVyZW5jZSIsIm5ld1ZhbHVlIiwiX2dldFRyYW5zZm9ybWVkRGltZW5zaW9ucyIsInNrZXdPYmplY3RYIiwibmV3U2tldyIsImRpbU5vU2tldyIsInRvdGFsU2tld1NpemUiLCJjdXJyZW50U2tldyIsImhhc1NrZXdlZCIsImRpbUJlZm9yZVNrZXdpbmciLCJza2V3T2JqZWN0WSIsInNjYWxlT2JqZWN0IiwiZGltIiwic2lnblgiLCJzaWduWSIsImZvcmJpZFNjYWxpbmciLCJnZXN0dXJlU2NhbGUiLCJsb2NrU2NhbGluZ0ZsaXAiLCJvcmlnaW5hbCIsIm9sZFNjYWxlWCIsIm9sZFNjYWxlWSIsInNjYWxlQ3Vyc29yU3R5bGVIYW5kbGVyIiwibiIsInNrZXdDdXJzb3JTdHlsZUhhbmRsZXIiLCJub3RBbGxvd2VkIiwibG9ja1NrZXdpbmdZIiwibG9ja1NrZXdpbmdYIiwic2NhbGVTa2V3Q3Vyc29yU3R5bGVIYW5kbGVyIiwiYWx0QWN0aW9uS2V5Iiwicm90YXRpb25XaXRoU25hcHBpbmciLCJwaXZvdFBvaW50IiwibG9ja1JvdGF0aW9uIiwiaGFzUm90YXRlZCIsImxhc3RBbmdsZSIsImV5IiwiZXgiLCJjdXJBbmdsZSIsInNuYXBBbmdsZSIsInNuYXBUaHJlc2hvbGQiLCJyaWdodEFuZ2xlTG9ja2VkIiwibGVmdEFuZ2xlTG9ja2VkIiwic2NhbGluZ0VxdWFsbHkiLCJzY2FsaW5nWCIsInNjYWxpbmdZIiwic2NhbGluZ1lPclNrZXdpbmdYIiwic2tld0hhbmRsZXJYIiwic2NhbGluZ1hPclNrZXdpbmdZIiwic2tld0hhbmRsZXJZIiwiY2hhbmdlV2lkdGgiLCJzdHJva2VQYWRkaW5nIiwibXVsdGlwbGllciIsIm9sZFdpZHRoIiwibmV3V2lkdGgiLCJmaW5hbEhhbmRsZXIiLCJkcmFnSGFuZGxlciIsIm5ld0xlZnQiLCJuZXdUb3AiLCJtb3ZlWCIsIm1vdmVZIiwic2NhbGVPclNrZXdBY3Rpb25OYW1lIiwiaXNBbHRlcm5hdGl2ZSIsInJvdGF0aW9uU3R5bGVIYW5kbGVyIiwiY3Vyc29yU3R5bGUiLCJjb250cm9sc1V0aWxzIiwicmVuZGVyQ2lyY2xlQ29udHJvbCIsInN0eWxlT3ZlcnJpZGUiLCJ4U2l6ZSIsInNpemVYIiwiY29ybmVyU2l6ZSIsInlTaXplIiwic2l6ZVkiLCJ0cmFuc3BhcmVudENvcm5lcnMiLCJjb3JuZXJTdHJva2VDb2xvciIsIm15TGVmdCIsIm15VG9wIiwic2F2ZSIsImZpbGxTdHlsZSIsImNvcm5lckNvbG9yIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJiZWdpblBhdGgiLCJhcmMiLCJyZXN0b3JlIiwicmVuZGVyU3F1YXJlQ29udHJvbCIsInhTaXplQnkyIiwieVNpemVCeTIiLCJzdHJva2VSZWN0IiwiQ29udHJvbCIsImFjdGlvbk5hbWUiLCJ0b3VjaFNpemVYIiwidG91Y2hTaXplWSIsIndpdGhDb25uZWN0aW9uIiwibW91c2VEb3duSGFuZGxlciIsIm1vdXNlVXBIYW5kbGVyIiwiZ2V0QWN0aW9uSGFuZGxlciIsImdldE1vdXNlRG93bkhhbmRsZXIiLCJnZXRNb3VzZVVwSGFuZGxlciIsImN1cnNvclN0eWxlSGFuZGxlciIsImdldEFjdGlvbk5hbWUiLCJnZXRWaXNpYmlsaXR5IiwiY29udHJvbEtleSIsIm9iamVjdFZpc2liaWxpdHkiLCJfY29udHJvbHNWaXNpYmlsaXR5Iiwic2V0VmlzaWJpbGl0eSIsInBvc2l0aW9uSGFuZGxlciIsImZpbmFsTWF0cml4IiwiY2FsY0Nvcm5lckNvb3JkcyIsIm9iamVjdEFuZ2xlIiwib2JqZWN0Q29ybmVyU2l6ZSIsImNlbnRlclgiLCJjZW50ZXJZIiwiaXNUb3VjaCIsImNvc0hhbGZPZmZzZXQiLCJzaW5IYWxmT2Zmc2V0IiwiY29zSGFsZk9mZnNldENvbXAiLCJzaW5IYWxmT2Zmc2V0Q29tcCIsImNvbnRyb2xUcmlhbmdsZUFuZ2xlIiwiY29ybmVySHlwb3RlbnVzZSIsIm5ld1RoZXRhIiwibmV3VGhldGFDb21wIiwidGwiLCJ0ciIsImJsIiwiYnIiLCJyZW5kZXIiLCJjb3JuZXJTdHlsZSIsImdldENvbG9yU3RvcCIsImNvbG9yQWxwaGEiLCJrZXlWYWx1ZVBhaXJzIiwiZ3JhZGllbnRUcmFuc2Zvcm0iLCJncmFkaWVudFVuaXRzIiwia2V5cyIsIm9wdGlvbiIsImFkZENvbG9yU3RvcCIsInRvT2JqZWN0IiwicHJvcGVydGllc1RvSW5jbHVkZSIsInRvU1ZHIiwibWFya3VwIiwiY29tbW9uQXR0cmlidXRlcyIsIm5lZWRzU3dhcCIsIndpdGhWaWV3cG9ydCIsImFkZGl0aW9uYWxUcmFuc2Zvcm0iLCJzb3J0IiwicmV2ZXJzZSIsIm1pblJhZGl1cyIsInBlcmNlbnRhZ2VTaGlmdCIsImNvbG9yU3RvcCIsInRvTGl2ZSIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJpbnN0YW5jZSIsInN2Z09wdGlvbnMiLCJjb2xvclN0b3BFbHMiLCJnZXRMaW5lYXJDb29yZHMiLCJnZXRSYWRpYWxDb29yZHMiLCJwcm9wVmFsdWUiLCJmaW5hbFZhbHVlIiwiX19jb252ZXJ0UGVyY2VudFVuaXRzVG9WYWx1ZXMiLCJyZXBlYXQiLCJwYXR0ZXJuVHJhbnNmb3JtIiwic2V0T3B0aW9ucyIsImlzRXJyb3IiLCJwYXR0ZXJuU291cmNlIiwicGF0dGVybldpZHRoIiwicGF0dGVybkhlaWdodCIsInBhdHRlcm5PZmZzZXRYIiwicGF0dGVybk9mZnNldFkiLCJwYXR0ZXJuSW1nU3JjIiwiY29tcGxldGUiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiY3JlYXRlUGF0dGVybiIsIlNoYWRvdyIsImJsdXIiLCJhZmZlY3RTdHJva2UiLCJpbmNsdWRlRGVmYXVsdFZhbHVlcyIsIm5vblNjYWxpbmciLCJfcGFyc2VTaGFkb3ciLCJzaGFkb3ciLCJzaGFkb3dTdHIiLCJvZmZzZXRzQW5kQmx1ciIsInJlT2Zmc2V0c0FuZEJsdXIiLCJmQm94WCIsImZCb3hZIiwiU3RhdGljQ2FudmFzIiwiQ0FOVkFTX0lOSVRfRVJST1IiLCJyZW5kZXJBbmRSZXNldEJvdW5kIiwicmVuZGVyQW5kUmVzZXQiLCJyZXF1ZXN0UmVuZGVyQWxsQm91bmQiLCJfaW5pdFN0YXRpYyIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRJbWFnZSIsIm92ZXJsYXlDb2xvciIsIm92ZXJsYXlJbWFnZSIsInN0YXRlZnVsIiwiY29udHJvbHNBYm92ZU92ZXJsYXkiLCJhbGxvd1RvdWNoU2Nyb2xsaW5nIiwidmlld3BvcnRUcmFuc2Zvcm0iLCJiYWNrZ3JvdW5kVnB0Iiwib3ZlcmxheVZwdCIsImVuYWJsZVJldGluYVNjYWxpbmciLCJ2cHRDb29yZHMiLCJza2lwT2Zmc2NyZWVuIiwiY2IiLCJfY3JlYXRlTG93ZXJDYW52YXMiLCJfaW5pdE9wdGlvbnMiLCJpbnRlcmFjdGl2ZSIsIl9pbml0UmV0aW5hU2NhbGluZyIsInNldE92ZXJsYXlJbWFnZSIsInNldEJhY2tncm91bmRJbWFnZSIsInNldEJhY2tncm91bmRDb2xvciIsInNldE92ZXJsYXlDb2xvciIsImNhbGNPZmZzZXQiLCJfaXNSZXRpbmFTY2FsaW5nIiwiZ2V0UmV0aW5hU2NhbGluZyIsInNjYWxlUmF0aW8iLCJfX2luaXRSZXRpbmFTY2FsaW5nIiwibG93ZXJDYW52YXNFbCIsImNvbnRleHRDb250YWluZXIiLCJ1cHBlckNhbnZhc0VsIiwiY29udGV4dFRvcCIsIl9vZmZzZXQiLCJpbWFnZSIsIl9fc2V0QmdPdmVybGF5SW1hZ2UiLCJfX3NldEJnT3ZlcmxheUNvbG9yIiwiX2NyZWF0ZUNhbnZhc0VsZW1lbnQiLCJfb3JpZ2luYWxDYW52YXNTdHlsZSIsIl9hcHBseUNhbnZhc1N0eWxlIiwiZ2V0V2lkdGgiLCJnZXRIZWlnaHQiLCJzZXRXaWR0aCIsInNldERpbWVuc2lvbnMiLCJzZXRIZWlnaHQiLCJkaW1lbnNpb25zIiwiY3NzVmFsdWUiLCJjc3NPbmx5IiwiX3NldEJhY2tzdG9yZURpbWVuc2lvbiIsImhhc0xvc3RDb250ZXh0IiwiYmFja3N0b3JlT25seSIsIl9zZXRDc3NEaW1lbnNpb24iLCJfaXNDdXJyZW50bHlEcmF3aW5nIiwiZnJlZURyYXdpbmdCcnVzaCIsIl9zZXRCcnVzaFN0eWxlcyIsImNhY2hlQ2FudmFzRWwiLCJ3cmFwcGVyRWwiLCJzZXRWaWV3cG9ydFRyYW5zZm9ybSIsInZwdCIsImFjdGl2ZU9iamVjdCIsIl9hY3RpdmVPYmplY3QiLCJiYWNrZ3JvdW5kT2JqZWN0Iiwib3ZlcmxheU9iamVjdCIsImdyb3VwIiwic2V0Q29vcmRzIiwiY2FsY1ZpZXdwb3J0Qm91bmRhcmllcyIsInpvb21Ub1BvaW50IiwiYmVmb3JlIiwiYWZ0ZXIiLCJzZXRab29tIiwiYWJzb2x1dGVQYW4iLCJyZWxhdGl2ZVBhbiIsImdldEVsZW1lbnQiLCJzZXR1cFN0YXRlIiwiY2xlYXJDb250ZXh0IiwiY2xlYXJSZWN0IiwiY2xlYXIiLCJfaGFzSVRleHRIYW5kbGVycyIsIl9tb3VzZVVwSVRleHRIYW5kbGVyIiwiX2lUZXh0SW5zdGFuY2VzIiwicmVuZGVyQWxsIiwiY2FudmFzVG9EcmF3T24iLCJyZW5kZXJDYW52YXMiLCJpc1JlbmRlcmluZyIsImlWcHQiLCJjYW5jZWxSZXF1ZXN0ZWRSZW5kZXIiLCJfcmVuZGVyQmFja2dyb3VuZCIsIl9yZW5kZXJPYmplY3RzIiwiZHJhd0NvbnRyb2xzIiwic2hvdWxkQ2FjaGUiLCJfdHJhbnNmb3JtRG9uZSIsInJlbmRlckNhY2hlIiwiZm9yQ2xpcHBpbmciLCJkcmF3Q2xpcFBhdGhPbkNhbnZhcyIsIl9yZW5kZXJPdmVybGF5IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiem9vbVgiLCJ6b29tWSIsIl9jYWNoZUNhbnZhcyIsImNhY2hlVHJhbnNsYXRpb25YIiwiY2FjaGVUcmFuc2xhdGlvblkiLCJfcmVuZGVyQmFja2dyb3VuZE9yT3ZlcmxheSIsIm5lZWRzVnB0IiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2VQYXRoIiwiZ2V0Q2VudGVyIiwiY2VudGVyT2JqZWN0SCIsIl9jZW50ZXJPYmplY3QiLCJjZW50ZXJPYmplY3RWIiwiY2VudGVyT2JqZWN0Iiwidmlld3BvcnRDZW50ZXJPYmplY3QiLCJ2cENlbnRlciIsImdldFZwQ2VudGVyIiwidmlld3BvcnRDZW50ZXJPYmplY3RIIiwidmlld3BvcnRDZW50ZXJPYmplY3RWIiwidG9EYXRhbGVzc0pTT04iLCJ0b0RhdGFsZXNzT2JqZWN0IiwiX3RvT2JqZWN0TWV0aG9kIiwiX3RvT2JqZWN0cyIsImV4Y2x1ZGVGcm9tRXhwb3J0IiwiX3RvT2JqZWN0IiwiX19zZXJpYWxpemVCZ092ZXJsYXkiLCJvcmlnaW5hbFZhbHVlIiwiYmdJbWFnZSIsImJnQ29sb3IiLCJiYWNrZ3JvdW5kIiwib3ZlcmxheSIsInN2Z1ZpZXdwb3J0VHJhbnNmb3JtYXRpb24iLCJfc2V0U1ZHUHJlYW1ibGUiLCJfc2V0U1ZHSGVhZGVyIiwiY2xpcFBhdGhJZCIsIl9zZXRTVkdCZ092ZXJsYXlDb2xvciIsIl9zZXRTVkdCZ092ZXJsYXlJbWFnZSIsIl9zZXRTVkdPYmplY3RzIiwic3VwcHJlc3NQcmVhbWJsZSIsImVuY29kaW5nIiwidmlld0JveCIsImNyZWF0ZVNWR0ZvbnRGYWNlc01hcmt1cCIsImNyZWF0ZVNWR1JlZkVsZW1lbnRzTWFya3VwIiwiY3JlYXRlU1ZHQ2xpcFBhdGhNYXJrdXAiLCJ0b0NsaXBQYXRoU1ZHIiwic2hvdWxkVHJhbnNmb3JtIiwicm93Iiwicm93SW5kZXgiLCJjaGFySW5kZXgiLCJmb250TGlzdCIsIl9zZXRTVkdPYmplY3QiLCJmaW5hbFdpZHRoIiwiZmluYWxIZWlnaHQiLCJzZW5kVG9CYWNrIiwib2JqcyIsImFjdGl2ZVNlbGVjdGlvbiIsInVuc2hpZnQiLCJicmluZ1RvRnJvbnQiLCJzZW5kQmFja3dhcmRzIiwiaW50ZXJzZWN0aW5nIiwibmV3SWR4Iiwib2Jqc01vdmVkIiwiX2ZpbmROZXdMb3dlckluZGV4IiwiaW50ZXJzZWN0c1dpdGhPYmplY3QiLCJpc0NvbnRhaW5lZFdpdGhpbk9iamVjdCIsImJyaW5nRm9yd2FyZCIsIl9maW5kTmV3VXBwZXJJbmRleCIsImRpc3Bvc2UiLCJjbGFzc0xpc3QiLCJEYXRhVVJMRXhwb3J0ZXIiLCJFTVBUWV9KU09OIiwic2V0TGluZURhc2giLCJ0b0pTT04iLCJjcmVhdGVQTkdTdHJlYW0iLCJjcmVhdGVKUEVHU3RyZWFtIiwiQmFzZUJydXNoIiwic3Ryb2tlTGluZUNhcCIsInN0cm9rZURhc2hBcnJheSIsImxpbWl0ZWRUb0NhbnZhc1NpemUiLCJsaW5lQ2FwIiwibWl0ZXJMaW1pdCIsImxpbmVKb2luIiwiX3NhdmVBbmRUcmFuc2Zvcm0iLCJfc2V0U2hhZG93Iiwic2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJuZWVkc0Z1bGxSZW5kZXIiLCJfcmVzZXRTaGFkb3ciLCJfaXNPdXRTaWRlQ2FudmFzIiwiUGVuY2lsQnJ1c2giLCJkZWNpbWF0ZSIsImRyYXdTdHJhaWdodExpbmUiLCJzdHJhaWdodExpbmVLZXkiLCJfcG9pbnRzIiwiX2hhc1N0cmFpZ2h0TGluZSIsIl9kcmF3U2VnbWVudCIsInF1YWRyYXRpY0N1cnZlVG8iLCJvbk1vdXNlRG93biIsIl9pc01haW5FdmVudCIsIl9wcmVwYXJlRm9yRHJhd2luZyIsIl9jYXB0dXJlRHJhd2luZ1BhdGgiLCJfcmVuZGVyIiwib25Nb3VzZU1vdmUiLCJvbGRFbmQiLCJvbk1vdXNlVXAiLCJfZmluYWxpemVBbmRBZGRQYXRoIiwiX3Jlc2V0IiwiX2FkZFBvaW50IiwicG9pbnRlclBvaW50IiwiY29udmVydFBvaW50c1RvU1ZHUGF0aCIsIl9pc0VtcHR5U1ZHUGF0aCIsImNyZWF0ZVBhdGgiLCJQYXRoIiwiZGVjaW1hdGVQb2ludHMiLCJhZGp1c3RlZERpc3RhbmNlIiwibGFzdFBvaW50IiwibmV3UG9pbnRzIiwiQ2lyY2xlQnJ1c2giLCJkcmF3RG90IiwiYWRkUG9pbnQiLCJkb3QiLCJyYWRpdXMiLCJvcmlnaW5hbFJlbmRlck9uQWRkUmVtb3ZlIiwiY2lyY2xlcyIsImNpcmNsZSIsIkNpcmNsZSIsImNpcmNsZVJhZGl1cyIsImNpcmNsZUNvbG9yIiwiU3ByYXlCcnVzaCIsImRlbnNpdHkiLCJkb3RXaWR0aCIsImRvdFdpZHRoVmFyaWFuY2UiLCJyYW5kb21PcGFjaXR5Iiwib3B0aW1pemVPdmVybGFwcGluZyIsInNwcmF5Q2h1bmtzIiwiYWRkU3ByYXlDaHVuayIsInNwcmF5Q2h1bmtQb2ludHMiLCJyZWN0cyIsImlsZW4iLCJzcHJheUNodW5rIiwicmVjdCIsIlJlY3QiLCJfZ2V0T3B0aW1pemVkUmVjdHMiLCJ1bmlxdWVSZWN0cyIsInVuaXF1ZVJlY3RzQXJyYXkiLCJnbG9iYWxBbHBoYSIsImZpbGxSZWN0IiwiUGF0dGVybkJydXNoIiwiZ2V0UGF0dGVyblNyYyIsInBhdHRlcm5DYW52YXMiLCJwYXR0ZXJuQ3R4IiwiZ2V0UGF0dGVyblNyY0Z1bmN0aW9uIiwiZ2V0UGF0dGVybiIsInRvcExlZnQiLCJfZ2V0TGVmdFRvcENvb3JkcyIsIkNhbnZhcyIsIl9pbml0SW50ZXJhY3RpdmUiLCJfY3JlYXRlQ2FjaGVDYW52YXMiLCJjZW50ZXJlZFNjYWxpbmciLCJjZW50ZXJlZFJvdGF0aW9uIiwiY2VudGVyZWRLZXkiLCJzZWxlY3Rpb24iLCJzZWxlY3Rpb25LZXkiLCJhbHRTZWxlY3Rpb25LZXkiLCJzZWxlY3Rpb25Db2xvciIsInNlbGVjdGlvbkRhc2hBcnJheSIsInNlbGVjdGlvbkJvcmRlckNvbG9yIiwic2VsZWN0aW9uTGluZVdpZHRoIiwic2VsZWN0aW9uRnVsbHlDb250YWluZWQiLCJob3ZlckN1cnNvciIsIm1vdmVDdXJzb3IiLCJkZWZhdWx0Q3Vyc29yIiwiZnJlZURyYXdpbmdDdXJzb3IiLCJub3RBbGxvd2VkQ3Vyc29yIiwiY29udGFpbmVyQ2xhc3MiLCJwZXJQaXhlbFRhcmdldEZpbmQiLCJ0YXJnZXRGaW5kVG9sZXJhbmNlIiwic2tpcFRhcmdldEZpbmQiLCJpc0RyYXdpbmdNb2RlIiwicHJlc2VydmVPYmplY3RTdGFja2luZyIsInN0b3BDb250ZXh0TWVudSIsImZpcmVSaWdodENsaWNrIiwiZmlyZU1pZGRsZUNsaWNrIiwidGFyZ2V0cyIsImVuYWJsZVBvaW50ZXJFdmVudHMiLCJfaG92ZXJlZFRhcmdldCIsIl9ob3ZlcmVkVGFyZ2V0cyIsIl9jdXJyZW50VHJhbnNmb3JtIiwiX2dyb3VwU2VsZWN0b3IiLCJfaW5pdFdyYXBwZXJFbGVtZW50IiwiX2NyZWF0ZVVwcGVyQ2FudmFzIiwiX2luaXRFdmVudExpc3RlbmVycyIsIl9jaG9vc2VPYmplY3RzVG9SZW5kZXIiLCJvYmpzVG9SZW5kZXIiLCJhY3RpdmVHcm91cE9iamVjdHMiLCJhY3RpdmVPYmplY3RzIiwiZ2V0QWN0aXZlT2JqZWN0cyIsImNvbnRleHRUb3BEaXJ0eSIsInJlbmRlclRvcExheWVyIiwiX2RyYXdTZWxlY3Rpb24iLCJyZW5kZXJUb3AiLCJfbm9ybWFsaXplUG9pbnRlciIsImludmVydGVkTSIsInZwdFBvaW50ZXIiLCJyZXN0b3JlUG9pbnRlclZwdCIsImlzVGFyZ2V0VHJhbnNwYXJlbnQiLCJub3JtYWxpemVkUG9pbnRlciIsInRhcmdldFJlbGF0aXZlWCIsInRhcmdldFJlbGF0aXZlWSIsIl9jYWNoZUNvbnRleHQiLCJjb250ZXh0Q2FjaGUiLCJvcmlnaW5hbENvbG9yIiwic2VsZWN0aW9uQmFja2dyb3VuZENvbG9yIiwiX2lzU2VsZWN0aW9uS2V5UHJlc3NlZCIsIl9zaG91bGRDbGVhclNlbGVjdGlvbiIsImV2ZW50ZWQiLCJzZWxlY3RhYmxlIiwiX3Nob3VsZENlbnRlclRyYW5zZm9ybSIsImFjdGlvbiIsImFsdEtleSIsImNlbnRlclRyYW5zZm9ybSIsIl9nZXRPcmlnaW5Gcm9tQ29ybmVyIiwiX2dldEFjdGlvbkZyb21Db3JuZXIiLCJhbHJlYWR5U2VsZWN0ZWQiLCJfc2V0dXBDdXJyZW50VHJhbnNmb3JtIiwiX19jb3JuZXIiLCJsYXN0WCIsImxhc3RZIiwic2hpZnRLZXkiLCJfYmVmb3JlVHJhbnNmb3JtIiwic2V0Q3Vyc29yIiwiY3Vyc29yIiwidmlld3BvcnRTdGFydCIsInZpZXdwb3J0RXh0ZW50IiwiZXh0ZW50IiwibWF4WCIsIm1heFkiLCJzdHJva2VPZmZzZXQiLCJfc2V0TGluZURhc2giLCJmaW5kVGFyZ2V0Iiwic2tpcEdyb3VwIiwiYWN0aXZlVGFyZ2V0IiwiYWN0aXZlVGFyZ2V0U3VicyIsImFPYmplY3RzIiwic2hvdWxkTG9va0ZvckFjdGl2ZSIsIl9maW5kVGFyZ2V0Q29ybmVyIiwiX3NlYXJjaFBvc3NpYmxlVGFyZ2V0cyIsIl9jaGVja1RhcmdldCIsImdsb2JhbFBvaW50ZXIiLCJjb250YWluc1BvaW50IiwiaXNFZGl0aW5nIiwic3ViVGFyZ2V0Iiwib2JqVG9DaGVjayIsInBvaW50ZXJUb1VzZSIsInN1YlRhcmdldENoZWNrIiwiaWdub3JlWm9vbSIsIl9hYnNvbHV0ZVBvaW50ZXIiLCJfcG9pbnRlciIsImNzc1NjYWxlIiwiYm91bmRzV2lkdGgiLCJib3VuZHNIZWlnaHQiLCJyZXRpbmFTY2FsaW5nIiwibG93ZXJDYW52YXNDbGFzcyIsIl9jb3B5Q2FudmFzU3R5bGUiLCJnZXRUb3BDb250ZXh0IiwiZnJvbUVsIiwidG9FbCIsImdldFNlbGVjdGlvbkNvbnRleHQiLCJnZXRTZWxlY3Rpb25FbGVtZW50IiwiZ2V0QWN0aXZlT2JqZWN0IiwiYWN0aXZlIiwiX2Rpc2NhcmRBY3RpdmVPYmplY3QiLCJfZmlyZVNlbGVjdGlvbkV2ZW50cyIsIm9sZE9iamVjdHMiLCJzb21ldGhpbmdDaGFuZ2VkIiwiYWRkZWQiLCJyZW1vdmVkIiwib2xkT2JqZWN0Iiwic2VsZWN0ZWQiLCJkZXNlbGVjdGVkIiwic2V0QWN0aXZlT2JqZWN0IiwiY3VycmVudEFjdGl2ZXMiLCJfc2V0QWN0aXZlT2JqZWN0Iiwib25TZWxlY3QiLCJvbkRlc2VsZWN0IiwiZGlzY2FyZEFjdGl2ZU9iamVjdCIsInJlbW92ZUxpc3RlbmVycyIsIl9yZW5kZXJDb250cm9scyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIl9yZWFsaXplR3JvdXBUcmFuc2Zvcm1Pbk9iamVjdCIsIl91bndpbmRHcm91cFRyYW5zZm9ybU9uT2JqZWN0Iiwib3JpZ2luYWxWYWx1ZXMiLCJjbGVhckNvbnRleHRUb3AiLCJhZGRFdmVudE9wdGlvbnMiLCJwYXNzaXZlIiwiY2hlY2tDbGljayIsImJ1dHRvbiIsIm1haW5Ub3VjaElkIiwiX2JpbmRFdmVudHMiLCJhZGRPclJlbW92ZSIsIl9nZXRFdmVudFByZWZpeCIsImZ1bmN0b3IiLCJldmVudGpzRnVuY3RvciIsImNhbnZhc0VsZW1lbnQiLCJldmVudFR5cGVQcmVmaXgiLCJfb25SZXNpemUiLCJfb25Nb3VzZURvd24iLCJfb25Nb3VzZU1vdmUiLCJfb25Nb3VzZU91dCIsIl9vbk1vdXNlRW50ZXIiLCJfb25Nb3VzZVdoZWVsIiwiX29uQ29udGV4dE1lbnUiLCJfb25Eb3VibGVDbGljayIsIl9vbkRyYWdPdmVyIiwiX29uRHJhZ0VudGVyIiwiX29uRHJhZ0xlYXZlIiwiX29uRHJvcCIsIl9vblRvdWNoU3RhcnQiLCJldmVudGpzIiwiX29uR2VzdHVyZSIsIl9vbkRyYWciLCJfb25PcmllbnRhdGlvbkNoYW5nZSIsIl9vblNoYWtlIiwiX29uTG9uZ1ByZXNzIiwiX29uTW91c2VVcCIsIl9vblRvdWNoRW5kIiwiZXZlbnRzQm91bmQiLCJfc2ltcGxlRXZlbnRIYW5kbGVyIiwiX19vblRyYW5zZm9ybUdlc3R1cmUiLCJfX29uRHJhZyIsIl9fb25Nb3VzZVdoZWVsIiwiX3RhcmdldCIsImhpZGRlblRleHRhcmVhIiwiZm9jdXMiLCJfX29uT3JpZW50YXRpb25DaGFuZ2UiLCJfX29uU2hha2UiLCJfX29uTG9uZ1ByZXNzIiwicHJldmVudERlZmF1bHQiLCJfZmlyZUVudGVyTGVhdmVFdmVudHMiLCJzdG9wUHJvcGFnYXRpb24iLCJfY2FjaGVUcmFuc2Zvcm1FdmVudERhdGEiLCJfaGFuZGxlRXZlbnQiLCJfcmVzZXRUcmFuc2Zvcm1FdmVudERhdGEiLCJnZXRQb2ludGVySWQiLCJldnQiLCJpZGVudGlmaWVyIiwicG9pbnRlcklkIiwiaXNQcmltYXJ5IiwidG91Y2hlcyIsIl9fb25Nb3VzZURvd24iLCJfX29uTW91c2VVcCIsIl93aWxsQWRkTW91c2VEb3duIiwiX19vbk1vdXNlTW92ZSIsIl9zaG91bGRSZW5kZXIiLCJncm91cFNlbGVjdG9yIiwic2hvdWxkUmVuZGVyIiwiaXNDbGljayIsIl9vbk1vdXNlVXBJbkRyYXdpbmdNb2RlIiwiX2ZpbmFsaXplQ3VycmVudFRyYW5zZm9ybSIsInRhcmdldFdhc0FjdGl2ZSIsIl9tYXliZUdyb3VwT2JqZWN0cyIsImFjdGl2ZU9uIiwiaXNNb3ZpbmciLCJvcmlnaW5hbENvbnRyb2wiLCJvcmlnaW5hbE1vdXNlVXBIYW5kbGVyIiwiX3NldEN1cnNvckZyb21FdmVudCIsImV2ZW50VHlwZSIsInN1YlRhcmdldHMiLCJhYnNvbHV0ZVBvaW50ZXIiLCJjdXJyZW50VGFyZ2V0IiwiY3VycmVudFN1YlRhcmdldHMiLCJfc2NhbGluZyIsImhhc1N0YXRlQ2hhbmdlZCIsIl9maXJlIiwiX29uTW91c2VEb3duSW5EcmF3aW5nTW9kZSIsIl9vbk1vdXNlTW92ZUluRHJhd2luZ01vZGUiLCJfcHJldmlvdXNQb2ludGVyIiwic2hvdWxkR3JvdXAiLCJfc2hvdWxkR3JvdXAiLCJfaGFuZGxlR3JvdXBpbmciLCJzYXZlU3RhdGUiLCJfdHJhbnNmb3JtT2JqZWN0IiwiX2ZpcmVPdmVyT3V0RXZlbnRzIiwiZmlyZVN5bnRoZXRpY0luT3V0RXZlbnRzIiwib2xkVGFyZ2V0IiwiZXZ0T3V0IiwiY2FudmFzRXZ0T3V0IiwiZXZ0SW4iLCJjYW52YXNFdnRJbiIsIl9kcmFnZ2Vkb3ZlclRhcmdldCIsImNvbmZpZyIsImluT3B0Iiwib3V0T3B0IiwiaW5GaXJlcyIsInRhcmdldENoYW5nZWQiLCJwcmV2aW91c1RhcmdldCIsIm5leHRUYXJnZXQiLCJyZXNldCIsIl9wZXJmb3JtVHJhbnNmb3JtQWN0aW9uIiwiZ2V0Q29ybmVyQ3Vyc29yIiwiX3VwZGF0ZUFjdGl2ZVNlbGVjdGlvbiIsIl9jcmVhdGVBY3RpdmVTZWxlY3Rpb24iLCJjdXJyZW50QWN0aXZlT2JqZWN0cyIsInJlbW92ZVdpdGhVcGRhdGUiLCJhZGRXaXRoVXBkYXRlIiwiX2NyZWF0ZUdyb3VwIiwiZ3JvdXBPYmplY3RzIiwiZXhpdEVkaXRpbmciLCJBY3RpdmVTZWxlY3Rpb24iLCJfZ3JvdXBTZWxlY3RlZE9iamVjdHMiLCJhR3JvdXAiLCJfY29sbGVjdE9iamVjdHMiLCJjdXJyZW50T2JqZWN0Iiwic2VsZWN0aW9uWDFZMSIsInNlbGVjdGlvblgyWTIiLCJhbGxvd0ludGVyc2VjdCIsImludGVyc2VjdHNXaXRoUmVjdCIsImlzQ29udGFpbmVkV2l0aGluUmVjdCIsInRvQ2FudmFzRWxlbWVudCIsImNyb3BwaW5nIiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJvcmlnaW5hbFdpZHRoIiwib3JpZ2luYWxIZWlnaHQiLCJuZXdab29tIiwidnAiLCJvcmlnaW5hbEludGVyYWN0aXZlIiwibmV3VnAiLCJvcmlnaW5hbFJldGluYSIsIm9yaWdpbmFsQ29udGV4dFRvcCIsImxvYWRGcm9tSlNPTiIsImpzb24iLCJzZXJpYWxpemVkIiwiX2VubGl2ZW5PYmplY3RzIiwiX3NldEJnT3ZlcmxheSIsImVubGl2ZW5lZENhbnZhc0NsaXAiLCJfX3NldHVwQ2FudmFzIiwibG9hZGVkIiwiY2JJZkxvYWRlZCIsIl9fc2V0QmdPdmVybGF5IiwiZW5saXZlZE9iamVjdCIsIl90b0RhdGFVUkwiLCJfdG9EYXRhVVJMV2l0aE11bHRpcGxpZXIiLCJ0b0RhdGFVUkxXaXRoTXVsdGlwbGllciIsImNsb25lV2l0aG91dERhdGEiLCJiYWNrZ3JvdW5kSW1hZ2VPcGFjaXR5IiwiYmFja2dyb3VuZEltYWdlU3RyZXRjaCIsIm9iamVjdENhY2hpbmciLCJ0b3VjaENvcm5lclNpemUiLCJib3JkZXJDb2xvciIsImJvcmRlckRhc2hBcnJheSIsImNvcm5lckRhc2hBcnJheSIsInN0cm9rZURhc2hPZmZzZXQiLCJib3JkZXJPcGFjaXR5V2hlbk1vdmluZyIsImJvcmRlclNjYWxlRmFjdG9yIiwibWluU2NhbGVMaW1pdCIsImhhc0NvbnRyb2xzIiwiaGFzQm9yZGVycyIsImxvY2tNb3ZlbWVudFgiLCJsb2NrTW92ZW1lbnRZIiwic3RhdGVmdWxsQ2FjaGUiLCJub1NjYWxlQ2FjaGUiLCJkaXJ0eSIsInBhaW50Rmlyc3QiLCJzdGF0ZVByb3BlcnRpZXMiLCJjYWNoZVByb3BlcnRpZXMiLCJjb2xvclByb3BlcnRpZXMiLCJhYnNvbHV0ZVBvc2l0aW9uZWQiLCJfY2FjaGVQcm9wZXJ0aWVzIiwiX3VwZGF0ZUNhY2hlQ2FudmFzIiwiX2xpbWl0Q2FjaGVTaXplIiwiZGltcyIsImxpbWl0ZWREaW1zIiwiY2FwcGVkIiwiX2dldENhY2hlQ2FudmFzRGltZW5zaW9ucyIsIm9iamVjdFNjYWxlIiwiZ2V0VG90YWxPYmplY3RTY2FsaW5nIiwibmVlZGVkWCIsIm5lZWRlZFkiLCJkcmF3aW5nV2lkdGgiLCJkcmF3aW5nSGVpZ2h0IiwibWluQ2FjaGVTaXplIiwiZGltZW5zaW9uc0NoYW5nZWQiLCJjYWNoZVdpZHRoIiwiY2FjaGVIZWlnaHQiLCJ6b29tQ2hhbmdlZCIsInNob3VsZFJlZHJhdyIsImFkZGl0aW9uYWxXaWR0aCIsImFkZGl0aW9uYWxIZWlnaHQiLCJzaG91bGRSZXNpemVDYW52YXMiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsInNpemVHcm93aW5nIiwiZ2V0SGVpZ2h0T2ZMaW5lIiwic2V0VHJhbnNmb3JtIiwibmVlZEZ1bGxUcmFuc2Zvcm0iLCJfcmVtb3ZlRGVmYXVsdFZhbHVlcyIsImdldE9iamVjdFNjYWxpbmciLCJyZXRpbmEiLCJnZXRPYmplY3RPcGFjaXR5Iiwic2hvdWxkQ29uc3RyYWluVmFsdWUiLCJpc0NoYW5nZWQiLCJncm91cE5lZWRzVXBkYXRlIiwiX2NvbnN0cmFpblNjYWxlIiwiaXNPbkFDYWNoZSIsInNldE9uR3JvdXAiLCJnZXRWaWV3cG9ydFRyYW5zZm9ybSIsImlzTm90VmlzaWJsZSIsImlzT25TY3JlZW4iLCJfc2V0dXBDb21wb3NpdGVPcGVyYXRpb24iLCJkcmF3U2VsZWN0aW9uQmFja2dyb3VuZCIsIl9zZXRPcGFjaXR5IiwiZHJhd0NhY2hlT25DYW52YXMiLCJfcmVtb3ZlQ2FjaGVDYW52YXMiLCJkcmF3T2JqZWN0IiwicHJvcGVydHlTZXQiLCJpc0NhY2hlRGlydHkiLCJoYXNTdHJva2UiLCJoYXNGaWxsIiwibmVlZHNJdHNPd25DYWNoZSIsIm93bkNhY2hpbmciLCJ3aWxsRHJhd1NoYWRvdyIsImRyYXdDbGlwUGF0aE9uQ2FjaGUiLCJvcmlnaW5hbEZpbGwiLCJvcmlnaW5hbFN0cm9rZSIsIl9zZXRDbGlwcGluZ1Byb3BlcnRpZXMiLCJfZHJhd0NsaXBQYXRoIiwic2tpcENhbnZhcyIsIl9nZXROb25UcmFuc2Zvcm1lZERpbWVuc2lvbnMiLCJfcmVtb3ZlU2hhZG93IiwiX3NldFN0cm9rZVN0eWxlcyIsImRlY2wiLCJsaW5lRGFzaE9mZnNldCIsIl9hcHBseVBhdHRlcm5Gb3JUcmFuc2Zvcm1lZEdyYWRpZW50IiwiX2FwcGx5UGF0dGVybkdyYWRpZW50VHJhbnNmb3JtIiwiX3NldEZpbGxTdHlsZXMiLCJkYXNoQXJyYXkiLCJkcmF3Qm9yZGVycyIsImZvckFjdGl2ZVNlbGVjdGlvbiIsImRyYXdCb3JkZXJzSW5Hcm91cCIsInNjYWxpbmciLCJtdWx0WCIsIm11bHRZIiwiX3JlbmRlclBhaW50SW5PcmRlciIsIl9yZW5kZXJTdHJva2UiLCJfcmVuZGVyRmlsbCIsInBDdHgiLCJwQ2FudmFzIiwiX2ZpbmRDZW50ZXJGcm9tRWxlbWVudCIsIl9hc3NpZ25UcmFuc2Zvcm1NYXRyaXhQcm9wcyIsInByZXNlcnZlQXNwZWN0UmF0aW9PcHRpb25zIiwiY3JvcFgiLCJjcm9wWSIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvYmplY3RGb3JtIiwiX2Zyb21PYmplY3QiLCJjbG9uZUFzSW1hZ2UiLCJ1dGlscyIsIm9yaWdQYXJhbXMiLCJvcmlnaW5hbEdyb3VwIiwib3JpZ2luYWxTaGFkb3ciLCJ3aXRob3V0VHJhbnNmb3JtIiwid2l0aG91dFNoYWRvdyIsImJvdW5kaW5nUmVjdCIsImdldEJvdW5kaW5nUmVjdCIsInNoYWRvd09mZnNldCIsIm9yaWdpbmFsQ2FudmFzIiwiaXNUeXBlIiwiaW5jbHVkZXMiLCJzaG91bGRDZW50ZXJPcmlnaW4iLCJfc2V0T3JpZ2luVG9DZW50ZXIiLCJfcmVzZXRPcmlnaW4iLCJjZW50ZXJIIiwidmlld3BvcnRDZW50ZXJIIiwiY2VudGVyViIsInZpZXdwb3J0Q2VudGVyViIsInZpZXdwb3J0Q2VudGVyIiwiZ2V0TG9jYWxQb2ludGVyIiwicENsaWNrZWQiLCJvYmplY3RMZWZ0VG9wIiwiY3JlYXRlQWNjZXNzb3JzIiwiZXh0cmFQYXJhbSIsInRyYW5zbGF0ZVRvR2l2ZW5PcmlnaW4iLCJmcm9tT3JpZ2luWCIsImZyb21PcmlnaW5ZIiwidG9PcmlnaW5YIiwidG9PcmlnaW5ZIiwidHJhbnNsYXRlVG9DZW50ZXJQb2ludCIsImxlZnRUb3AiLCJnZXRQb2ludEJ5T3JpZ2luIiwiYWRqdXN0UG9zaXRpb24iLCJvZmZzZXRGcm9tIiwib2Zmc2V0VG8iLCJoeXBvdEZ1bGwiLCJnZXRTY2FsZWRXaWR0aCIsInhGdWxsIiwieUZ1bGwiLCJfb3JpZ2luYWxPcmlnaW5YIiwiX29yaWdpbmFsT3JpZ2luWSIsIm9yaWdpblBvaW50IiwibXVsdGlwbHlNYXRyaWNlcyIsIm9Db29yZHMiLCJhQ29vcmRzIiwibGluZUNvb3JkcyIsIm93bk1hdHJpeENhY2hlIiwibWF0cml4Q2FjaGUiLCJfZ2V0Q29vcmRzIiwiYWJzb2x1dGUiLCJjYWxjdWxhdGUiLCJjYWxjQUNvb3JkcyIsImNhbGNMaW5lQ29vcmRzIiwiZ2V0Q29vcmRzIiwicG9pbnRUTCIsInBvaW50QlIiLCJvdGhlciIsIm90aGVyQ29vcmRzIiwibGluZXMiLCJfZ2V0SW1hZ2VMaW5lcyIsIl9maW5kQ3Jvc3NQb2ludHMiLCJfY29udGFpbnNDZW50ZXJPZkNhbnZhcyIsImlzUGFydGlhbGx5T25TY3JlZW4iLCJldmVyeSIsInRvcGxpbmUiLCJyaWdodGxpbmUiLCJib3R0b21saW5lIiwibGVmdGxpbmUiLCJ4aSIsImlMaW5lIiwieGNvdW50IiwibGluZUtleSIsImdldFNjYWxlZEhlaWdodCIsInNjYWxlVG9XaWR0aCIsImJvdW5kaW5nUmVjdEZhY3RvciIsInNjYWxlVG9IZWlnaHQiLCJjb3NQIiwic2luUCIsImNvc1BTaW5QIiwiY29zUE1pbnVzU2luUCIsImNhbGNPQ29vcmRzIiwiX2NhbGNSb3RhdGVNYXRyaXgiLCJfY2FsY1RyYW5zbGF0ZU1hdHJpeCIsInN0YXJ0TWF0cml4IiwiX2NhbGN1bGF0ZUN1cnJlbnREaW1lbnNpb25zIiwiZm9yRWFjaENvbnRyb2wiLCJ3Iiwic2tpcENvcm5lcnMiLCJfc2V0Q29ybmVyQ29vcmRzIiwidHJhbnNmb3JtTWF0cml4S2V5Iiwic2VwIiwicHJlZml4IiwiY2FjaGUiLCJ0TWF0cml4Iiwibm9Ta2V3IiwiX2ZpbmFsaXplRGltZW5zaW9ucyIsImdldFN2Z0NvbG9yU3RyaW5nIiwiZ2V0U3ZnU3R5bGVzIiwic2tpcFNoYWRvdyIsImdldFN2Z0ZpbHRlciIsImdldFN2Z1NwYW5TdHlsZXMiLCJ1c2VXaGl0ZVNwYWNlIiwidGVybSIsInRleHREZWNvcmF0aW9uIiwiZ2V0U3ZnVGV4dERlY29yYXRpb24iLCJkZWx0YVkiLCJkZWNvcmF0aW9uIiwiZ2V0U3ZnQ29tbW9ucyIsImdldFN2Z1RyYW5zZm9ybSIsImZ1bGwiLCJfc2V0U1ZHQmciLCJ0ZXh0QmdSZWN0cyIsIl9nZXRGaWxsQXR0cmlidXRlcyIsIl9jcmVhdGVCYXNlU1ZHTWFya3VwIiwiX3RvU1ZHIiwiX2NyZWF0ZUJhc2VDbGlwUGF0aFNWR01hcmt1cCIsIm9iamVjdE1hcmt1cCIsImNvbW1vblBpZWNlcyIsImNsaXBQYXRoTWFya3VwIiwibm9TdHlsZSIsInN0eWxlSW5mbyIsInNoYWRvd0luZm8iLCJ3aXRoU2hhZG93IiwidmVjdG9yRWZmZWN0IiwiYWJzb2x1dGVDbGlwUGF0aCIsImFkZFBhaW50T3JkZXIiLCJvcmlnaW5hbFNldCIsInNhdmVQcm9wcyIsInByb3BzIiwidG1wT2JqIiwiX2lzRXF1YWwiLCJvcmlnVmFsdWUiLCJmaXJzdFBhc3MiLCJkYXNoZWRQcm9wZXJ0eVNldCIsImZvclRvdWNoIiwiaXNDb250cm9sVmlzaWJsZSIsInRvdWNoQ29ybmVyIiwiZm4iLCJjb250cm9sT2JqZWN0Iiwid2giLCJzaG91bGRTdHJva2UiLCJzZXRDb250cm9sVmlzaWJsZSIsInNldENvbnRyb2xzVmlzaWJpbGl0eSIsIkZYX0RVUkFUSU9OIiwiZnhDZW50ZXJPYmplY3RIIiwiY2FsbGJhY2tzIiwiZW1wdHkiLCJmeENlbnRlck9iamVjdFYiLCJmeFJlbW92ZSIsInNraXBDYWxsYmFja3MiLCJwcm9wc1RvQW5pbWF0ZSIsIm91dCIsIl9hbmltYXRlIiwicHJvcFBhaXIiLCJwcm9wSXNDb2xvciIsInZhbHVlUHJvZ3Jlc3MiLCJ0aW1lUHJvZ3Jlc3MiLCJjb29yZFByb3BzIiwibWFrZUVkZ2VUb09yaWdpbkdldHRlciIsInByb3BlcnR5TmFtZXMiLCJvcmlnaW5WYWx1ZXMiLCJheGlzMSIsImF4aXMyIiwiZGltZW5zaW9uIiwibmVhcmVzdCIsImZhcnRoZXN0IiwiTGluZSIsIl9zZXRXaWR0aEhlaWdodCIsIl9nZXRMZWZ0VG9PcmlnaW5YIiwiX2dldFRvcFRvT3JpZ2luWSIsImNhbGNMaW5lUG9pbnRzIiwib3JpZ1N0cm9rZVN0eWxlIiwieE11bHQiLCJ5TXVsdCIsIkFUVFJJQlVURV9OQU1FUyIsInBhcnNlZEF0dHJpYnV0ZXMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJzZXRSYWRpdXMiLCJzdmdTdHJpbmciLCJnZXRSYWRpdXNYIiwiZ2V0UmFkaXVzWSIsIlRyaWFuZ2xlIiwid2lkdGhCeTIiLCJoZWlnaHRCeTIiLCJwaUJ5MiIsIkVsbGlwc2UiLCJnZXRSeCIsImdldFJ5IiwiX2luaXRSeFJ5IiwiaXNSb3VuZGVkIiwiYmV6aWVyQ3VydmVUbyIsIlBvbHlsaW5lIiwiZXhhY3RCb3VuZGluZ0JveCIsIl9zZXRQb3NpdGlvbkRpbWVuc2lvbnMiLCJfcHJvamVjdFN0cm9rZU9uUG9pbnRzIiwiY29ycmVjdExlZnRUb3AiLCJjYWxjRGltIiwiX2NhbGNEaW1lbnNpb25zIiwiY29ycmVjdFNpemUiLCJmcm9tU1ZHIiwiZGlmZlgiLCJkaWZmWSIsImNvbW1vblJlbmRlciIsImZyb21FbGVtZW50R2VuZXJhdG9yIiwiX2NsYXNzIiwiUG9seWdvbiIsIl9zZXRQYXRoIiwiX3JlbmRlclBhdGhDb21tYW5kcyIsInN1YnBhdGhTdGFydFgiLCJzdWJwYXRoU3RhcnRZIiwiX2dldE9mZnNldFRyYW5zZm9ybSIsImRpZ2l0cyIsImFYIiwiYVkiLCJwYXRoVXJsIiwidXNlU2V0T25Hcm91cCIsImlzQWxyZWFkeUdyb3VwZWQiLCJfdXBkYXRlT2JqZWN0c0FDb29yZHMiLCJfY2FsY0JvdW5kcyIsIl91cGRhdGVPYmplY3RzQ29vcmRzIiwiX3VwZGF0ZU9iamVjdENvb3JkcyIsIm9iamVjdExlZnQiLCJvYmplY3RUb3AiLCJuZXN0ZWQiLCJfcmVzdG9yZU9iamVjdHNTdGF0ZSIsIl9pbmNsdWRlRGVmYXVsdFZhbHVlcyIsIm9ianNUb09iamVjdCIsIm9yaWdpbmFsRGVmYXVsdHMiLCJfb2JqIiwib3duQ2FjaGUiLCJncm91cE1hdHJpeCIsImRlc3Ryb3kiLCJ0b0FjdGl2ZVNlbGVjdGlvbiIsInVuZ3JvdXBPbkNhbnZhcyIsInNldE9iamVjdHNDb29yZHMiLCJvbmx5V2lkdGhIZWlnaHQiLCJpTGVuIiwiakxlbiIsIl9nZXRCb3VuZHMiLCJtaW5YWSIsIm1heFhZIiwidG9Hcm91cCIsIm5ld0dyb3VwIiwiY2hpbGRyZW5PdmVycmlkZSIsInNyY0Zyb21BdHRyaWJ1dGUiLCJfbGFzdFNjYWxlWCIsIl9sYXN0U2NhbGVZIiwiX2ZpbHRlclNjYWxpbmdYIiwiX2ZpbHRlclNjYWxpbmdZIiwibWluaW11bVNjYWxlVHJpZ2dlciIsImNhY2hlS2V5IiwiaW1hZ2VTbW9vdGhpbmciLCJmaWx0ZXJzIiwiX2luaXRFbGVtZW50IiwiX2VsZW1lbnQiLCJzZXRFbGVtZW50IiwicmVtb3ZlVGV4dHVyZSIsIl9pbml0Q29uZmlnIiwiYXBwbHlGaWx0ZXJzIiwicmVzaXplRmlsdGVyIiwiYXBwbHlSZXNpemVGaWx0ZXJzIiwiYmFja2VuZCIsImZpbHRlckJhY2tlbmQiLCJldmljdENhY2hlc0ZvcktleSIsImdldENyb3NzT3JpZ2luIiwiZ2V0T3JpZ2luYWxTaXplIiwiX3N0cm9rZSIsImZpbHRlck9iaiIsImdldFNyYyIsImhhc0Nyb3AiLCJzdHJva2VTdmciLCJpbWFnZU1hcmt1cCIsImltYWdlUmVuZGVyaW5nIiwiZ2V0U3ZnU3JjIiwib3JpZ0ZpbGwiLCJmaWx0ZXJlZCIsInNldFNyYyIsIm1pbmltdW1TY2FsZSIsImVsZW1lbnRUb0ZpbHRlciIsIl9maWx0ZXJlZEVsIiwic291cmNlV2lkdGgiLCJzb3VyY2VIZWlnaHQiLCJpc05ldXRyYWxTdGF0ZSIsImltZ0VsZW1lbnQiLCJfbmVlZHNSZXNpemUiLCJlbGVtZW50VG9EcmF3IiwiZWxXaWR0aCIsImVsSGVpZ2h0Iiwic1giLCJzWSIsInNXIiwic0giLCJtYXhEZXN0VyIsIm1heERlc3RIIiwiX3Jlc2V0V2lkdGhIZWlnaHQiLCJDU1NfQ0FOVkFTIiwiX2luaXRGaWx0ZXJzIiwicEFSIiwicldpZHRoIiwickhlaWdodCIsInBXaWR0aCIsInBIZWlnaHQiLCJfb2JqZWN0IiwicmVzaXplRmlsdGVycyIsImZyb21VUkwiLCJpbWdPcHRpb25zIiwiX2dldEFuZ2xlVmFsdWVGb3JTdHJhaWdodGVuIiwic3RyYWlnaHRlbiIsImZ4U3RyYWlnaHRlbiIsInN0cmFpZ2h0ZW5PYmplY3QiLCJmeFN0cmFpZ2h0ZW5PYmplY3QiLCJ0ZXN0UHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiZnJhZ21lbnRTb3VyY2UiLCJmcmFnbWVudFNoYWRlciIsImNyZWF0ZVNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsInNldHVwR0xDb250ZXh0IiwiY2FwdHVyZUdQVUluZm8iLCJpc1N1cHBvcnRlZCIsImdldFBhcmFtZXRlciIsIk1BWF9URVhUVVJFX1NJWkUiLCJwcmVjaXNpb25zIiwid2ViR2xQcmVjaXNpb24iLCJjcmVhdGVXZWJHTENhbnZhcyIsImFQb3NpdGlvbiIsIkZsb2F0MzJBcnJheSIsImNob29zZUZhc3Rlc3RDb3B5R0xUbzJETWV0aG9kIiwiY2FuVXNlSW1hZ2VEYXRhIiwiY2FuTWVhc3VyZVBlcmYiLCJwZXJmb3JtYW5jZSIsImNhblVzZUFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJjYW5Vc2VVaW50OENsYW1wZWQiLCJjb3B5R0xUbzJEIiwic3RhcnRUaW1lIiwiZHJhd0ltYWdlVGltZSIsInRlc3RDb250ZXh0Iiwibm93IiwiZ2xPcHRpb25zIiwicHJlbXVsdGlwbGllZEFscGhhIiwiZGVwdGgiLCJzdGVuY2lsIiwiYW50aWFsaWFzIiwiY2xlYXJDb2xvciIsImNhY2hlZFRleHR1cmUiLCJnZXRDYWNoZWRUZXh0dXJlIiwic291cmNlVGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJ0YXJnZXRUZXh0dXJlIiwib3JpZ2luYWxUZXh0dXJlIiwicGFzc2VzIiwid2ViZ2wiLCJwcm9ncmFtQ2FjaGUiLCJwYXNzIiwidGVtcEZibyIsImNyZWF0ZUZyYW1lYnVmZmVyIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJhcHBseVRvIiwicmVzaXplQ2FudmFzSWZOZWVkZWQiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJkZWxldGVUZXh0dXJlIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJjbGVhcldlYkdMQ2FjaGVzIiwidGV4dHVyZUNhY2hlIiwidGV4dHVyZUltYWdlU291cmNlIiwidGV4dHVyZSIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJORUFSRVNUIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJ0ZXhJbWFnZTJEIiwidW5pcXVlSWQiLCJncHVJbmZvIiwicmVuZGVyZXIiLCJ2ZW5kb3IiLCJleHQiLCJnZXRFeHRlbnNpb24iLCJVTk1BU0tFRF9SRU5ERVJFUl9XRUJHTCIsIlVOTUFTS0VEX1ZFTkRPUl9XRUJHTCIsInNvdXJjZUVsZW1lbnQiLCJvcmlnaW5hbEVsIiwib3JpZ2luYWxJbWFnZURhdGEiLCJCYXNlRmlsdGVyIiwidmVydGV4U291cmNlIiwiY3JlYXRlUHJvZ3JhbSIsInZlcnRleFNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJnZXRTaGFkZXJJbmZvTG9nIiwicHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJnZXRBdHRyaWJ1dGVMb2NhdGlvbnMiLCJ1bmlmb3JtTG9jYXRpb25zIiwiZ2V0VW5pZm9ybUxvY2F0aW9ucyIsInVTdGVwVyIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInVTdGVwSCIsImdldEF0dHJpYkxvY2F0aW9uIiwic2VuZEF0dHJpYnV0ZURhdGEiLCJhUG9zaXRpb25EYXRhIiwiYXR0cmlidXRlTG9jYXRpb24iLCJidWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJfc2V0dXBGcmFtZUJ1ZmZlciIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJfc3dhcFRleHR1cmVzIiwidGVtcCIsIm1haW4iLCJtYWluUGFyYW1ldGVyIiwiYXBwbHlUb1dlYkdMIiwiYXBwbHlUbzJkIiwicmV0cmlldmVTaGFkZXIiLCJzaGFkZXIiLCJ1c2VQcm9ncmFtIiwidW5pZm9ybTFmIiwic2VuZFVuaWZvcm1EYXRhIiwidmlld3BvcnQiLCJkcmF3QXJyYXlzIiwiVFJJQU5HTEVfU1RSSVAiLCJiaW5kQWRkaXRpb25hbFRleHR1cmUiLCJ0ZXh0dXJlVW5pdCIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsInVuYmluZEFkZGl0aW9uYWxUZXh0dXJlIiwiZ2V0TWFpblBhcmFtZXRlciIsInNldE1haW5QYXJhbWV0ZXIiLCJjcmVhdGVIZWxwTGF5ZXIiLCJoZWxwTGF5ZXIiLCJtYWluUCIsIkNvbG9yTWF0cml4IiwiY29sb3JzT25seSIsInVDb2xvck1hdHJpeCIsInVDb25zdGFudHMiLCJjb25zdGFudHMiLCJ1bmlmb3JtTWF0cml4NGZ2IiwidW5pZm9ybTRmdiIsIkJyaWdodG5lc3MiLCJicmlnaHRuZXNzIiwidUJyaWdodG5lc3MiLCJDb252b2x1dGUiLCJvcGFxdWUiLCJDb252b2x1dGVfM18xIiwiQ29udm9sdXRlXzNfMCIsIkNvbnZvbHV0ZV81XzEiLCJDb252b2x1dGVfNV8wIiwiQ29udm9sdXRlXzdfMSIsIkNvbnZvbHV0ZV83XzAiLCJDb252b2x1dGVfOV8xIiwiQ29udm9sdXRlXzlfMCIsImRzdE9mZiIsInNjeCIsInNjeSIsInNyY09mZiIsInd0Iiwid2VpZ2h0cyIsInNpZGUiLCJoYWxmU2lkZSIsInN3Iiwic2giLCJvdXRwdXQiLCJjcmVhdGVJbWFnZURhdGEiLCJkc3QiLCJhbHBoYUZhYyIsInVNYXRyaXgiLCJ1T3BhcXVlIiwidUhhbGZTaXplIiwidVNpemUiLCJ1bmlmb3JtMWZ2IiwiR3JheXNjYWxlIiwibGlnaHRuZXNzIiwibHVtaW5vc2l0eSIsIm1vZGUiLCJ1TW9kZSIsInVuaWZvcm0xaSIsIkludmVydCIsImludmVydCIsInVJbnZlcnQiLCJOb2lzZSIsIm5vaXNlIiwicmFuZCIsInVOb2lzZSIsInVTZWVkIiwiUGl4ZWxhdGUiLCJibG9ja3NpemUiLCJfaSIsIl9qIiwiX2lMZW4iLCJfakxlbiIsInVCbG9ja3NpemUiLCJSZW1vdmVDb2xvciIsInVzZUFscGhhIiwibG93QyIsImhpZ2hDIiwidUxvdyIsInVIaWdoIiwiQnJvd25pZSIsIlZpbnRhZ2UiLCJLb2RhY2hyb21lIiwiVGVjaG5pY29sb3IiLCJQb2xhcm9pZCIsIlNlcGlhIiwiQmxhY2tXaGl0ZSIsIkJsZW5kQ29sb3IiLCJzY3JlZW4iLCJkaWZmIiwibGlnaHRlbiIsImRhcmtlbiIsImV4Y2x1c2lvbiIsInRpbnQiLCJidWlsZFNvdXJjZSIsInRnIiwiYWxwaGExIiwidUNvbG9yIiwiQmxlbmRJbWFnZSIsIm1hc2siLCJURVhUVVJFMSIsImNhbGN1bGF0ZU1hdHJpeCIsImNhbnZhczEiLCJibGVuZERhdGEiLCJibGVuZEltYWdlIiwidVRyYW5zZm9ybU1hdHJpeCIsInVJbWFnZSIsInVuaWZvcm1NYXRyaXgzZnYiLCJSZXNpemUiLCJyZXNpemVUeXBlIiwibGFuY3pvc0xvYmVzIiwidURlbHRhIiwidVRhcHMiLCJ1bmlmb3JtMmZ2IiwiaG9yaXpvbnRhbCIsInRhcHMiLCJmaWx0ZXJXaW5kb3ciLCJnZXRGaWx0ZXJXaW5kb3ciLCJnZW5lcmF0ZVNoYWRlciIsInRlbXBTY2FsZSIsImdldFRhcHMiLCJsb2JlRnVuY3Rpb24iLCJsYW5jem9zQ3JlYXRlIiwib2Zmc2V0cyIsImZyYWdtZW50U291cmNlVE9QIiwiZFciLCJkSCIsImxvYmVzIiwieHgiLCJyY3BTY2FsZVgiLCJyY3BTY2FsZVkiLCJuZXdEYXRhIiwib1ciLCJvSCIsInNsaWNlQnlUd28iLCJoZXJtaXRlRmFzdFJlc2l6ZSIsImJpbGluZWFyRmlsdGVyaW5nIiwibGFuY3pvc1Jlc2l6ZSIsInRtcENhbnZhcyIsIm11bHQiLCJkb25lVyIsImRvbmVIIiwic3RlcFciLCJzdGVwSCIsImRYIiwiZFkiLCJzcmNEYXRhIiwiZGVzdEltZyIsImRlc3REYXRhIiwibGFuY3pvcyIsInJhdGlvWCIsInJhdGlvWSIsInJjcFJhdGlvWCIsInJjcFJhdGlvWSIsInJhbmdlMlgiLCJyYW5nZTJZIiwiY2FjaGVMYW5jIiwiaWNlbnRlciIsInUiLCJ3ZWlnaHQiLCJmWCIsImZZIiwieERpZmYiLCJ5RGlmZiIsImNobmwiLCJvcmlnUGl4IiwidzQiLCJwaXhlbHMiLCJkZXN0SW1hZ2UiLCJkZXN0UGl4ZWxzIiwicmF0aW9XIiwicmF0aW9IIiwicmF0aW9XSGFsZiIsInJhdGlvSEhhbGYiLCJpbWcyIiwiZGF0YTIiLCJ3ZWlnaHRzQWxwaGEiLCJneFIiLCJneEciLCJneEIiLCJneEEiLCJ5eSIsIncwIiwiQ29udHJhc3QiLCJjb250cmFzdCIsImNvbnRyYXN0RiIsInVDb250cmFzdCIsIlNhdHVyYXRpb24iLCJzYXR1cmF0aW9uIiwiYWRqdXN0IiwidVNhdHVyYXRpb24iLCJWaWJyYW5jZSIsInZpYnJhbmNlIiwiYXZnIiwiYW10IiwidVZpYnJhbmNlIiwiQmx1ciIsImFzcGVjdFJhdGlvIiwic2ltcGxlQmx1ciIsImNhbnZhczIiLCJibHVyTGF5ZXIxIiwiYmx1ckxheWVyMiIsInBlcmNlbnQiLCJjdHgxIiwiY3R4MiIsIm5ld0ltYWdlRGF0YSIsImRlbHRhIiwiY2hvb3NlUmlnaHREZWx0YSIsImJsdXJTY2FsZSIsIkdhbW1hIiwiZ2FtbWEiLCJySW52IiwiZ0ludiIsImJJbnYiLCJyVmFscyIsImdWYWxzIiwiYlZhbHMiLCJ1R2FtbWEiLCJ1bmlmb3JtM2Z2IiwiQ29tcG9zZWQiLCJzdWJGaWx0ZXJzIiwiSHVlUm90YXRpb24iLCJyb3RhdGlvbiIsInJhZCIsImFUaGlyZCIsImFUaGlyZFNxdFNpbiIsIk9uZU1pbnVzQ29zIiwiYWRkaXRpb25hbFByb3BzIiwiX2RpbWVuc2lvbkFmZmVjdGluZ1Byb3BzIiwiX3JlTmV3bGluZSIsIl9yZVNwYWNlc0FuZFRhYnMiLCJfcmVTcGFjZUFuZFRhYiIsIl9yZVdvcmRzIiwidW5kZXJsaW5lIiwib3ZlcmxpbmUiLCJsaW5ldGhyb3VnaCIsInRleHRBbGlnbiIsInN1cGVyc2NyaXB0IiwiYmFzZWxpbmUiLCJzdWJzY3JpcHQiLCJ0ZXh0QmFja2dyb3VuZENvbG9yIiwicGF0aFN0YXJ0T2Zmc2V0IiwicGF0aFNpZGUiLCJwYXRoQWxpZ24iLCJfZm9udFNpemVGcmFjdGlvbiIsIl9mb250U2l6ZU11bHQiLCJjaGFyU3BhY2luZyIsIl9tZWFzdXJpbmdDb250ZXh0IiwiZGlyZWN0aW9uIiwiX3N0eWxlUHJvcGVydGllcyIsIl9fY2hhckJvdW5kcyIsIkNBQ0hFX0ZPTlRfU0laRSIsIk1JTl9URVhUX1dJRFRIIiwidGV4dCIsIl9fc2tpcERpbWVuc2lvbiIsInNldFBhdGhJbmZvIiwiaW5pdERpbWVuc2lvbnMiLCJzZWdtZW50c0luZm8iLCJnZXRNZWFzdXJpbmdDb250ZXh0IiwiX3NwbGl0VGV4dCIsIm5ld0xpbmVzIiwiX3NwbGl0VGV4dEludG9MaW5lcyIsInRleHRMaW5lcyIsIl90ZXh0TGluZXMiLCJncmFwaGVtZUxpbmVzIiwiX3Vud3JhcHBlZFRleHRMaW5lcyIsIl91bndyYXBwZWRMaW5lcyIsIl90ZXh0IiwiZ3JhcGhlbWVUZXh0IiwiX2NsZWFyQ2FjaGUiLCJjYWxjVGV4dFdpZHRoIiwiY3Vyc29yV2lkdGgiLCJjYWxjVGV4dEhlaWdodCIsImVubGFyZ2VTcGFjZXMiLCJkaWZmU3BhY2UiLCJjdXJyZW50TGluZVdpZHRoIiwibnVtYmVyT2ZTcGFjZXMiLCJhY2N1bXVsYXRlZFNwYWNlIiwibGluZSIsImNoYXJCb3VuZCIsInNwYWNlcyIsImlzRW5kT2ZXcmFwcGluZyIsImdldExpbmVXaWR0aCIsImtlcm5lZFdpZHRoIiwibGluZUluZGV4IiwibWlzc2luZ05ld2xpbmVPZmZzZXQiLCJfc2V0VGV4dFN0eWxlcyIsIl9yZW5kZXJUZXh0TGluZXNCYWNrZ3JvdW5kIiwiX3JlbmRlclRleHREZWNvcmF0aW9uIiwiX3JlbmRlclRleHQiLCJfcmVuZGVyVGV4dFN0cm9rZSIsIl9yZW5kZXJUZXh0RmlsbCIsImNoYXJTdHlsZSIsImZvck1lYXN1cmluZyIsInRleHRCYXNlbGluZSIsIl9nZXRGb250RGVjbGFyYXRpb24iLCJtYXhXaWR0aCIsIl9yZW5kZXJUZXh0TGluZSIsIl9yZW5kZXJDaGFycyIsInN0eWxlSGFzIiwiaGVpZ2h0T2ZMaW5lIiwibGluZUxlZnRPZmZzZXQiLCJsYXN0Q29sb3IiLCJjaGFyQm94IiwiY3VycmVudENvbG9yIiwiZHJhd1N0YXJ0IiwibGVmdE9mZnNldCIsIl9nZXRMZWZ0T2Zmc2V0IiwibGluZVRvcE9mZnNldCIsIl9nZXRUb3BPZmZzZXQiLCJib3hTdGFydCIsImJveFdpZHRoIiwiX2dldExpbmVMZWZ0T2Zmc2V0IiwiZ2V0VmFsdWVPZlByb3BlcnR5QXQiLCJyZW5kZXJMZWZ0IiwiZ2V0Rm9udENhY2hlIiwiY2FjaGVQcm9wIiwiX21lYXN1cmVDaGFyIiwiX2NoYXIiLCJwcmV2aW91c0NoYXIiLCJwcmV2Q2hhclN0eWxlIiwiY291cGxlV2lkdGgiLCJwcmV2aW91c1dpZHRoIiwiZm9udENhY2hlIiwiY291cGxlIiwic3R5bGVzQXJlRXF1YWwiLCJmb250TXVsdGlwbGllciIsIm1lYXN1cmVUZXh0IiwiZ2V0SGVpZ2h0T2ZDaGFyIiwibWVhc3VyZUxpbmUiLCJsaW5lSW5mbyIsIl9tZWFzdXJlTGluZSIsIl9nZXRXaWR0aE9mQ2hhclNwYWNpbmciLCJncmFwaGVtZSIsInByZXZHcmFwaGVtZSIsImdyYXBoZW1lSW5mbyIsInN0YXJ0aW5nUG9pbnQiLCJ0b3RhbFBhdGhMZW5ndGgiLCJsaW5lQm91bmRzIiwicG9zaXRpb25JblBhdGgiLCJfZ2V0R3JhcGhlbWVCb3giLCJfc2V0R3JhcGhlbWVPblBhdGgiLCJudW1PZlNwYWNlcyIsImNlbnRlclBvc2l0aW9uIiwic2tpcExlZnQiLCJnZXRDb21wbGV0ZVN0eWxlRGVjbGFyYXRpb24iLCJwcmV2U3R5bGUiLCJwcmV2aW91c0JveCIsIl9fbGluZUhlaWdodHMiLCJtYXhIZWlnaHQiLCJfcmVuZGVyVGV4dENvbW1vbiIsImxpbmVIZWlnaHRzIiwiaXNFbXB0eVN0eWxlcyIsImFjdHVhbFN0eWxlIiwibmV4dFN0eWxlIiwidGltZVRvUmVuZGVyIiwiZHJhd2luZ0xlZnQiLCJpc0p1c3RpZnkiLCJjaGFyc1RvUmVuZGVyIiwic2hvcnRDdXQiLCJpc0x0ciIsImN1cnJlbnREaXJlY3Rpb24iLCJfcmVuZGVyQ2hhciIsIl9oYXNTdHlsZUNoYW5nZWQiLCJfYXBwbHlQYXR0ZXJuR3JhZGllbnRUcmFuc2Zvcm1UZXh0IiwiaGFuZGxlRmlsbGVyIiwiZmlsbE9mZnNldHMiLCJzdHJva2VPZmZzZXRzIiwiX2dldFN0eWxlRGVjbGFyYXRpb24iLCJmdWxsRGVjbCIsInNob3VsZEZpbGwiLCJmaWxsVGV4dCIsInN0cm9rZVRleHQiLCJzZXRTdXBlcnNjcmlwdCIsIl9zZXRTY3JpcHQiLCJzZXRTdWJzY3JpcHQiLCJzY2hlbWEiLCJsb2MiLCJnZXQyREN1cnNvckxvY2F0aW9uIiwic2V0U2VsZWN0aW9uU3R5bGVzIiwidGhpc1N0eWxlIiwiX2hhc1N0eWxlQ2hhbmdlZEZvclN2ZyIsImxpbmVEaWZmIiwiX19saW5lV2lkdGhzIiwiX3Nob3VsZENsZWFyRGltZW5zaW9uQ2FjaGUiLCJzaG91bGRDbGVhciIsIl9mb3JjZUNsZWFyQ2FjaGUiLCJfc2l6ZSIsIl9keSIsImxhc3REZWNvcmF0aW9uIiwiY3VycmVudERlY29yYXRpb24iLCJjdXJyZW50RmlsbCIsImxhc3RGaWxsIiwidG9wT2Zmc2V0Iiwic3R5bGVPYmplY3QiLCJmYW1pbHkiLCJmb250SXNHZW5lcmljIiwiZ2VuZXJpY0ZvbnRzIiwibmV3TGluZSIsIm5ld1RleHQiLCJhbGxQcm9wZXJ0aWVzIiwibmVlZHNEaW1zIiwiaXNBZGRpbmdQYXRoIiwiX2tleSIsInBhcnNlZEFuY2hvciIsInRleHRBbmNob3IiLCJvcmlnaW5hbFN0cm9rZVdpZHRoIiwidGV4dEhlaWdodFNjYWxlRmFjdG9yIiwic2NhbGVkRGlmZiIsInRleHRIZWlnaHQiLCJvZmZYIiwib2JqZWN0Q29weSIsInRleHRJbnN0YW5jZSIsInBhdGhJbnN0YW5jZSIsInAzIiwiY2xlYW5TdHlsZSIsImxldHRlckNvdW50Iiwic3R5bGVQcm9wZXJ0eVZhbHVlIiwic3R5bGVzQ291bnQiLCJhbGxTdHlsZU9iamVjdFByb3BlcnRpZXNNYXRjaCIsImdyYXBoZW1lQ291bnQiLCJyZW1vdmVTdHlsZSIsImxpbmVOdW0iLCJjaGFyTnVtIiwiX2V4dGVuZFN0eWxlcyIsIl9nZXRMaW5lU3R5bGUiLCJfc2V0TGluZVN0eWxlIiwiX3NldFN0eWxlRGVjbGFyYXRpb24iLCJzZWxlY3Rpb25TdGFydCIsInNraXBXcmFwcGluZyIsImdldFNlbGVjdGlvblN0eWxlcyIsInN0YXJ0SW5kZXgiLCJlbmRJbmRleCIsInNlbGVjdGlvbkVuZCIsImdldFN0eWxlQXRQb3NpdGlvbiIsImxpbmVTdHlsZSIsIl9kZWxldGVTdHlsZURlY2xhcmF0aW9uIiwiX2RlbGV0ZUxpbmVTdHlsZSIsInBhcnNlRGVjb3JhdGlvbiIsIklUZXh0IiwiZWRpdGFibGUiLCJlZGl0aW5nQm9yZGVyQ29sb3IiLCJjdXJzb3JDb2xvciIsImN1cnNvckRlbGF5IiwiY3Vyc29yRHVyYXRpb24iLCJjYWNoaW5nIiwiaGlkZGVuVGV4dGFyZWFDb250YWluZXIiLCJfcmVTcGFjZSIsIl9jdXJyZW50Q3Vyc29yT3BhY2l0eSIsIl9zZWxlY3Rpb25EaXJlY3Rpb24iLCJfYWJvcnRDdXJzb3JBbmltYXRpb24iLCJfX3dpZHRoT2ZTcGFjZSIsImluQ29tcG9zaXRpb25Nb2RlIiwiaW5pdEJlaGF2aW9yIiwic2V0U2VsZWN0aW9uU3RhcnQiLCJfdXBkYXRlQW5kRmlyZSIsInNldFNlbGVjdGlvbkVuZCIsIl9maXJlU2VsZWN0aW9uQ2hhbmdlZCIsIl91cGRhdGVUZXh0YXJlYSIsImluaXREZWxheWVkQ3Vyc29yIiwiY3Vyc29yT2Zmc2V0Q2FjaGUiLCJyZW5kZXJDdXJzb3JPclNlbGVjdGlvbiIsInNraXBSZXN0b3JlIiwiX2NsZWFyVGV4dEFyZWEiLCJib3VuZGFyaWVzIiwiX2dldEN1cnNvckJvdW5kYXJpZXMiLCJyZW5kZXJDdXJzb3IiLCJyZW5kZXJTZWxlY3Rpb24iLCJfZ2V0Q3Vyc29yQm91bmRhcmllc09mZnNldHMiLCJjdXJzb3JQb3NpdGlvbiIsImJvdW5kIiwiY3Vyc29yTG9jYXRpb24iLCJjaGFySGVpZ2h0IiwiX19pc01vdXNlZG93biIsInN0YXJ0TGluZSIsImVuZExpbmUiLCJzdGFydENoYXIiLCJlbmRDaGFyIiwicmVhbExpbmVIZWlnaHQiLCJsaW5lT2Zmc2V0IiwiYm94RW5kIiwiZHJhd1dpZHRoIiwiZHJhd0hlaWdodCIsImV4dHJhVG9wIiwiY29tcG9zaXRpb25Db2xvciIsImdldEN1cnJlbnRDaGFyRm9udFNpemUiLCJjcCIsIl9nZXRDdXJyZW50Q2hhckluZGV4IiwiZ2V0Q3VycmVudENoYXJDb2xvciIsImluaXRBZGRlZEhhbmRsZXIiLCJpbml0UmVtb3ZlZEhhbmRsZXIiLCJpbml0Q3Vyc29yU2VsZWN0aW9uSGFuZGxlcnMiLCJpbml0RG91YmxlQ2xpY2tTaW11bGF0aW9uIiwibW91c2VNb3ZlSGFuZGxlciIsIl9pbml0Q2FudmFzSGFuZGxlcnMiLCJfcmVtb3ZlQ2FudmFzSGFuZGxlcnMiLCJfdGljayIsIl9jdXJyZW50VGlja1N0YXRlIiwiX2FuaW1hdGVDdXJzb3IiLCJ0YXJnZXRPcGFjaXR5IiwiY29tcGxldGVNZXRob2QiLCJ0aWNrU3RhdGUiLCJpc0Fib3J0ZWQiLCJfb25UaWNrQ29tcGxldGUiLCJfY3Vyc29yVGltZW91dDEiLCJfY3VycmVudFRpY2tDb21wbGV0ZVN0YXRlIiwicmVzdGFydCIsImRlbGF5IiwiYWJvcnRDdXJzb3JBbmltYXRpb24iLCJfY3Vyc29yVGltZW91dDIiLCJzZWxlY3RBbGwiLCJnZXRTZWxlY3RlZFRleHQiLCJmaW5kV29yZEJvdW5kYXJ5TGVmdCIsInN0YXJ0RnJvbSIsImZpbmRXb3JkQm91bmRhcnlSaWdodCIsImZpbmRMaW5lQm91bmRhcnlMZWZ0IiwiZmluZExpbmVCb3VuZGFyeVJpZ2h0Iiwic2VhcmNoV29yZEJvdW5kYXJ5Iiwic2VsZWN0V29yZCIsIm5ld1NlbGVjdGlvblN0YXJ0IiwibmV3U2VsZWN0aW9uRW5kIiwic2VsZWN0TGluZSIsImVudGVyRWRpdGluZyIsImV4aXRFZGl0aW5nT25PdGhlcnMiLCJpbml0SGlkZGVuVGV4dGFyZWEiLCJfc2F2ZUVkaXRpbmdQcm9wcyIsIl9zZXRFZGl0aW5nUHJvcHMiLCJfdGV4dEJlZm9yZUVkaXQiLCJpbml0TW91c2VNb3ZlSGFuZGxlciIsImdldFNlbGVjdGlvblN0YXJ0RnJvbVBvaW50ZXIiLCJjdXJyZW50U3RhcnQiLCJjdXJyZW50RW5kIiwiX19zZWxlY3Rpb25TdGFydE9uTW91c2VEb3duIiwicmVzdGFydEN1cnNvcklmTmVlZGVkIiwiZnJvbVN0cmluZ1RvR3JhcGhlbWVTZWxlY3Rpb24iLCJzbWFsbGVyVGV4dFN0YXJ0IiwiZ3JhcGhlbWVTdGFydCIsInNtYWxsZXJUZXh0RW5kIiwiZnJvbUdyYXBoZW1lVG9TdHJpbmdTZWxlY3Rpb24iLCJuZXdTZWxlY3Rpb24iLCJ1cGRhdGVUZXh0YXJlYVBvc2l0aW9uIiwidXBkYXRlRnJvbVRleHRBcmVhIiwiX2NhbGNUZXh0YXJlYVBvc2l0aW9uIiwiZGVzaXJlZFBvc2l0aW9uIiwiY29tcG9zaXRpb25TdGFydCIsInVwcGVyQ2FudmFzIiwidXBwZXJDYW52YXNXaWR0aCIsInVwcGVyQ2FudmFzSGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJfc2F2ZWRQcm9wcyIsIl9yZXN0b3JlRWRpdGluZ1Byb3BzIiwiaXNUZXh0Q2hhbmdlZCIsIl9yZW1vdmVFeHRyYW5lb3VzU3R5bGVzIiwicmVtb3ZlU3R5bGVGcm9tVG8iLCJzdHlsZU9iaiIsImN1cnNvclN0YXJ0IiwiY3Vyc29yRW5kIiwibGluZVN0YXJ0IiwiY2hhclN0YXJ0IiwibGluZUVuZCIsImNoYXJFbmQiLCJzaGlmdExpbmVTdHlsZXMiLCJudW1lcmljQ2hhciIsImNsb25lZFN0eWxlcyIsIm51bWVyaWNMaW5lIiwiaW5zZXJ0TmV3bGluZVN0eWxlT2JqZWN0IiwicXR5IiwiY29waWVkU3R5bGUiLCJjdXJyZW50Q2hhclN0eWxlIiwibmV3TGluZVN0eWxlcyIsInNvbWV0aGluZ0FkZGVkIiwiaXNFbmRPZkxpbmUiLCJudW1JbmRleCIsInN0eWxlQ2FycmllZE92ZXIiLCJpbnNlcnRDaGFyU3R5bGVPYmplY3QiLCJxdWFudGl0eSIsImN1cnJlbnRMaW5lU3R5bGVzIiwiY3VycmVudExpbmVTdHlsZXNDbG9uZWQiLCJudW1lcmljSW5kZXgiLCJuZXdTdHlsZSIsImluc2VydE5ld1N0eWxlQmxvY2siLCJpbnNlcnRlZFRleHQiLCJjdXJzb3JMb2MiLCJhZGRlZExpbmVzIiwibGluZXNMZW5ndGgiLCJzZXRTZWxlY3Rpb25TdGFydEVuZFdpdGhTaGlmdCIsInNldFNlbGVjdGlvbkluQm91bmRhcmllcyIsIl9fbGFzdENsaWNrVGltZSIsIl9fbGFzdExhc3RDbGlja1RpbWUiLCJfX2xhc3RQb2ludGVyIiwiX19uZXdDbGlja1RpbWUiLCJuZXdQb2ludGVyIiwiaXNUcmlwbGVDbGljayIsIl9zdG9wRXZlbnQiLCJfX2xhc3RJc0VkaXRpbmciLCJfX2xhc3RTZWxlY3RlZCIsImluaXRNb3VzZWRvd25IYW5kbGVyIiwiaW5pdE1vdXNldXBIYW5kbGVyIiwiaW5pdENsaWNrcyIsImRvdWJsZUNsaWNrSGFuZGxlciIsInRyaXBsZUNsaWNrSGFuZGxlciIsIl9tb3VzZURvd25IYW5kbGVyIiwic2V0Q3Vyc29yQnlDbGljayIsIl9tb3VzZURvd25IYW5kbGVyQmVmb3JlIiwiY3VycmVudEFjdGl2ZSIsIm1vdXNlT2Zmc2V0IiwicHJldldpZHRoIiwiX2dldE5ld1NlbGVjdGlvblN0YXJ0RnJvbU9mZnNldCIsImRpc3RhbmNlQnR3TGFzdENoYXJBbmRDdXJzb3IiLCJkaXN0YW5jZUJ0d05leHRDaGFyQW5kQ3Vyc29yIiwib25LZXlEb3duIiwib25LZXlVcCIsIm9uSW5wdXQiLCJjb3B5IiwicGFzdGUiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uVXBkYXRlIiwib25Db21wb3NpdGlvbkVuZCIsIl9jbGlja0hhbmRsZXJJbml0aWFsaXplZCIsIm9uQ2xpY2siLCJrZXlzTWFwIiwia2V5c01hcFJ0bCIsImN0cmxLZXlzTWFwVXAiLCJjdHJsS2V5c01hcERvd24iLCJrZXlNYXAiLCJrZXlDb2RlIiwiY3RybEtleSIsIm1ldGFLZXkiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfY29weURvbmUiLCJmcm9tUGFzdGUiLCJyZW1vdmVkVGV4dCIsInJlbW92ZUZyb20iLCJyZW1vdmVUbyIsIm5leHRUZXh0IiwiY2hhckNvdW50IiwibmV4dENoYXJDb3VudCIsImNoYXJEaWZmIiwidGV4dGFyZWFTZWxlY3Rpb24iLCJiYWNrRGVsZXRlIiwiY29waWVkVGV4dCIsImNvcGllZFRleHRTdHlsZSIsImNvbXBvc2l0aW9uRW5kIiwiX2dldENsaXBib2FyZERhdGEiLCJjbGlwYm9hcmREYXRhIiwiX2dldFdpZHRoQmVmb3JlQ3Vyc29yIiwid2lkdGhCZWZvcmVDdXJzb3IiLCJnZXREb3duQ3Vyc29yT2Zmc2V0IiwiaXNSaWdodCIsInNlbGVjdGlvblByb3AiLCJfZ2V0U2VsZWN0aW9uRm9yT2Zmc2V0IiwiaW5kZXhPbk90aGVyTGluZSIsIl9nZXRJbmRleE9uTGluZSIsImdldFVwQ3Vyc29yT2Zmc2V0IiwidGV4dEJlZm9yZUN1cnNvciIsImNoYXJXaWR0aCIsImZvdW5kTWF0Y2giLCJ3aWR0aE9mQ2hhcnNPbkxpbmUiLCJpbmRleE9uTGluZSIsImxlZnRFZGdlIiwicmlnaHRFZGdlIiwib2Zmc2V0RnJvbUxlZnRFZGdlIiwibW92ZUN1cnNvckRvd24iLCJfbW92ZUN1cnNvclVwT3JEb3duIiwibW92ZUN1cnNvclVwIiwibW92ZUN1cnNvcldpdGhTaGlmdCIsIm1vdmVDdXJzb3JXaXRob3V0U2hpZnQiLCJtb3ZlQ3Vyc29yTGVmdCIsIl9tb3ZlQ3Vyc29yTGVmdE9yUmlnaHQiLCJfbW92ZSIsIl9tb3ZlTGVmdCIsIl9tb3ZlUmlnaHQiLCJtb3ZlQ3Vyc29yTGVmdFdpdGhvdXRTaGlmdCIsImNoYW5nZSIsIm1vdmVDdXJzb3JMZWZ0V2l0aFNoaWZ0IiwibW92ZUN1cnNvclJpZ2h0IiwibW92ZUN1cnNvclJpZ2h0V2l0aFNoaWZ0IiwibW92ZUN1cnNvclJpZ2h0V2l0aG91dFNoaWZ0IiwiY2hhbmdlZCIsInJlbW92ZUNoYXJzIiwiaW5zZXJ0Q2hhcnMiLCJfZ2V0U1ZHTGVmdFRvcE9mZnNldHMiLCJ0ZXh0QW5kQmciLCJfZ2V0U1ZHVGV4dEFuZEJnIiwidGV4dFRvcCIsInRleHRMZWZ0IiwiX3dyYXBTVkdUZXh0QW5kQmciLCJsaW5lVG9wIiwidGV4dFNwYW5zIiwidGV4dFRvcE9mZnNldCIsInRleHRMZWZ0T2Zmc2V0IiwiX3NldFNWR1RleHRMaW5lQmciLCJfc2V0U1ZHVGV4dExpbmVUZXh0IiwiX2NyZWF0ZVRleHRDaGFyU3BhbiIsInN0eWxlRGVjbCIsInNob3VsZFVzZVdoaXRlc3BhY2UiLCJzdHlsZVByb3BzIiwiZmlsbFN0eWxlcyIsImR5U3BhbiIsIl9wdXNoVGV4dEJnUmVjdCIsImZpbGxDb2xvciIsIl9nZXRTVkdMaW5lVG9wT2Zmc2V0IiwibGFzdEhlaWdodCIsIlRleHRib3giLCJtaW5XaWR0aCIsImR5bmFtaWNNaW5XaWR0aCIsIl9fY2FjaGVkTGluZXMiLCJfd29yZEpvaW5lcnMiLCJzcGxpdEJ5R3JhcGhlbWUiLCJfc3R5bGVNYXAiLCJfZ2VuZXJhdGVTdHlsZU1hcCIsInRleHRJbmZvIiwicmVhbExpbmVDb3VudCIsInJlYWxMaW5lQ2hhckNvdW50IiwiaXNXcmFwcGluZyIsIm5leHRPZmZzZXQiLCJzaG91bGRMaW1pdCIsIm1hcE5leHRMaW5lIiwiX3dyYXBUZXh0IiwiZGVzaXJlZFdpZHRoIiwid3JhcHBlZCIsIl93cmFwTGluZSIsIl9tZWFzdXJlV29yZCIsIndvcmQiLCJjaGFyT2Zmc2V0IiwiX2xpbmUiLCJyZXNlcnZlZFNwYWNlIiwid29yZHMiLCJpbmZpeCIsIndvcmRXaWR0aCIsImluZml4V2lkdGgiLCJsYXJnZXN0V29yZFdpZHRoIiwibGluZUp1c3RTdGFydGVkIiwiYWRkaXRpb25hbFNwYWNlIiwiZ2V0TWluV2lkdGgiLCJsaW5lc1RvS2VlcCIsInNjYWxlU2tld1N0eWxlSGFuZGxlciIsInNjYWxlU3R5bGVIYW5kbGVyIiwib2JqZWN0Q29udHJvbHMiLCJtbCIsIm1yIiwibWIiLCJtdHIiLCJ0ZXh0Qm94Q29udHJvbHMiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZSIsImRpc3BhdGNoRXZlbnQiLCJNb3VzZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsImYiLCJ1c2VyQWdlbnQiLCJzYXZlQXMiLCJIVE1MQW5jaG9yRWxlbWVudCIsIndlYmtpdFVSTCIsIm5hbWUiLCJkb3dubG9hZCIsInJlbCIsImhyZWYiLCJsb2NhdGlvbiIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIm1zU2F2ZU9yT3BlbkJsb2IiLCJhdXRvQm9tIiwiQmxvYiIsInRpdGxlIiwiaW5uZXJUZXh0IiwiSFRNTEVsZW1lbnQiLCJzYWZhcmkiLCJGaWxlUmVhZGVyIiwib25sb2FkZW5kIiwicmVhZEFzRGF0YVVSTCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiY3JlYXRlIiwib3ZlcmxheUJhY2tncm91bmRDb2xvciIsIm92ZXJsYXlPcGFjaXR5Iiwic3Bpbm5lckljb24iLCJzcGlubmVyQ29sb3IiLCJzcGlubmVyU2l6ZSIsIm92ZXJsYXlJRE5hbWUiLCJzcGlubmVySUROYW1lIiwibG9ja1Njcm9sbCIsImNvbnRhaW5lcklEIiwic3Bpbm5lclpJbmRleCIsIm92ZXJsYXlaSW5kZXgiLCJzdHlsZXNoZWV0QmFzZVVSTCIsInNwaW5uZXIiLCJzcGlubmVyU3R5bGVzaGVldFVSTCIsIm51bWJlck9mRW1wdHlEaXZGb3JTcGlubmVyIiwiY29nIiwicGFjbWFuIiwidGltZXIiLCJhZGRTcGlubmVyU3R5bGVzaGVldCIsImdlbmVyYXRlU3Bpbm5lckVsZW1lbnQiLCJvdmVyZmxvdyIsImdlbmVyYXRlQW5kQWRkT3ZlcmxheUVsZW1lbnQiLCJkaXNhYmxlZCIsImluc2VydEFkamFjZW50SFRNTCIsImdlbmVyYXRlRW1wdHlEaXZFbGVtZW50Iiwic2V0U3Bpbm5lclN0eWxlc2hlZXRVUkwiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkpzTG9hZGluZ092ZXJsYXkiLCJfdHlwZW9mIiwidTE2IiwiVWludDE2QXJyYXkiLCJ1MzIiLCJVaW50MzJBcnJheSIsImZsZWIiLCJmZGViIiwiY2xpbSIsImZyZWIiLCJlYiIsIl9hIiwiZmwiLCJyZXZmbCIsIl9iIiwiZmQiLCJyZXZmZCIsInJldiIsImhNYXAiLCJjZCIsImNvIiwibGUiLCJydmIiLCJzdiIsInJfMSIsImZsdCIsImZkdCIsImZsbSIsImZscm0iLCJmZG0iLCJmZHJtIiwiYml0cyIsImJpdHMxNiIsInNoZnQiLCJzbGMiLCJzdWJhcnJheSIsIndiaXRzIiwid2JpdHMxNiIsImhUcmVlIiwiaTAiLCJpMSIsImkyIiwibWF4U3ltIiwibWJ0IiwibG4iLCJkdCIsImxmdCIsImNzdCIsImkyXzEiLCJpMl8yIiwiaTJfMyIsImxjIiwiY2wiLCJjbGkiLCJjbG4iLCJjbHMiLCJjbGVuIiwiY2YiLCJ3ZmJsayIsImRhdCIsIndibGsiLCJmaW5hbCIsInN5bXMiLCJsZiIsImRmIiwibGkiLCJicyIsImRsdCIsIm1sYiIsImRkdCIsIm1kYiIsIl9jIiwibGNsdCIsIm5sYyIsIl9kIiwibGNkdCIsIm5kYyIsImxjZnJlcSIsIl9lIiwibGN0IiwibWxjYiIsIm5sY2MiLCJsbSIsImxsIiwiZG0iLCJkbCIsImZsZW4iLCJmdGxlbiIsImR0bGVuIiwibGxtIiwibGN0cyIsIml0IiwiY2xjdCIsImRlbyIsImV0IiwiZG9wdCIsIm9wdCIsInByZSIsInBvc3QiLCJzdCIsImx2bCIsInBsdmwiLCJsc3QiLCJtc2tfMSIsImhlYWQiLCJiczFfMSIsImJzMl8xIiwiaHNoIiwibGNfMSIsIndpIiwiaHYiLCJpbW9kIiwicGltb2QiLCJyZW0iLCJjaF8xIiwiZGlmIiwibWF4biIsIm1heGQiLCJubCIsIm1tZCIsIm1kIiwidGkiLCJsaW4iLCJkaW4iLCJkZmx0IiwibGV2ZWwiLCJtZW0iLCJ6bGliU3luYyIsImFkbGVyIiwibHYiLCJ6bGgiLCJ3Ynl0ZXMiLCJ1bnpsaWJTeW5jIiwiYnVmIiwic2wiLCJub0J1ZiIsIm5vU3QiLCJjYnVmIiwibmJ1ZiIsImJ0IiwibGJ0IiwiZGJ0IiwidGJ0cyIsImhMaXQiLCJoY0xlbiIsImxkdCIsImNsdCIsImNsYiIsImNsYm1zayIsImNsbSIsImxtcyIsImRtcyIsIm14YSIsInN5bSIsImRzeW0iLCJpbmZsdCIsInpsdiIsImZyb21DaGFyQ29kZSIsIm9rIiwic3Vic3RyIiwiZmVsZHNwYXIiLCJsaWdodHNsYXRlYmx1ZSIsInZpb2xldHJlZCIsImV4YW1wbGUiLCJ0b1JHQiIsImF0b2IiLCJOIiwiTCIsIlMiLCJwcmludCIsIm1vZGlmeSIsIkkiLCJwZXJtIiwiTyIsInByb2Nlc3NPd25lclBhc3N3b3JkIiwiZW5jcnlwdGlvbktleSIsImxzYkZpcnN0V29yZCIsImhleFRvQnl0ZXMiLCJVIiwiRiIsInVuc3Vic2NyaWJlIiwibWVzc2FnZSIsImdldFRvcGljcyIsIm9iamVjdE51bWJlciIsImdTdGF0ZSIsImNvbG9ycyIsImJvdW5kaW5nQm94IiwieFN0ZXAiLCJ5U3RlcCIsInN0cmVhbSIsImNsb25lSW5kZXgiLCJFIiwib3JpZW50YXRpb24iLCJjb21wcmVzcyIsImNvbXByZXNzUGRmIiwiZW5jcnlwdGlvbiIsInVzZXJQYXNzd29yZCIsIm93bmVyUGFzc3dvcmQiLCJ1c2VyUGVybWlzc2lvbnMiLCJ1c2VyVW5pdCIsImZsb2F0UHJlY2lzaW9uIiwiZGVmYXVsdFBhdGhPcGVyYXRpb24iLCJwdXRPbmx5VXNlZEZvbnRzIiwiaW50ZXJuYWwiLCJfX3ByaXZhdGVfXyIsIlB1YlN1YiIsImdldFBkZlZlcnNpb24iLCJzZXRQZGZWZXJzaW9uIiwiYTAiLCJhMyIsImE0IiwiYTUiLCJhNiIsImE3IiwiYTgiLCJhOSIsImExMCIsImIwIiwiYjMiLCJiNCIsImI1IiwiYjYiLCJiNyIsImI4IiwiYjkiLCJiMTAiLCJjMCIsImM1IiwiYzYiLCJjNyIsImM4IiwiYzkiLCJjMTAiLCJsZXR0ZXIiLCJsZWdhbCIsImxlZGdlciIsInRhYmxvaWQiLCJnZXRQYWdlRm9ybWF0cyIsImdldFBhZ2VGb3JtYXQiLCJDT01QQVQiLCJBRFZBTkNFRCIsInNhdmVHcmFwaGljc1N0YXRlIiwiVnQiLCJfdCIsIlJyIiwic2V0Rm9udFNpemUiLCJnZXRGb250U2l6ZSIsInJlc3RvcmVHcmFwaGljc1N0YXRlIiwiY29tYmluZUZvbnRTdHlsZUFuZEZvbnRXZWlnaHQiLCJhZHZhbmNlZEFQSSIsImNvbXBhdEFQSSIsImlzQWR2YW5jZWRBUEkiLCJEIiwicm91bmRUb1ByZWNpc2lvbiIsImhwZiIsIlIiLCJmMiIsIlQiLCJmMyIsInoiLCJIIiwic2V0UHJlY2lzaW9uIiwiVyIsIlYiLCJHIiwiZ2V0RmlsZUlkIiwiWSIsInNldEZpbGVJZCIsIlllIiwiSiIsImNvbnZlcnREYXRlVG9QREZEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJRIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiWCIsImNvbnZlcnRQREZEYXRlVG9EYXRlIiwiSyIsInNldENyZWF0aW9uRGF0ZSIsIloiLCJnZXRDcmVhdGlvbkRhdGUiLCIkIiwicGFkZDIiLCJ0dCIsInBhZGQySGV4IiwicnQiLCJudCIsImF0Iiwib3QiLCJjdCIsInV0IiwiUXQiLCJLdCIsInRlIiwic2V0Q3VzdG9tT3V0cHV0RGVzdGluYXRpb24iLCJodCIsInJlc2V0Q3VzdG9tT3V0cHV0RGVzdGluYXRpb24iLCJmdCIsIndyaXRlIiwiZ2V0QXJyYXlCdWZmZXIiLCJwdCIsImdldFN0YW5kYXJkRm9udHMiLCJ2dCIsIlIyTCIsInNldFIyTCIsImdldFIyTCIsInl0Iiwic2V0Wm9vbU1vZGUiLCJnZXRab29tTW9kZSIsIk50IiwiTHQiLCJzZXRQYWdlTW9kZSIsImdldFBhZ2VNb2RlIiwiQXQiLCJzZXRMYXlvdXRNb2RlIiwiZ2V0TGF5b3V0TW9kZSIsInNldERpc3BsYXlNb2RlIiwieHQiLCJzdWJqZWN0IiwiYXV0aG9yIiwia2V5d29yZHMiLCJjcmVhdG9yIiwiZ2V0RG9jdW1lbnRQcm9wZXJ0eSIsImdldERvY3VtZW50UHJvcGVydGllcyIsInNldERvY3VtZW50UHJvcGVydGllcyIsInNldFByb3BlcnRpZXMiLCJzZXREb2N1bWVudFByb3BlcnR5IiwiU3QiLCJQdCIsImt0IiwiSXQiLCJGdCIsIkN0IiwianQiLCJPdCIsIkJ0IiwiTXQiLCJFdCIsInF0IiwiRHQiLCJSdCIsIlR0IiwiVXQiLCJob3RmaXhlcyIsInp0IiwiSHQiLCJXdCIsIl9tYXRyaXgiLCJzaHgiLCJzeCIsImRlY29tcG9zZSIsInN5Iiwic2h5IiwidHgiLCJ0eSIsInNrZXciLCJpbnZlcnNlZCIsImFwcGx5VG9Qb2ludCIsIkNyIiwiYXBwbHlUb1JlY3RhbmdsZSIsImpyIiwiTWF0cml4IiwiR3QiLCJtYXRyaXhNdWx0IiwiWXQiLCJ1bml0TWF0cml4IiwiaWRlbnRpdHlNYXRyaXgiLCJKdCIsIlNoYWRpbmdQYXR0ZXJuIiwiVGlsaW5nUGF0dGVybiIsImFkZFNoYWRpbmdQYXR0ZXJuIiwiYmVnaW5UaWxpbmdQYXR0ZXJuIiwiQnIiLCJlbmRUaWxpbmdQYXR0ZXJuIiwiWHQiLCJuZXdPYmplY3QiLCJadCIsIm5ld09iamVjdERlZmVycmVkIiwiJHQiLCJuZXdBZGRpdGlvbmFsT2JqZWN0Iiwib2JqSWQiLCJlZSIsImRlY29kZUNvbG9yU3RyaW5nIiwiZW5jb2RlQ29sb3JTdHJpbmciLCJjaDEiLCJjaDIiLCJjaDMiLCJjaDQiLCJwZGZDb2xvclR5cGUiLCJuZSIsImdldEZpbHRlcnMiLCJpZSIsInB1dFN0cmVhbSIsImFscmVhZHlBcHBsaWVkRmlsdGVycyIsImFkZExlbmd0aDEiLCJvYmplY3RJZCIsImVuY3J5cHRvciIsImFkZGl0aW9uYWxLZXlWYWx1ZXMiLCJBUEkiLCJwcm9jZXNzRGF0YUJ5RmlsdGVycyIsInJldmVyc2VDaGFpbiIsImFlIiwicHV0UGFnZSIsImNvbnRlbnRzT2JqSWQiLCJyb290RGljdGlvbmFyeU9iaklkIiwicmVzb3VyY2VEaWN0aW9uYXJ5T2JqSWQiLCJtZWRpYUJveCIsImJvdHRvbUxlZnRYIiwiYm90dG9tTGVmdFkiLCJ0b3BSaWdodFgiLCJ0b3BSaWdodFkiLCJjcm9wQm94IiwiYmxlZWRCb3giLCJ0cmltQm94IiwiYXJ0Qm94IiwicGFnZUNvbnRleHQiLCJwYWdlTnVtYmVyIiwicGFnZSIsIm9lIiwicHV0UGFnZXMiLCJzZSIsImlzQWxyZWFkeVB1dHRlZCIsInBvc3RTY3JpcHROYW1lIiwiY2UiLCJ1ZSIsInBhZ2VzIiwiaGUiLCJmZSIsImRlIiwicmVzb3VyY2VzT2lkIiwib2JqZWN0T2lkIiwicGUiLCJnZSIsIm1lIiwidmUiLCJiZSIsIm9pZCIsInRvSGV4U3RyaW5nIiwieWUiLCJ3ZSIsIk5lIiwiTGUiLCJBZSIsInhlIiwiTUFYX1NBRkVfSU5URUdFUiIsIlNlIiwiZm9udE5hbWUiLCJQZSIsImlzU3RhbmRhcmRGb250IiwibWV0YWRhdGEiLCJrZSIsImZvbnRzIiwiZGljdGlvbmFyeSIsIkllIiwiZm9vIiwic3RhY2siLCJhbGVydCIsImJhciIsIkZlIiwic291cmNlRW5jb2RpbmciLCJvdXRwdXRFbmNvZGluZyIsImF1dG9lbmNvZGUiLCJjb2RlUGFnZXMiLCJub0JPTSIsIkNlIiwicGRmRXNjYXBlIiwiamUiLCJiZWdpblBhZ2UiLCJNZSIsIk9lIiwicHIiLCJmciIsIkxyIiwia3IiLCJJciIsIkJlIiwic2V0UGFnZSIsIkVlIiwiZ2V0TnVtYmVyT2ZQYWdlcyIsInFlIiwiZGlzYWJsZVdhcm5pbmciLCJub0ZhbGxiYWNrIiwidGltZXMiLCJub3JtYWwiLCJEZSIsInB1dEluZm8iLCJSZSIsInB1dENhdGFsb2ciLCJUZSIsInB1dFRyYWlsZXIiLCJVZSIsInB1dEhlYWRlciIsInplIiwicHV0WFJlZiIsIkhlIiwiYnVpbGREb2N1bWVudCIsIldlIiwiZ2V0QmxvYiIsIlZlIiwiZmlsZW5hbWUiLCJwZGZPYmplY3RVcmwiLCJwZGZKc1VybCIsImNvbnRlbnRXaW5kb3ciLCJQREZWaWV3ZXJBcHBsaWNhdGlvbiIsIkdlIiwiSmUiLCJYZSIsImdldFBhZ2VJbmZvIiwiS2UiLCJnZXRQYWdlSW5mb0J5T2JqSWQiLCJaZSIsImdldEN1cnJlbnRQYWdlSW5mbyIsImFkZFBhZ2UiLCJpbnNlcnRQYWdlIiwibW92ZVBhZ2UiLCJkZWxldGVQYWdlIiwic2NvcGUiLCJmbGFncyIsImxpbmVIZWlnaHRGYWN0b3IiLCJsciIsInNjYWxlRmFjdG9yIiwiVGFiTGVuIiwic3BsaXRUZXh0VG9TaXplIiwibXV0ZXgiLCJhY3RpdmVGb250S2V5IiwiYWN0aXZlRm9udFNpemUiLCJyb3RhdGlvbkRpcmVjdGlvbiIsImNoYXJTcGFjZSIsIl9yIiwic2V0Q2hhclNwYWNlIiwiZ2V0Q2hhclNwYWNlIiwiaG9yaXpvbnRhbFNjYWxlIiwibGFuZyIsInJlbmRlcmluZ01vZGUiLCJ1c2VkUmVuZGVyaW5nTW9kZSIsInBhZ2VTaXplIiwiYXNzaWduIiwiZ2V0U3RyaW5nVW5pdFdpZHRoIiwiZG9LZXJuaW5nIiwieXIiLCJpc0hleCIsInhyIiwiJGUiLCJjbGlwIiwiY2xpcEV2ZW5PZGQiLCJkaXNjYXJkUGF0aCIsIlFlIiwiaXNWYWxpZFN0eWxlIiwic2V0RGVmYXVsdFBhdGhPcGVyYXRpb24iLCJnZXRTdHlsZSIsImVyIiwiY2xvc2UiLCJyciIsImZpbGxFdmVuT2RkIiwiZmlsbFN0cm9rZSIsImZpbGxTdHJva2VFdmVuT2RkIiwibnIiLCJpciIsIm9yIiwic2V0R1N0YXRlIiwic3IiLCJjciIsInVyIiwiY3VydmVUbyIsIm9wIiwidHJpYW5nbGUiLCJyb3VuZGVkUmVjdCIsImVsbGlwc2UiLCJzZXRGb250IiwiaHIiLCJnZXRGb250IiwiZ2V0Rm9udExpc3QiLCJhZGRGb250IiwiZHIiLCJzZXRMaW5lV2lkdGgiLCJzZXRMaW5lRGFzaFBhdHRlcm4iLCJnciIsImdldExpbmVIZWlnaHQiLCJzZXRMaW5lSGVpZ2h0RmFjdG9yIiwidnIiLCJnZXRMaW5lSGVpZ2h0RmFjdG9yIiwiZ2V0SG9yaXpvbnRhbENvb3JkaW5hdGUiLCJnZXRWZXJ0aWNhbENvb3JkaW5hdGUiLCJ3ciIsImdldEhvcml6b250YWxDb29yZGluYXRlU3RyaW5nIiwiTnIiLCJnZXRWZXJ0aWNhbENvb3JkaW5hdGVTdHJpbmciLCJzdHJva2VDb2xvciIsImdldFN0cm9rZUNvbG9yIiwiZ2V0RHJhd0NvbG9yIiwic2V0U3Ryb2tlQ29sb3IiLCJzZXREcmF3Q29sb3IiLCJBciIsImdldEZpbGxDb2xvciIsInNldEZpbGxDb2xvciIsInRleHRDb2xvciIsIlNyIiwiZ2V0VGV4dENvbG9yIiwic2V0VGV4dENvbG9yIiwiUHIiLCJDYXBKb2luU3R5bGVzIiwiYnV0dCIsImJ1dCIsIm1pdGVyIiwicm91bmRlZCIsInByb2plY3RpbmciLCJwcm9qZWN0Iiwic3F1YXJlIiwiYmV2ZWwiLCJzZXRMaW5lQ2FwIiwic2V0TGluZUpvaW4iLCJzZXRMaW5lTWl0ZXJMaW1pdCIsInNldE1pdGVyTGltaXQiLCJHU3RhdGUiLCJGciIsImVxdWFscyIsImFkZEdTdGF0ZSIsInNldEN1cnJlbnRUcmFuc2Zvcm1hdGlvbk1hdHJpeCIsImNvbW1lbnQiLCJPciIsImN1cnJlbnRQYWdlIiwicGFnZXNDb250ZXh0IiwicXIiLCJvdXRwdXREZXN0aW5hdGlvbiIsIkRyIiwiVHIiLCJNciIsIkVyIiwiYmVnaW5Gb3JtT2JqZWN0IiwiZW5kRm9ybU9iamVjdCIsImRvRm9ybU9iamVjdCIsImdldEZvcm1PYmplY3QiLCJyZXR1cm5Qcm9taXNlIiwidW5sb2FkIiwiZXZlbnRzIiwiZ2V0UGFnZVdpZHRoIiwic2V0UGFnZVdpZHRoIiwiZ2V0UGFnZUhlaWdodCIsInNldFBhZ2VIZWlnaHQiLCJnZXRDb29yZGluYXRlU3RyaW5nIiwiY29sbGVjdGlvbnMiLCJuZXdPYmplY3REZWZlcnJlZEJlZ2luIiwiZW5jcnlwdGlvbk9wdGlvbnMiLCJnZXRFbmNyeXB0b3IiLCJnZXRQREZWZXJzaW9uIiwiUmVjdGFuZ2xlIiwiaGFzSG90Zml4IiwiX19hY3JvZm9ybV9fIiwiQkJveCIsInNldEJpdCIsImNsZWFyQml0IiwiZ2V0Qml0IiwiZ2V0Qml0Rm9yUGRmIiwic2V0Qml0Rm9yUGRmIiwiY2xlYXJCaXRGb3JQZGYiLCJjYWxjdWxhdGVDb29yZGluYXRlcyIsImxvd2VyTGVmdF9YIiwibG93ZXJMZWZ0X1kiLCJ1cHBlclJpZ2h0X1giLCJ1cHBlclJpZ2h0X1kiLCJhcHBlYXJhbmNlU3RyZWFtQ29udGVudCIsIkRWIiwiX1YiLCJtYXhGb250U2l6ZSIsIm11bHRpbGluZSIsImZpZWxkcyIsInhGb3JtcyIsImFjcm9Gb3JtRGljdGlvbmFyeVJvb3QiLCJwcmludGVkT3V0IiwiaXNJbml0aWFsaXplZCIsImFubm90YXRpb25zIiwiYXJyYXlUb1BkZkFycmF5IiwiX29iaklkIiwiX3Njb3BlIiwiZ2V0S2V5VmFsdWVMaXN0Rm9yU3RyZWFtIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIkJvb2xlYW4iLCJGaWVsZE51bSIsImhhc0Fubm90YXRpb24iLCJGZiIsIkZUIiwiZ2V0T3B0aW9ucyIsImFkZE9wdGlvbiIsInJlbW92ZU9wdGlvbiIsImNvbWJvIiwiaGFzQXBwZWFyYW5jZVN0cmVhbSIsImVkaXQiLCJDQSIsInB1c2hCdXR0b24iLCJyYWRpbyIsImNhcHRpb24iLCJhcHBlYXJhbmNlU3RhdGUiLCJfQXBwZWFyYW5jZVR5cGUiLCJSYWRpb0J1dHRvbiIsImNyZWF0ZUFwcGVhcmFuY2VTdHJlYW0iLCJvcHRpb25OYW1lIiwic2V0QXBwZWFyYW5jZSIsIktpZHMiLCJnZXRDQSIsImNyZWF0ZU9wdGlvbiIsIlBhcmVudCIsIkNoZWNrQm94IiwiaXNJbnRlZ2VyIiwicGFzc3dvcmQiLCJPbiIsIlllc05vcm1hbCIsIlllc1B1c2hEb3duIiwiT2ZmIiwiT2ZmUHVzaERvd24iLCJCZXppZXJfQyIsIkNyb3NzIiwiY2FsY3VsYXRlQ3Jvc3MiLCJ4NCIsImNyZWF0ZURlZmF1bHRBcHBlYXJhbmNlU3RyZWFtIiwiYWRkRmllbGQiLCJhY3JvZm9ybVBsdWdpbiIsIl9ldmVudElEIiwiRmllbGRzIiwiREEiLCJBY3JvRm9ybUNob2ljZUZpZWxkIiwiQWNyb0Zvcm1MaXN0Qm94IiwiQWNyb0Zvcm1Db21ib0JveCIsIkFjcm9Gb3JtRWRpdEJveCIsIkFjcm9Gb3JtQnV0dG9uIiwiQWNyb0Zvcm1QdXNoQnV0dG9uIiwiQWNyb0Zvcm1SYWRpb0J1dHRvbiIsIkFjcm9Gb3JtQ2hlY2tCb3giLCJBY3JvRm9ybVRleHRGaWVsZCIsIkFjcm9Gb3JtUGFzc3dvcmRGaWVsZCIsIkFjcm9Gb3JtQXBwZWFyYW5jZSIsIkFjcm9Gb3JtIiwiQ2hvaWNlRmllbGQiLCJMaXN0Qm94IiwiQ29tYm9Cb3giLCJFZGl0Qm94IiwiQnV0dG9uIiwiUHVzaEJ1dHRvbiIsIlRleHRGaWVsZCIsIlBhc3N3b3JkRmllbGQiLCJBcHBlYXJhbmNlIiwiX19hZGRpbWFnZV9fIiwiUE5HIiwiVElGRiIsIkpQRUciLCJKUEVHMjAwMCIsIkdJRjg3YSIsIkdJRjg5YSIsIldFQlAiLCJCTVAiLCJnZXRJbWFnZUZpbGVUeXBlQnlJbWFnZURhdGEiLCJjb2xvclNwYWNlIiwiSU5ERVhFRCIsInBhbGV0dGUiLCJzTWFzayIsIkRFVklDRV9DTVlLIiwiYml0c1BlckNvbXBvbmVudCIsImRlY29kZVBhcmFtZXRlcnMiLCJ0cmFuc3BhcmVuY3kiLCJwcmVkaWN0b3IiLCJhZGRJbWFnZV9pbWFnZXMiLCJsb2FkRmlsZSIsImFsaWFzIiwiY29sb3Jfc3BhY2VzIiwiREVWSUNFX1JHQiIsIkRFVklDRV9HUkFZIiwiQ0FMX0dSRVkiLCJDQUxfUkdCIiwiTEFCIiwiSUNDX0JBU0VEIiwiUEFUVEVSTiIsIlNFUEFSQVRJT04iLCJERVZJQ0VfTiIsImRlY29kZSIsIkRDVF9ERUNPREUiLCJGTEFURV9ERUNPREUiLCJMWldfREVDT0RFIiwiSlBYX0RFQ09ERSIsIkpCSUcyX0RFQ09ERSIsIkFTQ0lJODVfREVDT0RFIiwiQVNDSUlfSEVYX0RFQ09ERSIsIlJVTl9MRU5HVEhfREVDT0RFIiwiQ0NJVFRfRkFYX0RFQ09ERSIsImltYWdlX2NvbXByZXNzaW9uIiwiTk9ORSIsIkZBU1QiLCJNRURJVU0iLCJTTE9XIiwic0hhc2hDb2RlIiwiYnl0ZUxlbmd0aCIsInZhbGlkYXRlU3RyaW5nQXNCYXNlNjQiLCJleHRyYWN0SW1hZ2VGcm9tRGF0YVVybCIsIm1pbWVUeXBlIiwiY2hhcnNldCIsInN1cHBvcnRzQXJyYXlCdWZmZXIiLCJpc0FycmF5QnVmZmVyIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImJpbmFyeVN0cmluZ1RvVWludDhBcnJheSIsImFycmF5QnVmZmVyVG9CaW5hcnlTdHJpbmciLCJhZGRJbWFnZSIsImNvbXByZXNzaW9uIiwiY29udmVydEJhc2U2NFRvQmluYXJ5U3RyaW5nIiwiZ2V0SW1hZ2VQcm9wZXJ0aWVzIiwiZmlsZVR5cGUiLCJjb250ZW50cyIsIl9uYW1lTWFwIiwiZmluYWxCb3VuZHMiLCJtYWdGYWN0b3IiLCJjcmVhdGVBbm5vdGF0aW9uIiwibGluayIsInRleHRXaXRoTGluayIsImdldFRleHRXaWR0aCIsIl9fYXJhYmljUGFyc2VyX18iLCJpc0luQXJhYmljU3Vic3RpdHV0aW9uQSIsImlzQXJhYmljTGV0dGVyIiwiaXNBcmFiaWNFbmRMZXR0ZXIiLCJpc0FyYWJpY0FsZkxldHRlciIsImFyYWJpY0xldHRlckhhc0lzb2xhdGVkRm9ybSIsImFyYWJpY0xldHRlckhhc0ZpbmFsRm9ybSIsImFyYWJpY0xldHRlckhhc0luaXRpYWxGb3JtIiwiYXJhYmljTGV0dGVySGFzTWVkaWFsRm9ybSIsInJlc29sdmVMaWdhdHVyZXMiLCJpc0FyYWJpY0RpYWNyaXRpYyIsImdldENvcnJlY3RGb3JtIiwicHJvY2Vzc0FyYWJpYyIsImF1dG9QcmludCIsInZhcmlhbnQiLCJhZGRKUyIsInBhZ2VXcmFwWEVuYWJsZWQiLCJwYWdlV3JhcFgiLCJwYWdlV3JhcFlFbmFibGVkIiwicGFnZVdyYXBZIiwicGRmIiwiY29udGV4dDJkIiwiX19jZWxsX18iLCJoZWFkZXJGdW5jdGlvbiIsIm1hcmdpbnMiLCJsYXN0Q2VsbCIsImxpbmVOdW1iZXIiLCJzZXRIZWFkZXJGdW5jdGlvbiIsImdldFRleHREaW1lbnNpb25zIiwiY2VsbEFkZFBhZ2UiLCJjZWxsIiwidGFibGVIZWFkZXJSb3ciLCJwcmludEhlYWRlcnMiLCJwcmludEhlYWRlclJvdyIsInRhYmxlIiwiYXV0b1NpemUiLCJjc3MiLCJoZWFkZXJCYWNrZ3JvdW5kQ29sb3IiLCJoZWFkZXJUZXh0Q29sb3IiLCJ0YWJsZV9mb250X3NpemUiLCJwcm9tcHQiLCJzZXRUYWJsZUhlYWRlclJvdyIsInJvd1N0YXJ0IiwiY2VsbFN0YXJ0IiwiY29sIiwidGFibGVfeCIsInRhYmxlX3kiLCJpdGFsaWMiLCJvYmxpcXVlIiwic3RyZXRjaCIsInJlZiIsImZpeGVkIiwibW9ub3NwYWNlIiwidGVybWluYWwiLCJjdXJzaXZlIiwiZmFudGFzeSIsInNlcmlmIiwiaWNvbiIsIm1lbnUiLCJ0cmltTGVmdCIsImlzU3Ryb2tlVHJhbnNwYXJlbnQiLCJzdHJva2VPcGFjaXR5IiwiaXNGaWxsVHJhbnNwYXJlbnQiLCJmaWxsT3BhY2l0eSIsImNsaXBfcGF0aCIsImN1cnJlbnRQb2ludCIsImxpbmVEYXNoIiwibWFyZ2luIiwicHJldlBhZ2VMYXN0RWxlbU9mZnNldCIsImlnbm9yZUNsZWFyUmVjdCIsImZvbnRGYWNlcyIsImRlZmF1bHRGb250RmFtaWx5IiwiZ2VuZXJpY0ZvbnRGYW1pbGllcyIsImFyaWFsIiwiQXJpYWwiLCJ2ZXJkYW5hIiwiVmVyZGFuYSIsImhlbHZldGljYSIsIkhlbHZldGljYSIsImdldExpbmVEYXNoIiwiaXNJZGVudGl0eSIsImNvdW50ZXJjbG9ja3dpc2UiLCJhcmNUbyIsImN0eFN0YWNrIiwiaXNDYW52YXNHcmFkaWVudCIsImdldENvbG9yIiwiYXV0b1BhZ2luZyIsInBvc1kiLCJwb3NYIiwiZGVsdGFzIiwieTQiLCJwcmV2TGluZURhc2giLCJvdmVycmlkZU1pbWVUeXBlIiwicmVzcG9uc2VUZXh0IiwibG9hZEltYWdlRmlsZSIsImh0bWwyY2FudmFzIiwiRE9NUHVyaWZ5IiwiaW5uZXJIVE1MIiwiZG9tcHVyaWZ5Iiwic2FuaXRpemUiLCJjb252ZXJ0IiwidGVtcGxhdGUiLCJzZXRQcm9ncmVzcyIsIl9fcHJvdG9fXyIsInByb2dyZXNzIiwidmFsIiwiZW5hYmxlTGlua3MiLCJqc1BERiIsInRvQ29udGFpbmVyIiwidG9DYW52YXMiLCJ0b0ltZyIsInRvUGRmIiwidGhlbkxpc3QiLCJzZXRQYWdlU2l6ZSIsIndpbmRvd1dpZHRoIiwic2Nyb2xsV2lkdGgiLCJvZmZzZXRXaWR0aCIsIm5leHRTaWJsaW5nIiwiamF2YXNjcmlwdEVuYWJsZWQiLCJzY3JvbGxIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJ6SW5kZXgiLCJib3JkZXIiLCJmbG9hdCIsIm9ucmVuZGVyZWQiLCJ0b0NvbnRleHQyZCIsImFzeW5jIiwiYWxsb3dUYWludCIsInNjcm9sbFgiLCJzY3JvbGxZIiwiaW1hZ2VUaW1lb3V0IiwibG9nZ2luZyIsInByb3h5IiwicmVtb3ZlQ29udGFpbmVyIiwiZm9yZWlnbk9iamVjdFJlbmRlcmluZyIsInVzZUNPUlMiLCJ3aW5kb3dIZWlnaHQiLCJvdXRwdXRJbWciLCJvdXRwdXRQZGYiLCJkb0NhbGxiYWNrIiwic2V0TWFyZ2luIiwiZ2V0UGFnZVNpemUiLCJpbm5lciIsInJhdGlvIiwidXBkYXRlUHJvZ3Jlc3MiLCJ0aGVuQ29yZSIsInRoZW5FeHRlcm5hbCIsImNhdGNoRXh0ZXJuYWwiLCJ1c2luZyIsImV4cG9ydCIsInJ1biIsImh0bWwiLCJ3b3JrZXIiLCJvdXRsaW5lIiwiY3JlYXRlTmFtZWREZXN0aW5hdGlvbnMiLCJtYWtlUmVmIiwiZ2VuSWRzX3IiLCJyZW5kZXJSb290IiwicmVuZGVySXRlbXMiLCJvYmpTdGFydCIsImNvdW50X3IiLCJjb3VudCIsIm9iakVuZCIsIm1ha2VTdHJpbmciLCJwcm9jZXNzSlBFRyIsIm51bWNvbXBvbmVudHMiLCJyZWFkVUludDMyIiwiY29sb3JUeXBlIiwiY29tcHJlc3Npb25NZXRob2QiLCJmaWx0ZXJNZXRob2QiLCJpbnRlcmxhY2VNZXRob2QiLCJudW1GcmFtZXMiLCJudW1QbGF5cyIsImZyYW1lcyIsInJlYWQiLCJ4T2Zmc2V0IiwieU9mZnNldCIsInJlYWRVSW50MTYiLCJkaXNwb3NlT3AiLCJibGVuZE9wIiwiaW5kZXhlZCIsImdyYXlzY2FsZSIsInJnYiIsImhhc0FscGhhQ2hhbm5lbCIsInBpeGVsQml0bGVuZ3RoIiwiZGVjb2RlUGl4ZWxzIiwiZGVjb2RlUGFsZXR0ZSIsImNvcHlUb0ltYWdlRGF0YSIsIl9kZWNvZGVkUGFsZXR0ZSIsImRlY29kZUZyYW1lcyIsInJlbmRlckZyYW1lIiwiX3RpbWVvdXQiLCJzdG9wQW5pbWF0aW9uIiwiX3BuZyIsImhhc19sb2NhbF9wYWxldHRlIiwicGFsZXR0ZV9vZmZzZXQiLCJwYWxldHRlX3NpemUiLCJkYXRhX29mZnNldCIsImRhdGFfbGVuZ3RoIiwidHJhbnNwYXJlbnRfaW5kZXgiLCJpbnRlcmxhY2VkIiwiZGlzcG9zYWwiLCJsb29wQ291bnQiLCJmcmFtZUluZm8iLCJkZWNvZGVBbmRCbGl0RnJhbWVCR1JBIiwiZGVjb2RlQW5kQmxpdEZyYW1lUkdCQSIsImVuY29kZSIsImRpc3BsYXlOYW1lIiwiZGF0YXYiLCJEYXRhVmlldyIsImlzX3dpdGhfYWxwaGEiLCJib3R0b21fdXAiLCJmbGFnIiwicGFyc2VIZWFkZXIiLCJwYXJzZUJHUiIsImpjIiwiUWIiLCJxYiIsIm5kIiwicGQiLCJDYSIsIkthIiwib2EiLCJwYSIsIkpkIiwiWWMiLCJaYyIsIlNiIiwiUmEiLCJiYiIsIlVyIiwienIiLCJIciIsIk1iIiwiWGEiLCJ1ZCIsImhkIiwiamQiLCJFYSIsIkhuIiwiV24iLCJWbiIsIkduIiwiZmIiLCJlYSIsIlRjIiwiRWQiLCJDZCIsIkZkIiwibGIiLCJEYiIsIkFiIiwiZmEiLCJSZCIsImtiIiwic2QiLCJQZCIsIlFkIiwiSWQiLCJNZCIsImhiIiwiaWIiLCJkYSIsImJkIiwiRGEiLCJTZCIsIm9iIiwiYmEiLCJrYSIsInZpIiwiY2MiLCJkYyIsIk1jIiwiTmMiLCJlYyIsImZjIiwiUmMiLCJUbiIsIktiIiwiU24iLCJBbiIsIm1hIiwicW4iLCJSbiIsIlVuIiwibWVtb3J5IiwiSWIiLCJKYiIsIk5kIiwiT2EiLCJDaSIsImppIiwiU2kiLCJNaSIsIkJpIiwiT2kiLCJQaSIsImtpIiwiRWkiLCJxaSIsIkRjIiwiJG4iLCJ4YyIsInZjIiwiV2IiLCJZYSIsImFiIiwiVGEiLCJVYSIsImdjIiwibmMiLCJoYyIsIkdyIiwiV3IiLCJWciIsIlpyIiwiJHIiLCJZciIsIkJhIiwidmEiLCJjYSIsIk1hIiwiRW4iLCJRciIsInRuIiwiRG4iLCJubiIsImVuIiwieG4iLCJ6biIsInJuIiwicWQiLCJyZCIsIm1pIiwiWHIiLCJQYiIsIldhIiwid2MiLCJ3ZCIsInhkIiwidmIiLCJ5YyIsInhiIiwiZ2kiLCJWUDhMTWFwQ29sb3IzMmIiLCJKciIsIlZQOExNYXBDb2xvcjhiIiwiS3IiLCJPYyIsIlFuIiwiWG4iLCJabiIsIkpuIiwiWW4iLCJLbiIsInBpIiwiX24iLCJ5ZCIsInRkIiwiUmIiLCJLZCIsIkxkIiwiVWQiLCJUZCIsIkZiIiwiQmIiLCJDYiIsIlpiIiwiTGIiLCJZYiIsImpiIiwiV2MiLCJYYyIsIlBjIiwid2IiLCJUYiIsInpkIiwidmQiLCJvZCIsImxkIiwiTGEiLCJkZCIsInRjIiwiTmEiLCJsYSIsIlNjIiwiRWIiLCJRYyIsImlhIiwiYWQiLCJaYSIsIk9iIiwiJGIiLCJBZCIsIkdjIiwiSGMiLCJEZCIsInVjIiwiTmIiLCJ3YSIsInlhIiwiYWEiLCJzYyIsIk9kIiwiS2MiLCJlZCIsIlFhIiwiSWMiLCIkYyIsIkFhIiwiWGIiLCJWYSIsIkhiIiwiemIiLCJ5YiIsIlViIiwiemEiLCJKYyIsInBiIiwiUGEiLCJCZCIsImtjIiwiQWMiLCJCYyIsInpjIiwiR2QiLCJIZCIsInJiIiwic2IiLCJvYyIsInBjIiwic2EiLCJxYSIsInJhIiwiSGEiLCJJYSIsIkVjIiwiamEiLCJWYiIsIkZjIiwiZ2QiLCJnYSIsIkZhIiwiQ2MiLCJxYyIsIkdiIiwiVWMiLCJuYiIsInJjIiwiR2EiLCJWYyIsInB1dCIsImFjIiwiYmMiLCJoYSIsIm5pIiwiZWkiLCJyaSIsInVpIiwic2kiLCJoaSIsImlpIiwiYWkiLCJSaSIsIlVpIiwiVmQiLCJDbiIsIlBuIiwia24iLCJJbiIsIkZuIiwiYW4iLCJjbiIsInVuIiwiaG4iLCJzbiIsImRuIiwicG4iLCJnbiIsIm1uIiwidm4iLCJibiIsInluIiwid24iLCJObiIsIkxuIiwiZmkiLCJkaSIsImNpIiwib2kiLCJCbiIsImpuIiwiTW4iLCJrZCIsIm5hIiwieGEiLCJnYiIsIkphIiwiU2EiLCJMYyIsIiRhIiwiaWMiLCJtYyIsImJpIiwieWkiLCJOaSIsIkxpIiwiQWkiLCJGaSIsIklpIiwiRGkiLCJ6aSIsIlByZWRpY3RvcjAiLCJQcmVkaWN0b3IxIiwiUHJlZGljdG9yMiIsIlByZWRpY3RvcjMiLCJQcmVkaWN0b3I0IiwiUHJlZGljdG9yNSIsIlByZWRpY3RvcjYiLCJQcmVkaWN0b3I3IiwiUHJlZGljdG9yOCIsIlByZWRpY3RvcjkiLCJQcmVkaWN0b3IxMCIsIlByZWRpY3RvcjExIiwiUHJlZGljdG9yMTIiLCJQcmVkaWN0b3IxMyIsIlByZWRpY3RvckFkZDAiLCJQcmVkaWN0b3JBZGQxIiwiUHJlZGljdG9yQWRkMiIsIkNvbG9ySW5kZXhJbnZlcnNlVHJhbnNmb3JtIiwiTWFwQVJHQiIsIlZQOExDb2xvckluZGV4SW52ZXJzZVRyYW5zZm9ybUFscGhhIiwiTWFwQWxwaGEiLCJWUDhMUHJlZGljdG9yc0FkZCIsIlZQOExQcmVkaWN0b3JzIiwiVlA4TFByZWRpY3RvcnNBZGRfQyIsIlZQOExQcmVkaWN0b3JzX0MiLCJVcHNhbXBsZVJnYkxpbmVQYWlyIiwiVXBzYW1wbGVCZ3JMaW5lUGFpciIsIlVwc2FtcGxlUmdiYUxpbmVQYWlyIiwiVXBzYW1wbGVCZ3JhTGluZVBhaXIiLCJVcHNhbXBsZUFyZ2JMaW5lUGFpciIsIlVwc2FtcGxlUmdiYTQ0NDRMaW5lUGFpciIsIlVwc2FtcGxlUmdiNTY1TGluZVBhaXIiLCJUaSIsIldlYlBEZWNvZGVSR0JBIiwic3JjX29mZiIsInNyY19zaXplIiwiaGVhZGVyIiwiZmVhdHVyZV9mbGFncyIsImNhbnZhc193aWR0aCIsImNhbnZhc19oZWlnaHQiLCJiZ2NvbG9yIiwibG9vcF9jb3VudCIsIm9mZnNldF94Iiwib2Zmc2V0X3kiLCJibGVuZCIsInJnYmFvdXRwdXQiLCJkYXRhdXJsIiwibG9vcF9jb3VudGVyIiwicmdiYSIsImltZ3dpZHRoIiwiaW1naGVpZ2h0IiwicHJvY2Vzc1BORyIsInByb2Nlc3NHSUY4OUEiLCJwcm9jZXNzR0lGODdBIiwiZmlsZVNpemUiLCJnZXRVaW50MzIiLCJyZXNlcnZlZCIsImhlYWRlclNpemUiLCJnZXRJbnQzMiIsInBsYW5lcyIsImdldFVpbnQxNiIsImJpdFBQIiwicmF3U2l6ZSIsImltcG9ydGFudENvbG9ycyIsImdldFVpbnQ4IiwicXVhZCIsImJpdDEiLCJiaXQ0IiwiYml0OCIsImJpdDE1IiwiYml0MTYiLCJiaXQyNCIsImJpdDMyIiwiZ2V0RGF0YSIsInByb2Nlc3NCTVAiLCJwcm9jZXNzV0VCUCIsInByb2Nlc3NSR0JBIiwic2V0TGFuZ3VhZ2UiLCJsYW5ndWFnZVNldHRpbmdzIiwiaXNTdWJzY3JpYmVkIiwiYWYiLCJzcSIsImh5IiwiYXMiLCJhc3QiLCJheiIsImV1IiwiYmciLCJteSIsImNoIiwiemgiLCJjdiIsImNzIiwiZW8iLCJmbyIsImZqIiwiZnVyIiwiZ3UiLCJodSIsImlzIiwiaXUiLCJrcyIsImtrIiwia20iLCJreSIsInRsaCIsImtvIiwibWsiLCJtcyIsIm1vIiwibnYiLCJuZyIsIm5vIiwib20iLCJxdSIsInJtIiwicm8iLCJydSIsInN6Iiwic2ciLCJzayIsInNvIiwidGlnIiwidHMiLCJ0ayIsInVrIiwiaHNiIiwidm8iLCJ4aCIsInp1IiwibGFuZ3VhZ2VDb2RlIiwiZ2V0Q2hhcldpZHRoc0FycmF5Iiwid2lkdGhzIiwiVW5pY29kZSIsImZvZiIsImtlcm5pbmciLCJ3aWR0aE9mU3RyaW5nIiwid2lkdGhPZkdseXBoIiwiY2hhcmFjdGVyVG9HbHlwaCIsInRleHRJbmRlbnQiLCJsaW5lSW5kZW50IiwiX19mb250bWV0cmljc19fIiwidW5jb21wcmVzcyIsIldpbkFuc2lFbmNvZGluZyIsIkNvdXJpZXIiLCJaYXBmRGluZ2JhdHMiLCJleGlzdHNGaWxlSW5WRlMiLCJnZXRGaWxlRnJvbVZGUyIsIlRURkZvbnQiLCJnbHlJZHNVc2VkIiwiY2FudmciLCJhZGRTdmdBc0ltYWdlIiwiaWdub3JlTW91c2UiLCJpZ25vcmVBbmltYXRpb24iLCJpZ25vcmVEaW1lbnNpb25zIiwiZnJvbVN0cmluZyIsInB1dFRvdGFsUGFnZXMiLCJwZGZFc2NhcGUxNiIsInZpZXdlclByZWZlcmVuY2VzIiwiSGlkZVRvb2xiYXIiLCJkZWZhdWx0VmFsdWUiLCJleHBsaWNpdFNldCIsInZhbHVlU2V0IiwicGRmVmVyc2lvbiIsIkhpZGVNZW51YmFyIiwiSGlkZVdpbmRvd1VJIiwiRml0V2luZG93IiwiQ2VudGVyV2luZG93IiwiRGlzcGxheURvY1RpdGxlIiwiTm9uRnVsbFNjcmVlblBhZ2VNb2RlIiwiRGlyZWN0aW9uIiwiVmlld0FyZWEiLCJWaWV3Q2xpcCIsIlByaW50QXJlYSIsIlByaW50Q2xpcCIsIlByaW50U2NhbGluZyIsIkR1cGxleCIsIlBpY2tUcmF5QnlQREZTaXplIiwiUHJpbnRQYWdlUmFuZ2UiLCJOdW1Db3BpZXMiLCJ2aWV3ZXJwcmVmZXJlbmNlcyIsImNvbmZpZ3VyYXRpb24iLCJfX21ldGFkYXRhX18iLCJuYW1lc3BhY2V1cmkiLCJtZXRhZGF0YV9vYmplY3RfbnVtYmVyIiwiYWRkTWV0YWRhdGEiLCJ0b1VuaWNvZGUiLCJzdWJzZXQiLCJQREZPYmplY3QiLCJzdGVtViIsIml0YWxpY0FuZ2xlIiwiYXNjZW5kZXIiLCJkZWNlbmRlciIsImNhcEhlaWdodCIsInJhd0RhdGEiLCJobXR4IiwidW5pdHNQZXJFbSIsImNtYXAiLCJ1bmljb2RlIiwiY29kZU1hcCIsInZGUyIsImFkZEZpbGVUb1ZGUyIsIl9fYmlkaUVuZ2luZV9fIiwiRU4iLCJBTiIsImhpTGV2ZWwiLCJkb0JpZGlSZW9yZGVyIiwiaXNJbnB1dFZpc3VhbCIsImlzT3V0cHV0VmlzdWFsIiwiaXNJbnB1dFJ0bCIsImlzT3V0cHV0UnRsIiwiaXNTeW1tZXRyaWNTd2FwcGluZyIsInJlYWRTdHJpbmciLCJyZWdpc3RlclRURiIsImRpcmVjdG9yeSIsImhoZWEiLCJtYXhwIiwib3MyIiwibG9jYSIsImdseWYiLCJleGlzdHMiLCJsaW5lR2FwIiwieE1pbiIsInlNaW4iLCJ4TWF4IiwieU1heCIsIml0YWxpY19hbmdsZSIsInhIZWlnaHQiLCJmYW1pbHlDbGFzcyIsImlzU2VyaWYiLCJpc1NjcmlwdCIsImlzRml4ZWRQaXRjaCIsImZvckdseXBoIiwiYWR2YW5jZSIsInJlYWRCeXRlIiwid3JpdGVCeXRlIiwid3JpdGVVSW50MzIiLCJyZWFkSW50MzIiLCJ3cml0ZUludDMyIiwid3JpdGVVSW50MTYiLCJyZWFkSW50MTYiLCJ3cml0ZUludDE2Iiwid3JpdGVTdHJpbmciLCJyZWFkU2hvcnQiLCJ3cml0ZVNob3J0IiwicmVhZExvbmdMb25nIiwid3JpdGVMb25nTG9uZyIsInJlYWRJbnQiLCJ3cml0ZUludCIsInNjYWxhclR5cGUiLCJ0YWJsZUNvdW50Iiwic2VhcmNoUmFuZ2UiLCJlbnRyeVNlbGVjdG9yIiwicmFuZ2VTaGlmdCIsInRhYmxlcyIsInRhZyIsImNoZWNrc3VtIiwiX19zdXBlcl9fIiwiZmlsZSIsInJhdyIsInJldmlzaW9uIiwiY2hlY2tTdW1BZGp1c3RtZW50IiwibWFnaWNOdW1iZXIiLCJjcmVhdGVkIiwibW9kaWZpZWQiLCJtYWNTdHlsZSIsImxvd2VzdFJlY1BQRU0iLCJmb250RGlyZWN0aW9uSGludCIsImluZGV4VG9Mb2NGb3JtYXQiLCJnbHlwaERhdGFGb3JtYXQiLCJwbGF0Zm9ybUlEIiwiZW5jb2RpbmdJRCIsImxhbmd1YWdlIiwiaXNVbmljb2RlIiwib2xkIiwibmV3IiwiY2hhck1hcCIsInN1YnRhYmxlIiwibWF4R2x5cGhJRCIsIkxOMiIsImFkdmFuY2VXaWR0aE1heCIsIm1pbkxlZnRTaWRlQmVhcmluZyIsIm1pblJpZ2h0U2lkZUJlYXJpbmciLCJ4TWF4RXh0ZW50IiwiY2FyZXRTbG9wZVJpc2UiLCJjYXJldFNsb3BlUnVuIiwiY2FyZXRPZmZzZXQiLCJtZXRyaWNEYXRhRm9ybWF0IiwibnVtYmVyT2ZNZXRyaWNzIiwiYXZlcmFnZUNoYXJXaWR0aCIsIndlaWdodENsYXNzIiwid2lkdGhDbGFzcyIsInlTdWJzY3JpcHRYU2l6ZSIsInlTdWJzY3JpcHRZU2l6ZSIsInlTdWJzY3JpcHRYT2Zmc2V0IiwieVN1YnNjcmlwdFlPZmZzZXQiLCJ5U3VwZXJzY3JpcHRYU2l6ZSIsInlTdXBlcnNjcmlwdFlTaXplIiwieVN1cGVyc2NyaXB0WE9mZnNldCIsInlTdXBlcnNjcmlwdFlPZmZzZXQiLCJ5U3RyaWtlb3V0U2l6ZSIsInlTdHJpa2VvdXRQb3NpdGlvbiIsInBhbm9zZSIsImNoYXJSYW5nZSIsInZlbmRvcklEIiwiZmlyc3RDaGFySW5kZXgiLCJsYXN0Q2hhckluZGV4IiwiYXNjZW50IiwiZGVzY2VudCIsIndpbkFzY2VudCIsIndpbkRlc2NlbnQiLCJjb2RlUGFnZVJhbmdlIiwiZGVmYXVsdENoYXIiLCJicmVha0NoYXIiLCJtYXhDb250ZXh0IiwidW5kZXJsaW5lUG9zaXRpb24iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJtaW5NZW1UeXBlNDIiLCJtYXhNZW1UeXBlNDIiLCJtaW5NZW1UeXBlMSIsIm1heE1lbVR5cGUxIiwiZ2x5cGhOYW1lSW5kZXgiLCJuYW1lcyIsIm51bUdseXBocyIsImxhbmd1YWdlSUQiLCJuYW1lSUQiLCJzdHJpbmdzIiwiY29weXJpZ2h0IiwiZm9udFN1YmZhbWlseSIsInVuaXF1ZVN1YmZhbWlseSIsInBvc3RzY3JpcHROYW1lIiwidHJhZGVtYXJrIiwibWFudWZhY3R1cmVyIiwiZGVzaWduZXIiLCJkZXNjcmlwdGlvbiIsInZlbmRvclVybCIsImRlc2lnbmVyVXJsIiwibGljZW5zZSIsImxpY2Vuc2VVcmwiLCJwcmVmZXJyZWRGYW1pbHkiLCJwcmVmZXJyZWRTdWJmYW1pbHkiLCJjb21wYXRpYmxlRnVsbCIsInNhbXBsZVRleHQiLCJtYXhQb2ludHMiLCJtYXhDb250b3VycyIsIm1heENvbXBvc2l0ZVBvaW50cyIsIm1heENvbXBvbmVudENvbnRvdXJzIiwibWF4Wm9uZXMiLCJtYXhUd2lsaWdodFBvaW50cyIsIm1heFN0b3JhZ2UiLCJtYXhGdW5jdGlvbkRlZnMiLCJtYXhJbnN0cnVjdGlvbkRlZnMiLCJtYXhTdGFja0VsZW1lbnRzIiwibWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zIiwibWF4Q29tcG9uZW50RWxlbWVudHMiLCJtYXhDb21wb25lbnREZXB0aCIsIm1ldHJpY3MiLCJsc2IiLCJsZWZ0U2lkZUJlYXJpbmdzIiwiZ2x5cGhGb3IiLCJsZW5ndGhPZiIsIm51bWJlck9mQ29udG91cnMiLCJjb21wb3VuZCIsImdseXBoSURzIiwiZ2x5cGhPZmZzZXRzIiwidW5pY29kZXMiLCJnZW5lcmF0ZUNtYXAiLCJnbHlwaHNGb3IiLCJpc1N0cmluZyIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwiaW5zZXJ0Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImdldFRhcmdldCIsInNldEF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsIm1hcFJlc2l6ZSIsInVwZGF0ZVZhbHVlcyIsImNyZWF0ZUNhbnZhcyIsImdldENhbnZhc0NvbnRhaW5lciIsImdldENhbnZhcyIsInVwZGF0ZUNhbnZhcyIsInN2Z0NhbnZhcyIsInlMaW5lIiwieExpbmUiLCJoYWxmV2lkdGgiLCJoYWxmSGVpZ2h0IiwiY3JlYXRlTGluZSIsImFMaW5lIiwiUGFnZVNpemUiLCJTaXplIiwiQTQiLCJQYWdlT3JpZW50YXRpb24iLCJMYW5kc2NhcGUiLCJGb3JtYXQiLCJQREYiLCJDcm9zc2hhaXIiLCJQcmludGFibGVBcmVhIiwiYWNjZXNzVG9rZW4iLCJvbkRvY3VtZW50Q2xpY2siLCJnZXREZWZhdWx0UG9zaXRpb24iLCJnZXRUcmFuc2xhdGlvbiIsIkxvY2FsIiwiZ2VybWFuIiwiZW5nbGlzaCIsImZyZW5jaCIsImZpbm5pc2giLCJzd2VkaXNoIiwidmlldG5hbSIsIm9uQWRkIiwiY29udHJvbENvbnRhaW5lciIsImV4cG9ydENvbnRhaW5lciIsImV4cG9ydEJ1dHRvbiIsInRvZ2dsZUNyb3NzaGFpciIsInRvZ2dsZVByaW50YWJsZUFyZWEiLCJ0cjEiLCJjcmVhdGVTZWxlY3Rpb24iLCJ0cjIiLCJ0cjMiLCJ0cjQiLCJnZW5lcmF0ZUJ1dHRvbiIsIkdlbmVyYXRlIiwicGFnZU9yaWVudGF0aW9uIiwiZm9ybWF0VHlwZSIsImRwaVR5cGUiLCJvcmllbnRWYWx1ZSIsInBhZ2VTaXplVmFsdWUiLCJQb3J0cmFpdCIsIlVuaXQiLCJtbSIsImdlbmVyYXRlIiwiY29udmVydGVyIiwibGFiZWwiLCJvcHRpb25MYXlvdXQiLCJ1cGRhdGVQcmludGFibGVBcmVhIiwidGRMYWJlbCIsInRkQ29udGVudCIsIm9uUmVtb3ZlIiwiY3Jvc3NoYWlyIiwicHJpbnRhYmxlQXJlYSIsInVwZGF0ZUFyZWEiLCJTVkciLCJpbiIsIkxFVFRFUiIsIkEyIiwiQTMiLCJBNSIsIkE2IiwiQjIiLCJCMyIsIkI0IiwiQjUiLCJCNiIsImRwaSIsImFjY2Vzc3Rva2VuIiwidGhpc18iLCJzaG93IiwiYWN0dWFsUGl4ZWxSYXRpbyIsImhpZGRlbiIsInRvUGl4ZWxzIiwicmVuZGVyTWFwIiwiTWFwIiwiYmVhcmluZyIsImdldEJlYXJpbmciLCJwaXRjaCIsImdldFBpdGNoIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiZmFkZUR1cmF0aW9uIiwiYXR0cmlidXRpb25Db250cm9sIiwidHJhbnNmb3JtUmVxdWVzdCIsIl9yZXF1ZXN0TWFuYWdlciIsIl90cmFuc2Zvcm1SZXF1ZXN0Rm4iLCJpbWFnZXMiLCJpbWFnZU1hbmFnZXIiLCJmaWxlTmFtZSIsInRvUE5HIiwidG9KUEVHIiwidG9QREYiLCJoaWRlIiwidG9CbG9iIiwiYmxvYiIsInVyaSIsImNsaWNrIiwibG5nIiwibGF0IiwicHhXaWR0aCIsInB4SGVpZ2h0Iiwic3ZnIiwiY29udmVyc2lvbkZhY3RvciIsImFwcGVuZCIsInN2Z1BhdGgiLCJnZW5lcmF0ZUN1dE91dCIsInN0YXJ0WCIsImVuZFgiLCJzdGFydFkiLCJlbmRZIiwibWFwYm94Z2wiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiZ2V0UHJvdG90eXBlT2YiLCJucyIsImRlZiIsImRlZmluaXRpb24iLCJjaHVua0lkIiwicHJvbWlzZXMiLCJnbG9iYWxUaGlzIiwiZG9uZSIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwidGltZW91dCIsIm9uU2NyaXB0Q29tcGxldGUiLCJkb25lRm5zIiwic2NyaXB0VXJsIiwiY3VycmVudFNjcmlwdCIsImJhc2VVUkkiLCJpbnN0YWxsZWRDaHVua3MiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwiY2h1bmtMb2FkaW5nR2xvYmFsIiwiYWRkQ29udHJvbCJdLCJzb3VyY2VSb290IjoiIn0=